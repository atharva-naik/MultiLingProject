{
    "accuracy": 0.0,
    "bleu": {
        "bleu": 0.02806394242190974,
        "precisions": [
            0.1523213743040464,
            0.03525434271759664,
            0.014989875614694823,
            0.007705897394174667
        ],
        "brevity_penalty": 1.0,
        "length_ratio": 1.6941182184661712,
        "translation_length": 174401,
        "reference_length": 102945
    },
    "codebleu": 0.11946500762245811,
    "preds": [
        "\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cstring>\n#include <cctype>\n#include <cassert>\n#include <cstdio>\n#include <cstdlib>\n#include <cctype>\n#include <ctime>\n#include <cassert>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <cstdio>\n#include <cassert>\n#include <cstdlib>\n#include <cassert>\n#include <cassert>\n#include <cassert>\n#include <cassert>\n#include <cassert>\n#include <cassert>\n#include <cassert>\n#include",
        ".dom.Element} this\n*/\nExt.dom.Element.prototype.clearPosition = function(value) {\n    this.setPosition(value, 'auto');\n    return this;\n};\n\n/**\n@private\n@method setPosition\n@param {String} value The value to use for the left, right, top, bottom.\nYou could use 'auto'.\n@param {String} [direction=''] The direction to use for the left, right, top, bottom.\nYou could use 'left' or 'right'.\n@return {Ext.dom.Element} this\n*/\nExt.dom.Element.prototype.setPosition = function(value, direction) {\n    var me = this;\n    if (direction == 'left') {\n        me.setLeft(value);\n    } else if (direction == 'right') {\n        me.setRight(value);\n    } else if (direction == 'top') {\n        me.setTop(value);\n    } else if (direction == 'bottom') {\n        me.setBottom(value);\n    }\n    return me;\n};\n\n/**\n@private\n@method setLeft\n@param {Number} value The value to use for the left.\n@return {Ext.dom.Element} this\n*/\nExt.dom.Element.prototype.setLeft",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "]\n*/\nfunction getLocalPosition() {\n  var x = document.documentElement.clientWidth;\n  var y = document.documentElement.clientHeight;\n\n  return [x, y];\n}\n\n/**\n* Gets the local CSS width and height for the element\n\n@return {Array} [width, height]\n*/\nfunction getLocalSize() {\n  var width = document.documentElement.clientWidth;\n  var height = document.documentElement.clientHeight;\n\n  return [width, height];\n}\n\n/**\n* Gets the local CSS position for the element\n\n@return {Array} [x, y]\n*/\nfunction getLocalPosition() {\n  var x = document.documentElement.offsetLeft;\n  var y = document.documentElement.offsetTop;\n\n  return [x, y];\n}\n\n/**\n* Gets the local CSS position for the element\n\n@return {Array} [x, y]\n*/\nfunction getLocalSize() {\n  var width = document.documentElement.offsetWidth;\n  var height = document.documentElement.offsetHeight;\n\n  return [width, height];\n}\n\n/**\n* Gets the local CSS position for the element\n\n@return {Array} [x, y]\n*/\nfunction getLocalPosition() {\n  var x = document.document",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n@param {Number} [width] Set the width of the element\n@param {Number} [height] Set the height of the element\n@param {Number} [margin] Set the margin of the element\n@param {Number} [padding] Set the padding of the element\n@param {Number} [border] Set the border of the element\n@param {Number} [borderRadius] Set the border radius of the element\n@param {Number} [borderWidth] Set the border width of the element\n@param {Number} [borderColor] Set the border color of the element\n@param {Number} [borderRadiusRadius] Set the border radius radius of the element\n@param {Number} [borderColorRadius] Set the border color radius of the element\n@param {Number} [borderWidthRadius] Set the border width radius of the element\n@param {Number} [borderColor] Set the border color of the element\n@param {Number} [borderRadius] Set the border radius of the element\n@param {Number} [borderColorRadius] Set the border color radius of the element\n@param {Number} [borderWidth] Set the border width of the element\n@param {Number} [borderColor] Set the border color of the element\n@param {Number} [borderRadius] Set the border radius of the element\n@param {Number} [borderColorRadius] Set",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        "\n*/\nExt.dom.Element.prototype.setLeft = function(left) {\n    this.setStyle({\n        left: left\n    });\n    return this;\n};\n\n/**\nSets the element's top and bottom positions directly using CSS style\n@param {Number/String} top Number of pixels or CSS string value to\nset as the top CSS property value\n@param {Number/String} bottom Number of pixels or CSS string value to\nset as the bottom CSS property value\n@return {Ext.dom.Element} this\n*/\nExt.dom.Element.prototype.setTop = function(top) {\n    this.setStyle({\n        top: top\n    });\n    return this;\n};\n\n/**\nSets the element's width and height directly using CSS style\n@param {Number/String} width Number of pixels or CSS string value to\nset as the width CSS property value\n@param {Number/String} height Number of pixels or CSS string value to\nset as the height CSS property value\n@return {Ext.dom.Element} this\n*/\nExt.dom.Element.prototype.setWidth = function(width) {\n    this.setStyle({\n        width: width\n    });\n    return this;\n};\n\n/**\nSets the element's width and height directly using CSS style\n@param {Number/String}",
        "\n@param {Boolean} [force] Whether to force the focus to the node.\n@param {Boolean} [forceFocus] Whether to force the focus to the node.\n@param {Boolean} [forceFocusToParent] Whether to force the focus to the parent node.\n@param {Boolean} [forceFocusToParentOnly] Whether to force the focus to the parent node only.\n@param {Boolean} [forceFocusToSelf] Whether to force the focus to the self node.\n@param {Boolean} [forceFocusToSelfOnly] Whether to force the focus to the self node only.\n@param {Boolean} [forceFocusToParentAndSelf] Whether to force the focus to the parent and self node.\n@param {Boolean} [forceFocusToParentAndSelfOnly] Whether to force the focus to the parent and self node only.\n@param {Boolean} [forceFocusToSelfAndSelf] Whether to force the focus to the self and self node only.\n@param {Boolean} [forceFocusToParentAndSelfOnlyOnly] Whether to force the focus to the parent and self and self node only only.\n@param {Boolean} [forceFocusToSelfAndSelfOnlyOnly] Whether to force the focus to the self and self and self node only only only.\n@param {Boolean} [forceFocusToParentAndSelfOnlyOnly] Whether to force the focus to the parent",
        ".\n*/\nExt.define('Ext.tab.TabPanel', {\n    extend: 'Ext.panel.Panel',\n    alias: 'widget.tabpanel',\n    requires: [\n        'Ext.tab.Tab',\n        'Ext.tab.TabPanel'\n    ],\n    xtype: 'tabpanel',\n    title: 'Tab Panel',\n    layout: 'fit',\n    items: [{\n        xtype: 'tab',\n        title: 'Tab 1',\n        iconCls: 'icon-tab',\n        items: [{\n            xtype: 'tabpanel',\n            title: 'Tab 2',\n            iconCls: 'icon-tab',\n            items: [{\n                xtype: 'tabpanel',\n                title: 'Tab 3',\n                iconCls: 'icon-tab',\n                items: [{\n                    xtype: 'tabpanel',\n                    title: 'Tab 4',\n                    iconCls: 'icon-tab',\n                    items: [{\n                        xtype: 'tabpanel',\n                        title: 'Tab 5',\n                        iconCls: 'icon-tab',\n                        items: [{\n                            xtype: 'tabpanel',\n                            title: 'Tab 6',\n                            iconCls: 'icon-tab',\n                            items: [{\n                                xtype: 'tabpanel',\n                                title: '",
        " the currently active item.\n*/\nExt.define('Ext.tab.TabPanel', {\n    extend: 'Ext.panel.Panel',\n    alias: 'widget.tabpanel',\n    requires: [\n        'Ext.tab.TabPanelItem'\n    ],\n    requires: [\n        'Ext.tab.TabPanelItem'\n    ],\n    title: 'Tab Panel',\n    items: [\n        {\n            xtype: 'tabpanelitem',\n            title: 'Tab Panel Item',\n            iconCls: 'x-tabpanel-icon',\n            iconClsCls: 'x-tabpanel-icon-tabpanel',\n            iconClsCls: 'x-tabpanel-icon-tabpanel-item',\n            items: [\n                {\n                    xtype: 'tabpanelitem',\n                    title: 'Tab Panel Item 1',\n                    iconCls: 'x-tabpanel-icon',\n                    iconClsCls: 'x-tabpanel-icon-tabpanel',\n                    iconClsCls: 'x-tabpanel-icon-tabpanel-item',\n                    items: [\n                        {\n                            xtype: 'tabpanelitem',\n                            title: 'Tab Panel Item 2',\n                            iconCls: 'x-tabpanel-icon',\n                            iconClsCls: 'x-tabpanel-icon-tabpanel",
        " to create\n// new objects for the purposes of proxying.\n\n// This file was generated based on 'C:\\ProgramData\\Uno\\Packages\\UnoCore\\0.13.2\\Source\\Uno\\Collections\\$.uno'.\n// WARNING: Changes might be lost if you edit this file directly.\n\n#ifndef __APP_UNO_COLLECTIONS_I_ENUMERATOR__FUSE_ANIMATIONS_TRANSFORM_TRANSFORM_H__\n#define __APP_UNO_COLLECTIONS_I_ENUMERATOR__FUSE_ANIMATIONS_TRANSFORM_TRANSFORM_H__\n\n#include <app/Uno.Object.h>\n#include <Uno.h>\nnamespace app { namespace Fuse { namespace Animations { struct Transform; } } }\n\nnamespace app {\nnamespace Uno {\nnamespace Collections {\n\nstruct IEnumerator__Fuse_Animations_Transform_Transform;\n\nstruct IEnumerator__Fuse_Animations_Transform_Transform__uType : ::uStructType\n{\n};\n\nIEnumerator__Fuse_Animations_Transform_Transform__uType* IEnumerator__Fuse_Animations_Transform_Transform__typeof();\n\nvoid IEnumerator__Fuse_Animations_Transform_Transform___ObjInit_1(IEnumerator",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades",
        "<?php\n\nnamespace App\\Http\\Controllers\\Auth;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesAndRegistersUsers;\nuse Illuminate\\Foundation\\Auth\\Passwords\\CanResetPassword;\nuse Illuminate\\Foundation\\Auth\\Passwords\\CanResetPasswordWithEmail;\nuse Illuminate\\Foundation\\Auth\\User as Authenticatable;\nuse Illuminate\\Foundation\\Auth\\UserInterface;\nuse Illuminate\\Foundation\\Auth\\UserNotFoundException;\nuse Illuminate\\Foundation\\Auth\\ResetsPasswords;\nuse Illuminate\\Foundation\\Auth\\UserPasswordsNotValid;\nuse Illuminate\\Foundation\\Auth\\UserPasswordsValid;\nuse Illuminate\\Contracts\\Auth\\Authenticatable as AuthenticatableContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPassword as CanResetPasswordContract;\nuse Illuminate\\Contracts\\Auth\\CanResetPasswordWithEmail as CanResetPasswordWithEmailContract;\nuse Illuminate\\Contracts\\Auth\\UserInterface as UserInterface;\nuse Illuminate\\Contracts\\Auth\\UserPasswordsNotValid as UserPasswordsNotValidContract;\nuse Illuminate\\Contracts\\Auth\\UserPasswordsValid as UserPasswordsValidContract;\nuse Illuminate\\Contracts\\Auth\\UserInterface as UserInterfaceContract;\nuse Illuminate\\Contracts\\Auth\\UserPasswordsValid as UserPasswordsValidContract;\nuse Illuminate\\Contracts\\Auth\\UserInterface as",
        "\n@returns {Object} The new key\n@example\nvar collection = new Mongo.Collection('users');\ncollection.update({_id: 1}, {$set: {name: 'John Doe'}}, {safe: true});\ncollection.update({_id: 1}, {$set: {name: 'John Doe'}}, {safe: true});\n*/\n\nvar _ = require('underscore');\nvar Collection = require('../collection');\nvar util = require('util');\n\n/**\n * @class\n * @param {Object} options\n * @param {Object} options.collection The collection to update\n * @param {Object} options.update The update to apply to the collection\n * @param {Object} options.safe If true, the collection will be updated in-place\n * @param {Object} options.safe.safe The key to use for the update\n * @param {Object} options.safe.safe.safe The value to use for the update\n * @param {Object} options.safe.safe.safe.safe The value to use for the update\n * @param {Object} options.safe.safe.safe.safe.safe The value to use for the update\n * @param {Object} options.safe.safe.safe.safe.safe The value to use for the update\n * @param {Object} options.safe.",
        ".3.0\n**/\nExt.define('Ext.util.Collection', {\n    extend: 'Ext.util.Observable',\n    requires: ['Ext.util.Observable'],\n    constructor: function(objs) {\n        this.observers = [];\n        this.observers.push(new Ext.util.Observable(this));\n        this.observers.push(new Ext.util.Observable(objs));\n    },\n    /**\n     * @cfg {Boolean} allowFunctions\n     * @private\n     * @description If `true`, all functions will be added to the collection.\n     * @default `false`\n     * @since Ext 1.3.0\n     */\n    allowFunctions: false,\n    /**\n     * @cfg {Boolean} allowFunctions\n     * @private\n     * @description If `true`, all functions will be added to the collection.\n     * @default `false`\n     * @since Ext 1.3.0\n     */\n    allowFunctionsChanged: false,\n    /**\n     * @cfg {Boolean} allowFunctions\n     * @private\n     * @description If `true`, all functions will be added to the collection.\n     * @default `false`\n     * @since Ext 1.3.0\n     */\n    allowFunctionsChanged: false,\n    /**\n",
        ".4\n**/\nExt.define('Ext.util.Iterator', {\n    extend: 'Ext.util.IteratorBase',\n    alias: 'widget.iterator',\n    requires: ['Ext.util.IteratorBase'],\n    constructor: function(fn, scope) {\n        this.fn = fn;\n        this.scope = scope;\n        this.index = 0;\n        this.len = fn.length;\n        this.items = [];\n        this.stop = false;\n    },\n    /**\n     * @cfg {Boolean} [stop=false]\n     * <p>\n     * If true, the iterator will stop when the function returns false.\n     * </p>\n     */\n    /**\n     * @cfg {Mixed} [item=null]\n     * <p>\n     * The item to iterate over.\n     * </p>\n     */\n    /**\n     * @cfg {Number} [index=0]\n     * <p>\n     * The index of the item to iterate over.\n     * </p>\n     */\n    /**\n     * @cfg {Number} [len=null]\n     * <p>\n     * The total length of the collection.\n     * </p>\n     */\n    /**\n     * @cfg {Object} [scope=",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        ".0\n*/\nExt.define('Ext.data.Collection', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'Ext.data.Model',\n        'Ext.data.Field',\n        'Ext.data.FieldSet',\n        'Ext.data.FieldStore',\n        'Ext.data.FieldStore.Field',\n        'Ext.data.FieldStore.FieldSet',\n        'Ext.data.FieldStore.FieldStore.Field'\n    ],\n    fields: [\n        'id',\n        'name',\n        'type',\n        'value',\n        'description',\n        'is_required',\n        'is_editable',\n        'is_readonly',\n        'is_collection',\n        'is_collection_type',\n        'is_collection_type_id',\n        'is_collection_type_name',\n        'is_collection_type_value',\n        'is_collection_type_description',\n        'is_collection_type_is_required',\n        'is_collection_type_is_editable',\n        'is_collection_type_is_readonly',\n        'is_collection_type_is_collection',\n        'is_collection_type_is_collection_type',\n        'is_collection_",
        ".\n@method remove\n@param {Array} [items] An array of items to be removed.\n@return {Ext.util.MixedCollection} this.\n@static\n@since 1.3.0\n**/\nExt.util.MixedCollection.prototype.remove = function(items) {\n    var me = this;\n    if (items) {\n        me.each(function(item) {\n            if (Ext.Array.contains(items, item)) {\n                me.remove(item);\n            }\n        });\n    } else {\n        me.each(function(item) {\n            me.remove(item);\n        });\n    }\n    return me;\n};\n\n/**\n@method removeAt\n@param {Number} index The index of the item to be removed.\n@return {Ext.util.MixedCollection} this.\n@static\n@since 1.3.0\n**/\nExt.util.MixedCollection.prototype.removeAt = function(index) {\n    var me = this;\n    me.each(function(item) {\n        if (me.indexOf(item) === index) {\n            me.remove(item);\n        }\n    });\n    return me;\n};\n\n/**\n@method removeAll\n@return {Ext.util.MixedCollection} this",
        ".0\n*/\nExt.define('Ext.util.Collection', {\n    extend: 'Ext.util.Observable',\n    requires: ['Ext.util.Observable'],\n    constructor: function(collection) {\n        this.collection = collection;\n        this.observers = [];\n    },\n    /**\n     * Adds an observer to the collection.\n     * @param {Object} o  The observer to add.\n     * @param {Function} [callback]  The callback to call when the observer is added.\n     * @param {Object} [scope]  The scope to call the callback with.\n     * @return {Boolean} True if the observer was added.\n     * @since Ext 1.0\n     */\n    addObserver: function(o, callback, scope) {\n        if (o.observe) {\n            this.observers.push({\n                observe: o.observe,\n                callback: callback,\n                scope: scope\n            });\n        } else {\n            this.observers.push({\n                observe: o,\n                callback: callback,\n                scope: scope\n            });\n        }\n        return true;\n    },\n    /**\n     * Removes an observer from the collection.\n     * @param {Object} o  The observer to remove.\n     * @param {",
        " of the values of the given property\n@method sum\n@param {String} property The property to sum by\n@param {String} [root] 'root' property to extract the first argument from. This is used mainly when\nsumming fields in records, where the fields are all stored inside the 'data' object\n@param {Number} [start=0] The record index to start at\n@param {Number} [end=-1] The record index to end at\n@return {Number} The total of the values of the given property\n@static\n@example\nvar sum = require('sum-of-values')('data.name');\nsum(['name', 'age', 'height', 'weight'], 'name'); // => 6\nsum(['name', 'age', 'height', 'weight'], 'age'); // => 6\nsum(['name', 'age', 'height', 'weight'], 'age', 0); // => 0\nsum(['name', 'age', 'height', 'weight'], 'age', -1); // => -1\nsum(['name', 'age', 'height', 'weight'], 'age', 0, -1); // => -1\nsum(['name', 'age', 'height', 'weight'], 'age', -1, 0); // => -1\nsum(['name', 'age', 'height', 'weight'], '",
        ".\n*/\nMixedCollection.prototype.unique = function(property, root, allowBlank) {\n  var self = this;\n  var result = [];\n  var data = this.data;\n  var i, len;\n  if (root === undefined) {\n    root = property;\n  }\n  if (allowBlank === undefined) {\n    allowBlank = true;\n  }\n  for (i = 0, len = data.length; i < len; i++) {\n    if (data[i][root] === undefined) {\n      continue;\n    }\n    if (result.indexOf(data[i][root]) === -1) {\n      result.push(data[i][root]);\n    }\n  }\n  return result;\n};\n\n/**\nCollects unique values of a particular property in this MixedCollection\n@param {String} property The property to collect on\n@param {String} root (optional) 'root' property to extract the first argument from. This is used mainly when\nsumming fields in records, where the fields are all stored inside the 'data' object\n@param {Boolean} allowBlank (optional) Pass true to allow null, undefined or empty string values\n@return {Array} The unique values\n*/\nMixedCollection.prototype.uniqueValues = function(property, root, allowBlank) {",
        ".1.2\n*/\nExt.util.MixedCollection.prototype.clone = function() {\n    var clone = new Ext.util.MixedCollection();\n    clone.addAll(this);\n    return clone;\n};\n\n/**\nCreates a shallow copy of this collection\n@return {Ext.util.MixedCollection}\n@since Ext 1.2\n*/\nExt.util.MixedCollection.prototype.cloneDeep = function() {\n    var clone = new Ext.util.MixedCollection();\n    clone.addAll(this);\n    clone.addAll(this);\n    return clone;\n};\n\n/**\nCreates a shallow copy of this collection\n@return {Ext.util.MixedCollection}\n@since Ext 1.2\n*/\nExt.util.MixedCollection.prototype.cloneDeepDeep = function() {\n    var clone = new Ext.util.MixedCollection();\n    clone.addAll(this);\n    clone.addAll(this);\n    clone.addAll(this);\n    return clone;\n};\n\n/**\nCreates a shallow copy of this collection\n@return {Ext.util.MixedCollection}\n@since Ext 1.2\n*/\nExt.util.MixedCollection.prototype.cloneDeepDeepDeep = function() {\n    var clone = new Ext.util.MixedCollection();\n    clone.addAll(",
        "\n    // and returns the image.\n    function convertImage(img) {\n        var imgData = img.getData();\n        var imgDataURL = imgData.toString('base64');\n        var imgDataURLEncoded = window.btoa(imgDataURL);\n        var imgDataURLEncodedEncoded = window.atob(imgDataURLEncoded);\n        var imgDataURLEncodedEncodedEncoded = window.btoa(imgDataURLEncodedEncoded);\n        var imgDataURLEncodedEncodedEncoded = window.atob(imgDataURLEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncoded = window.btoa(imgDataURLEncodedEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncodedEncoded = window.atob(imgDataURLEncodedEncodedEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncodedEncoded = window.atob(imgDataURLEncodedEncodedEncodedEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncodedEncoded = window.atob(imgDataURLEncodedEncodedEncodedEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncodedEncodedEncoded = window.atob(imgDataURLEncodedEncodedEncodedEncodedEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncodedEncodedEncoded = window.atob(imgDataURLEncodedEncodedEncodedEncodedEncodedEncodedEncoded);\n        var imgDataURLEncodedEncodedEncodedEncodedEncoded = window.atob(imgDataURL",
        ".\n*/\n\nvar getType = require('./getType');\n\nmodule.exports = getType;\n",
        "\n\n    // \u5224\u65ad\u662f\u5426\u662f\u5426\u6b63\u5728\u64ad\u653e\n    if (player.isPlaying()) {\n        player.stop();\n        player.pause();\n        player.setVolume(0);\n        player.setCurrentTime(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n        player.setCurrentPosition(0);\n",
        "\n@param {String} binding.defaultPreventedAction A default action to apply to the event.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n@param {String} binding.defaultPreventedByDefaultAction A default action to apply to the event.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n@param {String} binding.defaultPreventedByDefaultAction A default action to apply to the event.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n@param {String} binding.defaultPreventedByDefaultAction A default action to apply to the event.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n@param {String} binding.defaultPreventedByDefaultAction A default action to apply to the event.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n@param {String} binding.defaultPreventedByDefaultAction A default action to apply to the event.\nPossible values are: stopEvent, stopPropagation, preventDefault. If no value is\nset no action is performed..\n@param {String} binding.defaultPreventedByDefaultAction A default action to apply to the event.\nPossible",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.security",
        " The binding to process\n@param {Function} handler The handler to fire\n@param {Object} scope The scope to fire the handler in\n@param {Boolean} [isAsync] Whether the handler should be executed asynchronously\n@param {Boolean} [isAsyncOnly] Whether the handler should be executed asynchronously only\n@param {Boolean} [isAsyncOnlyOnly] Whether the handler should be executed asynchronously only only\n@param {Boolean} [isAsyncOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only\n@param {Boolean} [isAsyncOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only\n@param {Boolean} [isAsyncOnlyOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only only\n@param {Boolean} [isAsyncOnlyOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only only only\n@param {Boolean} [isAsyncOnlyOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only only only\n@param {Boolean} [isAsyncOnlyOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only only only\n@param {Boolean} [isAsyncOnlyOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only only only only\n@param {Boolean} [isAsyncOnlyOnlyOnlyOnly] Whether the handler should be executed asynchronously only only only only only only only\n@param",
        ".EventObject.MODIFIER_*\n*/\nExt.define('Ext.ux.Binding', {\n    extend: 'Ext.util.Observable',\n    alias: 'widget.binding',\n    requires: [\n        'Ext.util.Observable',\n        'Ext.util.Observable.Event'\n    ],\n    constructor: function(binding, event) {\n        this.binding = binding;\n        this.event = event;\n    },\n    /**\n    @private\n    @method bind\n    @param {Object} binding\n    @param {Object} event\n    @param {Boolean} [isBound]\n    @param {Boolean} [isBoundTo]\n    @param {Boolean} [isBoundToAll]\n    @param {Boolean} [isBoundToAny]\n    @param {Boolean} [isBoundToAllOrAny]\n    @param {Boolean} [isBoundToAnyOrAny]\n    @param {Boolean} [isBoundToAnyOrAnyOrAny]\n    @param {Boolean} [isBoundToAnyOrAnyOrAny]\n    @param {Boolean} [isBoundToAnyOrAnyOrAny]\n    @param {Boolean} [isBoundToAnyOrAnyOrAny]\n    @param {Boolean} [isBoundToAnyOrAnyOrAny]\n    @param {Boolean",
        ".\n@param {Object} [options] An object with the following options: `{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}`\n@param {Function} [callback] The function to call when the key is pressed\n@param {Object} [scope] The scope (`this` reference) in which the function is executed.\nDefaults to the browser window.\n@param {Boolean} [preventDefault] Whether to prevent the default action (default: false)\n@param {Boolean} [stopPropagation] Whether to stop the propagation (default: false)\n@param {Boolean} [preventDefaultOnClick] Whether to prevent the default action (default: false)\n@param {Boolean} [stopPropagationOnClick] Whether to stop the propagation (default: false)\n@param {Boolean} [preventDefaultOnKeyDown] Whether to prevent the default action (default: false)\n@param {Boolean} [stopPropagationOnKeyDown] Whether to stop the propagation (default: false)\n@param {Boolean} [preventDefaultOnKeyUp] Whether to prevent the default action (default: false)\n@param {Boolean} [stopPropagationOnKeyUp] Whether to stop the propagation (default: false)\n@param {Boolean} [preventDefaultOnKeyPress] Whether to prevent the default action (default: false)",
        "\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return void\n     */\n    public function set($name, $value)\n    {\n        $this->set($name, $value, true);\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return void\n     */\n    public function set($name, $value, $expire = 0)\n    {\n        $this->set($name, $value, $expire, true);\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @param int $expire\n     * @return void\n     */\n    public function set($name, $value, $expire = 0, $strict = false)\n    {\n        $this->set($name, $value, $expire, $strict);\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return void\n     */\n    public function set($name, $value)\n    {\n        $this->set($name, $value, false);\n    }\n\n    /**\n     * @param string $name\n     * @return void\n     */\n    public function remove($name",
        "\n\n    def test_key_map_with_multiple_keys(self):\n        self.assertEqual(len(KeyMap()), 0)\n\n        self.assertEqual(len(KeyMap(['a', 'b'])), 1)\n        self.assertEqual(len(KeyMap(['a', 'b', 'c'])), 2)\n\n        self.assertEqual(len(KeyMap(['a', 'b', 'c', 'd'])), 3)\n\n        self.assertEqual(len(KeyMap(['a', 'b', 'c', 'd', 'e'])), 4)\n\n        self.assertEqual(len(KeyMap(['a', 'b', 'c', 'd', 'e', 'f'])), 5)\n\n        self.assertEqual(len(KeyMap(['a', 'b', 'c', 'd', 'e', 'f', 'g'])), 6)\n\n        self.assertEqual(len(KeyMap(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])), 7)\n\n        self.assertEqual(len(KeyMap(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])), 8)\n\n        self.assert",
        " handler for the {@link #onKeyDown} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyUp} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyPress} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyRelease} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyDown} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyUp} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyPress} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyRelease} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyDown} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyUp} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyPress} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyRelease} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyDown} event.\n@param {Boolean} removeTarget True to also remove the {@link #onKeyUp} event.\n",
        ".\n\nvar context = document.getElementById('context');\nvar contextItems = context.querySelectorAll('.context-item');\nvar contextItemsCount = contextItems.length;\n\nfor (var i = 0; i < contextItemsCount; i++) {\n  var contextItem = contextItems[i];\n  contextItem.addEventListener('click', function(e) {\n    e.preventDefault();\n    var contextItem = this;\n    var context = document.getElementById('context');\n    var contextItems = context.querySelectorAll('.context-item');\n    var contextItemsCount = contextItems.length;\n    for (var j = 0; j < contextItemsCount; j++) {\n      var contextItem = contextItems[j];\n      contextItem.addEventListener('click', function(e) {\n        e.preventDefault();\n        var contextItem = this;\n        var context = document.getElementById('context');\n        var contextItems = context.querySelectorAll('.context-item');\n        var contextItemsCount = contextItems.length;\n        for (var k = 0; k < contextItemsCount; k++) {\n          var contextItem = contextItems[k];\n          contextItem.addEventListener('click', function(e) {\n            e.preventDefault();\n            var contextItem = this;\n            var",
        "\n@param {Ext.dom.Element} el\n@param {Boolean} removeChildren\n@private\n*/\nExt.layout.ContextItem.prototype.remove = function(parent, el, removeChildren) {\n    var children = parent.children;\n    if (children) {\n        for (var i = 0, len = children.length; i < len; i++) {\n            if (children[i] == el) {\n                children.splice(i, 1);\n                if (removeChildren) {\n                    parent.children = children;\n                }\n                return;\n            }\n        }\n    }\n    parent.cache.remove(el);\n    if (removeChildren) {\n        parent.children = [];\n    }\n};\n\n/**\n@private\n*/\nExt.layout.ContextItem.prototype.onCacheChanged = function() {\n    this.fireEvent('cachechanged', this);\n};\n\n/**\n@private\n*/\nExt.layout.ContextItem.prototype.onCacheClear = function() {\n    this.fireEvent('cacheclear', this);\n};\n\n/**\n@private\n*/\nExt.layout.ContextItem.prototype.onCacheClearAll = function() {\n    this.fireEvent('cacheclearall', this);\n};\n\n/**\n@private\n*/\nExt.",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        ".\n@param {Boolean} [force] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSize] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnlyOnly] Whether to force the size to be set to the same size as the original.\n@param {Boolean} [forceSizeOnlyOnlyOnlyOnly]",
        "\n@param {Boolean} setStore Sets the new model on the associated Store, if one is present\n@param {Boolean} setStoreOnly Sets the new model on the associated Store only, if one is present\n@param {Boolean} setStoreOnlyOnly Sets the new model on the associated Store only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnly Sets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new model on the associated Store only only only, if one is present\n@param {Boolean} setStoreOnlyOnlyOnlySets the new",
        "\n*/\nExt.define('Ext.data.proxy.Reader', {\n    extend: 'Ext.data.proxy.Proxy',\n    alias: 'proxy.reader',\n    requires: [\n        'Ext.data.reader.Reader'\n    ],\n    constructor: function(reader) {\n        this.reader = reader;\n    },\n    /**\n     * @cfg {String} type The type of the reader to set.\n     * @cfg {Object} config The configuration object for the reader.\n     */\n    /**\n     * @cfg {String} type The type of the reader to set.\n     * @cfg {Object} config The configuration object for the reader.\n     */\n    /**\n     * @cfg {String} type The type of the reader to set.\n     * @cfg {Object} config The configuration object for the reader.\n     */\n    /**\n     * @cfg {String} type The type of the reader to set.\n     * @cfg {Object} config The configuration object for the reader.\n     */\n    /**\n     * @cfg {String} type The type of the reader to set.\n     * @cfg {Object} config The configuration object for the reader.\n     */\n    /**\n     * @cfg {String} type The type of the reader to set.\n     * @cfg {",
        ".data.writer.Writer\n*/\nExt.define('Ext.data.proxy.Proxy', {\n    extend: 'Ext.data.proxy.Proxy',\n    alias: 'proxy.writer',\n\n    /**\n     * @cfg {String} type The type of the Writer to set.\n     * @cfg {Object} config The configuration object for the Writer.\n     */\n\n    /**\n     * @cfg {String} type The type of the Writer to set.\n     * @cfg {Object} config The configuration object for the Writer.\n     */\n\n    /**\n     * @cfg {String} type The type of the Writer to set.\n     * @cfg {Object} config The configuration object for the Writer.\n     */\n\n    /**\n     * @cfg {String} type The type of the Writer to set.\n     * @cfg {Object} config The configuration object for the Writer.\n     */\n\n    /**\n     * @cfg {String} type The type of the Writer to set.\n     * @cfg {Object} config The configuration object for the Writer.\n     */\n\n    /**\n     * @cfg {String} type The type of the Writer to set.\n     * @cfg {Object} config The configuration object for the Writer.\n     */\n\n    /**\n     * @cfg {String} type The type",
        "\n@return {String}\n*/\nfunction logFileName(name) {\n  return name + '.log';\n}\n\n/**\nDetermine the file to write the current log file to\n@param  {String}   name\n@return {Function}\n*/\nfunction logFileName2(name) {\n  return name + '.log2';\n}\n\n/**\nDetermine the file to write the current log file to\n@param  {String}   name\n@return {Function}\n*/\nfunction logFileName3(name) {\n  return name + '.log3';\n}\n\n/**\nDetermine the file to write the current log file to\n@param  {String}   name\n@return {Function}\n*/\nfunction logFileName4(name) {\n  return name + '.log4';\n}\n\n/**\nDetermine the file to write the current log file to\n@param  {String}   name\n@return {Function}\n*/\nfunction logFileName5(name) {\n  return name + '.log5';\n}\n\n/**\nDetermine the file to write the current log file to\n@param  {String}   name\n@return {Function}\n*/\nfunction logFileName6(name) {\n  return name + '.log6';\n}\n\n/**\nDetermine the file to write the current log file to\n@param ",
        "]\n@return {Function} [description]\n*/\nfunction updateLog(log) {\n  return function(next) {\n    log.update(next);\n  };\n}\n\n/**\nGenerates a function that will perform logic required\nto delete a log entry.\n@param  {Log} log [description]\n@return {Function} [description]\n*/\nfunction deleteLog(log) {\n  return function(next) {\n    log.delete(next);\n  };\n}\n\n/**\nGenerates a function that will perform logic required\nto delete a log entry.\n@param  {Log} log [description]\n@return {Function} [description]\n*/\nfunction deleteLog(log) {\n  return function(next) {\n    log.delete(next);\n  };\n}\n\n/**\nGenerates a function that will perform logic required\nto delete a log entry.\n@param  {Log} log [description]\n@return {Function} [description]\n*/\nfunction deleteLog(log) {\n  return function(next) {\n    log.delete(next);\n  };\n}\n\n/**\nGenerates a function that will perform logic required\nto delete a log entry.\n@param  {Log} log [description]\n@return {Function} [description]\n*/\nfunction delete",
        "\n@return {Function} callback\n*/\nexports.read = function(name, callback) {\n  var log = require('./log');\n  log.read(name, function(err, data) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, data);\n  });\n};\n\n/**\nWrite a log file with the given name\n@param  {String}   name\n@param  {Object}   data\n@param  {Function} callback\n*/\nexports.write = function(name, data, callback) {\n  var log = require('./log');\n  log.write(name, data, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null);\n  });\n};\n\n/**\nDelete a log file with the given name\n@param  {String}   name\n@param  {Function} callback\n*/\nexports.delete = function(name, callback) {\n  var log = require('./log');\n  log.delete(name, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null);\n  });\n};\n\n/**\nList all log files\n@param  {Function} callback\n*/\n",
        "\n@return {Boolean}\n*/\nfunction deleteLog(name, callback) {\n    var log = require('./log');\n    log.delete(name, callback);\n}\n\n/**\nDelete a log file with the given name\n@param  {String}   name\n@param  {Function} callback\n*/\nfunction deleteLog(name, callback) {\n    deleteLog(name, function() {\n        callback();\n    });\n}\n\n/**\nDelete a log file with the given name\n@param  {String}   name\n@param  {Function} callback\n*/\nfunction deleteLog(name, callback) {\n    deleteLog(name, function() {\n        callback();\n    });\n}\n\n/**\nDelete a log file with the given name\n@param  {String}   name\n@param  {Function} callback\n*/\nfunction deleteLog(name, callback) {\n    deleteLog(name, function() {\n        callback();\n    });\n}\n\n/**\nDelete a log file with the given name\n@param  {String}   name\n@param  {Function} callback\n*/\nfunction deleteLog(name, callback) {\n    deleteLog(name, function() {\n        callback();\n    });\n}\n\n/**\nDelete a log file with the given name\n@param  {String",
        "\n *\n * @package\t\tCodeIgniter\n * @subpackage\tLibraries\n * @category\tLibraries\n * @author\t\tExpressionEngine Dev Team\n * @link\t\thttp://codeigniter.com/user_guide/libraries/database.html\n */\nclass CI_DB_mysql extends CI_DB {\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn_id;\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn_mysql;\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn_pgsql;\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn_pgsql_pgsql;\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn_pgsql_pgsql_pgsql;\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn_pgsql_pgsql_pgsql;\n\n\t/**\n\t * Database connection\n\t *\n\t * @var\tresource\n\t */\n\tprotected $_conn",
        "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <assert.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n#include <stdarg.h>\n",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.n",
        "\n\n    // Load the default settings\n    $.extend(true, settings, {\n        \"default\": {\n            \"title\": \"Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to the Welcome to",
        ".\n\n\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t//\t\t",
        "\n    //\n    // The following methods are used to determine the status of a given\n    // status.\n    //\n    // A.status.isReady()\n    //   Returns true if the status is ready.\n    //\n    // B.status.isReady(status)\n    //   Returns true if the status is ready for the given status.\n    //\n    // C.status.isReady(status, status)\n    //   Returns true if the status is ready for the given status and the\n    //   provided status is ready for the given status.\n    //\n    // D.status.isReady(status, status, status)\n    //   Returns true if the status is ready for the given status and the\n    //   provided status is ready for the given status and the provided\n    //   status is ready for the given status.\n    //\n    // E.status.isReady(status, status, status, status)\n    //   Returns true if the status is ready for the given status and the\n    //   provided status is ready for the given status and the provided\n    //   status is ready for the given status and the provided status is\n    //   ready for the given status.\n    //\n    // F.status.isReady(status, status, status, status, status)\n    //   Returns true if",
        ".\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that the command's arguments are not\nprovided by the command's sender.\n\nThis is a hack to get around the fact that",
        "!\n\n@param command [String] The command to execute\n@param request [Object] The request object\n@param callback [Function] The callback function\n@param context [Object] The context object\n@param [options] [Object] The options object\n@param [callback.done] [Function] The callback function\n@param [callback.error] [Function] The callback function\n@param [callback.timeout] [Function] The callback function\n@param [callback.timeout.value] [Number] The timeout value\n@param [callback.timeout.unit] [String] The timeout unit\n@param [callback.timeout.callback] [Function] The callback function\n@param [callback.timeout.callback.value] [Object] The callback function\n@param [callback.timeout.callback.unit] [String] The callback function unit\n@param [callback.timeout.callback.callback] [Function] The callback function\n@param [callback.timeout.callback.callback.value] [Object] The callback function unit\n@param [callback.timeout.callback.callback.callback] [Function] The callback function unit\n@param [callback.timeout.callback.callback.callback] [Function] The callback function unit\n@param [callback.timeout.callback.callback.callback] [Function] The callback function unit\n@param [callback.timeout.callback.callback.callback] [",
        "\n\n    def initialize(self, name, **kwargs):\n        super(Template, self).__init__(name, **kwargs)\n        self.template = Template(self.template_name)\n\n    def render(self, context):\n        return self.template.render(context)\n\n    def render_to_string(self, context):\n        return self.template.render_to_string(context)\n\n    def render_to_string_with_context(self, context):\n        return self.template.render_to_string_with_context(context)\n\n    def render_to_string_with_context_with_vars(self, context, vars):\n        return self.template.render_to_string_with_context_with_vars(context, vars)\n\n    def render_to_string_with_context_with_vars_with_vars(self, context, vars, vars_with_vars):\n        return self.template.render_to_string_with_context_with_vars(context, vars, vars_with_vars)\n\n    def render_to_string_with_context_with_vars_with_vars(self, context, vars, vars_with_vars, vars_with_vars_with_vars):\n        return self.template.render_",
        "\n\n    def test_on_match_with_empty_string(self):\n        self.assertEqual(self.on_match('<'), '<')\n\n    def test_on_match_with_empty_list(self):\n        self.assertEqual(self.on_match(['<']), '<')\n\n    def test_on_match_with_empty_dict(self):\n        self.assertEqual(self.on_match({'<': '<'}), '<')\n\n    def test_on_match_with_empty_dict_with_empty_list(self):\n        self.assertEqual(self.on_match({'<': '<', '<': '<'}), '<')\n\n    def test_on_match_with_empty_dict_with_empty_dict(self):\n        self.assertEqual(self.on_match({'<': '<', '<': '<', '<': '<'}), '<')\n\n    def test_on_match_with_empty_dict_with_empty_dict(self):\n        self.assertEqual(self.on_match({'<': '<', '<': '<', '<': '<'}), '<')\n\n    def test_on_match_with_empty_dict_with_empty_dict(self):\n        self.",
        "\n\n    def test_match_with_no_match(self):\n        \"\"\"\n        Tests that a match with no match is not a match.\n        \"\"\"\n        self.assertFalse(self.match(None, None))\n\n    def test_match_with_no_match_with_match(self):\n        \"\"\"\n        Tests that a match with no match with a match is a match.\n        \"\"\"\n        self.assertTrue(self.match(None, 'zc-'))\n\n    def test_match_with_match_with_match(self):\n        \"\"\"\n        Tests that a match with match with a match is a match.\n        \"\"\"\n        self.assertTrue(self.match('zc-', 'zc-'))\n\n    def test_match_with_match_with_match_with_match(self):\n        \"\"\"\n        Tests that a match with match with a match with a match is a match.\n        \"\"\"\n        self.assertTrue(self.match('zc-', 'zc-'))\n\n    def test_match_with_match_with_match_with_match(self):\n        \"\"\"\n        Tests that a match with match with a match with a match is a match.\n        \"\"\"\n        self.assertTrue(self.match('",
        "\n\n    def test_get_server_info(self):\n        \"\"\"\n        Test the get_server_info method.\n        \"\"\"\n        # Create a new server\n        server = self.create_server()\n\n        # Create a new server with a new server_id\n        server_id = self.create_server(server_id=server.id)\n\n        # Get the server info\n        server_info = self.client.get_server_info(server.id)\n\n        # Verify the server info\n        self.assertEqual(server.id, server_info['server_id'])\n        self.assertEqual(server.name, server_info['name'])\n        self.assertEqual(server.description, server_info['description'])\n        self.assertEqual(server.status, server_info['status'])\n        self.assertEqual(server.status_description, server_info['status_description'])\n        self.assertEqual(server.status_code, server_info['status_code'])\n        self.assertEqual(server.status_message, server_info['status_message'])\n        self.assertEqual(server.status_details, server_info['status_details'])\n        self.assertEqual(server.status_details_url, server_info['status_details_url'])\n",
        ".com\n\n*/\n\n/**\n * This class is used to handle the deletion of a file.\n *\n * @class tinymce.ui.FileDialog\n * @extends tinymce.ui.Dialog\n * @constructor\n * @param {Object} config Configuration object.\n */\ntinymce.ui.FileDialog = function(config) {\n\ttinymce.ui.Dialog.call(this, config);\n\n\tthis.on('click', 'a', function() {\n\t\tvar self = this;\n\n\t\tvar url = this.getAttribute('href');\n\t\tvar name = this.getAttribute('name');\n\t\tvar type = this.getAttribute('type');\n\t\tvar title = this.getAttribute('title');\n\t\tvar width = this.getAttribute('width');\n\t\tvar height = this.getAttribute('height');\n\t\tvar buttons = this.getAttribute('buttons');\n\t\tvar default_button = this.getAttribute('default_button');\n\t\tvar default_text = this.getAttribute('default_text');\n\t\tvar default_text_alt = this.getAttribute('default_text_alt');\n\t\tvar default_text_class = this.getAttribute('default_text_class');\n\t\tvar default_text_style",
        ".\n\nThis is a temporary workaround for https://github.com/mozilla/gecko/issues/4243.\n\n@module mozu\n@submodule mozu-browser\n@since 1.0\n@license MIT\n*/\n\nvar _ = require('underscore');\nvar Backbone = require('backbone');\nvar Marionette = require('backbone.marionette');\nvar MarionetteView = require('backbone.marionette.view');\nvar MarionetteLayout = require('backbone.marionette.layout');\nvar MarionetteLayoutView = require('backbone.marionette.layout.view');\nvar MarionetteLayoutCollection = require('backbone.marionette.layout.collection');\nvar MarionetteLayoutCollectionView = require('backbone.marionette.layout.collection.view');\nvar MarionetteLayoutCollectionCollection = require('backbone.marionette.layout.collection.collection');\nvar MarionetteLayoutCollectionCollectionView = require('backbone.marionette.layout.collection.collection.view');\nvar MarionetteLayoutCollectionCollectionCollection = require('backbone.marionette.layout.collection.collection.collection');\nvar MarionetteLayoutCollectionCollectionCollectionView = require('backbone.marion",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        " is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param {Object} scope The execution scope (`this`) if the closure is invoked within the scope of the closure\n@param",
        "\n    def __init__(self, *args, **kwargs):\n        super(BaseModel, self).__init__(*args, **kwargs)\n        self.fields = {}\n        self.fields_dict = {}\n        self.fields_dict_dict = {}\n        self.fields_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}\n        self.fields_dict_dict_dict_dict = {}",
        ".\n@param {string} [options.output] The output directory.\n@param {string} [options.output.dir] The output directory.\n@param {string} [options.output.file] The output file.\n@param {string} [options.output.file.ext] The output file extension.\n@param {string} [options.output.file.ext.js] The output file extension.\n@param {string} [options.output.file.ext.css] The output file extension.\n@param {string} [options.output.file.ext.png] The output file extension.\n@param {string} [options.output.file.ext.jpg] The output file extension.\n@param {string} [options.output.file.ext.jpeg] The output file extension.\n@param {string} [options.output.file.ext.gif] The output file extension.\n@param {string} [options.output.file.ext.svg] The output file extension.\n@param {string} [options.output.file.ext.ttf] The output file extension.\n@param {string} [options.output.file.ext.woff] The output file extension.\n@param {string} [options.output.file.ext.woff2] The output file extension.\n@param {string",
        ".\n\n@param {Object} options The options to add.\n@param {String} options.name The name of the feature.\n@param {String} options.description The description of the feature.\n@param {String} options.type The type of the feature.\n@param {String} options.view The view of the feature.\n@param {String} options.parse The view of the parse option.\n@param {String} options.transform The view of the transform option.\n@param {String} options.parseView The view of the parse option.\n@param {String} options.transformView The view of the transform option.\n@param {String} options.viewType The view type of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.viewTypeDescription The view type description of the feature.\n@param {String} options.view",
        ".\n\n@method initialize\n@param {Object} options\n@param {Object} options.field\n@param {Object} options.field.type\n@param {Object} options.field.options\n@param {Object} options.field.options.label\n@param {Object} options.field.options.placeholder\n@param {Object} options.field.options.required\n@param {Object} options.field.options.readonly\n@param {Object} options.field.options.readonly.label\n@param {Object} options.field.options.readonly.placeholder\n@param {Object} options.field.options.readonly.required\n@param {Object} options.field.options.readonly.readonly\n@param {Object} options.field.options.readonly.readonly.label\n@param {Object} options.field.options.readonly.readonly.placeholder\n@param {Object} options.field.options.readonly.readonly.required\n@param {Object} options.field.options.readonly.readonly.readonly\n@param {Object} options.field.options.readonly.readonly.readonly.label\n@param {Object} options.field.options.readonly.readonly.readonly.placeholder\n@param {Object} options.field.options.readonly.readonly.readonly.required\n@param {Object} options.field.options.readonly.readonly.readonly.",
        "\n*/\n\nvar munged = function(str, options) {\n  var encoding = options.encoding || 'random';\n  var str = str.toString(encoding);\n  return str.replace(/\\s+/g, '');\n};\n\nmodule.exports = munged;\n",
        "\n\n    def test_get_plugin_by_name(self):\n        plugin = self.plugin_manager.get_plugin_by_name('test')\n        self.assertEqual(plugin, self.plugin_manager.get_plugin_by_name('test'))\n\n    def test_get_plugin_by_name_not_found(self):\n        self.assertRaises(\n            PluginManager.PluginNotFound,\n            self.plugin_manager.get_plugin_by_name, 'not_found')\n\n    def test_get_plugin_by_name_not_found_with_plugin_id(self):\n        self.assertRaises(\n            PluginManager.PluginNotFound,\n            self.plugin_manager.get_plugin_by_name, 'not_found', 'plugin_id')\n\n    def test_get_plugin_by_name_not_found_with_plugin_name(self):\n        self.assertRaises(\n            PluginManager.PluginNotFound,\n            self.plugin_manager.get_plugin_by_name, 'not_found', 'plugin_name')\n\n    def test_get_plugin_by_name_not_found_with_plugin_id_and_plugin_name(self):\n        self.assertRaises(\n            PluginManager",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n@param {Number} height\n@param {Boolean} force\n@param {Boolean} forceResize\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} forceResizeToFit\n@param {Boolean} force",
        ".\n*/\nfunction formatDate(date, format) {\n    var dateString = '';\n    if (date instanceof Date) {\n        dateString = date.toLocaleString();\n    } else if (typeof date === 'string') {\n        dateString = date;\n    } else {\n        dateString = date.toLocaleString(format);\n    }\n    return dateString;\n}\n\n/**\nFormats a date given the supplied format string.\n@param {Date} date The date to format\n@param {String} format The format string\n@return {String} The formatted date or an empty string if date parameter is not a JavaScript Date object.\n*/\nfunction formatDate(date, format) {\n    var dateString = '';\n    if (date instanceof Date) {\n        dateString = date.toLocaleString(format);\n    } else if (typeof date === 'string') {\n        dateString = date;\n    } else {\n        dateString = date.toLocaleString(format);\n    }\n    return dateString;\n}\n\n/**\nFormats a date given the supplied format string.\n@param {Date} date The date to format\n@param {String} format The format string\n@return {String} The formatted date or an empty string if date parameter is not a JavaScript Date object.\n*/\nfunction formatDate",
        " (0 to 364)\n*/\nfunction getDayNumber(date) {\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var seconds = date.getSeconds();\n    var days = (year * 100 + month * 10 + day) / 100;\n    var daysInYear = days / 365;\n    var daysInMonth = daysInYear * 30;\n    var daysInYearAndMonth = daysInYear * 30 + daysInMonth;\n    var daysInYearAndYear = daysInYear * 30 + daysInYear;\n    var daysInYearAndYearAndMonth = daysInYear * 30 + daysInYearAndMonth;\n    var daysInYearAndYearAndMonthAndDay = daysInYear * 30 + daysInYearAndYearAndMonthAndDay;\n    var daysInYearAndYearAndMonthAndDayAndHours = daysInYear * 30 + daysInYearAndYearAndMonthAndDayAndHours;\n    var daysInYearAndYearAndMonthAndDayAndMinutes = daysInYear * 30 + daysInYearAndYearAndMonthAndDayAndMinutes;\n    var daysInYearAndYearAndMonthAndDayAndSeconds = daysInYear * 30",
        ".\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar momentFormat = require('moment-format');\nvar momentFormatDate = require('moment-format-date');\nvar momentFormatTime = require('moment-format-time');\nvar momentFormatTimeFormat = require('moment-format-time-format');\nvar momentFormatTimeFormatDate = require('moment-format-time-format-date');\nvar momentFormatTimeFormatTime = require('moment-format-time-format-time');\nvar momentFormatTimeFormatTimeFormatDate = require('moment-format-time-format-time-format-date');\nvar momentFormatTimeFormatTimeFormatTime = require('moment-format-time-format-time-format-time');\nvar momentFormatTimeFormatTimeFormatDate = require('moment-format-time-format-time-format-time-format-date');\nvar momentFormatTimeFormatTimeFormatTime = require('moment-format-time-format-time-format-time-format-time');\nvar momentFormatTimeFormatTimeFormatDate = require('moment-format-time-format-time-format-time-format-date');\nvar momentFormatTimeFormatTimeFormatTime = require('moment-format-time-format-time-format-time-format-time-format-date');\nvar momentFormatTimeFormatTimeFormat",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        ": {Promise<string>}\n*/\nfunction readTLSOptions() {\n  return new Promise((resolve, reject) => {\n    fs.readFile(__dirname + '/tls.options', 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\n/**\nRead TLS certificate from filesystem asynchronously.  Paths are read from CLI\noptions or environment variables.\n@returns {Promise<string>}\n*/\nfunction readTLSCertificate() {\n  return new Promise((resolve, reject) => {\n    fs.readFile(__dirname + '/tls.certificate', 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data);\n      }\n    });\n  });\n}\n\n/**\nRead TLS private key from filesystem asynchronously.  Paths are read from CLI\noptions or environment variables.\n@returns {Promise<string>}\n*/\nfunction readTLSPrivateKey() {\n  return new Promise((resolve, reject) => {\n    fs.readFile(__dirname + '/tls.private_key', 'utf8', (err, data) => {\n      if (err) {\n        reject(err);\n      } else",
        " returns the value of the option\n*/\nfunction readLongOption(option) {\n  var value = process.argv[2];\n  if (value) {\n    return value;\n  }\n  return option;\n}\n\n/**\nRead long-option value from CLI arguments.\n@param {string} option\n@returns {boolean}\n*/\nfunction readLongOptionBoolean(option) {\n  var value = process.argv[2];\n  if (value) {\n    return value === 'true';\n  }\n  return option === 'false';\n}\n\n/**\nRead long-option value from CLI arguments.\n@param {string} option\n@returns {number}\n*/\nfunction readLongOptionNumber(option) {\n  var value = process.argv[2];\n  if (value) {\n    return parseInt(value, 10);\n  }\n  return option;\n}\n\n/**\nRead long-option value from CLI arguments.\n@param {string} option\n@returns {string}\n*/\nfunction readLongOptionString(option) {\n  var value = process.argv[2];\n  if (value) {\n    return value;\n  }\n  return option;\n}\n\n/**\nRead long-option value from CLI arguments.\n@param {string} option\n@returns {number}",
        "\n@param animation\n@param duration\n@param delay\n@param loop\n@param repeat\n@param repeatCount\n@param repeatDelay\n@param repeatCount\n@param repeatDelay\n@param repeatInterval\n@param repeatCount\n@param repeatInterval\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeatMode\n@param repeat",
        "]\n*/\nfunction calculateMinAndMax(series) {\n  var min = series.xField.min;\n  var max = series.xField.max;\n  var minSeries = series.xField.minSeries;\n  var maxSeries = series.xField.maxSeries;\n  var minSeriesIndex = series.xField.minSeriesIndex;\n  var maxSeriesIndex = series.xField.maxSeriesIndex;\n  var minSeriesIndexRange = series.xField.minSeriesIndexRange;\n  var maxSeriesIndexRange = series.xField.maxSeriesIndexRange;\n  var minSeriesIndexRangeRange = series.xField.minSeriesIndexRangeRange;\n  var maxSeriesIndexRangeRange = series.xField.maxSeriesIndexRangeRange;\n  var minSeriesIndexRangeRangeRange = series.xField.minSeriesIndexRangeRangeRange;\n  var maxSeriesIndexRangeRangeRange = series.xField.maxSeriesIndexRangeRangeRange;\n  var minSeriesIndexRangeRangeRange = series.xField.minSeriesIndexRangeRangeRangeRange;\n  var maxSeriesIndexRangeRangeRange = series.xField.maxSeriesIndexRangeRangeRange;\n  var minSeriesIndexRangeRangeRange = series.xField.minSeriesIndexRangeRangeRangeRange;\n  var maxSeriesIndexRangeRangeRange = series.xField",
        ".\n@returns {String} The title with the title set.\n@example\nvar title = 'My Title';\nvar header = new Header(title);\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title = 'My Title';\nheader.title",
        " icon class name\n@returns {String} The updated CSS class name\n*/\nfunction setIconClass(cls) {\n  var icon = document.getElementById('icon');\n  icon.className = cls;\n}\n\n/**\nSets the CSS class that provides the icon image for this header.  This method will replace any existing\nicon class if one has already been set.\n@param {String} cls The icon class name\n@returns {String} The updated CSS class name\n*/\nfunction setIconClass(cls) {\n  var icon = document.getElementById('icon');\n  icon.className = cls;\n}\n\n/**\nSets the CSS class that provides the icon image for this header.  This method will replace any existing\nicon class if one has already been set.\n@param {String} cls The icon class name\n@returns {String} The updated CSS class name\n*/\nfunction setIconClass(cls) {\n  var icon = document.getElementById('icon');\n  icon.className = cls;\n}\n\n/**\nSets the CSS class that provides the icon image for this header.  This method will replace any existing\nicon class if one has already been set.\n@param {String} cls The icon class name\n@returns {String} The updated CSS class name\n*/\nfunction setIconClass(cls) {\n  var icon = document.getElementById('icon",
        " icon image path\n@returns {String} The new icon image path\n@example\nvar icon = 'http://www.example.com/icons/logo.png';\nvar header = new Header({icon: icon});\nheader.icon = 'http://www.example.com/icons/logo.png';\nheader.icon = 'http://www.example.com/icons/logo.png';\n*/\nfunction Icon(icon) {\n  this.icon = icon;\n}\n\n/**\n@method Icon#setIcon\n@param {String} icon The new icon image path\n@returns {String} The new icon image path\n@example\nvar icon = 'http://www.example.com/icons/logo.png';\nvar header = new Header({icon: icon});\nheader.icon = 'http://www.example.com/icons/logo.png';\nheader.icon = 'http://www.example.com/icons/logo.png';\n*/\nIcon.prototype.setIcon = function(icon) {\n  this.icon = icon;\n};\n\n/**\n@method Icon#getIcon\n@returns {String} The icon image path\n@example\nvar icon = 'http://www.example.com/icons/logo.png';\nvar header = new Header({icon: icon});\nheader.icon = 'http://www",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        " Ext.menu.CheckItem\n@param {Object} checked The checked value\n@param {Object} e The event object\n@param {Object} e.target The target of the event\n@param {Object} e.target.checked The checked value\n@param {Object} e.target.checked.value The checked value\n@param {Object} e.target.checked.checked The checked value\n@param {Object} e.target.checked.checked.value The checked value\n@param {Object} e.target.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.value The checked value\n@param {Object} e.target.checked.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.checked.checked The checked value\n@param {Object} e.target.checked.checked.checked.checked.checked The checked value\n@param {Object} e.target",
        "\n\n    def test_is_a_type(self):\n        self.assertTrue(is_a(self.value, str))\n        self.assertTrue(is_a(self.value, int))\n        self.assertTrue(is_a(self.value, float))\n        self.assertTrue(is_a(self.value, bool))\n        self.assertTrue(is_a(self.value, datetime))\n        self.assertTrue(is_a(self.value, datetime.datetime))\n        self.assertTrue(is_a(self.value, datetime.date))\n        self.assertTrue(is_a(self.value, datetime.time))\n        self.assertTrue(is_a(self.value, datetime.timedelta))\n        self.assertTrue(is_a(self.value, datetime.timedelta.timedelta))\n        self.assertTrue(is_a(self.value, datetime.timedelta.timedelta))\n        self.assertTrue(is_a(self.value, datetime.timedelta.timedelta))\n        self.assertTrue(is_a(self.value, datetime.timedelta.timedelta))\n        self.assertTrue(is_a(self.value, datetime.timedelta.timedelta))\n        self.assertTrue(is_a(self.value, datetime.timedelta",
        "\n    #   @param [String] name The name of the morph\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The morph type\n    #   @param [String] morph_name The morph name\n    #   @param [String] morph_type The",
        "}\n@example\nconst code = `\nfunction f() {\n  return function() {\n    return function() {\n      return function() {\n        return function() {\n          return function() {\n            return function() {\n              return function() {\n                return function() {\n                  return function() {\n                    return function() {\n                      return function() {\n                        return function() {\n                          return function() {\n                            return function() {\n                              return function() {\n                                return function() {\n                                  return function() {\n                                    return function() {\n                                      return function() {\n                                        return function() {\n                                          return function() {\n                                            return function() {\n                                              return function() {\n                                                return function() {\n                                                  return function() {\n                                                    return function() {\n                                                      return function() {\n                                                        return function() {\n                                                          return function() {\n                                                        return function() {\n                                                          return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n                                                            return function() {\n",
        " and push more onto `paths`\n\nIf `paths` is empty, return\n\nIf `paths` is not empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is not empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return\n\nIf `paths` is empty, return",
        ".verify(file, {\n  name: 'file',\n  type: 'file',\n  mode: '0755',\n  permissions: '0755',\n  size: 0,\n  mtime: 0,\n  mtime_nsec: 0,\n  mtime_sec: 0,\n  mtime_usec: 0,\n  mtime_nsec_sec: 0,\n  mtime_usec_sec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_sec: 0,\n  mtime_usec_sec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec: 0,\n  mtime_nsec_usec: 0,\n  mtime_sec_usec",
        ".prototype\n\nA.prototype.foo = function() {\n  return this.foo;\n};\n\nA.prototype.bar = function() {\n  return this.bar;\n};\n\nA.prototype.baz = function() {\n  return this.baz;\n};\n\nA.prototype.qux = function() {\n  return this.qux;\n};\n\nA.prototype.quux = function() {\n  return this.quux;\n};\n\nA.prototype.quux2 = function() {\n  return this.quux2;\n};\n\nA.prototype.quux3 = function() {\n  return this.quux3;\n};\n\nA.prototype.quux4 = function() {\n  return this.quux4;\n};\n\nA.prototype.quux5 = function() {\n  return this.quux5;\n};\n\nA.prototype.quux6 = function() {\n  return this.quux6;\n};\n\nA.prototype.quux7 = function() {\n  return this.quux7;\n};\n\nA.prototype.quux8 = function() {\n  return this.quux8;\n};\n\nA.prototype.quux9 = function() {\n  return this.quux9;\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input",
        "\n*/\nfunction appendPathSep(string) {\n  return string + path.sep;\n}\n\n/**\nFunction for appending path.sep to the end of string if necessary\n\n@param string {String}\n@return string {String}\n*/\nfunction appendPathSep2(string) {\n  return string + path.sep;\n}\n\n/**\nFunction for appending path.sep to the end of string if necessary\n\n@param string {String}\n@return string {String}\n*/\nfunction appendPathSep3(string) {\n  return string + path.sep;\n}\n\n/**\nFunction for appending path.sep to the end of string if necessary\n\n@param string {String}\n@return string {String}\n*/\nfunction appendPathSep4(string) {\n  return string + path.sep;\n}\n\n/**\nFunction for appending path.sep to the end of string if necessary\n\n@param string {String}\n@return string {String}\n*/\nfunction appendPathSep5(string) {\n  return string + path.sep;\n}\n\n/**\nFunction for appending path.sep to the end of string if necessary\n\n@param string {String}\n@return string {String}\n*/\nfunction appendPathSep6(string) {\n  return string + path.sep;\n}\n\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input",
        ".\n@param {Object} [error] error object\n@param {Object} [error.message] error message\n@param {Object} [error.stack] error stack\n@param {Object} [error.stackTrace] error stack trace\n@param {Object} [error.stackTrace.length] error stack trace length\n@param {Object} [error.stackTrace[0]] error stack trace[0]\n@param {Object} [error.stackTrace[1]] error stack trace[1]\n@param {Object} [error.stackTrace[2]] error stack trace[2]\n@param {Object} [error.stackTrace[3]] error stack trace[3]\n@param {Object} [error.stackTrace[4]] error stack trace[4]\n@param {Object} [error.stackTrace[5]] error stack trace[5]\n@param {Object} [error.stackTrace[6]] error stack trace[6]\n@param {Object} [error.stackTrace[7]] error stack trace[7]\n@param {Object} [error.stackTrace[8]] error stack trace[8]\n@param {Object} [error.stackTrace[9]] error stack trace[9]\n@param {Object} [error.stackTrace[10]] error stack trace[10]\n@param {Object} [error",
        " to an array.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 2. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 3. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 4. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 5. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 6. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 7. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 8. Writing an iterator over an array of integers.\n\nGiven an array of integers, write a function that returns the sum of the elements of the array.\n\nExample 9. Writing an iterator over an array of integers",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapRemoveOperation;\nimport com.hazelcast.",
        ".\n\n@author: James Burton\n@copyright: Copyright (c) 2014 James Burton\n@license: MIT\n@version: 1.0\n@date: 2014-08-01\n@file: date.h\n@brief: This file contains the date class.\n\n*/\n\n#ifndef DATE_H\n#define DATE_H\n\n#include <string>\n#include <sstream>\n#include <iomanip>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#include <ctime>\n#",
        ".\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out the tab to activate when one tab is closed.\n * - used by TabPanel too. Works out",
        "\n@private\n*/\nExt.QuickTips = function(config) {\n    var me = this;\n    me.autoRender = !!autoRender;\n    me.config = config;\n    me.init();\n};\n\n/**\n@private\n*/\nExt.QuickTips.prototype.init = function() {\n    var me = this;\n    me.quickTips = Ext.tip.QuickTip.create(me.config);\n    me.quickTips.on('beforerender', me.onBeforeRender, me);\n    me.quickTips.on('afterrender', me.onAfterRender, me);\n    me.quickTips.on('beforedestroy', me.onBeforeDestroy, me);\n    me.quickTips.on('afterdestroy', me.onAfterDestroy, me);\n    me.quickTips.on('beforedestroy', me.onBeforeDestroy, me);\n    me.quickTips.on('afterdestroy', me.onAfterDestroy, me);\n    me.quickTips.on('beforedestroy', me.onBeforeDestroy, me);\n    me.quickTips.on('afterdestroy', me.onAfterDestroy, me);\n    me.quickTips.on('beforedestroy', me.onBeforeDestroy, me);\n    me.quickTips.",
        ".prototype.setElement = function(element) {\n  this.element = element;\n};\n\n/**\n * Sets the element's parent.\n * @param {Element} element The element to set as the parent.\n */\nElement.prototype.setParent = function(element) {\n  this.parent = element;\n};\n\n/**\n * Sets the element's position.\n * @param {Object} position The position to set as the position.\n */\nElement.prototype.setPosition = function(position) {\n  this.position = position;\n};\n\n/**\n * Sets the element's size.\n * @param {Object} size The size to set as the size.\n */\nElement.prototype.setSize = function(size) {\n  this.size = size;\n};\n\n/**\n * Sets the element's position relative to the parent.\n * @param {Object} position The position to set as the position relative to the parent.\n */\nElement.prototype.setPositionRelative = function(position) {\n  this.positionRelative = position;\n};\n\n/**\n * Sets the element's size relative to the parent.\n * @param {Object} size The size to set as the size relative to the parent.\n */\nElement.prototype.setSizeRelative = function(size) {\n  this.sizeRelative = size;",
        ".\n@param {Array} childEls The child elements to remove.\n@returns {Array} The child elements that were removed.\n*/\nfunction removeChildren(testFn, childEls) {\n  var removed = [];\n  for (var i = 0; i < childEls.length; i++) {\n    if (testFn(childEls[i])) {\n      removed.push(childEls[i]);\n    }\n  }\n  return removed;\n}\n\n/**\n* Removes items in the childEls array based on the return value of a supplied test function. The function is called with a entry in childEls and if the test function\nreturn true, that entry is removed. If false, that entry is kept.\n\n@param {Function} testFn The test function.\n@param {Array} childEls The child elements to remove.\n@returns {Array} The child elements that were removed.\n*/\nfunction removeChildren(testFn, childEls) {\n  var removed = [];\n  for (var i = 0; i < childEls.length; i++) {\n    if (testFn(childEls[i])) {\n      removed.push(childEls[i]);\n    }\n  }\n  return removed;\n}\n\n/**\n* Removes items in the child",
        "\n*/\n\nfunction multiFieldSort(array, sortBy) {\n  var sorted = [];\n  for (var i = 0; i < array.length; i++) {\n    var key = array[i][sortBy[i]];\n    if (sorted.indexOf(key) < 0) {\n      sorted.push(key);\n    }\n  }\n  return sorted;\n}\n\nmodule.exports = multiFieldSort;\n",
        "\n    #\n    # @param [String] str\n    # @param [String] separator\n    # @return [String]\n    def split(str, separator)\n      str.split(separator)\n    end\n\n    #\n    # Split a string using a separator and return the first occurrence of the\n    # separator in the string.\n    #\n    # @param [String] str\n    # @param [String] separator\n    # @return [String]\n    def split_first(str, separator)\n      str.split(separator).first\n    end\n\n    #\n    # Split a string using a separator and return the last occurrence of the\n    # separator in the string.\n    #\n    # @param [String] str\n    # @param [String] separator\n    # @return [String]\n    def split_last(str, separator)\n      str.split(separator).last\n    end\n\n    #\n    # Split a string using a separator and return the first occurrence of the\n    # separator in the string.\n    #\n    # @param [String] str\n    # @param [String] separator\n    # @return [String]\n    def split_first_with_separator(str, separator)\n      str.split(separator).first\n    end\n\n    #\n",
        "\n    }\n\n    public function testGetNextToken()\n    {\n        $this->assertEquals('next token', $this->token->getNextToken());\n    }\n\n    public function testGetNextTokenWithInvalidToken()\n    {\n        $this->assertEquals('next token', $this->token->getNextToken('invalid token'));\n    }\n\n    public function testGetNextTokenWithInvalidTokenAndToken()\n    {\n        $this->assertEquals('next token', $this->token->getNextToken('invalid token', 'next token'));\n    }\n\n    public function testGetNextTokenWithInvalidTokenAndTokenAndToken()\n    {\n        $this->assertEquals('next token', $this->token->getNextToken('invalid token', 'next token', 'next token'));\n    }\n\n    public function testGetNextTokenWithInvalidTokenAndTokenAndTokenAndToken()\n    {\n        $this->assertEquals('next token', $this->token->getNextToken('invalid token', 'next token', 'next token', 'next token'));\n    }\n\n    public function testGetNextTokenWithInvalidTokenAndTokenAndTokenAndToken()\n    {\n        $this->assertEquals('next token', $this->token->getNextToken('invalid token', 'next token', 'next",
        "\n\n    def test_get_base_url(self):\n        self.assertEqual(self.get_base_url(), 'http://example.com')\n\n    def test_get_base_url_with_port(self):\n        self.assertEqual(self.get_base_url('http://example.com:80'), 'http://example.com:80')\n\n    def test_get_base_url_with_port_and_path(self):\n        self.assertEqual(self.get_base_url('http://example.com:80/path'), 'http://example.com:80/path')\n\n    def test_get_base_url_with_port_and_path_and_query(self):\n        self.assertEqual(self.get_base_url('http://example.com:80/path?query=value'), 'http://example.com:80/path?query=value')\n\n    def test_get_base_url_with_port_and_path_and_query_and_fragment(self):\n        self.assertEqual(self.get_base_url('http://example.com:80/path?query=value&fragment=value'), 'http://example.com:80/path?query=value&fragment=value')\n\n",
        "\n\n    def test_two_changes_with_one_text_change\n      text_change = TextChange.new(text: \"text\", change_type: \"text\")\n      text_change.save!\n\n      text_change = TextChange.find(text_change.id)\n      assert_equal \"text\", text_change.text\n      assert_equal \"text\", text_change.change_type\n\n      text_change = TextChange.find(text_change.id)\n      assert_equal \"text\", text_change.text\n      assert_equal \"text\", text_change.change_type\n    end\n\n    def test_two_changes_with_two_text_changes\n      text_change = TextChange.new(text: \"text\", change_type: \"text\")\n      text_change.save!\n\n      text_change = TextChange.find(text_change.id)\n      assert_equal \"text\", text_change.text\n      assert_equal \"text\", text_change.change_type\n\n      text_change = TextChange.find(text_change.id)\n      assert_equal \"text\", text_change.text\n      assert_equal \"text\", text_change.change_type\n    end\n\n    def test_two_changes_with_",
        "\n    public static void setStore(Store store) {\n        store.setStore(store);\n    }\n\n    public static void setStore(Store store, String name) {\n        store.setStore(name, store);\n    }\n\n    public static void setStore(Store store, String name, String type) {\n        store.setStore(name, type, store);\n    }\n\n    public static void setStore(Store store, String name, String type, String description) {\n        store.setStore(name, type, description, store);\n    }\n\n    public static void setStore(Store store, String name, String type, String description, Store store) {\n        store.setStore(name, type, description, store);\n    }\n\n    public static void setStore(Store store, String name, String type, String description, Store store, String name) {\n        store.setStore(name, type, description, store, name);\n    }\n\n    public static void setStore(Store store, String name, String type, String description, Store store, String name, String type) {\n        store.setStore(name, type, description, store, name, type);\n    }\n\n    public static void setStore(Store store, String name, String type, String description, Store store, String",
        ".\n@param {Object} [options] Options object.\n@param {Object} [options.filter] Filter object.\n@param {Object} [options.sort] Sort object.\n@param {Object} [options.page] Page number.\n@param {Object} [options.perPage] Page size.\n@param {Function} [callback] Callback function.\n@param {Function} [callback.error] Error callback.\n@param {Array} [callback.results] Results array.\n@param {Function} [callback.complete] Complete callback function.\n*/\nfunction records(options, callback) {\n  var options = options || {};\n\n  var deferred = Q.defer();\n\n  var method = 'GET';\n  if (options.filter) {\n    method = 'GET';\n    if (options.filter.type === 'string') {\n      method = 'GET';\n    }\n  }\n\n  var url = this.url + '/records?' + this.buildQueryString(options);\n\n  this.request(method, url, function(error, response, body) {\n    if (error) {\n      deferred.reject(error);\n    } else {\n      deferred.resolve(body);\n    }\n  });\n\n  return deferred.promise;\n}\n\n/**\n@method records",
        ".\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection mode is a combination of the two modes that can be used to select multiple items.\n\nThe selection mode is a combination of the two modes that can be used to select single items.\n\nThe selection",
        ".\n\n\t\tvar event = {\n\t\t\ttype: 'keystroke',\n\t\t\tshiftKey: shiftKey,\n\t\t\tctrlKey: ctrlKey,\n\t\t\taltKey: altKey,\n\t\t\tkeyCode: keyCode,\n\t\t\tkeyName: keyName,\n\t\t\tkeyChar: keyChar,\n\t\t\tkeyCharCode: keyCharCode,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharCodeName: keyCharCodeName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName: keyCharName,\n\t\t\tkeyCharName:",
        "\n    }\n\n    /**\n     * @param {boolean} fireSelectionChange\n     * @return {boolean}\n     */\n    maybeFireSelectionChange(fireSelectionChange) {\n      return fireSelectionChange && !this.fireSelectionChange;\n    }\n\n    /**\n     * @param {boolean} fireSelectionChange\n     * @return {boolean}\n     */\n    fireSelectionChange(fireSelectionChange) {\n      return fireSelectionChange && this.fireSelectionChange;\n    }\n\n    /**\n     * @param {boolean} fireSelectionChange\n     * @return {boolean}\n     */\n    fireSelectionChange(fireSelectionChange) {\n      return fireSelectionChange && this.fireSelectionChange;\n    }\n\n    /**\n     * @param {boolean} fireSelectionChange\n     * @return {boolean}\n     */\n    fireSelectionChange(fireSelectionChange) {\n      return fireSelectionChange && this.fireSelectionChange;\n    }\n\n    /**\n     * @param {boolean} fireSelectionChange\n     * @return {boolean}\n     */\n    fireSelectionChange(fireSelectionChange) {\n      return fireSelectionChange && this.fireSelectionChange;\n    }\n\n    /**\n     * @param {boolean} fireSelectionChange\n     * @return {boolean}\n     */\n   ",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        ".\n\n# This is a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it's a bit of a hack.\n# It's a bit of a hack, but it",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapRemoveOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n*/\nexport function runOnce(client, sequence) {\n  return client.post('/projects/' + client.projectId + '/sequences', {\n    body: {\n      sequence: sequence\n    }\n  })\n}\n",
        " to the next column.\n\t\t// This is a hack to get around a bug in the SQL Server driver where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not the same as the column name of the table.\n\t\t// This is a workaround for the issue where the column name is not",
        "\n\n    // Inherit docs from MixedCollection\n    //\n    //   var MixedCollection = require('../../lib/collections/MixedCollection');\n    //   var MixedCollection = require('../../lib/collections/MixedCollection');\n    //\n    //   var MixedCollection = new MixedCollection();\n    //   var MixedCollection = new MixedCollection();\n    //\n    //   var MixedCollection = new MixedCollection();\n    //   MixedCollection.add('A', 'B', 'C');\n    //   MixedCollection.add('D', 'E', 'F');\n    //   MixedCollection.add('G', 'H', 'I');\n    //   MixedCollection.add('J', 'K', 'L');\n    //   MixedCollection.add('M', 'N', 'O');\n    //   MixedCollection.add('P', 'Q', 'R');\n    //   MixedCollection.add('S', 'T', 'U');\n    //   MixedCollection.add('V', 'W', 'X');\n    //   MixedCollection.add('Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', '",
        ".Sprite} this\n*/\nExt.draw.CompositeSprite.prototype.hide = function(redraw) {\n    var sprites = this.sprites;\n    for (var i = 0; i < sprites.length; i++) {\n        sprites[i].hide(redraw);\n    }\n    return this;\n};\n\n/**\nHides all sprites. If `true` is passed then a redraw will be forced for each sprite.\n@param {Boolean} redraw Flag to immediately draw the change.\n@return {Ext.draw.CompositeSprite} this\n*/\nExt.draw.CompositeSprite.prototype.hideAll = function(redraw) {\n    var sprites = this.sprites;\n    for (var i = 0; i < sprites.length; i++) {\n        sprites[i].hideAll(redraw);\n    }\n    return this;\n};\n\n/**\nHides all sprites. If `true` is passed then a redraw will be forced for each sprite.\n@param {Boolean} redraw Flag to immediately draw the change.\n@return {Ext.draw.CompositeSprite} this\n*/\nExt.draw.CompositeSprite.prototype.hideAllSprites = function(redraw) {\n    var sprites = this.sprites;\n    for (var",
        ".Sprite} this\n*/\nExt.define('Ext.draw.CompositeSprite', {\n    extend: 'Ext.draw.Sprite',\n    alias: ['widget.compositesprite'],\n    requires: [\n        'Ext.draw.Sprite'\n    ],\n    constructor: function(config) {\n        Ext.apply(this, config);\n        this.sprites = [];\n    },\n    /**\n    * @cfg {Array} sprites Array of sprites to show.\n    */\n    sprites: [],\n    /**\n    * @cfg {Boolean} redraw Whether to redraw the change.\n    */\n    redraw: true,\n    /**\n    * @cfg {Boolean} redraw Whether to redraw the change.\n    */\n    redrawSprites: true,\n    /**\n    * @cfg {Boolean} redraw Whether to redraw the change.\n    */\n    redrawAllSprites: true,\n    /**\n    * @cfg {Boolean} redraw Whether to redraw the change.\n    */\n    redrawAllSprites: true,\n    /**\n    * @cfg {Boolean} redraw Whether to redraw the change.\n    */\n    redrawAllSprites: true,\n    /**\n    * @cfg {Boolean} redraw Whether to redraw the change.\n    */\n    redrawAllSprites: true",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\",
        "\n@param {String} [style.fontFamily] Font family\n@param {String} [style.fontSize] Font size\n@param {String} [style.fontStyle] Font style\n@param {String} [style.fontWeight] Font weight\n@param {String} [style.fontVariant] Font variant\n@param {String} [style.fontWeightWeight] Font weight weight\n@param {String} [style.fontVariantWeight] Font variant weight\n@param {String} [style.fontVariantStyle] Font variant style\n@param {String} [style.fontVariantVariant] Font variant variant\n@param {String} [style.fontVariantStyleWeight] Font variant style weight\n@param {String} [style.fontVariantVariantWeight] Font variant variant weight\n@param {String} [style.fontVariantStyleVariant] Font variant variant style\n@param {String} [style.fontVariantVariantWeight] Font variant variant weight\n@param {String} [style.fontVariantStyleVariantWeight] Font variant variant weight\n@param {String} [style.fontVariantStyleVariantWeight] Font variant variant weight\n@param {String} [style.fontVariantStyleVariantWeight] Font variant variant weight\n@param {String} [style.fontVariantStyleVariantWeight] Font variant variant weight\n@param {String} [style.fontVariantStyleVariantWeight] Font variant",
        "\n@param {String} [className] CSS class name\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n@param {String} [classNamePrefix] CSS class prefix\n@param {String} [classNameSuffix] CSS class suffix\n",
        "\n@param {String} [sprite] Sprite to remove class from\n@param {String} [spriteClass] Sprite class to remove class from\n@param {String} [spriteClass2] Sprite class to remove class from\n@param {String} [spriteClass3] Sprite class to remove class from\n@param {String} [spriteClass4] Sprite class to remove class from\n@param {String} [spriteClass5] Sprite class to remove class from\n@param {String} [spriteClass6] Sprite class to remove class from\n@param {String} [spriteClass7] Sprite class to remove class from\n@param {String} [spriteClass8] Sprite class to remove class from\n@param {String} [spriteClass9] Sprite class to remove class from\n@param {String} [spriteClass10] Sprite class to remove class from\n@param {String} [spriteClass11] Sprite class to remove class from\n@param {String} [spriteClass12] Sprite class to remove class from\n@param {String} [spriteClass13] Sprite class to remove class from\n@param {String} [spriteClass14] Sprite class to remove class from\n@param {String} [spriteClass15] Sprite class to remove class",
        ".\nfunc (this *CompositeSprite) Destroy() {\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren()\n\tthis.DestroyChildren",
        ".2.\n  #\n  # @param [String] name\n  # @param [String] value\n  # @return [String]\n  def deprecated(name, value)\n    name = name.to_sym\n    value = value.to_sym\n    if name == :to_s\n      value = value.to_sym\n    end\n    super(name, value)\n  end\nend\n",
        " is\n// implemented by the cell.\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#include \"Cell.h\"\n\n#",
        ".com\n\n*/\n\ntinymce.create('tinymce.plugins.Attributes', {\n\trequires: [\n\t\t'tinymce.core.PluginManager',\n\t\t'tinymce.core.util.Tools'\n\t],\n\n\tinit: function(ed, url) {\n\t\tvar self = this;\n\n\t\ted.addButton('attributes', {\n\t\t\tlabel: 'Attributes',\n\t\t\tcmd: 'attributes',\n\t\t\tonclick: function() {\n\t\t\t\tself.open();\n\t\t\t}\n\t\t});\n\n\t\ted.addMenuItem('attributes', {\n\t\t\ttext: 'Attributes',\n\t\t\tcmd: 'attributes',\n\t\t\tcontext: 'insert',\n\t\t\tonclick: function() {\n\t\t\t\tself.open();\n\t\t\t}\n\t\t});\n\t},\n\n\topen: function() {\n\t\tvar self = this;\n\n\t\tvar editor = ed.getContentArea().getEditor();\n\t\tvar url = ed.getParam('attributes_url', '');\n\n\t\tif (url) {\n\t\t\ted.windowManager.open({\n\t\t\t\tfile: url,\n\t\t\t\twidth: 500,\n\t\t\t\theight: 500,\n\t\t\t\tresizable: 1,\n\t\t\t\tscrollbars: 1,\n",
        "\n    #\n    # @return [Boolean]\n    def has_columns?\n      columns.any?\n    end\n\n    #\n    # Determine if there are any columns with a configuration option\n    #\n    # @return [Boolean]\n    def has_configuration_option?\n      configuration_options.any?\n    end\n\n    #\n    # Determine if there are any columns with a configuration option\n    #\n    # @return [Boolean]\n    def has_configuration_option_for_column?(column)\n      configuration_options.any? { |c| c.column == column }\n    end\n\n    #\n    # Determine if there are any columns with a configuration option\n    #\n    # @return [Boolean]\n    def has_configuration_option_for_column_and_configuration_option?(column, configuration_option)\n      configuration_options.any? { |c| c.column == column && c.configuration_option == configuration_option }\n    end\n\n    #\n    # Determine if there are any columns with a configuration option\n    #\n    # @return [Boolean]\n    def has_configuration_option_for_column_and_configuration_option_and_configuration_option?(column, configuration_option, configuration_option_and_configuration_option)\n      configuration",
        "\n\n    // Update the view when a view is clicked\n    $('#view-button').click(function() {\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n    });\n\n    // Update the view when a view is clicked\n    $('#view-button').click(function() {\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n    });\n\n    // Update the view when a view is clicked\n    $('#view-button').click(function() {\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n    });\n\n    // Update the view when a view is clicked\n    $('#view-button').click(function() {\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n        $('#view-container').toggleClass('active');\n    });\n\n    // Update the view when a view is clicked\n   ",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();\n\n    // Clear the element and DOM\n    clear();",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\",
        " to the field.\n\nIf config option \"clearOnEscape\" is false, then remove a listener that does nothing.\n\nIf config option \"clearOnEscape\" is true, then add a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is false, then remove a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is true, then add a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is false, then remove a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is true, then add a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is false, then remove a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is true, then add a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is false, then remove a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is true, then add a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is false, then remove a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\" is true, then add a listener that clears the field on escape.\n\nIf config option \"clearOnEscape\"",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "\n    }\n\n    public void setHas(boolean has) {\n        this.has = has;\n    }\n\n    public boolean isHas() {\n        return has;\n    }\n\n    public void setHas(String has) {\n        this.has = has;\n    }\n\n    public String getHas() {\n        return has;\n    }\n\n    public void setHas(String has) {\n        this.has = has;\n    }\n\n    public String getHas(String has) {\n        return has;\n    }\n\n    public void setHas(String has, String has2) {\n        this.has = has;\n        this.has2 = has2;\n    }\n\n    public String getHas(String has) {\n        return has;\n    }\n\n    public void setHas(String has, String has2) {\n        this.has = has;\n        this.has2 = has2;\n    }\n\n    public String getHas(String has, String has3) {\n        this.has = has;\n        this.has3 = has3;\n    }\n\n    public String getHas(String has) {\n        return has;\n    }\n\n    public void setHas(String has, String has3) {\n        this.has",
        "\n  - If the clear button is visible, then the clear button is visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the clear button is not visible\n  - If the clear button is not visible, then the",
        "\n\n// This file was generated based on 'C:\\ProgramData\\Uno\\Packages\\Fuse.Animations\\0.13.2\\Source\\Uno\\Animations\\$.uno'.\n// WARNING: Changes might be lost if you edit this file directly.\n\n#ifndef __APP_UNO_ANIMATIONS_CLEAR_BUTTON_H__\n#define __APP_UNO_ANIMATIONS_CLEAR_BUTTON_H__\n\n#include <app/Uno.Object.h>\n#include <Uno.h>\n\nnamespace app {\nnamespace Uno {\nnamespace Animations {\n\nstruct ClearButton;\n\nstruct ClearButton__uType : ::uStructType\n{\n};\n\nClearButton__uType* ClearButton__typeof();\n\nvoid ClearButton___ObjInit_1(ClearButton* __this);\nvoid ClearButton__OnClick_1(ClearButton* __this, ::uDelegate* handler);\nvoid ClearButton__OnClick_2(ClearButton* __this, ::uDelegate* handler, ::uDelegate* handler2);\nvoid ClearButton__OnClick_3(ClearButton* __this, ::uDelegate* handler, ::uDelegate* handler3);\nvoid ClearButton__OnClick_4(ClearButton* __this, ::uDelegate* handler, ::u",
        "\n    }\n\n    public static void error(String message) {\n        error(message, null);\n    }\n\n    public static void error(String message, Throwable cause) {\n        error(message, cause, null);\n    }\n\n    public static void error(String message, Throwable cause, String key) {\n        if (message == null) {\n            message = \"Error\";\n        }\n        if (cause == null) {\n            cause = new Error();\n        }\n        if (key == null) {\n            key = \"Error\";\n        }\n        if (message.indexOf(key) == -1) {\n            message = key + \": \" + message;\n        }\n        error(message, cause);\n    }\n\n    public static void error(String message, Throwable cause, String key, String message) {\n        if (message == null) {\n            message = \"Error\";\n        }\n        if (cause == null) {\n            cause = new Error();\n        }\n        if (key == null) {\n            key = \"Error\";\n        }\n        if (message.indexOf(key) == -1) {\n            message = key + \": \" + message;\n        }\n        error(message, cause, key, message);\n    }\n\n    public static void error",
        "\n *  @param {String} [name] - The name of the property.\n *  @param {String} [value] - The value of the property.\n *  @param {String} [description] - The description of the property.\n *  @param {String} [type] - The type of the property.\n *  @param {String} [enum] - The enum of the property.\n *  @param {String} [enumValues] - The enum values of the property.\n *  @param {String} [enumDescriptions] - The enum descriptions of the property.\n *  @param {String} [enumValuesDescription] - The enum values description of the property.\n *  @param {String} [enumNames] - The enum names of the property.\n *  @param {String} [enumDescriptions] - The enum descriptions of the property.\n *  @param {String} [enumValuesNames] - The enum values names of the property.\n *  @param {String} [enumValuesDescriptions] - The enum values descriptions of the property.\n *  @param {String} [enumSymbols] - The enum symbols of the property.\n *  @param {String} [enumValuesSymbols] - The enum values symbols of the property.\n *  @param {String} [enumValuesSymbols] - The enum values symbols of the",
        "\n\n    def test_recursive_helper_with_no_children(self):\n        \"\"\"\n        Test recursive helper with no children\n        \"\"\"\n        self.assertEqual(\n            self.helper.recursive_helper(\n                'test',\n                'test/test',\n                'test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/test/",
        "\n\n    def self.from_html(html)\n      html.gsub(/<br\\s*\\/?>/, '<br />')\n    end\n\n    def self.from_bbcode(bbcode)\n      bbcode.gsub(/<br\\s*\\/?>/, '<br />')\n    end\n\n    def self.from_html_with_bbcode(html, bbcode)\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gsub(/<br\\s*\\/?>/, '<br />')\n      html = html.gs",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(PunBB, self).__init__(*args, **kwargs)\n        self.pun_url = 'https://pun.com/api/v1/pun/pun.html'\n        self.pun_url_with_params = 'https://pun.com/api/v1/pun/pun.html?pun_id=%s' % self.pun_id\n        self.pun_url_with_params_with_params = 'https://pun.com/api/v1/pun/pun.html?pun_id=%s&pun_id=%s' % (self.pun_id, self.pun_id)\n        self.pun_url_with_params_with_params_with_params = 'https://pun.com/api/v1/pun/pun.html?pun_id=%s&pun_id=%s&pun_id=%s' % (self.pun_id, self.pun_id, self.pun_id)\n        self.pun_url_with_params_with_params_with_params = 'https://pun.com/api/",
        ":\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n    - The region is a list of points.\n",
        ".\n@param axis The axis to finish.\n@param axis_end The axis to finish.\n@param axis_start The axis to finish.\n@param axis_step The step to finish.\n@param axis_end_step The step to finish.\n@param axis_start_step The step to finish.\n@param axis_step_end The step to finish.\n@param axis_end_step The step to finish.\n@param axis_start_step_end The step to finish.\n@param axis_step_end_step The step to finish.\n@param axis_step_start_step_end The step to finish.\n@param axis_step_end_step_end The step to finish.\n@param axis_step_start_step_end The step to finish.\n@param axis_step_end_step_end The step to finish.\n@param axis_step_start_step_end The step to finish.\n@param axis_step_end_step_end The step to finish.\n@param axis_step_start_step_end The step to finish.\n@param axis_step_end_step_end The step to finish.\n@param axis_step_end_step_end The step to finish.\n@param axis_step_end_step_end The step to finish.\n@param axis",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\",
        "\n\n    def test_get_duration(self):\n        self.assertEqual(self.x.get_duration(), 0)\n\n    def test_get_duration_with_zero_value(self):\n        self.assertEqual(self.x.get_duration(0), 0)\n\n    def test_get_duration_with_negative_value(self):\n        self.assertEqual(self.x.get_duration(-1), 0)\n\n    def test_get_duration_with_zero_value_and_negative_value(self):\n        self.assertEqual(self.x.get_duration(0, -1), 0)\n\n    def test_get_duration_with_zero_value_and_positive_value(self):\n        self.assertEqual(self.x.get_duration(0, 1), 1)\n\n    def test_get_duration_with_negative_value_and_positive_value(self):\n        self.assertEqual(self.x.get_duration(-1, 1), -1)\n\n    def test_get_duration_with_zero_value_and_negative_value_and_positive_value(self):\n        self.assertEqual(self.x.get_duration(0, -1, 1), 0)\n\n    def",
        ".\n*/\nfunction filter() {\n  return this.value;\n}\n\n/**\nSet the value of the filter.\n@param {String} The value to set.\n*/\nfunction filter(value) {\n  this.value = value;\n}\n\n/**\nGet the value of the filter.\n@return {String} The value of this filter.\n*/\nfunction filterValue() {\n  return this.value;\n}\n\n/**\nSet the value of the filter.\n@param {String} The value to set.\n*/\nfunction filterValue(value) {\n  this.value = value;\n}\n\n/**\nGet the value of the filter.\n@return {String} The value of this filter.\n*/\nfunction filterValue() {\n  return this.value;\n}\n\n/**\nSet the value of the filter.\n@param {String} The value to set.\n*/\nfunction filterValue(value) {\n  this.value = value;\n}\n\n/**\nGet the value of the filter.\n@return {String} The value of this filter.\n*/\nfunction filterValue() {\n  return this.value;\n}\n\n/**\nSet the value of the filter.\n@param {String} The value to set.\n*/\nfunction filterValue(value) {\n  this.value",
        ".\n*/\nfunction updateMenu(data) {\n\tvar menu = document.getElementById('menu');\n\tmenu.innerHTML = data.value;\n\tmenu.classList.remove('active');\n\tmenu.classList.add('active');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.add('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\tmenu.classList.remove('disabled');\n\t",
        ".\n\n@return The current value.\n*/\n- (id)defaultValueForValue:(id)val withDefault:(id)def;\n\n/**\nEnsures a default value when current is undefined.\n\n@param val the current value.\n@param def the default.\n\n@return The current value.\n*/\n- (id)defaultValueForValue:(id)val withDefault:(id)def;\n\n/**\nEnsures a default value when current is undefined.\n\n@param val the current value.\n@param def the default.\n\n@return The current value.\n*/\n- (id)defaultValueForValue:(id)val withDefault:(id)def;\n\n/**\nEnsures a default value when current is undefined.\n\n@param val the current value.\n@param def the default.\n\n@return The current value.\n*/\n- (id)defaultValueForValue:(id)val withDefault:(id)def;\n\n/**\nEnsures a default value when current is undefined.\n\n@param val the current value.\n@param def the default.\n\n@return The current value.\n*/\n- (id)defaultValueForValue:(id)val withDefault:(id)def;\n\n/**\nEnsures a default value when current is undefined.\n\n@param val the current value.\n@param def the",
        "\n@return true if value is number like, false otherwise\n*/\n\nvar isNumberLike = function(val) {\n  return typeof val === 'number' && !isNaN(val);\n};\n\nmodule.exports = isNumberLike;\n",
        ".\n@returns {boolean} The converted value.\n@example\n\nvar bool = true;\n\n// Converting to a boolean\nvar bool2 = true;\n\n// Converting to a boolean\nvar bool3 = true;\n\n// Converting to a boolean\nvar bool4 = true;\n\n// Converting to a boolean\nvar bool5 = true;\n\n// Converting to a boolean\nvar bool6 = true;\n\n// Converting to a boolean\nvar bool7 = true;\n\n// Converting to a boolean\nvar bool8 = true;\n\n// Converting to a boolean\nvar bool9 = true;\n\n// Converting to a boolean\nvar bool10 = true;\n\n// Converting to a boolean\nvar bool11 = true;\n\n// Converting to a boolean\nvar bool12 = true;\n\n// Converting to a boolean\nvar bool13 = true;\n\n// Converting to a boolean\nvar bool14 = true;\n\n// Converting to a boolean\nvar bool15 = true;\n\n// Converting to a boolean\nvar bool16 = true;\n\n// Converting to a boolean\nvar bool17 = true;\n\n// Converting to a boolean\nvar bool18 = true;\n\n// Converting to a boolean\nvar bool19 = true;\n\n// Converting to a boolean",
        ".\n@returns {Array} the converted value.\n@example\n\nvar arr = [1, 2, 3];\narr.toArray(); // [1, 2, 3]\narr.toArray(1); // [1]\narr.toArray(2); // [2, 3]\narr.toArray(3); // [1, 2, 3]\narr.toArray(4); // [1, 2, 3]\narr.toArray(5); // [1, 2, 3]\narr.toArray(6); // [1, 2, 3]\narr.toArray(7); // [1, 2, 3]\narr.toArray(8); // [1, 2, 3]\narr.toArray(9); // [1, 2, 3]\narr.toArray(10); // [1, 2, 3]\narr.toArray(11); // [1, 2, 3]\narr.toArray(12); // [1, 2, 3]\narr.toArray(13); // [1, 2, 3]\narr.toArray(14); // [1, 2, 3]\narr.toArray(15); // [1, 2, 3]\narr.toArray(16); // [1, 2, 3]\narr.toArray(17); //",
        " the dot notation values ignored\n@return the camelized value\n@example\n\nvar camel = camelize('foo.bar.baz');\n// => foo.bar.baz\n\nvar camel = camelize('foo.bar.baz.qux');\n// => foo.bar.baz.qux\n\nvar camel = camelize('foo.bar.baz.qux.quux');\n// => foo.bar.baz.qux.quux\n\nvar camel = camelize('foo.bar.baz.qux.quux.quux');\n// => foo.bar.baz.qux.quux.quux\n\nvar camel = camelize('foo.bar.baz.qux.quux.quux.quux');\n// => foo.bar.baz.qux.quux.quux.quux\n\nvar camel = camelize('foo.bar.baz.qux.quux.quux.quux.quux');\n// => foo.bar.baz.qux.quux.quux.quux.quux\n\nvar camel = camelize('foo.bar.baz.qux.quux.quux.quux.quux.quux');\n// => foo.bar.baz.qux.quux.quux.quux.quux",
        " the array.\n@param result the array to fill.\n@return the array with the expanded string.\n@example 'install --dir \"/some/path\" -f' >> ['install', '--dir', '/some/path', '-f']\n*/\nvar expand = function(val, match, safe) {\n  var result = [];\n  var match = match || /\\s+/g;\n  var matchLen = match.length;\n  var matchPos = 0;\n  var matchPosEnd = 0;\n  var matchPosStart = 0;\n  var matchPosEndStart = 0;\n  var matchPosStartEnd = 0;\n  var matchPosEndEnd = 0;\n  var matchPosStartEndEnd = 0;\n  var matchPosStartEndEndEnd = 0;\n  var matchPosStartEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd = 0;\n  var matchPosStartEndEndEndEndEnd =",
        ", the expanded value will be returned.\n@param separator when true, the separator will be returned.\n@param separatorWhenTrue when true, the separator will be returned when the value is a short flag group.\n@param separatorWhenFalse when true, the separator will be returned when the value is a long flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a long flag group.\n@param separatorWhenFalseWhenTrue when true, the separator will be returned when the value is a short flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a long flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a short flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a long flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a short flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a long flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a short flag group.\n@param separatorWhenTrueWhenFalse when true, the separator will be returned when the value is a long flag group.\n@param separatorWhenTrueWhen",
        ".\n@param force the force char to check if exists.\n@param verbose the verbose flag to check if exists.\n@param quiet the quiet flag to check if exists.\n@param quiet_flag the quiet flag to check if exists.\n@param quiet_flag_flag the quiet flag flag to check if exists.\n@param quiet_flag_flag_flag the quiet flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag the quiet flag flag flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag the quiet flag flag flag flag flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag_flag the quiet flag flag flag flag flag flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag_flag the quiet flag flag flag flag flag flag flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag_flag the quiet flag flag flag flag flag flag flag flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag_flag the quiet flag flag flag flag flag flag flag flag flag flag flag flag to check if exists.\n@param quiet_flag_flag_flag_flag_flag the quiet flag flag flag flag flag flag flag flag flag flag flag flag to check if exists",
        ".\n@return {Boolean} True if the argument contains the variadic char.\n*/\nfunction containsVariadic(val, variadic) {\n  return val.indexOf(variadic) !== -1;\n}\n\nconsole.log(containsVariadic('arg', 'a'));\nconsole.log(containsVariadic('arg', 'b'));\nconsole.log(containsVariadic('arg', 'c'));\nconsole.log(containsVariadic('arg', 'd'));\nconsole.log(containsVariadic('arg', 'e'));\nconsole.log(containsVariadic('arg', 'f'));\nconsole.log(containsVariadic('arg', 'g'));\nconsole.log(containsVariadic('arg', 'h'));\nconsole.log(containsVariadic('arg', 'i'));\nconsole.log(containsVariadic('arg', 'j'));\nconsole.log(containsVariadic('arg', 'k'));\nconsole.log(containsVariadic('arg', 'l'));\nconsole.log(containsVariadic('arg', 'm'));\nconsole.log(containsVariadic('arg', 'n'));\nconsole.log(containsVariadic('arg', 'o'));\nconsole.log(containsVariadic('arg', 'p'));\nconsole.log(containsVariadic('arg', 'q",
        ".\n@param required the required tokens.\n@return true if the argument is variadic and also contains required tokens.\n*/\n\nvar isVariadic = function(val, variadic, required) {\n  var tokens = [];\n  var i = 0;\n  var len = variadic.length;\n  var token;\n\n  for (; i < len; i++) {\n    token = variadic[i];\n    if (val.indexOf(token) === -1) {\n      return false;\n    }\n    tokens.push(token);\n  }\n\n  if (required.length > 0) {\n    for (; i < len; i++) {\n      token = required[i];\n      if (val.indexOf(token) === -1) {\n        return false;\n      }\n      tokens.push(token);\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = isVariadic;\n",
        ".\n@param force the force char defined in options.\n@param negate_all if true, removes all negation chars.\n@param negate_all_if_not_present if true, removes all negation chars if present.\n@param negate_all_if_present_if_not_present if true, removes all negation chars if present and not present.\n@param negate_all_if_present_if_not_present_if_not_present if true, removes all negation chars if present and not present and not present.\n@param negate_all_if_present_if_not_present_if_not_present if true, removes all negation chars if present and not present and not present and not present.\n@param negate_all_if_present_if_not_present_if_not_present if true, removes all negation chars if present and not present and not present and not present.\n@param negate_all_if_present_if_not_present_if_not_present if true, removes all negation chars if present and not present and not present and not present.\n@param negate_all_if_present_if_not_present_if_not_present if true, removes all negation chars if present and not present and not present and not present.\n@param negate_all_if_present_if",
        ".\n@return the stripped value.\n*/\n\nvar negate = function(val) {\n  var negate = '';\n  for (var i = 0; i < val.length; i++) {\n    if (val[i] === '!') {\n      negate += '!';\n    } else if (val[i] === '!') {\n      negate += '!';\n    } else if (val[i] === '!') {\n      negate += '!';\n    } else {\n      negate += val[i];\n    }\n  }\n  return negate;\n};\n\nmodule.exports = negate;\n",
        " to be stripped.\n@param negate the characters denoting variadic.\n@return the stripped value.\n*/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <unistd.h>\n#include <signal.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/signal.h>\n#include <sys/resource.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys",
        ".\n@returns {string} The stripped string.\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename'\n@example 'install <dir> [filename]' >> 'install dir filename",
        "\n@param {Object} [params] Parameters to be passed to the series'\n[highlight] method.\n@param {boolean} [params.addToLegend=true] Whether to add the series to the\nlegend.\n@param {boolean} [params.showInLegend=true] Whether to show the series in the\nlegend.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show the series in the\nnavigator.\n@param {boolean} [params.showInNavigator=true] Whether to show",
        "\n\n    #\n    # @param [String] name\n    # @param [Hash] options\n    # @option options [String] :color\n    # @option options [String] :font\n    # @option options [String] :font_family\n    # @option options [String] :font_size\n    # @option options [String] :font_style\n    # @option options [String] :font_variant\n    # @option options [String] :font_weight\n    # @option options [String] :font_variant_style\n    # @option options [String] :font_variant_weight\n    # @option options [String] :font_variant_variant\n    # @option options [String] :font_variant_variant_style\n    # @option options [String] :font_variant_variant_weight\n    # @option options [String] :font_variant_variant_style\n    # @option options [String] :font_variant_variant_weight\n    # @option options [String] :font_variant_variant_style\n    # @option options [String] :font_variant_variant_weight\n    # @option options [String] :font_variant_variant_style\n    # @option options [String] :font_variant_variant_weight\n    # @option options [String",
        ".ComponentQuery#matches\n@member Ext.ComponentQuery#matchesSelector\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matchesSelectorString\n@member Ext.ComponentQuery#matches",
        ".\n*/\nfunction load(filePath, options) {\n\tif (typeof filePath === 'string') {\n\t\treturn new VinylFile(filePath, options);\n\t}\n\treturn new VinylFile(filePath, options);\n}\n\nmodule.exports = load;\n",
        ".\n*/\nfunction VinylFile(filePath, options) {\n\tthis.filePath = filePath;\n\tthis.options = options;\n\tthis.vinyl = new Vinyl();\n}\n\nVinylFile.prototype.load = function() {\n\tvar self = this;\n\tvar file = new File(this.filePath);\n\tfile.load(function(err, data) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn;\n\t\t}\n\t\tself.vinyl.append(data);\n\t});\n};\n\nVinylFile.prototype.save = function() {\n\tvar self = this;\n\tvar file = new File(this.filePath);\n\tfile.save(function(err, data) {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t\treturn;\n\t\t}\n\t\tself.vinyl.append(data);\n\t});\n};\n\nVinylFile.prototype.toString = function() {\n\treturn this.vinyl.toString();\n};\n\nVinylFile.prototype.getPath = function() {\n\treturn this.filePath;\n};\n\nVinylFile.prototype.getOptions = function() {\n\treturn this.options;",
        ".\n*/\nexport function getVinylFiles(files, options) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (files.length === 0) {\n\t\t\treject(new Error('No files provided.'));\n\t\t\treturn;\n\t\t}\n\n\t\tconst promises = files.map(file => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tconst vinylFile = new VinylFile(file, options);\n\t\t\t\tvinylFile.getVinylFile(resolve, reject);\n\t\t\t});\n\t\t});\n\n\t\tPromise.all(promises).then(results => {\n\t\t\tresolve(results);\n\t\t}).catch(err => {\n\t\t\treject(err);\n\t\t});\n\t});\n}\n",
        ".\n*/\nfunction resolve(moduleId, options) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst path = options.base + moduleId;\n\t\tif (path.indexOf(options.base) === 0) {\n\t\t\tresolve(path);\n\t\t} else {\n\t\t\tconst dir = path.split(options.base);\n\t\t\tdir.pop();\n\t\t\tdir.push(moduleId);\n\t\t\tresolve(dir.join(options.base));\n\t\t}\n\t});\n}\n\nmodule.exports = resolve;\n",
        "\n*/\nfunction getRequirePaths(file, options) {\n\tvar paths = [];\n\tvar requirePaths = require.paths;\n\tvar require = requirePaths[file.relative];\n\tif (require) {\n\t\tpaths.push(require);\n\t}\n\tvar dir = file.dirname;\n\tif (dir) {\n\t\tpaths.push(dir);\n\t}\n\tvar dir = file.dirname;\n\tif (dir) {\n\t\tpaths.push(dir);\n\t}\n\treturn paths;\n}\n\nmodule.exports = getRequirePaths;\n",
        ")\n*/\nfunction filterDuplicates() {\n\treturn function(file) {\n\t\treturn !file.match(/\\.js$/);\n\t};\n}\n\n/**\n\t@function\t\tload\n\t@description\t\tLoad a file.\n\t@param {String}\t\tfile\t\tThe file to load.\n\t@returns {Object}\t\tThe loaded file.\n*/\nfunction load(file) {\n\tvar file = path.resolve(__dirname, file);\n\tif (fs.existsSync(file)) {\n\t\treturn require(file);\n\t}\n\treturn null;\n}\n\n/**\n\t@function\t\tloadAll\n\t@description\t\tLoad all files.\n\t@param {Array}\t\tfiles\t\tThe files to load.\n\t@returns {Array}\t\tThe loaded files.\n*/\nfunction loadAll(files) {\n\tvar files = files.map(load);\n\treturn files;\n}\n\n/**\n\t@function\t\tloadAllFiles\n\t@description\t\tLoad all files.\n\t@param {Array}\t\tfiles\t\tThe files to load.\n\t@returns {Array}\t\tThe loaded files.\n*/\nfunction loadAllFiles(files) {\n\tvar files = files.map(load);\n\treturn files;\n}\n",
        ".\n*/\nexport function getFiles(paths, options) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst files = [];\n\t\tconst dependencies = [];\n\t\tconst promises = [];\n\n\t\tpaths.split(path => {\n\t\t\tif (path.charAt(0) === '.') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '/') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '.') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '/') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '.') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '/') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '.') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '/') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (path.charAt(0) === '.') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (",
        ".\n*/\nexport function getInputFile(file, options) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (typeof file === 'string') {\n\t\t\tresolve(new VinylFile(file, options));\n\t\t} else {\n\t\t\tresolve(file);\n\t\t}\n\t});\n}\n\n/**\nGet input file and its dependencies.\n\n@param {VinylFile|string} file\t\tFile to get for.\n@param {Object} options\t\t\t\tOptions object.\n@returns {Promise.<VinylFile[]>}\t\tVinyl files found.\n*/\nexport function getInputFileAsync(file, options) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (typeof file === 'string') {\n\t\t\tresolve(new VinylFile(file, options));\n\t\t} else {\n\t\t\tresolve(file);\n\t\t}\n\t});\n}\n\n/**\nGet input file and its dependencies.\n\n@param {VinylFile|string} file\t\tFile to get for.\n@param {Object} options\t\t\t\tOptions object.\n@returns {Promise.<VinylFile[]>}\t\tVinyl files found.\n*/\nexport function getInputFileSync(file, options) {\n\treturn new Promise((resolve, reject",
        "@param {String} options.path\t\tPath to Vinyl file.\n@param {Function} options.callback\tCallback function.\n@param {Object} options.context\t\tContext object.\n@param {Object} options.options\t\tOptions object.\n@param {Object} options.callback.error\tError callback function.\n@param {Object} options.callback.data\tData callback function.\n@param {Object} options.callback.progress\tProgress callback function.\n@param {Object} options.callback.done\t\tDone callback function.\n@param {Object} options.callback.progress.total\tTotal number of files pushed.\n@param {Object} options.callback.progress.loaded\tLoaded number of files pushed.\n@param {Object} options.callback.progress.total.total\tTotal number of files pushed.\n@param {Object} options.callback.progress.loaded.loaded\tLoaded number of files pushed.\n@param {Object} options.callback.progress.total.total\tTotal number of files pushed.\n@param {Object} options.callback.progress.total.total\tTotal number of files pushed.\n@param {Object} options.callback.progress.total.total\tTotal number of files pushed.\n@param {Object} options.callback.progress.total.total\tTotal number of files pushed.\n@param {",
        ".\n*/\nfunction createResolver(options) {\n  return function(resolve, reject) {\n    var promise = new Promise(function(resolve, reject) {\n      resolve(options.resolve(resolve, reject));\n    });\n    promise.then(resolve, reject);\n    return promise;\n  };\n}\n\nmodule.exports = createResolver;\n",
        ".\n*/\nfunction parseSrcOptions(options, vinylCjsDeps) {\n\tvar srcOptions = {};\n\n\t// Add the default options.\n\tsrcOptions.src = options.src || '';\n\tsrcOptions.dest = options.dest || '';\n\tsrcOptions.destRoot = options.destRoot || '';\n\tsrcOptions.destExt = options.destExt || '';\n\tsrcOptions.destExts = options.destExts || [];\n\tsrcOptions.destExts.push('.js');\n\tsrcOptions.destExts.push('.css');\n\tsrcOptions.destExts.push('.html');\n\tsrcOptions.destExts.push('.png');\n\tsrcOptions.destExts.push('.jpg');\n\tsrcOptions.destExts.push('.jpeg');\n\tsrcOptions.destExts.push('.gif');\n\tsrcOptions.destExts.push('.webp');\n\tsrcOptions.destExts.push('.svg');\n\tsrcOptions.destExts.push('.mp4');\n\tsrcOptions.destExts.push('.mp3');\n\tsrcOptions.destExts.push('.mp4a');\n\tsrcOptions.destExts.push('.mp4v');\n\tsrcOptions.",
        " to the next page.\n\nIf you want to move to the next page, you can use the following code:\n\n    <script>\n        $(document).ready(function() {\n            $('#next-page').click(function() {\n                $('#next-page').removeClass('active');\n                $('#next-page').addClass('active');\n                $('#next-page').next().removeClass('active');\n                $('#next-page').next().addClass('active');\n            });\n        });\n    </script>\n\nIf you want to move to the previous page, you can use the following code:\n\n    <script>\n        $(document).ready(function() {\n            $('#previous-page').click(function() {\n                $('#previous-page').removeClass('active');\n                $('#previous-page').addClass('active');\n                $('#previous-page').prev().removeClass('active');\n                $('#previous-page').prev().addClass('active');\n            });\n        });\n    </script>\n\nIf you want to move to the next page, you can use the following code:\n\n    <script>\n        $(document).ready(function() {\n            $('#next-page').click(function() {\n                $('#",
        ".\n\nIf you're not on the first page, you can click the next button.\n\nIf you're on the last page, you can click the previous button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last page, you can click the next button.\n\nIf you're on the first page, you can click the previous button.\n\nIf you're on the last",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades",
        ".\n\nIf the current page is not a child of the current page, the current page is not\nanimated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n\nIf the current page is a child of the current page, the current page is not animated.\n",
        "\n*/\nExt.define('Ext.base.Borrow', {\n    extend: 'Ext.base.Class',\n    alias: 'borrow',\n    constructor: function(fromClass, members) {\n        this.callParent([fromClass, members]);\n    }\n});\n",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n@return {Array}\n*/\nfunction getTasks() {\n\tvar tasks = [];\n\tvar plugins = require('./plugins');\n\tvar tasksArray = plugins.tasks;\n\tfor (var i = 0; i < tasksArray.length; i++) {\n\t\ttasks.push(tasksArray[i]);\n\t}\n\treturn tasks;\n}\n\n/**\nHelper function to get the plugins for which we will look for tasks\n@param opts\n@return {Array}\n*/\nfunction getTasks(opts) {\n\tvar tasks = [];\n\tvar plugins = require('./plugins');\n\tvar tasksArray = plugins.tasks;\n\tfor (var i = 0; i < tasksArray.length; i++) {\n\t\ttasks.push(tasksArray[i]);\n\t}\n\treturn tasks;\n}\n\n/**\nHelper function to get the plugins for which we will look for tasks\n@param opts\n@return {Array}\n*/\nfunction getTasks(opts) {\n\tvar tasks = [];\n\tvar plugins = require('./plugins');\n\tvar tasksArray = plugins.tasks;\n\tfor (var i = 0; i < tasksArray.length; i++) {\n\t\ttasks.push(tasksArray[i]);\n\t}\n\treturn tasks;\n}\n\n/**",
        "\n@param gulpkl\n@param gulpkl2\n@param gulpkl3\n@param gulpkl4\n@param gulpkl5\n@param gulpkl6\n@param gulpkl7\n@param gulpkl8\n@param gulpkl9\n@param gulpkl10\n@param gulpkl11\n@param gulpkl12\n@param gulpkl13\n@param gulpkl14\n@param gulpkl15\n@param gulpkl16\n@param gulpkl17\n@param gulpkl18\n@param gulpkl19\n@param gulpkl20\n@param gulpkl21\n@param gulpkl22\n@param gulpkl23\n@param gulpkl24\n@param gulpkl25\n@param gulpkl26\n@param gulpkl27\n@param gulpkl28\n@param gulpkl29\n@param gulpkl30\n@param gulpkl31\n@param gulpkl32\n@param gulpkl33\n@param gulpkl34\n@param gulpkl35\n@param gulpkl36\n@param gulpkl37\n@param g",
        "\n\n    def test_run_model_method_with_args(self):\n        \"\"\"\n        Tests that the run model method with args works.\n        \"\"\"\n        self.assertEqual(\n            self.model.run_model(method='method', args=['arg1', 'arg2']),\n            'arg1 arg2'\n        )\n\n    def test_run_model_method_with_args_and_kwargs(self):\n        \"\"\"\n        Tests that the run model method with args and kwargs works.\n        \"\"\"\n        self.assertEqual(\n            self.model.run_model(method='method', args=['arg1', 'arg2'], kwargs={'arg3': 'arg4'}),\n            'arg1 arg2 arg3 arg4'\n        )\n\n    def test_run_model_method_with_args_and_kwargs_and_kwargs(self):\n        \"\"\"\n        Tests that the run model method with args and kwargs and kwargs works.\n        \"\"\"\n        self.assertEqual(\n            self.model.run_model(method='method', args=['arg1', 'arg2'], kwargs={'arg3': 'arg4', 'arg5': 'arg6'}),\n            'arg1 arg2 arg3 arg4 arg5 arg6'\n",
        ".\n@param {Object/String} [reason] (Optional) The reason for the abort.\n@param {Object/String} [reasonDescription] (Optional) The reason for the abort.\n@param {Object/String} [reasonCode] (Optional) The reason for the abort.\n@param {Object/String} [reasonMessage] (Optional) The reason for the abort.\n@param {Object/String} [reasonDetail] (Optional) The reason for the abort.\n@param {Object/String} [reasonUrl] (Optional) The reason for the abort.\n@param {Object/String} [reasonCodeDescription] (Optional) The reason for the abort.\n@param {Object/String} [reasonMessageDescription] (Optional) The reason for the abort.\n@param {Object/String} [reasonDetailDescription] (Optional) The reason for the abort.\n@param {Object/String} [reasonUrlDescription] (Optional) The reason for the abort.\n@param {Object/String} [reasonCodeCode] (Optional) The reason for the abort.\n@param {Object/String} [reasonMessageCode] (Optional) The reason for the abort.\n@param {Object/String} [reasonDetailCode] (Optional) The reason for the abort.\n@param {Object/String} [reasonUrlCode] (Optional) The reason for",
        ".\n@param {Object} request The request object.\n@param {Object} response The response object.\n@param {Object} options The options object.\n@param {Object} callback The callback object.\n@param {Object} context The context object.\n@param {Object} [options.error] The error object.\n@param {Object} [options.response] The response object.\n@param {Object} [options.request] The request object.\n@param {Object} [options.response.body] The response body.\n@param {Object} [options.response.headers] The response headers.\n@param {Object} [options.response.headers.status] The response status code.\n@param {Object} [options.response.headers.statusText] The response status text.\n@param {Object} [options.response.headers.type] The response type.\n@param {Object} [options.response.headers.type] The response type.\n@param {Object} [options.response.headers.charset] The response charset.\n@param {Object} [options.response.headers.transferEncoding] The response transfer encoding.\n@param {Object} [options.response.headers.transferEncodingEncoding] The response transfer encoding encoding.\n@param {Object} [options.response.headers.contentLength] The response content length.\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "\n\n\n#define MAX_N 10\n\nint n, m, k, a[MAX_N][MAX_N];\n\nint main()\n{\n\tscanf(\"%d %d %d\", &n, &m, &k);\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tscanf(\"%d\", &a[i][j]);\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tif (a[i][j] == 1)\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\", i);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0; j < m; j++)\n\t\t{\n\t\t\tif (a[i][j] == 2)\n\t\t\t{\n\t\t\t\tprintf(\"%d\\n\", i);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 0; i < n; i++)\n\t{\n\t\tfor (int j = 0",
        " bugs.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a hack, so it's a bit of a hack.\n// It's a bit of a hack, but it's a bit of a",
        "\n// setting is enabled.\n\nvar fs = require('fs');\nvar path = require('path');\nvar fs = require('fs-extra');\nvar exec = require('child_process').exec;\nvar execSync = require('child_process').execSync;\nvar execFile = require('child_process').execFile;\nvar execFileSync = require('child_process').execFileSync;\nvar execSync = require('child_process').execSync;\nvar execFileSync = require('child_process').execFileSync;\nvar exec = require('child_process').exec;\nvar execSync = require('child_process').execSync;\nvar execFile = require('child_process').execFile;\nvar execFileSync = require('child_process').execFileSync;\nvar execSync = require('child_process').execSync;\nvar execFile = require('child_process').execFile;\nvar execFileSync = require('child_process').execFileSync;\nvar exec = require('child_process').exec;\nvar execSync = require('child_process').execSync;\nvar execFile = require('child_process').execFile;\nvar execFileSync = require('child_process').execFileSync;\nvar execFile = require('child_process').execFile;\nvar execFileSync = require('child_",
        "\n\n    def get_column_width(self, column_name, column_type, column_options, column_width, column_width_options, column_width_options_for_children, column_width_options_for_children_for_children):\n        \"\"\"\n        Returns the column width for a given column name and column type.\n\n        :param column_name: The name of the column.\n        :type column_name: str\n\n        :param column_type: The type of the column.\n        :type column_type: str\n\n        :param column_options: The column options.\n        :type column_options: dict\n\n        :param column_width: The column width.\n        :type column_width: int\n\n        :param column_width_options: The column width options.\n        :type column_width_options: dict\n\n        :param column_width_options_for_children: The column width options for children.\n        :type column_width_options_for_children: dict\n\n        :param column_width_options_for_children_for_children: The column width options for children for children.\n        :type column_width_options_for_children_for_children: dict\n\n        :returns: The column width.\n        :rtype: int\n       ",
        " to the locked section.\n@param {Boolean} [force] Force unlocking of the locked section.\n@param {Boolean} [forceUnlock] Force unlocking of the locked section.\n@param {Boolean} [forceUnlockAll] Force unlocking of all locked sections.\n@param {Boolean} [forceUnlockAllLocked] Force unlocking of all locked sections.\n@param {Boolean} [forceUnlockAllUnlocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force unlocking of all unlocked sections.\n@param {Boolean} [forceUnlockAllUnlockedLockedLocked] Force",
        " and 3\n# sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub-sub",
        ".\n*/\nexport default function defaultTransformer(args) {\n  return args.map(function(arg) {\n    return arg.toString();\n  });\n}\n",
        "\n    // and the test will fail.\n    assertEquals(\"[object Object]\", toString(new Object()));\n  }\n\n  @Test\n  public void testToString() {\n    assertEquals(\"[object Object]\", toString(new Object()));\n  }\n\n  @Test\n  public void testEquals() {\n    assertTrue(toString(new Object()).equals(toString(new Object())));\n    assertFalse(toString(new Object()).equals(toString(new Object())));\n    assertFalse(toString(new Object()).equals(new Object()));\n  }\n\n  @Test\n  public void testHashCode() {\n    assertEquals(0, toString(new Object()).hashCode());\n  }\n\n  @Test\n  public void testEqualsAndHashCode() {\n    assertTrue(toString(new Object()).equals(toString(new Object())));\n    assertTrue(toString(new Object()).equals(toString(new Object())));\n    assertTrue(toString(new Object()).equals(new Object()));\n    assertFalse(toString(new Object()).equals(new Object()));\n  }\n\n  @Test\n  public void testEqualsAndHashCode2() {\n    assertTrue(toString(new Object()).equals(new Object()));\n    assertTrue(toString(new",
        "\n    }\n\n    public function testGetElements()\n    {\n        $this->assertEquals(array('a', 'b', 'c'), $this->element->getElements());\n    }\n\n    public function testGetElementsByTagName()\n    {\n        $this->assertEquals(array('a', 'b', 'c'), $this->element->getElementsByTagName('a'));\n    }\n\n    public function testGetElementsByTagNameNS()\n    {\n        $this->assertEquals(array('a', 'b', 'c'), $this->element->getElementsByTagNameNS('http://www.w3.org/1999/xhtml', 'a'));\n    }\n\n    public function testGetElementsByTagNameNSNS()\n    {\n        $this->assertEquals(array('a', 'b', 'c'), $this->element->getElementsByTagNameNSNS('http://www.w3.org/1999/xhtml', 'a', 'b'));\n    }\n\n    public function testGetElementsByTagNameNSNSNS()\n    {\n        $this->assertEquals(array('a', 'b', 'c'), $this->element->getElementsByTagNameNSNSNS('http://www.w3.org/1999/xhtml', 'a', 'b', 'c'));\n    }\n\n    public",
        "\n    //\n    //  @param {Array} array\n    //  @param {Number} index\n    //  @param {Number} length\n    //  @param {Boolean} [reverse]\n    //  @returns {Array}\n    //\n    //  @example\n    //    var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112",
        "\n    }\n\n    /**\n     * @param {string} name\n     * @param {string} value\n     * @param {string} type\n     * @param {string} [description]\n     * @param {string} [defaultValue]\n     * @param {string} [format]\n     * @param {string} [pattern]\n     * @param {string} [regexp]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param {string} [regexpOptions]\n     * @param",
        "\n*/\nfunction extractType(type) {\n  if (type === 'string') {\n    return 'string';\n  }\n  if (type === 'number') {\n    return 'number';\n  }\n  if (type === 'boolean') {\n    return 'boolean';\n  }\n  if (type === 'object') {\n    return 'object';\n  }\n  if (type === 'array') {\n    return 'array';\n  }\n  if (type === 'function') {\n    return 'function';\n  }\n  if (type === 'symbol') {\n    return 'symbol';\n  }\n  if (type === 'undefined') {\n    return 'undefined';\n  }\n  return 'object';\n}\n\n/**\n@param {Object} type JSDoc tag\n@returns {Object} current and expected type object\n*/\nfunction extractTypeFromJSDoc(type) {\n  if (type === 'string') {\n    return 'string';\n  }\n  if (type === 'number') {\n    return 'number';\n  }\n  if (type === 'boolean') {\n    return 'boolean';\n  }\n  if (type === 'object') {\n    return 'object';\n  }\n  if (type === 'array') {\n    return 'array';",
        "\n@example\n\n    var jsdocNode = {\n        type: 'void',\n        jsdocNode: {\n            type: 'undefined'\n        }\n    };\n\n    var type = jsdocNode.type;\n\n    if (type === 'void') {\n        // ...\n    } else if (type === 'undefined') {\n        // ...\n    }\n\n@example\n\n    var jsdocNode = {\n        type: 'void',\n        jsdocNode: {\n            type: 'undefined'\n        }\n    };\n\n    var type = jsdocNode.type;\n\n    if (type === 'void') {\n        // ...\n    } else if (type === 'undefined') {\n        // ...\n    }\n\n@example\n\n    var jsdocNode = {\n        type: 'void',\n        jsdocNode: {\n            type: 'undefined'\n        }\n    };\n\n    var type = jsdocNode.type;\n\n    if (type === 'void') {\n        // ...\n    } else if (type === 'undefined') {\n        // ...\n    }\n\n@example\n\n    var jsdocNode = {\n        type: 'void',\n        jsdocNode: {\n            type: 'undefined'\n        }\n   ",
        "\n@example\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdoc = require('jsdoc');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocComment = require('jsdoc-comment');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocCommentType = require('jsdoc-comment-type');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocCommentTypeComment = require('jsdoc-comment-type-comment');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocCommentTypeCommentType = require('jsdoc-comment-type-comment-type');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocCommentTypeCommentTypeComment = require('jsdoc-comment-type-comment-type-comment');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocCommentTypeCommentTypeCommentType = require('jsdoc-comment-type-comment-type-comment-type');\n\n/**\n * @jsdoc\n * @type {ASTNode}\n */\nvar jsdocCommentTypeCommentTypeCommentTypeComment = require('jsdoc-comment-",
        "\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return $this\n     */\n    public function set($name, $value)\n    {\n        $this->set($name, $value, true);\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @param bool   $overwrite\n     * @return $this\n     */\n    public function set($name, $value, $overwrite = false)\n    {\n        $this->set($name, $value, $overwrite, true);\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @param bool   $overwrite\n     * @param bool   $strict\n     * @return $this\n     */\n    public function set($name, $value, $overwrite = false, $strict = false)\n    {\n        $this->set($name, $value, $overwrite, $strict, true);\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @param bool   $overwrite\n     * @param bool   $strict\n     * @param",
        ".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "\n\n    def __eq__(self, other):\n        return isinstance(other, self.__class__) and self.id == other.id\n\n    def __ne__(self, other):\n        return not self == other\n\n    def __repr__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __str__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __repr__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __str__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __str__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __str__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __str__(self):\n        return '<%s: %s>' % (self.__class__.__name__, self.id)\n\n    def __str__(self",
        ".\n\nIf the current value is not in any list of predictions, add it to the list of predictions.\n\nIf the current value is in any list of predictions, remove it from the list of predictions.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is not in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is not in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n\nIf the current value is in any list of predictions, return the current value.\n",
        ".\n\nA.1.2.1 A.1.2.2 A.1.2.3 A.1.2.4 A.1.2.5 A.1.2.6 A.1.2.7 A.1.2.8 A.1.2.9 A.1.2.10 A.1.2.11 A.1.2.12 A.1.2.13 A.1.2.14 A.1.2.15 A.1.2.16 A.1.2.17 A.1.2.18 A.1.2.19 A.1.2.20 A.1.2.21 A.1.2.22 A.1.2.23 A.1.2.24 A.1.2.25 A.1.2.26 A.1.2.27 A.1.2.28 A.1.2.29 A.1.2.30 A.1.2.31 A.1.2.32 A.1.2.33 A.1.2.34 A.1.2.35 A.1.2.36 A.1.2.37 A.1.2.38 A.1.2.39 A.1.2.40 A.1.2.41 A.1.2.42 A.",
        "\n@param text The string (trimmed) that contains the argument\n@param start The position of the text in the original input string\n@param end See start\n@param prefix Knowledge of quotation marks and whitespace used prior to the\ntext in the input string allows us to re-generate the original input from\nthe arguments.\n@param suffix Any quotation marks and whitespace used after the text.\nWhitespace is normally placed in the prefix to the succeeding argument, but\ncan be used here when this is the last argument.\n@param emitter Arguments use something else to pass on change events\n@param callback The callback to call when the text changes\n@param context The context to pass to the callback\n@param error The error to report\n@param errorContext The context to pass to the callback\n@param errorType The type of error to report\n@param errorMessage The error message to report\n@param errorStack The stack trace to report\n@param errorStackDepth The depth of the stack trace to report\n@param errorSource The source of the error to report\n@param errorSourceType The type of the source of the error to report\n@param errorSourceLocation The location of the error to report\n@param errorSourceFunction The function name of the error to report\n@param errorSourceLine The line number of the error to report\n@param errorSourceColumn The column number of the error to report\n@param",
        ".\n\nThis file is part of the \"xenomi\" project, http://code.google.com/p/xenomi/\n\nCopyright (c) 2009-2010, John Haddon <john@haddon.com>\nCopyright (c) 2010-2011, Markus Friedl <markus@friedl.org>\nCopyright (c) 2011-2012, University of Szeged\nCopyright (c) 2013-2014, The Regents of the University of California\nCopyright (c) 2014-2015, Eric Young <eric@young.org>\nCopyright (c) 2015-2016, The Tor Project, Inc.\nCopyright (c) 2017-2018, The Tor Project, Inc.\nCopyright (c) 2018-2019, UCAR/Unidata\nCopyright (c) 2019-2020, The Tor Project, Inc.\nCopyright (c) 2020-2021, The Tor Project, Inc.\nCopyright (c) 2021-2021, The Tor Project, Inc.\nCopyright (c) 2021-2021, The Tor Project, Inc.\nCopyright (c) 2021-2021, The Tor Project, Inc.\nCopyright (c) 2021-",
        "\n\n    def test_get_doc_for_class(self):\n        \"\"\"\n        Tests that the documentation for a class is returned.\n        \"\"\"\n        class TestClass(object):\n            def __init__(self, name):\n                self.name = name\n\n            def __str__(self):\n                return self.name\n\n        doc = self.get_doc_for_class(TestClass)\n        self.assertEqual(doc.name, 'TestClass')\n\n    def test_get_doc_for_method(self):\n        \"\"\"\n        Tests that the documentation for a method is returned.\n        \"\"\"\n        class TestClass(object):\n            def __init__(self, name):\n                self.name = name\n\n            def __str__(self):\n                return self.name\n\n        doc = self.get_doc_for_method(TestClass, 'test_method')\n        self.assertEqual(doc.name, 'TestClass.test_method')\n\n    def test_get_doc_for_property(self):\n        \"\"\"\n        Tests that the documentation for a property is returned.\n        \"\"\"\n        class TestClass(object):\n            def __init__(self, name):\n                self.name = name\n\n            def __str__(",
        " in sync.\n\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes, we need to keep a copy of the command.\n    # If the command changes",
        " to store the values of the array.\n\nFor example,\n\nGiven array [1,2,3,4,5,6,7,8,9],\n\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n\nWe can store the values of the array in an array.\n\nFor example,\n\nGiven array [1,2,3,4,5,6,7,8,9],\n\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n\nWe can store the values of the array in an array.\n\nFor example,\n\nGiven array [1,2,3,4,5,6,7,8,9],\n\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n\nWe can store the values of the array in an array.\n\nFor example,\n\nGiven array [1,2,3,4,5,6,7,8,9],\n\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n\nWe can store the values of the array in an array.\n\nFor example,\n\nGiven array [1",
        ", and the first one is the most recent.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe `hints` field is a list of hints.\n\nThe",
        ".\n\nExample:\n\n    >>> names, values = extract_names_and_values(['a', 'b', 'c'])\n    >>> names\n    ['a', 'b', 'c']\n    >>> values\n    [1, 2, 3]\n\n\"\"\"\n\n\ndef extract_names_and_values(input_list):\n    \"\"\"\n    Extract the names and values of all the assignments, and return as\n\n    >>> names, values = extract_names_and_values(['a', 'b', 'c'])\n    >>> names\n    ['a', 'b', 'c']\n    >>> values\n    [1, 2, 3]\n\n    \"\"\"\n    names = []\n    values = []\n    for item in input_list:\n        names.append(item)\n        values.append(item)\n    return names, values\n\n\nif __name__ == '__main__':\n    print extract_names_and_values([1, 2, 3])\n",
        ".\n@param commandAssignment The command assignment to use.\n@param commandAssignment.args The command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param commandAssignment.args.length The number of command assignment arguments.\n@param",
        "Extract a file from a URL.\n\nExtract a file from a URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe URL must be a valid URL.\n\nThe",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Image, self).__init__(*args, **kwargs)\n        self.image = None\n        self.image_size = None\n        self.image_size_x = None\n        self.image_size_y = None\n        self.image_size_w = None\n        self.image_size_h = None\n        self.image_size_x_ratio = None\n        self.image_size_y_ratio = None\n        self.image_size_w_ratio = None\n        self.image_size_h_ratio = None\n        self.image_size_x_ratio = None\n        self.image_size_y_ratio = None\n        self.image_size_w_ratio = None\n        self.image_size_h_ratio = None\n        self.image_size_x_ratio = None\n        self.image_size_y_ratio = None\n        self.image_size_w_ratio = None\n        self.image_size_h_ratio = None\n        self.image_size_x_ratio = None\n        self.image_size_y_ratio = None\n        self.image_size_w_ratio = None\n        self.image_size_h_",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        ", we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align the elements with the input box.\n\nIf the user clicks on the button, we want to align",
        ".\n    #\n    # @param [String] str\n    # @return [String]\n    def self.strip_tabs(str)\n      str.gsub(/\\t/, ' ')\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.strip_spaces(str)\n      str.gsub(/\\s+/, ' ')\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.strip_newlines(str)\n      str.gsub(/\\n/, ' ')\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.strip_newlines_and_tabs(str)\n      str.gsub(/\\n\\t/, ' ')\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.strip_newlines_and_spaces(str)\n      str.gsub(/\\n\\s+/, ' ')\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.strip_newlines_and_tabs_and_spaces(str)\n      str.gsub(/",
        "\n\n    /**\n     * @param string $text\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string $value\n     * @param string $type\n     * @param string",
        ".\n\n# I worked on this challenge [by myself, with: ].\n\n# Pseudocode\n\n# Input: a string\n# Output: a string\n# Steps:\n# 1. Create a method that takes a string as an argument and returns a string\n# 2. Create a method that takes a string as an argument and returns a string\n# 3. Create a method that takes a string as an argument and returns a string\n# 4. Create a method that takes a string as an argument and returns a string\n# 5. Create a method that takes a string as an argument and returns a string\n# 6. Create a method that takes a string as an argument and returns a string\n# 7. Create a method that takes a string as an argument and returns a string\n# 8. Create a method that takes a string as an argument and returns a string\n# 9. Create a method that takes a string as an argument and returns a string\n# 10. Create a method that takes a string as an argument and returns a string\n# 11. Create a method that takes a string as an argument and returns a string\n# 12. Create a method that takes a string as an argument and returns a string\n# 13. Create a method that takes a string as an argument and returns a string\n# 14. Create a method that takes a string as an argument and returns a string\n# 15. Create",
        "\n    }\n\n    /**\n     * @param array $values\n     * @return array\n     */\n    public static function merge(array $values)\n    {\n        $result = [];\n        foreach ($values as $value) {\n            if (is_array($value)) {\n                $result = array_merge($result, self::merge($value));\n            } else {\n                $result[] = $value;\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * @param array $values\n     * @return array\n     */\n    public static function mergeWith(array $values)\n    {\n        $result = [];\n        foreach ($values as $value) {\n            if (is_array($value)) {\n                $result = array_merge($result, self::mergeWith($value));\n            } else {\n                $result[] = $value;\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * @param array $values\n     * @return array\n     */\n    public static function mergeWithWithSpans(array $values)\n    {\n        $result = [];\n        foreach ($values as $value) {\n            if (is_array($value)) {\n                $result = array_merge($",
        "\n    if (input.value === '1') {\n      input.value = '2';\n    }\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '2') {\n    input.value = '1';\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '1') {\n    input.value = '2';\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '2') {\n    input.value = '1';\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '1') {\n    input.value = '2';\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '2') {\n    input.value = '1';\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '1') {\n    input.value = '2';\n  }\n\n  // Update the input element to reflect the new value\n  if (input.value === '2') {\n    input.value = '1';\n  }\n\n  // Update the input element to reflect the new",
        "\n    }\n\n    @Override\n    public void display(String message) {\n        display(message, null);\n    }\n\n    @Override\n    public void display(String message, Throwable throwable) {\n        display(message, throwable, null);\n    }\n\n    @Override\n    public void display(String message, Throwable throwable, String format) {\n        display(message, throwable, format, null);\n    }\n\n    @Override\n    public void display(String message, Throwable throwable, String format, Object... args) {\n        display(message, throwable, format, args, null);\n    }\n\n    @Override\n    public void display(String message, Throwable throwable, String format, Object... args, String formatString) {\n        display(message, throwable, format, args, formatString, null);\n    }\n\n    @Override\n    public void display(String message, Throwable throwable, String format, Object... args, String formatString, Object... args2) {\n        display(message, throwable, format, args, formatString, args2, null);\n    }\n\n    @Override\n    public void display(String message, Throwable throwable, String format, Object... args, String formatString, Object... args2, String formatString2) {\n        display(message, throwable, format, args, formatString,",
        "#include \"stdafx.h\"\n#include \"../include/Game.h\"\n#include \"../include/GameState.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include",
        "\n\n    def test_single_iteration_with_multiple_threads(self):\n        # Test that a single iteration of a single thread works\n        # with multiple threads\n        threads = [\n            threading.Thread(target=self.test_single_iteration_with_multiple_threads_1),\n            threading.Thread(target=self.test_single_iteration_with_multiple_threads_2),\n            threading.Thread(target=self.test_single_iteration_with_multiple_threads_3),\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\n    def test_single_iteration_with_multiple_threads_1(self):\n        # Test that a single iteration of a single thread works\n        # with multiple threads\n        threads = [\n            threading.Thread(target=self.test_single_iteration_with_multiple_threads_1_1),\n            threading.Thread(target=self.test_single_iteration_with_multiple_threads_1_2),\n            threading.Thread(target=self.test_single_iteration_with_multiple_threads_1_3),\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\n    def",
        " the first match is used\n *\n * @param {RegExp} regexp\n * @returns {RegExp}\n */\nfunction firstMatch(regexp) {\n  return regexp.exec(/\\b(?:[^\\\\]|\\\\.)*$/)[0];\n}\n\n/**\n * @param {RegExp} regexp\n * @returns {RegExp}\n */\nfunction lastMatch(regexp) {\n  return regexp.exec(/\\b(?:[^\\\\]|\\\\.)*$/)[regexp.length - 1];\n}\n\n/**\n * @param {RegExp} regexp\n * @returns {RegExp}\n */\nfunction match(regexp) {\n  return regexp.exec(/\\b(?:[^\\\\]|\\\\.)*$/)[0];\n}\n\n/**\n * @param {RegExp} regexp\n * @returns {RegExp}\n */\nfunction matchAll(regexp) {\n  return regexp.exec(/\\b(?:[^\\\\]|\\\\.)*$/)[0];\n}\n\n/**\n * @param {RegExp} regexp\n * @returns {RegExp}\n */\nfunction matchAny(regexp) {\n  return regexp.exec(/\\b(?:[^\\\\]|\\\\.)*$/)[0];\n}\n\n/**\n * @param {RegExp} regexp\n * @returns {RegExp}\n */\nfunction matchAllIgnoreCase(regexp) {\n  return regexp.exec(/\\b(?:[^\\\\",
        ".\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n\nThis function is called by the keyBinding.\n",
        "\n\n    def test_get_readable_fields_with_multiple_fields\n      @model.fields.each do |field|\n        assert_equal field.name, field.readable_fields.first.name\n      end\n    end\n\n    def test_get_readable_fields_with_multiple_fields_with_multiple_fields\n      @model.fields.each do |field|\n        assert_equal field.name, field.readable_fields.first.name\n        assert_equal field.name, field.readable_fields.last.name\n      end\n    end\n\n    def test_get_readable_fields_with_multiple_fields_with_multiple_fields\n      @model.fields.each do |field|\n        assert_equal field.name, field.readable_fields.first.name\n        assert_equal field.name, field.readable_fields.last.name\n      end\n    end\n\n    def test_get_readable_fields_with_multiple_fields_with_multiple_fields\n      @model.fields.each do |field|\n        assert_equal field.name, field.readable_fields.first.name\n        assert_equal field.name, field.readable_fields.last.name\n      end\n    end\n\n    def test_get_readable_fields_with_",
        ".\n\n// This is a generated file. Not intended for manual editing.\npackage com.google.devtools.build.lib.skyframe;\n\nimport com.google.devtools.build.lib.actions.Artifact;\nimport com.google.devtools.build.lib.actions.ArtifactRoot;\nimport com.google.devtools.build.lib.actions.ArtifactRoot.ArtifactRootBuilder;\nimport com.google.devtools.build.lib.actions.ArtifactRoot.RootType;\nimport com.google.devtools.build.lib.actions.ArtifactRoot.RootType.ArtifactRootTypeBuilder;\nimport com.google.devtools.build.lib.actions.ArtifactRoot.RootType.ArtifactRootTypeBuilder.ArtifactRootTypeBuilderImpl;\nimport com.google.devtools.build.lib.actions.ArtifactRoot.RootType.ArtifactRootTypeBuilder.RootTypeBuilderImpl.ArtifactRootTypeBuilderImplImpl;\nimport com.google.devtools.build.lib.actions.ArtifactRoot.RootType.ArtifactRootTypeBuilder.RootTypeBuilderImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImplImpl.RootTypeBuilderImpl.RootType",
        ",\n\t\tand if it is not, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is not, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is not, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is, then we can't drop the item.\n\n\t\tIf it is",
        ".\n\n  // If the drop event is not currently active, then we need to wait for it to\n  // be active.\n  if (!active_drop_event_) {\n    active_drop_event_ = true;\n    active_drop_event_->Wait();\n  }\n\n  // If the drop event is currently active, then we need to wait for it to be\n  // active.\n  if (active_drop_event_) {\n    active_drop_event_->Wait();\n  }\n\n  // If the drop event is currently inactive, then we need to wait for it to\n  // be inactive.\n  if (!active_drop_event_) {\n    active_drop_event_ = true;\n    active_drop_event_->Wait();\n  }\n\n  // If the drop event is currently inactive, then we need to wait for it to be\n  // inactive.\n  if (active_drop_event_) {\n    active_drop_event_->Wait();\n  }\n\n  // If the drop event is currently active, then we need to wait for it to be\n  // inactive.\n  if (!active_drop_event_) {\n    active_drop_event_ = true;\n    active_drop_event_->Wait();\n  }\n\n  //",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        "\n@returns {String} The id of the removed style or link tag\n*/\nfunction removeStyleOrLink(id) {\n    var style = document.getElementById(id);\n    if (style) {\n        style.parentNode.removeChild(style);\n    }\n    return id;\n}\n\n/**\nRemoves a style or link tag by id\n@param {String} id The id of the style or link tag\n@returns {String} The id of the removed style or link tag\n*/\nfunction removeStyleOrLinkById(id) {\n    var style = document.getElementById(id);\n    if (style) {\n        style.parentNode.removeChild(style);\n    }\n    return id;\n}\n\n/**\nRemoves a style or link tag by id\n@param {String} id The id of the style or link tag\n@returns {String} The id of the removed style or link tag\n*/\nfunction removeStyleOrLinkById(id) {\n    var style = document.getElementById(id);\n    if (style) {\n        style.parentNode.removeChild(style);\n    }\n    return id;\n}\n\n/**\nRemoves a style or link tag by id\n@param {String} id The id of the style or link tag\n@returns {String} The id of the removed style or link tag",
        ".\n@returns {String} The new href of the stylesheet\n*/\nfunction swapStylesheet(id, url) {\n  var link = document.getElementById(id);\n  link.href = url;\n  return url;\n}\n\n/**\n@function\n@param {String} id The id of a link tag to remove\n@returns {String} The new href of the stylesheet\n*/\nfunction swapStylesheetById(id) {\n  var link = document.getElementById(id);\n  return link.href;\n}\n\n/**\n@function\n@param {String} id The id of a link tag to remove\n@param {String} url The href of a stylesheet to include\n@returns {String} The new href of the stylesheet\n*/\nfunction swapStylesheetByIdAndUrl(id, url) {\n  var link = document.getElementById(id);\n  link.href = url;\n  return url;\n}\n\n/**\n@function\n@param {String} id The id of a link tag to remove\n@param {String} url The href of a stylesheet to include\n@returns {String} The new href of the stylesheet\n*/\nfunction swapStylesheetByIdAndUrl(id, url) {\n  var link = document.getElementById(id);\n  link.href = url;\n  return url;\n}\n\n/**\n@function\n@",
        " of css rules indexed by selector\n*/\nfunction getCssRules(refreshCache) {\n  var rules = {};\n  var rulesBySelector = {};\n  var rulesBySelectorIndex = {};\n  var rulesBySelectorIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rulesBySelectorIndexIndexIndex = {};\n  var rules",
        ".\n@example\nvar rule = createRule(styleSheet, 'a', 'color:red;font-weight:bold;text-decoration:underline');\n*/\nfunction createRule(styleSheet, selector, property) {\n  var rule = styleSheet.createRule(selector, property);\n  return rule;\n}\n\n/**\nCreates a rule.\n@param {CSSStyleSheet} styleSheet The StyleSheet to create the rule in as returned from {@link #createStyleSheet}.\n@param {String} selector The selector to target the rule.\n@param {String} property The cssText specification eg `\"color:red;font-weight:bold;text-decoration:underline\"`\n@return {CSSStyleRule} The created rule.\n@example\nvar rule = createRule(styleSheet, 'a', 'color:red;font-weight:bold;text-decoration:underline');\n*/\nfunction createRule(styleSheet, selector, property) {\n  var rule = styleSheet.createRule(selector, property);\n  return rule;\n}\n\n/**\nCreates a rule.\n@param {CSSStyleSheet} styleSheet The StyleSheet to create the rule in as returned from {@link #createStyleSheet}.\n@param {String} selector The selector to target the rule.\n@param {String} property The cssText specification eg `\"",
        ", and the function will continue to be called again.\n\n# I worked on this challenge [by myself, with: ].\n\n# Pseudocode\n\n# Input: an array of integers\n# Output: an array of integers\n# Steps:\n# 1. Create a new array of integers\n# 2. Create a new array of integers\n# 3. Create a new array of integers\n# 4. Create a new array of integers\n# 5. Create a new array of integers\n# 6. Create a new array of integers\n# 7. Create a new array of integers\n# 8. Create a new array of integers\n# 9. Create a new array of integers\n# 10. Create a new array of integers\n# 11. Create a new array of integers\n# 12. Create a new array of integers\n# 13. Create a new array of integers\n# 14. Create a new array of integers\n# 15. Create a new array of integers\n# 16. Create a new array of integers\n# 17. Create a new array of integers\n# 18. Create a new array of integers\n# 19. Create a new array of integers\n# 20. Create a new array of integers\n# 21. Create a new array of integers\n# 22. Create a new array of integers\n# 23. Create a new array of integers\n# 24. Create a new array of integers\n# 25",
        ".\n */\nExt.define('Ext.data.TreeStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'Ext.data.NodeInterface',\n        'Ext.data.TreeStore'\n    ],\n\n    constructor: function(config) {\n        config = config || {};\n        Ext.apply(this, config);\n        this.callParent([config]);\n    },\n\n    /**\n     * @cfg {String} root\n     * The root node to expand.\n     */\n\n    /**\n     * @cfg {String} rootCls\n     * The root node class name.\n     */\n\n    /**\n     * @cfg {String} rootClsCls\n     * The root node class name.\n     */\n\n    /**\n     * @cfg {String} rootClsClsCls\n     * The root node class name.\n     */\n\n    /**\n     * @cfg {String} rootClsClsClsCls\n     * The root node class name.\n     */\n\n    /**\n     * @cfg {String} rootClsClsClsClsCls\n     * The root node class name.\n     */\n\n    /**\n     * @cfg {String} rootClsClsClsClsCls\n     * The root node class name.\n     */\n\n    /**\n     * @",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.serialization.impl;\n\nimport com.hazelcast.internal.serialization.Data;\nimport com.hazelcast.internal.serialization.impl.record.InternalRecord;\nimport com.hazelcast.internal.serialization.impl.record.InternalRecordFactory;\nimport com.hazelcast.internal.serialization.impl.record.InternalRecordStore;\nimport com.hazelcast.internal.serialization.impl.record.InternalRecordStoreFactory;\nimport com.hazelcast.internal.serialization.impl.record",
        "}}{{1}}\n\n@interface HTML5Layout : NSObject\n\n@property (nonatomic, readonly) NSString *layout;\n\n@end\n",
        "\n\n    public static void main(String[] args) throws Exception {\n        String[] args2 = new String[]{\"-h\", \"help\"};\n        CommandLineParser parser = new GnuParser();\n        CommandLine cmd = parser.parse(args2);\n        if (cmd.hasOption(\"h\")) {\n            System.out.println(\"Usage: java -jar <jar> [options]\");\n            System.exit(0);\n        }\n        if (cmd.hasOption(\"jar\")) {\n            String jar = cmd.getOptionValue(\"jar\");\n            System.out.println(\"Loading jar: \" + jar);\n            JarFile jarFile = new JarFile(jar);\n            Enumeration<JarEntry> entries = jarFile.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                if (entry.isDirectory()) {\n                    continue;\n                }\n                String name = entry.getName();\n                if (name.endsWith(\".class\")) {\n                    System.out.println(\"Loading class: \" + name);\n                    Class<?> clazz = Class.forName(name);\n                    System.out.println(\"Loaded class: \" + clazz);\n                }\n            }\n        }\n    }\n}\n",
        ".\n*/\nmodule.exports = function(app, argv, options) {\n  var first = options.first || [];\n  var last = options.last || [];\n\n  if (first.length > last.length) {\n    first = first.slice(0, last.length);\n    last = last.slice(0, first.length);\n  }\n\n  return argv.sort(function(a, b) {\n    return first.indexOf(a) - last.indexOf(b);\n  });\n};\n",
        "\n    // of the tree.\n    function createTree() {\n        var tree = document.getElementById('tree');\n        var root = new Tree(tree);\n        root.setRoot(new Tree(tree));\n        return root;\n    }\n\n    // Creates a new tree node with the given text and a tree node with the given\n    // children.\n    function createTreeNode(text, children) {\n        var node = document.createElement('li');\n        node.textContent = text;\n        node.children = children;\n        return node;\n    }\n\n    // Creates a new tree node with the given text and a tree node with the given\n    // children.\n    function createTreeNodeWithChildren(text, children) {\n        var node = document.createElement('li');\n        node.textContent = text;\n        node.children = children;\n        return node;\n    }\n\n    // Creates a new tree node with the given text and a tree node with the given\n    // children.\n    function createTreeNodeWithChildren(text, children, children) {\n        var node = document.createElement('li');\n        node.textContent = text;\n        node.children = children;\n        node.children = children;\n        return node;\n    }\n\n    // Creates a new tree node with",
        "\n    #   @param [String] path\n    #   @param [Hash] options\n    #   @option options [String] :path\n    #   @option options [String] :path_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with_namespace_with_namespace_with_namespace\n    #   @option options [String] :path_with",
        "\n    }\n\n    /**\n     * @param {string} value\n     * @param {string} [type]\n     * @param {string} [placeholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string} [placeholderPlaceholder]\n     * @param {string}",
        "\n*/\nExt.on(Ext.picker.DatePicker.prototype, 'keypress', function(e) {\n    if (e.getKey() == Ext.EventObject.ENTER) {\n        e.stopEvent();\n        e.preventDefault();\n        this.onSelect(e);\n    }\n});\n\n/**\n@private\n@param {Ext.EventObject} e\n*/\nExt.on(Ext.picker.DatePicker.prototype, 'select', function(e) {\n    if (e.getKey() == Ext.EventObject.ENTER) {\n        e.stopEvent();\n        e.preventDefault();\n        this.onSelect(e);\n    }\n});\n\n/**\n@private\n@param {Ext.EventObject} e\n*/\nExt.on(Ext.picker.DatePicker.prototype, 'beforeselect', function(e) {\n    if (e.getKey() == Ext.EventObject.ENTER) {\n        e.stopEvent();\n        e.preventDefault();\n        this.onBeforeSelect(e);\n    }\n});\n\n/**\n@private\n@param {Ext.EventObject} e\n*/\nExt.on(Ext.picker.DatePicker.prototype, 'afterselect', function(e) {\n    if (e.getKey() == Ext.Event",
        "\n */\nExt.define('Ext.ux.grid.SelectionModel', {\n    extend: 'Ext.grid.SelectionModel',\n    requires: [\n        'Ext.grid.plugin.RowSelectionModel'\n    ],\n\n    /**\n     * @cfg {Boolean} [autoSelect=true]\n     * Whether to automatically select the record when the grid is opened.\n     * Defaults to true.\n     */\n    autoSelect: true,\n\n    /**\n     * @cfg {Boolean} [autoSelectOnLoad=true]\n     * Whether to automatically select the record when the grid is loaded.\n     * Defaults to true.\n     */\n    autoSelectOnLoad: true,\n\n    /**\n     * @cfg {Boolean} [autoSelectOnUnload=true]\n     * Whether to automatically select the record when the grid is unloaded.\n     * Defaults to true.\n     */\n    autoSelectOnUnload: true,\n\n    /**\n     * @cfg {Boolean} [autoSelectOnSelectionChange=true]\n     * Whether to automatically select the record when the grid is selected.\n     * Defaults to true.\n     */\n    autoSelectOnSelectionChange: true,\n\n    /**\n     * @cfg {Boolean} [autoSelectOnRowSelection=true]\n     * Whether to automatically select the record when",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support",
        "} this\n*/\nExt.ux.TreePicker.prototype.setValue = function(value) {\n    this.value = value;\n    return this;\n};\n\n/**\n@private\n@method setValue\n@param {Mixed} value\n@return {Ext.ux.TreePicker} this\n*/\nExt.ux.TreePicker.prototype.setValue = function(value) {\n    this.value = value;\n    return this;\n};\n\n/**\n@private\n@method getValue\n@return {Mixed}\n*/\nExt.ux.TreePicker.prototype.getValue = function() {\n    return this.value;\n};\n\n/**\n@private\n@method setValue\n@param {Mixed} value\n@return {Ext.ux.TreePicker} this\n*/\nExt.ux.TreePicker.prototype.setValue = function(value) {\n    this.value = value;\n    return this;\n};\n\n/**\n@private\n@method getValue\n@return {Mixed}\n*/\nExt.ux.TreePicker.prototype.getValue = function() {\n    return this.value;\n};\n\n/**\n@private\n@method setValue\n@param {Mixed} value\n@return {Ext.ux.TreePicker} this\n*/\nExt.ux.TreePicker.prototype.setValue = function(value) {\n",
        "\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n",
        ".\n@returns {Object} The sorter instance.\n@example\nvar sorter = new Sorter('ASC');\nsorter.sort('foo');\nsorter.sort('bar');\nsorter.sort('baz');\n*/\nfunction Sorter(direction) {\n  this.direction = direction;\n}\n\n/**\n@method sort\n@param {String} value The value to sort in.\n@returns {Object} The sorter instance.\n@example\nvar sorter = new Sorter('ASC');\nsorter.sort('foo');\nsorter.sort('bar');\nsorter.sort('baz');\n*/\nSorter.prototype.sort = function(value) {\n  this.value = value;\n  return this;\n};\n\n/**\n@method reverse\n@returns {Object} The sorter instance.\n@example\nvar sorter = new Sorter('DESC');\nsorter.sort('foo');\nsorter.sort('bar');\nsorter.sort('baz');\n*/\nSorter.prototype.reverse = function() {\n  this.value = -this.value;\n  return this;\n};\n\n/**\n@method equals\n@param {Object} other The other sorter instance.\n@returns {Boolean} Whether the sorter instance is equal to the other sorter instance.\n@example\nvar sorter = new Sorter('",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Toggles, self).__init__(*args, **kwargs)\n        self.direction = TogglesDirection.ASCENDING\n\n    def __call__(self, *args, **kwargs):\n        return self.direction(*args, **kwargs)\n\n    def __eq__(self, other):\n        return isinstance(other, TogglesDirection) and self.direction == other.direction\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __repr__(self):\n        return \"TogglesDirection(%s)\" % self.direction\n\n\nclass TogglesDirection(object):\n    \"\"\"\n    Represents the sorting direction for a list of items.\n    \"\"\"\n    ASCENDING = \"ascending\"\n    DESCENDING = \"descending\"\n\n    def __init__(self, *args, **kwargs):\n        super(TogglesDirection, self).__init__(*args, **kwargs)\n        self.direction = TogglesDirection.ASCENDING\n\n    def __call__(self, *args, **kwargs):\n        return self.direction(*args, **kwargs)\n\n    def __eq__(self, other):\n        return isinstance(",
        ".\n@param {Object} [options] An object with the following properties:\n@param {String} [options.sort] A string that specifies the sort function to use.\n@param {String} [options.direction] A string that specifies the direction to use.\n@param {String} [options.reverse] A string that specifies the reverse to use.\n@param {String} [options.ignoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitive] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitiveIgnoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitiveIgnoreCaseIgnoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitiveIgnoreCaseIgnoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitiveIgnoreCaseIgnoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitiveIgnoreCaseIgnoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCaseInsensitiveIgnoreCaseIgnoreCase] A string that specifies the case-insensitive comparison to use.\n@param {String} [options.ignoreCase",
        " GedcomX Recurring Date.\n *\n * @author  Alexander Gr\u00fcn\n * @since   1.0\n */\npublic class GedcomXRecurringDate extends GedcomXRecurringDateBase {\n\n    /**\n     * Constructs a new GedcomXRecurringDate.\n     *\n     * @param  RecurringDate  Recurring Date.\n     */\n    public GedcomXRecurringDate(RecurringDate recurringDate) {\n        super(recurringDate);\n    }\n\n    /**\n     * Constructs a new GedcomXRecurringDate.\n     *\n     * @param  RecurringDate  Recurring Date.\n     * @param  RecurringDate  Recurring Date.\n     * @param  RecurringDate  Recurring Date.\n     */\n    public GedcomXRecurringDate(RecurringDate recurringDate, RecurringDate recurringDate) {\n        super(recurringDate, recurringDate);\n    }\n\n    /**\n     * Constructs a new GedcomXRecurringDate.\n     *\n     * @param  RecurringDate  Recurring Date.\n     * @param  RecurringDate  Recurring Date.\n     * @param  RecurringDate  Recurring Date.\n     * @param  RecurringDate  Recurring Date.\n     */\n    public GedcomXRe",
        "\n@api public\n*/\n\nmodule.exports = function(iopa, path, opts) {\n  opts = opts || {};\n\n  return function(file, callback) {\n    var options = {\n      encoding: 'utf8',\n      mode: 'w',\n      flags: opts.flags || 0,\n      path: path,\n      filename: file.originalname\n    };\n\n    if (opts.mode) {\n      options.mode = opts.mode;\n    }\n\n    if (opts.flags) {\n      options.flags = opts.flags;\n    }\n\n    if (opts.path) {\n      options.path = opts.path;\n    }\n\n    if (opts.filename) {\n      options.filename = opts.filename;\n    }\n\n    iopa.send(options, function(err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      return callback(null, data);\n    });\n  };\n};\n",
        "() {\n    var storage = window.localStorage;\n    if (storage) {\n        var storageName = 'storage';\n        if (storage.getItem(storageName) === null) {\n            storage.setItem(storageName, JSON.stringify(this.data));\n        } else {\n            this.data = JSON.parse(storage.getItem(storageName));\n        }\n    }\n}\n\n// This method will setup the storage engine. If the browser does not have support for it, it will return an error.\n\n@method setupStorage() {\n    var storage = window.localStorage;\n    if (storage) {\n        var storageName = 'storage';\n        if (storage.getItem(storageName) === null) {\n            return new Error('Storage not supported');\n        } else {\n            this.data = JSON.parse(storage.getItem(storageName));\n        }\n    } else {\n        return new Error('Storage not supported');\n    }\n}\n\n// This method will setup the storage engine. If the browser does not have support for it, it will return an error.\n\n@method setupStorage() {\n    var storage = window.localStorage;\n    if (storage) {\n        var storageName = 'storage';\n        if (storage.getItem(storageName)",
        "(value)\n\n@param value The value to store.\n\n@return The value stored in the storage engine.\n\n@see storeDraft\n@see store\n@see clear\n@see clearDraft\n@see clear\n@see clearDraftAndStore\n@see clearAndStore\n@see clearAndStoreDraft\n@see clearAndStoreDraftAndStore\n@see clearAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraftAndStoreDraft\n@see clearAndStoreDraftAndStoreDraft",
        "(editor) {\n  editor.setValue(JSON.parse(localStorage.getItem('data')));\n}\n\nThis method will save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\nThis method will also save the contents of the editor to the storage engine.\n\n",
        ".\n\n@method removeDraft\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method removeDraftWithID:(NSString *)draftID\n\n@method",
        "\n\n    # Unload the page\n    #\n    # @param [String] path\n    # @return [Boolean]\n    def unload(path)\n      path = path.to_s\n      if path.empty?\n        return false\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]\n      end\n\n      if path.start_with?('/')\n        path = path[1..-1]",
        "\n\n    def test_get_all_by_type(self):\n        self.assertEqual(self.client.get_all_by_type(self.type), [])\n\n    def test_get_all_by_type_with_limit(self):\n        self.assertEqual(self.client.get_all_by_type(self.type, limit=1), [])\n\n    def test_get_all_by_type_with_offset(self):\n        self.assertEqual(self.client.get_all_by_type(self.type, offset=1), [])\n\n    def test_get_all_by_type_with_order_by(self):\n        self.assertEqual(self.client.get_all_by_type(self.type, order_by='id'), [])\n\n    def test_get_all_by_type_with_order_by_and_limit(self):\n        self.assertEqual(self.client.get_all_by_type(self.type, order_by='id', limit=1), [])\n\n    def test_get_all_by_type_with_order_by_and_offset(self):\n        self.assertEqual(self.client.get_all_by_type(",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        " the view to.\n@private\n*/\nExt.define('Ext.view.View', {\n    extend: 'Ext.view.View',\n    alias: 'widget.view',\n    requires: [\n        'Ext.data.Store'\n    ],\n    requires: [\n        'Ext.data.View'\n    ],\n    requires: [\n        'Ext.data.Field',\n        'Ext.data.FieldStore',\n        'Ext.data.FieldSet',\n        'Ext.data.FieldQuery',\n        'Ext.data.FieldQueryStore',\n        'Ext.data.FieldQuerySet',\n        'Ext.data.FieldQuerySetStore',\n        'Ext.data.FieldQuerySetQuery',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n        'Ext.data.FieldQuerySetQueryStore',\n       ",
        " styles\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background-color', '#fff');\n    $('#header').css('background",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.management.impl;\n\nimport com.hazelcast.internal.management.ManagementService;\nimport com.hazelcast.internal.management.ManagementServiceContext;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl.ManagementServiceContextListener;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl.ManagementServiceContextListenerAdapter;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl.ManagementServiceContextListenerAdapter.",
        "\n@private\n*/\nExt.ux.grid.filter.Filter.prototype.addFilter = function(config) {\n    var filter = this.createFilter(config);\n    this.collection.add(filter);\n    this.collection.on('statechange', this.onFilterStateChange, this);\n    return filter;\n};\n\n/**\n@private\n*/\nExt.ux.grid.filter.Filter.prototype.onFilterStateChange = function() {\n    this.fireEvent('filterchange', this);\n};\n\n/**\n@private\n*/\nExt.ux.grid.filter.Filter.prototype.createFilter = function(config) {\n    var filter = new Ext.ux.grid.filter.Filter(config);\n    this.collection.add(filter);\n    return filter;\n};\n\n/**\n@private\n*/\nExt.ux.grid.filter.Filter.prototype.removeFilter = function(filter) {\n    this.collection.remove(filter);\n    this.collection.on('statechange', this.onFilterStateChange, this);\n};\n\n/**\n@private\n*/\nExt.ux.grid.filter.Filter.prototype.onFilterStateChange = function() {\n    this.fireEvent('filterchange', this);\n};\n\n/**\n@private\n*/\nExt.ux.",
        ".\n@param {Object} [options] An object with the following properties:\n@param {String} [options.collection] The collection to add the filters to.\n@param {String} [options.collection.name] The name of the collection to add the filters to.\n@param {String} [options.collection.type] The type of the collection to add the filters to.\n@param {String} [options.collection.type.name] The name of the collection type to add the filters to.\n@param {String} [options.collection.type.type] The type of the collection type to add the filters to.\n@param {String} [options.collection.type.type.name] The type of the collection type to add the filters to.\n@param {String} [options.collection.type.type.type] The type of the collection type to add the filters to.\n@param {String} [options.collection.type.type.type.name] The type of the collection type to add the filters to.\n@param {String} [options.collection.type.type.type.type] The type of the collection type to add the filters to.\n@param {String} [options.collection.type.type.type.type.name] The type of the collection type to add the filters to.\n@param {String} [options",
        "\n*/\nfunction getFilters() {\n  return filters;\n}\n\n/**\nReturns an Array of the currently active filters.\n@param {Function} callback Callback to be called when the filters are ready.\n@return {Array} filters Array of the currently active filters\n*/\nfunction getFilters(callback) {\n  return filters;\n}\n\n/**\nReturns an Array of the currently active filters.\n@param {Function} callback Callback to be called when the filters are ready.\n@return {Array} filters Array of the currently active filters\n*/\nfunction getFilters(callback) {\n  return filters;\n}\n\n/**\nReturns an Array of the currently active filters.\n@param {Function} callback Callback to be called when the filters are ready.\n@return {Array} filters Array of the currently active filters\n*/\nfunction getFilters(callback) {\n  return filters;\n}\n\n/**\nReturns an Array of the currently active filters.\n@param {Function} callback Callback to be called when the filters are ready.\n@return {Array} filters Array of the currently active filters\n*/\nfunction getFilters(callback) {\n  return filters;\n}\n\n/**\nReturns an Array of the currently active filters.\n@param {Function} callback Callback to be called when the filters are ready.\n@return {Array} filters Array of the currently active filters\n*/\nfunction getFilters(",
        ".\n@returns {Object} The provided object with the filter related query parameters removed.\n@example\nvar p = {\n  a: {\n    b: {\n      c: {\n        d: {\n          e: {\n            f: {\n              g: {\n                h: {\n                  i: {\n                    j: {\n                      k: {\n                        l: {\n                          m: {\n                            n: {\n                              o: {\n                                p: {\n                                  q: {\n                                    r: {\n                                      s: {\n                                        t: {\n                                          u: {\n                                            v: {\n                                              w: {\n                                                x: {\n                                                  y: {\n                                                    z: {\n                                                      w: {\n                                                        w: {\n                                                          z: {\n                                                        y: {\n                                                          z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                                            z: {\n                                ",
        ".\n@param {Number} position The position of the row to be edited.\n@param {Boolean} [forceEdit=false] If true, the row will be edited immediately.\n@param {Boolean} [forceEditOnLoad=false] If true, the row will be edited immediately on the first load.\n@param {Boolean} [forceEditOnUnload=false] If true, the row will be edited immediately on the last unload.\n@param {Boolean} [forceEditOnUnloadOnLoad=false] If true, the row will be edited immediately on the last unload on load.\n@param {Boolean} [forceEditOnUnloadOnUnload=false] If true, the row will be edited immediately on the last unload on unload on unload.\n@param {Boolean} [forceEditOnUnloadOnUnload=false] If true, the row will be edited immediately on the last unload on unload on unload on unload.\n@param {Boolean} [forceEditOnUnloadOnUnload=false] If true, the row will be edited immediately on the last unload on unload on unload on unload.\n@param {Boolean} [forceEditOnUnloadOnUnload=false] If true, the row will be edited immediately on the last unload on unload on unload on unload.\n@param {Boolean} [forceEditOnUnloadOnUnload=false] If true",
        ".Date\n\n@author: James Burton\n@copyright: Copyright (c) 2009, James Burton\n@license: http://www.opensource.org/licenses/mit-license.php MIT License\n\n@version: 0.1\n\n@summary: A class for representing a GX date.\n\n@example:\n\n    var date = new GX.Date(2010, 10, 10, 12, 0, 0);\n\n    // The date is in the same year as the GX date.\n    var date = new GX.Date(2010, 10, 10, 12, 0, 0);\n\n    // The date is in the same month as the GX date.\n    var date = new GX.Date(2010, 10, 10, 12, 0, 0);\n\n    // The date is in the same day as the GX date.\n    var date = new GX.Date(2010, 10, 10, 12, 0, 0);\n\n    // The date is in the same hour as the GX date.\n    var date = new GX.Date(2010, 10, 10, 12, 0, 0);\n\n    // The date is in the same minute as the GX date.\n    var date = new GX.Date(2010,",
        " the options to pass\n@param {Function} callback The callback to call when the upload is complete\n@param {Object} scope The scope to pass to the callback\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to use async mode or not\n@param {Boolean} [async=true] Whether to use async mode or not\n@param {Boolean} [async=false] Whether to",
        "\n@param form [Form] The form to check.\n@return [Boolean] True if the form is intended to be used for an upload, false otherwise.\n*/\nfunction isUploadForm(form) {\n  return form.type === 'file' && form.name.indexOf('upload') !== -1;\n}\n\n/**\nDetects whether the form is intended to be used for an image.\n\n@param form [Form] The form to check.\n@return [Boolean] True if the form is intended to be used for an image, false otherwise.\n*/\nfunction isImageForm(form) {\n  return form.type === 'file' && form.name.indexOf('image') !== -1;\n}\n\n/**\nDetects whether the form is intended to be used for a video.\n\n@param form [Form] The form to check.\n@return [Boolean] True if the form is intended to be used for a video, false otherwise.\n*/\nfunction isVideoForm(form) {\n  return form.type === 'file' && form.name.indexOf('video') !== -1;\n}\n\n/**\nDetects whether the form is intended to be used for a video.\n\n@param form [Form] The form to check.\n@return [Boolean] True if the form is intended to be used for a video, false",
        "\n*/\n\nvar _ = require('lodash');\nvar path = require('path');\nvar fs = require('fs');\nvar url = require('url');\nvar util = require('util');\nvar _ = require('lodash');\nvar path = require('path');\nvar fs = require('fs');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require",
        "\n*/\n\nvar template = function(options, params) {\n  var template = options.template;\n  var templateOptions = options.templateOptions;\n  var templateOptions = templateOptions || {};\n  var templateOptions = _.extend({}, templateOptions, params);\n  return template(templateOptions);\n};\n\nmodule.exports = template;\n",
        ".\n*/\nfunction hasRequest(request) {\n  return this.request && this.request.hasOwnProperty(request);\n}\n\n/**\n@method hasRequest\n@param {Object} [request] Defaults to the last transaction\n@return {Boolean} True if there is an outstanding request.\n*/\nfunction hasRequest(request) {\n  return this.request && this.request.hasOwnProperty(request);\n}\n\n/**\n@method hasRequest\n@param {Object} [request] Defaults to the last transaction\n@return {Boolean} True if there is an outstanding request.\n*/\nfunction hasRequest(request) {\n  return this.request && this.request.hasOwnProperty(request);\n}\n\n/**\n@method hasRequest\n@param {Object} [request] Defaults to the last transaction\n@return {Boolean} True if there is an outstanding request.\n*/\nfunction hasRequest(request) {\n  return this.request && this.request.hasOwnProperty(request);\n}\n\n/**\n@method hasRequest\n@param {Object} [request] Defaults to the last transaction\n@return {Boolean} True if there is an outstanding request.\n*/\nfunction hasRequest(request) {\n  return this.request && this.request.hasOwnProperty(request);\n}\n\n/**\n@method hasRequest\n@param {Object}",
        " the last active request.\n@param {Object} [reason] The reason for the abort.\n@param {Object} [reason.message] The message for the abort.\n@param {Object} [reason.stack] The stack trace for the abort.\n@param {Object} [reason.stackTrace] The stack trace for the abort.\n@param {Object} [reason.stackTrace.length] The length of the stack trace for the abort.\n@param {Object} [reason.stackTrace.index] The index of the stack trace for the abort.\n@param {Object} [reason.stackTrace.stack] The stack for the abort.\n@param {Object} [reason.stackTrace.stackTrace.length] The length of the stack for the abort.\n@param {Object} [reason.stackTrace.stackTrace.index] The index of the stack for the abort.\n@param {Object} [reason.stackTrace.stackTrace.stack] The stack for the abort.\n@param {Object} [reason.stackTrace.stackTrace.stackTrace.length] The length of the stack for the abort.\n@param {Object} [reason.stackTrace.stackTrace.stackTrace.index] The index of the stack for the abort.\n@param {Object} [reason.stackTrace.stackTrace.stackTrace.stack] The stack for the",
        "\n\n    def test_get_all_active_instances(self):\n        \"\"\"\n        Tests that all active instances are returned.\n        \"\"\"\n        self.assertEqual(self.get_all_active_instances(), [])\n\n        self.assertEqual(self.get_all_active_instances(self.instance_id), [])\n\n        self.assertEqual(self.get_all_active_instances(self.instance_id, self.instance_id), [])\n\n        self.assertEqual(self.get_all_active_instances(self.instance_id, self.instance_id, self.instance_id), [])\n\n        self.assertEqual(self.get_all_active_instances(self.instance_id, self.instance_id, self.instance_id, self.instance_id), [])\n\n        self.assertEqual(self.get_all_active_instances(self.instance_id, self.instance_id, self.instance_id, self.instance_id, self.instance_id, self.instance_id), [])\n\n        self.assertEqual(self.get_all_active_instances(self.instance_id, self.instance_id, self.instance_id, self.instance_id, self.instance_id, self.",
        "\n@param {Object} xhr The xhr object\n@param {Object} xhr.status The status of the xhr\n@param {Object} xhr.statusText The status text of the xhr\n@param {Object} xhr.response The response of the xhr\n@param {Object} xhr.responseText The response text of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object} xhr.responseXML The response XML of the xhr\n@param {Object} xhr.responseJSON The response JSON of the xhr\n@param {Object",
        "\n*/\nfunction onRequest(request) {\n  var response = {\n    status: 200,\n    body: {\n      message: 'Success!',\n      data: {\n        id: request.params.id\n      }\n    }\n  };\n\n  if (request.params.id) {\n    response.body.message = 'Success!',\n    response.body.data = {\n      id: request.params.id\n    };\n  } else {\n    response.body.message = 'Error!',\n    response.body.data = {\n      message: 'Error!',\n      data: {\n        message: 'Error!',\n        data: 'Error!'\n      }\n    };\n  }\n\n  return response;\n}\n\nmodule.exports = onRequest;\n",
        " the success/status state\n*/\nfunction success(status) {\n  return {\n    success: true,\n    status: status\n  };\n}\n\n/**\nChecks if the response status was unsuccessful\n@param {Number} status The status code\n@return {Object} An object containing success/status state\n*/\nfunction failure(status) {\n  return {\n    success: false,\n    status: status\n  };\n}\n\n/**\nChecks if the response status was not successful\n@param {Number} status The status code\n@return {Object} An object containing success/status state\n*/\nfunction notSuccess(status) {\n  return {\n    success: false,\n    status: status\n  };\n}\n\n/**\nChecks if the response status was not successful\n@param {Number} status The status code\n@return {Object} An object containing success/status state\n*/\nfunction notSuccess(status) {\n  return {\n    success: false,\n    status: status\n  };\n}\n\n/**\nChecks if the response status was not successful\n@param {Number} status The status code\n@return {Object} An object containing success/status state\n*/\nfunction notSuccess(status) {\n  return {\n    success: false,\n    status: status\n  };\n}\n\n",
        "param {string} message\n@param {string} [type]\n@param {string} [messageFormat]\n@param {...*} [args]\n@return {Exception}\n@public\n*/\nfunction create(message, type, messageFormat, ...args) {\n  return new Error(message, type, messageFormat, ...args);\n}\n\n/**\nCreates the exception object\n@private\n@param {string} message\n@param {string} [type]\n@param {string} [messageFormat]\n@param {...*} [args]\n@return {Exception}\n@public\n*/\nfunction create(message, type, messageFormat, ...args) {\n  return new Error(message, type, messageFormat, ...args);\n}\n\n/**\nCreates the exception object\n@private\n@param {string} message\n@param {string} [type]\n@param {string} [messageFormat]\n@param {...*} [args]\n@return {Exception}\n@public\n*/\nfunction create(message, type, messageFormat, ...args) {\n  return new Error(message, type, messageFormat, ...args);\n}\n\n/**\nCreates the exception object\n@private\n@param {string} message\n@param {string} [type]\n@param {string} [messageFormat]\n@param {...",
        ".\n\n@param {string} tag The tag to inject.\n@param {string} data The data to inject.\n@param {string} type The type of data to inject.\n@param {string} charset The charset of data to inject.\n@param {string} callback The callback function to call when the data is loaded.\n@param {string} scope The scope of the callback function.\n@param {string} callbackId The callback id of the callback function.\n@param {string} callbackName The callback name of the callback function.\n@param {string} callbackNamespace The callback namespace of the callback function.\n@param {string} callbackNamespaceId The callback namespace id of the callback function.\n@param {string} callbackNameId The callback name id of the callback function.\n@param {string} callbackNamespaceNamespace The callback namespace namespace of the callback function.\n@param {string} callbackNamespaceNamespaceId The callback namespace namespace id of the callback function.\n@param {string} callbackNamespaceNamespaceId The callback namespace namespace id of the callback function.\n@param {string} callbackNamespaceNamespaceId The callback namespace namespace id of the callback function.\n@param {string} callbackNamespaceNamespaceId The callback namespace namespace id of the callback function.\n@param {string} callbackNamespaceNamespaceId The callback namespace namespace id of the callback function.\n@param {string} callbackNamespaceNamespaceId The",
        ".\n\nFor example,\n\nGiven a month, return the number of days in that month.\n\nNote:\n\nYou may assume that the month is not a leap year.\n\nExample 1:\n\nInput: month = 2\nOutput: 3\n\nExample 2:\n\nInput: month = 3\nOutput: 2\n\nExample 3:\n\nInput: month = 4\nOutput: 1\n\nExample 4:\n\nInput: month = 5\nOutput: 0\n\nNote:\n\nYou may assume that the month is not a leap year.\n\nExample 1:\n\nInput: month = 6\nOutput: 0\n\nExample 2:\n\nInput: month = 7\nOutput: 1\n\nExample 3:\n\nInput: month = 8\nOutput: 1\n\nExample 4:\n\nInput: month = 9\nOutput: 1\n\nNote:\n\nYou may assume that the month is not a leap year.\n\nExample 1:\n\nInput: month = 10\nOutput: 0\n\nExample 2:\n\nInput: month = 11\nOutput: 1\n\nExample 3:\n\nInput: month = 12\nOutput: 1\n\nNote:\n\nYou may assume that the month is not a leap year.\n\nExample 1:\n\nInput: month = 13\nOutput: 0\n\nExample 2:\n\nInput: month = 14\nOutput",
        "\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return 'User';\n    }\n\n    /**\n     * @return string\n     */\n    public function getDescription()\n    {\n        return 'User';\n    }\n\n    /**\n     * @return string\n     */\n    public function getIcon()\n    {\n        return 'user';\n    }\n\n    /**\n     * @return array\n     */\n    public function getActions()\n    {\n        return [\n            'delete' => [\n                'label' => 'Delete',\n                'url' => ['/user/delete', 'id' => $this->id],\n                'icon' => 'trash',\n            ],\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public function getActionsOptions()\n    {\n        return [\n            'delete' => [\n                'label' => 'Delete',\n                'url' => ['/user/delete', 'id' => $this->id],\n                'icon' => 'trash',\n            ],\n        ];\n    }\n\n    /**\n     * @return array\n     */\n    public function getActionsOptionsOptions()\n    {\n        return [\n            'delete' => [",
        " the current timestamp\n*/\nfunction getCurrentTimestamp() {\n  var now = new Date();\n  var seconds = now.getSeconds();\n  var minutes = now.getMinutes();\n  var hours = now.getHours();\n  var days = now.getDate();\n  var months = now.getMonth() + 1;\n  var years = now.getFullYear();\n\n  var timestamp = (seconds + minutes + hours + days + months + years) * 1000;\n\n  return timestamp;\n}\n\n/**\n * Get the current time in milliseconds\n *\n * @return {number} the current time in milliseconds\n*/\nfunction getCurrentTime() {\n  var now = new Date();\n  var seconds = now.getSeconds();\n  var minutes = now.getMinutes();\n  var hours = now.getHours();\n  var days = now.getDate();\n  var months = now.getMonth() + 1;\n  var years = now.getFullYear();\n\n  var timestamp = (seconds + minutes + hours + days + months + years) * 1000;\n\n  return timestamp;\n}\n\n/**\n * Get the current time in seconds\n *\n * @return {number} the current time in seconds\n*/\nfunction getCurrentTimeInSeconds() {\n  var now = new Date();\n  var seconds = now.getSeconds",
        " the sequence counter\n */\nfunction incrementSequence() {\n    var counter = sequenceCounter;\n    if (counter > 0) {\n        counter++;\n    } else {\n        counter = 1;\n    }\n    sequenceCounter = counter;\n    return counter;\n}\n\n/**\n * Increase or reset sequence counter and recalculate prefix when needed.\n *\n * @return the sequence counter\n */\nfunction resetSequence() {\n    var counter = sequenceCounter;\n    if (counter > 0) {\n        counter--;\n    } else {\n        counter = 1;\n    }\n    sequenceCounter = counter;\n    return counter;\n}\n\n/**\n * Increase or reset sequence counter and recalculate prefix when needed.\n *\n * @return the sequence counter\n */\nfunction incrementSequencePrefix() {\n    var counter = sequenceCounterPrefix;\n    if (counter > 0) {\n        counter++;\n    } else {\n        counter = 1;\n    }\n    sequenceCounterPrefix = counter;\n    return counter;\n}\n\n/**\n * Increase or reset sequence counter and recalculate prefix when needed.\n *\n * @return the sequence counter\n */\nfunction resetSequencePrefix() {\n    var counter = sequenceCounterPrefix;\n    if (counter > 0) {\n        counter--;\n    } else {\n        counter =",
        "\n@param {number} min\n@param {number} max\n@param {number} step\n@param {number} [max]\n@param {number} [min]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step]\n@param {number} [step",
        ".2.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.4.",
        ".2.4.7.1.\n\n/**\n * @module ember\n * @submodule ember-runtime\n */\n\n/**\n  A promise that resolves when the promise is resolved or rejected.\n\n  @class Promise\n  @namespace Ember\n  @extends Ember.RSVP.Promise\n  @public\n*/\nvar Promise = Ember.RSVP.Promise.extend({\n  /**\n    @property {Object} [reason] The reason for the promise to be rejected.\n  */\n  reason: null,\n\n  /**\n    @property {Object} [reason.reason] The reason for the promise to be rejected.\n  */\n  reason: null,\n\n  /**\n    @property {Object} [reason.reason.reason] The reason for the promise to be rejected.\n  */\n  reason: null,\n\n  /**\n    @property {Object} [reason.reason.reason.reason] The reason for the promise to be rejected.\n  */\n  reason: null,\n\n  /**\n    @property {Object} [reason.reason.reason.reason.reason] The reason for the promise to be rejected.\n  */\n  reason: null,\n\n  /**\n    @property {Object} [reason.reason.reason.reason.reason.reason] The reason for the promise to be rejected.\n",
        ".2.3.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.",
        "2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5.2.5",
        "2.2.5.4.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2.2",
        "\n\n// Custom declarative linking function\nfunction custom_declarative_linking() {\n\t// Custom declarative linking function\n\t$('#custom-declarative-linking').click(function() {\n\t\t$('#custom-declarative-linking-form').submit();\n\t});\n}\n\n// Custom declarative linking form submit\nfunction custom_declarative_linking_form_submit() {\n\t// Custom declarative linking form submit\n\t$('#custom-declarative-linking-form').submit();\n}\n\n// Custom declarative linking form submit\nfunction custom_declarative_linking_form_submit_with_custom_linking() {\n\t// Custom declarative linking form submit\n\t$('#custom-declarative-linking-form').submit({\n\t\tcustom_declarative_linking: true\n\t});\n}\n\n// Custom declarative linking form submit\nfunction custom_declarative_linking_form_submit_with_custom_linking_with_custom_linking() {\n\t// Custom declarative linking form submit\n\t$('#custom-declarative-linking-form').submit({\n\t\tcustom_declarative_linking: true,\n\t\tcustom_declarative",
        "\n\n    def test_get_view_for_view_type(self):\n        view = self.get_view_for_view_type('view')\n        self.assertEqual(view.name, 'view')\n\n    def test_get_view_for_view_type_with_no_view(self):\n        view = self.get_view_for_view_type('no_view')\n        self.assertEqual(view.name, 'no_view')\n\n    def test_get_view_for_view_type_with_no_view_type(self):\n        view = self.get_view_for_view_type('no_view_type')\n        self.assertEqual(view.name, 'no_view_type')\n\n    def test_get_view_for_view_type_with_view_type(self):\n        view = self.get_view_for_view_type('view_type')\n        self.assertEqual(view.name, 'view_type')\n\n    def test_get_view_for_view_type_with_view_type_with_no_view(self):\n        view = self.get_view_for_view_type('view_type_with_no_view')\n        self.assertEqual",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_name;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "\n\n#include \"main.h\"\n\n#include \"ui_main.h\"\n\n#include \"init.h\"\n#include \"util.h\"\n#include \"ui_interface.h\"\n#include \"chainparams.h\"\n\n#include <boost/filesystem.hpp>\n\n#include <QFileDialog>\n#include <QSettings>\n#include <QMessageBox>\n\n#include <boost/filesystem/fstream>\n\n#ifdef ENABLE_WALLET\n#include <wallet/wallet.h>\n#endif\n\n#include <stdint.h>\n\n#include <QApplication>\n#include <QMessageBox>\n#include <QSettings>\n#include <QTimer>\n\nMainWindow::MainWindow(QWidget *parent) :\n    QMainWindow(parent),\n    ui(new Ui::MainWindow),\n    clientModel(0),\n    walletModel(0),\n    currentBalance(-1),\n    currentUnconfirmedBalance(-1),\n    currentImmatureBalance(-1),\n    txdelegate(new TxViewDelegate()),\n    filter(0)\n{\n    ui->setupUi(this);\n\n#ifdef ENABLE_WALLET\n    // Load wallet\n    if(!walletModel)\n    {\n        walletModel",
        "\n*/\nExt.define('Ext.grid.header.Menu', {\n    extend: 'Ext.menu.Menu',\n    alias: 'widget.menu',\n    requires: [\n        'Ext.grid.header.Container'\n    ],\n    requires: [\n        'Ext.grid.header.Item'\n    ],\n    constructor: function(config) {\n        config = config || {};\n        Ext.apply(this, config);\n        this.callParent([config]);\n    }\n});\n",
        ".\n\nThis function is called by the main function of the editor.\n\n@param {String} text The text to be inserted.\n@param {Boolean} force_rich If true, the text is inserted in the rich text mode.\n@returns {String} The text that was inserted.\n@example\n\n    var text = \"This is a test.\";\n    var text = text.replace(/\\n/g, \"<br>\");\n    var text = text.replace(/\\r/g, \"<br>\");\n    var text = text.replace(/\\t/g, \"<br>\");\n    var text = text.replace(/\\n\\r/g, \"<br>\");\n    var text = text.replace(/\\t\\r/g, \"<br>\");\n    var text = text.replace(/\\n\\t/g, \"<br>\");\n    var text = text.replace(/\\n\\t\\t/g, \"<br>\");\n    var text = text.replace(/\\n\\t\\t\\t/g, \"<br>\");\n    var text = text.replace(/\\n\\t\\t\\t\\t/g, \"<br>\");\n    var text = text.replace(/\\n\\t\\t\\t\\t\\t/g, \"<br>\");\n    var text = text",
        ".\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it grabs that contents and processes.\n\nThis function grabs the contents from the clipboard by adding a hidden div and placing the caret inside it and after the browser paste is done it gra",
        "\n\n    /**\n     * @param string $name\n     * @param array $data\n     * @return mixed\n     */\n    public function post($name, array $data = [])\n    {\n        $this->post = $this->post->create($name, $data);\n\n        return $this->post;\n    }\n\n    /**\n     * @param string $name\n     * @param array $data\n     * @return mixed\n     */\n    public function put($name, array $data = [])\n    {\n        $this->put = $this->put->create($name, $data);\n\n        return $this->put;\n    }\n\n    /**\n     * @param string $name\n     * @param array $data\n     * @return mixed\n     */\n    public function delete($name, array $data = [])\n    {\n        $this->delete = $this->delete->create($name, $data);\n\n        return $this->delete;\n    }\n\n    /**\n     * @param string $name\n     * @param array $data\n     * @return mixed\n     */\n    public function patch($name, array $data = [])\n    {\n        $this->patch = $this->patch->create($name, $data);\n\n",
        "\n\n    def insert_text(self, text, caret_position):\n        \"\"\"\n        Inserts the given text at the caret position.\n        \"\"\"\n        self.insert_text_at(text, caret_position, self.text)\n\n    def insert_text_at(self, text, caret_position, text):\n        \"\"\"\n        Inserts the given text at the caret position.\n        \"\"\"\n        self.insert_text_at(text, caret_position, text, self.text)\n\n    def insert_text_at_end(self, text, caret_position):\n        \"\"\"\n        Inserts the given text at the caret position.\n        \"\"\"\n        self.insert_text_at_end(text, caret_position, self.text)\n\n    def insert_text_at_end(self, text, caret_position, text):\n        \"\"\"\n        Inserts the given text at the caret position.\n        \"\"\"\n        self.insert_text_at_end(text, caret_position, text, self.text)\n\n    def insert_text_at_end_at_caret(self, text, caret_position, text):\n        \"\"\"\n        Inserts the given text at the caret position.\n        \"\"\"\n        self.insert_text_at_end_at_c",
        ".\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the old behavior but still use the new cleanup engine.\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the old behavior but still use the new cleanup engine.\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the old behavior but still use the new cleanup engine.\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the old behavior but still use the new cleanup engine.\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the old behavior but still use the new cleanup engine.\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the old behavior but still use the new cleanup engine.\n\nThis script is a wrapper around the old style dialogs. It will open the old style dialogs. Some users might want to want to want to use the",
        " the private scope\n*/\nfunction scope(map, key) {\n  var scope = map.get(key);\n  if (!scope) {\n    scope = new WeakMap();\n    map.set(key, scope);\n  }\n  return scope;\n}\n\nmodule.exports = scope;\n",
        ") will be used.\n\nIf you want to instrument, you can do so by using the `coffeeify` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-instrument` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify-instrument` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify-coffeeify` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify-coffeeify` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify-coffeeify-instrument` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify-coffeeify-coffeeify` command.\n\nIf you want to coffeeify, you can do so by using the `coffeeify-coffeeify",
        ", false if not\n@return {Boolean}\n*/\nfunction addHeaderCheckbox(initial) {\n  var headerRow = $('#header-row');\n  var headerCheckbox = $('#header-checkbox');\n  var headerRowCheckbox = $('#header-row-checkbox');\n\n  if (initial) {\n    headerRow.addClass('header-row-checkbox-initial');\n    headerRowCheckbox.addClass('header-row-checkbox-initial');\n    headerCheckbox.addClass('header-checkbox-initial');\n  } else {\n    headerRow.removeClass('header-row-checkbox-initial');\n    headerRowCheckbox.removeClass('header-row-checkbox-initial');\n    headerCheckbox.removeClass('header-checkbox-initial');\n  }\n\n  return initial;\n}\n\n/**\nAdd the header checkbox to the header row\n@private\n@param {Boolean} initial True if the checkbox is initially checked, false if not\n@return {Boolean}\n*/\nfunction addHeaderCheckbox(initial) {\n  var headerRow = $('#header-row');\n  var headerCheckbox = $('#header-checkbox');\n  var headerRowCheckbox = $('#header-row-checkbox');\n\n  if (initial) {\n    headerRow.addClass('header-checkbox-checked');\n    headerRow",
        ": Whether the header should be toggled.\n*/\nfunction uiHeaderToggle(isChecked) {\n    var el = $(\"#ui-header\");\n    if (isChecked) {\n        el.addClass(\"ui-header-checked\");\n    } else {\n        el.removeClass(\"ui-header-checked\");\n    }\n}\n\n/*\nToggle the ui footer between checked and unchecked state.\n@param {Boolean} isChecked: Whether the footer should be toggled.\n*/\nfunction uiFooterToggle(isChecked) {\n    var el = $(\"#ui-footer\");\n    if (isChecked) {\n        el.addClass(\"ui-footer-checked\");\n    } else {\n        el.removeClass(\"ui-footer-checked\");\n    }\n}\n\n/*\nToggle the ui footer between checked and unchecked state.\n@param {Boolean} isChecked: Whether the footer should be toggled.\n*/\nfunction uiFooterToggle(isChecked) {\n    var el = $(\"#ui-footer\");\n    if (isChecked) {\n        el.addClass(\"ui-footer-checked\");\n    } else {\n        el.removeClass(\"ui-footer-checked\");\n    }\n}\n\n/*\nToggle the ui footer between checked and unchecked state.\n@param {Boolean} isChecked: Whether",
        ".\n\nIf you want to deselect all, click the button.\n\nIf you want to select all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to select all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to deselect all, click the button.\n\nIf you want to",
        ".\n\n@param container The container to use.\n@param config The configuration to use.\n@returns The configuration to use.\n*/\nfunction getHeaderContainerConfig(container, config) {\n  var containerConfig = {\n    // The container's width.\n    width: container.clientWidth,\n    // The container's height.\n    height: container.clientHeight,\n    // The container's margin.\n    margin: container.clientWidth / 2,\n    // The container's padding.\n    padding: container.clientHeight / 2,\n    // The container's border.\n    border: container.clientWidth / 2,\n    // The container's border radius.\n    borderRadius: container.clientWidth / 2,\n    // The container's background color.\n    backgroundColor: container.style.backgroundColor,\n    // The container's border color.\n    borderColor: container.style.borderColor,\n    // The container's border width.\n    borderWidth: container.style.borderWidth,\n    // The container's border style.\n    borderStyle: container.style.borderStyle,\n    // The container's border color.\n    borderColor: container.style.borderColor,\n    // The container's border width.\n    borderWidth: container.style.borderWidth,\n    // The container's border style.\n    borderStyle:",
        ".\n@private\n*/\nExt.view.BoundList.prototype.getSelectedRecords = function() {\n    var records = [];\n    for (var i = 0, len = this.getCount(); i < len; i++) {\n        records.push(this.getAt(i));\n    }\n    return records;\n};\n\n/**\n@private\n*/\nExt.view.BoundList.prototype.onBeforeRender = function() {\n    var me = this;\n    me.callParent(arguments);\n    me.on('beforerender', function() {\n        me.on('render', function() {\n            me.on('afterrender', function() {\n                me.on('selectionchange', function() {\n                    me.on('selectionchange', me.onSelectionChange);\n                });\n            });\n        });\n    });\n};\n\n/**\n@private\n*/\nExt.view.BoundList.prototype.onAfterRender = function() {\n    var me = this;\n    me.callParent(arguments);\n    me.on('afterrender', function() {\n        me.on('selectionchange', me.onSelectionChange);\n    });\n};\n\n/**\n@private\n*/\nExt.view.BoundList.prototype.onSelectionChange = function() {\n    var me = this;\n",
        " submit value.\n\n#include \"stdafx.h\"\n#include \"../include/Game.h\"\n#include \"../include/GameState.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#include \"../include/GameStateManager.h\"\n#",
        ".\n\n@param [in]\t\tdesktop\t\tThe Desktop object to get the configuration for.\n@param [out]\t\tconfig\t\tThe configuration object to return.\n@return\t\tNone.\n\n@see\t\tGetDesktopConfig()\n*/\nvoid GetDesktopConfig(HWND desktop, DesktopConfig *config);\n\n/*\nThis method returns the configuration object for the Desktop object. A derived\nclass can override this method, call the base version to build the config and\nthen modify the returned object before it is returned.\n\n@param [in]\t\tdesktop\t\tThe Desktop object to get the configuration for.\n@param [out]\t\tconfig\t\tThe configuration object to return.\n@return\t\tNone.\n\n@see\t\tGetDesktopConfig()\n*/\nvoid GetDesktopConfig(HWND desktop, DesktopConfig *config);\n\n/*\nThis method returns the configuration object for the Desktop object. A derived\nclass can override this method, call the base version to build the config and\nthen modify the returned object before it is returned.\n\n@param [in]\t\tdesktop\t\tThe Desktop object to get the configuration for.\n@param [out]\t\tconfig\t\tThe configuration object to return.\n@return\t\tNone.\n\n@see\t\tGetDesktopConfig()\n*/",
        ".\n\n@return The configuration object for the Start Button.\n*/\nfunction StartButton() {\n\tvar config = {\n\t\t// The name of the button.\n\t\tname: \"Start\",\n\n\t\t// The icon to use for the button.\n\t\ticon: \"icon-start\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled: \"icon-start-disabled\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled_disabled: \"icon-start-disabled-disabled\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled_disabled_disabled: \"icon-start-disabled-disabled-disabled\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled_disabled_disabled: \"icon-start-disabled-disabled-disabled\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled_disabled_disabled: \"icon-start-disabled-disabled-disabled\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled_disabled_disabled: \"icon-start-disabled-disabled-disabled\",\n\n\t\t// The icon to use for the button.\n\t\ticon_disabled_disabled_disabled: \"icon-start-disabled-disabled-",
        ".\n\n@return The configuration object for the TaskBar.\n*/\nfunction TaskBarConfig() {\n\tvar config = {\n\t\t// The name of the task bar.\n\t\tname: 'TaskBar',\n\n\t\t// The name of the task bar.\n\t\ttitle: 'Task Bar',\n\n\t\t// The name of the task bar.\n\t\tdescription: 'Task Bar',\n\n\t\t// The name of the task bar.\n\t\ticon: 'task-bar',\n\n\t\t// The name of the task bar.\n\t\ticonClass: 'task-bar',\n\n\t\t// The name of the task bar.\n\t\ticonSize: 'large',\n\n\t\t// The name of the task bar.\n\t\ticonPosition: 'left',\n\n\t\t// The name of the task bar.\n\t\ticonPositionClass: 'task-bar',\n\n\t\t// The name of the task bar.\n\t\ticonPositionSize: 'large',\n\n\t\t// The name of the task bar.\n\t\ticonPositionSizeClass: 'task-bar',\n\n\t\t// The name of the task bar.\n\t\ticonPositionPosition: 'left',\n\n\t\t// The name of the task bar.\n\t\ticonPositionPositionClass: 'task-bar',\n\n\t\t",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.security",
        "\n*/\n\nfunction unique(array) {\n  var result = [];\n  for (var i = 0; i < array.length; i++) {\n    if (result.indexOf(array[i]) === -1) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n}\n\nmodule.exports = unique;\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        ".\n*/\nfunction remove(array, item) {\n  var index = array.indexOf(item);\n  if (index > -1) {\n    array.splice(index, 1);\n  }\n  return array;\n}\n\nmodule.exports = remove;\n",
        "\n */\nExt.Array.union = function(array1, array2, etc) {\n    var result = [];\n    for (var i = 0, l = array1.length; i < l; i++) {\n        result.push(array1[i]);\n    }\n    for (var i = 0, l = array2.length; i < l; i++) {\n        result.push(array2[i]);\n    }\n    return result;\n};\n\n/**\n * Merge two arrays into one with unique items.\n *\n * @param {Array} array1\n * @param {Array} array2\n * @param {Array} etc\n * @return {Array} merged\n */\nExt.Array.merge = function(array1, array2, etc) {\n    var result = [];\n    for (var i = 0, l = array1.length; i < l; i++) {\n        result.push(array1[i]);\n    }\n    for (var i = 0, l = array2.length; i < l; i++) {\n        result.push(array2[i]);\n    }\n    return result;\n};\n\n/**\n * Merge two arrays into one with unique items.\n *\n * @param {Array} array1\n * @param {Array} array",
        "\n*/\n\nfunction merge(array1, array2) {\n  var result = [];\n  for (var i = 0; i < array1.length; i++) {\n    for (var j = 0; j < array2.length; j++) {\n      if (array1[i] === array2[j]) {\n        result.push(array1[i]);\n      }\n    }\n  }\n  return result;\n}\n\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([1, 2, 3], [4, 5, 6]));\nconsole.log(merge([",
        "\n*/\n\nfunction difference(arrayA, arrayB) {\n  var difference = [];\n  for (var i = 0; i < arrayA.length; i++) {\n    if (arrayA[i] !== arrayB[i]) {\n      difference.push(arrayA[i] - arrayB[i]);\n    }\n  }\n  return difference;\n}\n\nconsole.log(difference([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\n",
        "\n    // and the following:\n    //\n    //   var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134",
        " array with the flattened elements\n*/\nfunction flatten(array) {\n  var result = [];\n  for (var i = 0; i < array.length; i++) {\n    result.push(array[i]);\n  }\n  return result;\n}\n\nmodule.exports = flatten;\n",
        " value in the Array.\n*/\nfunction min(array, comparisonFn) {\n  var min = comparisonFn.min;\n  var item = comparisonFn.item;\n  for (var i = 0; i < array.length; i++) {\n    if (comparisonFn(array[i], item) < min) {\n      min = comparisonFn(array[i], item);\n    }\n  }\n  return min;\n}\n\nmodule.exports = min;\n",
        ".\n*/\nfunction sum(array) {\n  var sum = 0;\n  for (var i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n}\n\nmodule.exports = sum;\n",
        ".\n*/\nexport function push(target, elements) {\n  return Array.prototype.push.apply(target, elements);\n}\n\nexport function pushRight(target, elements) {\n  return Array.prototype.pushRight.apply(target, elements);\n}\n\nexport function pushLeft(target, elements) {\n  return Array.prototype.pushLeft.apply(target, elements);\n}\n\nexport function pushRightRight(target, elements) {\n  return Array.prototype.pushRightRight.apply(target, elements);\n}\n\nexport function pushLeftLeft(target, elements) {\n  return Array.prototype.pushLeftLeft.apply(target, elements);\n}\n\nexport function pushRightLeft(target, elements) {\n  return Array.prototype.pushRightLeft.apply(target, elements);\n}\n\nexport function pushRightRightRight(target, elements) {\n  return Array.prototype.pushRightRightRight.apply(target, elements);\n}\n\nexport function pushLeftLeftRight(target, elements) {\n  return Array.prototype.pushLeftLeftRight.apply(target, elements);\n}\n\nexport function pushRightLeftRight(target, elements) {\n  return Array.prototype.pushRightLeftRight.apply(target, elements);\n}\n\nexport function pushRightRightRight(target,",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\",
        ".\n@param {Object} event The event that was played.\n@param {Object} eventContext The context of the event.\n@param {Object} eventContext.event The event that was played.\n@param {Object} eventContext.event.data The data that was played.\n@param {Object} eventContext.event.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.data.data The data that was played.\n@param {Object} eventContext.event.data.data.",
        ".\n*/\nfunction handleKeyframe(eventDescriptor) {\n  var event = eventDescriptor.data;\n  if (event.type === 'keyframe') {\n    var keyframe = event.keyframe;\n    if (keyframe.duration === 0) {\n      // If the keyframe is not handled, then the event is handled.\n      keyframe.handled = true;\n      event.handled = true;\n    }\n  }\n}\n\n/**\nThis method is called when a keyframe is reached. This will fire the keyframe event.\nIf the keyframe has been handled, true is returned. Otherwise, false is returned.\n@param {Object} eventDescriptor The event descriptor of the keyframe.\n@return {Boolean} True if the keyframe was handled, false if not.\n*/\nfunction handleKeyframeEnd(eventDescriptor) {\n  var event = eventDescriptor.data;\n  if (event.type === 'keyframe') {\n    var keyframe = event.keyframe;\n    if (keyframe.duration === 0) {\n      // If the keyframe is not handled, then the event is handled.\n      keyframe.handled = true;\n      event.handled = true;\n    }\n  }\n}\n\n/**\nThis method is called when a keyframe is reached. This will fire the keyframe event.\nIf the keyframe has been handled, true is returned",
        "\n    #\n    # @return [Node] The noneditable parent or nil if there is no noneditable parent\n    def noneditable_parent\n      @noneditable_parent ||= find_noneditable_parent\n    end\n\n    # Returns the noneditable child or nil if there is no noneditable child\n    #\n    # @return [Node] The noneditable child or nil if there is no noneditable child\n    def noneditable_child\n      @noneditable_child ||= find_noneditable_child\n    end\n\n    # Returns the noneditable sibling or nil if there is no noneditable sibling\n    #\n    # @return [Node] The noneditable sibling or nil if there is no noneditable sibling\n    def noneditable_sibling\n      @noneditable_sibling ||= find_noneditable_sibling\n    end\n\n    # Returns the noneditable sibling or nil if there is no noneditable sibling\n    #\n    # @return [Node] The noneditable sibling or nil if there is no noneditable sibling\n    def noneditable_sibling?\n      noneditable_sibling.nil? || noneditable_sibling.is_a?(Node)\n    end\n\n    # Returns the noneditable sibling or nil if there is no noneditable sibling\n    #\n    # @return [Node] The noneditable sibling or nil if there is no noneditable sibling\n   ",
        " the caret container.\n *\n * @param {HTMLElement} element - The element to remove the caret container from.\n * @returns {HTMLElement} The removed element.\n */\nfunction removeCaretContainer(element) {\n  if (element.parentElement) {\n    element.parentElement.removeChild(element);\n  }\n  return element;\n}\n\n/**\n * Removes all elements from the DOM.\n *\n * @param {HTMLElement} element - The element to remove all elements from.\n * @returns {HTMLElement} The removed element.\n */\nfunction removeAllElements(element) {\n  if (element.parentElement) {\n    element.parentElement.removeAllChildren(element);\n  }\n  return element;\n}\n\n/**\n * Removes all elements from the DOM.\n *\n * @param {HTMLElement} element - The element to remove all elements from.\n * @returns {HTMLElement} The removed element.\n */\nfunction removeAllElementsFromDocument(element) {\n  if (element.parentElement) {\n    element.parentElement.removeAllChildren(element);\n  }\n  return element;\n}\n\n/**\n * Removes all elements from the DOM.\n *\n * @param {HTMLElement} element - The element to remove all elements from.\n * @returns {HTMLElement} The",
        "\n\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License. See License.txt in the project root for\n// license information.\n//\n// Code generated by Microsoft (R) AutoRest Code Generator.\n// Changes may cause incorrect behavior and will be lost if the code is\n// regenerated.\n\nnamespace Microsoft.Azure.Management.DataFactory.Models\n{\n    using Microsoft.Azure;\n    using Microsoft.Azure.Management;\n    using Microsoft.Azure.Management.DataFactory;\n    using Newtonsoft.Json;\n    using System.Linq;\n\n    /// <summary>\n    /// Defines a data factory resource.\n    /// </summary>\n    public partial class DataFactoryResource : Resource\n    {\n        /// <summary>\n        /// Initializes a new instance of the DataFactoryResource class.\n        /// </summary>\n        public DataFactoryResource()\n        {\n          CustomInit();\n        }\n\n        /// <summary>\n        /// Initializes a new instance of the DataFactoryResource class.\n        /// </summary>\n        /// <param name=\"id\">Resource ID.</param>\n        /// <param name=\"name\">Resource name.</param>\n        /// <param name=\"type\">Resource type.</param>\n        /// <param name",
        "\n    #\n    # @param [Hash] options\n    # @option options [String] :regexps\n    # @option options [String] :noneditable\n    # @option options [String] :noneditable_regexps\n    # @option options [String] :noneditable_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps_regexps\n    # @option options [String] :noneditable_regexps_regexps_regexps_regexps_",
        ".\n\nThe function returns a root logger object.\n\nExample:\n\n    var logger = bunyan.createLogger('my-logger');\n    logger.info('Hello world!');\n\n    // or\n\n    var logger = bunyan.createLogger('my-logger', {\n        level: 'debug'\n    });\n    logger.info('Hello world!');\n\n    // or\n\n    var logger = bunyan.createLogger('my-logger', {\n        level: 'debug',\n        transports: [\n            {\n                type: 'console',\n                level: 'debug'\n            }\n        ]\n    });\n    logger.info('Hello world!');\n\n    // or\n\n    var logger = bunyan.createLogger('my-logger', {\n        level: 'debug',\n        transports: [\n            {\n                type: 'console',\n                level: 'debug',\n                options: {\n                    colorize: true\n                }\n            }\n        ]\n    });\n    logger.info('Hello world!');\n\n    // or\n\n    var logger = bunyan.createLogger('my-logger', {\n        level: 'debug',\n        transports: [\n            {\n                type: 'console',\n                level: 'debug',\n                options: {\n                   ",
        ".  It is also possible to use the debug module's DEBUG environment\nvariable to set a custom name to use for logging.  This is a good idea for\nthe purpose of this library, but it is not a good idea for the purpose of\nthe library.\n\nThe debug module's DEBUG environment variable is set to the name of the\ndebug module that is being used for logging.  This is a good idea for\nthe purpose of this library, but it is not a good idea for the purpose of\nthe library.\n\nThe debug module's DEBUG environment variable is set to the name of the\ndebug module that is being used for logging.  This is a good idea for\nthe purpose of this library, but it is not a good idea for the purpose of\nthe library.\n\nThe debug module's DEBUG environment variable is set to the name of the\ndebug module that is being used for logging.  This is a good idea for\nthe purpose of this library, but it is not a good idea for the purpose of\nthe library.\n\nThe debug module's DEBUG environment variable is set to the name of the\ndebug module that is being used for logging.  This is a good idea for\nthe purpose of this library, but it is not a good idea for the purpose of\nthe library.\n\nThe debug module's DEBUG environment variable is set to the name of the\ndebug module that is being used for",
        "\n\n    public   <   T   >   T   get(   Fx   fx   )   {   return   fx.get(   this   );   }\n\n    public   <   T   >   T   put(   Fx   fx   ,   T   value   )   {   fx.put(   this   ,   value   );   return   value   ;   }\n\n    public   <   T   >   T   put(   Fx   fx   ,   T   value   ,   T   oldValue   )   {   fx.put(   this   ,   value   ,   oldValue   );   return   value   ;   }\n\n    public   <   T   >   T   remove(   Fx   fx   )   {   fx.remove(   this   );   return   value   ;   }\n\n    public   <   T   >   T   remove(   Fx   fx   ,   T   value   )   {   fx.remove(   this   ,   value   );   return   value   ;   }\n\n    public   <   T   >   T   remove(   Fx   fx   ,   T   oldValue   )   {   fx.remove(   this   ,   oldValue   );   return   value   ;   }\n\n    public   <",
        "\n*/\nExt.dom.Element.prototype.setOpacity = function(opacity, animate) {\n    this.setOpacity(opacity, animate, true);\n};\n\n/**\nSet the opacity of the element\n@param {Number} opacity The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc\n@param {Boolean/Object} [animate] a standard Element animation config object or `true` for\nthe default animation (`{duration: 350, easing: 'easeIn'}`)\n@return {Ext.dom.Element} this\n*/\nExt.dom.Element.prototype.setOpacity = function(opacity, animate, force) {\n    if (force === undefined) { force = true; }\n    if (typeof force === 'boolean') { force = !!force; }\n    if (typeof force === 'object') { force = !!force.duration; }\n    if (typeof force === 'object') { force = !!force.easing; }\n    if (typeof force === 'object') { force = !!force.duration; }\n    if (typeof force === 'object') { force = !!force.easing; }\n    if (typeof force === 'object') { force = !!force.duration; }\n    if (typeof force === 'object') { force =",
        "\n*/\nExt.define('Ext.dom.Element.prototype.addClass', {\n    override: 'Ext.Element.prototype.addClass',\n    constructor: function(className, testFn, scope) {\n        this.addClass(className, testFn, scope);\n    },\n\n    /**\n     * Adds a class to the element.\n     * @param {String} className The class to add\n     * @param {Function} [testFn] A test function to execute before adding the class. The passed parameter\n     *will be the Element instance. If this functions returns false, the class will not be added.\n     * @param {Object} [scope] The scope to execute the testFn in.\n     * @return {Ext.dom.Element} this\n     */\n    addClass: function(className, testFn, scope) {\n        var me = this;\n        if (testFn) {\n            me.on('addclass', testFn, scope);\n        } else {\n            me.on('addclass', function(e) {\n                if (testFn(e.target)) {\n                    me.removeClass(className);\n                }\n            }, scope);\n        }\n        return me;\n    },\n\n    /**\n     * Removes a class from the element.\n     * @param {String} className",
        "\n    public static void main(String[] args) {\n        System.out.println(new Solution().findMaxSum(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129",
        "\n\n    def test_on_mousedown_with_multiple_click_events(self):\n        \"\"\"\n        Test that the on_mousedown event is fired for multiple click events.\n        \"\"\"\n        self.assertEqual(len(self.events), 0)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 1)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 2)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 3)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 4)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 5)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 6)\n\n        self.click_event(self.click_event_id)\n        self.assertEqual(len(self.events), 7)\n\n        self.click_event(self.click_event_id",
        "\n\n@property (nonatomic, copy) NSString *command;\n\n@property (nonatomic, copy) NSString *commandName;\n\n@property (nonatomic, copy) NSString *commandDescription;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArguments;\n\n@property (nonatomic, copy) NSString *commandDescriptionWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArgumentsWithArguments",
        ".\n\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <algorithm>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <sstream>\n#include <iostream>\n#include <iomanip>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <ctime>\n#include <cctype>\n#include <cassert>\n#include <cstring>\n#include <cctype>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <cmath>\n#include <cstdio>\n#include <cstdlib>\n#include <cassert>\n#include <ctime>\n#include <cstdio>\n#include <cassert>\n#include <cstdlib>\n#include <cstring>\n#include <cassert>\n#include <cstdio>\n#include <cassert>\n#include <cstdlib>\n#include <cassert>\n#include <cstdio>\n#include <cassert",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Sprite, self).__init__(*args, **kwargs)\n        self.sprite = None\n        self.sprite_image = None\n        self.sprite_image_size = None\n        self.sprite_image_size_x = None\n        self.sprite_image_size_y = None\n        self.sprite_image_size_w = None\n        self.sprite_image_size_h = None\n        self.sprite_image_size_x_scale = None\n        self.sprite_image_size_y_scale = None\n        self.sprite_image_size_w_scale = None\n        self.sprite_image_size_h_scale = None\n        self.sprite_image_size_x_scale_scale = None\n        self.sprite_image_size_y_scale_scale = None\n        self.sprite_image_size_w_scale_scale = None\n        self.sprite_image_size_h_scale_scale = None\n        self.sprite_image_size_x_scale_scale_scale = None\n        self.sprite_image_size_y_scale_scale = None\n        self.",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;",
        "\n\n    def test_join_multiple_plugins(self):\n        \"\"\"\n        Join multiple plugins into one\n        \"\"\"\n        plugin = self.plugin_manager.get_plugin('join_multiple_plugins')\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin.load_plugins()\n        plugin",
        "\n\n    def test_get_user_by_email(self):\n        \"\"\"\n        Tests that the user is returned by the database when the email is\n        in the database.\n        \"\"\"\n        user = self.setup_user()\n        self.assertEqual(user.email, 'test@example.com')\n\n    def test_get_user_by_email_not_found(self):\n        \"\"\"\n        Tests that the user is returned by the database when the email is\n        not in the database.\n        \"\"\"\n        user = self.setup_user()\n        self.assertEqual(user.email, 'test@example.com')\n\n    def test_get_user_by_id(self):\n        \"\"\"\n        Tests that the user is returned by the database when the id is in the\n        database.\n        \"\"\"\n        user = self.setup_user()\n        self.assertEqual(user.id, 1)\n\n    def test_get_user_by_id_not_found(self):\n        \"\"\"\n        Tests that the user is returned by the database when the id is not in the\n        database.\n        \"\"\"\n        user = self.setup_user()\n        self.assertEqual(user.id, 1)\n\n    def test_get_user_",
        "\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      File.directory?(path) || File.exist?(path)\n    end\n\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      ignored?(path.to_s)\n    end\n\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      ignored?(path.to_s)\n    end\n\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      ignored?(path.to_s)\n    end\n\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      ignored?(path.to_s)\n    end\n\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      ignored?(path.to_s)\n    end\n\n    # @param [String] path\n    # @return [Boolean]\n    def ignored?(path)\n      ignored?(path.to_s)\n    end\n\n    # @param [String] path\n    #",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        ".\n\nExample:\n\n    >>> from pyramid.view import view_config\n    >>> from pyramid.view import view_config_factory\n    >>> from pyramid.view import view_config_registry\n    >>> from pyramid.view import view_config_registry_factory\n    >>> from pyramid.view import view_config_registry_registry\n    >>> from pyramid.view import view_config_registry_registry_factory\n    >>> from pyramid.view import view_config_registry_registry_registry\n    >>> from pyramid.view import view_config_registry_registry_registry_factory\n    >>> from pyramid.view import view_config_registry_registry_registry_registry\n    >>> from pyramid.view import view_config_registry_registry_registry_factory\n    >>> from pyramid.view import view_config_registry_registry_registry_registry\n    >>> from pyramid.view import view_config_registry_registry_registry_registry_factory\n    >>> from pyramid.view import view_config_registry_registry_registry_registry_registry\n    >>> from pyramid.view import view_config_registry_registry_registry_registry_factory\n    >>> from pyramid.view import view_config_registry_registry_registry_registry_registry\n    >>> from pyramid.view import view_config_registry_registry_",
        "\n\n@property (nonatomic, strong) NSString *name;\n@property (nonatomic, strong) NSString *description;\n@property (nonatomic, strong) NSString *url;\n@property (nonatomic, strong) NSString *image;\n@property (nonatomic, strong) NSString *image_url;\n@property (nonatomic, strong) NSString *image_url_large;\n@property (nonatomic, strong) NSString *image_url_medium;\n@property (nonatomic, strong) NSString *image_url_small;\n@property (nonatomic, strong) NSString *image_url_thumb;\n@property (nonatomic, strong) NSString *image_url_thumb_large;\n@property (nonatomic, strong) NSString *image_url_thumb_medium;\n@property (nonatomic, strong) NSString *image_url_thumb_small;\n@property (nonatomic, strong) NSString *image_url_thumb_thumb;\n@property (nonatomic, strong) NSString *image_url_thumb_large_medium;\n@property (nonatomic, strong) NSString *image_url_thumb_medium_small;\n@property (nonatomic, strong) NSString *image_url_thumb_small_medium;\n@property (nonatomic,",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\",
        "@private\n*/\nExt.direct.Transaction.prototype.runCallbacks = function(transaction, event) {\n    var callbacks = transaction.callbacks;\n    if (callbacks) {\n        for (var i = 0, l = callbacks.length; i < l; i++) {\n            callbacks[i].call(transaction, event);\n        }\n    }\n};\n\n/**\n@private\n*/\nExt.direct.Transaction.prototype.runCallbacksFor = function(transaction, event) {\n    var callbacks = transaction.callbacksFor;\n    if (callbacks) {\n        for (var i = 0, l = callbacks.length; i < l; i++) {\n            callbacks[i].call(transaction, event);\n        }\n    }\n};\n\n/**\n@private\n*/\nExt.direct.Transaction.prototype.runCallbacksForAll = function(transaction, event) {\n    var callbacks = transaction.callbacksForAll;\n    if (callbacks) {\n        for (var i = 0, l = callbacks.length; i < l; i++) {\n            callbacks[i].call(transaction, event);\n        }\n    }\n};\n\n/**\n@private\n*/\nExt.direct.Transaction.prototype.runCallbacksForAllFor = function(transaction, event) {\n    var callbacks = transaction.callbacksForAllFor;",
        "\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-dom';\nimport { Link } from 'react-router';\nimport { LinkList } from 'react-router-dom';\nimport { LinkListItem } from 'react-router-dom';\nimport { LinkListItemText } from 'react-router-dom';\nimport { LinkListItemIcon } from 'react-router-dom';\nimport { LinkListItemLink } from 'react-router-dom';\nimport { LinkListItemLinkList } from 'react-router-dom';\nimport { LinkListItemLinkListItem } from 'react-router-dom';\nimport { LinkListItemLinkListItemText } from 'react-router-dom';\nimport { LinkListItemLinkListItemIcon } from 'react-router-dom';\nimport { LinkListItemLinkListItemLink } from 'react-router-dom';\nimport { LinkListItemLinkListItemLinkList } from 'react-router-dom';\nimport { LinkListItemLinkListItemLinkListItemText } from 'react-router-dom';\nimport { LinkListItemLinkListItemLinkListItemIcon } from 'react-router-dom';\nimport { LinkListItemLink",
        "@private\n*/\nExt.direct.Transaction.prototype.getTransaction = function(options) {\n    var transaction = this.getTransactionFromXHR(options);\n    if (transaction) {\n        return transaction;\n    }\n    return null;\n};\n\n/**\n@private\n*/\nExt.direct.Transaction.prototype.getTransactionFromXHR = function(options) {\n    var transaction = null;\n    var xhr = new Ext.XHR(options);\n    xhr.on('load', function(response) {\n        transaction = Ext.direct.Transaction.fromResponse(response);\n        return transaction;\n    }, this);\n    xhr.on('error', function(response) {\n        transaction = null;\n        return transaction;\n    }, this);\n    xhr.send();\n    return transaction;\n};\n\n/**\n@private\n*/\nExt.direct.Transaction.prototype.getTransactionFromResponse = function(response) {\n    var transaction = null;\n    if (response.responseText) {\n        transaction = Ext.direct.Transaction.fromResponseText(response.responseText);\n    }\n    return transaction;\n};\n\n/**\n@private\n*/\nExt.direct.Transaction.prototype.getTransactionFromResponseText = function(responseText) {\n    var transaction = null;\n    var transactionData =",
        "@returns {Object} The direct request object\n*/\nfunction directRequest(action, method) {\n  return {\n    action: action,\n    method: method\n  };\n}\n\n/**\n@param {String} action The action being executed\n@param {Object} method The being executed\n\n@returns {Object} The direct request object\n*/\nfunction directRequest(action, method) {\n  return {\n    action: action,\n    method: method\n  };\n}\n\n/**\n@param {String} action The action being executed\n@param {Object} method The being executed\n\n@returns {Object} The direct request object\n*/\nfunction directRequest(action, method) {\n  return {\n    action: action,\n    method: method\n  };\n}\n\n/**\n@param {String} action The action being executed\n@param {Object} method The being executed\n\n@returns {Object} The direct request object\n*/\nfunction directRequest(action, method) {\n  return {\n    action: action,\n    method: method\n  };\n}\n\n/**\n@param {String} action The action being executed\n@param {Object} method The being executed\n\n@returns {Object} The direct request object\n*/\nfunction directRequest(action, method) {\n  return {\n   ",
        "@private\n*/\nExt.direct.Ajax.prototype.getCallParams = function(transaction) {\n    var callParams = {};\n\n    callParams.url = transaction.getUrl();\n    callParams.method = transaction.getMethod();\n    callParams.params = transaction.getParams();\n    callParams.paramsType = transaction.getParamsType();\n    callParams.paramsTypeId = transaction.getParamsTypeId();\n    callParams.paramsTypeKey = transaction.getParamsTypeKey();\n    callParams.paramsTypeValue = transaction.getParamsTypeValue();\n    callParams.paramsTypeUrl = transaction.getParamsTypeUrl();\n    callParams.paramsTypeUrlKey = transaction.getParamsTypeUrlKey();\n    callParams.paramsTypeUrlValue = transaction.getParamsTypeUrlValue();\n    callParams.paramsTypeUrlUrl = transaction.getParamsTypeUrlUrl();\n    callParams.paramsTypeUrlUrlKey = transaction.getParamsTypeUrlUrlKey();\n    callParams.paramsTypeUrlUrlValue = transaction.getParamsTypeUrlUrlValue();\n    callParams.paramsTypeUrlUrlUrl = transaction.getParamsTypeUrlUrlUrl();\n    callParams.paramsTypeUrlUrlKey = transaction.getParamsTypeUrlUrlKey();\n    callParams.paramsTypeUrlUrlValue = transaction.getParamsTypeUrlUrlValue();",
        "@private\n*/\nExt.direct.TransactionQueue.prototype.add = function(transaction) {\n    this.transactions.push(transaction);\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.remove = function(transaction) {\n    var index = this.transactions.indexOf(transaction);\n    if (index > -1) {\n        this.transactions.splice(index, 1);\n    }\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.removeAll = function() {\n    this.transactions = [];\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.getTransactions = function() {\n    return this.transactions;\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.getTransactionsCount = function() {\n    return this.transactions.length;\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.getTransaction = function(index) {\n    return this.transactions[index];\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.getTransactionsCount = function() {\n    return this.transactions.length;\n};\n\n/**\n@private\n*/\nExt.direct.TransactionQueue.prototype.getTransactionCount = function() {",
        "\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/ioctl.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/wait.h>\n#include <sys/socket.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/",
        " (if not found)\n\n    :param lookup_table_map_object: The lookup table map object to create\n    :type lookup_table_map_object: :class:`LookupTableMapObject`\n    :param lookup_table_map_object_type: The lookup table map object type\n    :type lookup_table_map_object_type: :class:`LookupTableMapObjectType`\n    :param lookup_table_map_object_id: The lookup table map object id\n    :type lookup_table_map_object_id: :class:`str`\n    :param lookup_table_map_object_name: The lookup table map object name\n    :type lookup_table_map_object_name: :class:`str`\n    :param lookup_table_map_object_description: The lookup table map object description\n    :type lookup_table_map_object_description: :class:`str`\n    :param lookup_table_map_object_type_description: The lookup table map object type description\n    :type lookup_table_map_object_type_description: :class:`str`\n    :param lookup_table_map_object_id_description: The lookup table map object id description\n    :type lookup_table_map_object_id_description: :class:`str`\n    :param lookup_table",
        "\n    //\n    // @param {string} html\n    // @returns {string}\n    // @private\n    function addNonHTML(html) {\n      return html.replace(/<[^>]+>/g, '');\n    }\n\n    //\n    // @param {string} html\n    // @returns {string}\n    // @private\n    function removeNonHTML(html) {\n      return html.replace(/<[^>]+>/g, '');\n    }\n\n    //\n    // @param {string} html\n    // @returns {string}\n    // @private\n    function removeNonHTML(html, remove) {\n      return html.replace(/<[^>]+>/g, '');\n    }\n\n    //\n    // @param {string} html\n    // @returns {string}\n    // @private\n    function removeNonHTML(html, remove) {\n      return html.replace(/<[^>]+>/g, '');\n    }\n\n    //\n    // @param {string} html\n    // @returns {string}\n    // @private\n    function removeNonHTML(html, remove) {\n      return html.replace(/<[^>]+>/g, '');\n    }\n\n    //\n    // @param {string} html\n    // @returns {string}\n   ",
        ".\n  #\n  # @return [String] The content editable state of the object.\n  def content_editable_state\n    @content_editable_state ||= begin\n      if self.respond_to?(:content_editable_state)\n        self.content_editable_state\n      else\n        self.class.content_editable_state\n      end\n    end\n  end\n\n  # Returns the content editable state of the object.\n  #\n  # @return [String] The content editable state of the object.\n  def content_editable_state=(state)\n    @content_editable_state = state\n  end\n\n  # Returns the content editable state of the object.\n  #\n  # @return [String] The content editable state of the object.\n  def content_editable_state_for_edit\n    @content_editable_state_for_edit ||= begin\n      if self.respond_to?(:content_editable_state_for_edit)\n        self.content_editable_state_for_edit\n      else\n        self.class.content_editable_state_for_edit\n      end\n    end\n  end\n\n  # Returns the content editable state of the object.\n  #\n  # @return [String] The content editable state of the object.\n  def content_editable_",
        "\n\n#include \"main.h\"\n\n#include \"script/script.h\"\n#include \"script/script_error.h\"\n#include \"script/script_error_callback.h\"\n#include \"script/script_run.h\"\n#include \"script/script_state.h\"\n#include \"script/script_value.h\"\n#include \"script/script_value_callback.h\"\n#include \"script/script_value_callback_list.h\"\n#include \"script/script_value_callback_list_iterator.h\"\n#include \"script/script_value_callback_list_iterator_list.h\"\n#include \"script/script_value_callback_list_iterator_list_iterator.h\"\n#include \"script/script_value_callback_list_iterator_list_iterator.h\"\n#include \"script/script_value_callback_list_iterator_list_iterator_list.h\"\n#include \"script/script_value_callback_list_iterator_list_iterator_list_iterator.h\"\n#include \"script/script_value_callback_list_iterator_list_iterator_list_iterator.h\"\n#include \"script/script_value_callback_list_iterator_list_iterator_list_iterator.h\"\n#",
        ".\n\n@interface NativeHandler : NSObject\n\n@property (nonatomic, assign) id<NativeHandlerDelegate> delegate;\n\n- (void)handleNativeEvent:(NSNativeEvent *)event;\n\n@end\n\n@interface NativeHandlerDelegate : NSObject\n\n@property (nonatomic, assign) id<NativeHandler> handler;\n\n@end\n",
        "\n\n    def test_get_command_line_arguments(self):\n        \"\"\"Test that the command line arguments are passed to the command.\"\"\"\n        command = Command()\n        command.args = ['--foo', 'bar']\n        command.run()\n        self.assertEqual(command.args, ['--foo', 'bar'])\n\n    def test_get_command_line_arguments_with_no_args(self):\n        \"\"\"Test that the command line arguments are passed to the command.\"\"\"\n        command = Command()\n        command.run()\n        self.assertEqual(command.args, [])\n\n    def test_get_command_line_arguments_with_no_args_and_no_args(self):\n        \"\"\"Test that the command line arguments are passed to the command.\"\"\"\n        command = Command()\n        command.run()\n        self.assertEqual(command.args, [])\n\n    def test_get_command_line_arguments_with_no_args_and_no_args_and_no_args(self):\n        \"\"\"Test that the command line arguments are passed to the command.\"\"\"\n        command = Command()\n        command.run()\n        self.assertEqual(command.args, [])\n\n    def test_get_command_line_arguments_with_no_args_",
        "\n    def test_get_all_devices(self):\n        \"\"\"Test get_all_devices.\"\"\"\n        self.hass.states.set('light.test', 'on')\n        self.hass.states.set('light.test2', 'on')\n        self.hass.states.set('light.test3', 'on')\n        self.hass.states.set('light.test4', 'on')\n        self.hass.states.set('light.test5', 'on')\n        self.hass.states.set('light.test6', 'on')\n        self.hass.states.set('light.test7', 'on')\n        self.hass.states.set('light.test8', 'on')\n        self.hass.states.set('light.test9', 'on')\n        self.hass.states.set('light.test10', 'on')\n        self.hass.states.set('light.test11', 'on')\n        self.hass.states.set('light.test12', 'on')\n        self.hass.states.set('light.test13', 'on')\n        self.hass.states.set('light.test14', 'on')\n        self.hass.states.set",
        "\n\n    def test_help(self):\n        \"\"\"\n        Tests the help command.\n        \"\"\"\n        self.assertEqual(\n            self.command.help(),\n            'Usage: %prog [options] [command] [args...]'\n        )\n\n    def test_help_with_help(self):\n        \"\"\"\n        Tests the help command with help.\n        \"\"\"\n        self.assertEqual(\n            self.command.help(help=True),\n            'Usage: %prog [options] [command] [args...]'\n        )\n\n    def test_help_with_help_with_help(self):\n        \"\"\"\n        Tests the help command with help and help.\n        \"\"\"\n        self.assertEqual(\n            self.command.help(help=True, help=True),\n            'Usage: %prog [options] [command] [args...]'\n        )\n\n    def test_help_with_help_with_help_with_help(self):\n        \"\"\"\n        Tests the help command with help and help with help.\n        \"\"\"\n        self.assertEqual(\n            self.command.help(help=True, help=True, help=True),\n            'Usage: %prog [options] [command] [args...]'\n        )\n\n",
        "\n    #\n    # @param [String] text\n    # @return [String]\n    def remove_caret_container(text)\n      text.gsub(/^\\s+/, '').gsub(/\\s+$/, '')\n    end\n\n    # Removes the caret container for the specified element\n    #\n    # @param [Element] element\n    # @return [Element]\n    def remove_caret_container(element)\n      element.parent.remove_caret_container(element)\n    end\n\n    # Removes the caret container for the specified element\n    #\n    # @param [Element] element\n    # @return [Element]\n    def remove_caret_container_for(element)\n      element.parent.remove_caret_container_for(element)\n    end\n\n    # Removes the caret container for the specified element\n    #\n    # @param [Element] element\n    # @return [Element]\n    def remove_caret_container_for_all(element)\n      element.parent.remove_caret_container_for_all(element)\n    end\n\n    # Removes the caret container for the specified element\n    #\n    # @param [Element] element\n    # @return [Element]\n    def remove_caret_container_for",
        "\n\n    # If the parent caret container node is empty, then the parent node is the\n    # first child of the caret container node.\n    if parent.empty?\n      parent.remove_child_at(0)\n    end\n\n    # If the parent caret container node is not empty, then the parent node is the\n    # last child of the caret container node.\n    if parent.empty?\n      parent.remove_child_at(parent.children.length - 1)\n    end\n\n    # If the parent caret container node is not empty, then the parent node is the\n    # last child of the caret container node.\n    if parent.empty?\n      parent.remove_child_at(0)\n    end\n\n    # If the parent caret container node is not empty, then the parent node is the\n    # last child of the caret container node.\n    if parent.empty?\n      parent.remove_child_at(parent.children.length - 1)\n    end\n\n    # If the parent caret container node is not empty, then the parent node is the\n    # last child of the caret container node.\n    if parent.empty?\n      parent.remove_child_at(0)\n    end\n\n    # If the parent caret container node is not empty, then the parent node is the\n    #",
        "\n\n    def test_render_empty_block_with_empty_content(self):\n        \"\"\"\n        Tests that rendering an empty block with no content works.\n        \"\"\"\n        block = Block()\n        self.assertEqual(block.render(), '')\n\n    def test_render_empty_block_with_empty_content_with_no_content(self):\n        \"\"\"\n        Tests that rendering an empty block with no content works.\n        \"\"\"\n        block = Block()\n        block.content = ''\n        self.assertEqual(block.render(), '')\n\n    def test_render_empty_block_with_empty_content_with_no_content_with_no_content(self):\n        \"\"\"\n        Tests that rendering an empty block with no content works.\n        \"\"\"\n        block = Block()\n        block.content = ''\n        block.content = ''\n        self.assertEqual(block.render(), '')\n\n    def test_render_empty_block_with_empty_content_with_no_content_with_no_content(self):\n        \"\"\"\n        Tests that rendering an empty block with no content works.\n        \"\"\"\n        block = Block()\n        block.content = ''\n        block.content = ''\n        self.assertEqual(block.render(), '')\n",
        "\n * @param {Node} root The root of the tree to move the caret to.\n * @param {number} offset The offset to move the caret to.\n * @returns {Node} The new root of the tree.\n */\nfunction moveCaretTo(root, offset) {\n  var caret = root.firstChild;\n  while (caret) {\n    if (caret.nextSibling) {\n      caret = caret.nextSibling;\n    } else {\n      break;\n    }\n    caret = caret.nextSibling;\n  }\n  return root;\n}\n\n/**\n * Moves the caret to a suitable position within the root for example in the first non pure pure text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text",
        "\n * @param {string} name The name of the new block element\n * @returns {BlockElement} The new block element\n */\nBlockElement.prototype.createNew = function(name) {\n    var newElement = document.createElement(name);\n    this.parent.appendChild(newElement);\n    return newElement;\n};\n\n/**\n * Creates a new block element by cloning the current one or creating a new one if the name is specified This function will also copy any text formatting from the parent block element and add it to the new one\n * @param {string} name The name of the new block element\n * @returns {BlockElement} The new block element\n */\nBlockElement.prototype.createNewIfName = function(name) {\n    var newElement = document.createElement(name);\n    this.parent.appendChild(newElement);\n    return newElement;\n};\n\n/**\n * Creates a new block element by cloning the current one or creating a new one if the name is specified This function will also copy any text formatting from the parent block element and add it to the new one\n * @param {string} name The name of the new block element\n * @returns {BlockElement} The new block element\n */\nBlockElement.prototype.createNewIfNameIfName = function(name) {\n    var newElement = document.createElement(",
        "\n    @property\n    def forced_root_block_name(self):\n        \"\"\"\n        Returns the name of the forced root block.\n        \"\"\"\n        return self.get_text_node_or_inline_element_by_name(self.forced_root_block_name)\n\n    @property\n    def forced_root_block_name_for_text_nodes(self):\n        \"\"\"\n        Returns the name of the forced root block.\n        \"\"\"\n        return self.get_text_node_or_inline_element_by_name(self.forced_root_block_name)\n\n    @property\n    def forced_root_block_name_for_inline_elements(self):\n        \"\"\"\n        Returns the name of the forced root block.\n        \"\"\"\n        return self.get_text_node_or_inline_element_by_name(self.forced_root_block_name)\n\n    @property\n    def forced_root_block_name_for_text_nodes_and_inline_elements(self):\n        \"\"\"\n        Returns the name of the forced root block.\n        \"\"\"\n        return self.get_text_node_or_inline_element_by_name(self.forced_root_block_name)\n\n    @property\n    def forced_root",
        "\n\n    // Find the right block\n    for (var i = 0; i < blocks.length; i++) {\n      if (blocks[i].type === 'block') {\n        if (blocks[i].type === 'block') {\n          if (blocks[i].type === 'block') {\n            if (blocks[i].type === 'block') {\n              if (blocks[i].type === 'block') {\n                if (blocks[i].type === 'block') {\n                  if (blocks[i].type === 'block') {\n                    if (blocks[i].type === 'block') {\n                      if (blocks[i].type === 'block') {\n                        if (blocks[i].type === 'block') {\n                          if (blocks[i].type === 'block') {\n                            if (blocks[i].type === 'block') {\n                              if (blocks[i].type === 'block') {\n                                if (blocks[i].type === 'block') {\n                                  if (blocks[i].type === 'block') {\n                                    if (blocks[i].type === 'block') {\n                                      if (blocks[i].type === 'block') {\n                                        if (blocks[i].type === 'block') {\n                                          if (blocks[i].type === 'block') {\n                                ",
        ".\n *\n * @param {HTMLElement} element The element to insert.\n * @param {boolean} forced_root_option Whether to insert a BR element if the forced_root_option option is set to true.\n * @returns {HTMLElement} The inserted element.\n */\nfunction insert_br_element(element, forced_root_option) {\n  if (forced_root_option) {\n    element.insertAdjacentHTML('beforeend', '<br />');\n  } else {\n    element.insertAdjacentHTML('beforeend', '<br />');\n  }\n  return element;\n}\n\n/**\n * Inserts a BR element if the forced_root_option option is set to true.\n *\n * @param {HTMLElement} element The element to insert.\n * @param {boolean} forced_root_option Whether to insert a BR element if the forced_root_option option is set to true.\n * @returns {HTMLElement} The inserted element.\n */\nfunction insert_br_element_if_forced_root_option(element, forced_root_option) {\n  if (forced_root_option) {\n    element.insertAdjacentHTML('beforeend', '<br />');\n  } else {\n    element.insertAdjacentHTML('beforeend', '<br />');\n  }\n ",
        "\n@private\n*/\nExt.id = function(el, prefix) {\n    if (el) {\n        if (el.id) {\n            return el.id;\n        }\n        var id = prefix + Ext.id.count++;\n        el.id = id;\n        return id;\n    }\n    return id;\n};\n\n/**\n@private\n@method Ext.id.count\n@param {HTMLElement/Ext.Element} el The element to generate an id for\n@return {Number} The number of unique ids\n*/\nExt.id.count = 0;\n\n/**\n@private\n@method Ext.id.nextId\n@param {HTMLElement/Ext.Element} el The element to generate an id for\n@return {String} The next unique id\n*/\nExt.id.nextId = function(el) {\n    return Ext.id.count++;\n};\n\n/**\n@private\n@method Ext.id.prevId\n@param {HTMLElement/Ext.Element} el The element to generate an id for\n@return {String} The previous unique id\n*/\nExt.id.prevId = function(el) {\n    return Ext.id.count--;\n};\n\n/**\n@private\n@method Ext.id.getNextId\n@param {HTMLElement",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        ".\n@returns {Object} The object (most likely a Component) who's properties you wish to destroy.\n@example\nvar myComponent = new Component({\n  name: 'My Component',\n  destroy: function() {\n    this.name = 'My Component 2';\n  }\n});\nmyComponent.destroy();\nmyComponent.destroy(['name']);\nmyComponent.destroy(['name', 'name2']);\nmyComponent.destroy(['name', 'name2', 'name3']);\nmyComponent.destroy(['name', 'name2', 'name3', 'name4']);\nmyComponent.destroy(['name', 'name2', 'name3', 'name4', 'name5']);\nmyComponent.destroy(['name', 'name2', 'name3', 'name4', 'name5', 'name6']);\nmyComponent.destroy(['name', 'name2', 'name3', 'name4', 'name5', 'name6', 'name7']);\nmyComponent.destroy(['name', 'name2', 'name3', 'name4', 'name5', 'name6', 'name7', 'name8']);\nmyComponent.destroy(['name', 'name2', 'name3', 'name4', 'name5', 'name6', 'name7', 'name8",
        ".\n@method\n@param {Array/NodeList} arr The Array of items to invoke the method on.\n@param {String} methodName The method name to invoke.\n@param {Object...} args Arguments to send into the method invocation.\n@return {Array} The results of invoking the method on each item in the array.\n@deprecated 4.0.0 Will be removed in the next major version.\n@static\n@method\n@param {Array/NodeList} arr The Array of items to invoke the method on.\n@param {String} methodName The method name to invoke.\n@param {Object...} args Arguments to send into the method invocation.\n@return {Array} The results of invoking the method on each item in the array.\n@static\n@method\n@param {Array/NodeList} arr The Array of items to invoke the method on.\n@param {String} methodName The method name to invoke.\n@param {Object...} args Arguments to send into the method invocation.\n@return {Array} The results of invoking the method on each item in the array.\n@static\n@method\n@param {Array/NodeList} arr The Array of items to invoke the method on.\n@param {String} methodName The method name to invoke.\n@param {Object...} args Arguments to send into the method invocation.\n@return {Array} The results of invoking the",
        ".\n*/\nExt.define('Ext.util.Zip', {\n    extend: 'Ext.util.Array',\n    alias: 'plugin.zip',\n    requires: ['Ext.util.Array'],\n    constructor: function(arr, zipper) {\n        this.callParent([arr, zipper]);\n    }\n});\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.internal.nio.Connection;\nimport com.hazelcast.internal.nio.ConnectionState;\nimport com.hazelcast.internal.protocol.ClientMessage;\nimport com.hazelcast.internal.protocol.codec.Map",
        ".\n*/\nfunction fixIndentationIssue() {\n  return function() {\n    var lines = document.getElementsByClassName('line');\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      var lineText = line.textContent;\n      var lineTextLength = lineText.length;\n      var lineTextTrimmed = lineText.trim();\n      var lineTextTrimmedLength = lineTextTrimmed.length;\n      var lineTextTrimmedTrimmed = lineTextTrimmed.trim();\n      var lineTextTrimmedTrimmedLength = lineTextTrimmedTrimmed.length;\n      var lineTextTrimmedTrimmedTrimmed = lineTextTrimmedTrimmed.trim();\n      var lineTextTrimmedTrimmedLength = lineTextTrimmedTrimmed.length;\n      var lineTextTrimmedTrimmedTrimmed = lineTextTrimmedTrimmed.trim();\n      var lineTextTrimmedTrimmedLength = lineTextTrimmedTrimmed.length;\n      var lineTextTrimmedTrimmedTrimmed = lineTextTrimmedTrimmed.trim();\n      var lineTextTrimmedTrimmedLength = lineTextTrimmedTrimmed.length;\n      var lineTextTrimmedTrimmedTrimmed = lineTextTrimmedTrimmed.trim();\n      var lineTextTrimmedTrimmed",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.metrics;\n\nimport com.hazelcast.internal.metrics.impl.MetricsRegistryImpl;\nimport com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.MetricsRegistryListener;\nimport com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.MetricsRegistryListenerAdapter;\nimport com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.MetricsRegistryListenerAdapterImpl;\nimport com.hazelcast.internal.metrics.impl.MetricsRegistryImpl.MetricsRegistryListenerAdapterImplImpl;\nimport com.h",
        ".\n@example\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the first in its own start line.\nvar first = require('../index');\nfirst(require('../index'));\n// Check if node is the",
        "\n*/\nfunction isFirstArgumentOfParent(node) {\n  return node.parent.type === 'CallExpression' && node.parent.callee.type === 'Identifier' && node.parent.callee.name === 'first';\n}\n\n/**\nChecks node is the first argument of its parent.\n@param {ASTNode} node The node to check\n@returns {boolean} true if its the first argument of its parent\n*/\nfunction isFirstArgumentOfParent2(node) {\n  return node.parent.type === 'CallExpression' && node.parent.callee.type === 'Identifier' && node.parent.callee.name === 'first';\n}\n\n/**\nChecks node is the first argument of its parent.\n@param {ASTNode} node The node to check\n@returns {boolean} true if its the first argument of its parent\n*/\nfunction isFirstArgumentOfParent3(node) {\n  return node.parent.type === 'CallExpression' && node.parent.callee.type === 'Identifier' && node.parent.callee.name === 'first';\n}\n\n/**\nChecks node is the first argument of its parent.\n@param {ASTNode} node The node to check\n@returns {boolean} true if its the first argument of its parent\n*/\nfunction isFirstArgumentOfParent4(node) {\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.internal.nio.Connection;\nimport com.hazelcast.internal.nio.ConnectionState;\nimport com.hazelcast.internal.protocol.ClientMessage;\nimport com.hazelcast.internal.protocol.codec.Map",
        "\n*/\nfunction checkLastNodeLineIndent(node, lastLineIndent) {\n    var prev = node.prev;\n    var next = node.next;\n    var prevLineIndent = prev.line;\n    var nextLineIndent = next.line;\n    if (prevLineIndent === nextLineIndent) {\n        return true;\n    }\n    if (prevLineIndent === 0) {\n        return false;\n    }\n    if (nextLineIndent === 0) {\n        return false;\n    }\n    if (prevLineIndent > nextLineIndent) {\n        return true;\n    }\n    if (prevLineIndent < nextLineIndent) {\n        return false;\n    }\n    return true;\n}\n\nmodule.exports = checkLastNodeLineIndent;\n",
        "\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function body\n- If node is a function, check if it has a function",
        "\n*/\nfunction getVariableDeclarator(node) {\n  if (!node) {\n    return null;\n  }\n\n  if (node.type === 'VariableDeclaration') {\n    return node;\n  }\n\n  if (node.type === 'VariableDeclarator') {\n    return node;\n  }\n\n  return null;\n}\n\nmodule.exports = getVariableDeclarator;\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "\n*/\nfunction isLineStartAndEndOnSameLine(node) {\n  return node.loc.start.line === node.loc.end.line;\n}\n\n/**\nChecks if the given node starts and ends on the same line\n@param {ASTNode} node The node to check\n@returns {boolean} Whether or not the block starts and ends on the same line\n*/\nfunction isLineStartAndEndOnSameLine(node) {\n  return node.loc.start.line === node.loc.end.line;\n}\n\n/**\nChecks if the given node starts and ends on the same line\n@param {ASTNode} node The node to check\n@returns {boolean} Whether or not the block starts and ends on the same line\n*/\nfunction isLineStartAndEndOnSameLine(node) {\n  return node.loc.start.line === node.loc.end.line;\n}\n\n/**\nChecks if the given node starts and ends on the same line\n@param {ASTNode} node The node to check\n@returns {boolean} Whether or not the block starts and ends on the same line\n*/\nfunction isLineStartAndEndOnSameLine(node) {\n  return node.loc.start.line === node.loc.end.line;\n}\n\n/**\nChecks if the given node starts and ends on",
        "\n*/\n\nvar firstObject = require('../lib/first-object');\n\nvar firstObjectNode = require('../lib/first-object-node');\n\nvar firstObjectNode2 = require('../lib/first-object-node2');\n\nvar firstObjectNode3 = require('../lib/first-object-node3');\n\nvar firstObjectNode4 = require('../lib/first-object-node4');\n\nvar firstObjectNode5 = require('../lib/first-object-node5');\n\nvar firstObjectNode6 = require('../lib/first-object-node6');\n\nvar firstObjectNode7 = require('../lib/first-object-node7');\n\nvar firstObjectNode8 = require('../lib/first-object-node8');\n\nvar firstObjectNode9 = require('../lib/first-object-node9');\n\nvar firstObjectNode10 = require('../lib/first-object-node10');\n\nvar firstObjectNode11 = require('../lib/first-object-node11');\n\nvar firstObjectNode12 = require('../lib/first-object-node12');\n\nvar firstObjectNode13 = require('../lib/first-object-node13');\n\nvar firstObjectNode14 = require('../lib/first-object-node14');\n\nvar first",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.management.impl;\n\nimport com.hazelcast.internal.management.ManagementService;\nimport com.hazelcast.internal.management.ManagementServiceContext;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl.ManagementServiceContextListener;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl.ManagementServiceContextListenerAdapter;\nimport com.hazelcast.internal.management.ManagementServiceContextImpl.ManagementServiceContextListenerAdapter.",
        "\n*/\nfunction isBlockStatement(node) {\n  return node.type === 'BlockStatement' || node.type === 'BlockStatementList';\n}\n\n/**\n@param {ASTNode} node node to test\n@returns {boolean} True if it or its body is a BlockStatement or not\n*/\nfunction isBlockStatementOrNot(node) {\n  return node.type === 'BlockStatement' || node.type === 'BlockStatementList';\n}\n\n/**\n@param {ASTNode} node node to test\n@returns {boolean} True if it or its body is a BlockStatement or not\n*/\nfunction isBlockStatementOrNot(node) {\n  return node.type === 'BlockStatement' || node.type === 'BlockStatementList';\n}\n\n/**\n@param {ASTNode} node node to test\n@returns {boolean} True if it or its body is a BlockStatement or not\n*/\nfunction isBlockStatementOrNot(node) {\n  return node.type === 'BlockStatement' || node.type === 'BlockStatementList';\n}\n\n/**\n@param {ASTNode} node node to test\n@returns {boolean} True if it or its body is a BlockStatement or not\n*/\nfunction isBlockStatementOrNot(node) {\n  return node.type === 'BlockStatement' || node.type === 'BlockStatementList",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.util.concurrent;\n\nimport com.hazelcast.internal.util.concurrent.operations.ConcurrentRemoveOperation;\nimport com.hazelcast.internal.util.concurrent.operations.ConcurrentRemoveOperation.Operation;\nimport com.hazelcast.internal.util.concurrent.operations.ConcurrentRemoveOperation.OperationType;\nimport com.hazelcast.internal.util.concurrent.operations.ConcurrentRemoveOperation.OperationType.RemoveOperationType;\nimport com.hazelcast.internal.util.concurrent.operations.Concurrent",
        " the result of the check\n*/\n\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar astUtils = require('../ast-utils');\nvar ast",
        "\n*/\nfunction getExpectedIndentation(node, switchIndent) {\n  switch (node.type) {\n    case \"SwitchStatement\":\n      return switchIndent;\n    case \"CaseStatement\":\n      return getExpectedIndentation(node.body, switchIndent);\n    default:\n      return 0;\n  }\n}\n\n/**\nReturns the expected indentation for the case statement\n@param {ASTNode} node node to examine\n@param {int} [switchIndent] indent for switch statement\n@returns {int} indent size\n*/\nfunction getExpectedIndentation(node, switchIndent) {\n  switch (node.type) {\n    case \"SwitchStatement\":\n      return getExpectedIndentation(node.body, switchIndent);\n    case \"CaseStatement\":\n      return getExpectedIndentation(node.body, switchIndent);\n    default:\n      return 0;\n  }\n}\n\n/**\nReturns the expected indentation for the case statement\n@param {ASTNode} node node to examine\n@param {int} [switchIndent] indent for switch statement\n@returns {int} indent size\n*/\nfunction getExpectedIndentation(node, switchIndent) {\n  switch (node.type) {\n    case \"SwitchStatement\":\n      return getExpectedIndentation(node.body, switchIndent);\n    case \"CaseStatement\":\n      return getExpectedIndentation",
        "\n@returns {Promise} Promise\n@api public\n*/\nexports.create = function(name, attributes, callback) {\n  var factory = new Factory(name, attributes);\n  return factory.save(callback);\n};\n\n/**\n@param {String} Factory name\n@param {Object} Custom attributes [optional]\n@param {Function} Callback\n@returns {Promise} Promise\n@api public\n*/\nexports.update = function(name, attributes, callback) {\n  var factory = new Factory(name, attributes);\n  return factory.save(callback);\n};\n\n/**\n@param {String} Factory name\n@param {Object} Custom attributes [optional]\n@param {Function} Callback\n@returns {Promise} Promise\n@api public\n*/\nexports.delete = function(name, callback) {\n  var factory = new Factory(name);\n  return factory.save(callback);\n};\n\n/**\n@param {String} Factory name\n@param {Object} Custom attributes [optional]\n@param {Function} Callback\n@returns {Promise} Promise\n@api public\n*/\nexports.find = function(name, attributes, callback) {\n  var factory = new Factory(name);\n  return factory.save(callback);\n};\n\n/**\n@param {String} Factory name\n@param {Object} Custom",
        " (optional)\n@param {Function} Seed model\n@api public\n@module factory\n*/\n\nmodule.exports = function factory(type, seed) {\n  var factory = {};\n\n  if (type) {\n    factory[type] = seed;\n  } else {\n    factory.create = seed;\n  }\n\n  return factory;\n};\n",
        "\n@api public\n*/\n\nfunction createMultiple(factory, num, callback) {\n  var factoryName = factory.split('.')[0];\n  var factory = require(factoryName);\n\n  var factoryInstance = factory(num);\n\n  factoryInstance.create(function(err, record) {\n    if (err) {\n      callback(err);\n    } else {\n      callback(null, record);\n    }\n  });\n}\n\nmodule.exports = createMultiple;\n",
        "Element\n*/\nexport function hasUnit(size, units) {\n  return size.hasOwnProperty('unit') && units === size.unit;\n}\n\n/**\nTest if size has a unit, otherwise appends the passed unit string, or the default for this Element.\n@param size {Object} The size to set\n@param units {String} The units to append to a numeric size value\n@private\n*/\nexport function hasUnitOrDefault(size, units) {\n  return hasUnit(size, units) || hasUnitOrDefault(size.default, units);\n}\n\n/**\nTest if size has a unit, otherwise appends the passed unit string, or the default for this Element.\n@param size {Object} The size to set\n@param units {String} The units to append to a numeric size value\n@private\n*/\nexport function hasUnitOrDefault(size, units) {\n  return hasUnit(size, units) || hasUnitOrDefault(size.default, units);\n}\n\n/**\nTest if size has a unit, otherwise appends the passed unit string, or the default for this Element.\n@param size {Object} The size to set\n@param units {String} The units to append to a numeric size value\n@private\n*/\nexport function hasUnitOrDefault(size, units) {\n  return hasUnit(size,",
        ";}\n\n@param {Number} height\n@return {Number}\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n@example\n",
        ".\n\nCopyright (c) 2009, John Hannum\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the author nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQU",
        "\n@api public\n@param {Object} [options]\n@param {Object} [options.cache]\n@param {Object} [options.cache.max]\n@param {Object} [options.cache.max.size]\n@param {Object} [options.cache.max.max]\n@param {Object} [options.cache.max.max.size]\n@param {Object} [options.cache.max.max.max]\n@param {Object} [options.cache.max.max.max.size]\n@param {Object} [options.cache.max.max.max.max]\n@param {Object} [options.cache.max.max.max.max.size]\n@param {Object} [options.cache.max.max.max.max.max]\n@param {Object} [options.cache.max.max.max.max.max.size]\n@param {Object} [options.cache.max.max.max.max.max.size]\n@param {Object} [options.cache.max.max.max.max.max.size]\n@param {Object} [options.cache.max.max.max.max.max.size]\n@param {Object} [options.cache.max.max.max.max.max.size]\n@param",
        " function\n@api public\n*/\n\nmodule.exports = function(type, fn) {\n  if (typeof type !== 'string') {\n    throw new Error('type must be a string');\n  }\n  if (typeof fn !== 'function') {\n    throw new Error('fn must be a function');\n  }\n  return {\n    type: type,\n    fn: fn\n  };\n};\n",
        " function\n@api public\n*/\n\nmodule.exports = function(name, fns) {\n  if (typeof fns === 'function') {\n    fns = [fns];\n  }\n  if (Array.isArray(fns)) {\n    fns = fns.map(function(fn) {\n      return require(fn);\n    });\n  }\n  return fns.map(function(fn) {\n    return require(name + '/' + fn);\n  });\n};\n",
        ".compose\n@api public\n*/\n\nvar compose = require('./compose');\n\nmodule.exports = compose;\n",
        "\n@param {String} name The name of the group to activate\n@param {Boolean} [active] True to activate the group, false to deactivate it\n@param {Function} [callback] The callback function to call when the group is active\n@param {Object} [scope] The scope to call the callback function in\n@param {Boolean} [scope.active] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled.disabled.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled.disabled.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled.disabled.disabled.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled.disabled.disabled.disabled] True to activate the group, false to deactivate it\n@param {Boolean} [scope.active.disabled.disabled",
        ".\n*/\nfunction submitValue() {\n  return document.getElementById('value').value;\n}\n\n/**\nReturns the value that would be included in a standard form submit for this field.\n\n@return {String} The value to be submitted, or the value of the field.\n*/\nfunction submitValueAsText() {\n  return document.getElementById('value').value;\n}\n\n/**\nReturns the value that would be included in a standard form submit for this field.\n\n@return {String} The value to be submitted, or the value of the field.\n*/\nfunction submitValueAsHtml() {\n  return document.getElementById('value').value;\n}\n\n/**\nReturns the value that would be included in a standard form submit for this field.\n\n@return {String} The value to be submitted, or the value of the field.\n*/\nfunction submitValueAsTextArea() {\n  return document.getElementById('value').value;\n}\n\n/**\nReturns the value that would be included in a standard form submit for this field.\n\n@return {String} The value to be submitted, or the value of the field.\n*/\nfunction submitValueAsHtmlArea() {\n  return document.getElementById('value').value;\n}\n\n/**\nReturns the value that would be included in a standard form submit for this field.\n\n@",
        ".\n*/\nfunction transpileES6(content, options) {\n  return new Promise((resolve, reject) => {\n    const transpiler = new Traceur.Transpiler(options);\n    transpiler.compile(content, (err, result) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  });\n}\n\nmodule.exports = transpileES6;\n",
        ".\n*/\nfunction processTextfield(textfield) {\n    var value = textfield.value;\n    if (textfield.mode === 'normal') {\n        return value;\n    }\n    if (textfield.mode === 'regular-expression') {\n        return value.replace(/\\s/g, '');\n    }\n    return null;\n}\n\n/**\n * @param {String} textfield The textfield to process.\n * @param {String} mode The mode of the textfield.\n * @return {String} The value to process or null if the textfield value is blank or invalid.\n */\nfunction processTextfieldWithProtectedRegexp(textfield, mode) {\n    var value = textfield.value;\n    if (textfield.mode === 'normal') {\n        return value;\n    }\n    if (textfield.mode === 'regular-expression') {\n        return value.replace(/\\s/g, '');\n    }\n    return null;\n}\n\n/**\n * @param {String} textfield The textfield to process.\n * @param {String} mode The mode of the textfield.\n * @return {String} The value to process or null if the textfield value is blank or invalid.\n */\nfunction processTextfieldWithProtectedRegexpAndRegex(textfield, mode) {",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input",
        ".\n\n@param {Array} rows The rows to select.\n@param {Function} callback The callback to call when the selection is finished.\n@param {Object} [options] The options object.\n@param {String} [options.row] The row to select.\n@param {String} [options.column] The column to select.\n@param {String} [options.direction] The direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.directionDirection] The direction direction to select.\n@param {String} [options.",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades",
        ".\n@returns {Object} An object with config options.\n@example\nvar layer = new Layer({\n    name: 'Layer 1',\n    type: 'Layer',\n    config: {\n        title: 'Layer 1',\n        description: 'Layer 1 description',\n        type: 'Layer',\n        url: 'http://example.com/layer1',\n        type: 'Layer',\n        url: 'http://example.com/layer2',\n        type: 'Layer',\n        url: 'http://example.com/layer3',\n        type: 'Layer',\n        url: 'http://example.com/layer4',\n        type: 'Layer',\n        url: 'http://example.com/layer5',\n        type: 'Layer',\n        url: 'http://example.com/layer6',\n        type: 'Layer',\n        url: 'http://example.com/layer7',\n        type: 'Layer',\n        url: 'http://example.com/layer8',\n        type: 'Layer',\n        url: 'http://example.com/layer9',\n        type: 'Layer',\n        url: 'http://example.com/layer10',\n        type: 'Layer',\n        url: 'http://example.com/layer11',\n        type: 'Layer',\n",
        "\n\n# I worked on this challenge [by myself, with: ].\n\n# Pseudocode\n\n# Input: a list of integers\n# Output: a list of integers\n# Steps:\n\n# 1. Create a method that takes an array of integers as its input and returns a list of integers\n# 2. Create a method that takes an array of integers as its input and returns a list of integers\n# 3. Create a method that takes an array of integers as its input and returns a list of integers\n# 4. Create a method that takes an array of integers as its input and returns a list of integers\n# 5. Create a method that takes an array of integers as its input and returns a list of integers\n# 6. Create a method that takes an array of integers as its input and returns a list of integers\n# 7. Create a method that takes an array of integers as its input and returns a list of integers\n# 8. Create a method that takes an array of integers as its input and returns a list of integers\n# 9. Create a method that takes an array of integers as its input and returns a list of integers\n# 10. Create a method that takes an array of integers as its input and returns a list of integers\n# 11. Create a method that takes an array of integers as its input and returns a list of integers\n# 12. Create a method that takes an",
        "\n@param config the config object\n@param configPath the absolute path of the config file\n@param configFilename the absolute path of the config file\n@param configFilenameExt the extension of the config file\n@param configFilenameExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilenameExtExtExt the extension of the config file\n@param configFilename",
        "container\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contianer definition block\nout - ouput stream\n\n\nbuild the container\nsystem - the system definition\ncdef - contian",
        " container\n\n#!/usr/bin/env python\n\n#\n# Copyright (c) 2015, Frappe Technologies and contributors\n# For license information, please see license.txt\n#\n\nimport frappe\nimport os\nimport sys\nimport time\nimport subprocess\nimport os.path\nimport shutil\nimport tempfile\nimport shutil\nimport os\nimport os.path\nimport shutil\nimport shutil\nimport os\nimport shutil\nimport shutil\nimport os\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport shutil\nimport",
        "\n@throws {TypeError} when one of these arguments is not of an expected type.\n@param {Function} fn\n@param {Function|undefined} cb\n@param {Object} matcher\n@return {Error}\n@throws {TypeError} when one of these arguments is not of an expected type.\n@param {Function} fn\n@param {Function|undefined} cb\n@param {Object} matcher\n@return {Error}\n@throws {TypeError} when one of these arguments is not of an expected type.\n@param {Function} fn\n@param {Function|undefined} cb\n@param {Object} matcher\n@return {Error}\n@throws {TypeError} when one of these arguments is not of an expected type.\n@param {Function} fn\n@param {Function|undefined} cb\n@param {Object} matcher\n@return {Error}\n@throws {TypeError} when one of these arguments is not of an expected type.\n@param {Function} fn\n@param {Function|undefined} cb\n@param {Object} matcher\n@return {Error}\n@throws {TypeError} when one of these arguments is not of an expected type.\n@param {Function} fn\n@param {Function|undefined} cb\n@param {Object} matcher\n@return {Error}\n@throws {TypeError} when one of these arguments is not of an expected type",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse",
        "\n\n    def self.run(command)\n      command = command.to_s\n      if command.include?('/')\n        command = command.split('/')\n        command.shift\n      end\n      command = command.join(' ')\n      command = command.split(' ')\n      command.each do |command|\n        command = command.to_sym\n        if Shell.commands.include?(command)\n          Shell.commands[command].call\n        else\n          puts \"Unknown command: #{command}\"\n        end\n      end\n    end\n\n    def self.shell_commands\n      Shell.commands.keys\n    end\n\n    def self.shell_commands_for(command)\n      Shell.commands[command]\n    end\n\n    def self.shell_commands_for_command(command)\n      Shell.commands[command]\n    end\n\n    def self.shell_commands_for_command_name(command)\n      Shell.commands[command.to_sym]\n    end\n\n    def self.shell_commands_for_command_name_and_args(command, args)\n      Shell.commands[command.to_sym] = args\n    end\n\n    def self.shell_commands_for_command_name_and_args_and_options(command, args",
        ".\n*/\nfunction registerListener(name, callBack) {\n  var listener = {\n    name: name,\n    callBack: callBack\n  };\n  listeners[name] = listener;\n  return listener;\n}\n\n/**\nRemoves a listener of the specified message.\n\n@param {string} name - The name of the message.\n@return {undefined.\n*/\nfunction unregisterListener(name) {\n  delete listeners[name];\n}\n\n/**\nReturns the list of registered listeners.\n\n@return {object} An object containing the name of the listener and the\nfunction that will be invoked when the specified message is sent.\n*/\nfunction getListeners() {\n  return listeners;\n}\n\n/**\nReturns the number of registered listeners.\n\n@return {number} The number of registered listeners.\n*/\nfunction getListenerCount() {\n  return listeners.length;\n}\n\n/**\nReturns the number of registered listeners.\n\n@return {undefined.\n*/\nfunction clearListeners() {\n  listeners = {};\n}\n\n/**\nReturns the number of registered listeners.\n\n@return {undefined.\n*/\nfunction clearListenerCount() {\n  listeners = {};\n}\n\n/**\nReturns the number of registered listeners.\n\n@return {undefined.\n*/\nfunction clearListeners() {\n ",
        " the callback function to deliver results\n@param {Object}    options          the options object\n@param {Function}  callback.success  the callback function to deliver results\n@param {Function}  callback.error    the callback function to deliver results\n@param {Object}    options.assetPath  the asset path from sass\n@param {Object}    options.registeredAssets  registered assets from sass\n@param {Object}    options.callback  the callback function to deliver results\n@param {Object}    options.options     the options object\n@param {Object}    options.options.success  the callback function to deliver results\n@param {Object}    options.options.error    the callback function to deliver results\n@param {Object}    options.options.options  the options object\n@param {Object}    options.options.options.success  the callback function to deliver results\n@param {Object}    options.options.options.error    the callback function to deliver results\n@param {Object}    options.options.options.options  the options object\n@param {Object}    options.options.options.options  the options object\n@param {Object}    options.options.options.options  the options object\n@param {Object}    options.options.options.options  the options object\n@param {Object}    options.options.options.options ",
        "\n*/\n\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar fs = require('fs');\nvar path = require('path');\nvar fs = require('fs');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require('lodash');\nvar _ = require",
        "\n@param {object} [options] Options\n@param {string} [options.url] CouchDB base URL (or use protocol + host + port)\n@param {string} [options.protocol=http] CouchDB protocol (http|https)\n@param {string} [options.host=http://localhost] CouchDB host\n@param {number} [options.port=5984] CouchDB port\n@param {string} [options.db=openamagent] CouchDB database name\n@param {object} [options.auth] CouchDB auth credentials\n@param {string} [options.auth.username] CouchDB user name\n@param {string} [options.auth.password] CouchDB password\n@param {number} [options.expireAfterSeconds=60] Expiration time in seconds\n\n@example\nvar couchDBCache = new CouchDBCache({\nhost: 'db.example.com',\nport: 5984,\nauth: {\nusername: 'admin',\npassword: 'secret123'\n},\nexpireAfterSeconds: 600\n});\n\n@constructor\n@param {object} [options] Options\n@param {string} [options.url] CouchDB base URL (or use protocol + host + port)\n@param {string} [options.protocol=http] CouchDB protocol (http|https)\n@param {string}",
        "\n\n    def test_get_simple_copy_of_an_object_with_a_simple_copy_of_method(self):\n        \"\"\"\n        Tests that a simple copy of an object with a simple copy of method works.\n        \"\"\"\n        obj = self.get_simple_copy_of_an_object()\n        self.assertEqual(obj.foo, 'bar')\n\n    def test_get_simple_copy_of_an_object_with_a_simple_copy_of_method_with_an_object(self):\n        \"\"\"\n        Tests that a simple copy of an object with a simple copy of method works.\n        \"\"\"\n        obj = self.get_simple_copy_of_an_object()\n        self.assertEqual(obj.foo, 'bar')\n\n    def test_get_simple_copy_of_an_object_with_a_simple_copy_of_method_with_an_object_with_a_simple_copy_of_method(self):\n        \"\"\"\n        Tests that a simple copy of an object with a simple copy of method works.\n        \"\"\"\n        obj = self.get_simple_copy_of_an_object()\n        self.assertEqual(obj.foo, 'bar')\n\n    def test_get",
        " tree path\n@param  {String} rootFolder path to root folder\n@param  {String} rootFolderName name of root folder\n@param  {String} rootFolderType type of root folder\n@param  {String} rootFolderTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n@param  {String} rootFolderTypeTypeType type of root folder\n",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n    // `undefined` if not.\n    //\n    // @param {Object} obj\n    // @returns {Boolean}\n    // @example\n    //\n    //     var obj = {\n    //         field: 'value'\n    //     };\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n    //     var field = obj.field;\n    //     field.should.be.undefined;\n    //\n",
        "\n\n    def test_create_file(self):\n        \"\"\"\n        Test creating a file\n        \"\"\"\n        self.assertEqual(self.create_file('test.txt'), 'test.txt')\n\n    def test_create_file_with_ext(self):\n        \"\"\"\n        Test creating a file with ext\n        \"\"\"\n        self.assertEqual(self.create_file('test.txt', '.txt'), 'test.txt')\n\n    def test_create_file_with_ext_and_ext(self):\n        \"\"\"\n        Test creating a file with ext and ext\n        \"\"\"\n        self.assertEqual(self.create_file('test.txt', '.txt', '.txt'), 'test.txt')\n\n    def test_create_file_with_ext_and_ext_and_ext(self):\n        \"\"\"\n        Test creating a file with ext and ext and ext\n        \"\"\"\n        self.assertEqual(self.create_file('test.txt', '.txt', '.txt', '.txt'), 'test.txt')\n\n    def test_create_file_with_ext_and_ext_and_ext(self):\n        \"\"\"\n        Test creating a file with ext and ext and ext and ext\n        \"\"\"\n        self.assertEqual(self.create_file('test.txt",
        "@param {Function} fn The function to compose.\n@param {Function} [fn2] The function to compose.\n@returns {Function} The new function.\n@example\nvar compose = function(fn, fn2) {\n  return fn(fn2);\n};\n\nvar fn = compose(fn, fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn(fn);\nfn",
        ".\n@returns {Function} - Curried function.\n@example\nvar curryN = function(fn, executeArity) {\n  return function() {\n    var args = Array.prototype.slice.call(arguments);\n    var result = fn.apply(this, args);\n    if (executeArity > 0) {\n      if (result === undefined) {\n        throw new TypeError('Function returned undefined');\n      }\n      if (result === null) {\n        throw new TypeError('Function returned null');\n      }\n      if (result === false) {\n        throw new TypeError('Function returned false');\n      }\n      if (result === true) {\n        throw new TypeError('Function returned true');\n      }\n      if (result === 0) {\n        throw new TypeError('Function returned 0');\n      }\n      if (result === 1) {\n        throw new TypeError('Function returned 1');\n      }\n      if (result === 2) {\n        throw new TypeError('Function returned 2');\n      }\n      if (result === 3) {\n        throw new TypeError('Function returned 3');\n      }\n      if (result === 4) {\n        throw new TypeError('Function returned 4');\n      }\n      if (result === 5) {\n        throw new TypeError('Function returned 5');\n      }\n      if (",
        "}\n@example\nvar args = ['foo', 'bar', 'baz'];\nvar array = ['foo', 'bar', 'baz'];\narray.replace(args); // => ['foo', 'bar', 'baz']\narray.replace(args, 'foo'); // => ['foo', 'bar', 'baz']\narray.replace(args, 'foo', 'bar'); // => ['foo', 'bar', 'baz']\narray.replace(args, 'foo', 'bar', 'baz'); // => ['foo', 'bar', 'baz']\narray.replace(args, 'foo', 'bar', 'baz', 'qux'); // => ['foo', 'bar', 'baz', 'qux']\narray.replace(args, 'foo', 'bar', 'baz', 'qux', 'quux'); // => ['foo', 'bar', 'baz', 'qux', 'quux']\narray.replace(args, 'foo', 'bar', 'baz', 'qux', 'quux', 'quux'); // => ['foo', 'bar', 'baz', 'qux', 'quux', 'quux']\narray.replace(args, 'foo', 'bar', 'baz', 'qux', 'quux', 'quux', 'quux'); // =>",
        "\n@example\nvar obj = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    'NaN': NaN\n};\nvar className = sjl.classOf(obj);\nconsole.log(className); // 'Number'\n*/\n\nvar sjl = require('../sjl');\n\nmodule.exports = function(value) {\n    return sjl.classOf(value);\n};\n",
        "\n@param context {Object}\n@param callback {Function}\n@param thisArg {Object}\n@param thisArgValue {Object}\n@param thisArgIndex {Number}\n@param length {Number}\n@param thisArgValue {Object}\n@param thisArgIndex {Number}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object}\n@param thisArgValue {Object",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        ".\n@example\nvar sjl = sjl.implode([\n  'a',\n  'b',\n  'c',\n  'd',\n  'e',\n  'f',\n  'g',\n  'h',\n  'i',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'r',\n  's',\n  't',\n  'u',\n  'v',\n  'w',\n  'x',\n  'y',\n  'z'\n]);\nsjl.print();\n// [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z]\n\n@function module:sjl.join\n@param list {Array|Set|SjlSet} - Members to join.\n@param separator {String} - Separator to join members with.\n@returns {string} - Imploded string.  *Returns empty string if no members, to join, are found.\n@example\nvar sjl = sjl.join([\n  'a",
        ".\n*/\nfunction searchObj(ns_string, objToSearch) {\n    var ns_string = ns_string.toLowerCase();\n    var objToSearch = objToSearch.toLowerCase();\n    var objToSearch_obj = objToSearch;\n    var objToSearch_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n    var objToSearch_obj_obj_obj_obj = objToSearch;\n   ",
        ".\n*/\nfunction extend(o, p, deep) {\n  var i, len, key, val, v;\n  for (i = 0, len = p.length; i < len; i++) {\n    val = p[i];\n    if (val !== undefined && val !== null) {\n      if (deep) {\n        v = extend(o, val, deep);\n      } else {\n        v = o[val];\n      }\n      if (v !== undefined && v !== null) {\n        o[val] = v;\n      }\n    }\n  }\n  return o;\n}\n\nmodule.exports = extend;\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;",
        "\n@example\n\nvar extend = function(a, b) {\n  return a.extend(b);\n};\n\nextend(Object.create(null), {\n  extend: function(b) {\n    return this.extend(b);\n  }\n});\n\nextend(Object.create(null), {\n  extendWith: function(b) {\n    return this.extendWith(b);\n  }\n});\n\nextend(Object.create(null), {\n  extend: function(b, c) {\n    return this.extend(b, c);\n  }\n});\n\nextend(Object.create(null), {\n  extendWith: function(b, c) {\n    return this.extendWith(b, c);\n  }\n});\n\nextend(Object.create(null), {\n  extend: function(b, c, d) {\n    return this.extend(b, c, d);\n  }\n});\n\nextend(Object.create(null), {\n  extendWith: function(b, c, d) {\n    return this.extendWith(b, c, d);\n  }\n});\n\nextend(Object.create(null), {\n  extend: function(b, c, d, e) {\n    return this.extend(b, c, d,",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n@example\nvar x = sjl.throwTypeErrorIfEmpty('x', 'y', 'z');\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\nx();\n",
        "\n@returns {*} - Value if it is set and of type else returns `defaultValue`.\n@example\nvar value = 'Hello World';\nvar defaultValue = 'Hello World';\nvar type = 'String';\nvar result = sjl.valueOrDefault(value, defaultValue, type);\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String');\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String', 'String');\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String', 'String', 'String');\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String', 'String', 'String', 'String');\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String', 'String', 'String', 'String', 'String');\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String', 'String', 'String', 'String', 'String', 'String');\n// => 'Hello World'\nvar result = sjl.valueOrDefault(value, defaultValue, type, 'String', 'String', 'String', 'String', 'String',",
        "\n@example\nvar obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n  d: 4,\n  e: 5,\n  f: 6,\n  g: 7,\n  h: 8,\n  i: 9,\n  j: 10,\n  k: 11,\n  l: 12,\n  m: 13,\n  n: 14,\n  o: 15,\n  p: 16,\n  q: 17,\n  r: 18,\n  s: 19,\n  t: 20,\n  u: 21,\n  v: 22,\n  w: 23,\n  x: 24,\n  y: 25,\n  z: 26,\n  a: 1,\n  b: 2,\n  c: 3,\n  d: 4,\n  e: 5,\n  f: 6,\n  g: 7,\n  h: 8,\n  i: 9,\n  j: 10,\n  k: 11,\n  l: 12,\n  m: 13,\n  n: 14,\n  o: 15,\n  p: 16,\n  q: 17,\n  r: 18,\n  s: 19,\n  t: 20,\n  u: 21,\n  v: 22,\n  w",
        ".\n*/\nexport function setNamespaceString(ns_string, objToSearch, valueToSet) {\n  if (typeof valueToSet === 'undefined') {\n    return objToSearch[ns_string];\n  }\n  Object.defineProperty(objToSearch, ns_string, {\n    configurable: true,\n    value: valueToSet\n  });\n  return valueToSet;\n}\n",
        " of the original string with the modified character within it\n@example\nvar found = sjl.lcaseFirst('hello world');\nfound('hello'); // => 'hello'\nfound('world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world'\nfound('hello world'); // => 'hello world",
        ".\n*/\nfunction extractBoolean(array, startOrEndBln) {\n  var start = array.indexOf(startOrEndBln);\n  var end = array.indexOf(startOrEndBln, start);\n  if (start === -1 || end === -1) {\n    return false;\n  }\n  return array[start] === startOrEndBln;\n}\n\nmodule.exports = extractBoolean;\n",
        "\n@example\nvar obj1 = {a:1, b:2, c:3};\nvar obj2 = {a:1, b:2, c:3};\nvar obj3 = {a:1, b:2, c:3};\nvar obj4 = {a:1, b:2, c:3};\nvar obj5 = {a:1, b:2, c:3};\nvar obj6 = {a:1, b:2, c:3};\nvar obj7 = {a:1, b:2, c:3};\nvar obj8 = {a:1, b:2, c:3};\nvar obj9 = {a:1, b:2, c:3};\nvar obj10 = {a:1, b:2, c:3};\nvar obj11 = {a:1, b:2, c:3};\nvar obj12 = {a:1, b:2, c:3};\nvar obj13 = {a:1, b:2, c:3};\nvar obj14 = {a:1, b:2, c:3};\nvar obj15 = {a:1, b:2, c:3};\nvar obj16 = {a:1, b:2, c:3};\nvar obj17 = {a:",
        ".\n*/\nsjl.stdlib.Config.prototype.set = function(keyOrNsKey, value) {\n  if (typeof keyOrNsKey === 'string') {\n    this.set(keyOrNsKey, value);\n  } else {\n    this.set(keyOrNsKey.key, value);\n  }\n  return this;\n};\n\n/**\n@method sjl.stdlib.Config#get\n@param keyOrNsKey {String}\n@returns {*}\n*/\nsjl.stdlib.Config.prototype.get = function(keyOrNsKey) {\n  if (typeof keyOrNsKey === 'string') {\n    return this.get(keyOrNsKey);\n  } else {\n    return this.get(keyOrNsKey.key);\n  }\n};\n\n/**\n@method sjl.stdlib.Config#has\n@param keyOrNsKey {String}\n@returns {Boolean}\n*/\nsjl.stdlib.Config.prototype.has = function(keyOrNsKey) {\n  if (typeof keyOrNsKey === 'string') {\n    return this.has(keyOrNsKey);\n  } else {\n    return this.has(keyOrNsKey.key);\n  }\n};\n\n/**\n@method sj",
        "}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {*}\n@method sjl.stdlib.Iterator#next\n@param {*} value\n@returns {",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.set;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.SetGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.internal.nio.Connection;\nimport com.hazelcast.internal.serialization.Data;\nimport com.hazelcast.internal.serial",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "(SjlMap)\n*/\n\n#include \"SjlMap.h\"\n\n#include <sstream>\n#include <string>\n#include <vector>\n\n#include \"SjlException.h\"\n#include \"SjlString.h\"\n#include \"SjlNumber.h\"\n#include \"SjlBoolean.h\"\n#include \"SjlArray.h\"\n#include \"SjlMap.h\"\n#include \"SjlObject.h\"\n#include \"SjlArray.h\"\n#include \"SjlObject.h\"\n#include \"SjlArray.h\"\n#include \"SjlObject.h\"\n#include \"SjlArray.h\"\n#include \"SjlObject.h\"\n#include \"SjlArray.h\"\n#include \"SjlObject.h\"\n#include \"SjlArray.h\"\n#include \"SjlObject.h\"\n#include \"SjlObject.h\"\n#include \"SjlObject.h\"\n#include \"SjlObject.h\"\n#include \"SjlObject.h\"\n#include \"SjlObject.h\"\n#include \"SjlObject.h\"\n#include \"S",
        ".\n@method sjl.stdlib.PriorityList#next\n@overrides sjl.stdlib.Iterator#next\n@param {*|sjl.stdlib.PriorityList} pointer - The item to be returned.\n@returns {*|sjl.stdlib.PriorityList} - Returns `pointer` key in result only while `done` is `false`.\n@method sjl.stdlib.PriorityList#next\n@overrides sjl.stdlib.Iterator#next\n@param {*|sjl.stdlib.PriorityList} pointer - The item to be returned.\n@returns {*|sjl.stdlib.PriorityList} - Returns `pointer` key in result only while `done` is `false`.\n@method sjl.stdlib.PriorityList#next\n@overrides sjl.stdlib.Iterator#next\n@param {*|sjl.stdlib.PriorityList} pointer - The item to be returned.\n@returns {*|sjl.stdlib.PriorityList} - Returns `pointer` key in result only while `done` is `false`.\n@method sjl.stdlib.PriorityList#next\n@overrides sjl.stdlib.Iterator#next\n@param {*|sjl.stdlib.PriorityList} pointer - The item to be returned.\n@returns",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.internal.nio.Connection;\nimport com.hazelcast.internal.nio.ConnectionState;\nimport com.hazelcast.internal.protocol.ClientMessage;\nimport com.hazelcast.internal.protocol.codec.Map",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.internal.nio.Connection;\nimport com.hazelcast.internal.nio.ConnectionState;\nimport com.hazelcast.internal.protocol.ClientMessage;\nimport com.hazelcast.internal.protocol.codec.Map",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.n",
        ".\n@method sjl.stdlib.PriorityList#normalizePriority\n@param priority {Number}\n@method sjl.stdlib.PriorityList#incrementPriority\n@returns {Number}\n@method sjl.stdlib.PriorityList#incrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@returns {Number}\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#decrementPriority\n@method sjl.stdlib.PriorityList#",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.n",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse",
        ".\n*/\n\nvar AWS = require('aws-sdk');\nvar AWS_CONFIG = require('./aws-config');\nvar AWS_EC2 = require('aws-ec2');\nvar AWS_EC2_CONFIG = require('./aws-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS_EC2_EC2_CONFIG = require('./aws-ec2-ec2-config');\nvar AWS",
        "\n*/\nfunction buildParams(instanceState, identifier) {\n  if (identifier.indexOf(':') !== -1) {\n    return {\n      instanceId: identifier\n    };\n  }\n\n  if (identifier.indexOf('.') !== -1) {\n    return {\n      name: identifier\n    };\n  }\n\n  return {\n    instanceId: identifier\n  };\n}\n\nmodule.exports = buildParams;\n",
        "\n*/\nfunction doesInstanceExist(identifier, instanceState) {\n  var ec2 = require('ec2');\n  var instance = ec2.instances.get(identifier);\n  if (!instance) {\n    return false;\n  }\n  if (instanceState === 'running') {\n    return instance.state === 'running';\n  }\n  if (instanceState === 'stopped') {\n    return instance.state === 'stopped';\n  }\n  if (instanceState === 'destroyed') {\n    return instance.state === 'destroyed';\n  }\n  return true;\n}\n\nmodule.exports = doesInstanceExist;\n",
        "\n@param logger - logger object\n@param loggerFactory - logger factory object\n@param loggerFactoryOptions - logger factory options\n@param loggerFactoryOptions.level - logger level\n@param loggerFactoryOptions.formatter - logger formatter\n@param loggerFactoryOptions.formatter.dateFormat - logger formatter date format\n@param loggerFactoryOptions.formatter.timeFormat - logger formatter time format\n@param loggerFactoryOptions.formatter.datetimeFormat - logger formatter datetime format\n@param loggerFactoryOptions.formatter.dateTimeFormat - logger formatter dateTime format\n@param loggerFactoryOptions.formatter.timeTimeFormat - logger formatter timeTime format\n@param loggerFactoryOptions.formatter.datetimeFormat - logger formatter dateTimeFormat\n@param loggerFactoryOptions.formatter.timeFormat - logger formatter timeFormat\n@param loggerFactoryOptions.formatter.datetimeFormat - logger formatter dateTimeFormat\n@param loggerFactoryOptions.formatter.dateTimeFormat - logger formatter dateTimeFormat\n@param loggerFactoryOptions.formatter.timeFormat - logger formatter timeFormat\n@param loggerFactoryOptions.formatter.datetimeFormat - logger formatter dateTimeFormat\n@param loggerFactoryOptions.formatter.timeFormat - logger formatter timeFormat\n@param loggerFactoryOptions.formatter.datetimeFormat - logger formatter dateTimeFormat\n@param loggerFactoryOptions.formatter.timeFormat - logger formatter timeFormat\n@param loggerFactoryOptions.formatter.datetimeFormat - logger formatter dateTimeFormat\n@param loggerFactoryOptions",
        "\n    end\n\n    def self.included(base)\n      base.extend ClassMethods\n    end\n\n    module ClassMethods\n      def self.included(base)\n        base.extend ClassMethods\n      end\n\n      def self.included_modules\n        @included_modules ||= []\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules\n        @included_modules ||= []\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n      def included_modules=(modules)\n        @included_modules = modules\n      end\n\n",
        "\n*/\nfunction createClient(host, port, concurrent, frequency, duration, gen, iteration) {\n  var client = new WebSocket(host + ':' + port);\n  client.onopen = function() {\n    console.log('Connected to ' + host + ':' + port);\n    client.send('hello');\n    client.send('world');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('bye');\n    client.send('",
        "\n\n    // Convert JSON to XML\n    var xml = new XML();\n    xml.load(data);\n    return xml;\n  }\n\n  // Convert XML to JSON\n  var json = new JSON();\n  json.load(data);\n  return json;\n}\n\n// Convert JSON to XML\nfunction convertJSONToXML(data) {\n  // Convert JSON to XML\n  var xml = new XML();\n  xml.load(data);\n  return xml;\n}\n\n// Convert XML to JSON\nfunction convertXMLToJSON(xml) {\n  // Convert XML to JSON\n  var json = new JSON();\n  json.load(xml);\n  return json;\n}\n\n// Convert JSON to XML\nfunction convertJSONToXML(data) {\n  // Convert JSON to XML\n  var xml = new XML();\n  xml.load(data);\n  return xml;\n}\n\n// Convert XML to JSON\nfunction convertXMLToJSON(data) {\n  // Convert XML to JSON\n  var json = new JSON();\n  json.load(data);\n  return json;\n}\n\n// Convert JSON to XML\nfunction convertJSONToXML(data) {\n  // Convert JSON to XML\n  var xml = new XML();\n  xml.load(data);\n  return xml;\n}",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api public\n@api",
        "\n@api private\n*/\nmodule.exports = function (err, files) {\n  if (err) {\n    return err;\n  }\n\n  files.forEach(function (file) {\n    if (file.kju) {\n      return;\n    }\n\n    if (file.type === 'kju') {\n      return;\n    }\n\n    if (file.type === 'js') {\n      return;\n    }\n\n    if (file.type === 'css') {\n      return;\n    }\n\n    if (file.type === 'html') {\n      return;\n    }\n\n    if (file.type === 'json') {\n      return;\n    }\n\n    if (file.type === 'txt') {\n      return;\n    }\n\n    if (file.type === 'xml') {\n      return;\n    }\n\n    if (file.type === 'jsonp') {\n      return;\n    }\n\n    if (file.type === 'json') {\n      return;\n    }\n\n    if (file.type === 'txt') {\n      return;\n    }\n\n    if (file.type === 'xml') {\n      return;\n    }\n\n    if (file.type === 'jsonp",
        "\n@returns {Array}\n@api private\n*/\nfunction readFile(file, index, files) {\n  var reader = new FileReader();\n  reader.onload = function(e) {\n    files[index] = e.target.result;\n  };\n  reader.readAsText(file);\n}\n\n/**\n@param {String} file\n@param {Number} index\n@param {Array} files\n@api private\n*/\nfunction processFile(file, index, files) {\n  var data = files[index];\n  var lines = data.split('\\n');\n  var processed = [];\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n    if (line.length > 0) {\n      processed.push(line);\n    }\n  }\n  return processed;\n}\n\n/**\n@param {String} file\n@param {Number} index\n@param {Array} files\n@api private\n*/\nfunction processFileWithIndex(file, index, files) {\n  var data = files[index];\n  var lines = data.split('\\n');\n  var processed = [];\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i",
        "\n    #\n    # @param [String] str\n    # @return [String]\n    def self.hex(str)\n      str.to_s.hex.to_s\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.hex_to_bin(str)\n      str.to_s.hex.to_s\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.hex_to_hex(str)\n      str.to_s.hex.to_s\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.hex_to_bin(str)\n      str.to_s.hex.to_s\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.hex_to_hex_to_bin(str)\n      str.to_s.hex.to_s\n    end\n\n    #\n    # @param [String] str\n    # @return [String]\n    def self.hex_to_bin_to_hex(str)\n      str.to_s.hex.to",
        "\n    if (typeof module === 'object' && module.exports) {\n        module.exports = detect;\n    } else if (typeof define === 'function' && define.amd) {\n        define(detect);\n    } else {\n        detect();\n    }\n}(this));\n",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Command, self).__init__(*args, **kwargs)\n        self.help = \"\"\"\nUsage: %prog [options]\n\nOptions:\n  -h, --help          Show this help message.\n  -v, --version       Show version.\n  -v, --version-info Show version information.\n  -v, --version-info-full Show version information and full version.\n  -v, --version-info-full-dev Show version information and full version and dev.\n  -v, --version-info-dev Show version information and full version and dev.\n  -v, --version-info-dev-dev Show version information and full version and dev and dev.\n  -v, --version-info-dev-dev Show version information and full version and dev and dev and dev.\n  -v, --version-info-dev-dev Show version information and full version and dev and dev and dev.\n  -v, --version-info-dev-dev Show version information and full version and dev and dev and dev and dev.\n  -v, --version-info-dev-dev Show version information and full version and dev and dev and dev and dev.\n  -v, --version-info-dev-dev Show version information and",
        "\n\n#include \"../src/js/js.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"../src/js/js_string.h\"\n\n#include \"../src/js/js_array.h\"\n#include \"../src/js/js_object.h\"\n#include \"../src/js/js_function.h\"\n#include \"../src/js/js_number.h\"\n#include \"../src/js/js_boolean.h\"\n#include \"../src/js/js_null.h\"\n#include \"../src/js/js_undefined.h\"\n\n#include \"../src/js/js_array.h\"\n#include \"../src/js/js_object.h\"\n#include \"../src/js/js_function.h\"\n#include \"../src/js/js_number.h\"\n#include \"../src/js/js_boolean.h\"\n#include \"../src/js/js_null.h\"\n#include \"../src/js/js_undefined.h\"\n\n#include \"../src/js/js_array.h\"\n#include \"../",
        "/*\n * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapRemoveOperation;\nimport com.hazelcast.",
        "\n*/\n\nvar AWS = require('aws-sdk');\nvar ELB = require('elb-sdk');\nvar utils = require('./utils');\n\nmodule.exports = function(elb, loadBalancerName) {\n  var client = new AWS.ELB();\n  var description = client.describeLoadBalancers({\n    LoadBalancerNames: [loadBalancerName]\n  });\n\n  return {\n    doesLoadBalancerExist: function() {\n      return !!description.LoadBalancerDescriptions.length;\n    }\n  };\n};\n",
        "\n\n    def test_set_file_to_empty_string(self):\n        self.assertEqual(set_file_to_empty_string(['a', 'b']), [])\n\n    def test_set_file_to_empty_list(self):\n        self.assertEqual(set_file_to_empty_list(['a', 'b']), [])\n\n    def test_set_file_to_empty_dict(self):\n        self.assertEqual(set_file_to_empty_dict(['a', 'b']), {})\n\n    def test_set_file_to_empty_list_with_empty_dict(self):\n        self.assertEqual(set_file_to_empty_list(['a', 'b', 'c']), [])\n\n    def test_set_file_to_empty_dict_with_empty_list(self):\n        self.assertEqual(set_file_to_empty_dict(['a', 'b', 'c', 'd']), {})\n\n    def test_set_file_to_empty_dict_with_empty_list_with_empty_dict(self):\n        self.assertEqual(set_file_to_empty_dict(['a', 'b', 'c', '",
        " tests.\n\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n# You can use the suite's suite() method to run tests and return results.\n#\n# Tests are executed once for each test method in the suite.\n",
        "\n@example\n\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./command');\n    var command = require('./",
        "\n\n    def __init__(self, name, errors):\n        self.name = name\n        self.errors = errors\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return \"<Error: %s>\" % self.name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __ne__(self, other):\n        return self.name != other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __repr__(self):\n        return \"<Error: %s>\" % self.name\n\n    def __str__(self):\n        return \"<Error: %s>\" % self.name\n\n    def __repr__(self):\n        return \"<Error: %s>\" % self.name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __ne__(self, other):\n        return self.name != other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __repr__(self):\n        return \"<Error: %s>\" % self.name\n\n    def __str__(self):\n        return",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "\n@returns {Object} The result of the command\n@constructor\n*/\nfunction iterate(args, define) {\n  var body = args[0];\n  var amount = parseInt(args[1]);\n  var counter = 0;\n\n  while (counter < amount) {\n    body += ' ' + counter;\n    counter++;\n  }\n\n  return define(body);\n}\n\nmodule.exports = iterate;\n",
        "\n\n#include \"../include/event.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\n#include \"../include/event_internal.h\"\n\n#include \"../include/event_internal_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"../include/event_internal_private_private.h\"\n\n#include \"",
        "\n\n    # If the server side is not running, then we need to free the memory\n    # associated with the Python server side.\n    if not server_side:\n        free_memory(mappedVars)\n\n    # If the server side is running, then we need to free the memory\n    # associated with the Python server side.\n    if server_side:\n        server_side.close()\n\n    # If the server side is running, then we need to free the memory\n    # associated with the Python server side.\n    if server_side:\n        server_side.join()\n\n    # If the server side is running, then we need to free the memory\n    # associated with the Python server side.\n    if server_side:\n        server_side.join()\n\n    # If the server side is running, then we need to free the memory\n    # associated with the Python server side.\n    if server_side:\n        server_side.join()\n\n    # If the server side is running, then we need to free the memory\n    # associated with the Python server side.\n    if server_side:\n        server_side.join()\n\n    # If the server side is running, then we need to free the memory\n    # associated with the Python server side.\n    if server_side:\n       ",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_name;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "\n\n    # What is the difference between a local variable and a global variable?\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local_var = 1\n    #   global_var = 2\n    #\n    #   local",
        ".\n\nFor example, given the following cultsRegistry:\n\n[\n  {\n    \"name\": \"Cults\",\n    \"cults\": [\n      {\n        \"name\": \"Cult 1\",\n        \"cults\": [\n          {\n            \"name\": \"Cult 2\",\n            \"cults\": [\n              {\n                \"name\": \"Cult 3\",\n                \"cults\": [\n                  {\n                    \"name\": \"Cult 4\",\n                    \"cults\": [\n                      {\n                        \"name\": \"Cult 5\",\n                        \"cults\": [\n                          {\n                            \"name\": \"Cult 6\",\n                            \"cults\": [\n                              {\n                                \"name\": \"Cult 7\",\n                                \"cults\": [\n                                  {\n                                    \"name\": \"Cult 8\",\n                                    \"cults\": [\n                                      {\n                                        \"name\": \"Cult 9\",\n                                        \"cults\": [\n                                          {\n                                            \"name\": \"Cult 10\",\n                                            \"cults\": [\n                                            ]\n                                          }\n                                        ]\n                                      }\n                                    ]\n                                  }\n                                ]\n                              }\n                            ]\n                          }\n                        ]\n                      }\n                   ",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <time.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/wait.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include",
        "\n\n    def get_all_records(self):\n        \"\"\"\n        Get all records from the database.\n        \"\"\"\n        return self.db.query(self.table).all()\n\n    def get_record(self, id):\n        \"\"\"\n        Get a record from the database.\n        \"\"\"\n        return self.db.query(self.table).get(id)\n\n    def get_records(self, query):\n        \"\"\"\n        Get records from the database.\n        \"\"\"\n        return self.db.query(self.table).filter(query).all()\n\n    def get_records_count(self, query):\n        \"\"\"\n        Get records count from the database.\n        \"\"\"\n        return self.db.query(self.table).filter(query).count()\n\n    def get_records_by_id(self, id):\n        \"\"\"\n        Get records by id from the database.\n        \"\"\"\n        return self.db.query(self.table).filter(query).get(id)\n\n    def get_records_by_id_and_type(self, id, type):\n        \"\"\"\n        Get records by id and type from the database.\n        \"\"\"\n        return self.db.query(self.table).filter(query).get(id, type)\n\n   ",
        ".\n@param buf The buffer to store the value in.\n@param buflen The length of the buffer.\n@param vonly A boolean that forces only the value to be encoded.\n@return The number of bytes written to the buffer.\n*/\nint\nget_buffer(const void *obj, int buflen, int vonly)\n{\n\tint i;\n\tint len;\n\tint buf[2];\n\n\tif (vonly)\n\t\tbuf[0] = 0;\n\telse\n\t\tbuf[0] = 1;\n\n\tlen = get_buffer_len(obj, buflen);\n\tif (len > 0) {\n\t\tbuf[1] = 0;\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tbuf[1] |= (int)obj[i];\n\t\t}\n\t\treturn (buf[0] + buf[1]);\n\t}\n\treturn 0;\n}\n\n/*\nGet the length of the buffer for a key.\n\n@param obj The object representing the key and value.\n@param buf The buffer to store the value in.\n@param buflen The length of the buffer.\n@return The number of bytes written to the buffer.\n*/\nint\nget_buffer_len(const void *obj, int buflen",
        "\n\n\t// Get the current time\n\tnow := time.Now()\n\n\t// Get the current time in the past\n\tpast := now.Add(-1 * time.Hour)\n\n\t// Get the current time in the future\n\tfuture := now.Add(1 * time.Hour)\n\n\t// Get the current time in the past\n\tpastTime := past.Format(time.RFC3339)\n\n\t// Get the current time in the future\n\tfutureTime := future.Format(time.RFC3339)\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get the current time in the future\n\tfutureTime = futureTime[:0]\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get the current time in the past\n\tpastTime = pastTime[:0]\n\n\t// Get",
        "\n\n    // Get a value from the key buffer\n    // If the key buffer is empty, return the default value\n    // If the key buffer is not empty, return the value from the key buffer\n    // If the key buffer is empty, return the default value\n    // If the key buffer is not empty, return the value from the key buffer\n    // If the key buffer is empty, return the default value\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the key buffer is empty, return the value from the key buffer\n    // If the",
        "\n\n    // Get the current value of the buffer\n    //\n    // @return The current value of the buffer\n    //\n    // @see Buffer#get()\n    //\n    // @see Buffer#put()\n    //\n    // @see Buffer#put(int)\n    //\n    // @see Buffer#put(long)\n    //\n    // @see Buffer#put(float)\n    //\n    // @see Buffer#put(double)\n    //\n    // @see Buffer#put(char)\n    //\n    // @see Buffer#put(boolean)\n    //\n    // @see Buffer#put(char[])\n    //\n    // @see Buffer#put(char[][])\n    //\n    // @see Buffer#put(char[][][])\n    //\n    // @see Buffer#put(char[][][][][])\n    //\n    // @see Buffer#put(char[][][][][][][])\n    //\n    // @see Buffer#put(char[][][][][][][][][])\n    //\n    // @see Buffer#put(char[][][][][][][][][][])\n    //\n    // @see Buffer#put(char[][][][][][][][][][][])\n    //\n   ",
        ".\n\n@param buffer [NSString] The buffer to get the value from.\n@param key [NSString] The key to get the value from.\n@param value [NSString] The value to return.\n\n@return [NSString] The value of the key.\n*/\n- (NSString *)get:(NSString *)buffer key:(NSString *)key value:(NSString *)value;\n\n/**\nGet a value from a buffer.\n\n@param buffer [NSString] The buffer to get the value from.\n@param key [NSString] The key to get the value from.\n@param value [NSString] The value to return.\n\n@return [NSString] The value of the key.\n*/\n- (NSString *)get:(NSString *)buffer key:(NSString *)key value:(NSString *)value;\n\n/**\nGet a value from a buffer.\n\n@param buffer [NSString] The buffer to get the value from.\n@param key [NSString] The key to get the value from.\n@param value [NSString] The value to return.\n@param defaultValue [NSString] The default value to return if the key is not found.\n\n@return [NSString] The value of the key.\n*/\n- (NSString *",
        "\n    // and return the first string in the array.\n    //\n    // If the array is empty, return null.\n    //\n    // If the array is not empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is not empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array is empty, return the first string in the array.\n    //\n    // If the array",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Buffer, self).__init__(*args, **kwargs)\n        self.buffer = []\n\n    def append(self, value):\n        self.buffer.append(value)\n\n    def get(self):\n        return self.buffer.pop()\n\n    def __len__(self):\n        return len(self.buffer)\n\n    def __getitem__(self, index):\n        return self.buffer[index]\n\n    def __setitem__(self, index, value):\n        self.buffer[index] = value\n\n    def __delitem__(self, index):\n        del self.buffer[index]\n\n    def __delslice__(self, start, stop):\n        self.buffer[:start] = self.buffer[stop:]\n\n    def __contains__(self, value):\n        return value in self.buffer\n\n    def __iter__(self):\n        return iter(self.buffer)\n\n    def __len__(self):\n        return len(self.buffer)\n\n    def __repr__(self):\n        return \"Buffer(%s)\" % \", \".join(str(v) for v in self.buffer)\n\n    def __str__(self):\n       ",
        "\n\n    // Get the current value of the buffer\n    //\n    // @return The current value of the buffer\n    //\n    // @see Buffer::get()\n    //\n    // @see Buffer::set()\n    //\n    // @see Buffer::clear()\n    //\n    // @see Buffer::size()\n    //\n    // @see Buffer::capacity()\n    //\n    // @see Buffer::fill()\n    //\n    // @see Buffer::fill_n()\n    //\n    // @see Buffer::fill_n_from()\n    //\n    // @see Buffer::fill_n_from_to()\n    //\n    // @see Buffer::fill_n_from_to_n()\n    //\n    // @see Buffer::fill_n_from_to_n_from()\n    //\n    // @see Buffer::fill_n_from_to_n_from_to()\n    //\n    // @see Buffer::fill_n_from_to_n_from_to()\n    //\n    // @see Buffer::fill_n_from_to_n_from_to()\n    //\n    // @see Buffer::fill_n_from_to_n_from_to()\n    //\n    // @see Buffer::fill_n_from",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Concatenate, self).__init__(*args, **kwargs)\n        self.input = None\n        self.output = None\n\n    def _get_input(self):\n        if self.input is None:\n            self.input = self.get_input()\n        return self.input\n\n    def _set_input(self, input):\n        self.input = input\n\n    def _get_output(self):\n        if self.output is None:\n            self.output = self.get_output()\n        return self.output\n\n    def _set_output(self, output):\n        self.output = output\n\n    def get_input(self):\n        return self._get_input()\n\n    def get_output(self):\n        return self._get_output()\n\n    def get_output_length(self):\n        return len(self.get_output())\n\n    def get_output_string(self):\n        return str(self.get_output())\n\n    def get_output_bytes(self):\n        return bytes(self.get_output())\n\n    def get_output_bytes_length(self):\n        return len(self.get_output())\n\n",
        "\n\n    def test_length_encoding(self):\n        \"\"\"\n        Test that the length encoding works.\n        \"\"\"\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assertEqual(len(b'abc'), len(b'abc'))\n        self.assert",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n*/\nfunction GoogleCheckout() {\n  var self = this;\n\n  self.merchantCalculations = new MerchantCalculations();\n\n  return self;\n}\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations = new MerchantCalculations();\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations.prototype = new MerchantCalculations.prototype;\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations.prototype.constructor = GoogleCheckout;\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations.prototype.constructor = GoogleCheckout;\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations.prototype.constructor = GoogleCheckout;\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations.prototype.constructor = GoogleCheckout;\n\n/**\n * MerchantCalculations prototype\n *\n * @type {Object}\n */\nGoogleCheckout.prototype.merchantCalculations.",
        ".\n*/\nfunction getConfigValue(value, configData) {\n    var value = configData.get(value);\n    if (value === undefined) {\n        return value;\n    }\n    return value;\n}\n\n/**\n@param {String} value Configuration value\n@param {Object} configData Container object\n@return {String} String.\n*/\nfunction getConfigValueWithTemplate(value, configData) {\n    var value = configData.get(value);\n    if (value === undefined) {\n        return value;\n    }\n    return value.replace(/\\{\\{(.*?)\\}\\}/g, function (match, key) {\n        return key;\n    });\n}\n\n/**\n@param {String} value Configuration value\n@param {Object} configData Container object\n@return {String} String.\n*/\nfunction getConfigValueWithTemplateWithTemplate(value, configData) {\n    var value = configData.get(value);\n    if (value === undefined) {\n        return value;\n    }\n    return value.replace(/\\{\\{(.*?)\\}\\}/g, function (match, key) {\n        return key + ' ' + getConfigValueWithTemplate(key, configData);\n    });\n}\n\n/**\n@param {String} value Configuration value\n@param {Object} configData Container object\n@return {String} String.\n*/",
        "\n*/\nfunction getValue(object, path) {\n  var value = object[path];\n  if (value === undefined) {\n    return null;\n  }\n  if (typeof value === 'string') {\n    return JSON.parse(value);\n  }\n  return value;\n}\n\n/**\n@param {Object} object Container object\n@param {String} path Path, delimited by dots\n@return {Object} value\n*/\nfunction getValueByPath(object, path) {\n  var value = object[path];\n  if (value === undefined) {\n    return null;\n  }\n  if (typeof value === 'string') {\n    return JSON.parse(value);\n  }\n  return value;\n}\n\n/**\n@param {Object} object Container object\n@param {String} path Path, delimited by dots\n@return {Object} value\n*/\nfunction getValueByPathAndType(object, path, type) {\n  var value = object[path];\n  if (value === undefined) {\n    return null;\n  }\n  if (typeof value === 'string') {\n    return JSON.parse(value);\n  }\n  if (typeof value === type) {\n    return value;\n  }\n  return value;\n}\n\n/**\n@param {Object} object Container object",
        ".\n\nvar test = require('tape');\nvar dom = require('../lib/dom');\n\ntest('should return false when the node is not attached to another DOM node', function (t) {\n  t.plan(1);\n  var node = document.createElement('div');\n  node.innerHTML = '<div></div>';\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement('div'));\n  node.appendChild(document.createElement",
        ".\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the function that will be replaced with the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found, return the replacement function.\n\nIf the bug is not found, return the original function.\n\nIf the bug is found",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input",
        "\n    // \u5220\u9664\u6570\u636e\n    $.ajax({\n        url: '/admin/delete',\n        type: 'POST',\n        data: {\n            id: id\n        },\n        success: function (data) {\n            if (data.status == 'success') {\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal').modal('hide');\n                $('#modal",
        "\n\n    def test_get_url_for_route_without_params(self):\n        \"\"\"\n        Test that the get_url_for_route() method returns the correct url\n        for a route without a params.\n        \"\"\"\n        url = self.get_url_for_route('foo')\n        self.assertEqual(url, '/foo')\n\n    def test_get_url_for_route_with_params(self):\n        \"\"\"\n        Test that the get_url_for_route() method returns the correct url\n        for a route with a params.\n        \"\"\"\n        url = self.get_url_for_route('foo', params={'param': 'value'})\n        self.assertEqual(url, '/foo?param=value')\n\n    def test_get_url_for_route_with_params_and_query(self):\n        \"\"\"\n        Test that the get_url_for_route() method returns the correct url\n        for a route with a params and query.\n        \"\"\"\n        url = self.get_url_for_route('foo', params={'param': 'value'}, query={'query': 'value'})\n        self.assertEqual(url, '/foo?param=value&query=value')\n\n    def test_get_url_",
        "\n\n#include \"../include/common.h\"\n\n#include \"../include/common/util.h\"\n\n#include \"../include/common/log.h\"\n\n#include \"../include/common/string.h\"\n\n#include \"../include/common/array.h\"\n\n#include \"../include/common/hash.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/common/listmap.h\"\n\n#include \"../include/common/hashset.h\"\n\n#include \"../include/common/listset.h\"\n\n#include \"../include/common/hashsetmap.h\"\n\n#include \"../include/common/listsetmap.h\"\n\n#include \"../include/common/hashset.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/",
        "\n*/\nfunction getValueByKey(key) {\n  return this.get(key);\n}\n\n/**\nSet value by key\n\n@param {KeyItem} key\n@param {String|Object} value\n*/\nfunction setValueByKey(key, value) {\n  return this.set(key, value);\n}\n\n/**\nRemove value by key\n\n@param {KeyItem} key\n*/\nfunction removeValueByKey(key) {\n  return this.remove(key);\n}\n\n/**\nGet all values by key\n\n@param {KeyItem} key\n@returns {Array}\n*/\nfunction getAllValuesByKey(key) {\n  return this.getAll(key);\n}\n\n/**\nGet all values by key\n\n@param {KeyItem} key\n@returns {Array}\n*/\nfunction getAllValuesByKey(key) {\n  return this.getAll(key);\n}\n\n/**\nGet all values by key\n\n@param {KeyItem} key\n@returns {Array}\n*/\nfunction getAllValuesByKey(key) {\n  return this.getAll(key);\n}\n\n/**\nGet all values by key\n\n@param {KeyItem} key\n@returns {Array}\n*/\nfunction getAllValuesByKey(key) {\n  return this.getAll(key);\n}",
        "\n*/\nfunction getValueByKey(key) {\n  return process.env[key];\n}\n\n/**\n* Get value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {String|undefined}\n*/\nfunction getValueByKeyOrUndefined(key) {\n  return getValueByKey(key) || undefined;\n}\n\n/**\n* Get value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {String|null}\n*/\nfunction getValueByKeyOrNull(key) {\n  return getValueByKey(key) || null;\n}\n\n/**\n* Get value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {Number}\n*/\nfunction getValueByKeyOrNumber(key) {\n  return getValueByKey(key) || 0;\n}\n\n/**\n* Get value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {Boolean}\n*/\nfunction getValueByKeyOrBoolean(key) {\n  return getValueByKey(key) || false;\n}\n\n/**\n* Get value by key, the value must be exist, otherwise the process will exit.\n\n@param",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n*/\nfunction getObjectValue(key) {\n  return require('./getObjectValue')(key);\n}\n\n/**\nGet object value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {Object}\n*/\nfunction getObjectValueByKey(key) {\n  return require('./getObjectValueByKey')(key);\n}\n\n/**\nGet object value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {Object}\n*/\nfunction getObjectValueByKey(key) {\n  return require('./getObjectValueByKey')(key);\n}\n\n/**\nGet object value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {Object}\n*/\nfunction getObjectValueByKey(key) {\n  return require('./getObjectValueByKey')(key);\n}\n\n/**\nGet object value by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@returns {Object}\n*/\nfunction getObjectValueByKey(key) {\n  return require('./getObjectValueByKey')(key);\n}\n\n/**\nGet object value by key, the value must",
        "\n*/\nfunction getFilePath(key, onlyCheckDirectory=false) {\n  if (onlyCheckDirectory) {\n    return path.join(process.cwd(), key.path);\n  }\n  return path.join(process.cwd(), key.path);\n}\n\n/**\nGet file path by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@param {Boolean} [onlyCheckDirectory=false] If set true, only check whether the directory that the file saved is exist.\n@returns {String}\n*/\nfunction getFilePathSync(key, onlyCheckDirectory=false) {\n  if (onlyCheckDirectory) {\n    return path.join(process.cwd(), key.path);\n  }\n  return path.join(process.cwd(), key.path);\n}\n\n/**\nGet file path by key, the value must be exist, otherwise the process will exit.\n\n@param {KeyItem} key\n@param {Boolean} [onlyCheckDirectory=false] If set true, only check whether the directory that the file saved is exist.\n@returns {String}\n*/\nfunction getFilePathSyncSync(key, onlyCheckDirectory=false) {\n  if (onlyCheckDirectory) {\n    return path.join(process.cwd(), key.path);\n  }\n",
        "\n@example\n\n    var path = require('path');\n    var dir = path.dirname(__filename);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, true);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, false);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, true, true);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, false, true);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, true, false);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, false, false);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, true, false, false);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, false, false, false);\n    console.log(dir);\n\n    // or\n\n    var dir = path.dirname(__filename, true, false, false, false);",
        "\n@example\n\n    var url = require('url');\n    url.parse('http://www.google.com');\n    url.parse('http://www.google.com/foo');\n    url.parse('http://www.google.com/foo/bar');\n    url.parse('http://www.google.com/foo/bar/baz');\n    url.parse('http://www.google.com/foo/bar/baz/qux');\n    url.parse('http://www.google.com/foo/bar/baz/qux/quux');\n    url.parse('http://www.google.com/foo/bar/baz/qux/quux/quux');\n    url.parse('http://www.google.com/foo/bar/baz/qux/quux/quux/quux');\n    url.parse('http://www.google.com/foo/bar/baz/qux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/quux/qu",
        "\n@param {String} value The value of the variable\n@param {String} type The type of the variable\n@param {String} description The description of the variable\n@param {String} [description_type] The type of the description\n@param {String} [description_format] The format of the description\n@param {String} [description_format_type] The type of the description\n@param {String} [description_format_format] The format of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type] The type of the description\n@param {String} [description_format_format_type]",
        "\n    #\n    # @param [String] url\n    # @param [Hash] options\n    # @option options [String] :data\n    # @option options [String] :data_type\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type_options\n    # @option options [String] :data_type",
        ":\n    print(\"Please enter a number.\")\n    input = raw_input()\n    if input == \"1\":\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\n# Your Own Code\ndef main():\n    print(\"What is your name?\")\n    name = raw_input()\n    print(\"What is your age?\")\n    age = raw_input()\n    print(\"What is your gender?\")\n    gender = raw_input()\n    print(\"What is your age?\")\n    age = age.lower()\n    gender = gender.lower()\n    print(\"What is your age?\")\n    age = age.upper()\n    gender = gender.upper()\n    print(\"What is your age?\")\n    age = age.lower()\n    gender = gender.lower()\n    print(\"What is your age?\")\n    age = age.upper()\n    gender = gender.upper()\n    print(\"What is your age?\")\n    age = age.lower()\n    gender = gender.lower()\n    print(\"What is your age?\")\n    age = age.upper()\n    gender = gender.upper()\n    print(\"What is your age?\")\n    age = age.lower()\n    gender = gender.lower()\n    print(\"What is your age",
        " formatted\n*/\nfunction formatError(e) {\n  var stack = e.stack.split('\\n');\n  var formatted = [];\n  for (var i = 0; i < stack.length; i++) {\n    var line = stack[i].split('\\t');\n    var functionCall = line[0];\n    var file = line[1];\n    var lineNumber = line[2];\n    var functionName = line[3];\n    var lineNumber = line[4];\n    var functionNameWithoutFunctionCall = functionName.replace(/^function/, '');\n    var functionNameWithoutFile = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutLine = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutFunctionCallWithoutFile = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutLineWithoutFile = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutLineWithoutFunctionCall = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutLineWithoutFunctionCallWithoutFile = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutLineWithoutFunctionCallWithoutFile = functionNameWithoutFunctionCall.replace(/^function/, '');\n    var functionNameWithoutLineWithoutFunctionCallWithoutFile = functionNameWithoutFunctionCall.replace(/^",
        " formatted\n*/\nfunction formatError(e) {\n    var stack = e.stack.split('\\n');\n    var formatted = [];\n    for (var i = 0; i < stack.length; i++) {\n        var line = stack[i].split('\\t');\n        if (line.length > 1) {\n            formatted.push(line[0] + ' ' + line[1]);\n        }\n    }\n    return formatted;\n}\n\nfunction formatError(e) {\n    var stack = e.stack.split('\\n');\n    var formatted = [];\n    for (var i = 0; i < stack.length; i++) {\n        var line = stack[i].split('\\t');\n        if (line.length > 1) {\n            formatted.push(line[0] + ' ' + line[1]);\n        }\n    }\n    return formatted;\n}\n\nfunction formatError(e) {\n    var stack = e.stack.split('\\n');\n    var formatted = [];\n    for (var i = 0; i < stack.length; i++) {\n        var line = stack[i].split('\\t');\n        if (line.length > 1) {\n            formatted.push(line[0] + ' ' + line[",
        "\n\n    def test_get_all_instances(self):\n        \"\"\"\n        Tests the get_all_instances method.\n        \"\"\"\n        self.assertEqual(\n            self.get_all_instances(),\n            [\n                self.get_instance(1),\n                self.get_instance(2),\n                self.get_instance(3),\n                self.get_instance(4),\n                self.get_instance(5),\n                self.get_instance(6),\n                self.get_instance(7),\n                self.get_instance(8),\n                self.get_instance(9),\n                self.get_instance(10),\n                self.get_instance(11),\n                self.get_instance(12),\n                self.get_instance(13),\n                self.get_instance(14),\n                self.get_instance(15),\n                self.get_instance(16),\n                self.get_instance(17),\n                self.get_instance(18),\n                self.get_instance(19),\n                self.get_instance(20),\n                self.get_instance(21),\n                self.get_instance(22),\n                self.get_instance(23),\n                self.get_instance(24),\n                self.get_",
        "\n*/\nfunction getSourceCode(url) {\n  var domain = url.split('/').pop();\n  if (domain === 'www.google.com') {\n    return [\n      'var google = require(\"googleapis\");',\n      'google.load(\"visualization\", \"1\", function() {',\n      '  google.setOnLoadCallback(drawChart);',\n      '});',\n    ];\n  }\n  return [];\n}\n\nfunction drawChart(data) {\n  var chart = new google.visualization.LineChart(document.getElementById('chart'));\n  chart.draw(data, {\n    colors: ['#FF0000', '#00FF00', '#0000FF', '#00FFFF'],\n    series: [{\n      name: 'Time',\n      type: 'line',\n      data: [\n        '2014-01-01',\n        '2014-01-02',\n        '2014-01-03',\n        '2014-01-04',\n        '2014-01-05',\n        '2014-01-06',\n        '2014-01-07',\n        '2014-01-08',\n        '2014-01-09',\n        '2014-01-10',\n        '2014-01-11',",
        ".\n *\n * @param {string} name\n * @param {string} value\n * @param {function} callback\n */\nfunction set(name, value, callback) {\n  if (typeof name === 'function') {\n    callback = name;\n    name = '';\n  }\n  if (typeof value === 'function') {\n    callback = value;\n    value = '';\n  }\n  if (typeof callback === 'function') {\n    this.set(name, value, callback);\n  } else {\n    this.set(name, value);\n  }\n}\n\n/**\n * @param {string} name\n * @param {string} value\n * @param {function} callback\n */\nfunction remove(name, value, callback) {\n  if (typeof name === 'function') {\n    callback = name;\n    name = '';\n  }\n  if (typeof value === 'function') {\n    callback = value;\n    value = '';\n  }\n  if (typeof callback === 'function') {\n    this.remove(name, value, callback);\n  } else {\n    this.remove(name);\n  }\n}\n\n/**\n * @param {string} name\n * @param {string} value\n * @param {function} callback\n */\nfunction clear(name,",
        "\n\n    def test_write_tests(self):\n        \"\"\"\n        Tests that the prototype of objects used to write tests is the\n        prototype of the object used to write tests.\n        \"\"\"\n        self.assertEqual(self.test_write_tests.__name__, 'TestWriteTests')\n\n    def test_write_tests_with_arguments(self):\n        \"\"\"\n        Tests that the prototype of objects used to write tests is the\n        prototype of the object used to write tests.\n        \"\"\"\n        self.assertEqual(self.test_write_tests.__name__, 'TestWriteTests')\n\n    def test_write_tests_with_arguments_with_arguments(self):\n        \"\"\"\n        Tests that the prototype of objects used to write tests is the\n        prototype of the object used to write tests.\n        \"\"\"\n        self.assertEqual(self.test_write_tests.__name__, 'TestWriteTests')\n\n    def test_write_tests_with_arguments_with_arguments_with_arguments(self):\n        \"\"\"\n        Tests that the prototype of objects used to write tests is the\n        prototype of the object used to write tests.\n        \"\"\"\n        self.assertEqual(self.test_write_tests.__name__, 'TestWriteTests')\n\n    def test_",
        "\n\n    // Removes an item from an array\n    function remove(item) {\n        var index = this.indexOf(item);\n        if (index !== -1) {\n            this.splice(index, 1);\n        }\n    }\n\n    // Returns an array of items\n    function toArray() {\n        return this.slice(0);\n    }\n\n    // Returns an array of items\n    function toArrayWithIndex(index) {\n        return this.slice(index);\n    }\n\n    // Returns an array of items\n    function toArrayWithLength(length) {\n        return this.slice(0, length);\n    }\n\n    // Returns an array of items\n    function toArrayWithIndexAndLength(index, length) {\n        return this.slice(index, length);\n    }\n\n    // Returns an array of items\n    function toArrayWithIndexAndLengthAndLength(index, length, length) {\n        return this.slice(index, length, length);\n    }\n\n    // Returns an array of items\n    function toArrayWithIndexAndLengthAndLengthAndLength(index, length, length, length) {\n        return this.slice(index, length, length, length);\n    }\n\n    // Returns an array of items\n    function toArrayWithIndexAndLengthAndLengthAndLengthAndLength",
        " \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\" or \"assert\"\n\n- \"count\"",
        ".\n\n    :param line: The line number to get the column number for.\n    :type line: int\n    :param column: The column number to get the filename for.\n    :type column: int\n    :param filename: The filename to get the line number for.\n    :type filename: str\n    :returns: The line number, column number, and filename mapped from a file.\n    :rtype: tuple(int, int, str)\n    \"\"\"\n    return (line, column, filename)\n\n\ndef get_line_column_filename(line, column):\n    \"\"\"\n    Returns the line, column, and filename mapped from a line, column, and filename.\n\n    :param line: The line number to get the column number for.\n    :type line: int\n    :param column: The column number to get the filename for.\n    :type column: int\n    :returns: The line, column, and filename mapped from a file.\n    :rtype: tuple(int, int, str)\n    \"\"\"\n    return (line, column, None)\n\n\ndef get_line_column_filename_with_filename(line, column, filename):\n    \"\"\"\n    Returns the line, column, and filename mapped from a line, column, and filename.\n\n    :param line: The line number",
        " the actual lines of the call\n\t\telse, it finds the actual lines of the call\n\t\tend\n\tend\n\n\tdef get_actual_lines\n\t\tif multiLineSearch == true\n\t\t\tlines = []\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n\t\t\tlines << call.line\n",
        "\n    // the exception.\n    //\n    // If the exception is a runtime exception, the exception is wrapped in a runtime exception\n    // that has a stacktrace with a traceline.\n    //\n    // If the exception is a runtime exception that has a stacktrace with a traceline, the exception is\n    // wrapped in a runtime exception that has a stacktrace with a traceline.\n    //\n    // If the exception is a runtime exception that has a stacktrace with a traceline, the exception is\n    // wrapped in a runtime exception that has a stacktrace with a traceline.\n    //\n    // If the exception is a runtime exception that has a stacktrace with a traceline, the exception is\n    // wrapped in a runtime exception that has a stacktrace with a traceline.\n    //\n    // If the exception is a runtime exception that has a stacktrace with a traceline, the exception is\n    // wrapped in a runtime exception that has a stacktrace with a traceline.\n    //\n    // If the exception is a runtime exception that has a stacktrace with a traceline, the exception is\n    // wrapped in a runtime exception that has a stacktrace with a traceline.\n    //\n    // If the exception is a runtime exception that has a stacktrace with a traceline, the exception is\n    // wrapped in a runtime exception that has a stacktrace",
        "\n\n    // \u521d\u59cb\u5316\n    init();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // \u521d\u59cb\u5316\u5217\u8868\n    initList();\n\n    // ",
        ".\n*/\nexport default function delay(opts) {\n  return new TransformStream(opts);\n}\n",
        "\n@example\nvar obj = {\n  a: 1,\n  b: 2,\n  c: 3,\n  d: 4,\n  e: 5,\n  f: 6,\n  g: 7,\n  h: 8,\n  i: 9,\n  j: 10,\n  k: 11,\n  l: 12,\n  m: 13,\n  n: 14,\n  o: 15,\n  p: 16,\n  q: 17,\n  r: 18,\n  s: 19,\n  t: 20,\n  u: 21,\n  v: 22,\n  w: 23,\n  x: 24,\n  y: 25,\n  z: 26,\n  a: 1,\n  b: 2,\n  c: 3,\n  d: 4,\n  e: 5,\n  f: 6,\n  g: 7,\n  h: 8,\n  i: 9,\n  j: 10,\n  k: 11,\n  l: 12,\n  m: 13,\n  n: 14,\n  o: 15,\n  p: 16,\n  q: 17,\n  r: 18,\n  s: 19,\n  t: 20,\n  u: 21,\n  v: 22,\n  w",
        "\n    #\n    # @param [String] uuid\n    # @return [String]\n    def get_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single_single",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.",
        ".\n\n  Returns a new record with the same criteria as the current record.\n\n  If the current record has a criteria, it is returned.\n\n  If the current record does not have a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record does not have a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has a criteria, the current record is returned.\n\n  If the current record has",
        "\n\n  def initialize(hash)\n    @hash = hash\n  end\n\n  def add_type(type)\n    @hash[type] = true\n  end\n\n  def add_type_for(type)\n    @hash[type] = true\n  end\n\n  def remove_type(type)\n    @hash.delete(type)\n  end\n\n  def remove_type_for(type)\n    @hash.delete(type)\n  end\n\n  def to_s\n    @hash.to_s\n  end\n\n  def to_json\n    @hash.to_json\n  end\n\n  def to_yaml\n    @hash.to_yaml\n  end\n\n  def to_yaml_with_type(type)\n    @hash.to_yaml_with_type(type)\n  end\n\n  def to_yaml_with_type_for(type)\n    @hash.to_yaml_with_type(type)\n  end\n\n  def to_yaml_with_type_for_all(type)\n    @hash.to_yaml_with_type_for_all(type)\n  end\n\n  def to_yaml_with_type_for_all_with_type(type)\n    @hash.to_",
        ".\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function will be created and returned.\n\n\"type\" is optional. if omitted, a function",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        ".\n\nThis is a very simple example of how to use an iterable factory.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then iterate with state.\n\nThe iterable factory is a factory that allows you to iterate without state, and then",
        "\n@param {EventEmitter} target\n@param {Function} [callback]\n@param {Object} [context]\n@param {boolean} [isImmediate]\n@param {boolean} [isAsync]\n@param {boolean} [isWindow]\n@param {boolean} [isCustomEvent]\n@param {boolean} [isCustomEventTarget]\n@param {boolean} [isCustomEventTargetType]\n@param {boolean} [isCustomEventTargetScope]\n@param {boolean} [isCustomEventTargetScopeType]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScopeType]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTargetScopeScope]\n@param {boolean} [isCustomEventTarget",
        ".\n@param [scope] {string} The scope to use when parsing the statements inside the block.\n@param [block] {string} The block to parse.\n@returns {string} The parsed block.\n@example\nvar block = 'block';\nvar parser = new Parser(state, block);\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser.parse();\nparser",
        ".\n@param [scope] {string} The scope to use when parsing the statements inside the block.\n@param [block] {string} The block to parse.\n@param [blockEnd] {string} The block end to parse.\n@param [blockEndEnd] {string} The block end end to parse.\n@param [blockEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse.\n@param [blockEndEndEndEnd] {string} The block end end end to parse",
        ".\n*/\nfunction parseSemicolon(state, noError) {\n  var semicolon = state.next();\n  if (semicolon === null) {\n    if (noError) {\n      state.error('Missing semicolon');\n    }\n    return false;\n  }\n  state.next();\n  return true;\n}\n\n/**\nParses a semicolon or applies automatic semicolon insertion.\n@param state The parser state.\n@param [noError] {boolean} Whether a missing semicolon should cause an error.\n@returns {boolean} Whether the parsing or the insertion was successful.\n*/\nfunction parseSemicolonOrInsert(state, noError) {\n  var semicolon = state.next();\n  if (semicolon === null) {\n    if (noError) {\n      state.error('Missing semicolon');\n    }\n    return false;\n  }\n  state.next();\n  return true;\n}\n\n/**\nParses a semicolon or applies automatic semicolon insertion.\n@param state The parser state.\n@param [noError] {boolean} Whether a missing semicolon should cause an error.\n@returns {boolean} Whether the parsing or the insertion was successful.\n*/\nfunction parseSemicolonOrInsertOrInsert(state, noError) {\n  var semicolon = state.next();\n  if (semicolon === null) {\n",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $salt;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_id",
        "@returns {string}\n*/\nexport function query(config) {\n  const query = {};\n  Object.keys(config).forEach(key => {\n    query[key] = config[key];\n  });\n  return query.toString();\n}\n\n/**\nFunction returns string in ?q1=v1&q2=v2 format\nfrom passed config key-value pairs\n\n@param {Object} config\n@returns {string}\n*/\nexport function query2(config) {\n  const query = {};\n  Object.keys(config).forEach(key => {\n    query[key] = config[key];\n  });\n  return query.toString();\n}\n\n/**\nFunction returns string in ?q1=v1&q2=v2 format\nfrom passed config key-value pairs\n\n@param {Object} config\n@returns {string}\n*/\nexport function query3(config) {\n  const query = {};\n  Object.keys(config).forEach(key => {\n    query[key] = config[key];\n  });\n  return query.toString();\n}\n\n/**\nFunction returns string in ?q1=v1&q2=v2 format\nfrom passed config key-value pairs\n\n@param {Object} config\n@returns {string}\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\",
        "\n    #\n    # @param [String] path\n    #   The path to the file to write.\n    #\n    # @param [Hash] options\n    #   The options to pass to the writer.\n    #\n    # @option options [Boolean] :force\n    #   Whether to force the writer to write the file.\n    #\n    # @option options [Boolean] :overwrite\n    #   Whether to overwrite the file if it already exists.\n    #\n    # @option options [Boolean] :append\n    #   Whether to append the file to the end of the file.\n    #\n    # @option options [Boolean] :append_to\n    #   Whether to append the file to the end of the file.\n    #\n    # @option options [Boolean] :append_to_all\n    #   Whether to append the file to the end of the file.\n    #\n    # @option options [Boolean] :append_to_file\n    #   Whether to append the file to the end of the file.\n    #\n    # @option options [Boolean] :append_to_dir\n    #   Whether to append the file to the end of the file.\n    #\n    # @option options [Boolean] :append_to_file_path\n    #   Whether to append the file to",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n@api private\n*/\n\nvar fs = require('fs');\nvar path = require('path');\nvar exec = require('child_process').exec;\n\nvar js = fs.readFileSync(path.join(__dirname, 'js', 'main.js'), 'utf8');\nvar path = path.join(__dirname, 'js', 'main.js');\n\nvar module = exec('node ' + js + ' ' + path, function (error, stdout, stderr) {\n  if (error) {\n    console.log(error);\n    return;\n  }\n\n  console.log(stdout);\n});\n",
        " you can do so, and have a nice day!\n\n# I worked on this challenge [by myself, with: ].\n\n# 0. Pseudocode\n\n# Input: a string\n# Output: a string\n# Steps:\n\n# 1. Create a method that takes a string as its first argument and returns a string as its second argument\n# 2. Create a method that takes a string as its first argument and returns a string as its second argument\n# 3. Create a method that takes a string as its first argument and returns a string as its second argument\n# 4. Create a method that takes a string as its first argument and returns a string as its second argument\n# 5. Create a method that takes a string as its first argument and returns a string as its second argument\n# 6. Create a method that takes a string as its first argument and returns a string as its second argument\n# 7. Create a method that takes a string as its first argument and returns a string as its second argument\n# 8. Create a method that takes a string as its first argument and returns a string as its second argument\n# 9. Create a method that takes a string as its first argument and returns a string as its second argument\n# 10. Create a method that takes a string as its first argument and returns a string as its second argument\n# 11. Create a method that takes a string as its first",
        ".\n*/\nfunction getConfig(options, config) {\n  var dir = options.dir || 'config';\n  var env = options.env || 'staging';\n  var base = options.base || 'base';\n\n  if (config) {\n    return config;\n  }\n\n  var config = require(dir + '/config.js');\n\n  if (env === 'staging') {\n    config.staging = require(dir + '/staging/config.js');\n  }\n\n  if (env === 'base') {\n    config.base = require(dir + '/base/config.js');\n  }\n\n  return config;\n}\n\nmodule.exports = getConfig;\n",
        " object with values from another.\n@return {Object} The decorated config object.\n*/\nexport function decorate(object, values) {\n  return {\n    ...object,\n    ...values,\n  };\n}\n\n/**\nDecorate one configuration object with values from another.\n\n@param  {Object} object  An existing config object.\n@param  {Object} values  An overriding config object with values from another.\n@param  {Object} options  An options object with values from another.\n@return {Object} The decorated config object.\n*/\nexport function decorate(object, values, options) {\n  return {\n    ...object,\n    ...values,\n    ...options,\n  };\n}\n\n/**\nDecorate one configuration object with values from another.\n\n@param  {Object} object  An existing config object.\n@param  {Object} values  An overriding config object with values from another.\n@param  {Object} options  An options object with values from another.\n@param  {Object} options2  An options object with values from another.\n@return {Object} The decorated config object.\n*/\nexport function decorate(object, values, options, options2) {\n  return {\n    ...object,\n    ...values,\n    ...options,\n    ...options2,\n",
        ".\n@param  {Object} [options]  An object with options.\n@return {Object}             The object.\n@api public\n*/\n\nmodule.exports = function set (object, name, value, options) {\n  if (typeof value === 'undefined') {\n    return object;\n  }\n\n  if (typeof name === 'undefined') {\n    return object;\n  }\n\n  if (typeof options === 'undefined') {\n    return object;\n  }\n\n  if (typeof value === 'object') {\n    return object;\n  }\n\n  if (typeof value === 'string') {\n    return object[name] = value;\n  }\n\n  return object;\n};\n",
        ".\n*/\nfunction copy(sourceRef, copyRef, rc, copier) {\n  var source = sourceRef.value;\n  var copy = copyRef.value;\n  var copyLen = copy.length;\n  var copyLen2 = copyLen;\n  var copyLen3 = copyLen;\n  var copyLen4 = copyLen;\n  var copyLen5 = copyLen;\n  var copyLen6 = copyLen;\n  var copyLen7 = copyLen;\n  var copyLen8 = copyLen;\n  var copyLen9 = copyLen;\n  var copyLen10 = copyLen;\n  var copyLen11 = copyLen;\n  var copyLen12 = copyLen;\n  var copyLen13 = copyLen;\n  var copyLen14 = copyLen;\n  var copyLen15 = copyLen;\n  var copyLen16 = copyLen;\n  var copyLen17 = copyLen;\n  var copyLen18 = copyLen;\n  var copyLen19 = copyLen;\n  var copyLen20 = copyLen;\n  var copyLen21 = copyLen;\n  var copyLen22 = copyLen;\n  var copyLen23 = copyLen;\n  var copyLen24 = copyLen;\n  var copyLen25 = copyLen;\n  var copyLen26 = copyLen;",
        ".\n*/\nObject copy(Object sourceRef, Object copyRef, int rc) {\n  Object copy = sourceRef;\n  if (copyRef != null) {\n    copy = copyRef;\n  }\n  if (rc != 0) {\n    rc--;\n  }\n  return copy;\n}\n\n/**\n@function copy\n@param sourceRef A reference to the object source.\n@param copyRef A reference to the object copy.\n@param rc The current recurse and reference counter.\n@returns {Object} The reference to the object copy.\n*/\nObject copy(Object sourceRef, Object copyRef, int rc) {\n  Object copy = sourceRef;\n  if (copyRef != null) {\n    copy = copyRef;\n  }\n  if (rc != 0) {\n    rc--;\n  }\n  return copy;\n}\n\n/**\n@function copy\n@param sourceRef A reference to the object source.\n@param copyRef A reference to the object copy.\n@param rc The current recurse and reference counter.\n@returns {Object} The reference to the object copy.\n*/\nObject copy(Object sourceRef, Object copyRef, int rc) {\n  Object copy = sourceRef;\n  if (copyRef != null) {\n    copy = copyRef;\n  }\n ",
        ".\n*/\nfunction copySet(sourceRef, copyRef, rc) {\n  var source = sourceRef.get();\n  var copy = copyRef.get();\n  var copyCount = copy.size();\n  var sourceCount = source.size();\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount;\n  var sourceCount = sourceCount;\n  var copyCount = copyCount",
        ".\n*/\nfunction copyMap(sourceRef, copyRef, rc) {\n  var source = sourceRef.get();\n  var copy = copyRef.get();\n  var copyMap = new Map();\n  copyMap.set(source, copy);\n  rc.increment();\n  return copyMap;\n}\n\n/**\n@param sourceRef A reference to the map source.\n@param copyRef A reference to the map copy.\n@param rc The current recurse and reference counter.\n@returns {Map} The reference to the map copy.\n*/\nfunction copyMap(sourceRef, copyRef, rc) {\n  var source = sourceRef.get();\n  var copy = copyRef.get();\n  copy.set(source);\n  rc.increment();\n  return copy;\n}\n\n/**\n@param sourceRef A reference to the map source.\n@param copyRef A reference to the map copy.\n@param rc The current recurse and reference counter.\n@returns {Map} The reference to the map copy.\n*/\nfunction copyMap(sourceRef, copyRef, rc) {\n  var source = sourceRef.get();\n  var copy = copyRef.get();\n  copy.set(source);\n  rc.increment();\n  return copy;\n}\n\n/**\n@param sourceRef A reference to the",
        ".\n*/\nfunction copy(sourceRef, copyRef, rc) {\n  var source = sourceRef.value;\n  var copy = copyRef.value;\n  var copyLen = copy.length;\n  var sourceLen = source.length;\n  var copyLen = copy.length;\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var n;\n  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n  var u;\n  var v;\n  var w;\n  var x;\n  var y;\n  var z;\n  var a;\n  var b;\n  var c;\n  var d;\n  var e;\n  var f;\n  var g;\n  var h;\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  var n;\n  var o;\n  var p;\n  var q;\n  var r;\n  var s;\n  var t;\n  var u;\n  var v;\n  var w;\n  var x;\n  var y;\n  var z;\n  var a;\n  var b;\n  var",
        " the cloned item.\n*/\nfunction deepClone(origSource) {\n  return Object.assign({}, origSource);\n}\n\n/**\n* Creates a deep clone of the provided source.\n\n@param origSource The item to clone.\n@returns {any} The cloned item.\n*/\nfunction deepCloneWith(origSource) {\n  return Object.assign({}, origSource, {\n    children: deepCloneWith(origSource.children)\n  });\n}\n\n/**\n* Creates a deep clone of the provided source.\n\n@param origSource The item to clone.\n@returns {any} The cloned item.\n*/\nfunction deepCloneWithWith(origSource) {\n  return Object.assign({}, origSource, {\n    children: deepCloneWithWith(origSource.children)\n  });\n}\n\n/**\n* Creates a deep clone of the provided source.\n\n@param origSource The item to clone.\n@returns {any} The cloned item.\n*/\nfunction deepCloneWithWithWith(origSource) {\n  return Object.assign({}, origSource, {\n    children: deepCloneWithWithWith(origSource.children)\n  });\n}\n\n/**\n* Creates a deep clone of the provided source.\n\n@param origSource The item to clone.\n@returns {any} The cloned item",
        ".\n*/\nfunction compare(x, y, rc) {\n  if (x === y) {\n    return true;\n  }\n  if (x === null || y === null) {\n    return false;\n  }\n  if (x === undefined || y === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return false;\n  }\n  if (x === null || x === undefined) {\n    return",
        ".\n*/\nfunction equal(x, y) {\n  return x === y;\n}\n\n/**\n* @param {number} x The first item to compare.\n* @param {number} y The second item to compare.\n* @returns {boolean} An indication as to whether or not x and y were equal.\n*/\nfunction notEqual(x, y) {\n  return !equal(x, y);\n}\n\n/**\n* @param {number} x The first item to compare.\n* @param {number} y The second item to compare.\n* @returns {boolean} An indication as to whether or not x and y were equal.\n*/\nfunction greaterThan(x, y) {\n  return x > y;\n}\n\n/**\n* @param {number} x The first item to compare.\n* @param {number} y The second item to compare.\n* @returns {boolean} An indication as to whether or not x and y were equal.\n*/\nfunction greaterThanOrEqual(x, y) {\n  return x >= y;\n}\n\n/**\n* @param {number} x The first item to compare.\n* @param {number} y The second item to compare.\n* @returns {boolean} An indication as to whether or not x and y were equal.\n*/\n",
        ".\n*/\nexport function iterate(item, method, context) {\n  return item;\n}\n\n/**\n@method iterate\n@param {any} item The item over which to iterate.\n@param {Function} method The callback to execute for each iterated value.\n@param {any} context The optional context to pass to each callback.\n@returns {any} A reference to the original item.\n*/\nexport function iterate(item, method, context) {\n  return item;\n}\n\n/**\n@method iterate\n@param {any} item The item over which to iterate.\n@param {Function} method The callback to execute for each iterated value.\n@param {any} context The optional context to pass to each callback.\n@returns {any} A reference to the original item.\n*/\nexport function iterate(item, method, context) {\n  return item;\n}\n\n/**\n@method iterate\n@param {any} item The item over which to iterate.\n@param {Function} method The callback to execute for each iterated value.\n@param {any} context The optional context to pass to each callback.\n@returns {any} A reference to the original item.\n*/\nexport function iterate(item, method, context) {\n  return item;\n}\n\n/**\n@method iterate\n@param {any} item The item",
        ".\n*/\nfunction extend(val, y, rc) {\n    var x = val;\n    var y2 = y;\n    var rc2 = rc;\n    var x2 = x;\n    var x3 = x;\n    var x4 = x;\n    var x5 = x;\n    var x6 = x;\n    var x7 = x;\n    var x8 = x;\n    var x9 = x;\n    var x10 = x;\n    var x11 = x;\n    var x12 = x;\n    var x13 = x;\n    var x14 = x;\n    var x15 = x;\n    var x16 = x;\n    var x17 = x;\n    var x18 = x;\n    var x19 = x;\n    var x20 = x;\n    var x21 = x;\n    var x22 = x;\n    var x23 = x;\n    var x24 = x;\n    var x25 = x;\n    var x26 = x;\n    var x27 = x;\n    var x28 = x;\n    var x29 = x;\n    var x30 = x;\n    var x31 = x;\n    var x32 = x;\n    var x33 = x;\n    var x34 =",
        ".\n*/\nfunction isSmashed(x, y, rc) {\n  if (rc === 0) {\n    return x === y;\n  }\n  if (rc === 1) {\n    return x === y && x !== x;\n  }\n  if (rc === 2) {\n    return x === y && x !== x && x !== y;\n  }\n  if (rc === 3) {\n    return x === y && x !== x && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !== y && x !==",
        ".\n*/\nfunction extend(a, b) {\n  return a.slice(0, a.length + b.length);\n}\n\nmodule.exports = extend;\n",
        ".\n*/\nexport function extend(a, ...rest) {\n  return Object.assign({}, a, rest);\n}\n\n/**\n* Returns a new object with the properties of the provided object\n* extended onto the target.\n*\n* @param {any} a The target to be extended.\n* @param {...any} rest The tail items to extend onto the target.\n* @returns {any} A reference to the extended target.\n*/\nexport function extendDeep(a, ...rest) {\n  return Object.assign({}, a, rest);\n}\n\n/**\n* Returns a new object with the properties of the provided object\n* extended onto the target.\n*\n* @param {any} a The target to be extended.\n* @param {...any} rest The tail items to extend onto the target.\n* @returns {any} A reference to the extended target.\n*/\nexport function extendDeepDeep(a, ...rest) {\n  return Object.assign({}, a, rest);\n}\n\n/**\n* Returns a new object with the properties of the provided object\n* extended onto the target.\n*\n* @param {any} a The target to be extended.\n* @param {...any} rest The tail items to extend onto the target.\n* @returns {any} A reference to the extended target.\n",
        ".\n*/\nfunction smash(a, b) {\n  return a;\n}\n\nmodule.exports = smash;\n",
        ".\n*/\nexport function smash(a, ...rest) {\n  return a.map(rest.shift());\n}\n\n/**\n * Smashes the properties on the provided arguments into the first argument.\nAny properties on the tail arguments will overwrite\nany existing properties on the first argument.\n\n@param {any} a The target to be smashed.\n@param {...any} rest The tail items to smash onto the target.\n@returns {any} A reference to the smashed target.\n*/\nexport function smashAll(a, ...rest) {\n  return a.map(rest.shift());\n}\n\n/**\n * Smashes the properties on the provided arguments into the first argument.\nAny properties on the tail arguments will overwrite\nany existing properties on the first argument.\n\n@param {any} a The target to be smashed.\n@param {...any} rest The tail items to smash onto the target.\n@returns {any} A reference to the smashed target.\n*/\nexport function smashAllWith(a, ...rest) {\n  return a.map(rest.shift());\n}\n\n/**\n * Smashes the properties on the provided arguments into the first argument.\nAny properties on the tail arguments will overwrite\nany existing properties on the first argument.\n\n@param {any} a The target to be",
        "\n@param {Drive} parent The parent drive\n@param {Function} callback The callback to call when the file is loaded\n@param {Object} [options] The options to pass to the callback\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean} [options.async] Whether to wait for the file to load before returning\n@param {Boolean",
        "\n\n    /**\n     * @param {string} message\n     * @param {number} lineNumber\n     * @param {number} columnNumber\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {string} sourceURL\n     * @param {",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetOperationCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetOperationCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_name;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "\n\n    def get_source_iterable(self):\n        \"\"\"Yield all items in every iterable returned by the source iterable.\n\n        Yields all items in every iterable returned by the source iterable.\n        \"\"\"\n        for item in self.source_iterable:\n            yield item\n\n    def get_source_iterable_with_index(self, index):\n        \"\"\"Yield all items in every iterable returned by the source iterable with the given index.\n\n        Yields all items in every iterable returned by the source iterable with the given index.\n        \"\"\"\n        for item in self.source_iterable[index]:\n            yield item\n\n    def get_source_iterable_with_index_with_index(self, index, index2):\n        \"\"\"Yield all items in every iterable returned by the source iterable with the given index and index2.\n\n        Yields all items in every iterable returned by the source iterable with the given index and index2.\n        \"\"\"\n        for item in self.source_iterable[index, index2]:\n            yield item\n\n    def get_source_iterable_with_index_with_index_with_index(self, index, index2, index3):\n        \"\"\"Yield all items in every iterable returned by the source iterable with the given index and index2 and index3.\n\n        Yields all items in every iterable",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.internal.nio.Connection;\nimport com.hazelcast.internal.nio.ConnectionState;\nimport com.hazelcast.internal.protocol.ClientMessage;\nimport com.hazelcast.internal.protocol.codec.Map",
        "\n\n    def __iter__(self):\n        return iter(self)\n\n    def __len__(self):\n        return len(self)\n\n    def __contains__(self, item):\n        return item in self\n\n    def __contains_all__(self, items):\n        return all(item in self for item in items)\n\n    def __contains_any__(self, items):\n        return any(item in self for item in items)\n\n    def __contains_none__(self):\n        return not any(item in self for item in self)\n\n    def __iter__(self):\n        return iter(self)\n\n    def __len__(self):\n        return len(self)\n\n    def __contains__(self, item):\n        return item in self\n\n    def __contains_all__(self, items):\n        return all(item in self for item in items)\n\n    def __contains_any__(self, items):\n        return any(item in self for item in items)\n\n    def __contains_none__(self):\n        return not any(item in self for item in self)\n\n    def __iter__(self):\n        return iter(self)\n\n    def __len__(self):\n        return len(self)",
        ".\n\n# You may assume that the numbers in the set are in the range [1, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000, 1000, 1000, 1000].\n# You may assume that the numbers in the set are in the range [1, 1000",
        ".\n\n    If the iterable is empty, return an empty iterable.\n\n    If the iterable is not empty, return an iterable with the same elements as the iterable.\n\n    If the iterable is not empty, return an iterable with the same elements as the iterable, but with the same\n    elements in the same order.\n\n    If the iterable is not empty, return an iterable with the same elements as the iterable, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order, but with the same elements in the same order, but with the same\n    elements in the same order",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Fac",
        "\n    #\n    # @param [Array<Integer>] nums\n    # @return [Integer]\n    def random_order(nums)\n      nums.shuffle!\n      nums.sort!\n      nums.reverse!\n      nums.map! { |x| x % 2 }\n      nums.map! { |x| x % 3 }\n      nums.map! { |x| x % 5 }\n      nums.map! { |x| x % 7 }\n      nums.map! { |x| x % 9 }\n      nums.map! { |x| x % 11 }\n      nums.map! { |x| x % 13 }\n      nums.map! { |x| x % 17 }\n      nums.map! { |x| x % 19 }\n      nums.map! { |x| x % 23 }\n      nums.map! { |x| x % 29 }\n      nums.map! { |x| x % 31 }\n      nums.map! { |x| x % 37 }\n      nums.map! { |x| x % 41 }\n      nums.map! { |x| x % 43 }\n      nums.map! { |x| x % 47 }\n      nums.map! { |x| x % 53 }\n      nums.map! { |x|",
        " data\n*/\n\nvar data = [];\n\nvar i = 0;\n\nvar j = 0;\n\nvar k = 0;\n\nvar l = 0;\n\nvar m = 0;\n\nvar n = 0;\n\nvar o = 0;\n\nvar p = 0;\n\nvar q = 0;\n\nvar r = 0;\n\nvar s = 0;\n\nvar t = 0;\n\nvar u = 0;\n\nvar v = 0;\n\nvar w = 0;\n\nvar x = 0;\n\nvar y = 0;\n\nvar z = 0;\n\nvar a = 0;\n\nvar b = 0;\n\nvar c = 0;\n\nvar d = 0;\n\nvar e = 0;\n\nvar f = 0;\n\nvar g = 0;\n\nvar h = 0;\n\nvar i = 0;\n\nvar j = 0;\n\nvar k = 0;\n\nvar l = 0;\n\nvar m = 0;\n\nvar n = 0;\n\nvar o = 0;\n\nvar p = 0;\n\nvar q = 0;\n\nvar r = 0;\n\nvar s = 0;\n\nvar t = 0;\n\nvar u = 0;\n\nvar v = 0;\n\nvar w = 0;\n\n",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_description;\n\n    /**\n     * @ORM\\Column(type=\"string\",",
        "\n\n    def test_get_menu_item_with_no_menu_item(self):\n        menu = Menu()\n        menu.add_item(MenuItem('item1'))\n        menu.add_item(MenuItem('item2'))\n        menu.add_item(MenuItem('item3'))\n        menu.add_item(MenuItem('item4'))\n        menu.add_item(MenuItem('item5'))\n        menu.add_item(MenuItem('item6'))\n        menu.add_item(MenuItem('item7'))\n        menu.add_item(MenuItem('item8'))\n        menu.add_item(MenuItem('item9'))\n        menu.add_item(MenuItem('item10'))\n        menu.add_item(MenuItem('item11'))\n        menu.add_item(MenuItem('item12'))\n        menu.add_item(MenuItem('item13'))\n        menu.add_item(MenuItem('item14'))\n        menu.add_item(MenuItem('item15'))\n        menu.add_item(MenuItem('item16'))\n        menu.add_item(MenuItem('item17'))\n        menu.add_item(MenuItem('item18'))\n        menu.add_item(MenuItem('item19'))\n        menu.add_item(MenuItem('item20'))\n        menu.add_item(MenuItem('",
        "\n\n    def test_get_position_with_invalid_position(self):\n        self.assertRaises(ValueError, self.app.get_position, 'invalid')\n\n    def test_get_position_with_invalid_position_with_invalid_position(self):\n        self.assertRaises(ValueError, self.app.get_position, 'invalid', 'invalid')\n\n    def test_get_position_with_valid_position(self):\n        self.assertEqual(self.app.get_position('position'), 'position')\n\n    def test_get_position_with_valid_position_with_invalid_position(self):\n        self.assertRaises(ValueError, self.app.get_position, 'position', 'invalid')\n\n    def test_get_position_with_valid_position_with_valid_position(self):\n        self.assertEqual(self.app.get_position('position', 'position'), 'position')\n\n    def test_get_position_with_valid_position_with_invalid_position(self):\n        self.assertRaises(ValueError, self.app.get_position, 'position', 'invalid')\n\n    def test_get_position_with_valid_position_with_valid_position(self):\n        self.assertEqual",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;",
        ".\n\n    If the function returns a boolean, the function will return true or false.\n    If the function returns a number, the function will return the number of times the function was called.\n    If the function returns a string, the function will return the string of the function's name.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function, the function will return the function's return value.\n    If the function returns a function,",
        "\n    # @param [String] path\n    # @return [String]\n    def valid_path?(path)\n      path.length == 1 && path.start_with?('.')\n    end\n\n    # Returns the path to the unit in the namespace.\n    # @param [String] path\n    # @return [String]\n    def unit_path(path)\n      path.gsub('.', '/')\n    end\n\n    # Returns the path to the unit in the namespace.\n    # @param [String] path\n    # @return [String]\n    def unit_path_with_namespace(path)\n      path.gsub('/', '.')\n    end\n\n    # Returns the path to the unit in the namespace.\n    # @param [String] path\n    # @return [String]\n    def unit_path_without_namespace(path)\n      path.gsub('.', '/')\n    end\n\n    # Returns the path to the unit in the namespace.\n    # @param [String] path\n    # @return [String]\n    def unit_path_with_namespace_and_unit(path)\n      path.gsub('/', '.')\n    end\n\n    # Returns the path to the unit in the namespace.\n    # @param",
        "\n\n    // The following are the \"public\" API for this module.\n\n    /**\n     * @method\n     * @param {Object} options\n     * @param {Object} options.data\n     * @param {Object} options.data.id\n     * @param {Object} options.data.name\n     * @param {Object} options.data.description\n     * @param {Object} options.data.image\n     * @param {Object} options.data.image.url\n     * @param {Object} options.data.image.width\n     * @param {Object} options.data.image.height\n     * @param {Object} options.data.image.type\n     * @param {Object} options.data.image.quality\n     * @param {Object} options.data.image.quality.min\n     * @param {Object} options.data.image.quality.max\n     * @param {Object} options.data.image.quality.default\n     * @param {Object} options.data.image.quality.default.value\n     * @param {Object} options.data.image.quality.default.type\n     * @param {Object} options.data.image.quality.default.quality\n     * @param {Object} options.data.image.quality.default.",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades",
        "\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // \u521d\u59cb\u5316\u5217\u8868\n        mListView = (ListView) findViewById(R.id.listView);\n        mListView.setAdapter(new MyAdapter(this));\n\n        // \u521d\u59cb\u5316\u5217\u8868\u7684\u5207\u6362\u5668\n        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                // \u5207\u6362\u5230\u6307\u5b9a\u7684\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5217\u8868\n                mListView.setSelection(position);\n            }\n        });\n\n        // \u521d\u59cb\u5316\u5217\u8868\u7684\u5207\u6362\u5668\n        mListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {\n            @Override\n           ",
        ".\n\n// This file was generated by the CEF translator tool. If making changes by\n// hand only do so within the body of existing method and function\n// implementations. See the translator.README.txt file in the tools directory\n// for more information.\n//\n// $hash=f9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9d9",
        "\n@returns {boolean}\n@private\n*/\nfunction isDecl(node) {\n  return node.type === 'decl';\n}\n\n/**\nChecks if AST node is `BEM.decl` or `BEM.DOM.decl` call.\n\n@param {Object} node Mozilla Parser API node\n@returns {boolean}\n@private\n*/\nfunction isDeclCall(node) {\n  return node.type === 'decl' || node.type === 'DOM.decl';\n}\n\n/**\nChecks if AST node is `BEM.decl` or `BEM.DOM.decl` call.\n\n@param {Object} node Mozilla Parser API node\n@returns {boolean}\n@private\n*/\nfunction isDeclCallDOM(node) {\n  return node.type === 'DOM.decl' || node.type === 'DOM.DOM.decl';\n}\n\n/**\nChecks if AST node is `BEM.decl` or `BEM.DOM.decl` call.\n\n@param {Object} node Mozilla Parser API node\n@returns {boolean}\n@private\n*/\nfunction isDeclCallDOMDOM(node) {\n  return node.type === 'DOM.DOM.decl' || node.type === 'DOM.DOM.DOM.decl';\n}\n\n/**\nChecks if AST node is `",
        ".\n*/\nfunction bemEntityDescription(decl) {\n  var block = decl.block;\n  var mod = decl.mod;\n  var val = decl.val;\n\n  return {\n    block: block,\n    mod: mod,\n    val: val\n  };\n}\n\nmodule.exports = bemEntityDescription;\n",
        "\n@returns {*}\n@private\n*/\nfunction getObjectProperty(objNode, name) {\n  var prop = objNode.properties[name];\n  if (prop) {\n    return prop.value;\n  }\n  return null;\n}\n\n/**\nReturns a value of property by name from\ngiven object literal AST node\n\n@param {Object} objNode an AST node of an object literal\n(node.type is assumed to be equal to \"ObjectExpression\")\n@param {String} name a name of a property\n@returns {*}\n@private\n*/\nfunction getObjectPropertyByRef(objNode, name) {\n  var prop = objNode.properties[name];\n  if (prop) {\n    return prop.value;\n  }\n  return null;\n}\n\n/**\nReturns a value of property by name from\ngiven object literal AST node\n\n@param {Object} objNode an AST node of an object literal\n(node.type is assumed to be equal to \"ObjectExpression\")\n@param {String} name a name of a property\n@returns {*}\n@private\n*/\nfunction getObjectPropertyByRefOrRef(objNode, name) {\n  var prop = objNode.properties[name];\n  if (prop) {\n    return prop.value;\n  }\n  return null;\n}\n\n/**",
        " property expression\n@returns {String} the key value of the property expression\n@example\nvar key = require('./key');\nvar value = key('foo');\nconsole.log(value); // 'foo'\n*/\nmodule.exports = function key(propNode) {\n  var key = propNode.key;\n  if (typeof key === 'string') {\n    return key;\n  }\n  if (typeof key === 'number') {\n    return key;\n  }\n  if (typeof key === 'boolean') {\n    return key;\n  }\n  if (typeof key === 'object') {\n    return key.key;\n  }\n  if (typeof key === 'function') {\n    return key.name;\n  }\n  return key;\n};\n",
        ".\n@param {Object} d doclet property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} t template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.\n@param {Object} s template property, generated from\n`astNodeVisitor`. At this stage should already have\ndoclet property, which contains parsed docs.",
        "\n*/\nfunction isStaticDeclaration(node) {\n  return node.type === 'StaticDeclaration';\n}\n\n/**\nReturns true if passed AST node is a static\nmethods declaration of BEM.DOM.decl\n@param {Object} node an AST node of BEM.DOM.decl argument\n@returns {Boolean}\n*/\nfunction isStaticDeclaration(node) {\n  return node.type === 'StaticDeclaration';\n}\n\n/**\nReturns true if passed AST node is a static\nmethods declaration of BEM.DOM.decl\n@param {Object} node an AST node of BEM.DOM.decl argument\n@returns {Boolean}\n*/\nfunction isStaticDeclaration(node) {\n  return node.type === 'StaticDeclaration';\n}\n\n/**\nReturns true if passed AST node is a static\nmethods declaration of BEM.DOM.decl\n@param {Object} node an AST node of BEM.DOM.decl argument\n@returns {Boolean}\n*/\nfunction isStaticDeclaration(node) {\n  return node.type === 'StaticDeclaration';\n}\n\n/**\nReturns true if passed AST node is a static\nmethods declaration of BEM.DOM.decl\n@param {Object} node an AST node of BEM.DOM.decl argument\n@returns {Boolean}\n*/\nfunction isStaticDeclaration(node) {\n  return node.type === 'Static",
        " true if `BEM.DOM.decl` AST node has static methods declaration.\n*/\nfunction hasStaticMethodsDeclaration(node) {\n  return node.type === 'MethodDeclaration' &&\n    node.method.type === 'MethodDefinition' &&\n    node.method.method.type === 'StaticMethodDefinition';\n}\n\n/**\nReturns true if `BEM.DOM.decl` AST node has\nstatic properties declaration.\n@param {Object} node AST node of BEM.DOM.decl`\n@return {Boolean} true if `BEM.DOM.decl` AST node has\nstatic properties declaration.\n*/\nfunction hasStaticPropertiesDeclaration(node) {\n  return node.type === 'PropertyDeclaration' &&\n    node.property.type === 'PropertyDefinition' &&\n    node.property.property.type === 'StaticPropertyDefinition';\n}\n\n/**\nReturns true if `BEM.DOM.decl` AST node has\nstatic properties declaration.\n@param {Object} node AST node of BEM.DOM.decl`\n@return {Boolean} true if `BEM.DOM.decl` AST node has\nstatic properties declaration.\n*/\nfunction hasStaticPropertiesDeclaration(node) {\n  return node.type === 'PropertyDeclaration' &&\n    node.property.type === 'PropertyDefinition' &&\n    node.property.property.type",
        "\n    // If the target is not defined, return the target\n    if (!target) {\n      return target;\n    }\n\n    // If the target is a function, return the target\n    if (typeof target === 'function') {\n      return target;\n    }\n\n    // If the target is an object, return the target\n    if (target instanceof Object) {\n      return target;\n    }\n\n    // If the target is a string, return the target\n    if (typeof target === 'string') {\n      return target;\n    }\n\n    // If the target is an array, return the target\n    if (Array.isArray(target)) {\n      return target;\n    }\n\n    // If the target is a string, return the target\n    if (typeof target === 'string') {\n      return target;\n    }\n\n    // If the target is an object, return the target\n    if (target instanceof Object) {\n      return target;\n    }\n\n    // If the target is an array, return the target\n    if (Array.isArray(target)) {\n      return target;\n    }\n\n    // If the target is a string, return the target\n    if (typeof target === 'string') {\n      return target;\n    }\n\n    // If the target is",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\",
        "\n*/\nfunction findLast(data, items, index) {\n  var found = items[items.length - 1];\n  var i = 0;\n  while (i < items.length) {\n    if (data.indexOf(items[i]) === index) {\n      found = items[i];\n      break;\n    }\n    i++;\n  }\n  return {index: index, found: found};\n}\n\nmodule.exports = findLast;\n",
        "\n*/\nfunction findNext(data, items, index, exclude) {\n  var i = index;\n  var found = null;\n  var foundIndex = 0;\n  var foundItem = null;\n  var foundEnd = 0;\n  var foundStart = 0;\n  var foundEndIndex = 0;\n  var foundStartIndex = 0;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var foundEndItem = null;\n  var foundStartItem = null;\n  var",
        "\n*/\nfunction findLast(data, items, index, exclude) {\n  var last = items[items.length - 1];\n  var start = index || 0;\n  var end = exclude.length - 1;\n  var found = data.slice(start, end);\n  for (var i = 0; i < exclude.length; i++) {\n    if (exclude[i].start <= start && start <= exclude[i].end) {\n      continue;\n    }\n    if (exclude[i].start >= end && end >= exclude[i].end) {\n      continue;\n    }\n    if (exclude[i].start <= index && index <= exclude[i].end) {\n      continue;\n    }\n    if (exclude[i].start >= index && index >= exclude[i].end) {\n      continue;\n    }\n    if (exclude[i].start <= index && index <= exclude[i].start) {\n      continue;\n    }\n    if (exclude[i].start >= index && index >= exclude[i].start) {\n      continue;\n    }\n    if (exclude[i].start <= index && index <= exclude[i].start) {\n      continue;\n    }\n    if (exclude[i].start <= index && index <= exclude[i].start) {\n     ",
        ".\n*/\nfunction findOutside(data, item, index, exclude) {\n  var i = index;\n  var len = data.length;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i1 = 0;\n  var j1 = 0;\n  var k1 = 0;\n  var l1 = 0;\n  var m1 = 0;\n  var n1 = 0;\n  var o1 = 0;\n  var p1 = 0;\n  var q1 = 0;\n  var r1 = 0;\n  var s1 = 0;\n  var",
        ".\n*/\nfunction findLastIndex(data, item, index, exclude) {\n  var i = index;\n  var len = data.length;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i1 = 0;\n  var j1 = 0;\n  var k1 = 0;\n  var l1 = 0;\n  var m1 = 0;\n  var n1 = 0;\n  var o1 = 0;\n  var p1 = 0;\n  var q1 = 0;\n  var r1 = 0;\n  var t1 = 0;\n  var u1 = 0;\n",
        ".\n*/\nfunction split(data, separator, exclude) {\n  var result = [];\n  var i = 0;\n  var j = 0;\n  var len = data.length;\n  var start = 0;\n  var end = 0;\n  var last = 0;\n  var lastEnd = 0;\n  var lastStart = 0;\n  var lastEnd = 0;\n  var lastStartEnd = 0;\n  var lastStartStart = 0;\n  var lastStartEndEnd = 0;\n  var lastStartStartEndEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStartStartEnd = 0;\n  var lastStartStart",
        ".\n*/\nfunction findPositions(index, items) {\n  var start = items[0].start;\n  var end = items[0].end;\n  for (var i = 1; i < items.length; i++) {\n    if (index >= items[i].start && index <= items[i].end) {\n      return {start: start, end: end};\n    }\n    start = items[i].start;\n    end = items[i].end;\n  }\n  return false;\n}\n\nmodule.exports = findPositions;\n",
        "\n*/\nfunction endsWith(data, str) {\n    return data.indexOf(str, data.length - str.length) !== -1;\n}\n\nmodule.exports = endsWith;\n",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        " object\n*/\nexport function clone(source, obj) {\n  if (source === null) {\n    return obj;\n  }\n  if (typeof source === 'object') {\n    return Object.assign({}, source, obj);\n  }\n  return obj;\n}\n",
        "\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return $this\n     */\n    public function set($name, $value)\n    {\n        $this->data[$name] = $value;\n\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     * @return string\n     */\n    public function get($name)\n    {\n        return $this->data[$name];\n    }\n\n    /**\n     * @param string $name\n     * @return bool\n     */\n    public function has($name)\n    {\n        return isset($this->data[$name]);\n    }\n\n    /**\n     * @param string $name\n     * @return mixed\n     */\n    public function get($name)\n    {\n        return $this->data[$name];\n    }\n\n    /**\n     * @param string $name\n     * @return array\n     */\n    public function all()\n    {\n        return $this->data;\n    }\n\n    /**\n     * @param string $name\n     * @return bool\n     */\n    public function hasAll($name)\n    {\n        return isset($this->data[$name]);\n    }\n\n    /**\n     *",
        "\n@returns {String} The next line\n@private\n*/\nfunction nextLine(context, ast, prompt, oldPrompt, forceCursor, eval) {\n  var line = prompt;\n  var cursor = forceCursor;\n  var cursorPosition = 0;\n  var cursorLength = 0;\n  var cursorPositionLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;\n  var cursorLengthLength = 0;",
        ".\n@param {Error} err An error object if an error occurred.\n@param {Object} [options] An object containing the options for the file system.\n@param {Object} [options.root] The root directory of the file system.\n@param {Object} [options.root.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory.directory.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory.directory.directory.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory.directory.directory.directory.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory.directory.directory.directory.directory.directory.directory] The directory of the file system.\n@param {Object} [options.root.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.directory.",
        ".\n@param {string} path The path to save the file to.\n@param {string} name The name of the file to save.\n@param {string} type The type of the file to save.\n@param {string} extension The extension of the file to save.\n@param {string} mimeType The mime type of the file to save.\n@param {string} mimeTypeExtension The mime type extension of the file to save.\n@param {string} mimeTypeMimeType The mime type of the file to save.\n@param {string} mimeTypeMimeTypeExtension The mime type extension of the file to save.\n@param {string} mimeTypeMimeTypeMimeType The mime type of the file to save.\n@param {string} mimeTypeMimeTypeMimeTypeExtension The mime type extension of the file to save.\n@param {string} mimeTypeMimeTypeMimeType The mime type of the file to save.\n@param {string} mimeTypeMimeTypeMimeTypeExtension The mime type extension of the file to save.\n@param {string} mimeTypeMimeTypeMimeType The mime type of the file to save.\n@param {string} mimeTypeMimeTypeMimeTypeExtension The mime type extension of the file to save.\n@param {string} mimeTypeMimeTypeMimeType The mime type of the file to save.\n@param {string} mimeTypeMimeTypeMimeTypeExtension The mime type extension of the file to save.\n@param {string} mimeTypeMimeTypeMimeType The mime type of the file to",
        "\n\n// The main function is a getter-setter-combo it expects a default value and a validation function the validation function should return the validated value or throw an exception it should't return 'false' for non-validated values\n\n// The main function is a getter-setter-combo it expects a default value and a validation function the validation function should return the validated value or throw an exception it should't return 'false' for non-validated values\n\n// The main function is a getter-setter-combo it expects a default value and a validation function the validation function should return the validated value or throw an exception it should't return 'false' for non-validated values\n\n// The main function is a getter-setter-combo it expects a default value and a validation function the validation function should return the validated value or throw an exception it should't return 'false' for non-validated values\n\n// The main function is a getter-setter-combo it expects a default value and a validation function the validation function should return the validated value or throw an exception it should't return 'false' for non-validated values\n\n// The main function is a getter-setter-combo it expects a default value and a validation function the validation function should return the validated value or throw an exception it should't return 'false' for non-validated values\n\n// The main function is a getter-setter-combo it expects a default",
        "\n    //\n    // @param {string} value\n    // @param {string} [message]\n    // @param {string} [type]\n    // @param {string} [pattern]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n    // @param {string} [messageFormat]\n    // @param {string} [typeFormat]\n    // @param {string} [patternFormat]\n",
        "@returns {Array} An array of arrays\n@constructor\n*/\nfunction Array() {\n  this.length = 0;\n  this.elements = [];\n}\n\n/**\n* Adds an element to the array\n* @param {Object} element The element to add\n* @returns {Array} An array of arrays\n*/\nArray.prototype.push = function(element) {\n  this.elements.push(element);\n  return this;\n};\n\n/**\n* Removes an element from the array\n* @param {Object} element The element to remove\n* @returns {Array} An array of arrays\n*/\nArray.prototype.remove = function(element) {\n  var index = this.indexOf(element);\n  if (index !== -1) {\n    this.elements.splice(index, 1);\n  }\n  return this;\n};\n\n/**\n* Returns the number of elements in the array\n* @returns {Number} The number of elements in the array\n*/\nArray.prototype.length = function() {\n  return this.elements.length;\n};\n\n/**\n* Returns the element at the given index\n* @param {Number} index The index of the element to return\n* @returns {Object} The element at the given index\n*/\nArray.prototype.get = function(index) {\n ",
        " the bem entity.\n\nUsage:\n  bem_description.py [options] <bem_entity>\n\nOptions:\n  -h, --help           Show this help message.\n  -v, --version        Show version.\n  -d, --description    Description for the bem entity.\n  -f, --file          Path to the bem file.\n  -n, --name          Name of the bem entity.\n  -p, --parent        Parent bem entity.\n  -r, --parent_id     Parent bem entity id.\n  -t, --type          Type of the bem entity.\n  -u, --user          User of the bem entity.\n  -v, --version_id    Version of the bem entity.\n  -w, --welcome_id   Welcome bem entity id.\n  -x, --x_id          X bem entity id.\n  -y, --y_id          Y bem entity id.\n  -z, --z_id          Z bem entity id.\n  -c, --color         Color of the bem entity.\n  -d, --description_id  Description id of the bem entity.\n  -e, --entity_id      Entity id of the bem entity.\n  -f, --file",
        ".\n\nExamples:\n\n    >>> from pydoc import Method\n    >>> from pydoc.doc import Method\n    >>> m = Method('foo')\n    >>> m.description = 'foo'\n    >>> m.example = 'bar'\n    >>> m.example_description = 'baz'\n    >>> m.example_example = 'qux'\n    >>> m.example_example_description = 'quux'\n    >>> m.example_example_example = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>> m.example_example_example_description = 'quux'\n    >>>",
        "\n\n    def generate_doc(self, method, event):\n        \"\"\"Generates a doc for a method or event.\n\n        :param method: The method or event name.\n        :param event: The event name.\n        :returns: The generated doc.\n        \"\"\"\n        doc = self.generate_doc_for_method(method, event)\n        return doc\n\n    def generate_doc_for_method(self, method, event):\n        \"\"\"Generates a doc for a method or event.\n\n        :param method: The method or event name.\n        :param event: The event name.\n        :returns: The generated doc.\n        \"\"\"\n        doc = self.generate_doc_for_event(method, event)\n        return doc\n\n    def generate_doc_for_event(self, method, event):\n        \"\"\"Generates a doc for a method or event.\n\n        :param method: The method or event name.\n        :param event: The event name.\n        :returns: The generated doc.\n        \"\"\"\n        doc = self.generate_doc_for_method_or_event(method, event)\n        return doc\n\n    def generate_doc_for_method_or_event(self, method, event):\n        \"\"\"Generates a doc for a method or event.\n\n       ",
        ".\n\nExamples:\n\n    >>> from pydoc import Property\n    >>> p = Property('name', 'A name')\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = 'A description'\n    >>> p.description = '",
        "\n@returns {Boolean} True if the condition is true, false otherwise\n@example\n\nvar condition = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\nvar command = function(args, define) {\n  return args.length === 1 && args[0] === 'true';\n};\n\n",
        "\n@param {string} message\n@param {number} level\n@param {string} [format]\n@param {...*} [args]\n@return {string}\n@api public\n*/\n\nfunction log(writeStream, message, level, format, ...args) {\n  if (typeof writeStream === 'string') {\n    writeStream = new Buffer(writeStream);\n  }\n  if (typeof message === 'string') {\n    message = new Buffer(message);\n  }\n  if (typeof level === 'string') {\n    level = new Buffer(level);\n  }\n  if (typeof format === 'string') {\n    format = new Buffer(format);\n  }\n  if (typeof args === 'undefined') {\n    args = [];\n  }\n  if (args.length > 0) {\n    message = message.toString(format);\n    level = level.toString(format);\n    args = args.map(function(arg) {\n      return arg.toString(format);\n    });\n  }\n  return writeStream.write(message + '\\n' + level + '\\n' + args.join('\\n') + '\\n');\n}\n\nmodule.exports = log;\n",
        " function\n@example\n\nvar receiver = {};\nvar provider = {\n  name: 'provider',\n  upper: function (str) {\n    return '[' + this.name + '] ' + str.toUpperCase();\n  }\n};\nvar receiver = forward(receiver, provider, ['name']);\nreceiver.name = 'receiver';\nconsole.log(receiver.upper('foo'));\n//=> [provider] FOO\n\nvar receiver = {};\nvar provider = {\n  name: 'provider',\n  upper: function (str) {\n    return '[' + this.name + '] ' + str.toUpperCase();\n  }\n};\nvar receiver = forward(receiver, provider, ['name', 'upper']);\nreceiver.name = 'receiver';\nconsole.log(receiver.upper('foo'));\n//=> [provider] FOO\n\nvar receiver = {};\nvar provider = {\n  name: 'provider',\n  upper: function (str) {\n    return '[' + this.name + '] ' + str.toUpperCase();\n  }\n};\nvar receiver = forward(receiver, provider, ['name', 'upper', 'name']);\nreceiver.name = 'receiver';\nconsole.log(receiver.upper('foo'));\n//=> [provider] FOO\n\nvar receiver = {};\nvar provider",
        ".\n@param {Object} config.pattern The regex pattern that will\nbe used to find inclusions in source\ncode. The included file should be\ncaptured by the first capture group\nof the regex.\n@param {Object} config.options The options\nthat will be passed to the finder.\n@param {Object} config.options.ignore The\nignore patterns that will be used to\nignore the included files.\n@param {Object} config.options.exclude The\nexclude patterns that will be used to\nexclude the included files.\n@param {Object} config.options.exclude.ignore The\nignore patterns that will be used to\nignore the excluded files.\n@param {Object} config.options.exclude.exclude The\nexclude patterns that will be used to\nexclude the excluded files.\n@param {Object} config.options.exclude.exclude.ignore The\nignore patterns that will be used to\nignore the excluded files.\n@param {Object} config.options.exclude.exclude.exclude The\nexclude patterns that will be used to\nexclude the excluded files.\n@param {Object} config.options.exclude.exclude.exclude The\nexclude patterns that will be used to\nexclude the excluded files.\n@param {Object} config.options.exclude.exclude.exclude The\nexclude patterns that will be used to\nexclude the excluded files.\n@param {Object",
        "\n\n    def __init__(self, filename, *args, **kwargs):\n        super(SynchronousFileWriter, self).__init__(*args, **kwargs)\n        self.filename = filename\n        self.writer = None\n\n    def write(self, data):\n        self.writer.write(data)\n\n    def close(self):\n        if self.writer:\n            self.writer.close()\n\n\nclass SynchronousFileReader(FileReader):\n    \"\"\"\n    A file reader that reads data from a file.\n    \"\"\"\n\n    def __init__(self, filename, *args, **kwargs):\n        super(SynchronousFileReader, self).__init__(*args, **kwargs)\n        self.filename = filename\n        self.reader = None\n\n    def read(self):\n        self.reader = open(self.filename, 'rb')\n        return self.reader.read()\n\n    def close(self):\n        if self.reader:\n            self.reader.close()\n\n\nclass SynchronousFileWriter(FileWriter):\n    \"\"\"\n    A file writer that writes data to a file.\n    \"\"\"\n\n    def __init__(self, filename, *args, **kwargs):\n        super(SynchronousFileWriter, self).__init__(*args, **",
        "\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is loaded.\n\n// This is a test file that will be executed when the file is loaded.\n// It will be executed when the file is",
        "\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and returns a string.\n// The function should return a string.\n\n// Write a function that takes a string and",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.internal.serialization.impl;\n\nimport com.hazelcast.internal.serialization.Data;\nimport com.hazelcast.internal.serialization.impl.record.RecordImpl;\nimport com.hazelcast.internal.serialization.impl.record.RecordSerializer;\nimport com.hazelcast.internal.serialization.impl.record.RecordSerializerImpl;\nimport com.hazelcast.internal.serialization.impl.record.RecordSerializerRegistry;\nimport com.hazelcast.internal.serialization.impl.record.Record",
        "\n@param {Object} options An object of options\n@param {BlockManager} manager The block manager\n@param {Function} callback The callback to execute when the tree is finished\n@param {Function} error The callback to execute when an error occurs\n@param {Function} complete The callback to execute when the tree is finished\n@param {Function} completeError The callback to execute when an error occurs\n@param {Function} completeComplete The callback to execute when the tree is finished\n@param {Function} completeCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteComplete The callback to execute when the tree is finished\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs\n@param {Function} completeCompleteCompleteError The callback to execute when an error occurs",
        "\n@param {Function?} done The done callback\n@param {Function?} doneErr The done error callback\n@param {Function?} doneDone The done done callback\n@param {Function?} doneErrDone The done error done callback\n@param {Function?} doneDoneDone The done done done callback\n@param {Function?} doneErrDoneDone The done error done done callback\n@param {Function?} doneErrDoneDone The done error done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done done done callback\n@param {Function?} doneErrDoneDone The done error done done done done done done done callback\n@param {Function?} doneErrDoneDone The",
        "\n@api public\n*/\n\nvar MarkLogicStore = function(options) {\n  this.options = options;\n};\n\n/**\n@method initialize\n@param {Object} options\n@api public\n*/\n\nMarkLogicStore.prototype.initialize = function(options) {\n  this.options = options;\n};\n\n/**\n@method store\n@param {Object} data\n@param {Object} options\n@api public\n*/\n\nMarkLogicStore.prototype.store = function(data, options) {\n  this.options = options;\n  this.store(data);\n};\n\n/**\n@method store\n@param {Object} data\n@api public\n*/\n\nMarkLogicStore.prototype.store = function(data) {\n  this.store(data, {\n    type: 'marklogic'\n  });\n};\n\n/**\n@method store\n@param {Object} data\n@param {Object} options\n@api public\n*/\n\nMarkLogicStore.prototype.store = function(data, options) {\n  this.store(data, {\n    type: 'marklogic',\n    options: options\n  });\n};\n\n/**\n@method store\n@param {Object} data\n@param {Object} options\n@api public\n*/\n\nMarkLogicStore.prototype.store",
        ".\n*/\nfunction makeVendorsString(vendors, ignore) {\n  var vendorsString = '';\n  for (var i = 0; i < vendors.length; i++) {\n    if (ignore) {\n      if (vendors[i].indexOf('-') !== -1) {\n        vendorsString += vendors[i];\n      } else {\n        vendorsString += vendors[i] + ' ';\n      }\n    } else {\n      if (vendors[i].indexOf('+') !== -1) {\n        vendorsString += vendors[i];\n      } else {\n        vendorsString += vendors[i] + ' ';\n      }\n    }\n  }\n  return vendorsString;\n}\n\n/**\n@param {String} vendors - List of dependencies used in jspm config.\n@param {boolean} ignore - Indicate what sign use in vendor list (- or +).\n@returns {String} - jspm dependencies with sign - or + to use in arithmetic\nparam of jspm shell command.\n*/\nfunction makeVendorsStringWithSign(vendors, ignore) {\n  var vendorsString = '';\n  for (var i = 0; i < vendors.",
        ".\n*/\n\nvar create = Object.create || function(prototype) {\n  var result = Object.create(prototype);\n  result.prototype = prototype;\n  return result;\n};\n\ncreate.prototype.toString = function() {\n  return '[object Object]';\n};\n\ncreate.prototype.toJSON = function() {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function() {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function(locale) {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function(locale, options) {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function(locale, options, options2) {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function(locale, options, options2, options3) {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function(locale, options, options2, options3, options4) {\n  return '[object Object]';\n};\n\ncreate.prototype.toLocaleString = function(locale, options, options2, options3, options4, options5) {\n  return '[object Object]';\n};",
        ".\n*/\nfunction copyProperties(target, source) {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nmodule.exports = copyProperties;\n",
        "\n\n    def test_get_sequence_with_no_sequence(self):\n        self.assertEqual(self.sequence.get_sequence(), [])\n\n    def test_get_sequence_with_sequence(self):\n        self.sequence.append(1)\n        self.sequence.append(2)\n        self.sequence.append(3)\n        self.sequence.append(4)\n        self.sequence.append(5)\n        self.sequence.append(6)\n        self.sequence.append(7)\n        self.sequence.append(8)\n        self.sequence.append(9)\n        self.sequence.append(10)\n        self.sequence.append(11)\n        self.sequence.append(12)\n        self.sequence.append(13)\n        self.sequence.append(14)\n        self.sequence.append(15)\n        self.sequence.append(16)\n        self.sequence.append(17)\n        self.sequence.append(18)\n        self.sequence.append(19)\n        self.sequence.append(20)\n        self.sequence.append(21)\n        self.sequence.append(22)\n        self.sequence.append(23)\n        self.sequence.append(24)\n        self.sequence.append",
        "\n\n    def reduce(self, initial, func):\n        \"\"\"Reduce the items in an iterable down to a single instance of initial type.\n\n        Args:\n            initial (Iterable[T]): The initial value to use for the new instance.\n            func (Callable[T]): The function to call for each item in the iterable.\n\n        Returns:\n            Iterable[T]: The new instance of the initial type.\n        \"\"\"\n        return reduce(func, self, initial)\n\n    def reduce_left(self, initial, func):\n        \"\"\"Reduce the items in an iterable down to a single instance of initial type.\n\n        Args:\n            initial (Iterable[T]): The initial value to use for the new instance.\n            func (Callable[T]): The function to call for each item in the iterable.\n\n        Returns:\n            Iterable[T]: The new instance of the initial type.\n        \"\"\"\n        return reduce(func, self, initial)\n\n    def reduce_right(self, initial, func):\n        \"\"\"Reduce the items in an iterable down to a single instance of initial type.\n\n        Args:\n            initial (Iterable[T]): The initial value to use for the new instance.\n            func (Callable[T]): The function to call for each item in the iterable.\n\n        Returns:\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        ".\n    \"\"\"\n    if not iterable:\n        return\n    for item in iterable:\n        yield item\n\n\ndef filter(iterable, predicate):\n    \"\"\"\n    Filter the iterable by the passed predicate.\n    \"\"\"\n    if not iterable:\n        return\n    for item in iterable:\n        if predicate(item):\n            yield item\n\n\ndef filter_iterable(iterable, predicate):\n    \"\"\"\n    Filter the iterable by the passed predicate.\n    \"\"\"\n    if not iterable:\n        return\n    for item in iterable:\n        if predicate(item):\n            yield item\n\n\ndef filter_iterable_with_index(iterable, predicate, index):\n    \"\"\"\n    Filter the iterable by the passed predicate.\n    \"\"\"\n    if not iterable:\n        return\n    for item in iterable:\n        if predicate(item, index):\n            yield item\n\n\ndef filter_iterable_with_index_with_predicate(iterable, predicate, index, predicate):\n    \"\"\"\n    Filter the iterable by the passed predicate.\n    \"\"\"\n    if not iterable:\n        return\n    for item in iterable:\n        if predicate(item, index, predicate):\n            yield item\n\n\ndef filter_iterable_with_index_with_predicate_with_index(iterable, predicate, index, predicate, index):\n    \"\"\"",
        " iterable.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable, but does not yield the current iterable itself.\n\n    Yields the current iterable,",
        "\n\n    def get_item_from_id(self, item_id):\n        \"\"\"\n        Get an item from a given item id.\n        \"\"\"\n        return self.items.get(item_id)\n\n    def get_item_from_name(self, item_name):\n        \"\"\"\n        Get an item from a given item name.\n        \"\"\"\n        return self.items.get(item_name)\n\n    def get_item_from_name_and_id(self, item_name, item_id):\n        \"\"\"\n        Get an item from a given item name and item id.\n        \"\"\"\n        return self.items.get(item_name, item_id)\n\n    def get_item_from_name_and_name(self, item_name, item_name):\n        \"\"\"\n        Get an item from a given item name and item name.\n        \"\"\"\n        return self.items.get(item_name, item_name)\n\n    def get_item_from_name_and_id_and_name(self, item_name, item_name, item_name):\n        \"\"\"\n        Get an item from a given item name and item name and item id and item name.\n        \"\"\"\n        return self.items.get(item_name, item_name",
        ".\n *\n * @param {AsyncIterable} iterable\n * @returns {AsyncIterable}\n */\nexport function sort(iterable) {\n  return new AsyncIterable(function(next) {\n    var iterator = iterable.iterator();\n    var key;\n    var value;\n    var done = false;\n    var nextValue;\n    var nextKey;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n    var nextKeyIndex;\n    var nextValueIndex;\n   ",
        "\n\n    // The following methods are used to test the AsyncIterable.\n    //\n    //   async.each(array, callback)\n    //   async.each(array, callback, callback)\n    //   async.each(array, callback, callback, callback)\n    //   async.each(array, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(array, callback, callback, callback, callback, callback)\n    //   async.each(",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\",
        ".\n\n    >>> from async_iterable import AsyncIterable\n    >>> async_iterable = AsyncIterable([1, 2, 3])\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n    >>> async_iterable.play()\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n    #\n    # @param [Array] iterable\n    # @return [Promise<Array<T>>]\n    def each(iterable)\n      return self.class.new(iterable).each(iterable)\n    end\n\n    #\n    # @param [Array] iterable\n    # @return [Promise<Array<T>>]\n    def each_with_index(iterable, index)\n      return self.class.new(iterable).each_with_index(iterable, index)\n    end\n\n    #\n    # @param [Array] iterable\n    # @return [Promise<Array<T>>]\n    def each_with_index!(iterable, index)\n      return self.class.new(iterable).each_with_index!(iterable, index)\n    end\n\n    #\n    # @param [Array] iterable\n    # @return [Promise<Array<T>>]\n    def each_with_index!(iterable, index)\n      return self.class.new(iterable).each_with_index!(iterable, index)\n    end\n\n    #\n    # @param [Array] iterable\n    # @return [Promise<Array<T>>]\n    def each_with_index!(iterable, index)\n      return self.class.new(iterable).each_with_",
        "\n@example\n  $.closeFile('/tmp/test.txt')\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/test.txt', function() {\n    console.log('File closed')\n  })\n\n@example\n  $.closeFile('/tmp/",
        "\n@param {Object} options\n@param {Object} options.parent\n@param {Object} options.parent.parent\n@param {Object} options.parent.parent.parent\n@param {Object} options.parent.parent.parent.parent\n@param {Object} options.parent.parent.parent.parent.parent.parent\n@param {Object} options.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent.parent",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n*/\nfunction compile(value) {\n  var code = '';\n  code += 'var ' + value + ' = ' + value + ';';\n  return code;\n}\n\n/**\nCompile a value and append to generated code\n@param {Value} value\n@returns {string} - the resulting variable name\n*/\nfunction compile(value) {\n  var code = '';\n  code += 'var ' + value + ' = ' + value + ';';\n  return code;\n}\n\n/**\nCompile a value and append to generated code\n@param {Value} value\n@returns {string} - the resulting variable name\n*/\nfunction compile(value) {\n  var code = '';\n  code += 'var ' + value + ' = ' + value + ';';\n  return code;\n}\n\n/**\nCompile a value and append to generated code\n@param {Value} value\n@returns {string} - the resulting variable name\n*/\nfunction compile(value) {\n  var code = '';\n  code += 'var ' + value + ' = ' + value + ';';\n  return code;\n}\n\n/**\nCompile a value and append to generated code\n@param {Value} value\n@returns {string} - the resulting variable name\n*/\nfunction compile(value) {\n  var code = '';\n  code +=",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_name;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "\n\n    //! Returns the maximum length of the string.\n    //!\n    //! \\return The maximum length of the string.\n    //!\n    //! \\sa string::length()\n    size_t max() const { return m_max; }\n\n    //! Returns the maximum length of the string.\n    //!\n    //! \\return The maximum length of the string.\n    //!\n    //! \\sa string::length()\n    size_t length() const { return m_length; }\n\n    //! Returns the maximum length of the string.\n    //!\n    //! \\return The maximum length of the string.\n    //!\n    //! \\sa string::length()\n    size_t length(const char* s) const { return m_length(s); }\n\n    //! Returns the maximum length of the string.\n    //!\n    //! \\return The maximum length of the string.\n    //!\n    //! \\sa string::length()\n    size_t length(const std::string& s) const { return m_length(s); }\n\n    //! Returns the maximum length of the string.\n    //!\n    //! \\return The maximum length of the string.\n    //!\n    //! \\sa string::length()\n   ",
        "\n\n    #\n    #  @param [String] source\n    #  @param [Array] options\n    #  @return [String]\n    #\n    def format_string(source, options = {})\n      if source.is_a?(Array)\n        source.map { |s| format_string(s, options) }.join(' ')\n      else\n        source.to_s\n      end\n    end\n\n    #\n    #  @param [String] source\n    #  @param [Array] options\n    #  @return [String]\n    #\n    def format_string_from_array(source, options = {})\n      if source.is_a?(Array)\n        source.map { |s| format_string(s, options) }.join(' ')\n      else\n        source.to_s\n      end\n    end\n\n    #\n    #  @param [String] source\n    #  @param [Array] options\n    #  @return [String]\n    #\n    def format_string_from_hash(source, options = {})\n      if source.is_a?(Hash)\n        source.map { |k, v| format_string(k, v, options) }.join(' ')\n      else\n       ",
        "\n    end\n\n    def test_should_not_be_valid_if_no_valid_attributes\n      @model.attributes = {}\n      assert @model.valid?\n    end\n\n    def test_should_not_be_valid_if_no_valid_attributes_with_blank\n      @model.attributes = { :name => '' }\n      assert @model.valid?\n    end\n\n    def test_should_not_be_valid_if_no_valid_attributes_with_blank_and_blank_attributes\n      @model.attributes = { :name => '', :email => '' }\n      assert @model.valid?\n    end\n\n    def test_should_not_be_valid_if_no_valid_attributes_with_blank_and_blank_attributes_with_blank\n      @model.attributes = { :name => '', :email => '', :password => '' }\n      assert @model.valid?\n    end\n\n    def test_should_not_be_valid_if_no_valid_attributes_with_blank_and_blank_attributes_with_blank\n      @model.attributes = { :name => '', :email => '', :password => '', :password_confirmation => '' }\n      assert @model.valid?\n    end\n\n    def test_should",
        "\n    }\n\n    public function testGetFields()\n    {\n        $this->assertEquals(array('id', 'name', 'description', 'created_at', 'updated_at'), $this->model->getFields());\n    }\n\n    public function testGetFieldsWithCustomFields()\n    {\n        $this->assertEquals(array('id', 'name', 'description', 'created_at', 'updated_at', 'custom_field'), $this->model->getFields(array('custom_field' => 'custom_value')));\n    }\n\n    public function testGetFieldsWithCustomFieldsAndCustomFields()\n    {\n        $this->assertEquals(array('id', 'name', 'description', 'created_at', 'updated_at', 'custom_field', 'custom_value'), $this->model->getFields(array('custom_field' => 'custom_value', 'custom_field' => 'custom_value')));\n    }\n\n    public function testGetFieldsWithCustomFieldsAndCustomFieldsAndCustomFields()\n    {\n        $this->assertEquals(array('id', 'name', 'description', 'created_at', 'updated_at', 'custom_field', 'custom_value', 'custom_field', 'custom_value'), $this->model->getFields(array('custom_",
        "\n    }\n\n    public function testRecursiveDelete()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursiveRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursiveRecursiveRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursiveRecursiveRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursiveRecursiveRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursiveRecursiveRecursive()\n    {\n        $this->markTestIncomplete('Recursive delete not implemented yet.');\n    }\n\n    public function testRecursiveDeleteRecursiveRecursiveRecursiveRecursive()\n    {\n        $this->markTestIncomplete('",
        " you have registered models.\n\n    Examples\n    --------\n    >>> from pychron.core.models import *\n    >>> from pychron.core.params import *\n    >>> from pychron.core.utils import *\n    >>> from pychron.core.utils.registeredModels import *\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import showRegisteredModels\n    >>> from pychron.core.utils.registeredModels import show",
        "\n    }\n\n    public static void check(String modelName, String... values) {\n        check(modelName, values, null);\n    }\n\n    public static void check(String modelName, String... values, String... values2) {\n        check(modelName, values, values2, null);\n    }\n\n    public static void check(String modelName, String... values, String... values2, String... values3) {\n        check(modelName, values, values2, values3, null);\n    }\n\n    public static void check(String modelName, String... values, String... values2, String... values3, String... values4) {\n        check(modelName, values, values2, values3, values4, null);\n    }\n\n    public static void check(String modelName, String... values, String... values2, String... values3, String... values4, String... values5) {\n        check(modelName, values, values2, values3, values4, values5, null);\n    }\n\n    public static void check(String modelName, String... values, String... values2, String... values3, String... values4, String... values5, String... values6) {\n        check(modelName, values, values2, values3, values4, values5, values6,",
        "\n\t\tif (type == \"string\") {\n\t\t\treturn \"string\";\n\t\t}\n\t\tif (type == \"number\") {\n\t\t\treturn \"number\";\n\t\t}\n\t\tif (type == \"boolean\") {\n\t\t\treturn \"boolean\";\n\t\t}\n\t\tif (type == \"object\") {\n\t\t\treturn \"object\";\n\t\t}\n\t\tif (type == \"array\") {\n\t\t\treturn \"array\";\n\t\t}\n\t\tif (type == \"function\") {\n\t\t\treturn \"function\";\n\t\t}\n\t\tif (type == \"undefined\") {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\tif (type == \"null\") {\n\t\t\treturn \"null\";\n\t\t}\n\t\tif (type == \"undefined\") {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\tif (type == \"date\") {\n\t\t\treturn \"date\";\n\t\t}\n\t\tif (type == \"undefined\") {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\tif (type == \"undefined\") {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\tif (type == \"undefined\") {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\tif (type == \"undefined\") {\n",
        "\n@example\n  $.sleep(5);\n  $.sleep(5, function() {\n    console.log('sleeping for 5 seconds');\n  });\n*/\n\n$.sleep = function(seconds) {\n  var self = this;\n  var start = new Date();\n  var end = new Date();\n  var diff = end.getTime() - start.getTime();\n  var seconds = Math.floor(seconds / 1000);\n  var seconds_left = seconds % 1000;\n  var seconds_left_text = seconds_left_text ? seconds_left_text : '0';\n  var seconds_text = seconds_text ? seconds_text : '0';\n  var seconds_text_left = seconds_text_left ? seconds_text_left : '0';\n  var seconds_text_right = seconds_text_right ? seconds_text_right : '0';\n  var seconds_text_right_text = seconds_text_right_text ? seconds_text_right_text : '0';\n  var seconds_text_right_text_left = seconds_text_right_text_left ? seconds_text_right_text_left : '0';\n  var seconds_text_right_text_right = seconds_text_right_text_right ? seconds_text_right_",
        ".\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n\nReads file and compiles it.\n",
        "\n    }\n\n    return {\n      type: 'error',\n      message: 'Failed to resolve promise',\n      data: {\n        promise: promise\n      }\n    };\n  }\n\n  return {\n    type: 'error',\n    message: 'Failed to resolve promise',\n    data: {\n      promise: promise\n    }\n  };\n};\n\nmodule.exports = {\n  resolve: resolve\n};\n",
        "\n\n    def initialize(name)\n      @name = name\n    end\n\n    def name\n      @name\n    end\n\n    def name=(name)\n      @name = name\n    end\n\n    def to_s\n      @name\n    end\n\n    def to_s=(name)\n      @name = name\n    end\n\n    def to_hash\n      { name => @name }\n    end\n\n    def to_json\n      { name => @name }\n    end\n\n    def to_yaml\n      { name => @name }\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_json=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @name = name\n    end\n\n    def to_yaml=(name)\n      @",
        "\n    }\n\n    public static void main(String[] args) {\n        new Test().test();\n    }\n\n    public void test() {\n        System.out.println(\"test\");\n    }\n}\n",
        "\n@returns {String} The result of the operation\n*/\nfunction drawCircle(args) {\n    var radius = parseInt(args[0]);\n    var color = args[1];\n    var x = parseInt(args[2]);\n    var y = parseInt(args[3]);\n\n    var color = color.toLowerCase();\n    if (color === 'filled') {\n        var color = 'stroked';\n    }\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2, true);\n    ctx.fill();\n\n    return 'Circle: ' + radius + ' ' + color;\n}\n\n/**\nDraws a filled or stroked circle\n\n@param {String} args The arguments to the operation\n@returns {String} The result of the operation\n*/\nfunction drawCircleWithFill(args) {\n    var radius = parseInt(args[0]);\n    var color = args[1];\n    var x = parseInt(args[2]);\n    var y = parseInt(args[3]);\n\n    var color = color.toLowerCase();\n    if (color === 'filled') {\n        var color",
        "\n*/\nfunction Polling(objGoogleCheckout) {\n  this.objGoogleCheckout = objGoogleCheckout;\n  this.objPolling = null;\n  this.objNotification = null;\n  this.objContinueToken = null;\n  this.objNotificationDataTokenResponse = null;\n  this.objContinueTokenResponse = null;\n  this.objNotificationDataResponse = null;\n  this.objNotificationDataResponse = null;\n  this.objNewOrderNotification = null;\n  this.objAuthorizationAmountNotification = null;\n  this.objRiskInformationNotification = null;\n  this.objOrderStateChangeNotification = null;\n  this.objChargeAmountNotification = null;\n  this.objRefundAmountNotification = null;\n  this.objChargebackAmountNotification = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment = null;\n  this.objPayment",
        "\n@returns {String} The filled or stroked triangle\n*/\nfunction drawTriangle(args) {\n  var filled = args.indexOf('f') !== -1;\n  var stroked = args.indexOf('s') !== -1;\n\n  if (filled) {\n    return 'filled';\n  } else if (stroked) {\n    return 'stroked';\n  }\n}\n\n/**\nDraws a filled or stroked triangle\n\n@param {String} args The arguments to the function\n@returns {String} The filled or stroked triangle\n*/\nfunction drawTriangle(args) {\n  var filled = args.indexOf('f') !== -1;\n  var stroked = args.indexOf('s') !== -1;\n\n  if (filled) {\n    return 'filled';\n  } else if (stroked) {\n    return 'stroked';\n  }\n}\n\n/**\nDraws a filled or stroked triangle\n\n@param {String} args The arguments to the function\n@returns {String} The filled or stroked triangle\n*/\nfunction drawTriangle(args) {\n  var filled = args.indexOf('f') !== -1;\n  var stroked = args.indexOf('s') !== -1;\n\n  if (filled) {",
        ".\n\n  // This function will be called within the context of the current\n  // context of the current context of the current context of the\n  // current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of\n  // the current context of the current context of the current context of",
        ".\n\nInstances are created by calling the `create` method on the service\nconstructor.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for each service\ninstance.\n\nThe service constructor will be called once for",
        ".\n@param {Object} [options] The options to be used\nin the analysis.\n@param {Object} [options.finders] The finders to be used\nin the analysis.\n@param {Object} [options.resolvers] The resolvers to be used\nin the analysis.\n@param {Object} [options.finders.fileExt] The finders to be used\nin the analysis.\n@param {Object} [options.resolvers.fileExt] The resolvers to be used\nin the analysis.\n@param {Object} [options.finders.fileExt2] The finders to be used\nin the analysis.\n@param {Object} [options.resolvers.fileExt2] The resolvers to be used\nin the analysis.\n@param {Object} [options.finders.fileExt3] The finders to be used\nin the analysis.\n@param {Object} [options.resolvers.fileExt3] The resolvers to be used\nin the analysis.\n@param {Object} [options.finders.fileExt4] The finders to be used\nin the analysis.\n@param {Object} [options.resolvers.fileExt4] The resolvers to be used\nin the analysis.\n@param {Object} [options.finders.fileExt5] The finders to be used\nin",
        "\n@returns {String} The result of the command\n*/\nfunction draw(args) {\n  var rect = args.split(' ');\n  var x = parseInt(rect[0]);\n  var y = parseInt(rect[1]);\n  var width = parseInt(rect[2]);\n  var height = parseInt(rect[3]);\n\n  var color = 'black';\n  if (rect[4] === 'filled') {\n    color = 'red';\n  } else if (rect[4] === 'stroked') {\n    color = 'green';\n  }\n\n  var ctx = document.getElementById('canvas').getContext('2d');\n  ctx.fillStyle = color;\n  ctx.fillRect(x, y, width, height);\n}\n\nmodule.exports = draw;\n",
        "\n    }\n\n    public void set(String key, String value) {\n        this.map.put(key, value);\n    }\n\n    public String get(String key) {\n        return this.map.get(key);\n    }\n\n    public void remove(String key) {\n        this.map.remove(key);\n    }\n\n    public void clear() {\n        this.map.clear();\n    }\n\n    public boolean containsKey(String key) {\n        return this.map.containsKey(key);\n    }\n\n    public boolean containsValue(String value) {\n        return this.map.containsValue(value);\n    }\n\n    public Set<String> keySet() {\n        return this.map.keySet();\n    }\n\n    public Collection<String> values() {\n        return this.map.values();\n    }\n\n    public Set<Entry<String, String>> entrySet() {\n        return this.map.entrySet();\n    }\n\n    public Set<String> keySet(String key) {\n        return this.map.keySet(key);\n    }\n\n    public Collection<String> values(String key) {\n        return this.map.values(key);\n    }\n\n    public Set<Entry<String, String>> entrySet",
        "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <assert.h>\n\n#include \"../src/list.h\"\n\n#define MAX_SIZE 100\n\nint main()\n{\n\tint i, j, k, l, m, n, m1, n1, m2, n2, m3, n3, m4, n4, m5, n5, m6, n6, m7, n7, m8, n8, m9, n9, m10, n10, m11, n11, m12, n12, m13, n13, m14, n14, m15, n15, m16, n16, m17, n17, m18, n18, m19, n19, m20, n20, m21, n21, m22, n22, m23, n23, m24, n24, m25, n25, m26, n26, m27, n27, m28, n28, m29, n29, m30, n30, m31, n31, m32, n32, m33, n33, m34, n34, m35, n35, m36,",
        " the model files to read\n\n@param  {Function} cb\n\n@return {Function}\n*/\nfunction getModelFiles(cb) {\n  var files = fs.readdirSync('./models');\n  files.forEach(function(file) {\n    var name = file.replace('.js', '');\n    var model = require('./models/' + name);\n    model.addToSwagger(cb);\n  });\n}\n\nmodule.exports = getModelFiles;\n",
        "\n@param {Function?} callback The callback to call when the command is complete\n@param {Function?} error The callback to call when an error occurs\n@param {Function?} complete The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {Function?} errorCallback The callback to call when an error occurs\n@param {Function?} completeCallback The callback to call when the command is complete\n@param {",
        "\n@returns {Object} The object with the following properties:\n\n@property {String} path The path to the file\n@property {String} name The name of the file\n@property {String} type The type of the file\n@property {String} mode The mode of the file\n@property {String} size The size of the file\n@property {String} modTime The modification time of the file\n@property {String} modDate The modification date of the file\n@property {String} modUser The modification user of the file\n@property {String} modGroup The modification group of the file\n@property {String} modMode The modification mode of the file\n@property {String} modTimeStamp The modification time stamp of the file\n@property {String} modDateStamp The modification date stamp of the file\n@property {String} modUserStamp The modification user stamp of the file\n@property {String} modGroupStamp The modification group stamp of the file\n@property {String} modModeStamp The modification mode stamp of the file\n@property {String} modDateStamp The modification date stamp of the file\n@property {String} modUserStamp The modification user stamp of the file\n@property {String} modGroupStamp The modification group stamp of the file\n@property {String} modModeStamp The modification mode stamp of the file\n@property {String} modDateStamp The modification",
        "\n@param {Object} options A options object\n@param {Object} options.resolve A function that takes a path and returns a promise\n@param {Object} options.resolve.then A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.then.then A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.then.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve.catch.catch.catch A function that takes a promise and returns a promise\n@param {Object} options.resolve",
        "\n@returns {String} The output of the command\n@example\n\nvar command = require('./command');\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);\n});\n\ncommand('echo', function(args, define) {\n  console.log(args);",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.n",
        "\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api public\n\n@api",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n*/\n\nmodule.exports = function (sails) {\n\n  var _ = require('lodash');\n  var path = require('path');\n  var fs = require('fs');\n  var util = require('util');\n  var _sails = sails;\n\n  var _sails.config.policies = {};\n\n  // Load all policies from the config file\n  fs.readdirSync(__dirname + '/config/policies').forEach(function (file) {\n    var policy = require(__dirname + '/config/policies/' + file);\n    if (policy.name) {\n      _sails.config.policies[policy.name] = policy;\n    }\n  });\n\n  // Load all policies from the config file\n  fs.readdirSync(__dirname + '/config/hooks').forEach(function (file) {\n    var hook = require(__dirname + '/config/hooks/' + file);\n    if (hook.name) {\n      _sails.config.hooks[hook.name] = hook;\n    }\n  });\n\n  // Load all policies from the config file\n  fs.readdirSync(__dirname + '/config/hooks/sails').forEach(function (file) {\n    var hook = require(__dirname + '/config/hooks/",
        "\n\n    def test_bind_with_options(self):\n        \"\"\"\n        Test that the bind method can be used with options\n        \"\"\"\n        self.assertEqual(self.app.bind('/foo', 'bar'), '/foo/bar')\n\n    def test_bind_with_options_with_options(self):\n        \"\"\"\n        Test that the bind method can be used with options\n        \"\"\"\n        self.assertEqual(self.app.bind('/foo', 'bar', 'baz'), '/foo/bar/baz')\n\n    def test_bind_with_options_with_options_and_options(self):\n        \"\"\"\n        Test that the bind method can be used with options\n        \"\"\"\n        self.assertEqual(self.app.bind('/foo', 'bar', 'baz', 'qux'), '/foo/bar/baz/qux')\n\n    def test_bind_with_options_with_options_and_options_and_options(self):\n        \"\"\"\n        Test that the bind method can be used with options\n        \"\"\"\n        self.assertEqual(self.app.bind('/foo', 'bar', 'baz', 'qux', 'quux'), '/foo/bar/baz/qux/quux')\n\n    def test_bind_",
        "\n@param {Object} [options] The options for the function\n@param {Function} [options.callback] The callback function\n@param {Function} [options.error] The error function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function} [options.context] The context function\n@param {Function",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        ".\n@param {String} path The path to the route.\n@param {String} controller The path to the controller to use for serving the route.\n@param {String} method The name of the method on the controller to use for serving the route.\n@param {String} options The options for the route.\n@param {String} options.controller The path to the controller to use for serving the route.\n@param {String} options.method The name of the method on the controller to use for serving the route.\n@param {String} options.path The path to the route.\n@param {String} options.controller The path to the controller to use for serving the route.\n@param {String} options.method The name of the method on the controller to use for serving the route.\n@param {String} options.path The path to the route.\n@param {String} options.controller The path to the controller to use for serving the route.\n@param {String} options.method The name of the method on the controller to use for serving the route.\n@param {String} options.path The path to the route.\n@param {String} options.controller The path to the controller to use for serving the route.\n@param {String} options.method The name of the method on the controller to use for serving the route.\n@param {String}",
        ".\n*/\nfunction bind(url, val) {\n  var fields = Object.keys(val);\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    var value = val[field];\n    url += field + '=' + value;\n  }\n  return url;\n}\n\n/**\nHandles binding the fields of an object into a URL.\n@param {string} url The URL to bind against.\n@param {object} val The object from which to draw properties.\n@return {string} The updated URL.\n*/\nfunction bindObject(url, val) {\n  var fields = Object.keys(val);\n  for (var i = 0; i < fields.length; i++) {\n    var field = fields[i];\n    var value = val[field];\n    url += field + '=' + value;\n  }\n  return url;\n}\n\n/**\nHandles binding the fields of an object into a URL.\n@param {string} url The URL to bind against.\n@param {object} val The object from which to draw properties.\n@return {string} The updated URL.\n*/\nfunction bindArray(url, val) {\n  var fields = Object.keys(val);\n  for (var i = 0; i < fields",
        ".\n@param {Object} controller The controller to bind against.\n@param {Object} controllerController The controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {Object} controllerControllerName The name of the controller controller to bind against.\n@param {",
        ".\n@param {Object} app.router The router to bind to.\n@param {Object} app.router.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {Object} app.router.bindTo.bindTo.bindTo.bindTo The folder to bind to.\n@param {",
        ".\n@param {object} routes An array of routes to bind.\n@param {object} options An object containing the following properties:\n@param {string} options.path The path to bind the routes against.\n@param {string} options.method The HTTP method to bind the routes against.\n@param {string} options.host The host to bind the routes against.\n@param {string} options.pathPrefix The path prefix to bind the routes against.\n@param {string} options.methodPrefix The HTTP method prefix to bind the routes against.\n@param {string} options.hostPrefix The host prefix to bind the routes against.\n@param {string} options.pathSuffix The path suffix to bind the routes against.\n@param {string} options.methodSuffix The HTTP method suffix to bind the routes against.\n@param {string} options.hostSuffix The host suffix to bind the routes against.\n@param {string} options.pathPrefix The path prefix to bind the routes against.\n@param {string} options.methodSuffix The HTTP method suffix to bind the routes against.\n@param {string} options.hostSuffix The host suffix to bind the routes against.\n@param {string} options.pathSuffix The path suffix to bind the routes against.\n@param {string} options.methodPrefix The HTTP method prefix to bind the routes against.\n@param {string",
        " is an array of objects.\n*/\nfunction configureRoutes() {\n  return [\n    {\n      name: 'home',\n      path: '/',\n      handler: function(req, res) {\n        res.render('index', {\n          title: 'Home',\n          message: 'Hello World!'\n        });\n      }\n    },\n    {\n      name: 'about',\n      path: '/about',\n      handler: function(req, res) {\n        res.render('about', {\n          title: 'About',\n          message: 'Hello World!'\n        });\n      }\n    },\n    {\n      name: 'contact',\n      path: '/contact',\n      handler: function(req, res) {\n        res.render('contact', {\n          title: 'Contact',\n          message: 'Hello World!'\n        });\n      }\n    },\n    {\n      name: 'login',\n      path: '/login',\n      handler: function(req, res) {\n        res.render('login', {\n          title: 'Login',\n          message: 'Hello World!'\n        });\n      }\n    },\n    {\n      name: 'logout',\n      path: '/logout',\n      handler: function(req, res) {\n        res.render('logout', {\n",
        ".\n@param {String} controller The name of the controller to use for serving the route.\n@param {String} action The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String} actionName The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String} actionName The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String} actionName The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String} actionName The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String} actionName The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String} actionName The name of the action to use for serving the route.\n@param {String} controllerPath The path to the controller to use for serving the route.\n@param {String}",
        " the file to read.\n@returns {Object} The config object.\n@throws {Error} If the file does not exist.\n*/\nfunction readConfig(path) {\n  var config = {};\n  var lines = fs.readFileSync(path, 'utf8');\n  lines = lines.split('\\n');\n  lines.forEach(function(line) {\n    var parts = line.split('=');\n    if (parts.length === 2) {\n      config[parts[0]] = parts[1];\n    }\n  });\n  return config;\n}\n\n/**\nWrites a config file to disk.\n@param {Object} config The config object.\n@param {string} path The path to the file to write.\n@returns {void}\n*/\nfunction writeConfig(config, path) {\n  fs.writeFileSync(path, JSON.stringify(config, null, 2), 'utf8');\n}\n\n/**\nReturns the current working directory.\n@returns {string} The current working directory.\n*/\nfunction getCurrentWorkingDirectory() {\n  return process.cwd();\n}\n\n/**\nReturns the current working directory.\n@returns {string} The current working directory.\n*/\nfunction getCurrentWorkingDirectoryRelative() {\n  return process.cwd() + '/';\n}\n\n/**",
        ".\n*/\nfunction bindAction(action) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindParams(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrl(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrlWithParams(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrlWithQuery(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrlWithQueryAndParams(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrlWithQueryAndParamsAndParams(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrlWithQueryAndParamsAndParamsAndParams(action, params) {\n  return function(params) {\n    return action + '?' + params;\n  };\n}\n\nfunction bindUrl",
        "\n *\n * @author: Joshua Boyce <joshua.boyce@gmail.com>\n * @version: 1.0\n * @since: 2015-12-10\n */\n\nvar fs = require('fs');\nvar path = require('path');\nvar _ = require('lodash');\nvar async = require('async');\nvar _path = require('path');\nvar _fs = require('fs');\nvar _path2 = require('path');\nvar _path3 = require('path');\nvar _path4 = require('path');\nvar _path5 = require('path');\nvar _path6 = require('path');\nvar _path7 = require('path');\nvar _path8 = require('path');\nvar _path9 = require('path');\nvar _path10 = require('path');\nvar _path11 = require('path');\nvar _path12 = require('path');\nvar _path13 = require('path');\nvar _path14 = require('path');\nvar _path15 = require('path');\nvar _path16 = require('path');\nvar _path17 = require('path');\nvar _path18 = require('path');\nvar _path19 = require('path');\nvar _path20 = require('path');\nvar _path21 = require('path",
        " tree\n*/\nfunction parseBasicCode(code) {\n  var parser = new Parser();\n  return parser.parse(code);\n}\n\nmodule.exports = parseBasicCode;\n",
        "\n@param {Number} column The column number\n@param {Number} row The row number\n@param {String} type The type of the command\n@param {String} description The description of the command\n@param {String} help The help text for the command\n@param {String} usage The usage text for the command\n@param {String} usageText The usage text for the command\n@param {String} usageText2 The usage text for the command\n@param {String} usageText3 The usage text for the command\n@param {String} usageText4 The usage text for the command\n@param {String} usageText5 The usage text for the command\n@param {String} usageText6 The usage text for the command\n@param {String} usageText7 The usage text for the command\n@param {String} usageText8 The usage text for the command\n@param {String} usageText9 The usage text for the command\n@param {String} usageText10 The usage text for the command\n@param {String} usageText11 The usage text for the command\n@param {String} usageText12 The usage text for the command\n@param {String} usageText13 The usage text for the command\n@param {String} usageText14 The usage text for the command\n@param {String} usageText15 The usage text for the command\n@param {String",
        "\n@param {String} [config.root] The root directory of the\npath resolution.\n@param {String} [config.root.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir.dir.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir.dir.dir.dir.dir.dir] The directory to\nresolve relative to.\n@param {String} [config.root.dir.dir.dir.dir",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse",
        "\n\n    // \u5224\u65ad\u662f\u5426\u662f\u6709\u6548\u65f6\u95f4\n    if (isNaN(data.time)) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u662f\u6709\u6548\u65f6\u95f4\n    if (data.time < 0) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u662f\u6709\u6548\u65f6\u95f4\n    if (data.time > 0) {\n        return true;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u662f\u6709\u6548\u65f6\u95f4\n    if (data.time < 0) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u662f\u6709\u6548\u65f6\u95f4\n    if (data.time > 0) {\n        return true;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u662f\u6709\u6548\u65f6\u95f4\n    if (data.time < 0)",
        ".\n*/\n\nvar fs = require('fs');\nvar path = require('path');\nvar child = require('child_process');\nvar child_process = require('child_process');\nvar child_process_options = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_default = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_default = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_child = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_child_default = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_child_child = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_child_child_default = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_child_child_default = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child_child_child_default = {\n  stdio: 'inherit'\n};\n\nvar child_process_options_child",
        ".\n*/\n\nvar fs = require('fs');\nvar path = require('path');\nvar child_process = require('child_process');\nvar child_process_exec = require('child_process-exec');\nvar child_process_execSync = require('child_process-exec-sync');\nvar child_process_execSyncSync = require('child_process-exec-sync-sync');\nvar child_process_execSyncSync = require('child_process-exec-sync-sync-sync');\nvar child_process_execSyncSyncSync = require('child_process-exec-sync-sync-sync-sync');\nvar child_process_execSyncSyncSync = require('child_process-exec-sync-sync-sync-sync-sync');\nvar child_process_execSyncSyncSync = require('child_process-exec-sync-sync-sync-sync-sync');\nvar child_process_execSyncSyncSync = require('child_process-exec-sync-sync-sync-sync-sync-sync');\nvar child_process_execSyncSyncSync = require('child_process-exec-sync-sync-sync-sync-sync-sync');\nvar child_process_execSyncSyncSync = require('child_process-exec-sync-sync-sync-sync-sync-sync');\nvar child_process_execSync",
        "\n\nfunction forClosing a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction forOpening a\n\nfunction for",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n    }\n\n    public static void main(String[] args) {\n        new Main().run();\n    }\n\n    public void run() {\n        System.out.println(\"Hello World!\");\n    }\n}\n",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n@param {Object} exports The object to copy the properties of\n@returns {Object} The object with the properties of the object\n*/\nfunction copyProperties(obj, exports) {\n  for (var prop in obj) {\n    exports[prop] = obj[prop];\n  }\n  return exports;\n}\n\n/**\n* @function copyProperties\n* @description Copies the properties of an object to the exports\n* @param {Object} obj The object to copy the properties of\n* @param {Object} exports The object to copy the properties of\n* @returns {Object} The object with the properties of the object\n*/\nfunction copyProperties(obj, exports) {\n  for (var prop in obj) {\n    exports[prop] = obj[prop];\n  }\n  return exports;\n}\n\n/**\n* @function copyProperties\n* @description Copies the properties of an object to the exports\n* @param {Object} obj The object to copy the properties of\n* @param {Object} exports The object to copy the properties of\n* @returns {Object} The object with the properties of the object\n*/\nfunction copyProperties(obj, exports) {\n  for (var prop in obj) {\n    exports[prop] = obj[prop];\n  }\n  return exports;\n}\n\n/**\n* @",
        "\n\n    def test_get_character_by_id(self):\n        self.assertEqual(self.character.get_character_by_id(1), self.character)\n\n    def test_get_character_by_id_not_found(self):\n        self.assertEqual(self.character.get_character_by_id(999), None)\n\n    def test_get_character_by_name(self):\n        self.assertEqual(self.character.get_character_by_name('John'), self.character)\n\n    def test_get_character_by_name_not_found(self):\n        self.assertEqual(self.character.get_character_by_name('John'), None)\n\n    def test_get_character_by_name_and_id(self):\n        self.assertEqual(self.character.get_character_by_name('John', 1), self.character)\n\n    def test_get_character_by_name_and_id_not_found(self):\n        self.assertEqual(self.character.get_character_by_name('John', 999), None)\n\n    def test_get_character_by_name_and_id_and_name(self):\n        self.assertEqual",
        "\n    #\n    # @param [String] str\n    # @return [String]\n    def self.replace(str)\n      str.gsub(/\\s+/, ' ').gsub(/\\W+/, ' ')\n    end\n\n    #\n    # Replace all instances in a string that match a regular expression\n    #\n    # @param [String] str\n    # @param [Regexp] regexp\n    # @return [String]\n    def self.replace(str, regexp)\n      str.gsub(regexp)\n    end\n\n    #\n    # Replace all instances in a string that match a regular expression\n    #\n    # @param [String] str\n    # @param [Regexp] regexp\n    # @return [String]\n    def self.replace_all(str, regexp)\n      str.gsub(regexp)\n    end\n\n    #\n    # Replace all instances in a string that match a regular expression\n    #\n    # @param [String] str\n    # @param [Regexp] regexp\n    # @return [String]\n    def self.replace_all_with_regexp(str, regexp)\n      str.gsub(regexp)\n    end\n\n    #\n    # Replace all instances in a string that match a regular expression\n    #\n    # @",
        "(value) The function to call when the value is found\n@param {String} [name] The name of the variable to find\n@param {String} [type] The type of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [default] The default value of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [default] The default value of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the variable to find\n@param {String} [description] The description of the",
        "\n*/\nfunction removeFirstLine(block, lines) {\n  var linesToRemove = [];\n  var linesToRemove = [];\n  var linesToRemoveComment = [];\n  var linesToRemoveEmpty = [];\n  var linesToRemoveEmptyComment = [];\n  var linesToRemoveEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyComment = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = [];\n  var linesToRemoveEmptyEmptyEmpty = []",
        "\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return $this\n     */\n    public function set($name, $value)\n    {\n        $this->data[$name] = $value;\n        return $this;\n    }\n\n    /**\n     * @param string $name\n     * @return $this\n     */\n    public function remove($name)\n    {\n        unset($this->data[$name]);\n        return $this;\n    }\n\n    /**\n     * @return array\n     */\n    public function toArray()\n    {\n        return $this->data;\n    }\n\n    /**\n     * @return string\n     */\n    public function __toString()\n    {\n        return json_encode($this->toArray());\n    }\n}\n",
        "\n\nvar labels = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\"\n];\n\nvar labelsArray = labels.map(function(label) {\n  return label.toUpperCase();\n});\n\nvar labelsArray2 = labels.map(function(label) {\n  return label.toLowerCase();\n});\n\nvar labelsArray3 = labels.map(function(label) {\n  return label.replace(/\\s/g, '');\n});\n\nvar labelsArray4 = labels.map(function(label) {\n  return label.replace(/\\s+/g, '');\n});\n\nvar labelsArray5 = labels.map(function(label) {\n  return label.replace(/\\s+/g, '');\n});\n\nvar labelsArray6 = labels.map(function(label) {\n",
        "\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @return bool\n     */\n    public function set($name, $value)\n    {\n        return $this->set($name, $value, false);\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @param bool $overwrite\n     * @return bool\n     */\n    public function set($name, $value, $overwrite = false)\n    {\n        if ($overwrite) {\n            $this->set($name, $value, true);\n        } else {\n            $this->set($name, $value);\n        }\n\n        return true;\n    }\n\n    /**\n     * @param string $name\n     * @return bool\n     */\n    public function has($name)\n    {\n        return $this->has($name, false);\n    }\n\n    /**\n     * @param string $name\n     * @return bool\n     */\n    public function has($name, $overwrite = false)\n    {\n        if ($overwrite) {\n            $this->has($name, false);\n        } else {\n            $this->has($name);\n        }\n\n        return true;\n    }\n\n   ",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\",
        "\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (isEmpty(data)) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (data.length < 1) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (data[0].length < 1) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (data[0].length > data.length) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (data[0].length > data.length) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (data[0].length > data.length) {\n        return false;\n    }\n\n    // \u5224\u65ad\u662f\u5426\u6709\u6548\n    if (data[0].length >",
        "\n@returns {Object} An object that provides modification and reading of the current execution context\n@constructor\n*/\nfunction ExecutionContext(options) {\n  this.options = options || {};\n  this.current = null;\n  this.currentContext = null;\n  this.currentContextOptions = null;\n  this.currentContextOptions = null;\n  this.currentContextOptions.options = options;\n  this.currentContextOptions.options.context = this;\n  this.currentContextOptions.options.contextOptions = null;\n  this.currentContextOptions.options.contextOptions.options = options;\n  this.currentContextOptions.options.contextOptions.options.context = this;\n  this.currentContextOptions.options.contextOptions.options.contextOptions.options = options;\n  this.currentContextOptions.options.contextOptions.options.contextOptions.options.context = this;\n  this.currentContextOptions.options.contextOptions.options.contextOptions.options.contextOptions.options = options;\n  this.currentContextOptions.options.contextOptions.options.contextOptions.options.contextOptions.options.context = this;\n  this.currentContextOptions.options.contextOptions.options.contextOptions.options.contextOptions.options.contextOptions.options = options;\n  this.currentContextOptions.options.",
        "\n@returns {Array} The updated array\n@example\n\nvar arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,",
        "\n@example\n\n    var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137",
        "\n@returns {Array<Number>} The array\n@private\n*/\nfunction createArray(dimensions, endpoint) {\n  var result = [];\n  for (var i = 0; i < dimensions.length; i++) {\n    result.push(endpoint);\n  }\n  return result;\n}\n\n/**\nCreates an array with the specified lengths of dimensions\n\n@param {Array<Number>} dimensions The array dimensions\n@param {*} endpoint The value for the array endpoint\n@returns {Array<Number>} The array\n@private\n*/\nfunction createArray(dimensions, endpoint) {\n  var result = [];\n  for (var i = 0; i < dimensions.length; i++) {\n    result.push(endpoint);\n  }\n  return result;\n}\n\n/**\nCreates an array with the specified lengths of dimensions\n\n@param {Array<Number>} dimensions The array dimensions\n@param {*} endpoint The value for the array endpoint\n@returns {Array<Number>} The array\n@private\n*/\nfunction createArray(dimensions, endpoint) {\n  var result = [];\n  for (var i = 0; i < dimensions.length; i++) {\n    result.push(endpoint);\n  }\n  return result;\n}\n\n/**\nCreates an array with the specified lengths of dimensions\n\n@param {Array<Number",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;",
        "\n@returns {string}\n*/\nfunction processHeader(content, level, name) {\n  var newSection = content.split('\\n')[level];\n  if (newSection.length > 0) {\n    var newSectionName = name + '\\n' + newSection;\n    return newSectionName;\n  }\n  return content;\n}\n\n/**\nProcess a new section, creating a new section\n@param {string} content\n@param {number} level\n@param {string} name\n@returns {string}\n*/\nfunction processSection(content, level, name) {\n  var newSection = content.split('\\n')[level];\n  if (newSection.length > 0) {\n    var newSectionName = name + '\\n' + newSection;\n    return newSectionName;\n  }\n  return content;\n}\n\n/**\nProcess a new section, creating a new section\n@param {string} content\n@param {number} level\n@param {string} name\n@returns {string}\n*/\nfunction processSection(content, level, name) {\n  var newSection = content.split('\\n')[level];\n  if (newSection.length > 0) {\n    var newSectionName = name + '\\n' + newSection;\n    return newSection",
        "\n@example\nvar error = new SyntaxError('message', {\n  line: line,\n  size: 1\n});\n\nvar error = new SyntaxError('message', {\n  line: line,\n  size: 1,\n  errorLine: line\n});\n\nvar error = new SyntaxError('message', {\n  line: line,\n  size: 1,\n  errorLine: line,\n  message: 'message'\n});\n\nvar error = new SyntaxError('message', {\n  line: line,\n  size: 1,\n  errorLine: line,\n  message: 'message',\n  error: 'error'\n});\n\nvar error = new SyntaxError('message', {\n  line: line,\n  size: 1,\n  errorLine: line,\n  message: 'message',\n  error: 'error',\n  errorLine: line\n});\n\nvar error = new SyntaxError('message', {\n  line: line,\n  size: 1,\n  errorLine: line,\n  message: 'message',\n  error: 'error',\n  errorLine: line,\n  message: 'message',\n  error: 'error',\n  error: 'error',\n  error: 'error',\n  error: 'error',\n  error: 'error',\n  error: 'error',\n  error: '",
        "\n@return {string}\n*/\nfunction append(type) {\n  var last = this.lastBlock;\n  if (last.type === type) {\n    return this.lastBlock.content;\n  }\n  var newLast = new Block(type);\n  newLast.content = this.lastBlock.content + this.currentLine;\n  this.lastBlock = newLast;\n  return this.lastBlock.content;\n}\n\n/**\n* Create a new block with the given type,\n* and append the current line to it\n* @param {string} type\n* @return {Block}\n*/\nfunction create(type) {\n  var newLast = new Block(type);\n  newLast.content = this.currentLine;\n  this.lastBlock = newLast;\n  return newLast;\n}\n\n/**\n* Create a new block with the given type,\n* and append the current line to it\n* @param {string} type\n* @return {Block}\n*/\nfunction create(type) {\n  var newLast = new Block(type);\n  newLast.content = this.currentLine;\n  this.lastBlock = newLast;\n  return newLast;\n}\n\n/**\n* Create a new block with the given type,\n* and append the current line to",
        "\n\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //",
        "\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends MyClass\n@method detach\n@param {MyClass} myClass\n@end\n\n@endcode\n\n@example\n\n@code\n\n@class MyClass\n@extends My",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Response;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;",
        " @param {dom.Element} child\n */\ndom.Element.prototype.append = function(parent, child) {\n  if (this.parentNode === null) {\n    this.parentNode = parent;\n  } else {\n    this.parentNode.appendChild(child);\n  }\n};\n\n/**\n  Remove element from the end of parent childs  @method remove @param {dom.Element} child\n */\ndom.Element.prototype.remove = function(child) {\n  if (this.parentNode === null) {\n    this.parentNode = null;\n  } else {\n    this.parentNode.removeChild(child);\n  }\n};\n\n/**\n  Get element's text content  @method getText @return {string}\n */\ndom.Element.prototype.getText = function() {\n  return this.innerHTML;\n};\n\n/**\n  Get element's text content  @method getText @return {string}\n */\ndom.Element.prototype.innerHTML = function() {\n  return this.textContent;\n};\n\n/**\n  Get element's text content  @method getText @return {string}\n */\ndom.Element.prototype.textContent = function() {\n  return this.innerText;\n};\n\n/**\n  Get element's text content  @method getText",
        " @param {int} index\n */\ndom.Element.prototype.insertBefore = function(parent, child, index) {\n  var childIndex = index;\n  if (childIndex < 0) {\n    childIndex = this.childCount();\n  }\n  if (childIndex > this.childCount()) {\n    childIndex = 0;\n  }\n  var child = this.child(childIndex);\n  if (child.parent() === parent) {\n    parent.insertBefore(child, parent);\n  } else {\n    parent.insertBefore(child, parent.child(childIndex));\n  }\n};\n\n/**\nInsert element to the after of specific, child by index  @method insertAfter @param {dom.Element} parent @param {dom.Element} child @param {int} index\n */\ndom.Element.prototype.insertAfter = function(parent, child, index) {\n  var childIndex = index;\n  if (childIndex < 0) {\n    childIndex = this.childCount();\n  }\n  if (childIndex > this.childCount()) {\n    childIndex = 0;\n  }\n  var child = this.child(childIndex);\n  if (child.parent() === parent) {\n    parent.insertAfter(child, parent);\n  } else {",
        "\n * @param {dom.NodeList} nodeList\n * @param {int} index\n * @return {dom.NodeList}\n */\nfunction changePosition(nodeList, index) {\n  var newNodeList = nodeList.slice(0);\n  newNodeList[index] = nodeList[index].parentNode;\n  return newNodeList;\n}\n\n/**\n * @method removeNode  @method removeNode @param {dom.Node} node\n * @return {dom.Node}\n */\nfunction removeNode(node) {\n  var index = node.parentNode.childNodes.indexOf(node);\n  if (index > -1) {\n    node.parentNode.childNodes.splice(index, 1);\n  }\n  return node;\n}\n\n/**\n * @method insertNode  @method insertNode @param {dom.Node} node\n * @param {int} index\n * @return {dom.Node}\n */\nfunction insertNode(node, index) {\n  var newNode = document.createElement(\"li\");\n  newNode.appendChild(node);\n  newNode.appendChild(document.createTextNode(node.data));\n  node.parentNode.insertBefore(newNode, node);\n  return newNode;\n}\n\n/**\n * @method insertNodeAt  @method insertNodeAt @param {dom",
        " @param {dom.Element} node\n *\n * @method text @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom.Element} text\n * @param {dom.Element} node\n * @param {dom",
        " @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @method getAttribute @prop {String|Object} node @prop {String|Object} prop @prop {String|Object} value\n  @",
        "\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n  @method getAttribute @prop {dom.Element} node @prop {String||Object} prop @return {String} value\n ",
        " @prop {String} attr\n\n  @method removeAttribute @prop {dom.Element} node @prop {String} attr\n\n  @method setAttribute @prop {dom.Element} node @prop {String} attr @prop {String} value\n\n  @method setAttribute @prop {dom.Element} node @prop {String} attr @prop {String} value @prop {String} value\n\n  @method setAttribute @prop {dom.Element} node @prop {String} attr @prop {String} value @prop {String} value @prop {String} value\n\n  @method setAttribute @prop {dom.Element} node @prop {String} attr @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @prop {String} value @",
        " @prop {String|Object} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop @prop {String} value\nSetting css style in to node  @method setStyle @prop {dom.Element} node @prop {String|Object} prop",
        "\n  @param {dom.Element} node\n  @param {String} prop\n  @return {String} value\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @example\n  var style = node.getStyle('color');\n  // style = 'color: red;';\n  @",
        " @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style from node  @method remove @prop {dom.Element} @prop {String} style\n\nRemoving css style",
        " @param {dom.Element} node\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @param {dom.Element} node @param {String} className\n * @method addClass @",
        "\n  @method hasClass @param {dom.Element} node @param {String} className\n  @method hasClass @param {dom.Element} node @param {String} className @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return]\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param {Boolean} [return] @return boolean\n  @method hasClass @param {dom.Element} node @param {String} className @param",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input",
        "\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\nSetting, Getting value to input element  @method val @param {dom.Element} node @param? {String} val @return {String}\n\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\",
        " @param {dom.Element} context\n@method onDOMDetached @param {dom.Element} context\n@method onDOMInserted @param {dom.Element} context\n@method onDOMRemoved @param {dom.Element} context\n@method onDOMChanged @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param {dom.Element} context\n@method onDOMContentLoaded @param",
        ", and return the following value.\n\nIf there is no value, return the following value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf there is a value, return the value.\n\nIf",
        " maybe with the current value.\n\nIf the current value is not a number, return the current value.\n\nIf the current value is a number, return the current value.\n\nIf the current value is a boolean, return the current value.\n\nIf the current value is a string, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a object, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is a function, return the current value.\n\nIf the current value is",
        " null\n\n    def maybe(predicate)\n      if current\n        current.maybe(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_or(predicate)\n      if current\n        current.maybe_or(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_and(predicate)\n      if current\n        current.maybe_and(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_not(predicate)\n      if current\n        current.maybe_not(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_or_not(predicate)\n      if current\n        current.maybe_or_not(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_and_not(predicate)\n      if current\n        current.maybe_and_not(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_or_and_not(predicate)\n      if current\n        current.maybe_or_and_not(predicate)\n      else\n        nil\n      end\n    end\n\n    def maybe_or_and_and_not(predicate)\n      if current\n        current.maybe_or_and_and_not(",
        ".\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is not empty, return the current maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is not empty, return the current maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\nIf the current maybe is empty, return the provided maybe.\n\n",
        " to the new URL.\n\nIf the current URL has not changed, calls `loadUrl`, normalizing across across the hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden hidden",
        "\n    }\n\n    /**\n     * Loads the given URL fragment.\n     *\n     * @param string $fragment The URL fragment to load.\n     * @return mixed The loaded URL fragment.\n     */\n    public function load($fragment)\n    {\n        $url = $this->getUrl($fragment);\n        if ($url) {\n            return $this->loadUrl($url);\n        }\n\n        return null;\n    }\n\n    /**\n     * Loads the given URL fragment.\n     *\n     * @param string $fragment The URL fragment to load.\n     * @return mixed The loaded URL fragment.\n     */\n    public function loadUrl($fragment)\n    {\n        $url = $this->getUrl($fragment);\n        if ($url) {\n            return $this->loadUrl($url);\n        }\n\n        return null;\n    }\n\n    /**\n     * Loads the given URL fragment.\n     *\n     * @param string $url The URL fragment to load.\n     * @return mixed The loaded URL fragment.\n     */\n    public function loadUrl($url)\n    {\n        if (strpos($url, '?') !== false) {\n            $url = substr($url, 0, strpos($url, '?'));\n        }\n\n        if ("
    ],
    "references": [
        [
            "function(identifier){\n            if(!Bella.contains(this.lines, identifier)){\n                this.lines.push(identifier);\n                this.Event.onAddOnlineUser(identifier);\n                return true;\n            }\n            return false;\n        }"
        ],
        [
            "function(value) {\n            value = value || '';\n            return this.setStyle({\n                left : value,\n                right : value,\n                top : value,\n                bottom : value,\n                'z-index' : '',\n                position : STATIC\n            });\n        }"
        ],
        [
            "function() {\n            var me = this,\n                offsetParent = me.dom.offsetParent,\n                x = me.getStyle('left');\n\n            if (!x || x === 'auto') {\n                x = 0;\n            } else if (me.pxRe.test(x)) {\n                x = parseFloat(x);\n            } else {\n                x = me.getX();\n                if (offsetParent) {\n                    x -= Element.getX(offsetParent);\n                }\n            }\n\n            return x;\n        }"
        ],
        [
            "function() {\n            var me = this,\n                offsetParent = me.dom.offsetParent,\n                style = me.getStyle(['left', 'top']),\n                x = style.left,\n                y = style.top;\n\n            if (!x || x === 'auto') {\n                x = 0;\n            } else if (me.pxRe.test(x)) {\n                x = parseFloat(x);\n            } else {\n                x = me.getX();\n                if (offsetParent) {\n                    x -= Element.getX(offsetParent);\n                }\n            }\n\n            if (!y || y === 'auto') {\n                y = 0;\n            } else if (me.pxRe.test(y)) {\n                y = parseFloat(y);\n            } else {\n                y = me.getY();\n                if (offsetParent) {\n                    y -= Element.getY(offsetParent);\n                }\n            }\n\n            return [x, y];\n        }"
        ],
        [
            "function() {\n            var me = this,\n                offsetParent = me.dom.offsetParent,\n                y = me.getStyle('top');\n\n            if (!y || y === 'auto') {\n                y = 0;\n            } else if (me.pxRe.test(y)) {\n                y = parseFloat(y);\n            } else {\n                y = me.getY();\n                if (offsetParent) {\n                    y -= Element.getY(offsetParent);\n                }\n            }\n\n            return y;\n        }"
        ],
        [
            "function(pos, zIndex, x, y) {\n            var me = this;\n\n            if (!pos && me.isStyle(POSITION, STATIC)) {\n                me.setStyle(POSITION, RELATIVE);\n            } else if (pos) {\n                me.setStyle(POSITION, pos);\n            }\n            if (zIndex) {\n                me.setStyle(ZINDEX, zIndex);\n            }\n            if (x || y) {\n                me.setXY([x || false, y || false]);\n            }\n        }"
        ],
        [
            "function(x, y, width, height, animate) {\n            return this.setBox({\n                x: x,\n                y: y,\n                width: width,\n                height: height\n            }, animate);\n        }"
        ],
        [
            "function(left, top) {\n            var me = this,\n                style = me.dom.style;\n\n            style.left = me.addUnits(left);\n            style.top = me.addUnits(top);\n\n            return me;\n        }"
        ],
        [
            "function(rec){\n        var me          = this,\n            node        = me.getNode(rec, true),\n            el          = me.el,\n            adjustmentY = 0,\n            adjustmentX = 0,\n            elRegion    = el.getRegion(),\n            nodeRegion;\n\n        // Viewable region must not include scrollbars, so use\n        // DOM client dimensions\n        elRegion.bottom = elRegion.top + el.dom.clientHeight;\n        elRegion.right = elRegion.left + el.dom.clientWidth;\n        if (node) {\n            nodeRegion = Ext.fly(node).getRegion();\n            // node is above\n            if (nodeRegion.top < elRegion.top) {\n                adjustmentY = nodeRegion.top - elRegion.top;\n            // node is below\n            } else if (nodeRegion.bottom > elRegion.bottom) {\n                adjustmentY = nodeRegion.bottom - elRegion.bottom;\n            }\n\n            // node is left\n            if (nodeRegion.left < elRegion.left) {\n                adjustmentX = nodeRegion.left - elRegion.left;\n            // node is right\n            } else if (nodeRegion.right > elRegion.right) {\n                adjustmentX = nodeRegion.right - elRegion.right;\n            }\n\n            if (adjustmentX || adjustmentY) {\n                me.scrollBy(adjustmentX, adjustmentY, false);\n            }\n            el.focus();\n        }\n    }"
        ],
        [
            "function(card) {\n        var me = this,\n            previous;\n\n        card = me.getComponent(card);\n        if (card) {\n            previous = me.getActiveTab();\n\n            if (previous !== card && me.fireEvent('beforetabchange', me, card, previous) === false) {\n                return false;\n            }\n\n            // We may be passed a config object, so add it.\n            // Without doing a layout!\n            if (!card.isComponent) {\n                Ext.suspendLayouts();\n                card = me.add(card);\n                Ext.resumeLayouts();\n            }\n\n            // MUST set the activeTab first so that the machinery which listens for show doesn't\n            // think that the show is \"driving\" the activation and attempt to recurse into here.\n            me.activeTab = card;\n\n            // Attempt to switch to the requested card. Suspend layouts because if that was successful\n            // we have to also update the active tab in the tab bar which is another layout operation\n            // and we must coalesce them.\n            Ext.suspendLayouts();\n            me.layout.setActiveItem(card);\n\n            // Read the result of the card layout. Events dear boy, events!\n            card = me.activeTab = me.layout.getActiveItem();\n\n            // Card switch was not vetoed by an event listener\n            if (card && card !== previous) {\n\n                // Update the active tab in the tab bar and resume layouts.\n                me.tabBar.setActiveTab(card.tab);\n                Ext.resumeLayouts(true);\n\n                // previous will be undefined or this.activeTab at instantiation\n                if (previous !== card) {\n                    me.fireEvent('tabchange', me, card, previous);\n                }\n            }\n            // Card switch was vetoed by an event listener. Resume layouts (Nothing should have changed on a veto).\n            else {\n                Ext.resumeLayouts(true);\n            }\n            return card;\n        }\n    }"
        ],
        [
            "function() {\n        var me = this,\n            // Ensure the calculated result references a Component\n            result = me.getComponent(me.activeTab);\n\n        // Sanitize the result in case the active tab is no longer there.\n        if (result && me.items.indexOf(result) != -1) {\n            me.activeTab = result;\n        } else {\n            me.activeTab = null;\n        }\n\n        return me.activeTab;\n    }"
        ],
        [
            "function(syncId, blockCb, makeCb, reifyCb, cb){\n\t\t\t_.assertLength(arguments, 5)\n\t\t\t//_.assertFunction(listenerCb)\n\t\t\t//_.assertFunction(objectCb)\n\t\t\t_.assertFunction(blockCb)\n\t\t\t_.assertFunction(makeCb)\n\t\t\t_.assertFunction(reifyCb)\n\t\t\t_.assertFunction(cb);\n\t\t\t_.assertString(syncId)\n\t\t\tvar e = {syncId: syncId};\n\t\t\t//applyRequestId(e, wrapper.bind(undefined, cb, makeCb));\n\n\t\t\tlog('BEGAN SYNC CLIENT')\n\n\t\t\tw.beginSync(e);\n\t\t\t/*syncListenersByRequestId[e.requestId]*/ \n\t\t\tsyncListenersBySyncId[syncId] = {block: blockCb, make: makeCb, reify: reifyCb}\n\t\t\t\n\t\t\tcb(makeSyncHandle(syncId, makeCb))\n\t\t}"
        ],
        [
            "function resize() {\n\t\t\t\tvar deltaSize, d = ed.getDoc(), body = d.body, de = d.documentElement, DOM = tinymce.DOM, resizeHeight = t.autoresize_min_height, myHeight;\n\n\t\t\t\t// Get height differently depending on the browser used\n\t\t\t\tmyHeight = tinymce.isIE ? body.scrollHeight : (tinymce.isWebKit && body.clientHeight == 0 ? 0 : body.offsetHeight);\n\n\t\t\t\t// Don't make it smaller than the minimum height\n\t\t\t\tif (myHeight > t.autoresize_min_height)\n\t\t\t\t\tresizeHeight = myHeight;\n\n\t\t\t\t// If a maximum height has been defined don't exceed this height\n\t\t\t\tif (t.autoresize_max_height && myHeight > t.autoresize_max_height) {\n\t\t\t\t\tresizeHeight = t.autoresize_max_height;\n\t\t\t\t\tbody.style.overflowY = \"auto\";\n\t\t\t\t\tde.style.overflowY = \"auto\"; // Old IE\n\t\t\t\t} else {\n\t\t\t\t\tbody.style.overflowY = \"hidden\";\n\t\t\t\t\tde.style.overflowY = \"hidden\"; // Old IE\n\t\t\t\t\tbody.scrollTop = 0;\n\t\t\t\t}\n\n\t\t\t\t// Resize content element\n\t\t\t\tif (resizeHeight !== oldSize) {\n\t\t\t\t\tdeltaSize = resizeHeight - oldSize;\n\t\t\t\t\tDOM.setStyle(DOM.get(ed.id + '_ifr'), 'height', resizeHeight + 'px');\n\t\t\t\t\toldSize = resizeHeight;\n\n\t\t\t\t\t// WebKit doesn't decrease the size of the body element until the iframe gets resized\n\t\t\t\t\t// So we need to continue to resize the iframe down until the size gets fixed\n\t\t\t\t\tif (tinymce.isWebKit && deltaSize < 0)\n\t\t\t\t\t\tresize();\n\t\t\t\t}\n\t\t\t}"
        ],
        [
            "function LoaderType(options, fn) {\n  if (!(this instanceof LoaderType)) {\n    return new LoaderType(options);\n  }\n  LoaderStack.call(this);\n  this.iterator = new Iterator(options, fn);\n}"
        ],
        [
            "function(oldKey, newKey) {\n        var me = this,\n            map = me.map,\n            indexMap = me.indexMap,\n            index = me.indexOfKey(oldKey),\n            item;\n            \n        if (index > -1) {\n            item = map[oldKey];\n            delete map[oldKey];\n            delete indexMap[oldKey];\n            map[newKey] = item;\n            indexMap[newKey] = index;\n            me.keys[index] = newKey;\n            me.generation++;\n            \n        }\n    }"
        ],
        [
            "function(objs) {\n        var me = this,\n            key;\n\n        if (arguments.length > 1 || Ext.isArray(objs)) {\n            me.insert(me.length, arguments.length > 1 ? arguments : objs);\n        } else {\n            for (key in objs) {\n                if (objs.hasOwnProperty(key)) {\n                    if (me.allowFunctions || typeof objs[key] != 'function') {\n                        me.add(key, objs[key]);\n                    }\n                }\n            }\n        }\n    }"
        ],
        [
            "function(fn, scope){\n        var items = Ext.Array.push([], this.items), // each safe for removal\n            i = 0,\n            len = items.length,\n            item;\n\n        for (; i < len; i++) {\n            item = items[i];\n            if (fn.call(scope || item, item, i, len) === false) {\n                break;\n            }\n        }\n    }"
        ],
        [
            "function(index, keys, objects) {\n        var me = this,\n            itemKey,\n            removeIndex,\n            i, len = keys.length,\n            fireAdd = me.hasListeners.add,\n            syncIndices;\n\n        // External key(s) passed. We cannot reliably find an object's index using the key extraction fn.\n        // Set a flag for use by contains, indexOf and remove\n        if (objects != null) {\n            me.useLinearSearch = true\n        }\n        // No external keys: calculate keys array if not passed\n        else {\n            objects = keys;\n            keys = new Array(len);\n            for (i = 0; i < len; i++) {\n                keys[i] = this.getKey(objects[i]);\n            }\n        }\n\n        // First, remove duplicates of the keys. If a removal point is less than insertion index, decr insertion index\n        me.suspendEvents();\n        for (i = 0; i < len; i++) {\n            // Must use indexOf - map might be out of sync\n            removeIndex = me.indexOfKey(keys[i]);\n            if (removeIndex !== -1) {\n                if (removeIndex < index) {\n                    index--;\n                }\n                me.removeAt(removeIndex);\n            }\n        }\n        me.resumeEvents();\n\n        // If we are appending and the indices are in sync, its cheap to kep them that way\n        syncIndices = index === me.length && me.indexGeneration === me.generation;\n\n        // Insert the new items and new keys in at the insertion point\n        Ext.Array.insert(me.items, index, objects);\n        Ext.Array.insert(me.keys,  index, keys);\n        me.length += len;\n        me.generation++;\n        if (syncIndices) {\n            me.indexGeneration = me.generation;\n        }\n        for (i = 0; i < len; i++, index++) {\n            itemKey = keys[i];\n            if (itemKey != null) {\n                me.map[itemKey] = objects[i];\n\n                // If the index is still in sync, keep it that way\n                if (syncIndices) {\n                    me.indexMap[itemKey] = index;\n                }\n            }\n            if (fireAdd) {\n                me.fireEvent('add', index, objects[i], itemKey);\n            }\n        }\n        return objects;\n    }"
        ],
        [
            "function(o) {\n        var me = this,\n            removeKey,\n            index;\n\n        // If\n        //     We have not been forced into using linear lookup by a usage of the 2 arg form of add\n        // and\n        //     The key extraction function yields a key\n        // Then use indexOfKey. This will use the indexMap - rebuilding it if necessary.\n        if (!me.useLinearSearch && (removeKey = me.getKey(o))) {\n            index = me.indexOfKey(removeKey);\n        }\n\n        // Otherwise we have to do it the slow way with a linear search.\n        else {\n            index = Ext.Array.indexOf(me.items, o);\n        }\n\n        return (index === -1) ? false : me.removeAt(index);\n    }"
        ],
        [
            "function(items) {\n        var me = this, \n            i;\n\n        if (items || me.hasListeners.remove) {\n            // Only perform expensive item-by-item removal if there's a listener or specific items\n            if (items) {\n                for (i = items.length - 1; i >= 0; --i) {\n                    me.remove(items[i]);\n                }\n            } else {\n                while (me.length) {\n                    me.removeAt(0);\n                }\n            }\n        } else {\n            me.length = me.items.length = me.keys.length = 0;\n            me.map = {};\n            me.indexMap = {};\n            me.generation++;\n            me.indexGeneration = me.generation;\n        }\n    }"
        ],
        [
            "function(o) {\n        var me = this,\n            key;\n\n        if (o != null) {\n            // If\n            //     We have not been forced into using linear lookup by a usage of the 2 arg form of add\n            // and\n            //     The key extraction function yields a key\n            // Then use the map to determine object presence.\n            if (!me.useLinearSearch && (key = me.getKey(o))) {\n                return this.map[key] != null;\n            }\n\n            // Fallback: Use linear search\n            return Ext.Array.indexOf(this.items, o) !== -1;\n        }\n        \n        return false;\n    }"
        ],
        [
            "function(property, root, start, end) {\n        var values = this.extractValues(property, root),\n            length = values.length,\n            sum    = 0,\n            i;\n\n        start = start || 0;\n        end   = (end || end === 0) ? end : length - 1;\n\n        for (i = start; i <= end; i++) {\n            sum += values[i];\n        }\n\n        return sum;\n    }"
        ],
        [
            "function(property, root, allowNull) {\n        var values = this.extractValues(property, root),\n            length = values.length,\n            hits   = {},\n            unique = [],\n            value, strValue, i;\n\n        for (i = 0; i < length; i++) {\n            value = values[i];\n            strValue = String(value);\n\n            if ((allowNull || !Ext.isEmpty(value)) && !hits[strValue]) {\n                hits[strValue] = true;\n                unique.push(value);\n            }\n        }\n\n        return unique;\n    }"
        ],
        [
            "function() {\n        var me = this,\n            copy = new this.self(me.initialConfig);\n\n        copy.add(me.keys, me.items);\n        return copy;\n    }"
        ],
        [
            "function(data, force_absolute) {\r\n\t\t\tvar self = this, editor = self.editor, baseUri = editor.documentBaseURI, sources, attrs, img, i;\r\n\r\n\t\t\tdata.params.src = self.convertUrl(data.params.src, force_absolute);\r\n\r\n\t\t\tattrs = data.video.attrs;\r\n\t\t\tif (attrs)\r\n\t\t\t\tattrs.src = self.convertUrl(attrs.src, force_absolute);\r\n\r\n\t\t\tif (attrs)\r\n\t\t\t\tattrs.poster = self.convertUrl(attrs.poster, force_absolute);\r\n\r\n\t\t\tsources = toArray(data.video.sources);\r\n\t\t\tif (sources) {\r\n\t\t\t\tfor (i = 0; i < sources.length; i++)\r\n\t\t\t\t\tsources[i].src = self.convertUrl(sources[i].src, force_absolute);\r\n\t\t\t}\r\n\r\n\t\t\timg = self.editor.dom.create('img', {\r\n\t\t\t\tid : data.id,\r\n\t\t\t\tstyle : data.style,\r\n\t\t\t\talign : data.align,\r\n\t\t\t\thspace : data.hspace,\r\n\t\t\t\tvspace : data.vspace,\r\n\t\t\t\tsrc : self.editor.theme.url + '/img/trans.gif',\r\n\t\t\t\t'class' : 'mceItemMedia mceItem' + self.getType(data.type).name,\r\n\t\t\t\t'data-mce-json' : JSON.serialize(data, \"'\")\r\n\t\t\t});\r\n\r\n\t\t\timg.width = data.width = normalizeSize(data.width || (data.type == 'audio' ? \"300\" : \"320\"));\r\n\t\t\timg.height = data.height = normalizeSize(data.height || (data.type == 'audio' ? \"32\" : \"240\"));\r\n\r\n\t\t\treturn img;\r\n\t\t}"
        ],
        [
            "function(value) {\r\n\t\t\tvar i, values, typeItem;\r\n\r\n\t\t\t// Find type by checking the classes\r\n\t\t\tvalues = tinymce.explode(value, ' ');\r\n\t\t\tfor (i = 0; i < values.length; i++) {\r\n\t\t\t\ttypeItem = this.lookup[values[i]];\r\n\r\n\t\t\t\tif (typeItem)\r\n\t\t\t\t\treturn typeItem;\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function addPlayer(video_src, poster_src) {\r\n\t\t\t\tvar baseUri, flashVars, flashVarsOutput, params, flashPlayer;\r\n\r\n\t\t\t\tflashPlayer = editor.getParam('flash_video_player_url', self.convertUrl(self.url + '/moxieplayer.swf'));\r\n\t\t\t\tif (flashPlayer) {\r\n\t\t\t\t\tbaseUri = editor.documentBaseURI;\r\n\t\t\t\t\tdata.params.src = flashPlayer;\r\n\r\n\t\t\t\t\t// Convert the movie url to absolute urls\r\n\t\t\t\t\tif (editor.getParam('flash_video_player_absvideourl', true)) {\r\n\t\t\t\t\t\tvideo_src = baseUri.toAbsolute(video_src || '', true);\r\n\t\t\t\t\t\tposter_src = baseUri.toAbsolute(poster_src || '', true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Generate flash vars\r\n\t\t\t\t\tflashVarsOutput = '';\r\n\t\t\t\t\tflashVars = editor.getParam('flash_video_player_flashvars', {url : '$url', poster : '$poster'});\r\n\t\t\t\t\ttinymce.each(flashVars, function(value, name) {\r\n\t\t\t\t\t\t// Replace $url and $poster variables in flashvars value\r\n\t\t\t\t\t\tvalue = value.replace(/\\$url/, video_src || '');\r\n\t\t\t\t\t\tvalue = value.replace(/\\$poster/, poster_src || '');\r\n\r\n\t\t\t\t\t\tif (value.length > 0)\r\n\t\t\t\t\t\t\tflashVarsOutput += (flashVarsOutput ? '&' : '') + name + '=' + escape(value);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (flashVarsOutput.length)\r\n\t\t\t\t\t\tdata.params.flashvars = flashVarsOutput;\r\n\r\n\t\t\t\t\tparams = editor.getParam('flash_video_player_params', {\r\n\t\t\t\t\t\tallowfullscreen: true,\r\n\t\t\t\t\t\tallowscriptaccess: true\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\ttinymce.each(params, function(value, name) {\r\n\t\t\t\t\t\tdata.params[name] = \"\" + value;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function(binding){\n        var me = this,\n            keyCode = binding.key,\n            i,\n            len;\n\n        if (me.processing) {\n            me.bindings = bindings.slice(0);\n        }\n        \n        if (Ext.isArray(binding)) {\n            for (i = 0, len = binding.length; i < len; i++) {\n                me.addBinding(binding[i]);\n            }\n            return;\n        }\n\n        me.bindings.push(Ext.apply({\n            keyCode: me.processKeys(keyCode)\n        }, binding));\n    }"
        ],
        [
            "function(binding){\n        var me = this,\n            bindings = me.bindings,\n            len = bindings.length,\n            i, item, keys;\n            \n        if (me.processing) {\n            me.bindings = bindings.slice(0);\n        }\n        \n        keys = me.processKeys(binding.key);\n        for (i = 0; i < len; ++i) {\n            item = bindings[i];\n            if (item.fn === binding.fn && item.scope === binding.scope) {\n                if (binding.alt == item.alt && binding.crtl == item.crtl && binding.shift == item.shift) {\n                    if (Ext.Array.equals(item.keyCode, keys)) {\n                        Ext.Array.erase(me.bindings, i, 1);\n                        return;\n                    }\n                }\n            }\n        }\n    }"
        ],
        [
            "function(binding, event){\n        if (this.checkModifiers(binding, event)) {\n            var key = event.getKey(),\n                handler = binding.fn || binding.handler,\n                scope = binding.scope || this,\n                keyCode = binding.keyCode,\n                defaultEventAction = binding.defaultEventAction,\n                i,\n                len,\n                keydownEvent = new Ext.EventObjectImpl(event);\n\n\n            for (i = 0, len = keyCode.length; i < len; ++i) {\n                if (key === keyCode[i]) {\n                    if (handler.call(scope, key, event) !== true && defaultEventAction) {\n                        keydownEvent[defaultEventAction]();\n                    }\n                    break;\n                }\n            }\n        }\n    }"
        ],
        [
            "function(binding, e) {\n        var keys = ['shift', 'ctrl', 'alt'],\n            i = 0,\n            len = keys.length,\n            val, key;\n\n        for (; i < len; ++i){\n            key = keys[i];\n            val = binding[key];\n            if (!(val === undefined || (val === e[key + 'Key']))) {\n                return false;\n            }\n        }\n        return true;\n    }"
        ],
        [
            "function(key, fn, scope) {\n        var keyCode, shift, ctrl, alt;\n        if (Ext.isObject(key) && !Ext.isArray(key)) {\n            keyCode = key.key;\n            shift = key.shift;\n            ctrl = key.ctrl;\n            alt = key.alt;\n        } else {\n            keyCode = key;\n        }\n        this.addBinding({\n            key: keyCode,\n            shift: shift,\n            ctrl: ctrl,\n            alt: alt,\n            fn: fn,\n            scope: scope\n        });\n    }"
        ],
        [
            "function() {\n        var me = this;\n        \n        if (!me.enabled) {\n            me.target.on(me.eventName, me.handleTargetEvent, me);\n            me.enabled = true;\n        }\n    }"
        ],
        [
            "function() {\n        var me = this;\n        \n        if (me.enabled) {\n            me.target.removeListener(me.eventName, me.handleTargetEvent, me);\n            me.enabled = false;\n        }\n    }"
        ],
        [
            "function(removeTarget) {\n        var me = this,\n            target = me.target;\n\n        me.bindings = [];\n        me.disable();\n        if (removeTarget === true) {\n            if (target.isComponent) {\n                target.destroy();\n            } else {\n                target.remove();\n            }\n        }\n        delete me.target;\n    }"
        ],
        [
            "function () {\n        var me = this,\n            items = me.flushQueue.clear(),\n            length = items.length, i;\n\n        if (length) {\n            ++me.flushCount;\n\n            for (i = 0; i < length; ++i) {\n                items[i].flush();\n            }\n        }\n    }"
        ],
        [
            "function (parent, el) {\n        var id = el.id,\n            children = parent.children,\n            items = this.items;\n\n        if(children) {\n            Ext.Array.remove(children, items[id]);\n        }\n        delete items[id];\n    }"
        ],
        [
            "function () {\n        var me = this,\n            layouts = me.layoutQueue.clear(),\n            length = layouts.length,\n            i;\n\n        ++me.cycleCount;\n\n        // This value is incremented by ContextItem#setProp whenever new values are set\n        // (thereby detecting forward progress):\n        me.progressCount = 0;\n\n        for (i = 0; i < length; ++i) {\n            me.runLayout(me.currentLayout = layouts[i]);\n        }\n\n        me.currentLayout = null;\n\n        return me.progressCount > 0;\n    }"
        ],
        [
            "function (layout) {\n        var me = this,\n            ownerContext = me.getCmp(layout.owner);\n\n        layout.pending = false;\n\n        if (ownerContext.state.blocks) {\n            return;\n        }\n\n        // We start with the assumption that the layout will finish and if it does not, it\n        // must clear this flag. It turns out this is much simpler than knowing when a layout\n        // is done (100% correctly) when base classes and derived classes are collaborating.\n        // Knowing that some part of the layout is not done is much more obvious.\n        layout.done = true;\n\n        ++layout.calcCount;\n        ++me.calcCount;\n\n        layout.calculate(ownerContext);\n\n        if (layout.done) {\n            me.layoutDone(layout);\n\n            if (layout.completeLayout) {\n                me.queueCompletion(layout);\n            }\n            if (layout.finalizeLayout) {\n                me.queueFinalize(layout);\n            }\n        } else if (!layout.pending && !layout.invalid && !(layout.blockCount + layout.triggerCount - layout.firedTriggers)) {\n            // A layout that is not done and has no blocks or triggers that will queue it\n            // automatically, must be queued now:\n            me.queueLayout(layout);\n        }\n    }"
        ],
        [
            "function(item, width, height) {\n        var items = item,\n            len = 1,\n            contextItem, i;\n\n        // NOTE: we don't pre-check for validity because:\n        //  - maybe only one dimension is valid\n        //  - the diagnostics layer will track the setProp call to help find who is trying\n        //      (but failing) to set a property\n        //  - setProp already checks this anyway\n\n        if (item.isComposite) {\n            items = item.elements;\n            len = items.length;\n            item = items[0];\n        } else if (!item.dom && !item.el) { // array by process of elimination\n            len = items.length;\n            item = items[0];\n        }\n        // else len = 1 and items = item (to avoid error on \"items[++i]\")\n\n        for (i = 0; i < len; ) {\n            contextItem = this.get(item);\n            contextItem.setSize(width, height);\n\n            item = items[++i]; // this accomodation avoids making an array of 1\n        }\n    }"
        ],
        [
            "function(model, setOnStore) {\n        var me = this;\n        \n        me.model = Ext.ModelManager.getModel(model);\n\n        me.setReader(this.reader);\n        me.setWriter(this.writer);\n\n        if (setOnStore && me.store) {\n            me.store.setModel(me.model);\n        }\n    }"
        ],
        [
            "function(reader) {\n        var me = this,\n            needsCopy = true,\n            current = me.reader;\n\n        if (reader === undefined || typeof reader == 'string') {\n            reader = {\n                type: reader\n            };\n            needsCopy = false;\n        }\n\n        if (reader.isReader) {\n            reader.setModel(me.model);\n        } else {\n            if (needsCopy) {\n                reader = Ext.apply({}, reader);\n            }\n            Ext.applyIf(reader, {\n                proxy: me,\n                model: me.model,\n                type : me.defaultReaderType\n            });\n\n            reader = Ext.createByAlias('reader.' + reader.type, reader);\n        }\n\n        if (reader !== current && reader.onMetaChange) {\n            reader.onMetaChange = Ext.Function.createSequence(reader.onMetaChange, this.onMetaChange, this);\n        }\n\n        me.reader = reader;\n        return me.reader;\n    }"
        ],
        [
            "function(writer) {\n        var me = this,\n            needsCopy = true;\n            \n        if (writer === undefined || typeof writer == 'string') {\n            writer = {\n                type: writer\n            };\n            needsCopy = false;\n        }\n\n        if (!writer.isWriter) {\n            if (needsCopy) {\n                writer = Ext.apply({}, writer);\n            }\n            Ext.applyIf(writer, {\n                model: me.model,\n                type : me.defaultWriterType\n            });\n\n            writer = Ext.createByAlias('writer.' + writer.type, writer);\n        }\n\n        me.writer = writer;\n\n        return me.writer;\n    }"
        ],
        [
            "function getRequiredFilename (name, callback) {\n  var filepath = path.join(LOG_DIR, name);\n\n  function getStats () {\n\n    fs.stat(filepath, function (err, stats) {\n      if (err) {\n        callback(err, null);\n      } else if (stats && stats.size >= MAX_FILE_SIZE) {\n        createFile();\n      } else {\n        callback(null, name);\n      }\n    });\n  }\n\n  function createFile () {\n    fs.writeFile(filepath, '[]', function (err) {\n      if (err) {\n        callback(err, null);\n      } else {\n        callback(null, name);\n      }\n    });\n  }\n\n  fs.exists(filepath, function (exists) {\n    if (exists) {\n      getStats();\n    } else {\n      createFile();\n    }\n  });\n}"
        ],
        [
            "function getWriteFunction(log) {\n  return function writeLogFile (name, qcb) {\n    var dir = path.join(LOG_DIR, name);\n\n    function readFile (cb) {\n      fs.readFile(dir, cb);\n    }\n\n    function updateLogs (logs, cb) {\n      logs.push(log.toJSON());\n      cb(null, logs);\n    }\n\n    function writeFile (str, cb) {\n      fs.writeFile(dir, str, cb);\n    }\n\n    async.waterfall([\n      readFile,\n      safejson.parse,\n      updateLogs,\n      safejson.stringify,\n      writeFile\n    ], qcb);\n  };\n}"
        ],
        [
            "function getLogsObject (name, callback) {\n  fs.readFile(path.join(LOG_DIR, name), function (err, data) {\n    if (err) {\n      return callback(err, null);\n    }\n\n    safejson.parse(data, function (err, logArray) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      callback(null, {\n        logs: logArray\n      });\n    });\n  });\n}"
        ],
        [
            "function deleteFile(name, callback) {\n  fs.unlink(path.join(LOG_DIR, name), callback);\n}"
        ],
        [
            "function () {\n    this.port = DEFAULT_STUBBATTI_PORT;\n    this.app = express();\n    this.console = global.console;\n\n    var stubbatti = this;\n\n    this.app[KILL_METHOD](KILL_PATH, function (req, res) {\n        res.set('Connection', 'close');\n        res.end();\n\n        stubbatti.stop();\n\n    });\n}"
        ],
        [
            "function bravojs_print()\n{\n  var output=\"\";\n  var i;\n  var stdout;\n\n  for (i=0; i < arguments.length; i++)\n    output += arguments[i] + (i===arguments.length - 1 ? \"\" : \" \");\n  output.replace(/\\t/, \"        \");\n\n  if (typeof window.document != \"undefined\" && (stdout = window.document.getElementById('stdout')))\n  {\n    output += \"\\n\";\n\n    if (typeof stdout.value !== \"undefined\")\n    {\n      stdout.value += output;\n      if (stdout.focus)\n        stdout.focus();\n\n      if (stdout.tagName === \"TEXTAREA\")\n        stdout.scrollTop = stdout.scrollHeight;\n    }\n    else\n    {\n      if (typeof stdout.innerText !== \"undefined\")\n      {\n        stdout.innerText = stdout.innerText.slice(0,-1) + output + \" \"; \t/* IE normalizes trailing newlines away */\n      }\n      else\n        stdout.textContent += output;\n    }\n  }\n  else if (typeof console === \"object\" && console.print)\n  {\n    console.print(output);\n  }\n  else if (typeof console === \"object\" && console.log)\n  {\n    console.log(output);\n  }\n  // WebWorker\n  else if (typeof importScripts === \"function\" && typeof postMessage === \"function\")\n  {\n      postMessage({type: \"log\", data: output});\n  }\n  else\n    alert(\" * BravoJS stdout: \" + output);\n}"
        ],
        [
            "function Setting(settingSpec, settings) {\n    this._settings = settings;\n\n    Object.keys(settingSpec).forEach(function(key) {\n        this[key] = settingSpec[key];\n    }, this);\n\n    this.type = types.getType(this.type);\n    if (this.type == null) {\n        throw new Error('In ' + this.name +\n            ': can\\'t find type for: ' + JSON.stringify(settingSpec.type));\n    }\n\n    if (!this.name) {\n        throw new Error('Setting.name == undefined. Ignoring.', this);\n    }\n\n    if (!this.defaultValue === undefined) {\n        throw new Error('Setting.defaultValue == undefined', this);\n    }\n\n    if (this.onChange) {\n        this.on('change', this.onChange.bind(this))\n    }\n\n    this.set(this.defaultValue);\n}"
        ],
        [
            "function() {\n        var reply = [];\n        this.getSettingNames().forEach(function(setting) {\n            reply.push({\n                'key': setting,\n                'value': this.getSetting(setting).get()\n            });\n        }, this);\n        return reply;\n    }"
        ],
        [
            "function(data) {\n        // We iterate over data rather than keys so we don't forget values\n        // which don't have a setting yet.\n        for (var key in data) {\n            if (data.hasOwnProperty(key)) {\n                var setting = this._settings[key];\n                if (setting) {\n                    var value = setting.type.parse(data[key]);\n                    this.set(key, value);\n                } else {\n                    this.set(key, data[key]);\n                }\n            }\n        }\n    }"
        ],
        [
            "function() {\n        return this.getSettingNames().map(function(key) {\n            return this._settings[key].type.stringify(this.get(key));\n        }.bind(this));\n    }"
        ],
        [
            "function(statuses) {\n        var combined = Status.VALID;\n        for (var i = 0; i < statuses.length; i++) {\n            if (statuses[i].valueOf() > combined.valueOf()) {\n                combined = statuses[i];\n            }\n        }\n        return combined;\n    }"
        ],
        [
            "function defaultArgsProvider(request, callback) {\n    var args  = request.args,\n        params = request.command.params;\n\n    for (var i = 0; i < params.length; i++) {\n        var param = params[i];\n\n        // If the parameter is already valid, then don't ask for it anymore.\n        if (request.getParamStatus(param) != Status.VALID ||\n            // Ask for optional parameters as well.\n            param.defaultValue === null) \n        {\n            var paramPrompt = param.description;\n            if (param.defaultValue === null) {\n                paramPrompt += \" (optional)\";\n            }\n            var value = prompt(paramPrompt, param.defaultValue || \"\");\n            // No value but required -> nope.\n            if (!value) {\n                callback();\n                return;\n            } else {\n                args[param.name] = value;\n            }           \n        }\n    }\n    callback();\n}"
        ],
        [
            "function execute() {\n        command.exec(env, request.args, request);\n        \n        // If the request isn't asnync and isn't done, then make it done.\n        if (!request.isAsync && !request.isDone) {\n            request.done();\n        }\n    }"
        ],
        [
            "function consume_doctype_or_comment (proc_stack) {\n  let html = \"<!\";\n  proc_stack.tSkip(2);\n  html += proc_stack.tAcceptUntil(\">\") + proc_stack.tAccept();\n  return html;\n}"
        ],
        [
            "function consume_opening_or_closing_tag (proc_stack) {\n  proc_stack.tSkip();\n  let is_closing = proc_stack.tSkipIf(\"/\");\n  let tag_name = proc_stack.tAcceptUntilSet(TAG_NAME_DELIMITER).toLocaleLowerCase();\n  if (!/^[a-z0-9]+(-[a-z0-9]+)*(:[a-z0-9]+(-[a-z0-9]+)*)?$/.test(tag_name)) {\n    throw new SyntaxError(`Invalid HTML tag name \"${tag_name}\"`);\n  }\n\n  if (!is_closing && /^zc-/.test(tag_name)) {\n    return consume_directive_tag(proc_stack, tag_name);\n  }\n\n  let parts = []; // Parts are needed for attribute value directives\n\n  let html = \"<\" + (is_closing ? \"/\" : \"\") + tag_name;\n  let done = false;\n  while (!done) {\n    html += proc_stack.tAcceptUntilSet(ATTR_VAL_START_OR_TAG_END_DELIMITER);\n    let c = proc_stack.tAccept();\n    html += c;\n\n    switch (c) {\n    case \"\\\"\":\n      parts.push(html);\n      Array.prototype.push.apply(parts, consume_char_data_with_entity_directives(proc_stack, false, \"\\\"\"));\n      html = proc_stack.tAccept();\n      break;\n\n    case \">\":\n      done = true;\n      break;\n\n    default:\n      throw new Error(`INTERR Invalid char after ATTR_VAL_START_OR_TAG_END_DELIMITER`);\n    }\n  }\n\n  parts.push(html);\n\n  return parts;\n}"
        ],
        [
            "function consume_directive_entity (proc_stack) {\n  let pos = proc_stack._tGetNPos();\n\n  proc_stack.tSkip(4);\n  let directive_name = proc_stack.tAcceptUntil(\"(\");\n  proc_stack.tSkip();\n\n  let raw_args = {};\n  do {\n    proc_stack.tSkipWhile(WHITESPACE);\n    if (proc_stack.tPeek() == \")\") {\n      break;\n    }\n\n    let arg_name = proc_stack.tAcceptUntil(\"=\");\n    proc_stack.tSkip();\n\n    raw_args[arg_name] = consume_char_data_with_entity_directives(proc_stack, true, \",\", \")\");\n  } while (proc_stack.tSkipIf(\",\"));\n\n  if (!proc_stack.tSkipIf(\")\")) {\n    throw new SyntaxError(`HTML directive entity is missing closing parenthesis`);\n  }\n  proc_stack.tSkipIf(\";\");\n\n  return new DirectiveExpr(proc_stack, pos, directive_name, raw_args);\n}"
        ],
        [
            "function (method, path, cb) {\n\n    http.request({hostname: DEFAULT_HOST, port: DEFAULT_PORT, path: path, method: method}, function (res) {\n\n        res.pipe(concat({encoding: 'string'}, function (data) {\n            cb(data, res.headers, res.statusCode);\n        }));\n\n    }).end();\n\n}"
        ],
        [
            "function init() {\r\n\tSXE.initElementDialog('del');\r\n\tif (SXE.currentAction == \"update\") {\r\n\t\tsetFormValue('datetime', tinyMCEPopup.editor.dom.getAttrib(SXE.updateElement, 'datetime'));\r\n\t\tsetFormValue('cite', tinyMCEPopup.editor.dom.getAttrib(SXE.updateElement, 'cite'));\r\n\t\tSXE.showRemoveButton();\r\n\t}\r\n}"
        ],
        [
            "function() {\n        var me = this,\n            obj = me.getStorageObject(),\n            ids = me.getIds(),\n            len = ids.length,\n            i;\n\n        //remove all the records\n        for (i = 0; i < len; i++) {\n            obj.removeItem(me.getRecordKey(ids[i]));\n        }\n\n        //remove the supporting objects\n        obj.removeItem(me.getRecordCounterKey());\n        obj.removeItem(me.getTreeKey());\n        obj.removeItem(me.id);\n\n        // clear the cache\n        me.cache = {};\n    }"
        ],
        [
            "function(packageName, version) {\n            Ext.versions[packageName] = new Version(version);\n            Ext.lastRegisteredVersion = Ext.versions[packageName];\n\n            return this;\n        }"
        ],
        [
            "function(packageName, since, closure, scope) {\n            if (Version.compare(Ext.getVersion(packageName), since) < 1) {\n                closure.call(scope);\n            }\n        }"
        ],
        [
            "function setFromObject(object) {\n  Object.keys(object).forEach((name) => {\n    options[name] = object[name];\n  });\n}"
        ],
        [
            "function addOptions(flags) {\n  Object.keys(options).forEach(function(name) {\n    var dashedName = toDashCase(name);\n    if ((name in parseOptions) && (name in transformOptions)) {\n      flags.option('--' + dashedName + ' [true|false|parse]',\n                   descriptions[name]);\n      flags.on(dashedName, (value) => setOption(dashedName, value));\n    }\n    // If the option value is null then it's not a boolean option and should\n    // be added separately.\n    else if (options[name] !== null) {\n      flags.option('--' + dashedName, descriptions[name]);\n      flags.on(dashedName, () => setOption(dashedName, true));\n    }\n  });\n  flags.option('--referrer <name>',\n    'Bracket output code with System.referrerName=<name>',\n    (name) => {\n      setOption('referrer', name);\n      return name;\n    });\n  flags.option('--type-assertion-module <path>',\n    'Absolute path to the type assertion module.',\n    (path) => {\n      setOption('type-assertion-module', path);\n      return path;\n    });\n  flags.option('--script <fileName>',\n    'Parse as Script (must precede modules)',\n    (fileName) => {\n      options.scripts.push(fileName);\n    });\n}"
        ],
        [
            "function addFeatureOption(name, kind) {\n  if (kind === EXPERIMENTAL)\n    experimentalOptions[name] = true;\n\n  Object.defineProperty(parseOptions, name, {\n    get: function() {\n      return !!options[name];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Object.defineProperty(transformOptions, name, {\n    get: function() {\n      var v = options[name];\n      if (v === 'parse')\n        return false;\n      return v;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  var defaultValue = options[name] || kind === ON_BY_DEFAULT;\n  options[name] = defaultValue;\n  defaultValues[name] = defaultValue;\n}"
        ],
        [
            "function() {\n        this.addEvents(\n            /**\n             * @event change\n             * Fires when the value of a field is changed via the {@link #setValue} method.\n             * @param {Ext.form.field.Field} this\n             * @param {Object} newValue The new value\n             * @param {Object} oldValue The original value\n             */\n            'change',\n            /**\n             * @event validitychange\n             * Fires when a change in the field's validity is detected.\n             * @param {Ext.form.field.Field} this\n             * @param {Boolean} isValid Whether or not the field is now valid\n             */\n            'validitychange',\n            /**\n             * @event dirtychange\n             * Fires when a change in the field's {@link #isDirty} state is detected.\n             * @param {Ext.form.field.Field} this\n             * @param {Boolean} isDirty Whether or not the field is now dirty\n             */\n            'dirtychange'\n        );\n\n        this.initValue();\n        \n        //<debug>\n        var badNames = [\n            'tagName',\n            'nodeName',\n            'children',\n            'childNodes'\n        ], name = this.name;\n            \n        if (name && Ext.Array.indexOf(badNames, name) > -1) {\n            Ext.log.warn(\n                ['It is recommended to not use \"', name, '\" as a field name, because it ',\n                'can cause naming collisions during form submission.'].join('')\n            );\n        }\n        //</debug>\n    }"
        ],
        [
            "function munge(str, options) {\n\n    var aMunged = [];\n    var aChars, i;\n\n    //  initialize default options\n    options = options || {};\n\n    if (options.encoding) {\n        // validate encoding option\n\n        if (encoder.TYPES.indexOf(options.encoding) < 0)\n            throw Error('Invalid encoding option given: ' + options.encoding);\n    } else\n        options.encoding = encoder.DEFAULT;\n\n    if (str) {\n\n        aChars = str.split('');\n\n        for (i in aChars)\n            aMunged[i] = '&#' + encoder[options.encoding](aChars[i]) + ';';\n    }\n\n    return aMunged.join('');\n}"
        ],
        [
            "function() {\r\n\t\t\tvar headerFragment = this._parseHeader(), data = {}, nodes, elm, matches, editor = this.editor;\r\n\r\n\t\t\tfunction getAttr(elm, name) {\r\n\t\t\t\tvar value = elm.attr(name);\r\n\r\n\t\t\t\treturn value || '';\r\n\t\t\t};\r\n\r\n\t\t\t// Default some values\r\n\t\t\tdata.fontface = editor.getParam(\"fullpage_default_fontface\", \"\");\r\n\t\t\tdata.fontsize = editor.getParam(\"fullpage_default_fontsize\", \"\");\r\n\r\n\t\t\t// Parse XML PI\r\n\t\t\telm = headerFragment.firstChild;\r\n\t\t\tif (elm.type == 7) {\r\n\t\t\t\tdata.xml_pi = true;\r\n\t\t\t\tmatches = /encoding=\"([^\"]+)\"/.exec(elm.value);\r\n\t\t\t\tif (matches)\r\n\t\t\t\t\tdata.docencoding = matches[1];\r\n\t\t\t}\r\n\r\n\t\t\t// Parse doctype\r\n\t\t\telm = headerFragment.getAll('#doctype')[0];\r\n\t\t\tif (elm)\r\n\t\t\t\tdata.doctype = '<!DOCTYPE' + elm.value + \">\"; \r\n\r\n\t\t\t// Parse title element\r\n\t\t\telm = headerFragment.getAll('title')[0];\r\n\t\t\tif (elm && elm.firstChild) {\r\n\t\t\t\tdata.metatitle = elm.firstChild.value;\r\n\t\t\t}\r\n\r\n\t\t\t// Parse meta elements\r\n\t\t\teach(headerFragment.getAll('meta'), function(meta) {\r\n\t\t\t\tvar name = meta.attr('name'), httpEquiv = meta.attr('http-equiv'), matches;\r\n\r\n\t\t\t\tif (name)\r\n\t\t\t\t\tdata['meta' + name.toLowerCase()] = meta.attr('content');\r\n\t\t\t\telse if (httpEquiv == \"Content-Type\") {\r\n\t\t\t\t\tmatches = /charset\\s*=\\s*(.*)\\s*/gi.exec(meta.attr('content'));\r\n\r\n\t\t\t\t\tif (matches)\r\n\t\t\t\t\t\tdata.docencoding = matches[1];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Parse html attribs\r\n\t\t\telm = headerFragment.getAll('html')[0];\r\n\t\t\tif (elm)\r\n\t\t\t\tdata.langcode = getAttr(elm, 'lang') || getAttr(elm, 'xml:lang');\r\n\t\r\n\t\t\t// Parse stylesheet\r\n\t\t\telm = headerFragment.getAll('link')[0];\r\n\t\t\tif (elm && elm.attr('rel') == 'stylesheet')\r\n\t\t\t\tdata.stylesheet = elm.attr('href');\r\n\r\n\t\t\t// Parse body parts\r\n\t\t\telm = headerFragment.getAll('body')[0];\r\n\t\t\tif (elm) {\r\n\t\t\t\tdata.langdir = getAttr(elm, 'dir');\r\n\t\t\t\tdata.style = getAttr(elm, 'style');\r\n\t\t\t\tdata.visited_color = getAttr(elm, 'vlink');\r\n\t\t\t\tdata.link_color = getAttr(elm, 'link');\r\n\t\t\t\tdata.active_color = getAttr(elm, 'alink');\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\t\t}"
        ],
        [
            "function() {\n        var me = this,\n            menuTrigger = me.menuTrigger,\n            names = me.layout.names;\n\n        // The rendering flag is set when getRenderTree is called which we do when returning markup string for the owning layout's \"suffix\"\n        if (menuTrigger.rendering) {\n            menuTrigger.finishRender();\n            me.triggerTotalWidth = menuTrigger[names.getWidth]() + menuTrigger.el.getMargin(names.parallelMargins);\n        }\n    }"
        ],
        [
            "function(width, height) {\n        var me = this;\n        me.target.setSize(width, height);\n        me.fireEvent('resize', me, width, height, null);\n    }"
        ],
        [
            "function(date, format) {\n        var formatFunctions = utilDate.formatFunctions;\n\n        if (!Ext.isDate(date)) {\n            return '';\n        }\n\n        if (formatFunctions[format] == null) {\n            utilDate.createFormat(format);\n        }\n\n        return formatFunctions[format].call(date) + '';\n    }"
        ],
        [
            "function(date) {\n        var num = 0,\n            d = Ext.Date.clone(date),\n            m = date.getMonth(),\n            i;\n\n        for (i = 0, d.setDate(1), d.setMonth(0); i < m; d.setMonth(++i)) {\n            num += utilDate.getDaysInMonth(d);\n        }\n        return num + date.getDate() - 1;\n    }"
        ],
        [
            "function() {\n        var nativeDate = window.Date,\n            p,\n            statics = ['useStrict', 'formatCodeToRegex', 'parseFunctions', 'parseRegexes', 'formatFunctions', 'y2kYear', 'MILLI', 'SECOND', 'MINUTE', 'HOUR', 'DAY', 'MONTH', 'YEAR', 'defaults', 'dayNames', 'monthNames', 'monthNumbers', 'getShortMonthName', 'getShortDayName', 'getMonthNumber', 'formatCodes', 'isValid', 'parseDate', 'getFormatCode', 'createFormat', 'createParser', 'parseCodes'],\n            proto = ['dateFormat', 'format', 'getTimezone', 'getGMTOffset', 'getDayOfYear', 'getWeekOfYear', 'isLeapYear', 'getFirstDayOfMonth', 'getLastDayOfMonth', 'getDaysInMonth', 'getSuffix', 'clone', 'isDST', 'clearTime', 'add', 'between'],\n            sLen    = statics.length,\n            pLen    = proto.length,\n            stat, prot, s;\n\n        //Append statics\n        for (s = 0; s < sLen; s++) {\n            stat = statics[s];\n            nativeDate[stat] = utilDate[stat];\n        }\n\n        //Append to prototype\n        for (p = 0; p < pLen; p++) {\n            prot = proto[p];\n            nativeDate.prototype[prot] = function() {\n                var args = Array.prototype.slice.call(arguments);\n                args.unshift(this);\n                return utilDate[prot].apply(utilDate, args);\n            };\n        }\n    }"
        ],
        [
            "function readSync() {\n    const TLS_CERT = process.env.TLS_CERT;\n    const TLS_KEY = process.env.TLS_KEY;\n    const TLS_CA = process.env.TLS_CA;\n    const tls_cert = readOpt(\"--tls-cert\");\n    const tls_key = readOpt(\"--tls-key\");\n    const tls_ca = readOpt(\"--tls-ca\");\n    const result = {\n        secureOptions: constants.SSL_OP_NO_TLSv1\n    };    \n\n    if (tls_cert) {\n        if (tls_key) {\n            result.cert = fs.readFileSync(tls_cert);\n            result.key = fs.readFileSync(tls_key);\n\n            if (tls_ca) {\n                result.ca = fs.readFileSync(tls_ca);\n            }\n        } else {\n            result.pfx = fs.readFileSync(tls_cert);\n        }\n    } else if (TLS_CERT) {\n        if (TLS_KEY) {\n            result.cert = fs.readFileSync(TLS_CERT);\n            result.key = fs.readFileSync(TLS_KEY);\n\n            if (TLS_CA) {\n                result.ca = fs.readFileSync(TLS_CA);\n            }\n        } else {\n            result.pfx = fs.readFileSync(TLS_CERT);\n        }\n    }\n\n    return result;\n}"
        ],
        [
            "function read() {\n    const TLS_CERT = process.env.TLS_CERT;\n    const TLS_KEY = process.env.TLS_KEY;\n    const TLS_CA = process.env.TLS_CA;\n    const tls_cert = readOpt(\"--tls-cert\");\n    const tls_key = readOpt(\"--tls-key\");\n    const tls_ca = readOpt(\"--tls-ca\");\n    const result = {};\n\n    if (tls_cert) {\n        if (tls_key) {\n            result.cert = readFile(tls_cert);\n            result.key = readFile(tls_key);\n\n            if (tls_ca) {\n                result.ca = readFile(tls_ca);\n            }\n        } else {\n            result.pfx = readFile(tls_cert);\n        }\n    } else if (TLS_CERT) {\n        if (TLS_KEY) {\n            result.cert = readFile(TLS_CERT);\n            result.key = readFile(TLS_KEY);\n\n            if (TLS_CA) {\n                result.ca = readFile(TLS_CA);\n            }\n        } else {\n            result.pfx = readFile(TLS_CERT);\n        }\n    }\n\n    return Promise.all(keys(result).map(key => result[key].then(data => {\n        return result[key] = data;\n    }))).then(() => result);\n}"
        ],
        [
            "function readOpt(option) {\n    const prefix = `${option}=`;\n\n    for (let i = 0, len = process.argv.length, arg; i < len; i++) {\n        arg = process.argv[i];\n\n        if (arg === option) {\n            return process.argv[i+1];\n        } else if (arg.indexOf(prefix) === 0) {\n            return arg.substr(prefix.length);\n        }\n    }\n}"
        ],
        [
            "function(target) {\n        var me = this,\n            anims = [],\n            timeline = me.timeline,\n            ln = timeline.length,\n            anim, easing, damper, attrs, i;\n\n        if (me.fireEvent('beforeanimate', me) !== false) {\n            for (i = 0; i < ln; i++) {\n                anim = timeline[i];\n                attrs = anim.attrs;\n                easing = attrs.easing || me.easing;\n                damper = attrs.damper || me.damper;\n                delete attrs.easing;\n                delete attrs.damper;\n                anim = new Ext.fx.Anim({\n                    target: target,\n                    easing: easing,\n                    damper: damper,\n                    duration: anim.duration,\n                    paused: true,\n                    to: attrs\n                });\n                anims.push(anim);\n            }\n            me.animations = anims;\n            me.target = anim.target;\n            for (i = 0; i < ln - 1; i++) {\n                anim = anims[i];\n                anim.nextAnim = anims[i + 1];\n                anim.on('afteranimate', function() {\n                    this.nextAnim.paused = false;\n                });\n                anim.on('afteranimate', function() {\n                    this.fireEvent('keyframe', this, ++this.keyframeStep);\n                }, me);\n            }\n            anims[ln - 1].on('afteranimate', function() {\n                this.lastFrame();\n            }, me);\n        }\n    }"
        ],
        [
            "function() {\n        var me = this,\n            chart = me.chart,\n            store = chart.getChartStore(),\n            data = store.data.items,\n            count = me.getRecordCount(),\n            i, ln, record,\n            min, max,\n            xField = me.xField,\n            xValue;\n\n        if (count > 0) {\n            min = Infinity;\n            max = -min;\n                \n            for (i = 0, ln = data.length; i < ln; i++) {\n                record = data[i];\n                xValue = record.get(xField);\n                if (xValue > max) {\n                    max = xValue;\n                }\n                if (xValue < min) {\n                    min = xValue;\n                }\n            }\n            \n            // If we made no progress, treat it like a category axis\n            if (min == Infinity) {\n                min = 0;\n            }\n            \n            if (max == -Infinity) {\n                max = count - 1;\n            }\n        } else {\n            min = max = 0;\n        }\n        return [min, max];\n    }"
        ],
        [
            "function(title) {\n        var me = this,\n            titleCmp = me.titleCmp;\n\n        me.title = title;\n        if (titleCmp.rendered) {\n            titleCmp.textEl.update(me.title || '&#160;');\n            titleCmp.updateLayout();\n        } else {\n            me.titleCmp.on({\n                render: function() {\n                    me.setTitle(title);\n                },\n                single: true\n            });\n        }\n    }"
        ],
        [
            "function(cls) {\n        var me = this,\n            isEmpty = !cls || !cls.length,\n            iconCmp = me.iconCmp;\n\n        me.iconCls = cls;\n        if (!me.iconCmp && !isEmpty) {\n            me.initIconCmp();\n            me.insert(0, me.iconCmp);\n        } else if (iconCmp) {\n            if (isEmpty) {\n                me.iconCmp.destroy();\n                delete me.iconCmp;\n            } else {\n                iconCmp.removeCls(iconCmp.iconCls);\n                iconCmp.addCls(cls);\n                iconCmp.iconCls = cls;\n            }\n        }\n    }"
        ],
        [
            "function(icon) {\n        var me = this,\n            isEmpty = !icon || !icon.length,\n            iconCmp = me.iconCmp;\n\n        me.icon = icon;\n        if (!me.iconCmp && !isEmpty) {\n            me.initIconCmp();\n            me.insert(0, me.iconCmp);\n        } else if (iconCmp) {\n            if (isEmpty) {\n                me.iconCmp.destroy();\n                delete me.iconCmp;\n            } else {\n                iconCmp.setSrc(me.icon);\n            }\n        }\n    }"
        ],
        [
            "function(glyph) {\n        var me = this,\n            iconCmp = me.iconCmp;\n        \n        if (!me.iconCmp) {\n            me.initIconCmp();\n            me.insert(0, me.iconCmp);\n        } else if (iconCmp) {\n            if (glyph) {\n                me.iconCmp.setGlyph(glyph);\n            } else {\n                me.iconCmp.destroy();\n                delete me.iconCmp;\n            }\n        }\n    }"
        ],
        [
            "function (item, checked) {\n        var value = [];\n        this.items.each(function(item){\n            if (item.checked) {\n                value.push(item.value);\n            }\n        });\n        this.selected = value;\n\n        this.fireEvent('checkchange', item, checked);\n    }"
        ],
        [
            "function isType (type, val) {\n  return (type == Any)\n      || (type == Object && is.object(val))\n      || (type == Function && is.function(val))\n      || (type == String && is.string(val))\n      || (type == Error && is.error(val))\n      || (type == Number && is.number(val))\n      || (type == Array && is.array(val))\n      || (type == Boolean && is.boolean(val))\n      || (type == RegExp && is.regExp(val))\n      || (type == Date && is.date(val))\n      || (type == null && is.nullOrUndefined(val))\n      || (val instanceof type)\n}"
        ],
        [
            "function findMorph (args, morphs) {\n  for (var i = 0; i < morphs.length; i++) {\n    var sig = morphs[i].sig\n\n    if (args.length == sig.length) {\n      var matched = true\n\n      for (var j = 0; j < sig.length; j++) {\n        if (!isType(sig[j], args[j])) {\n          matched = false\n          break\n        }\n      }\n\n      if (matched) {\n        return morphs[i]\n      }\n    }\n  }\n  throw new Error('No matching function signature')\n}"
        ],
        [
            "function generateAssignStateOutOfFinally(enclosingFinally, destination) {\n  var finallyState = enclosingFinally.finallyState;\n  // $ctx.state = finallyState;\n  // $fallThrough = destination;\n  return createStatementList(\n      createAssignStateStatement(finallyState),\n      parseStatement `$ctx.finallyFallThrough = ${destination}`);\n}"
        ],
        [
            "function directory_path () {\n      pending++\n      readdir(entry, (err, children) => {\n        if (err) return done(err)\n\n        // Push children into pipeline, order is not important\n        for (var i = children.length; i--;) {\n          if (path !== null && base !== null) {\n            files.push({ base, path: join(path, children[i]) })\n          } else if (path !== null) {\n            files.push({ base: null, path: join(path, children[i]) })\n          } else {\n            files.push({ base, path: children[i] })\n          }\n        }\n\n        // Filter directory out of pipeline after adding children files\n        pending--\n        done(null, null)\n      })\n    }"
        ],
        [
            "function file_path () {\n      pending++\n      for (var i = globs.length; i--;) {\n        const glob = globs[i]\n        const glob_full = glob.glob\n        const glob_base = glob.base\n        const glob_negated = glob.negated\n        const glob_pattern = glob.pattern\n        if (entry === glob_full || mm.isMatch(entry, glob_pattern, ALLOW)) {\n          return done(null, file)\n        }\n      }\n\n      // Did not match globs\n      pending--\n      done(null, null)\n    }"
        ],
        [
            "function extend(a, b, noClone) { // A extends B\n  a = a || {};\n  \n  if(typeof a !== 'object' || typeof a.length !== 'undefined'){\n    return b;\n  }\n  \n  if(typeof b !== 'object'){\n    return b;\n  }\n  \n  if(!noClone){\n    a = clone(a);\n  }\n  \n  var bk = Object.keys(b);\n  for(var i = 0, c = bk.length; i < c; i++){\n    var key = bk[i];\n    if (!a.hasOwnProperty(key) || !(typeof b[key] === 'object' && typeof b[key].length === 'undefined') && typeof b[key] !== 'function') { // Simple types\n      a[key] = b[key];\n    } else { // Complex types\n      a[key] = extend(a[key], b[key]);\n    }\n  }\n\n  return a;\n}"
        ],
        [
            "function clone(o){\n  var c = {};\n  var h = Object.keys(o);\n  for(var i = 0, co = h.length; i < co; i++){\n    c[h[i]] = o[h[i]];\n  }\n  return c;\n}"
        ],
        [
            "function fixPath(string){\n  if(string.length < 1){\n    return string;\n  }\n  \n  if(string.charAt(string.length-1) !== path.sep){\n    string += path.sep;\n  }\n  return string;\n}"
        ],
        [
            "function stringify(string, params, noError) {\n  var arr = string.split(':');\n  var param;\n  for(var i = 0, c = arr.length; i < c; i++) {\n    param = arr[i];\n    if(i % 2){\n      if(!(typeof params[param] === 'string' || typeof params[param] === 'number')){\n        if(!noError){\n          throw new Error('Variable ' + param + ' not defined');\n        }\n      } else {\n        arr[i] = params[param];\n      }\n    }\n  }\n  return arr.join('');\n}"
        ],
        [
            "function cleanCallback(errorCallback, callback){\n  var self = this || {};\n  if(!callback){\n    return function(err){ // remove other variables\n      if(err && self.log){\n        self.log('error',err);\n      }\n      errorCallback(err);\n    }\n  }\n  \n  return function(err){\n    if(err){\n      if(self.log){\n        self.log('error',err);\n      }\n      errorCallback(err);\n      return;\n    }\n    callback.apply(callback, Array.prototype.slice.call(arguments,1));\n  }\n}"
        ],
        [
            "function iterateElements(array) {\n  var index = 0;\n  var rv = {};\n  rv[Symbol.iterator] = {\n      next() {\n        if (index < array.length)\n          return {value: array[index++], done: false};\n        return {done: true};\n      }\n    }\n  }"
        ],
        [
            "function(fo,clear)\n    {\n        this.filters = fo;\n        \n        if(this.filters && this.filterFields)\n        {\n            //Delete filters that doesn't match with any field\n            for(var fn in this.filters)\n            {\n                if(!this.filterFields[fn])\n                    delete this.filters[fn];\n            }\n            \n            for(var fn in this.filterFields)\n            {\n                var field = this.filterFields[fn];\n                var value = this.filters[field.filterName];\n                if(Ext.isEmpty(value))\n                {\n                    if(clear)\n                        this.setFieldValue(field, '');\n                }\n                else\n                    this.setFieldValue(field, value);\n            }\n        }\n    }"
        ],
        [
            "function GedcomXDate(str) {\n\n  if(str == '') {\n    throw new Error('Invalid Date');\n  }\n\n  if(str.charAt(0) == 'R') {\n    return new Recurring(str);\n  } else if(/\\//.test(str)) {\n    return new Range(str);\n  } else if(str.charAt(0) == 'A') {\n    return new Approximate(str);\n  } else {\n    return new Simple(str);\n  }\n}"
        ],
        [
            "function(toClose) {\n        var me = this;\n        if (toClose.active && me.items.getCount() > 1) {\n            return (me.previousTab && me.previousTab !== toClose && !me.previousTab.disabled) ? me.previousTab : (toClose.next('tab[disabled=false]') || toClose.prev('tab[disabled=false]'));\n        }\n    }"
        ],
        [
            "function (autoRender, config) {\n            if (!tip) {\n                if (!Ext.isReady) {\n                    Ext.onReady(function(){\n                        Ext.tip.QuickTipManager.init(autoRender, config);\n                    });\n                    return;\n                }\n\n                var tipConfig = Ext.apply({ disabled: disabled, id: 'ext-quicktips-tip' }, config),\n                    className = tipConfig.className,\n                    xtype = tipConfig.xtype;\n\n                if (className) {\n                    delete tipConfig.className;\n                } else if (xtype) {\n                    className = 'widget.' + xtype;\n                    delete tipConfig.xtype;\n                }\n\n                if (autoRender !== false) {\n                    tipConfig.renderTo = document.body;\n\n                    //<debug>\n                    if (tipConfig.renderTo.tagName.toUpperCase() != 'BODY') { // e.g., == 'FRAMESET'\n                        Ext.Error.raise({\n                            sourceClass: 'Ext.tip.QuickTipManager',\n                            sourceMethod: 'init',\n                            msg: 'Cannot init QuickTipManager: no document body'\n                        });\n                    }\n                    //</debug>\n                }\n\n                tip = Ext.create(className || 'Ext.tip.QuickTip', tipConfig);\n\n                // private.\n                // Need a globally accessble way of testing whether QuickTipsManager is both loaded AND initialized.\n                Ext.quickTipsActive = true;\n            }\n        }"
        ],
        [
            "function(el, id) {\n        var me = this,\n            childEls = me.getChildEls(),\n            baseId, childName, i, selector, value;\n\n        baseId = (id || me.id) + '-';\n        for (i = childEls.length; i--; ) {\n            childName = childEls[i];\n\n            if (typeof childName == 'string') {\n                // We don't use Ext.get because that is 3x (or more) slower on IE6-8. Since\n                // we know the el's are children of our el we use getById instead:\n                value = el.getById(baseId + childName);\n            } else {\n                if ((selector = childName.select)) {\n                    value = Ext.select(selector, true, el.dom); // a CompositeElement\n                } else if ((selector = childName.selectNode)) {\n                    value = Ext.get(Ext.DomQuery.selectNode(selector, el.dom));\n                } else {\n                    // see above re:getById...\n                    value = el.getById(childName.id || (baseId + childName.itemId));\n                }\n\n                childName = childName.name;\n            }\n\n            me[childName] = value;\n        }\n    }"
        ],
        [
            "function (testFn) {\n        var me = this,\n            old = me.getChildEls(),\n            keepers = (me.childEls = []),\n            n, i, cel;\n\n        for (i = 0, n = old.length; i < n; ++i) {\n            cel = old[i];\n            if (!testFn(cel)) {\n                keepers.push(cel);\n            }\n        }\n    }"
        ],
        [
            "function multiFieldSort(array, sortBy) {\n\tarray.sort((a, b) => {\n\t\tfor (let field of sortBy) {\n\t\t\tlet reverse = field[0] === '-';\n\t\t\tif (reverse) {\n\t\t\t\tfield = field.slice(1);\n\t\t\t}\n\t\t\tlet valueA = getPath(a, field);\n\t\t\tlet valueB = getPath(b, field);\n\t\t\tif (reverse) {\n\t\t\t\tif (valueA > valueB) return -1;\n\t\t\t\telse if (valueA < valueB) return 1;\n\t\t\t} else {\n\t\t\t\tif (valueA > valueB) return 1;\n\t\t\t\telse if (valueA < valueB) return -1;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t});\n\treturn array;\n}"
        ],
        [
            "function protect_split(separator, str) {\n\t\tvar sep = '######';\n\n\t\tvar string = false;\n\t\tvar nb_brackets = 0;\n\t\tvar new_str = \"\";\n\t\tfor (var i = 0 ; i < str.length ; i++) {\n\t\t\tif (!string && /['\"`]/.test(str[i])) string = str[i];\n\t\t\telse if (string && str[i] == string) string = false;\n\t\t\telse if (!string && str[i] == '(') nb_brackets ++;\n\t\t\telse if (!string && str[i] == ')') nb_brackets --;\n\n\t\t\tif (str[i] == separator && (nb_brackets > 0 || string)) new_str += sep;\n\t\t\telse new_str += str[i];\n\t\t}\n\t\tstr = new_str;\n\n\t\tstr = str.split(separator);\n\t\tstr = str.map(function (item) {\n\t\t\treturn trim(item.replace(new RegExp(sep, 'g'), separator));\n\t\t});\n\n\t\treturn str;\n\t}"
        ],
        [
            "function () {\n\t\t\tif (/\\w/.test(this.currentChar)) return this.readWord();\n\t\t\tif (/[\"'`]/.test(this.currentChar)) return this.readString();\n\t\t\tif (/[()]/.test(this.currentChar)) return this.readGroupSymbol();\n\t\t\tif (/[!=<>]/.test(this.currentChar)) return this.readOperator();\n\n\t\t\tif (this.currentChar === \"\") return {type: 'eot', value: ''};\n\t\t\telse {\n\t\t\t\tthis.readNextChar();\n\t\t\t\treturn {type: 'empty', value: ''};\n\t\t\t}\n\t\t}"
        ],
        [
            "function () {\n\t\t\tvar astNode = \"\";\n\n\t\t\t// If this is a word/string, return its value\n\t\t\tif (this.currentToken.type == 'word' || this.currentToken.type == 'string') {\n\t\t\t\tastNode = this.currentToken.value;\n\t\t\t\tthis.readNextToken();\n\t\t\t}\n\t\t\t// If this is a group, skip brackets and parse the inside\n\t\t\telse if (this.currentToken.type == 'group') {\n\t\t\t\tthis.readNextToken();\n\t\t\t\tastNode = this.parseExpressionsRecursively();\n\t\t\t\tthis.readNextToken();\n\t\t\t}\n\n\t\t\treturn astNode;\n\t\t}"
        ],
        [
            "function diffText(a,b){\n\tvar changes = []\n\tvar text = a\n\twhile(text !== b){\n\t\tvar c = partiallyDiffText(text,b)\n\t\tif(c.type === 'add'){\n\t\t\ttext = text.substr(0,c.index)+c.value+text.substr(c.index)\n\t\t}else{\n\t\t\ttext = text.substr(0,c.index)+text.substr(c.index+c.many)\n\t\t}\n\t\tchanges.push(c)\n\t}\n\t\n\treturn changes\n}"
        ],
        [
            "function(store, initial){\n        var me = this;\n        me.mixins.bindable.bindStore.apply(me, arguments);\n        if(me.store && !initial) {\n            me.refresh();\n        }\n    }"
        ],
        [
            "function(suppressEvent) {\n        var me = this,\n            selections = me.store.getRange(),\n            i = 0,\n            len = selections.length,\n            start = me.getSelection().length;\n\n        me.bulkChange = true;\n        for (; i < len; i++) {\n            me.doSelect(selections[i], true, suppressEvent);\n        }\n        delete me.bulkChange;\n        // fire selection change only if the number of selections differs\n        me.maybeFireSelectionChange(me.getSelection().length !== start);\n    }"
        ],
        [
            "function(record, e, keepExisting) {\n        var me = this,\n            isSelected = me.isSelected(record);\n\n        switch (me.selectionMode) {\n            case 'MULTI':\n                if (e.shiftKey && me.selectionStart) {\n                    me.selectRange(me.selectionStart, record, e.ctrlKey);\n                } else if (e.ctrlKey && isSelected) {\n                    me.doDeselect(record, false);\n                } else if (e.ctrlKey) {\n                    me.doSelect(record, true, false);\n                } else if (isSelected && !e.shiftKey && !e.ctrlKey && me.selected.getCount() > 1) {\n                    me.doSelect(record, keepExisting, false);\n                } else if (!isSelected) {\n                    me.doSelect(record, false);\n                }\n                break;\n            case 'SIMPLE':\n                if (isSelected) {\n                    me.doDeselect(record);\n                } else {\n                    me.doSelect(record, true);\n                }\n                break;\n            case 'SINGLE':\n                // if allowDeselect is on and this record isSelected, deselect it\n                if (me.allowDeselect && isSelected) {\n                    me.doDeselect(record);\n                // select the record and do NOT maintain existing selections\n                } else {\n                    me.doSelect(record, false);\n                }\n                break;\n        }\n\n        // selectionStart is a start point for shift/mousedown to create a range from.\n        // If the mousedowned record was not already selected, then it becomes the\n        // start of any range created from now on.\n        // If we drop to no records selected, then there is no range start any more.\n        if (!e.shiftKey) {\n            if (me.isSelected(record)) {\n                me.selectionStart = record;\n            } else {\n                me.selectionStart = null;\n            }\n        }\n    }"
        ],
        [
            "function(e, record) {\n        var me = this,\n            recIdx,\n            fromIdx,\n            isSelected = me.isSelected(record),\n            from = (me.selectionStart && me.isSelected(me.lastFocused)) ? me.selectionStart : (me.selectionStart = me.lastFocused),\n            key = e.getCharCode(),\n            isSpace = key === e.SPACE,\n            direction = key === e.UP || key === e.PAGE_UP ? 'up' : (key === e.DOWN || key === e.DOWN ? 'down' : null);\n\n        switch (me.selectionMode) {\n            case 'MULTI':\n                \n                if (isSpace) {\n                    // SHIFT+SPACE, select range\n                    if (e.shiftKey) {\n                        me.selectRange(from, record, e.ctrlKey);\n                    } else {\n                        // SPACE pessed on a selected item: deselect but leave it focused.\n                        // e.ctrlKey means \"keep existing\"\n                        if (isSelected) {\n                            me.doDeselect(record, e.ctrlKey);\n\n                            // This record is already focused. To get the focus effect put on it (as opposed to selected)\n                            // we have to focus null first.\n                            me.setLastFocused(null);\n                            me.setLastFocused(record);\n                        }\n                        // SPACE on an unselected item: select it\n                        else {\n                            me.doSelect(record, e.ctrlKey);\n                        }\n                    }\n                }\n\n                // SHIFT-navigate selects intervening rows from the last selected (or last focused) item and target item\n                else if (e.shiftKey && from) {\n\n                    // If we are going back *into* the selected range, we deselect.\n                    fromIdx = me.store.indexOf(from);\n                    recIdx = me.store.indexOf(record);\n\n                    // If we are heading back TOWARDS the start rec - deselect skipped range...\n                    if (direction === 'up' && fromIdx <= recIdx) {\n                        me.deselectRange(me.lastFocused, recIdx + 1);\n                    }\n                    else if (direction === 'down' && fromIdx >= recIdx) {\n                        me.deselectRange(me.lastFocused, recIdx - 1);\n                    }\n\n                    // If we are heading AWAY from start point, or no CTRL key, so just select the range and let the CTRL control \"keepExisting\"...\n                    else if (from !== record) {\n                        me.selectRange(from, record, e.ctrlKey);\n                    }\n                    me.lastSelected = record;\n                    me.setLastFocused(record);\n                }\n\n                // CTRL-navigate onto a selected item just focuses it\n                else if (e.ctrlKey && isSelected) {\n                    me.setLastFocused(record);\n                }\n\n                // CTRL-navigate, just move focus\n                else if (e.ctrlKey) {\n                    me.setLastFocused(record);\n                }\n\n                // Just navigation - select the target\n                else {\n                    me.doSelect(record, false);\n                }\n                break;\n            case 'SIMPLE':\n                if (isSelected) {\n                    me.doDeselect(record);\n                } else {\n                    me.doSelect(record, true);\n                }\n                break;\n            case 'SINGLE':\n                // Space hit\n                if (isSpace) {\n                    if (isSelected) {\n                        me.doDeselect(record);\n                        me.setLastFocused(record);\n                    } else {\n                        me.doSelect(record);\n                    }\n                }\n\n                // CTRL-navigation: just move focus\n                else if (e.ctrlKey) {\n                    me.setLastFocused(record);\n                }\n\n                // if allowDeselect is on and this record isSelected, deselect it\n                else if (me.allowDeselect && isSelected) {\n                    me.doDeselect(record);\n                }\n                \n                // select the record and do NOT maintain existing selections\n                else {\n                    me.doSelect(record, false);\n                }\n                break;\n        }\n\n        // selectionStart is a start point for shift/mousedown to create a range from.\n        // If the mousedowned record was not already selected, then it becomes the\n        // start of any range created from now on.\n        // If we drop to no records selected, then there is no range start any more.\n        if (!e.shiftKey) {\n            if (me.isSelected(record)) {\n                me.selectionStart = record;\n            }\n        }\n    }"
        ],
        [
            "function(fireEvent) {\n        var me = this;\n        if (fireEvent && !me.bulkChange) {\n            me.fireEvent('selectionchange', me, me.getSelection());\n        }\n    }"
        ],
        [
            "function(record) {\n        record = Ext.isNumber(record) ? this.store.getAt(record) : record;\n        return this.selected.contains(record);\n    }"
        ],
        [
            "function(store, records, indexes, isMove) {\n        var me = this;\n\n        // If the selection start point is among records being removed, we no longer have a selection start point.\n        if (me.selectionStart && Ext.Array.contains(records, me.selectionStart)) {\n            me.selectionStart = null;\n        }\n\n        if (isMove || me.locked || !me.pruneRemoved) {\n            return;\n        }\n        me.deselectDeletedRecords(records);\n    }"
        ],
        [
            "function deployRules({client, rules, secret}) {\n  const lastRequest = rulesRequests.get(client.projectId);\n\n  return Promise.resolve(lastRequest).then(oldRulesHash => {\n    const newRuleHash = hash(rules);\n\n    if (oldRulesHash === newRuleHash) {\n      return oldRulesHash;\n    }\n\n    const request = client.rules({rules, secret});\n\n    rulesRequests.set(client.projectId, request.then(\n      () => newRuleHash,\n      () => oldRulesHash\n    ));\n\n    return request;\n  });\n}"
        ],
        [
            "function lock(client, sequence) {\n  const lastSequence = sequences.get(client.projectId);\n\n  return Promise.resolve(lastSequence).then(() => {\n    const result = sequence();\n\n    sequences.set(client.projectId, result.then(noop, noop));\n\n    return result;\n  });\n}"
        ],
        [
            "function () {\n        var renderData = this.callParent();\n\n        if (this.owner.getHierarchyState().rtl) {\n            renderData.innerCtCls =\n                (renderData.innerCtCls || '') + ' ' + Ext.baseCSSPrefix + 'rtl';\n        }\n        \n        return renderData;\n    }"
        ],
        [
            "function(o) {\n        var me = this;\n        \n        o.un({\n            scope: me,\n            mousedown: me.onMouseDown,\n            mouseup: me.onMouseUp,\n            mouseover: me.onMouseOver,\n            mouseout: me.onMouseOut,\n            click: me.onClick\n        });\n        return me.callParent(arguments);\n    }"
        ],
        [
            "function(redraw) {\n        var i = 0,\n            items = this.items,\n            len = this.length;\n            \n        for (; i < len; i++) {\n            items[i].hide(redraw);\n        }\n        return this;\n    }"
        ],
        [
            "function(redraw) {\n        var i = 0,\n            items = this.items,\n            len = this.length;\n            \n        for (; i < len; i++) {\n            items[i].show(redraw);\n        }\n        return this;\n    }"
        ],
        [
            "function() {\n        var me = this,\n            i = 0,\n            items = me.items,\n            surface = me.getSurface(),\n            len = me.length;\n        \n        if (surface) {\n            for (; i < len; i++) {\n                surface.renderItem(items[i]);\n            }\n        }\n        return me;\n    }"
        ],
        [
            "function(obj) {\n        var i = 0,\n            items = this.items,\n            len = this.length,\n            item, el;\n            \n        for (; i < len; i++) {\n            item = items[i];\n            el = item.el;\n            if (el) {\n                el.setStyle(obj);\n            }\n        }\n    }"
        ],
        [
            "function(obj) {\n        var i = 0,\n            items = this.items,\n            surface = this.getSurface(),\n            len = this.length;\n        \n        if (surface) {\n            for (; i < len; i++) {\n                surface.addCls(items[i], obj);\n            }\n        }\n    }"
        ],
        [
            "function(obj) {\n        var i = 0,\n            items = this.items,\n            surface = this.getSurface(),\n            len = this.length;\n        \n        if (surface) {\n            for (; i < len; i++) {\n                surface.removeCls(items[i], obj);\n            }\n        }\n    }"
        ],
        [
            "function(){\n        var me = this,\n            surface = me.getSurface(),\n            destroySprites = me.autoDestroy,\n            item;\n            \n        if (surface) {\n            while (me.getCount() > 0) {\n                item = me.first();\n                me.remove(item);\n                surface.remove(item, destroySprites);\n            }\n        }\n        me.clearListeners();\n    }"
        ],
        [
            "function(config){\n        var me = this,\n            o, key, value;\n            \n        me.copyLegacyObject(config, me.customRenderers, 'renderer');\n        me.copyLegacyObject(config, me.customEditors, 'editor');\n        me.copyLegacyObject(config, me.propertyNames, 'displayName');\n        \n        //<debug>\n        // exclude types since it's new\n        if (me.customRenderers || me.customEditors || me.propertyNames) {\n            if (Ext.global.console && Ext.global.console.warn) {\n                Ext.global.console.warn(this.$className, 'customRenderers, customEditors & propertyNames have been consolidated into a new config, see \"sourceConfig\". These configurations will be deprecated.');\n            }\n        }\n        //</debug>\n    }"
        ],
        [
            "function(pos, direction, e, preventWrap, verifierFn, scope) {\n        if (direction == 'left') {\n            direction = 'up';\n        } else if (direction == 'right') {\n            direction = 'down';\n        }\n        pos = Ext.view.Table.prototype.walkCells.call(this, pos, direction, e, preventWrap, verifierFn, scope);\n        if (pos && !pos.column) {\n            pos.column = 1;\n        }\n        return pos;\n    }"
        ],
        [
            "function init() {\r\n\ttinyMCEPopup.resizeToInnerSize();\r\n\tvar inst = tinyMCEPopup.editor;\r\n\tvar dom = inst.dom;\r\n\tvar elm = inst.selection.getNode();\r\n\tvar f = document.forms[0];\r\n\tvar onclick = dom.getAttrib(elm, 'onclick');\r\n\r\n\tsetFormValue('title', dom.getAttrib(elm, 'title'));\r\n\tsetFormValue('id', dom.getAttrib(elm, 'id'));\r\n\tsetFormValue('style', dom.getAttrib(elm, \"style\"));\r\n\tsetFormValue('dir', dom.getAttrib(elm, 'dir'));\r\n\tsetFormValue('lang', dom.getAttrib(elm, 'lang'));\r\n\tsetFormValue('tabindex', dom.getAttrib(elm, 'tabindex', typeof(elm.tabindex) != \"undefined\" ? elm.tabindex : \"\"));\r\n\tsetFormValue('accesskey', dom.getAttrib(elm, 'accesskey', typeof(elm.accesskey) != \"undefined\" ? elm.accesskey : \"\"));\r\n\tsetFormValue('onfocus', dom.getAttrib(elm, 'onfocus'));\r\n\tsetFormValue('onblur', dom.getAttrib(elm, 'onblur'));\r\n\tsetFormValue('onclick', onclick);\r\n\tsetFormValue('ondblclick', dom.getAttrib(elm, 'ondblclick'));\r\n\tsetFormValue('onmousedown', dom.getAttrib(elm, 'onmousedown'));\r\n\tsetFormValue('onmouseup', dom.getAttrib(elm, 'onmouseup'));\r\n\tsetFormValue('onmouseover', dom.getAttrib(elm, 'onmouseover'));\r\n\tsetFormValue('onmousemove', dom.getAttrib(elm, 'onmousemove'));\r\n\tsetFormValue('onmouseout', dom.getAttrib(elm, 'onmouseout'));\r\n\tsetFormValue('onkeypress', dom.getAttrib(elm, 'onkeypress'));\r\n\tsetFormValue('onkeydown', dom.getAttrib(elm, 'onkeydown'));\r\n\tsetFormValue('onkeyup', dom.getAttrib(elm, 'onkeyup'));\r\n\tclassName = dom.getAttrib(elm, 'class');\r\n\r\n\taddClassesToList('classlist', 'advlink_styles');\r\n\tselectByValue(f, 'classlist', className, true);\r\n\r\n\tTinyMCE_EditableSelects.init();\r\n}"
        ],
        [
            "function(columns) {\n        var i,\n            len = columns.length,\n            column;\n\n        for (i = 0; i < len; i++) {\n            column = columns[i];\n            if (!column.processed && column.locked) {\n                return true;\n            }\n        }\n    }"
        ],
        [
            "function(headerCt, header, colsToMove, fromIdx, toIdx) {\n        var me = this;\n\n        // If there are Features or Plugins which create DOM which must match column order, they set the optimizedColumnMove flag to false.\n        // In this case we must refresh the view on column move.\n        if (me.optimizedColumnMove === false) {\n            me.view.refresh();\n        }\n\n        // Simplest case for default DOM structure is just to swap the columns round in the view.\n        else {\n            me.view.moveColumn(fromIdx, toIdx, colsToMove);\n        }\n        me.delayScroll();\n    }"
        ],
        [
            "function() {\n        var me = this;\n        return me.lhsMarker || (me.lhsMarker = Ext.DomHelper.append(me.el, {\n            cls: me.resizeMarkerCls\n        }, true));\n    }"
        ],
        [
            "function() {\n            var animateWithClass = this.animateClearButton && this.animateWithCss3;\n            this.clearButtonEl = this.textField.bodyEl.createChild({\n                tag: 'div',\n                cls: this.clearButtonCls\n            });\n            if(this.animateClearButton) {\n                this.animateWithCss3 = this.supportsCssTransition(this.clearButtonEl);\n            }\n            if(this.animateWithCss3) {\n                this.clearButtonEl.addCls(this.clearButtonCls + '-off');\n            }\n            else {\n                this.clearButtonEl.setStyle('visibility', 'hidden');\n            }\n        }"
        ],
        [
            "function(el) {\n            var styles = ['transitionProperty', 'WebkitTransitionProperty', 'MozTransitionProperty',\n                          'OTransitionProperty', 'msTransitionProperty', 'KhtmlTransitionProperty'];\n\n            var style = el.dom.style;\n            for(var i = 0, length = styles.length; i < length; ++i) {\n                if(style[styles[i]] !== 'undefined') {\n                    // Supported property will result in empty string\n                    return true;\n                }\n            }\n            return false;\n        }"
        ],
        [
            "function() {\n            if (!this.clearOnEscape) {\n                return;\n            }\n\n            // Using a KeyMap did not work: ESC is swallowed by combo box and date field before it reaches our own KeyMap\n            this.textField.inputEl.on('keydown',\n                function(e) {\n                    if (e.getKey() == Ext.EventObject.ESC) {\n                        if (this.textField.isExpanded) {\n                            // Let combo box or date field first remove the popup\n                            return;\n                        }\n                        // No idea why the defer is necessary, but otherwise the call to setValue('') is ignored\n\n\t\t\t\t\t\t// 2011-11-30 Ing. Leonardo D'Onofrio leonardo_donofrio at hotmail.com\n\t\t\t\t\t\tif (this.textField.clearValue) {\n\t\t\t\t\t\t\tExt.Function.defer(this.textField.clearValue, 1, this.textField);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tExt.Function.defer(this.textField.setValue, 1, this.textField, ['']);\n\t\t\t\t\t\t}\n                        // end Ing. Leonardo D'Onofrio\n\t\t\t\t\t\te.stopEvent();\n                    }\n                },\n                this);\n        }"
        ],
        [
            "function() {\n            var clearButtonEl = this.clearButtonEl;\n            if (!clearButtonEl) {\n                return;\n            }\n            var right = 0;\n            if (this.fieldHasScrollBar()) {\n                right += Ext.getScrollBarWidth();\n            }\n            if (this.textField.triggerWrap) {\n                right += this.textField.getTriggerWidth();\n            }\n            clearButtonEl.alignTo(this.textField.bodyEl, 'tr-tr', [-1 * (right + 3), 5]);\n        }"
        ],
        [
            "function() {\n            if (!this.isTextArea) {\n                return false;\n            }\n\n            var inputEl = this.textField.inputEl;\n            var overflowY = inputEl.getStyle('overflow-y');\n            if (overflowY == 'hidden' || overflowY == 'visible') {\n                return false;\n            }\n            if (overflowY == 'scroll') {\n                return true;\n            }\n            //noinspection RedundantIfStatementJS\n            if (inputEl.dom.scrollHeight <= inputEl.dom.clientHeight) {\n                return false;\n            }\n            return true;\n        }"
        ],
        [
            "function() {\n            if (this.hideClearButtonWhenEmpty && Ext.isEmpty(this.textField.getValue())) {\n                return false;\n            }\n\n            var clearButtonEl = this.clearButtonEl;\n            //noinspection RedundantIfStatementJS\n            if (this.hideClearButtonWhenMouseOut\n                && !clearButtonEl.hasCls(this.clearButtonCls + '-mouse-over-button')\n                && !clearButtonEl.hasCls(this.clearButtonCls + '-mouse-over-input')) {\n                return false;\n            }\n\n            return true;\n        }"
        ],
        [
            "function() {\n            var oldVisible = this.isButtonCurrentlyVisible();\n            var newVisible = this.shouldButtonBeVisible();\n\n            var clearButtonEl = this.clearButtonEl;\n            if (oldVisible != newVisible) {\n                if(this.animateClearButton && this.animateWithCss3) {\n                    this.clearButtonEl.removeCls(this.clearButtonCls + (oldVisible ? '-on' : '-off'));\n                    clearButtonEl.addCls(this.clearButtonCls + (newVisible ? '-on' : '-off'));\n                }\n                else {\n                    clearButtonEl.stopAnimation();\n                    clearButtonEl.setVisible(newVisible, this.animateClearButton);\n                }\n\n                // Set background-color of clearButton to same as field's background-color (for those browsers/cases\n                // where the padding-right (see below) does not work)\n                clearButtonEl.setStyle('background-color', this.textField.inputEl.getStyle('background-color'));\n\n                // Adjust padding-right of the input tag to make room for the button\n                // IE (up to v9) just ignores this and Gecko handles padding incorrectly with  textarea scrollbars\n                if (!(this.isTextArea && Ext.isGecko) && !Ext.isIE) {\n                    // See https://bugzilla.mozilla.org/show_bug.cgi?id=157846\n                    var deltaPaddingRight = clearButtonEl.getWidth() - this.clearButtonEl.getMargin('l');\n                    var currentPaddingRight = this.textField.inputEl.getPadding('r');\n                    var factor = (newVisible ? +1 : -1);\n                    this.textField.inputEl.dom.style.paddingRight = (currentPaddingRight + factor * deltaPaddingRight) + 'px';\n                }\n            }\n        }"
        ],
        [
            "function quit(message, line, chr) {\n        var percentage = Math.floor((line / lines.length) * 100);\n\n        throw {\n            name: 'JSHintError',\n            line: line,\n            character: chr,\n            message: message + \" (\" + percentage + \"% scanned).\",\n            raw: message\n        };\n    }"
        ],
        [
            "function saveProperty(name, token) {\n                if (props[name] && is_own(props, name))\n                    warning(\"Duplicate member '{a}'.\", nexttoken, i);\n                else\n                    props[name] = {};\n\n                props[name].basic = true;\n                props[name].basicToken = token;\n            }"
        ],
        [
            "function makePow(left, prev) {\n  if (left.isEmpty()) {\n    return prev;\n  }\n  const elem = left.first();\n  return makePow(\n    left.remove(elem),\n    prev.union(prev.map(e => e.add(elem)))\n  );\n}"
        ],
        [
            "function(s) {\r\n\t\t\ts = tinymce.trim(s);\r\n\r\n\t\t\tfunction rep(re, str) {\r\n\t\t\t\ts = s.replace(re, str);\r\n\t\t\t};\r\n\r\n\t\t\t// example: <strong> to [b]\r\n\t\t\trep(/<a.*?href=\\\"(.*?)\\\".*?>(.*?)<\\/a>/gi,\"[url=$1]$2[/url]\");\r\n\t\t\trep(/<font.*?color=\\\"(.*?)\\\".*?class=\\\"codeStyle\\\".*?>(.*?)<\\/font>/gi,\"[code][color=$1]$2[/color][/code]\");\r\n\t\t\trep(/<font.*?color=\\\"(.*?)\\\".*?class=\\\"quoteStyle\\\".*?>(.*?)<\\/font>/gi,\"[quote][color=$1]$2[/color][/quote]\");\r\n\t\t\trep(/<font.*?class=\\\"codeStyle\\\".*?color=\\\"(.*?)\\\".*?>(.*?)<\\/font>/gi,\"[code][color=$1]$2[/color][/code]\");\r\n\t\t\trep(/<font.*?class=\\\"quoteStyle\\\".*?color=\\\"(.*?)\\\".*?>(.*?)<\\/font>/gi,\"[quote][color=$1]$2[/color][/quote]\");\r\n\t\t\trep(/<span style=\\\"color: ?(.*?);\\\">(.*?)<\\/span>/gi,\"[color=$1]$2[/color]\");\r\n\t\t\trep(/<font.*?color=\\\"(.*?)\\\".*?>(.*?)<\\/font>/gi,\"[color=$1]$2[/color]\");\r\n\t\t\trep(/<span style=\\\"font-size:(.*?);\\\">(.*?)<\\/span>/gi,\"[size=$1]$2[/size]\");\r\n\t\t\trep(/<font>(.*?)<\\/font>/gi,\"$1\");\r\n\t\t\trep(/<img.*?src=\\\"(.*?)\\\".*?\\/>/gi,\"[img]$1[/img]\");\r\n\t\t\trep(/<span class=\\\"codeStyle\\\">(.*?)<\\/span>/gi,\"[code]$1[/code]\");\r\n\t\t\trep(/<span class=\\\"quoteStyle\\\">(.*?)<\\/span>/gi,\"[quote]$1[/quote]\");\r\n\t\t\trep(/<strong class=\\\"codeStyle\\\">(.*?)<\\/strong>/gi,\"[code][b]$1[/b][/code]\");\r\n\t\t\trep(/<strong class=\\\"quoteStyle\\\">(.*?)<\\/strong>/gi,\"[quote][b]$1[/b][/quote]\");\r\n\t\t\trep(/<em class=\\\"codeStyle\\\">(.*?)<\\/em>/gi,\"[code][i]$1[/i][/code]\");\r\n\t\t\trep(/<em class=\\\"quoteStyle\\\">(.*?)<\\/em>/gi,\"[quote][i]$1[/i][/quote]\");\r\n\t\t\trep(/<u class=\\\"codeStyle\\\">(.*?)<\\/u>/gi,\"[code][u]$1[/u][/code]\");\r\n\t\t\trep(/<u class=\\\"quoteStyle\\\">(.*?)<\\/u>/gi,\"[quote][u]$1[/u][/quote]\");\r\n\t\t\trep(/<\\/(strong|b)>/gi,\"[/b]\");\r\n\t\t\trep(/<(strong|b)>/gi,\"[b]\");\r\n\t\t\trep(/<\\/(em|i)>/gi,\"[/i]\");\r\n\t\t\trep(/<(em|i)>/gi,\"[i]\");\r\n\t\t\trep(/<\\/u>/gi,\"[/u]\");\r\n\t\t\trep(/<span style=\\\"text-decoration: ?underline;\\\">(.*?)<\\/span>/gi,\"[u]$1[/u]\");\r\n\t\t\trep(/<u>/gi,\"[u]\");\r\n\t\t\trep(/<blockquote[^>]*>/gi,\"[quote]\");\r\n\t\t\trep(/<\\/blockquote>/gi,\"[/quote]\");\r\n\t\t\trep(/<br \\/>/gi,\"\\n\");\r\n\t\t\trep(/<br\\/>/gi,\"\\n\");\r\n\t\t\trep(/<br>/gi,\"\\n\");\r\n\t\t\trep(/<p>/gi,\"\");\r\n\t\t\trep(/<\\/p>/gi,\"\\n\");\r\n\t\t\trep(/&nbsp;|\\u00a0/gi,\" \");\r\n\t\t\trep(/&quot;/gi,\"\\\"\");\r\n\t\t\trep(/&lt;/gi,\"<\");\r\n\t\t\trep(/&gt;/gi,\">\");\r\n\t\t\trep(/&amp;/gi,\"&\");\r\n\r\n\t\t\treturn s; \r\n\t\t}"
        ],
        [
            "function(s) {\r\n\t\t\ts = tinymce.trim(s);\r\n\r\n\t\t\tfunction rep(re, str) {\r\n\t\t\t\ts = s.replace(re, str);\r\n\t\t\t};\r\n\r\n\t\t\t// example: [b] to <strong>\r\n\t\t\trep(/\\n/gi,\"<br />\");\r\n\t\t\trep(/\\[b\\]/gi,\"<strong>\");\r\n\t\t\trep(/\\[\\/b\\]/gi,\"</strong>\");\r\n\t\t\trep(/\\[i\\]/gi,\"<em>\");\r\n\t\t\trep(/\\[\\/i\\]/gi,\"</em>\");\r\n\t\t\trep(/\\[u\\]/gi,\"<u>\");\r\n\t\t\trep(/\\[\\/u\\]/gi,\"</u>\");\r\n\t\t\trep(/\\[url=([^\\]]+)\\](.*?)\\[\\/url\\]/gi,\"<a href=\\\"$1\\\">$2</a>\");\r\n\t\t\trep(/\\[url\\](.*?)\\[\\/url\\]/gi,\"<a href=\\\"$1\\\">$1</a>\");\r\n\t\t\trep(/\\[img\\](.*?)\\[\\/img\\]/gi,\"<img src=\\\"$1\\\" />\");\r\n\t\t\trep(/\\[color=(.*?)\\](.*?)\\[\\/color\\]/gi,\"<font color=\\\"$1\\\">$2</font>\");\r\n\t\t\trep(/\\[code\\](.*?)\\[\\/code\\]/gi,\"<span class=\\\"codeStyle\\\">$1</span>&nbsp;\");\r\n\t\t\trep(/\\[quote.*?\\](.*?)\\[\\/quote\\]/gi,\"<span class=\\\"quoteStyle\\\">$1</span>&nbsp;\");\r\n\r\n\t\t\treturn s; \r\n\t\t}"
        ],
        [
            "function (childContext, axis) {\n        var collapseTarget = childContext.collapseTarget,\n            setSizeMethod = 'set' + axis.sizePropCap,\n            sizeProp = axis.sizeProp,\n            childMarginSize = childContext.getMarginInfo()[sizeProp],\n            region, isBegin, flex, pos, size;\n\n        if (collapseTarget) { // if (splitter)\n            region = collapseTarget.region;\n        } else {\n            region = childContext.region;\n            flex = childContext.flex;\n        }\n\n        isBegin = region == axis.borderBegin;\n\n        if (!isBegin && region != axis.borderEnd) {\n            // a north/south region on the horizontal axis or an east/west region on the\n            // vertical axis: stretch to fill remaining space:\n            childContext[setSizeMethod](axis.end - axis.begin - childMarginSize);\n            pos = axis.begin;\n        } else {\n            if (flex) {\n                size = Math.ceil(axis.flexSpace * (flex / axis.totalFlex));\n                size = childContext[setSizeMethod](size);\n            } else if (childContext.percentage) {\n                // Like getProp but without registering a dependency - we calculated the size, we don't depend on it\n                size = childContext.peek(sizeProp);\n            } else {\n                size = childContext.getProp(sizeProp);\n            }\n\n            size += childMarginSize;\n\n            if (isBegin) {\n                pos = axis.begin;\n                axis.begin += size;\n            } else {\n                axis.end = pos = axis.end - size;\n            }\n        }\n\n        childContext.layoutPos[axis.posProp] = pos;\n    }"
        ],
        [
            "function (ownerContext, axis) {\n        var size = axis.end - axis.begin,\n            center = ownerContext.centerRegion;\n\n        if (center) {\n            center['set' + axis.sizePropCap](size - center.getMarginInfo()[axis.sizeProp]);\n            center.layoutPos[axis.posProp] = axis.begin;\n        }\n\n        return Ext.isNumber(size) ? 1 : 0;\n    }"
        ],
        [
            "function (childItems) {\n        var length = childItems.length,\n            index, childContext;\n\n        for (index = 0; index < length; ++index) {\n            childContext = childItems[index];\n\n            childContext.setProp('x', childContext.layoutPos.x + childContext.marginInfo.left);\n            childContext.setProp('y', childContext.layoutPos.y + childContext.marginInfo.top);\n        }\n    }"
        ],
        [
            "function Duration(str) {\n\n  // There must be at least a P\n  if(str.length < 1 || str.charAt(0) != 'P') {\n    throw new Error('Invalid Duration');\n  }\n\n  var duration = str.substr(1);\n\n  if(duration.length < 1) {\n    throw new Error('Invalid Duration');\n  }\n\n  // 5.3.2 allows for NON normalized durations\n  // We assume that if there is a space, it is non-normalized\n  if(/\\s/.test(duration)) {\n    throw new Error('Non normalized durations not implemented');\n    //this._parseNonNormalized(duration);\n  } else {\n    this._parseNormalized(duration);\n  }\n\n}"
        ],
        [
            "function () {\n        var result = {},\n            fields = this.fields, \n            key, field;\n            \n        for (key in fields) {\n            if (fields.hasOwnProperty(key)) {\n                field = fields[key];\n                if (field.isValid() && field.getValue() !== null) {\n                    result[key] = field.getValue();\n                }\n            }\n        }\n        return result;\n    }"
        ],
        [
            "function (data) {\n        var me = this,\n            fields = me.fields,\n            key,\n            field;\n\n        for (key in fields) {\n            if (fields.hasOwnProperty(key)) {\n                // Prevent field's change event from tiggering a Store filter. The final upate event will do that\n                field =fields[key];\n                field.suspendEvents();\n                field.setValue(key in data ? data[key] : '');\n                field.resumeEvents();\n            }\n        }\n\n        // Trigger the filering of the Store\n        me.fireEvent('update', me);\n    }"
        ],
        [
            "function ensureDefault(val, def) {\n    if ((util_1.isNullOrUndefined(val) || val === '') && !chek_1.isUndefined(def))\n        return def;\n    return val;\n}"
        ],
        [
            "function isLikeNumber(val) {\n    return constants_1.LIKE_HEX_NUMBER.test(val) ||\n        constants_1.LIKE_NUMBER.test(val);\n}"
        ],
        [
            "function (val) {\n        val = ensureDefault(val, constants_1.DEFAULT_TYPE_VALUES.boolean);\n        return Boolean(/^false$/i.test(val) ? false : val);\n    }"
        ],
        [
            "function (val) {\n        val = ensureDefault(val, constants_1.DEFAULT_TYPE_VALUES.array);\n        if (!Array.isArray(val))\n            val = [val];\n        return val;\n    }"
        ],
        [
            "function toCamelcase(val, strict) {\n    if (strict === void 0) { strict = true; }\n    if (!strict || !/\\S+\\.[^\\.]\\S+/.test(val))\n        return chek_1.camelcase(val);\n    return val;\n}"
        ],
        [
            "function expandArgs(val, match, safe) {\n    if (Array.isArray(val))\n        return val.slice(0); // always slice to clone.\n    match = match || ['\"', \"'\"];\n    safe = safe || ['[', ']', '<', '>'];\n    function replacer(p, c) {\n        p.a[p.a.length - 1] += c.replace(/\\\\(.)/, '$1');\n    }\n    var all = safe.concat(match);\n    var result = val.match(/\\\\?.|^$/g).reduce(function (p, c) {\n        if (~all.indexOf(c)) {\n            p.quote ^= 1;\n            if (~safe.indexOf(c))\n                replacer(p, c);\n        }\n        else if (!p.quote && c === ' ')\n            p.a.push('');\n        else\n            replacer(p, c);\n        return p;\n    }, { a: [''], e: false }).a;\n    return result;\n}"
        ],
        [
            "function expandOptions(val, allowValues) {\n    val = val || [];\n    var trail = [];\n    return val.reduce(function (a, c) {\n        if (!constants_1.FLAG_SHORT.test(c) || constants_1.FLAG_COUNT.test(c))\n            return a.concat(c);\n        var split = c.slice(1).split('').map(function (n) { return \"-\" + n; });\n        if (allowValues)\n            return a.concat(split);\n        trail = trail.concat(split); // shift to end can't have values.\n        return a;\n    }, []).concat(trail);\n}"
        ],
        [
            "function isNegateFlag(val, negate) {\n    negate = escape(negate || constants_1.NEGATE_CHAR);\n    return (new RegExp('^--' + negate)).test(val);\n}"
        ],
        [
            "function isArgVariadic(val, variadic) {\n    variadic = variadic || constants_1.VARIADIC_CHAR;\n    return isArg(val)\n        && (val.endsWith(variadic + ']')\n            || val.endsWith(variadic + '>'));\n}"
        ],
        [
            "function isArgVariadicRequired(val, variadic) {\n    variadic = variadic || constants_1.VARIADIC_CHAR;\n    return isArgRequired(val) && val.endsWith(variadic + '>');\n}"
        ],
        [
            "function stripFlag(val, negate) {\n    negate = escape(negate || constants_1.NEGATE_CHAR);\n    return (val || '').replace(new RegExp('^--?(' + negate + ')?'), '');\n}"
        ],
        [
            "function stripNegate(val, negate) {\n    negate = escape(negate || constants_1.NEGATE_CHAR);\n    var exp = new RegExp('^' + negate);\n    return val.replace(exp, '');\n}"
        ],
        [
            "function stripVariadic(val, variadic) {\n    variadic = escape(variadic || constants_1.VARIADIC_CHAR);\n    var exp = new RegExp(variadic + '$');\n    return val.replace(exp, '');\n}"
        ],
        [
            "function stripTokens(val, negate, variadic) {\n    variadic = escape(variadic || constants_1.VARIADIC_CHAR);\n    negate = escape(negate || constants_1.NEGATE_CHAR);\n    var argExp = new RegExp(['<', '>', '\\\\[', '\\\\]'].join('|'), 'g');\n    var noExp = new RegExp('^' + negate);\n    var variExp = new RegExp(variadic + '$');\n    return expandArgs(val)\n        .map(function (v) {\n        v = v\n            .replace(constants_1.FLAG_EXP, '')\n            .replace(noExp, '')\n            .replace(argExp, '')\n            .replace(variExp, '');\n        return v;\n    }).join(' ');\n}"
        ],
        [
            "function(item) {\n        if (!item) {\n            return;\n        }\n        \n        var me = this,\n            sprite = item.sprite,\n            opts = Ext.merge({}, me.highlightCfg, me.highlight),\n            surface = me.chart.surface,\n            animate = me.chart.animate,\n            p, from, to, pi;\n\n        if (!me.highlight || !sprite || sprite._highlighted) {\n            return;\n        }\n        if (sprite._anim) {\n            sprite._anim.paused = true;\n        }\n        sprite._highlighted = true;\n        if (!sprite._defaults) {\n            sprite._defaults = Ext.apply({}, sprite.attr);\n            from = {};\n            to = {};\n            // TODO: Clean up code below.\n            for (p in opts) {\n                if (! (p in sprite._defaults)) {\n                    sprite._defaults[p] = surface.availableAttrs[p];\n                }\n                from[p] = sprite._defaults[p];\n                to[p] = opts[p];\n                if (Ext.isObject(opts[p])) {\n                    from[p] = {};\n                    to[p] = {};\n                    Ext.apply(sprite._defaults[p], sprite.attr[p]);\n                    Ext.apply(from[p], sprite._defaults[p]);\n                    for (pi in sprite._defaults[p]) {\n                        if (! (pi in opts[p])) {\n                            to[p][pi] = from[p][pi];\n                        } else {\n                            to[p][pi] = opts[p][pi];\n                        }\n                    }\n                    for (pi in opts[p]) {\n                        if (! (pi in to[p])) {\n                            to[p][pi] = opts[p][pi];\n                        }\n                    }\n                }\n            }\n            sprite._from = from;\n            sprite._to = to;\n            sprite._endStyle = to;\n        }\n        if (animate) {\n            sprite._anim = new Ext.fx.Anim({\n                target: sprite,\n                from: sprite._from,\n                to: sprite._to,\n                duration: 150\n            });\n        } else {\n            sprite.setAttributes(sprite._to, true);\n        }\n    }"
        ],
        [
            "function() {\n        if (!this.highlight || !this.items) {\n            return;\n        }\n\n        var me = this,\n            items = me.items,\n            len = items.length,\n            opts = Ext.merge({}, me.highlightCfg, me.highlight),\n            animate = me.chart.animate,\n            i = 0,\n            obj, p, sprite;\n        for (; i < len; i++) {\n            if (!items[i]) {\n                continue;\n            }\n            sprite = items[i].sprite;\n            if (sprite && sprite._highlighted) {\n                if (sprite._anim) {\n                    sprite._anim.paused = true;\n                }\n                obj = {};\n                for (p in opts) {\n                    if (Ext.isObject(sprite._defaults[p])) {\n                        obj[p] = Ext.apply({}, sprite._defaults[p]);\n                    }\n                    else {\n                        obj[p] = sprite._defaults[p];\n                    }\n                }\n                if (animate) {\n                    //sprite._to = obj;\n                    sprite._endStyle = obj;\n                    sprite._anim = new Ext.fx.Anim({\n                        target: sprite,\n                        to: obj,\n                        duration: 150\n                    });\n                }\n                else {\n                    sprite.setAttributes(obj, true);\n                }\n                delete sprite._highlighted;\n                //delete sprite._defaults;\n            }\n        }\n    }"
        ],
        [
            "function(component, selector) {\n            if (!selector) {\n                return true;\n            }\n            var selectors = selector.split(','),\n                length = selectors.length,\n                i = 0,\n                query;\n\n            for (; i < length; i++) {\n                selector = Ext.String.trim(selectors[i]);\n                query = this.cache[selector] || (this.cache[selector] = this.parse(selector));\n                if (query.is(component)) {\n                    return true;\n                }\n            }\n            return false;\n        }"
        ],
        [
            "async function getVinylFile(filePath, options) {\n\tif (!isString(filePath)) {\n\t\tif (!options.lookup.has(filePath.path)) options.lookup.set(filePath.path, filePath);\n\t\treturn filePath;\n\t}\n\tif (options.lookup.has(filePath)) return options.lookup.get(filePath);\n\treturn createVinylFile(filePath, options);\n}"
        ],
        [
            "async function createVinylFile(filePath, options) {\n\toptions.lookup.set(filePath, vinylFile.read(filePath, options));\n\tif (options.debugVcjd) debug(`Reading contents of: ${filePath}`);\n\treturn await options.lookup.get(filePath);\n}"
        ],
        [
            "function getVinylFiles(files, options) {\n\treturn Promise.all(files.map(file=>getVinylFile(file, options)));\n}"
        ],
        [
            "async function resolveModule(moduleId, options, root=options.base) {\n\tif (options.lookup.has(moduleId)) return options.lookup.get(moduleId);\n\tconst absolutePath = await options.resolver(moduleId, root);\n\tif (options.mapper.hasOwnProperty(absolutePath)) return options.mapper[absolutePath];\n\tif (options.lookup.has(absolutePath)) return options.lookup.get(absolutePath);\n\treturn absolutePath;\n}"
        ],
        [
            "function getRequires(file, options) {\n\treturn [...fileRequires(file, options)].map(async (moduleId)=>{\n\t\tif (options.internalOnly && (moduleId.charAt(0) !== '.') && (moduleId.charAt(0) !== '/')) {\n\t\t\tif (options.mapper[moduleId] !== true) return undefined;\n\t\t}\n\n\t\tif (options.mapper.hasOwnProperty(moduleId) && !(options.internalOnly && (options.mapper[moduleId] === true))) {\n\t\t\tif (options.mapper[moduleId]) return resolveModule(options.mapper[moduleId], options);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn resolveModule(moduleId, options, path.dirname(file.path));\n\t});\n}"
        ],
        [
            "function filterDuplicateFiles() {\n\tconst lookup = new Map();\n\n\treturn value=>{\n\t\tif (lookup.has(value)) return false;\n\t\treturn lookup.set(value, true);\n\t}\n}"
        ],
        [
            "async function getFiles(paths, options) {\n\tconst files = (await getVinylFiles(paths, options))\n\t\t.map(file=>[file, ...getRequires(file, options)]);\n\treturn (await promiseFlatten(files)).filter(file=>file).filter(filterDuplicateFiles());\n}"
        ],
        [
            "async function getAllFiles(file, options) {\n\tlet files = await getFiles([file], options);\n\twhile (hasUnloaded(files)) files = await getFiles(files, options);\n\treturn files;\n}"
        ],
        [
            "function srcFilePusher(options) {\n\treturn through.obj(function(file, encoding, done) {\n\t\tgetAllFiles(file, options).then(files=>{\n\t\t\tfiles.forEach(file=>this.push(file));\n\t\t\tdone();\n\t\t}, err=>{});\n\t})\n}"
        ],
        [
            "function createResolver(options) {\n\treturn (moduleId, base)=>new Promise((resolve, reject)=>{\n\t\tconst resolver = new Resolver(options.resolver?options.resolver:{});\n\t\tresolver.resolve(moduleId, base, (err, absolutePath)=>{\n\t\t\tif (err) {\n\t\t\t\tif (options.debugVcjd) debug(`Could not resolve path to module: ${moduleId}\\n\\tfrom base: ${base}`);\n\t\t\t\treturn reject(err);\n\t\t\t}\n\t\t\tif (options.debugVcjd) debug(`Resolved module: ${moduleId}:\\n\\tfrom base: ${base}\\n\\t:is: ${base}`);\n\t\t\treturn resolve(absolutePath);\n\t\t});\n\t})\n}"
        ],
        [
            "function parseOptions(options={}, vinylCjsDeps) {\n\tconst _options = Object.assign({\n\t\tgulp: vinylCjsDeps.gulp || require('gulp'),\n\t\tbase: options.cwd || process.cwd(),\n\t\tcwd: options.base || process.cwd(),\n\t\tinternalOnly: false,\n\t\tdebugVcjd: false\n\t}, options);\n\n\t_options.mapper = Object.assign({}, options.mapper || {});\n\t_options.lookup = new Map(options.lookup || []);\n\t_options.resolver = createResolver(options);\n\n\treturn _options;\n}"
        ],
        [
            "function(){\n        var me = this,\n            prev = me.store.currentPage - 1;\n\n        if (prev > 0) {\n            if (me.fireEvent('beforechange', me, prev) !== false) {\n                me.store.previousPage();\n            }\n        }\n    }"
        ],
        [
            "function(){\n        var me = this,\n            total = me.getPageData().pageCount,\n            next = me.store.currentPage + 1;\n\n        if (next <= total) {\n            if (me.fireEvent('beforechange', me, next) !== false) {\n                me.store.nextPage();\n            }\n        }\n    }"
        ],
        [
            "function(){\n        var me = this,\n            last = me.getPageData().pageCount;\n\n        if (me.fireEvent('beforechange', me, last) !== false) {\n            me.store.loadPage(last);\n        }\n    }"
        ],
        [
            "function(){\n        var me = this,\n            current = me.store.currentPage;\n\n        if (me.fireEvent('beforechange', me, current) !== false) {\n            me.store.loadPage(current);\n        }\n    }"
        ],
        [
            "function(fromClass, members) {\n            //<debug>\n            Ext.classSystemMonitor && Ext.classSystemMonitor(this, 'Ext.Base#borrow', arguments);\n            //</debug>\n            \n            var prototype = this.prototype,\n                fromPrototype = fromClass.prototype,\n                //<debug>\n                className = Ext.getClassName(this),\n                //</debug>\n                i, ln, name, fn, toBorrow;\n\n            members = Ext.Array.from(members);\n\n            for (i = 0,ln = members.length; i < ln; i++) {\n                name = members[i];\n\n                toBorrow = fromPrototype[name];\n\n                if (typeof toBorrow == 'function') {\n                    fn = Ext.Function.clone(toBorrow);\n\n                    //<debug>\n                    if (className) {\n                        fn.displayName = className + '#' + name;\n                    }\n                    //</debug>\n\n                    fn.$owner = this;\n                    fn.$name = name;\n\n                    prototype[name] = fn;\n                }\n                else {\n                    prototype[name] = toBorrow;\n                }\n            }\n\n            return this;\n        }"
        ],
        [
            "function getOptions(opts) {\n    opts = opts || {};\n\n    // command line arguments override options\n    _.extend(opts, argv);\n    delete opts.$0;\n    delete opts._;\n\n    // these values are used in multiple tasks, so set defaults here\n    opts.unitTestCode = opts.unitTestCode || 'test/unit/**/*.js';\n    opts.unitTargetCode = opts.unitTargetCode || 'lib/**/*.js';\n    opts.testDir = opts.testDir || 'test';\n    opts.rootDir = opts.rootDir || process.cwd();\n    opts.targetDir = opts.targetDir || (opts.rootDir + '/lib');\n    opts.tasksets = _.extend({ 'default': ['lint', 'test'] }, opts.tasksets);\n\n    return opts;\n}"
        ],
        [
            "function getPlugins(opts) {\n    var batterRootDir = __dirname.replace(delim + 'lib', '');\n    var batterTasks = { rootDir: batterRootDir };\n    var currentProject = { rootDir: opts.rootDir };\n    var plugins = opts.plugins || [];\n\n    // tasks in batter go to the front of the list; current project at the end (i.e. most important)\n    plugins.unshift(batterTasks);\n\n    if (batterRootDir !== opts.rootDir) {\n        plugins.push(currentProject);\n    }\n\n    return plugins;\n}"
        ],
        [
            "function whip(gulp, taste, opts) {\n    opts = getOptions(opts);\n    opts.taste = taste;\n\n    var tasks = _.extend({}, opts.tasksets);\n\n    // loop through plugins so we can get tasks from them\n    _.each(getPlugins(opts), function (plugin) {\n        var pluginRoot = plugin.rootDir;\n        var pluginBuildDir = pluginRoot + delim + 'build';\n\n        // look through files in the plugin build directory to try and find tasks\n        if (fs.existsSync(pluginBuildDir)) {\n            _.each(fs.readdirSync(pluginBuildDir), function (pluginFile) {\n                var taskName, task;\n\n                // if the file name starts with 'task.' then it is a task file\n                if (taskRegex.test(pluginFile)) {\n\n                    // the task name is the middle part of the file name (i.e. blah for task.blah.js)\n                    taskName = pluginFile.match(taskRegex)[1];\n                    task = require(pluginBuildDir + delim + pluginFile)(gulp, opts);\n\n                    // if task is function or an object with deps and task\n                    if (_.isFunction(task) || (task.deps && task.task)) {\n                        tasks[taskName] = task;\n                    }\n                    // else if it's an object, then there are subtasks\n                    else if (_.isObject(task)) {\n                        _.each(task, function (subtask, subtaskName) {\n                            var fullTaskName = subtaskName === '' ? taskName : taskName + '.' + subtaskName;\n                            tasks[fullTaskName] = subtask;\n                        });\n                    }\n                    else {\n                        throw new Error(pluginBuildDir + delim + pluginFile + ' is invalid');\n                    }\n                }\n            });\n        }\n    });\n\n    // now we have all the tasks in an object so let's add them to gulp\n    _.each(tasks, function (task, taskName) {\n        if (_.isFunction(task) || _.isArray(task)) {\n            gulp.task(taskName, task);\n        }\n        else if (task.deps && task.task) {\n            gulp.task(taskName, task.deps, task.task);\n        }\n        else {\n            throw new Error('Invalid task for ' + taskName);\n        }\n    });\n}"
        ],
        [
            "function(module, method) {\n        \n            var all = {urlparams:[]}\n            \n            \n            \n            for(var i=2;i<u.length;i++) all.urlparams.push(decodeURIComponent(u[i]));            \n            \n            req.cookies = {} \n                                \n            req.headers.cookie && req.headers.cookie.split(';').forEach(function( cookie ) {\n                var parts = cookie.split('=')\n                    ,key = parts[0].trim()\n                    ,val = decodeURIComponent((parts[1] || '').trim());\n                all[key] = val;\n                req.cookies[key] = val\n            });   \n            if(url.query != null) for(var i in url.query) all[i] = url.query[i]\n            if(post != null) for(var i in post) all[i] = post[i]\n            \n            all.response = res\n            all.request = req\n            all._query = url.query\n            \n            if(me.config.LOCALE && !all.locale) {\n                all.locale = req.url.substr(1,2)\n                if(!me.config.LOCALE[all.locale]) delete all.locale\n            }\n            \n            // \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c JSON \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435\n            if(all.jsonData) {\n                try{ \n                    all.RequestData = JSON.parse(all.jsonData) \n                } catch(e) {}\n                if(all.RequestData && !me.checkVersion(all.RequestData)) {\n                    mcallback({}, {code: 4})\n                    return;\n                }\n            }\n            if(!all.RequestData) all.RequestData = {}\n            \n            var run = function(auth) { \n                all.href = req.url  \n                if(all.about !== null && all.about !== undefined && module[method].aboutObject !== null) {                \n                    mcallback(module[method].aboutObject)\n                } else {\n                    module[method](all, mcallback, auth);                    \n                }\n            }            \n      \n            if(me.inits.checkauth != null) {  // if isser user checkauth function                \n                me.inits.checkauth(all, function(a) {run(a)})                    \n            } else {\n                run(null);\n            }\n            return true;\n        }"
        ],
        [
            "function(request){\n        var me = this,\n            requests = me.requests,\n            key;\n\n        if (request) {\n            if (!request.id) {\n                request = requests[request];\n            }\n            me.handleAbort(request);\n        } else {\n            for (key in requests) {\n                if (requests.hasOwnProperty(key)) {\n                    me.abort(requests[key]);\n                }\n            }\n        }\n    }"
        ],
        [
            "function(result, request){\n\n        var success = true;\n\n        if (request.timeout) {\n            clearTimeout(request.timeout);\n        }\n        delete this[request.callbackName];\n        delete this.requests[request.id];\n        this.cleanupErrorHandling(request);\n        Ext.fly(request.script).remove();\n\n        if (request.errorType) {\n            success = false;\n            Ext.callback(request.failure, request.scope, [request.errorType]);\n        } else {\n            Ext.callback(request.success, request.scope, [result]);\n        }\n        Ext.callback(request.callback, request.scope, [success, result, request.errorType]);\n        Ext.EventManager.idleEvent.fire();\n    }"
        ],
        [
            "function(url, params, options) {\n        var script = document.createElement('script');\n        script.setAttribute(\"src\", Ext.urlAppend(url, Ext.Object.toQueryString(params)));\n        script.setAttribute(\"async\", true);\n        script.setAttribute(\"type\", \"text/javascript\");\n        return script;\n    }"
        ],
        [
            "function createTableGrid(node) {\n\t\t\t\tvar selection = ed.selection, tblElm = ed.dom.getParent(node || selection.getNode(), 'table');\n\n\t\t\t\tif (tblElm)\n\t\t\t\t\treturn new TableGrid(tblElm, ed.dom, selection);\n\t\t\t}"
        ],
        [
            "function fixTableCellSelection(ed) {\n\t\t\t\t\tif (!tinymce.isWebKit)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tvar rng = ed.selection.getRng();\n\t\t\t\t\tvar n = ed.selection.getNode();\n\t\t\t\t\tvar currentCell = ed.dom.getParent(rng.startContainer, 'TD,TH');\n\t\t\t\t\n\t\t\t\t\tif (!tableCellSelected(ed, rng, n, currentCell))\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\tif (!currentCell) {\n\t\t\t\t\t\t\tcurrentCell=n;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Get the very last node inside the table cell\n\t\t\t\t\tvar end = currentCell.lastChild;\n\t\t\t\t\twhile (end.lastChild)\n\t\t\t\t\t\tend = end.lastChild;\n\t\t\t\t\t\n\t\t\t\t\t// Select the entire table cell. Nothing outside of the table cell should be selected.\n\t\t\t\t\trng.setEnd(end, end.nodeValue.length);\n\t\t\t\t\ted.selection.setRng(rng);\n\t\t\t\t}"
        ],
        [
            "function fixTableCaretPos() {\n\t\t\t\t\tvar last;\n\n\t\t\t\t\t// Skip empty text nodes form the end\n\t\t\t\t\tfor (last = ed.getBody().lastChild; last && last.nodeType == 3 && !last.nodeValue.length; last = last.previousSibling) ;\n\n\t\t\t\t\tif (last && last.nodeName == 'TABLE') {\n\t\t\t\t\t\tif (ed.settings.forced_root_block)\n\t\t\t\t\t\t\ted.dom.add(ed.getBody(), ed.settings.forced_root_block, null, tinymce.isIE ? '&nbsp;' : '<br data-mce-bogus=\"1\" />');\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ted.dom.add(ed.getBody(), 'br', {'data-mce-bogus': '1'});\n\t\t\t\t\t}\n\t\t\t\t}"
        ],
        [
            "function(column) {\n        var result = column.width || 0,\n            subcols, len, i;\n\n        // <debug>\n        if (column.flex) {\n            Ext.Error.raise(\"Columns which are locked do NOT support a flex width. You must set a width on the \" + column.text + \"column.\");\n        }\n        // </debug>\n        if (!result && column.isGroupHeader) {\n            subcols = column.items.items;\n            len = subcols.length;\n            for (i = 0; i < len; i++) {\n                result += this.getColumnWidth(subcols[i]);\n            }\n        }\n        return result;\n    }"
        ],
        [
            "function(activeHd, toIdx) {\n        var me         = this,\n            normalGrid = me.normalGrid,\n            lockedGrid = me.lockedGrid,\n            normalHCt  = normalGrid.headerCt,\n            lockedHCt  = lockedGrid.headerCt,\n            refreshFlags,\n            ownerCt;\n\n        activeHd = activeHd || normalHCt.getMenu().activeHeader;\n        ownerCt = activeHd.ownerCt;\n\n        // if column was previously flexed, get/set current width\n        // and remove the flex\n        if (activeHd.flex) {\n            activeHd.width = activeHd.getWidth();\n            delete activeHd.flex;\n        }\n\n        Ext.suspendLayouts();\n        ownerCt.remove(activeHd, false);\n        activeHd.locked = true;\n\n        // Flag to the locked column add listener to do nothing\n        me.ignoreAddLockedColumn = true;\n        if (Ext.isDefined(toIdx)) {\n            lockedHCt.insert(toIdx, activeHd);\n        } else {\n            lockedHCt.add(activeHd);\n        }\n        me.ignoreAddLockedColumn = false;\n\n        refreshFlags = me.syncLockedWidth();\n        if (refreshFlags[0]) {\n            lockedGrid.getView().refresh();\n        }\n        if (refreshFlags[1]) {\n            normalGrid.getView().refresh();\n        }\n        Ext.resumeLayouts(true);\n\n        me.fireEvent('lockcolumn', me, activeHd);\n    }"
        ],
        [
            "function(store, columns) {\n        var me = this,\n            oldStore = me.store,\n            lockedGrid = me.lockedGrid,\n            normalGrid = me.normalGrid;\n\n        Ext.suspendLayouts();\n        if (columns) {\n            lockedGrid.headerCt.removeAll();\n            normalGrid.headerCt.removeAll();\n\n            columns = me.processColumns(columns);\n\n            // Flag to the locked column add listener to do nothing\n            me.ignoreAddLockedColumn = true;\n            lockedGrid.headerCt.add(columns.locked.items);\n            me.ignoreAddLockedColumn = false;\n            normalGrid.headerCt.add(columns.normal.items);\n\n            // Ensure locked grid is set up correctly with correct width and bottom border,\n            // and that both grids' visibility and scrollability status is correct\n            me.syncLockedWidth();\n        }\n\n        if (store && store !== oldStore) {\n            store = Ext.data.StoreManager.lookup(store);\n            me.store = store;\n            lockedGrid.bindStore(store);\n            normalGrid.bindStore(store);\n        } else {\n            lockedGrid.getView().refresh();\n            normalGrid.getView().refresh();\n        }\n        Ext.resumeLayouts(true);\n    }"
        ],
        [
            "function defaultTransformer(...args) {\n  try {\n    let [record, ...rest] = args\n    try {\n      record = typeof record === 'string' ? JSON.parse(record) : record\n    } catch(err) {\n      return { type: 'bunyan', record: { err: new Error('Could not parse message.') } }\n    }\n    return { type: 'bunyan', record }\n  } catch(err) {\n    return { type: 'bunyan', record: { err: new Error('Internal error occurred.')}}\n  }\n}"
        ],
        [
            "function getString(ref)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (ref)\n\t\t\t\t{\n\t\t\t\t\ttry \n\t\t\t\t\t{\t\n\t\t\t\t\t\treturn ref;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treturn ref.toString();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttry \n\t\t\t\t\t{\n\t\t\t\t\t\treturn ref.toString();\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) \n\t\t\t\t\t{\n\t\t\t\t\t\treturn \"undefined\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (e)\n\t\t\t{\n\t\t\t\t// if we can not convert it to a string write \"undefined\" just like javascript\n\t\t\t\treturn \"undefined\";\n\t\t\t}\n\t\t}"
        ],
        [
            "function clickMe (print_r, str)\n\t{\n\t\treturn (function(){\n\t\t\tprint_r.objRef = eval(str);\n\t\t\tprint_r.strObjRef = str;\n\t\t\tprint_r.refresh();\t\t\t\t\t\n\t\t});\n\t}"
        ],
        [
            "function arrSort(a,b)\n\t{\n\t\tvar acomp = a['name'].toString(10);\n\t\tvar bcomp = b['name'].toString(10);\n\t\tif (!isNaN(Number(acomp)))\n\t\t{\n\t\t\tacomp = Number(acomp);\n\t\t}\n\t\tif (!isNaN(Number(bcomp)))\n\t\t{\n\t\t\tbcomp = Number(bcomp);\n\t\t}\n\t\tif (acomp < bcomp)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\tif (acomp > bcomp)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}"
        ],
        [
            "function(filter, index, list) {\n        // Shortcuts\n        if (filter === 'combine') {\n            list[index] = self.filters.combine;\n            return;\n        }\n\n        // Solfege URI\n        if (typeof filter === 'string' && self.application.isSolfegeUri(filter)) {\n            list[index] = self.application.resolveSolfegeUri(filter, self);\n        }\n    }"
        ],
        [
            "function getCurrentExpectedTypes(type) {\n\t\tvar currentType;\n\t\tvar expectedType;\n\n\t\tif (type.name) {\n\t\t\tcurrentType = type.name;\n\t\t} else if (type.expression) {\n\t\t\tcurrentType = type.expression.name;\n\t\t}\n\n\t\texpectedType = currentType && preferType[currentType];\n\n\t\treturn {\n\t\t\tcurrentType: currentType,\n\t\t\texpectedType: expectedType\n\t\t};\n\t}"
        ],
        [
            "function validateType(jsdocNode, type) {\n\t\tif (!type || !canTypeBeValidated(type.type)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar typesToCheck = [];\n\t\tvar elements = [];\n\n\t\tswitch (type.type) {\n\t\t\tcase 'TypeApplication':\t // {Array.<String>}\n\t\t\t\telements = type.applications[0].type === 'UnionType' ? type.applications[0].elements : type.applications;\n\t\t\t\ttypesToCheck.push(getCurrentExpectedTypes(type));\n\t\t\t\tbreak;\n\t\t\tcase 'RecordType':\t// {{20:String}}\n\t\t\t\telements = type.fields;\n\t\t\t\tbreak;\n\t\t\tcase 'UnionType':  // {String|number|Test}\n\t\t\tcase 'ArrayType':  // {[String, number, Test]}\n\t\t\t\telements = type.elements;\n\t\t\t\tbreak;\n\t\t\tcase 'FieldType':  // Array.<{count: number, votes: number}>\n\t\t\t\ttypesToCheck.push(getCurrentExpectedTypes(type.value));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttypesToCheck.push(getCurrentExpectedTypes(type));\n\t\t}\n\n\t\telements.forEach(validateType.bind(null, jsdocNode));\n\n\t\ttypesToCheck.forEach(function(typeToCheck) {\n\t\t\tif (typeToCheck.expectedType &&\n\t\t\t\ttypeToCheck.expectedType !== typeToCheck.currentType) {\n\t\t\t\tcontext.report({\n\t\t\t\t\tnode: jsdocNode,\n\t\t\t\t\tmessage: 'Use \\'{{expectedType}}\\' instead of \\'{{currentType}}\\'.',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcurrentType: typeToCheck.currentType,\n\t\t\t\t\t\texpectedType: typeToCheck.expectedType\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}"
        ],
        [
            "function requireJsDoc(node, isVirtual, paramsToCheck) {\n\t\tvar lines = sourceCode.lines;\n\t\tvar index = node.loc.start.line;\n\t\tlines = lines.slice(0, index);\n\t\tvar matches = lines.filter(function(line) {\n\t\t\treturn line.match(/\\/\\*\\*/gi);\n\t\t});\n\n\t\tvar lastIndex = lines.lastIndexOf(matches[matches.length - 1]);\n\n\t\tvar jsdocComment = findJSDocComment(sourceCode.ast.comments, lastIndex);\n\t\tif (!jsdocComment) {\n\t\t\treport(node);\n\t\t\treturn;\n\t\t}\n\n\t\tcheckJSDoc(node, jsdocComment, isVirtual, paramsToCheck);\n\t}"
        ],
        [
            "function SelectionType(typeSpec) {\n    if (!Array.isArray(typeSpec.data) && typeof typeSpec.data !== 'function') {\n        throw new Error('instances of SelectionType need typeSpec.data to be an array or function that returns an array:' + JSON.stringify(typeSpec));\n    }\n    Object.keys(typeSpec).forEach(function(key) {\n        this[key] = typeSpec[key];\n    }, this);\n}"
        ],
        [
            "function DeferredType(typeSpec) {\n    if (typeof typeSpec.defer !== 'function') {\n        throw new Error('Instances of DeferredType need typeSpec.defer to be a function that returns a type');\n    }\n    Object.keys(typeSpec).forEach(function(key) {\n        this[key] = typeSpec[key];\n    }, this);\n}"
        ],
        [
            "function ArrayType(typeSpec) {\n    if (typeSpec instanceof Type) {\n        this.subtype = typeSpec;\n    }\n    else if (typeof typeSpec === 'string') {\n        this.subtype = types.getType(typeSpec);\n        if (this.subtype == null) {\n            throw new Error('Unknown array subtype: ' + typeSpec);\n        }\n    }\n    else {\n        throw new Error('Can\\' handle array subtype');\n    }\n}"
        ],
        [
            "function() {\n        var conversion = this.parse('');\n        if (lastSetting) {\n            var current = lastSetting.get();\n            if (conversion.predictions.length === 0) {\n                conversion.predictions.push(current);\n            }\n            else {\n                // Remove current from predictions\n                var removed = false;\n                while (true) {\n                    var index = conversion.predictions.indexOf(current);\n                    if (index === -1) {\n                        break;\n                    }\n                    conversion.predictions.splice(index, 1);\n                    removed = true;\n                }\n                // If the current value wasn't something we would predict, leave it\n                if (removed) {\n                    conversion.predictions.push(current);\n                }\n            }\n        }\n        return conversion;\n    }"
        ],
        [
            "function ConversionHint(conversion, arg) {\n    this.status = conversion.status;\n    this.message = conversion.message;\n    if (arg) {\n        this.start = arg.start;\n        this.end = arg.end;\n    }\n    else {\n        this.start = 0;\n        this.end = 0;\n    }\n    this.predictions = conversion.predictions;\n}"
        ],
        [
            "function Argument(emitter, text, start, end, prefix, suffix) {\n    this.emitter = emitter;\n    this.setText(text);\n    this.start = start;\n    this.end = end;\n    this.prefix = prefix;\n    this.suffix = suffix;\n}"
        ],
        [
            "function(text) {\n        if (text == null) {\n            throw new Error('Illegal text for Argument: ' + text);\n        }\n        var ev = { argument: this, oldText: this.text, text: text };\n        this.text = text;\n        this.emitter._dispatchEvent('argumentChange', ev);\n    }"
        ],
        [
            "function(command, arg) {\n        var docs = [];\n        docs.push('<strong><tt> &gt; ');\n        docs.push(command.name);\n        if (command.params && command.params.length > 0) {\n            command.params.forEach(function(param) {\n                if (param.defaultValue === undefined) {\n                    docs.push(' [' + param.name + ']');\n                }\n                else {\n                    docs.push(' <em>[' + param.name + ']</em>');\n                }\n            }, this);\n        }\n        docs.push('</tt></strong><br/>');\n\n        docs.push(command.description ? command.description : '(No description)');\n        docs.push('<br/>');\n\n        if (command.params && command.params.length > 0) {\n            docs.push('<ul>');\n            command.params.forEach(function(param) {\n                docs.push('<li>');\n                docs.push('<strong><tt>' + param.name + '</tt></strong>: ');\n                docs.push(param.description ? param.description : '(No description)');\n                if (param.defaultValue === undefined) {\n                    docs.push(' <em>[Required]</em>');\n                }\n                else if (param.defaultValue === null) {\n                    docs.push(' <em>[Optional]</em>');\n                }\n                else {\n                    docs.push(' <em>[Default: ' + param.defaultValue + ']</em>');\n                }\n                docs.push('</li>');\n            }, this);\n            docs.push('</ul>');\n        }\n\n        return new Hint(Status.VALID, docs.join(''), arg);\n    }"
        ],
        [
            "function(assignment) {\n        // This is all about re-creating Assignments\n        if (assignment.param.name !== '__command') {\n            return;\n        }\n\n        this._assignments = {};\n\n        if (assignment.value) {\n            assignment.value.params.forEach(function(param) {\n                this._assignments[param.name] = new Assignment(param, this);\n            }, this);\n        }\n\n        this.assignmentCount = Object.keys(this._assignments).length;\n        this._dispatchEvent('commandChange', { command: assignment.value });\n    }"
        ],
        [
            "function(nameOrNumber) {\n        var name = (typeof nameOrNumber === 'string') ?\n            nameOrNumber :\n            Object.keys(this._assignments)[nameOrNumber];\n        return this._assignments[name];\n    }"
        ],
        [
            "function() {\n        // TODO: work out when to clear this out for the plain Requisition case\n        // this._hints = [];\n        this.getAssignments(true).forEach(function(assignment) {\n            this._hints.push(assignment.getHint());\n        }, this);\n        Hint.sort(this._hints);\n\n        // We would like to put some initial help here, but for anyone but\n        // a complete novice a 'type help' message is very annoying, so we\n        // need to find a way to only display this message once, or for\n        // until the user click a 'close' button or similar\n        // TODO: Add special case for '' input\n    }"
        ],
        [
            "function() {\n        var args = {};\n        this.getAssignments().forEach(function(assignment) {\n            args[assignment.param.name] = assignment.value;\n        }, this);\n        return args;\n    }"
        ],
        [
            "function(includeCommand) {\n        var args = [];\n        if (includeCommand === true) {\n            args.push(this.commandAssignment);\n        }\n        Object.keys(this._assignments).forEach(function(name) {\n            args.push(this.getAssignment(name));\n        }, this);\n        return args;\n    }"
        ],
        [
            "function() {\n        var line = [];\n        line.push(this.commandAssignment.value.name);\n        Object.keys(this._assignments).forEach(function(name) {\n            var assignment = this._assignments[name];\n            var type = assignment.param.type;\n            // TODO: This will cause problems if there is a non-default value\n            // after a default value. Also we need to decide when to use\n            // named parameters in place of positional params. Both can wait.\n            if (assignment.value !== assignment.param.defaultValue) {\n                line.push(' ');\n                line.push(type.stringify(assignment.value));\n            }\n        }, this);\n        return line.join('');\n    }"
        ],
        [
            "function CliView(cli, env) {\n    cli.cliView = this;\n    this.cli = cli;\n    this.doc = document;\n    this.win = dom.getParentWindow(this.doc);\n    this.env = env;\n\n    // TODO: we should have a better way to specify command lines???\n    this.element = this.doc.getElementById('cockpitInput');\n    if (!this.element) {\n        // console.log('No element with an id of cockpit. Bailing on cli');\n        return;\n    }\n\n    this.settings = env.settings;\n    this.hintDirection = this.settings.getSetting('hintDirection');\n    this.outputDirection = this.settings.getSetting('outputDirection');\n    this.outputHeight = this.settings.getSetting('outputHeight');\n\n    // If the requisition tells us something has changed, we use this to know\n    // if we should ignore it\n    this.isUpdating = false;\n\n    this.createElements();\n    this.update();\n}"
        ],
        [
            "function() {\n        // Certain browsers have a bug such that scrollHeight is too small\n        // when content does not fill the client area of the element\n        var scrollHeight = Math.max(this.output.scrollHeight, this.output.clientHeight);\n        this.output.scrollTop = scrollHeight - this.output.clientHeight;\n    }"
        ],
        [
            "function() {\n        var rect = this.element.getClientRects()[0];\n\n        this.completer.style.top = rect.top + 'px';\n        var height = rect.bottom - rect.top;\n        this.completer.style.height = height + 'px';\n        this.completer.style.lineHeight = height + 'px';\n        this.completer.style.left = rect.left + 'px';\n        var width = rect.right - rect.left;\n        this.completer.style.width = width + 'px';\n\n        if (this.hintDirection.get() === 'below') {\n            this.hinter.style.top = rect.bottom + 'px';\n            this.hinter.style.bottom = 'auto';\n        }\n        else {\n            this.hinter.style.top = 'auto';\n            this.hinter.style.bottom = (this.doc.documentElement.clientHeight - rect.top) + 'px';\n        }\n        this.hinter.style.left = (rect.left + 30) + 'px';\n        this.hinter.style.maxWidth = (width - 110) + 'px';\n\n        if (this.popupOutput) {\n            if (this.outputDirection.get() === 'below') {\n                this.output.style.top = rect.bottom + 'px';\n                this.output.style.bottom = 'auto';\n            }\n            else {\n                this.output.style.top = 'auto';\n                this.output.style.bottom = (this.doc.documentElement.clientHeight - rect.top) + 'px';\n            }\n            this.output.style.left = rect.left + 'px';\n            this.output.style.width = (width - 80) + 'px';\n        }\n    }"
        ],
        [
            "function(ev, hashId, keyCode) {\n        var stopEvent;\n        if (keyCode === keys.TAB ||\n                keyCode === keys.UP ||\n                keyCode === keys.DOWN) {\n            stopEvent = true;\n        } else if (hashId != 0 || keyCode != 0) {\n            stopEvent = canon.execKeyCommand(this.env, 'cli', hashId, keyCode);\n        }\n        stopEvent && event.stopEvent(ev);\n    }"
        ],
        [
            "function(ev) {\n        var handled;\n        /*\n        var handled = keyboardManager.processKeyEvent(ev, this, {\n            isCommandLine: true, isKeyUp: true\n        });\n        */\n\n        // RETURN does a special exec/highlight thing\n        if (ev.keyCode === keys.RETURN) {\n            var worst = this.cli.getWorstHint();\n            // Deny RETURN unless the command might work\n            if (worst.status === Status.VALID) {\n                this.cli.exec();\n                this.element.value = '';\n            }\n            else {\n                // If we've denied RETURN because the command was not VALID,\n                // select the part of the command line that is causing problems\n                // TODO: if there are 2 errors are we picking the right one?\n                dom.setSelectionStart(this.element, worst.start);\n                dom.setSelectionEnd(this.element, worst.end);\n            }\n        }\n\n        this.update();\n\n        // Special actions which delegate to the assignment\n        var current = this.cli.getAssignmentAt(dom.getSelectionStart(this.element));\n        if (current) {\n            // TAB does a special complete thing\n            if (ev.keyCode === keys.TAB) {\n                current.complete();\n                this.update();\n            }\n\n            // UP/DOWN look for some history\n            if (ev.keyCode === keys.UP) {\n                current.increment();\n                this.update();\n            }\n            if (ev.keyCode === keys.DOWN) {\n                current.decrement();\n                this.update();\n            }\n        }\n\n        return handled;\n    }"
        ],
        [
            "function() {\n        this.isUpdating = true;\n        var input = {\n            typed: this.element.value,\n            cursor: {\n                start: dom.getSelectionStart(this.element),\n                end: dom.getSelectionEnd(this.element.selectionEnd)\n            }\n        };\n        this.cli.update(input);\n\n        var display = this.cli.getAssignmentAt(input.cursor.start).getHint();\n\n        // 1. Update the completer with prompt/error marker/TAB info\n        dom.removeCssClass(this.completer, Status.VALID.toString());\n        dom.removeCssClass(this.completer, Status.INCOMPLETE.toString());\n        dom.removeCssClass(this.completer, Status.INVALID.toString());\n\n        var completion = '<span class=\"cptPrompt\">&gt;</span> ';\n        if (this.element.value.length > 0) {\n            var scores = this.cli.getInputStatusMarkup();\n            completion += this.markupStatusScore(scores);\n        }\n\n        // Display the \"-> prediction\" at the end of the completer\n        if (this.element.value.length > 0 &&\n                display.predictions && display.predictions.length > 0) {\n            var tab = display.predictions[0];\n            completion += ' &nbsp;&#x21E5; ' + (tab.name ? tab.name : tab);\n        }\n        this.completer.innerHTML = completion;\n        dom.addCssClass(this.completer, this.cli.getWorstHint().status.toString());\n\n        // 2. Update the hint element\n        var hint = '';\n        if (this.element.value.length !== 0) {\n            hint += display.message;\n            if (display.predictions && display.predictions.length > 0) {\n                hint += ': [ ';\n                display.predictions.forEach(function(prediction) {\n                    hint += (prediction.name ? prediction.name : prediction);\n                    hint += ' | ';\n                }, this);\n                hint = hint.replace(/\\| $/, ']');\n            }\n        }\n\n        this.hinter.innerHTML = hint;\n        if (hint.length === 0) {\n            dom.addCssClass(this.hinter, 'cptNoPopup');\n        }\n        else {\n            dom.removeCssClass(this.hinter, 'cptNoPopup');\n        }\n\n        this.isUpdating = false;\n    }"
        ],
        [
            "function(scores) {\n        var completion = '';\n        // Create mark-up\n        var i = 0;\n        var lastStatus = -1;\n        while (true) {\n            if (lastStatus !== scores[i]) {\n                completion += '<span class=' + scores[i].toString() + '>';\n                lastStatus = scores[i];\n            }\n            completion += this.element.value[i];\n            i++;\n            if (i === this.element.value.length) {\n                completion += '</span>';\n                break;\n            }\n            if (lastStatus !== scores[i]) {\n                completion += '</span>';\n            }\n        }\n\n        return completion;\n    }"
        ],
        [
            "function(ev) {\n        if (this.isUpdating) {\n            return;\n        }\n\n        var prefix = this.element.value.substring(0, ev.argument.start);\n        var suffix = this.element.value.substring(ev.argument.end);\n        var insert = typeof ev.text === 'string' ? ev.text : ev.text.name;\n        this.element.value = prefix + insert + suffix;\n        // Fix the cursor.\n        var insertEnd = (prefix + insert).length;\n        this.element.selectionStart = insertEnd;\n        this.element.selectionEnd = insertEnd;\n    }"
        ],
        [
            "function RequestView(request, cliView) {\n    this.request = request;\n    this.cliView = cliView;\n    this.imageUrl = imageUrl;\n\n    // Elements attached to this by the templater. For info only\n    this.rowin = null;\n    this.rowout = null;\n    this.output = null;\n    this.hide = null;\n    this.show = null;\n    this.duration = null;\n    this.throb = null;\n\n    new Templater().processNode(row.cloneNode(true), this);\n\n    this.cliView.output.appendChild(this.rowin);\n    this.cliView.output.appendChild(this.rowout);\n\n    this.request.addEventListener('output', this.onRequestChange.bind(this));\n}"
        ],
        [
            "function(ev) {\n        this.cliView.cli.update({\n            typed: this.request.typed,\n            cursor: { start:0, end:0 }\n        });\n        this.cliView.cli.exec();\n    }"
        ],
        [
            "function(member, clone, ref) {\n        ref.parentNode.insertBefore(clone, ref);\n        data[paramName] = member;\n        self.processNode(clone, data);\n        delete data[paramName];\n      }"
        ],
        [
            "function string(state) {\n        return [\n            {\n            token : \"string\",\n            regex : '\".*?\"'\n        }, {\n            token : \"string\", // multi line string start\n            regex : '[\"].*$',\n            next : state + \"-qqstring\"\n        }, {\n            token : \"string\",\n            regex : \"'.*?'\"\n        }, {\n            token : \"string\", // multi line string start\n            regex : \"['].*$\",\n            next : state + \"-qstring\"\n        }]\n    }"
        ],
        [
            "function(data, hashId, key) {\n        // If we pressed any command key but no other key, then ignore the input.\n        // Otherwise \"shift-\" is added to the buffer, and later on \"shift-g\"\n        // which results in \"shift-shift-g\" which doesn't make senese.\n        if (hashId != 0 && (key == \"\" || String.fromCharCode(0))) {\n            return null;\n        }\n\n        // Compute the current value of the keyboard input buffer.\n        var r = this.$composeBuffer(data, hashId, key);\n        var buffer = r.bufferToUse;\n        var symbolicName = r.symbolicName;\n\n        r = this.$find(data, buffer, symbolicName, hashId, key);\n        if (DEBUG) {\n            console.log(\"KeyboardStateMapper#match\", buffer, symbolicName, r);\n        }\n\n        return r;\n    }"
        ],
        [
            "function(model, req) {    \n    if(!model) return {}\n    \n    var fields = {}\n        ,queryFieldSet   \n        \n    if(req) {\n        if(req.fieldSet) {\n            queryFieldSet = {}\n            try {\n                queryFieldSet = JSON.parse(req.fieldSet)\n            } catch(e) {queryFieldSet = null}       \n        } else if(req.urlparams && req.urlparams[1]) {\n            queryFieldSet = {}\n            var x = req.urlparams[1].split(',')\n            for(var i=0;i<x.length;i++) queryFieldSet[x[i]] = 1    \n        }\n    }\n\n    for(var i in model.fields) if(model.fields[i] && model.fields[i].visable) {\n        if(!queryFieldSet || queryFieldSet[model.fields[i].name]) fields[model.fields[i].name] = 1\n    }\n    return fields;\n}"
        ],
        [
            "function(grid) {\n        var me = this;\n\n        if (grid.rendered) {\n            me.grid = grid;\n            grid.getView().on({\n                render: function(v) {\n                    me.view = v;\n                    Ext.ux.dd.CellFieldDropZone.superclass.constructor.call(me, me.view.el);\n                },\n                single: true\n            });\n        } else {\n            grid.on('render', me.init, me, {single: true});\n        }\n    }"
        ],
        [
            "function(target, dd, e, dragData) {\n        delete this.dropOK;\n        if (!target) {\n            return;\n        }\n\n//      Check that a field is being dragged.\n        var f = dragData.field;\n        if (!f) {\n            return;\n        }\n\n//      Check whether the data type of the column being dropped on accepts the\n//      dragged field type. If so, set dropOK flag, and highlight the target node.\n        var type = target.record.fields.get(target.fieldName).type,\n            types = Ext.data.Types;\n        switch(type){\n            case types.FLOAT:\n            case types.INT:\n                if (!f.isXType('numberfield')) {\n                    return;\n                }\n                break;\n            case types.DATE:\n                if (!f.isXType('datefield')) {\n                    return;\n                }\n                break;\n            case types.BOOL:\n                if (!f.isXType('checkbox')) {\n                    return;\n                }\n        }\n        this.dropOK = true;\n        Ext.fly(target.node).addCls('x-drop-target-active');\n    }"
        ],
        [
            "function(target, dd, e, dragData) {\n        if (this.dropOK) {\n            var value = dragData.field.getValue();\n            target.record.set(target.fieldName, value);\n            this.onCellDrop(target.fieldName, value);\n            return true;\n        }\n    }"
        ],
        [
            "function(cssText, id) {\n            var ss,\n                head = doc.getElementsByTagName(\"head\")[0],\n                styleEl = doc.createElement(\"style\");\n\n            styleEl.setAttribute(\"type\", \"text/css\");\n            if (id) {\n               styleEl.setAttribute(\"id\", id);\n            }\n\n            if (Ext.isIE) {\n               head.appendChild(styleEl);\n               ss = styleEl.styleSheet;\n               ss.cssText = cssText;\n            } else {\n                try{\n                    styleEl.appendChild(doc.createTextNode(cssText));\n                } catch(e) {\n                   styleEl.cssText = cssText;\n                }\n                head.appendChild(styleEl);\n                ss = styleEl.styleSheet ? styleEl.styleSheet : (styleEl.sheet || doc.styleSheets[doc.styleSheets.length-1]);\n            }\n            CSS.cacheStyleSheet(ss);\n            return ss;\n        }"
        ],
        [
            "function(id) {\n            var existing = doc.getElementById(id);\n            if (existing) {\n                existing.parentNode.removeChild(existing);\n            }\n        }"
        ],
        [
            "function(id, url) {\n            var ss;\n            CSS.removeStyleSheet(id);\n            ss = doc.createElement(\"link\");\n            ss.setAttribute(\"rel\", \"stylesheet\");\n            ss.setAttribute(\"type\", \"text/css\");\n            ss.setAttribute(\"id\", id);\n            ss.setAttribute(\"href\", url);\n            doc.getElementsByTagName(\"head\")[0].appendChild(ss);\n        }"
        ],
        [
            "function(refreshCache) {\n            var result = {},\n                selector;\n\n            if (rules === null || refreshCache) {\n                CSS.refreshCache();\n            }\n            for (selector in rules) {\n                result[selector] = rules[selector].cssRule;\n            }\n            return result;\n        }"
        ],
        [
            "function(styleSheet, selector, cssText) {\n            var result,\n                ruleSet = styleSheet.cssRules || styleSheet.rules,\n                index = ruleSet.length;\n\n            if (styleSheet.insertRule) {\n                styleSheet.insertRule(selector + '{' + cssText + '}', index);\n            } else {\n                styleSheet.addRule(selector, cssText||' ');\n            }\n            CSS.cacheRule(result = ruleSet[index], styleSheet);\n            return result;\n        }"
        ],
        [
            "function cloneObject( obj ) {\n  if ( obj === null || typeof obj !== 'object' ) {\n    return obj;\n  }\n  var temp = obj.constructor( ); // give temp the original obj's constructor\n  for ( var key in obj ) {\n    temp[ key ] = cloneObject( obj[ key ] );\n  }\n  return temp;\n}"
        ],
        [
            "function(node, callback, scope, args) {\n        var me = this,\n            reader, dataRoot, data,\n            callbackArgs;\n        \n        // Children are loaded go ahead with expand\n        if (node.isLoaded()) {\n            callbackArgs = [node.childNodes];\n            if (args) {\n                callbackArgs.push.apply(callbackArgs, args);\n            }\n            Ext.callback(callback, scope || node, callbackArgs);\n        }\n        // There are unloaded child nodes in the raw data because of the lazy configuration, load them then call back.\n        else if (dataRoot = (data = (node.raw || node[node.persistenceProperty])[(reader = me.getProxy().getReader()).root])) {\n            me.fillNode(node, reader.extractData(dataRoot));\n            delete data[reader.root];\n            callbackArgs = [node.childNodes];\n            if (args) {\n                callbackArgs.push.apply(callbackArgs, args);\n            }\n            Ext.callback(callback, scope || node, callbackArgs);\n        }\n        // The node is loading\n        else if (node.isLoading()) {\n            me.on('load', function() {\n                callbackArgs = [node.childNodes];\n                if (args) {\n                    callbackArgs.push.apply(callbackArgs, args);\n                }\n                Ext.callback(callback, scope || node, callbackArgs);\n            }, me, {single: true});\n        }\n        // Node needs loading\n        else {\n            me.read({\n                node: node,\n                callback: function() {\n                    // Clear the callback, since if we're introducing a custom one,\n                    // it may be re-used on reload\n                    delete me.lastOptions.callback;\n                    callbackArgs = [node.childNodes];\n                    if (args) {\n                        callbackArgs.push.apply(callbackArgs, args);\n                    }\n                    Ext.callback(callback, scope || node, callbackArgs);\n                }\n            });\n        }\n    }"
        ],
        [
            "function(node1, node2) {\n        return node1[node1.persistenceProperty].index - node2[node2.persistenceProperty].index;\n    }"
        ],
        [
            "function init(tag, attrs, params) {  // {{{2\n/**\n * View constructor\n *\n * @copyParams ose-html5.lib.wrap/constructor\n *\n * @method constructor\n */\n\n  O.inherited(this)(tag || 'ul', attrs, params);\n\n  this.updating = 0;\n\n  this.hook();\n  this.text('Loading ...');\n}"
        ],
        [
            "function(req, res, runMethod) {\n    var form = new formidable.IncomingForm()\n        ,files = {}\n        ,fields = {}\n        ,size = 0                \n\n    for(var i in formConfig) {\n        form[i] = formConfig[i]\n    }\n    form.on('file', function(field, file) {\n        size += file.size\n        if(size > maxUploadSize) {\n            return false;\n        }\n        if(files[field]) {\n            if(!util.isArray(files[field])) files[field] = [files[field]]                    \n            files[field].push(file)        \n        } else {\n            files[field] = file;\n        }\n    })            \n    form.on('field', function(field, value) {\n        if(fields[field]) {\n            if(!util.isArray(fields[field])) fields[field] = [fields[field]]                    \n            fields[field].push(value)        \n        } else {\n            fields[field] = value;\n        }\n    })            \n    form.on('end', function() {\n        fields.files = files\n        runMethod(req, res, fields); \n    });\n    form.parse(req); \n}"
        ],
        [
            "function sortArgs(app, argv, options) {\n  options = options || [];\n\n  var first = options.first || [];\n  var last = options.last || [];\n  var cliKeys = [];\n\n  if (app.cli && app.cli.keys) {\n    cliKeys = app.cli.keys;\n  }\n\n  var keys = utils.union(first, cliKeys, Object.keys(argv));\n  keys = utils.diff(keys, last);\n  keys = utils.union(keys, last);\n\n  var len = keys.length;\n  var idx = -1;\n  var res = {};\n\n  while (++idx < len) {\n    var key = keys[idx];\n    if (argv.hasOwnProperty(key)) {\n      res[key] = argv[key];\n    }\n  }\n  return res;\n}"
        ],
        [
            "function() {\n        var me = this,\n            picker = new Ext.tree.Panel({\n                shrinkWrapDock: 2,\n                store: me.store,\n                floating: true,\n                displayField: me.displayField,\n                columns: me.columns,\n                minHeight: me.minPickerHeight,\n                maxHeight: me.maxPickerHeight,\n                manageHeight: false,\n                shadow: false,\n                listeners: {\n                    scope: me,\n                    itemclick: me.onItemClick\n                },\n                viewConfig: {\n                    listeners: {\n                        scope: me,\n                        render: me.onViewRender\n                    }\n                }\n            }),\n            view = picker.getView();\n\n        if (Ext.isIE9 && Ext.isStrict) {\n            // In IE9 strict mode, the tree view grows by the height of the horizontal scroll bar when the items are highlighted or unhighlighted.\n            // Also when items are collapsed or expanded the height of the view is off. Forcing a repaint fixes the problem.\n            view.on({\n                scope: me,\n                highlightitem: me.repaintPickerView,\n                unhighlightitem: me.repaintPickerView,\n                afteritemexpand: me.repaintPickerView,\n                afteritemcollapse: me.repaintPickerView\n            });\n        }\n        return picker;\n    }"
        ],
        [
            "function() {\n        var style = this.picker.getView().getEl().dom.style;\n\n        // can't use Element.repaint because it contains a setTimeout, which results in a flicker effect\n        style.display = style.display;\n    }"
        ],
        [
            "function() {\n        var me = this,\n            picker;\n\n        if (me.isExpanded) {\n            picker = me.getPicker();\n            if (me.matchFieldWidth) {\n                // Auto the height (it will be constrained by max height)\n                picker.setWidth(me.bodyEl.getWidth());\n            }\n            if (picker.isFloating()) {\n                me.doAlign();\n            }\n        }\n    }"
        ],
        [
            "function(e, el) {\n        var key = e.getKey();\n\n        if(key === e.ENTER || (key === e.TAB && this.selectOnTab)) {\n            this.selectItem(this.picker.getSelectionModel().getSelection()[0]);\n        }\n    }"
        ],
        [
            "function(record) {\n        var me = this;\n        me.setValue(record.getId());\n        me.picker.hide();\n        me.inputEl.focus();\n        me.fireEvent('select', me, record)\n\n    }"
        ],
        [
            "function() {\n        var me = this,\n            picker = me.picker,\n            store = picker.store,\n            value = me.value,\n            node;\n\n        \n        if (value) {\n            node = store.getNodeById(value);\n        }\n        \n        if (!node) {\n            node = store.getRootNode();\n        }\n        \n        picker.selectPath(node.getPath());\n\n        Ext.defer(function() {\n            picker.getView().focus();\n        }, 1);\n    }"
        ],
        [
            "function(value) {\n        var me = this,\n            record;\n\n        me.value = value;\n\n        if (me.store.loading) {\n            // Called while the Store is loading. Ensure it is processed by the onLoad method.\n            return me;\n        }\n            \n        // try to find a record in the store that matches the value\n        record = value ? me.store.getNodeById(value) : me.store.getRootNode();\n        if (value === undefined) {\n            record = me.store.getRootNode();\n            me.value = record.getId();\n        } else {\n            record = me.store.getNodeById(value);\n        }\n\n        // set the raw value to the record's display field if a record was found\n        me.setRawValue(record ? record.get(me.displayField) : '');\n\n        return me;\n    }"
        ],
        [
            "function(key) {\n    var pos = key.indexOf('[');\n    if (pos === -1) return { type: 'string', val: key };\n    return { type: 'array', val: key.substr(0, pos) };\n  }"
        ],
        [
            "function(direction) {\n        var me = this;\n        me.direction = direction ? direction.toUpperCase() : direction;\n        me.updateSortFunction();\n    }"
        ],
        [
            "function() {\n        var me = this;\n        me.direction = Ext.String.toggle(me.direction, \"ASC\", \"DESC\");\n        me.updateSortFunction();\n    }"
        ],
        [
            "function(fn) {\n        var me = this;\n        fn = fn || me.sorterFn || me.defaultSorterFn;\n        me.sort = me.createSortFunction(fn);\n    }"
        ],
        [
            "function Recurring(str) {\n  \n  var parts = str.split('/');\n\n  if(str.charAt(0) != 'R' || parts.length != 3) {\n    throw new Error('Invalid Recurring Date');\n  }\n\n  // We must have start and end. error if both aren't set\n  if(!parts[1] || !parts[2]) {\n    throw new Error('Recurring must have a start and end');\n  }\n\n  var countNum = parts[0].substr(1);\n\n  // Validate count is a number if set\n  if(countNum) {\n    if(!(/^[0-9]+$/.test(countNum))) {\n      throw new Error('Invalid recurrence count: not a number')\n    }\n    this.count = parseInt(countNum, 10);\n    if(this.count < 0) throw new Error('Invalid recurrence count');\n  }\n\n  Range.call(this, parts[1]+'/'+parts[2]);\n\n  // If we have a count, replace end with the actual end date or undefined.\n  delete this.end;\n  if(this.count) {\n    this.end = this.getNth(this.count);\n  }\n}"
        ],
        [
            "function iopaStaticSend(context, path, opts) {\n    opts = opts || {};\n    \n    return new Promise(function iopaStaticLoad(resolve, reject){\n                       var root = opts.root ? normalize(pathResolve(opts.root)) : '';\n                       var index = opts.index;\n                       var maxage = opts.maxage || 0;\n                       var hidden = opts.hidden || false;\n                       var sync = opts.sync || false;\n                       opts = null;\n                       \n                       \n                       // normalize path\n                       path = decode(path);\n                       if (path ==\"\")\n                         path = \"/\";\n                         \n                          var trailingSlash = '/' == path[path.length - 1];\n                    \n                       if (-1 == path) return reject('failed to decode');\n                       \n                       // null byte(s)\n                       if (~path.indexOf('\\0')) return reject('null bytes');\n                       \n                       // index file support\n                       if (index && trailingSlash) path += index;\n                       \n                       // malicious path\n                       if (!root && !isAbsolute(path)) return reject('relative paths require the .root option');\n                       if (!root && ~path.indexOf('..')) return reject('malicious path');\n                       \n                       // relative to root\n                       path = normalize(join(root, path));\n                       \n                       // out of bounds\n                       if (root && 0 != path.indexOf(root)) return reject('malicious path');\n                       \n                       // hidden file support, ignore\n                       if (!hidden && leadingDot(path)) return resolve();\n                       var stats;\n                       try\n                       {\n                       stats = fs.statSync(path);\n                       }\n                       catch (err) {\n                       return resolve(null);\n                       }\n                       \n                       if (stats.isDirectory())\n                       {\n                       return resolve(null);\n                       }\n                       var contentType =  mime.lookup(path) || 'application/octet-stream';\n                       \n                       context.response.writeHead(200, {\n                                               'Content-Type' : contentType,\n                                               'Last-Modified' : stats.mtime.toUTCString(),\n                                               'Content-Length': stats.size + '',\n                                               'Cache-Control': 'max-age=' + (maxage / 1000 | 0)});\n                       \n                       if (sync)\n                       {\n                       var bodyBuffer = fs.readFileSync(path);\n                       context.response.end(bodyBuffer);\n                       bodyBuffer = null;\n                       context = null;\n                       return resolve();\n                       }\n                       else\n                       {\n                       \n                       var stream = fs.createReadStream(path, { flags: 'r',\n                                                        encoding: null,\n                                                        autoClose: true\n                                                        });\n                       \n                       stream.on('error', function(err){\n                                 console.log(err);\n                                 stream = null;\n                                 context = null;\n                                 \n                                 reject(err);\n                                 \n                                 });\n                       \n                       stream.on('end', function(){\n                                 context.response.end();\n                                 stream = null;\n                                 context = null;\n                                 resolve();\n                            \n                                 });\n                       \n                       stream.pipe(context.response[IOPA.Body]);\n                       \n                       return;\n                       }\n                       });\n}"
        ],
        [
            "function(ed) {\r\n\t\t\tvar self = this, testKey = PLUGIN_NAME + '_test', testVal = \"OK\";\r\n\r\n\t\t\tself.key = PLUGIN_NAME + ed.id;\r\n\r\n\t\t\t// Loop though each storage engine type until we find one that works\r\n\t\t\ttinymce.each([\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\t// Try HTML5 Local Storage\r\n\t\t\t\t\tif (localStorage) {\r\n\t\t\t\t\t\tlocalStorage.setItem(testKey, testVal);\r\n\r\n\t\t\t\t\t\tif (localStorage.getItem(testKey) === testVal) {\r\n\t\t\t\t\t\t\tlocalStorage.removeItem(testKey);\r\n\r\n\t\t\t\t\t\t\treturn localStorage;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\t// Try HTML5 Session Storage\r\n\t\t\t\t\tif (sessionStorage) {\r\n\t\t\t\t\t\tsessionStorage.setItem(testKey, testVal);\r\n\r\n\t\t\t\t\t\tif (sessionStorage.getItem(testKey) === testVal) {\r\n\t\t\t\t\t\t\tsessionStorage.removeItem(testKey);\r\n\r\n\t\t\t\t\t\t\treturn sessionStorage;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfunction() {\r\n\t\t\t\t\t// Try IE userData\r\n\t\t\t\t\tif (tinymce.isIE) {\r\n\t\t\t\t\t\ted.getElement().style.behavior = \"url('#default#userData')\";\r\n\r\n\t\t\t\t\t\t// Fake localStorage on old IE\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tautoExpires : TRUE,\r\n\r\n\t\t\t\t\t\t\tsetItem : function(key, value) {\r\n\t\t\t\t\t\t\t\tvar userDataElement = ed.getElement();\r\n\r\n\t\t\t\t\t\t\t\tuserDataElement.setAttribute(key, value);\r\n\t\t\t\t\t\t\t\tuserDataElement.expires = self.getExpDate();\r\n\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tuserDataElement.save(\"TinyMCE\");\r\n\t\t\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\t\t\t// Ignore, saving might fail if \"Userdata Persistence\" is disabled in IE\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t\tgetItem : function(key) {\r\n\t\t\t\t\t\t\t\tvar userDataElement = ed.getElement();\r\n\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tuserDataElement.load(\"TinyMCE\");\r\n\t\t\t\t\t\t\t\t\treturn userDataElement.getAttribute(key);\r\n\t\t\t\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\t\t\t\t// Ignore, loading might fail if \"Userdata Persistence\" is disabled in IE\r\n\t\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\r\n\t\t\t\t\t\t\tremoveItem : function(key) {\r\n\t\t\t\t\t\t\t\ted.getElement().removeAttribute(key);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t], function(setup) {\r\n\t\t\t\t// Try executing each function to find a suitable storage engine\r\n\t\t\t\ttry {\r\n\t\t\t\t\tself.storage = setup();\r\n\r\n\t\t\t\t\tif (self.storage)\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\t// Ignore\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}"
        ],
        [
            "function() {\r\n\t\t\tvar self = this, storage = self.storage, editor = self.editor, expires, content;\r\n\r\n\t\t\t// Is the contents dirty\r\n\t\t\tif (storage) {\r\n\t\t\t\t// If there is no existing key and the contents hasn't been changed since\r\n\t\t\t\t// it's original value then there is no point in saving a draft\r\n\t\t\t\tif (!storage.getItem(self.key) && !editor.isDirty())\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t// Store contents if the contents if longer than the minlength of characters\r\n\t\t\t\tcontent = editor.getContent({draft: true});\r\n\t\t\t\tif (content.length > editor.settings.autosave_minlength) {\r\n\t\t\t\t\texpires = self.getExpDate();\r\n\r\n\t\t\t\t\t// Store expiration date if needed IE userData has auto expire built in\r\n\t\t\t\t\tif (!self.storage.autoExpires)\r\n\t\t\t\t\t\tself.storage.setItem(self.key + \"_expires\", expires);\r\n\r\n\t\t\t\t\tself.storage.setItem(self.key, content);\r\n\t\t\t\t\tself.onStoreDraft.dispatch(self, {\r\n\t\t\t\t\t\texpires : expires,\r\n\t\t\t\t\t\tcontent : content\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function() {\r\n\t\t\tvar self = this, storage = self.storage, content;\r\n\r\n\t\t\tif (storage) {\r\n\t\t\t\tcontent = storage.getItem(self.key);\r\n\r\n\t\t\t\tif (content) {\r\n\t\t\t\t\tself.editor.setContent(content);\r\n\t\t\t\t\tself.onRestoreDraft.dispatch(self, {\r\n\t\t\t\t\t\tcontent : content\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function() {\r\n\t\t\tvar self = this, storage = self.storage, key = self.key, content;\r\n\r\n\t\t\tif (storage) {\r\n\t\t\t\t// Get current contents and remove the existing draft\r\n\t\t\t\tcontent = storage.getItem(key);\r\n\t\t\t\tstorage.removeItem(key);\r\n\t\t\t\tstorage.removeItem(key + \"_expires\");\r\n\r\n\t\t\t\t// Dispatch remove event if we had any contents\r\n\t\t\t\tif (content) {\r\n\t\t\t\t\tself.onRemoveDraft.dispatch(self, {\r\n\t\t\t\t\t\tcontent : content\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function(e) {\r\n\t\t\t\tvar msg;\r\n\r\n\t\t\t\ttinymce.each(tinyMCE.editors, function(ed) {\r\n\t\t\t\t\t// Store a draft for each editor instance\r\n\t\t\t\t\tif (ed.plugins.autosave)\r\n\t\t\t\t\t\ted.plugins.autosave.storeDraft();\r\n\r\n\t\t\t\t\t// Never ask in fullscreen mode\r\n\t\t\t\t\tif (ed.getParam(\"fullscreen_is_enabled\"))\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t// Setup a return message if the editor is dirty\r\n\t\t\t\t\tif (!msg && ed.isDirty() && ed.getParam(\"autosave_ask_before_unload\"))\r\n\t\t\t\t\t\tmsg = ed.getLang(\"autosave.unload_msg\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn msg;\r\n\t\t\t}"
        ],
        [
            "function request(url){\n  return new Promise(function(resolve, reject) {\n    _request(url, function (error, response, body) {\n      if(error) return reject(error);\n      resolve({response, body})\n    });\n  });\n}"
        ],
        [
            "function (grid, state) {\n        var filters = {};\n        this.filters.each(function (filter) {\n            if (filter.active) {\n                filters[filter.dataIndex] = filter.getValue();\n            }\n        });\n        return (state.filters = filters);\n    }"
        ],
        [
            "function(store) {\n        var me = this;\n\n        // Unbind from the old Store\n        if (me.store && me.storeListeners) {\n            me.store.un(me.storeListeners);\n        }\n\n        // Set up correct listeners\n        if (store) {\n            me.storeListeners = {\n                scope: me\n            };\n            if (me.local) {\n                me.storeListeners.load = me.onLoad;\n            } else {\n                me.storeListeners['before' + (store.buffered ? 'prefetch' : 'load')] = me.onBeforeLoad;\n            }\n            store.on(me.storeListeners);\n        } else {\n            delete me.storeListeners;\n        }\n        me.store = store;\n    }"
        ],
        [
            "function () {\n        var me = this,\n            headerCt = me.view.headerCt;\n        if (headerCt) {\n            headerCt.items.each(function(header) {\n                var filter = me.getFilter(header.dataIndex);\n                header[filter && filter.active ? 'addCls' : 'removeCls'](me.filterCls);\n            });\n        }\n    }"
        ],
        [
            "function () {\n        var f = [], len, i;\n        this.filters.each(function (filter) {\n            if (filter.active) {\n                f.push(filter);\n            }\n        });\n\n        len = f.length;\n        return function (record) {\n            for (i = 0; i < len; i++) {\n                if (!f[i].validateRecord(record)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }"
        ],
        [
            "function (config) {\n        var me = this,\n            columns = me.getGridPanel().columns,\n            i, columnsLength, column, filtersLength, filter;\n\n        \n        for (i = 0, columnsLength = columns.length; i < columnsLength; i++) {\n            column = columns[i];\n            if (column.dataIndex === config.dataIndex) {\n                column.filter = config;\n            }\n        }\n        \n        if (me.view.headerCt.menu) {\n            me.createFilters();\n        } else {\n            // Call getMenu() to ensure the menu is created, and so, also are the filters. We cannot call\n            // createFilters() withouth having a menu because it will cause in a recursion to applyState()\n            // that ends up to clear all the filter values. This is likely to happen when we reorder a column\n            // and then add a new filter before the menu is recreated.\n            me.view.headerCt.getMenu();\n        }\n        \n        for (i = 0, filtersLength = me.filters.items.length; i < filtersLength; i++) {\n            filter = me.filters.items[i];\n            if (filter.dataIndex === config.dataIndex) {\n                return filter;\n            }\n        }\n    }"
        ],
        [
            "function (filters) {\n        if (filters) {\n            var me = this,\n                i, filtersLength;\n            for (i = 0, filtersLength = filters.length; i < filtersLength; i++) {\n                me.addFilter(filters[i]);\n            }\n        }\n    }"
        ],
        [
            "function () {\n        var items = this.getFilterItems(),\n            filters = [],\n            n, nlen, item, d, i, len;\n\n        for (n = 0, nlen = items.length; n < nlen; n++) {\n            item = items[n];\n            if (item.active) {\n                d = [].concat(item.serialize());\n                for (i = 0, len = d.length; i < len; i++) {\n                    filters.push({\n                        field: item.dataIndex,\n                        data: d[i]\n                    });\n                }\n            }\n        }\n        return filters;\n    }"
        ],
        [
            "function (p) {\n        // if encoding just delete the property\n        if (this.encode) {\n            delete p[this.paramPrefix];\n        // otherwise scrub the object of filter data\n        } else {\n            var regex, key;\n            regex = new RegExp('^' + this.paramPrefix + '\\[[0-9]+\\]');\n            for (key in p) {\n                if (regex.test(key)) {\n                    delete p[key];\n                }\n            }\n        }\n    }"
        ],
        [
            "function(record, columnHeader) {\n        var me = this,\n            grid = me.editingPlugin.grid,\n            store = grid.store,\n            view = grid.getView(),\n            context = me.context = Ext.apply(me.editingPlugin.context, {\n                view: view,\n                store: store\n            });\n\n        if (!me.rendered) {\n            me.render(view.el);\n        }\n        // make sure our row is selected before editing\n        context.grid.getSelectionModel().select(record);\n\n        // Reload the record data\n        me.loadRecord(record);\n\n        if (!me.isVisible()) {\n            me.show();\n        }\n        me.reposition({\n            callback: this.focusContextCell\n        });\n    }"
        ],
        [
            "function Approximate() {\n\n  if(arguments.length > 0) {\n\n    if(arguments[0].length < 1 || arguments[0].charAt(0) != 'A') {\n      throw new Error('Invalid Approximate Date');\n    }\n    try {\n      Simple.call(this, arguments[0].substr(1));\n    } catch(e) {\n      throw new Error(e.message+' in Approximate Date');\n    }\n  } else {\n    Simple.call(this);\n  }\n}"
        ],
        [
            "function(form, url, params, options) {\n        form = Ext.getDom(form);\n        options = options || {};\n\n        var id = Ext.id(),\n            frame = document.createElement('iframe'),\n            hiddens = [],\n            encoding = 'multipart/form-data',\n            buf = {\n                target: form.target,\n                method: form.method,\n                encoding: form.encoding,\n                enctype: form.enctype,\n                action: form.action\n            },\n            addField = function(name, value) {\n                hiddenItem = document.createElement('input');\n                Ext.fly(hiddenItem).set({\n                    type: 'hidden',\n                    value: value,\n                    name: name\n                });\n                form.appendChild(hiddenItem);\n                hiddens.push(hiddenItem);\n            },\n            hiddenItem, obj, value, name, vLen, v, hLen, h;\n\n        /*\n         * Originally this behaviour was modified for Opera 10 to apply the secure URL after\n         * the frame had been added to the document. It seems this has since been corrected in\n         * Opera so the behaviour has been reverted, the URL will be set before being added.\n         */\n        Ext.fly(frame).set({\n            id: id,\n            name: id,\n            cls: Ext.baseCSSPrefix + 'hide-display',\n            src: Ext.SSL_SECURE_URL\n        });\n\n        document.body.appendChild(frame);\n\n        // This is required so that IE doesn't pop the response up in a new window.\n        if (document.frames) {\n            document.frames[id].name = id;\n        }\n\n        Ext.fly(form).set({\n            target: id,\n            method: 'POST',\n            enctype: encoding,\n            encoding: encoding,\n            action: url || buf.action\n        });\n\n        // add dynamic params\n        if (params) {\n            obj = Ext.Object.fromQueryString(params) || {};\n\n            for (name in obj) {\n                if (obj.hasOwnProperty(name)) {\n                    value = obj[name];  \n                    if (Ext.isArray(value)) {\n                        vLen = value.length;\n                        for (v = 0; v < vLen; v++) {\n                            addField(name, value[v]);\n                        }\n                    } else {\n                        addField(name, value);\n                    }\n                }\n            }\n        }\n\n        Ext.fly(frame).on('load', Ext.Function.bind(this.onUploadComplete, this, [frame, options]), null, {single: !Ext.isOpera});\n        form.submit();\n\n        Ext.fly(form).set(buf);\n\n        hLen = hiddens.length;\n\n        for (h = 0; h < hLen; h++) {\n            Ext.removeNode(hiddens[h]);\n        }\n    }"
        ],
        [
            "function(options) {\n        var form = this.getForm(options);\n        if (form) {\n            return (options.isUpload || (/multipart\\/form-data/i).test(form.getAttribute('enctype')));\n        }\n        return false;\n    }"
        ],
        [
            "function(options, url) {\n        var form = this.getForm(options);\n        if (form) {\n            url = url || form.action;\n        }\n        return url;\n    }"
        ],
        [
            "function(options, params) {\n        var form = this.getForm(options),\n            serializedForm;\n        if (form && !this.isFormUpload(options)) {\n            serializedForm = Ext.Element.serializeForm(form);\n            params = params ? (params + '&' + serializedForm) : serializedForm;\n        }\n        return params;\n    }"
        ],
        [
            "function(request) {\n        if (!request) {\n            request = this.getLatest();\n        }\n        if (!(request && request.xhr)) {\n            return false;\n        }\n        // if there is a connection and readyState is not 0 or 4, or in case of BinaryXHR, not 4\n        var state = request.xhr.readyState;\n        return ((request.xhr instanceof Ext.data.flash.BinaryXhr) && state != 4) || !(state === 0 || state == 4);\n    }"
        ],
        [
            "function(request) {\n        var me = this,\n            xhr;\n        \n        if (!request) {\n            request = me.getLatest();\n        }\n\n        if (request && me.isLoading(request)) {\n            /*\n             * Clear out the onreadystatechange here, this allows us\n             * greater control, the browser may/may not fire the function\n             * depending on a series of conditions.\n             */\n            xhr = request.xhr;\n            try {\n                xhr.onreadystatechange = null;\n            } catch (e) {\n                // Setting onreadystatechange to null can cause problems in IE, see\n                // http://www.quirksmode.org/blog/archives/2005/09/xmlhttp_notes_a_1.html\n                xhr.onreadystatechange = Ext.emptyFn;\n            }\n            xhr.abort();\n            me.clearTimeout(request);\n            if (!request.timedout) {\n                request.aborted = true;\n            }\n            me.onComplete(request);\n            me.cleanup(request);\n        }\n    }"
        ],
        [
            "function(){\n        var requests = this.requests,\n            id;\n        \n        for (id in requests) {\n            if (requests.hasOwnProperty(id)) {\n                this.abort(requests[id]);\n            }\n        }\n    }"
        ],
        [
            "function(request, xdrResult) {\n        var me = this;\n\n        // Using CORS with IE doesn't support readyState so we fake it\n        if ((request.xhr && request.xhr.readyState == 4) || me.isXdr) {\n            me.clearTimeout(request);\n            me.onComplete(request, xdrResult);\n            me.cleanup(request);\n            Ext.EventManager.idleEvent.fire();\n        }\n    }"
        ],
        [
            "function(request, xdrResult) {\n        var me = this,\n            options = request.options,\n            result,\n            success,\n            response;\n\n        try {\n            result = me.parseStatus(request.xhr.status);\n        } catch (e) {\n            // in some browsers we can't access the status if the readyState is not 4, so the request has failed\n            result = {\n                success : false,\n                isException : false\n            };\n\n        }\n        success = me.isXdr ? xdrResult : result.success;\n\n        if (success) {\n            response = me.createResponse(request);\n            me.fireEvent('requestcomplete', me, response, options);\n            Ext.callback(options.success, options.scope, [response, options]);\n        } else {\n            if (result.isException || request.aborted || request.timedout) {\n                response = me.createException(request);\n            } else {\n                response = me.createResponse(request);\n            }\n            me.fireEvent('requestexception', me, response, options);\n            Ext.callback(options.failure, options.scope, [response, options]);\n        }\n        Ext.callback(options.callback, options.scope, [options, success, response]);\n        delete me.requests[request.id];\n        return response;\n    }"
        ],
        [
            "function(status) {\n        // see: https://prototype.lighthouseapp.com/projects/8886/tickets/129-ie-mangles-http-response-status-code-204-to-1223\n        status = status == 1223 ? 204 : status;\n\n        var success = (status >= 200 && status < 300) || status == 304,\n            isException = false;\n\n        if (!success) {\n            switch (status) {\n                case 12002:\n                case 12029:\n                case 12030:\n                case 12031:\n                case 12152:\n                case 13030:\n                    isException = true;\n                    break;\n            }\n        }\n        return {\n            success: success,\n            isException: isException\n        };\n    }"
        ],
        [
            "function(request) {\n        return {\n            request : request,\n            requestId : request.id,\n            status : request.aborted ? -1 : 0,\n            statusText : request.aborted ? 'transaction aborted' : 'communication failure',\n            aborted: request.aborted,\n            timedout: request.timedout\n        };\n    }"
        ],
        [
            "function() {\n        var scriptTag = document.createElement('script');\n        scriptTag.type = 'text/vbscript';\n        scriptTag.text = [\n            'Function getIEByteArray(byteArray, out)',\n                'Dim len, i',\n                'len = LenB(byteArray)',\n                'For i = 1 to len',\n                    'out.push(AscB(MidB(byteArray, i, 1)))',\n                'Next',\n            'End Function'\n        ].join('\\n');\n        Ext.getHead().dom.appendChild(scriptTag);\n        this.self.vbScriptInjected = true;\n    }"
        ],
        [
            "function daysInMonth(month, year) {\n  switch(month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      return 31;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      return 30;\n    case 2:\n      var leapyear;\n      if(year % 4 != 0) {\n        leapyear = false;\n      } else if(year % 100 != 0) {\n        leapyear = true;\n      } else if(year % 400 != 0) {\n        leapyear = false;\n      } else {\n        leapyear = true;\n      }\n      if(leapyear) {\n        return 29;\n      } else {\n        return 28;\n      }\n    default:\n      throw new Error('Unknown Month');\n  }\n}"
        ],
        [
            "function setDefaults() {\n    // sequence: generate a random 3-byte integer initial value for the sequence counter\n    if (seq === undefined)\n        seq = ~~(Math.random() * 0xffffff)\n\n    // processId: 2-byte integer derived from the PID assigned by the OS\n    if (pid === undefined)\n        pid = process.pid % 0xffff\n\n    // machineId: first three bytes of the md5 hash calculated from OS hostname\n    if (mid === undefined)\n        mid = crypto.createHash('md5')\n                    .update(os.hostname())\n                    .digest()\n                    .slice(0, 3)\n                    .readUIntBE(0, 3)\n\n    // reset the counter\n    // (if `mid` or `pid` changes then previously allocated ids in the current second are freed)\n    ctr = 0\n\n    // `unique` is the fixed-length composition of `mid` and `pid`\n    unique = pad(mid, 6, 16) + pad(pid, 4, 16)\n\n    // calculate the initial sequence prefix\n    seqpref = pad(~~(seq / 16), 5, 16)\n}"
        ],
        [
            "function getTimestamp() {\n    // use `Math.floor()` here to avoid the \"Unix Millennium Bug\"\n    var now = Math.floor(Date.now() / 1000)\n\n    // it's another second since the last id were created,\n    // so we need to regenerate the timestamp\n    if (time !== now) {\n        ctr       = 0\n        timestamp = pad(time = now, 8, 16)\n    }\n    // Since changing parts of an identifier are the timestamp and\n    // the sequence; the count of maximum allocatable ids in a second\n    // is limited by the sequence size (3-bytes = about 16 million).\n    // Otherwise uniqueness is not guaranteed.\n    else\n        assert(++ctr < 0x1000000, 'more than 16 million ids generated in 1 second')\n\n    return timestamp\n}"
        ],
        [
            "function getSequence() {\n    var mod = ++seq % 16\n\n    // reset counter\n    if (seq > 0xffffff)\n        seq = mod = 0\n\n    // If counter is divisible by 16 then\n    // the sequence prefix should be regenerated.\n    // Otherwise only the last digit changed,\n    // so we don't need to update the prefix.\n    if (!mod)\n        seqpref = pad(~~(seq / 16), 5, 16)\n\n    return seqpref + digits[ mod ]\n}"
        ],
        [
            "function assertRange(name, val, max) {\n    assert.equal(typeof val, 'number', name + ' must be a number')\n    assert(!isNaN(val), 'number', name + ' must be a number')\n\n    if (val > max)\n        throw new RangeError(name + ' must be lower than ' + max + ', but is ' + val)\n    else if (val < 0)\n        throw new RangeError(name + ' must be greater than or equal to zero, but is ' + val)\n    else if (val % 1)\n        throw new RangeError(name + ' must be an integer')\n}"
        ],
        [
            "function proceedToFetch(loader, load, p) {\n      proceedToTranslate(loader, load, \n        p\n        // 15.2.4.4.1 CallFetch\n        .then(function(address) {\n          if (load.linkSets.length == 0)\n            return;\n          load.address = address;\n\n          return loader.loaderObj.fetch({ name: load.name, metadata: load.metadata, address: address });\n        })\n      );\n    }"
        ],
        [
            "function asyncStartLoadPartwayThrough(stepState) {\n      return function(resolve, reject) {\n        var loader = stepState.loader;\n        var name = stepState.moduleName;\n        var step = stepState.step;\n\n        if (loader.modules[name]) \n          throw new TypeError('\"' + name + '\" already exists in the module table');\n\n        // NB this still seems wrong for LoadModule as we may load a dependency\n        // of another module directly before it has finished loading.\n        for (var i = 0, l = loader.loads.length; i < l; i++)\n          if (loader.loads[i].name == name)\n            throw new TypeError('\"' + name + '\" already loading');\n\n        var load = createLoad(name);\n        \n        load.metadata = stepState.moduleMetadata;\n\n        var linkSet = createLinkSet(loader, load);\n\n        loader.loads.push(load);\n\n        resolve(linkSet.done);\n\n        if (step == 'locate')\n          proceedToLocate(loader, load);\n\n        else if (step == 'fetch')\n          proceedToFetch(loader, load, Promise.resolve(stepState.moduleAddress));\n\n        else {\n          console.assert(step == 'translate', 'translate step');\n          load.address = stepState.moduleAddress;\n          proceedToTranslate(loader, load, Promise.resolve(stepState.moduleSource));\n        }\n      }\n    }"
        ],
        [
            "function updateLinkSetOnLoad(linkSet, load) {\n      console.assert(load.status == 'loaded' || load.status == 'linked', 'loaded or linked');\n\n      // console.log('update linkset on load ' + load.name);\n      // snapshot(linkSet.loader);\n\n      linkSet.loadingCount--;\n\n      if (linkSet.loadingCount > 0)\n        return;\n\n      var startingLoad = linkSet.loads[0];\n      try {\n        link(linkSet);\n      }\n      catch(exc) {\n        return linkSetFailed(linkSet, exc);\n      }\n\n      console.assert(linkSet.loads.length == 0, 'loads cleared');\n\n      linkSet.resolve(startingLoad);\n    }"
        ],
        [
            "function finishLoad(loader, load) {\n      // if not anonymous, add to the module table\n      if (load.name) {\n        console.assert(!loader.modules[load.name], 'load not in module table');\n        loader.modules[load.name] = load.module;\n      }\n      var loadIndex = indexOf.call(loader.loads, load);\n      if (loadIndex != -1)\n        loader.loads.splice(loadIndex, 1);\n      for (var i = 0, l = load.linkSets.length; i < l; i++) {\n        loadIndex = indexOf.call(load.linkSets[i].loads, load);\n        if (loadIndex != -1)\n          load.linkSets[i].loads.splice(loadIndex, 1);\n      }\n      load.linkSets.splice(0, load.linkSets.length);\n    }"
        ],
        [
            "function link(linkSet) {\n\n      var loader = linkSet.loader;\n\n      // console.log('linking {' + logloads(loads) + '}');\n      // snapshot(loader);\n\n      // 15.2.5.3.1 LinkageGroups alternative implementation\n\n      // build all the groups\n      // because the first load represents the top of the tree\n      // for a given linkset, we can work down from there\n      var groups = [];\n      var startingLoad = linkSet.loads[0];\n      startingLoad.groupIndex = 0;\n      buildLinkageGroups(startingLoad, linkSet.loads, groups, loader);\n\n      // determine the kind of the bottom group\n      var curGroupDeclarative = (startingLoad.kind == 'declarative') == groups.length % 2;\n\n      // run through the groups from bottom to top\n      for (var i = groups.length - 1; i >= 0; i--) {\n        var group = groups[i];\n        for (var j = 0; j < group.length; j++) {\n          var load = group[j];\n\n          // 15.2.5.5 LinkDeclarativeModules adjusted\n          if (curGroupDeclarative) {\n            linkDeclarativeModule(load, linkSet.loads, loader);\n          }\n          // 15.2.5.6 LinkDynamicModules adjusted\n          else {\n            var module = load.execute();\n            if (!(module.__esModule))\n              throw new TypeError('Execution must define a Module instance');\n            load.module = {\n              module: module\n            };\n            load.status = 'linked';\n          }\n          finishLoad(loader, load);\n        }\n\n        // alternative current kind for next loop\n        curGroupDeclarative = !curGroupDeclarative;\n      }\n    }"
        ],
        [
            "function linkDeclarativeModule(load, loads, loader) {\n      // only link if already not already started linking (stops at circular)\n      if (load.module)\n        return;\n\n      // declare the module with an empty depMap\n      var depMap = [];\n      var sys = __global.System;\n      __global.System = loader;\n      var registryEntry = load.declare.call(__global, depMap);\n\n      __global.System = sys;\n\n      var moduleDependencies = [];\n\n      // module is just a plain object, until we evaluate it\n      var module = registryEntry.exports;\n\n      console.assert(!load.module, 'Load module already declared!');\n\n      load.module = {\n        name: load.name,\n        dependencies: moduleDependencies,\n        execute: registryEntry.execute,\n        exports: module,\n        evaluated: false\n      };\n\n      // now link all the module dependencies\n      // amending the depMap as we go\n      for (var i = 0; i < load.dependencies.length; i++) {\n        var depName = load.dependencies[i].value;\n        var depModule;\n        // if dependency already a module, use that\n        if (loader.modules[depName]) {\n          depModule = loader.modules[depName];\n        }\n        // otherwise we need to link the dependency\n        else {\n          for (var j = 0; j < loads.length; j++) {\n            if (loads[j].name != depName)\n              continue;\n            \n            linkDeclarativeModule(loads[j], loads, loader);\n            \n            depModule = loads[j].exports || loads[j].module;\n          }\n        }\n\n        console.assert(depModule, 'Dependency module not found!');\n        console.assert(depModule.exports, 'Dependency module not found!');\n\n        if (registryEntry.exportStar && indexOf.call(registryEntry.exportStar, load.dependencies[i].key) != -1) {\n          // we are exporting * from this dependency\n          (function(depModuleModule) {\n            for (var p in depModuleModule) (function(p) {\n              // if the property is already defined throw?\n              defineProperty(module, p, {\n                enumerable: true,\n                get: function() {\n                  return depModuleModule[p];\n                },\n                set: function(value) {\n                  depModuleModule[p] = value;\n                }\n              });\n            })(p);\n          })(depModule.exports);\n        }\n\n        moduleDependencies.push(depModule);\n        depMap[i] = depModule.exports;\n      }\n\n      load.status = 'linked';\n    }"
        ],
        [
            "function() {\n        var me = this,\n            view = me.view;\n\n        view.on({\n            scope: me,\n            groupclick: me.onGroupClick\n        });\n\n        if (me.enableGroupingMenu) {\n            me.injectGroupingMenu();\n        }\n\n        me.pruneGroupedHeader();\n\n        me.lastGroupField = me.getGroupField();\n        me.block();\n        me.onGroupChange();\n        me.unblock();\n    }"
        ],
        [
            "function(menuItem, e) {\n        var me = this,\n            menu = menuItem.parentMenu,\n            hdr  = menu.activeHeader,\n            view = me.view,\n            store = view.store;\n\n        delete me.lastGroupIndex;\n        me.block();\n        me.enable();\n        store.group(hdr.dataIndex);\n        me.pruneGroupedHeader();\n        me.unblock();\n        me.refreshIf();\n    }"
        ],
        [
            "function() {\n        var me = this,\n            header = me.getGroupedHeader();\n\n        if (me.hideGroupedHeader && header) {\n            Ext.suspendLayouts();\n            if (me.prunedHeader && me.prunedHeader !== header) {\n                me.prunedHeader.show();\n            }\n            me.prunedHeader = header;\n            header.hide();\n            Ext.resumeLayouts(true);\n        }\n    }"
        ],
        [
            "function(dataIndex){\n        var view = this.view,\n            header = view.headerCt.down('gridcolumn[dataIndex=' + dataIndex + ']'),\n            menu = view.headerCt.getMenu();\n\n        return header ? menu.down('menuitem[headerId='+ header.id +']') : null;\n    }"
        ],
        [
            "function process(o, force_rich) {\r\n\t\t\t\tvar dom = ed.dom, rng;\r\n\r\n\t\t\t\t// Execute pre process handlers\r\n\t\t\t\tt.onPreProcess.dispatch(t, o);\r\n\r\n\t\t\t\t// Create DOM structure\r\n\t\t\t\to.node = dom.create('div', 0, o.content);\r\n\r\n\t\t\t\t// If pasting inside the same element and the contents is only one block\r\n\t\t\t\t// remove the block and keep the text since Firefox will copy parts of pre and h1-h6 as a pre element\r\n\t\t\t\tif (tinymce.isGecko) {\r\n\t\t\t\t\trng = ed.selection.getRng(true);\r\n\t\t\t\t\tif (rng.startContainer == rng.endContainer && rng.startContainer.nodeType == 3) {\r\n\t\t\t\t\t\t// Is only one block node and it doesn't contain word stuff\r\n\t\t\t\t\t\tif (o.node.childNodes.length === 1 && /^(p|h[1-6]|pre)$/i.test(o.node.firstChild.nodeName) && o.content.indexOf('__MCE_ITEM__') === -1)\r\n\t\t\t\t\t\t\tdom.remove(o.node.firstChild, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Execute post process handlers\r\n\t\t\t\tt.onPostProcess.dispatch(t, o);\r\n\r\n\t\t\t\t// Serialize content\r\n\t\t\t\to.content = ed.serializer.serialize(o.node, {getInner : 1, forced_root_block : ''});\r\n\r\n\t\t\t\t// Plain text option active?\r\n\t\t\t\tif ((!force_rich) && (ed.pasteAsPlainText)) {\r\n\t\t\t\t\tt._insertPlainText(o.content);\r\n\r\n\t\t\t\t\tif (!getParam(ed, \"paste_text_sticky\")) {\r\n\t\t\t\t\t\ted.pasteAsPlainText = false;\r\n\t\t\t\t\t\ted.controlManager.setActive(\"pastetext\", false);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tt._insert(o.content);\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function grabContent(e) {\r\n\t\t\t\tvar n, or, rng, oldRng, sel = ed.selection, dom = ed.dom, body = ed.getBody(), posY, textContent;\r\n\r\n\t\t\t\t// Check if browser supports direct plaintext access\r\n\t\t\t\tif (e.clipboardData || dom.doc.dataTransfer) {\r\n\t\t\t\t\ttextContent = (e.clipboardData || dom.doc.dataTransfer).getData('Text');\r\n\r\n\t\t\t\t\tif (ed.pasteAsPlainText) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tprocess({content : dom.encode(textContent).replace(/\\r?\\n/g, '<br />')});\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dom.get('_mcePaste'))\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t// Create container to paste into\r\n\t\t\t\tn = dom.add(body, 'div', {id : '_mcePaste', 'class' : 'mcePaste', 'data-mce-bogus' : '1'}, '\\uFEFF\\uFEFF');\r\n\r\n\t\t\t\t// If contentEditable mode we need to find out the position of the closest element\r\n\t\t\t\tif (body != ed.getDoc().body)\r\n\t\t\t\t\tposY = dom.getPos(ed.selection.getStart(), body).y;\r\n\t\t\t\telse\r\n\t\t\t\t\tposY = body.scrollTop + dom.getViewPort(ed.getWin()).y;\r\n\r\n\t\t\t\t// Styles needs to be applied after the element is added to the document since WebKit will otherwise remove all styles\r\n\t\t\t\t// If also needs to be in view on IE or the paste would fail\r\n\t\t\t\tdom.setStyles(n, {\r\n\t\t\t\t\tposition : 'absolute',\r\n\t\t\t\t\tleft : tinymce.isGecko ? -40 : 0, // Need to move it out of site on Gecko since it will othewise display a ghost resize rect for the div\r\n\t\t\t\t\ttop : posY - 25,\r\n\t\t\t\t\twidth : 1,\r\n\t\t\t\t\theight : 1,\r\n\t\t\t\t\toverflow : 'hidden'\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (tinymce.isIE) {\r\n\t\t\t\t\t// Store away the old range\r\n\t\t\t\t\toldRng = sel.getRng();\r\n\r\n\t\t\t\t\t// Select the container\r\n\t\t\t\t\trng = dom.doc.body.createTextRange();\r\n\t\t\t\t\trng.moveToElementText(n);\r\n\t\t\t\t\trng.execCommand('Paste');\r\n\r\n\t\t\t\t\t// Remove container\r\n\t\t\t\t\tdom.remove(n);\r\n\r\n\t\t\t\t\t// Check if the contents was changed, if it wasn't then clipboard extraction failed probably due\r\n\t\t\t\t\t// to IE security settings so we pass the junk though better than nothing right\r\n\t\t\t\t\tif (n.innerHTML === '\\uFEFF\\uFEFF') {\r\n\t\t\t\t\t\ted.execCommand('mcePasteWord');\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Restore the old range and clear the contents before pasting\r\n\t\t\t\t\tsel.setRng(oldRng);\r\n\t\t\t\t\tsel.setContent('');\r\n\r\n\t\t\t\t\t// For some odd reason we need to detach the the mceInsertContent call from the paste event\r\n\t\t\t\t\t// It's like IE has a reference to the parent element that you paste in and the selection gets messed up\r\n\t\t\t\t\t// when it tries to restore the selection\r\n\t\t\t\t\tsetTimeout(function() {\r\n\t\t\t\t\t\t// Process contents\r\n\t\t\t\t\t\tprocess({content : n.innerHTML});\r\n\t\t\t\t\t}, 0);\r\n\r\n\t\t\t\t\t// Block the real paste event\r\n\t\t\t\t\treturn tinymce.dom.Event.cancel(e);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfunction block(e) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\t// Block mousedown and click to prevent selection change\r\n\t\t\t\t\tdom.bind(ed.getDoc(), 'mousedown', block);\r\n\t\t\t\t\tdom.bind(ed.getDoc(), 'keydown', block);\r\n\r\n\t\t\t\t\tor = ed.selection.getRng();\r\n\r\n\t\t\t\t\t// Move select contents inside DIV\r\n\t\t\t\t\tn = n.firstChild;\r\n\t\t\t\t\trng = ed.getDoc().createRange();\r\n\t\t\t\t\trng.setStart(n, 0);\r\n\t\t\t\t\trng.setEnd(n, 2);\r\n\t\t\t\t\tsel.setRng(rng);\r\n\r\n\t\t\t\t\t// Wait a while and grab the pasted contents\r\n\t\t\t\t\twindow.setTimeout(function() {\r\n\t\t\t\t\t\tvar h = '', nl;\r\n\r\n\t\t\t\t\t\t// Paste divs duplicated in paste divs seems to happen when you paste plain text so lets first look for that broken behavior in WebKit\r\n\t\t\t\t\t\tif (!dom.select('div.mcePaste > div.mcePaste').length) {\r\n\t\t\t\t\t\t\tnl = dom.select('div.mcePaste');\r\n\r\n\t\t\t\t\t\t\t// WebKit will split the div into multiple ones so this will loop through then all and join them to get the whole HTML string\r\n\t\t\t\t\t\t\teach(nl, function(n) {\r\n\t\t\t\t\t\t\t\tvar child = n.firstChild;\r\n\r\n\t\t\t\t\t\t\t\t// WebKit inserts a DIV container with lots of odd styles\r\n\t\t\t\t\t\t\t\tif (child && child.nodeName == 'DIV' && child.style.marginTop && child.style.backgroundColor) {\r\n\t\t\t\t\t\t\t\t\tdom.remove(child, 1);\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t// Remove apply style spans\r\n\t\t\t\t\t\t\t\teach(dom.select('span.Apple-style-span', n), function(n) {\r\n\t\t\t\t\t\t\t\t\tdom.remove(n, 1);\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t// Remove bogus br elements\r\n\t\t\t\t\t\t\t\teach(dom.select('br[data-mce-bogus]', n), function(n) {\r\n\t\t\t\t\t\t\t\t\tdom.remove(n);\r\n\t\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t\t// WebKit will make a copy of the DIV for each line of plain text pasted and insert them into the DIV\r\n\t\t\t\t\t\t\t\tif (n.parentNode.className != 'mcePaste')\r\n\t\t\t\t\t\t\t\t\th += n.innerHTML;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Found WebKit weirdness so force the content into paragraphs this seems to happen when you paste plain text from Nodepad etc\r\n\t\t\t\t\t\t\t// So this logic will replace double enter with paragraphs and single enter with br so it kind of looks the same\r\n\t\t\t\t\t\t\th = '<p>' + dom.encode(textContent).replace(/\\r?\\n\\r?\\n/g, '</p><p>').replace(/\\r?\\n/g, '<br />') + '</p>';\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Remove the nodes\r\n\t\t\t\t\t\teach(dom.select('div.mcePaste'), function(n) {\r\n\t\t\t\t\t\t\tdom.remove(n);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t// Restore the old selection\r\n\t\t\t\t\t\tif (or)\r\n\t\t\t\t\t\t\tsel.setRng(or);\r\n\r\n\t\t\t\t\t\tprocess({content : h});\r\n\r\n\t\t\t\t\t\t// Unblock events ones we got the contents\r\n\t\t\t\t\t\tdom.unbind(ed.getDoc(), 'mousedown', block);\r\n\t\t\t\t\t\tdom.unbind(ed.getDoc(), 'keydown', block);\r\n\t\t\t\t\t}, 0);\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function(pl, o) {\r\n\t\t\tvar t = this, ed = t.editor, dom = ed.dom, styleProps;\r\n\r\n\t\t\tif (ed.settings.paste_enable_default_filters == false) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (o.wordContent) {\r\n\t\t\t\t// Remove named anchors or TOC links\r\n\t\t\t\teach(dom.select('a', o.node), function(a) {\r\n\t\t\t\t\tif (!a.href || a.href.indexOf('#_Toc') != -1)\r\n\t\t\t\t\t\tdom.remove(a, 1);\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (getParam(ed, \"paste_convert_middot_lists\")) {\r\n\t\t\t\t\tt._convertLists(pl, o);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Process styles\r\n\t\t\t\tstyleProps = getParam(ed, \"paste_retain_style_properties\"); // retained properties\r\n\r\n\t\t\t\t// Process only if a string was specified and not equal to \"all\" or \"*\"\r\n\t\t\t\tif ((tinymce.is(styleProps, \"string\")) && (styleProps !== \"all\") && (styleProps !== \"*\")) {\r\n\t\t\t\t\tstyleProps = tinymce.explode(styleProps.replace(/^none$/i, \"\"));\r\n\r\n\t\t\t\t\t// Retains some style properties\r\n\t\t\t\t\teach(dom.select('*', o.node), function(el) {\r\n\t\t\t\t\t\tvar newStyle = {}, npc = 0, i, sp, sv;\r\n\r\n\t\t\t\t\t\t// Store a subset of the existing styles\r\n\t\t\t\t\t\tif (styleProps) {\r\n\t\t\t\t\t\t\tfor (i = 0; i < styleProps.length; i++) {\r\n\t\t\t\t\t\t\t\tsp = styleProps[i];\r\n\t\t\t\t\t\t\t\tsv = dom.getStyle(el, sp);\r\n\r\n\t\t\t\t\t\t\t\tif (sv) {\r\n\t\t\t\t\t\t\t\t\tnewStyle[sp] = sv;\r\n\t\t\t\t\t\t\t\t\tnpc++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Remove all of the existing styles\r\n\t\t\t\t\t\tdom.setAttrib(el, 'style', '');\r\n\r\n\t\t\t\t\t\tif (styleProps && npc > 0)\r\n\t\t\t\t\t\t\tdom.setStyles(el, newStyle); // Add back the stored subset of styles\r\n\t\t\t\t\t\telse // Remove empty span tags that do not have class attributes\r\n\t\t\t\t\t\t\tif (el.nodeName == 'SPAN' && !el.className)\r\n\t\t\t\t\t\t\t\tdom.remove(el, true);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Remove all style information or only specifically on WebKit to avoid the style bug on that browser\r\n\t\t\tif (getParam(ed, \"paste_remove_styles\") || (getParam(ed, \"paste_remove_styles_if_webkit\") && tinymce.isWebKit)) {\r\n\t\t\t\teach(dom.select('*[style]', o.node), function(el) {\r\n\t\t\t\t\tel.removeAttribute('style');\r\n\t\t\t\t\tel.removeAttribute('data-mce-style');\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tif (tinymce.isWebKit) {\r\n\t\t\t\t\t// We need to compress the styles on WebKit since if you paste <img border=\"0\" /> it will become <img border=\"0\" style=\"... lots of junk ...\" />\r\n\t\t\t\t\t// Removing the mce_style that contains the real value will force the Serializer engine to compress the styles\r\n\t\t\t\t\teach(dom.select('*', o.node), function(el) {\r\n\t\t\t\t\t\tel.removeAttribute('data-mce-style');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function(h, skip_undo) {\r\n\t\t\tvar ed = this.editor, r = ed.selection.getRng();\r\n\r\n\t\t\t// First delete the contents seems to work better on WebKit when the selection spans multiple list items or multiple table cells.\r\n\t\t\tif (!ed.selection.isCollapsed() && r.startContainer != r.endContainer)\r\n\t\t\t\ted.getDoc().execCommand('Delete', false, null);\r\n\r\n\t\t\ted.execCommand('mceInsertContent', false, h, {skip_undo : skip_undo});\r\n\t\t}"
        ],
        [
            "function() {\r\n\t\t\tvar t = this, ed = t.editor;\r\n\r\n\t\t\t// Register command(s) for backwards compatibility\r\n\t\t\ted.addCommand(\"mcePasteWord\", function() {\r\n\t\t\t\ted.windowManager.open({\r\n\t\t\t\t\tfile: t.url + \"/pasteword.htm\",\r\n\t\t\t\t\twidth: parseInt(getParam(ed, \"paste_dialog_width\")),\r\n\t\t\t\t\theight: parseInt(getParam(ed, \"paste_dialog_height\")),\r\n\t\t\t\t\tinline: 1\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tif (getParam(ed, \"paste_text_use_dialog\")) {\r\n\t\t\t\ted.addCommand(\"mcePasteText\", function() {\r\n\t\t\t\t\ted.windowManager.open({\r\n\t\t\t\t\t\tfile : t.url + \"/pastetext.htm\",\r\n\t\t\t\t\t\twidth: parseInt(getParam(ed, \"paste_dialog_width\")),\r\n\t\t\t\t\t\theight: parseInt(getParam(ed, \"paste_dialog_height\")),\r\n\t\t\t\t\t\tinline : 1\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\t// Register button for backwards compatibility\r\n\t\t\ted.addButton(\"pasteword\", {title : \"paste.paste_word_desc\", cmd : \"mcePasteWord\"});\r\n\t\t}"
        ],
        [
            "function manager(map, key) {\n  if (!(key instanceof Object)) {\n    throw new TypeError('Key must be an object')\n  }\n\n  let contents = map.get(key)\n\n  if (!contents) {\n    map.set(key, contents = {})\n  }\n\n  return contents\n}"
        ],
        [
            "function end() {\n        var transformed;\n        if (ignore.some(minimatch.bind(null, file))) {\n            var compiled = coffee.compile(data, {\n                sourceMap: true,\n                generatedFile: file,\n                inline: true,\n                bare: options.bare,\n                literate: isLiterate(file)\n            });\n            transformed = compiled.js;\n        }\n        else {\n            var instrumented = instrumentor.instrumentCoffee(file, data);\n            var js = options.noInit ? instrumented.js : instrumented.init + instrumented.js;\n            transformed = js;\n        }\n        this.queue(transformed);\n        this.queue(null);\n    }"
        ],
        [
            "function(view, initial){\n        var me = this,\n            checkbox = me.injectCheckbox,\n            headerCt = view.headerCt;\n\n        // Preserve behaviour of false, but not clear why that would ever be done.\n        if (checkbox !== false) {\n            if (checkbox == 'first') {\n                checkbox = 0;\n            } else if (checkbox == 'last') {\n                checkbox = headerCt.getColumnCount();\n            }\n            Ext.suspendLayouts();\n            if (view.getStore().buffered) {\n                me.showHeaderCheckbox = false;\n            }\n            headerCt.add(checkbox,  me.getHeaderConfig());\n            Ext.resumeLayouts();\n        }\n\n        if (initial !== true) {\n            view.refresh();\n        }\n    }"
        ],
        [
            "function(isChecked) {\n        var view     = this.views[0],\n            headerCt = view.headerCt,\n            checkHd  = headerCt.child('gridcolumn[isCheckerHd]'),\n            cls = this.checkerOnCls;\n\n        if (checkHd) {\n            if (isChecked) {\n                checkHd.addCls(cls);\n            } else {\n                checkHd.removeCls(cls);\n            }\n        }\n    }"
        ],
        [
            "function(headerCt, header, e) {\n        if (header.isCheckerHd) {\n            e.stopEvent();\n            var me = this,\n                isChecked = header.el.hasCls(Ext.baseCSSPrefix + 'grid-hd-checker-on');\n                \n            // Prevent focus changes on the view, since we're selecting/deselecting all records\n            me.preventFocus = true;\n            if (isChecked) {\n                me.deselectAll();\n            } else {\n                me.selectAll();\n            }\n            delete me.preventFocus;\n        }\n    }"
        ],
        [
            "function() {\n        var me = this,\n            showCheck = me.showHeaderCheckbox !== false;     \n\n        return {\n            isCheckerHd: showCheck,\n            text : '&#160;',\n            width: me.headerWidth,\n            sortable: false,\n            draggable: false,\n            resizable: false,\n            hideable: false,\n            menuDisabled: true,\n            dataIndex: '',\n            cls: showCheck ? Ext.baseCSSPrefix + 'column-header-checkbox ' : '',\n            renderer: Ext.Function.bind(me.renderer, me),\n            editRenderer: me.editRenderer || me.renderEmpty,\n            locked: me.hasLockedHeader()\n        };\n    }"
        ],
        [
            "function(list) {\n        var store = list.getStore();\n\n        return Ext.Array.sort(list.getSelectionModel().getSelection(), function(a, b) {\n            a = store.indexOf(a);\n            b = store.indexOf(b);\n\n            if (a < b) {\n                return -1;\n            } else if (a > b) {\n                return 1;\n            }\n            return 0;\n        });\n    }"
        ],
        [
            "function() {\n        var me = this; \n        me.mixins.field.setValue.call(me, me.setupValue(me.toField.store.getRange()));\n    }"
        ],
        [
            "function () {\n        var me = this, cfg = {\n            app: me,\n            taskbarConfig: me.getTaskbarConfig()\n        };\n\n        Ext.apply(cfg, me.desktopConfig);\n        return cfg;\n    }"
        ],
        [
            "function () {\n        var me = this,\n            cfg = {\n                app: me,\n                menu: []\n            },\n            launcher;\n\n        Ext.apply(cfg, me.startConfig);\n\n        Ext.each(me.modules, function (module) {\n            launcher = module.launcher;\n            if (launcher) {\n                launcher.handler = launcher.handler || Ext.bind(me.createWindow, me, [module]);\n                cfg.menu.push(module.launcher);\n            }\n        });\n\n        return cfg;\n    }"
        ],
        [
            "function () {\n        var me = this, cfg = {\n            app: me,\n            startConfig: me.getStartConfig()\n        };\n\n        Ext.apply(cfg, me.taskbarConfig);\n        return cfg;\n    }"
        ],
        [
            "function(id, lastEditId, readyCb){\n\t\t\t\t\t//console.log('adding view task: ' + id + ' ' + lastEditId + ' ' + new Error().stack)\n\t\t\t\t\taddViewTasks.push({id: id, lastEditId: lastEditId, cb: readyCb})\n\t\t\t\t\tif(!hasViews){\n\t\t\t\t\t\tpoll()\n\t\t\t\t\t}\n\t\t\t\t\thasViews = true\n\t\t\t\t}"
        ],
        [
            "function(array, fn, scope, reverse) {\n            array = ExtArray.from(array);\n\n            var i,\n                ln = array.length;\n\n            if (reverse !== true) {\n                for (i = 0; i < ln; i++) {\n                    if (fn.call(scope || array[i], array[i], i, array) === false) {\n                        return i;\n                    }\n                }\n            }\n            else {\n                for (i = ln - 1; i > -1; i--) {\n                    if (fn.call(scope || array[i], array[i], i, array) === false) {\n                        return i;\n                    }\n                }\n            }\n\n            return true;\n        }"
        ],
        [
            "function(array) {\n            var clone = [],\n                i = 0,\n                ln = array.length,\n                item;\n\n            for (; i < ln; i++) {\n                item = array[i];\n\n                if (ExtArray.indexOf(clone, item) === -1) {\n                    clone.push(item);\n                }\n            }\n\n            return clone;\n        }"
        ],
        [
            "function(array, fn, scope) {\n            var i = 0,\n                len = array.length;\n\n            for (; i < len; i++) {\n                if (fn.call(scope || array, array[i], i)) {\n                    return array[i];\n                }\n            }\n            return null;\n        }"
        ],
        [
            "function(array, item) {\n            var index = ExtArray.indexOf(array, item);\n\n            if (index !== -1) {\n                erase(array, index, 1);\n            }\n\n            return array;\n        }"
        ],
        [
            "function() {\n            var args = slice.call(arguments),\n                array = [],\n                i, ln;\n\n            for (i = 0, ln = args.length; i < ln; i++) {\n                array = array.concat(args[i]);\n            }\n\n            return ExtArray.unique(array);\n        }"
        ],
        [
            "function() {\n            var intersection = [],\n                arrays = slice.call(arguments),\n                arraysLength,\n                array,\n                arrayLength,\n                minArray,\n                minArrayIndex,\n                minArrayCandidate,\n                minArrayLength,\n                element,\n                elementCandidate,\n                elementCount,\n                i, j, k;\n\n            if (!arrays.length) {\n                return intersection;\n            }\n\n            // Find the smallest array\n            arraysLength = arrays.length;\n            for (i = minArrayIndex = 0; i < arraysLength; i++) {\n                minArrayCandidate = arrays[i];\n                if (!minArray || minArrayCandidate.length < minArray.length) {\n                    minArray = minArrayCandidate;\n                    minArrayIndex = i;\n                }\n            }\n\n            minArray = ExtArray.unique(minArray);\n            erase(arrays, minArrayIndex, 1);\n\n            // Use the smallest unique'd array as the anchor loop. If the other array(s) do contain\n            // an item in the small array, we're likely to find it before reaching the end\n            // of the inner loop and can terminate the search early.\n            minArrayLength = minArray.length;\n            arraysLength = arrays.length;\n            for (i = 0; i < minArrayLength; i++) {\n                element = minArray[i];\n                elementCount = 0;\n\n                for (j = 0; j < arraysLength; j++) {\n                    array = arrays[j];\n                    arrayLength = array.length;\n                    for (k = 0; k < arrayLength; k++) {\n                        elementCandidate = array[k];\n                        if (element === elementCandidate) {\n                            elementCount++;\n                            break;\n                        }\n                    }\n                }\n\n                if (elementCount === arraysLength) {\n                    intersection.push(element);\n                }\n            }\n\n            return intersection;\n        }"
        ],
        [
            "function(arrayA, arrayB) {\n            var clone = slice.call(arrayA),\n                ln = clone.length,\n                i, j, lnB;\n\n            for (i = 0,lnB = arrayB.length; i < lnB; i++) {\n                for (j = 0; j < ln; j++) {\n                    if (clone[j] === arrayB[i]) {\n                        erase(clone, j, 1);\n                        j--;\n                        ln--;\n                    }\n                }\n            }\n\n            return clone;\n        }"
        ],
        [
            "function (array, begin, end) {\n                // After tested for IE 6, the one below is of the best performance\n                // see http://jsperf.com/slice-fix\n                if (typeof begin === 'undefined') {\n                    return slice.call(array);\n                }\n                if (typeof end === 'undefined') {\n                    return slice.call(array, begin);\n                }\n                return slice.call(array, begin, end);\n            }"
        ],
        [
            "function(array) {\n            var worker = [];\n\n            function rFlatten(a) {\n                var i, ln, v;\n\n                for (i = 0, ln = a.length; i < ln; i++) {\n                    v = a[i];\n\n                    if (Ext.isArray(v)) {\n                        rFlatten(v);\n                    } else {\n                        worker.push(v);\n                    }\n                }\n\n                return worker;\n            }\n\n            return rFlatten(array);\n        }"
        ],
        [
            "function(array, comparisonFn) {\n            var min = array[0],\n                i, ln, item;\n\n            for (i = 0, ln = array.length; i < ln; i++) {\n                item = array[i];\n\n                if (comparisonFn) {\n                    if (comparisonFn(min, item) === 1) {\n                        min = item;\n                    }\n                }\n                else {\n                    if (item < min) {\n                        min = item;\n                    }\n                }\n            }\n\n            return min;\n        }"
        ],
        [
            "function(array) {\n            var sum = 0,\n                i, ln, item;\n\n            for (i = 0,ln = array.length; i < ln; i++) {\n                item = array[i];\n\n                sum += item;\n            }\n\n            return sum;\n        }"
        ],
        [
            "function(array) {\n            var len = arguments.length,\n                i = 1,\n                newItem;\n\n            if (array === undefined) {\n                array = [];\n            } else if (!Ext.isArray(array)) {\n                array = [array];\n            }\n            for (; i < len; i++) {\n                newItem = arguments[i];\n                Array.prototype.push[Ext.isIterable(newItem) ? 'apply' : 'call'](array, newItem);\n            }\n            return array;\n        }"
        ],
        [
            "function (xpath) {\n        var me = this,\n            parts = xpath.split('/'),\n            regex = me.tagPathRegEx,\n            i, n, m, count, tag, child,\n            el = me.attachTo.document;\n\n        el = (parts[0] == '~') ? el.body\n                    : el.getElementById(parts[0].substring(1)); // remove '#'\n\n        for (i = 1, n = parts.length; el && i < n; ++i) {\n            m = regex.exec(parts[i]);\n            count = m[2] ? parseInt(m[2], 10) : 1;\n            tag = m[1].toUpperCase();\n\n            for (child = el.firstChild; child; child = child.nextSibling) {\n                if (child.tagName == tag) {\n                    if (count == 1) {\n                        break;\n                    }\n                    --count;\n                }\n            }\n\n            el = child;\n        }\n\n        return el;\n    }"
        ],
        [
            "function (eventDescriptor) {\n        var me = this,\n            index = ++me.queueIndex;\n\n        // keyframe events are inserted after a keyFrameEvent is played.\n        if (me.keyFrameEvents[eventDescriptor.type]) {\n            Ext.Array.insert(me.eventQueue, index, [\n                { keyframe: true, ts: eventDescriptor.ts }\n            ]);\n        }\n    }"
        ],
        [
            "function (eventDescriptor) {\n        var me = this;\n\n        // only fire keyframe event (and setup the eventDescriptor) once...\n        if (!eventDescriptor.defer) {\n            me.makeToken(eventDescriptor, 'done');\n            me.fireEvent('keyframe', me, eventDescriptor);\n        }\n\n        return eventDescriptor.done;\n    }"
        ],
        [
            "function getNonEditableParent(node) {\r\n\t\t\tvar state;\r\n\r\n\t\t\twhile (node) {\r\n\t\t\t\tstate = getContentEditable(node);\r\n\t\t\t\tif (state) {\r\n\t\t\t\t\treturn state  === \"false\" ? node : null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode = node.parentNode;\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function removeCaretContainer(caretContainer) {\r\n\t\t\tvar child, currentCaretContainer, lastContainer;\r\n\r\n\t\t\tif (caretContainer) {\r\n\t\t\t\t\trng = selection.getRng(true);\r\n\t\t\t\t\trng.setStartBefore(caretContainer);\r\n\t\t\t\t\trng.setEndBefore(caretContainer);\r\n\r\n\t\t\t\t\tchild = findFirstTextNode(caretContainer);\r\n\t\t\t\t\tif (child && child.nodeValue.charAt(0) == invisibleChar) {\r\n\t\t\t\t\t\tchild = child.deleteData(0, 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdom.remove(caretContainer, true);\r\n\r\n\t\t\t\t\tselection.setRng(rng);\r\n\t\t\t} else {\r\n\t\t\t\tcurrentCaretContainer = getParentCaretContainer(selection.getStart());\r\n\t\t\t\twhile ((caretContainer = dom.get(caretContainerId)) && caretContainer !== lastContainer) {\r\n\t\t\t\t\tif (currentCaretContainer !== caretContainer) {\r\n\t\t\t\t\t\tchild = findFirstTextNode(caretContainer);\r\n\t\t\t\t\t\tif (child && child.nodeValue.charAt(0) == invisibleChar) {\r\n\t\t\t\t\t\t\tchild = child.deleteData(0, 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdom.remove(caretContainer, true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlastContainer = caretContainer;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function moveSelection() {\r\n\t\t\tvar nonEditableStart, nonEditableEnd, isCollapsed, rng, element;\r\n\r\n\t\t\t// Checks if there is any contents to the left/right side of caret returns the noneditable element or any editable element if it finds one inside\r\n\t\t\tfunction hasSideContent(element, left) {\r\n\t\t\t\tvar container, offset, walker, node, len;\r\n\r\n\t\t\t\tcontainer = rng.startContainer;\r\n\t\t\t\toffset = rng.startOffset;\r\n\r\n\t\t\t\t// If endpoint is in middle of text node then expand to beginning/end of element\r\n\t\t\t\tif (container.nodeType == 3) {\r\n\t\t\t\t\tlen = container.nodeValue.length;\r\n\t\t\t\t\tif ((offset > 0 && offset < len) || (left ? offset == len : offset == 0)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Can we resolve the node by index\r\n\t\t\t\t\tif (offset < container.childNodes.length) {\r\n\t\t\t\t\t\t// Browser represents caret position as the offset at the start of an element. When moving right\r\n\t\t\t\t\t\t// this is the element we are moving into so we consider our container to be child node at offset-1\r\n\t\t\t\t\t\tvar pos = !left && offset > 0 ? offset-1 : offset;\r\n\t\t\t\t\t\tcontainer = container.childNodes[pos];\r\n\t\t\t\t\t\tif (container.hasChildNodes()) {\r\n\t\t\t\t\t\t\tcontainer = container.firstChild;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// If not then the caret is at the last position in it's container and the caret container should be inserted after the noneditable element\r\n\t\t\t\t\t\treturn !left ? element : null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Walk left/right to look for contents\r\n\t\t\t\twalker = new TreeWalker(container, element);\r\n\t\t\t\twhile (node = walker[left ? 'prev' : 'next']()) {\r\n\t\t\t\t\tif (node.nodeType === 3 && node.nodeValue.length > 0) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t} else if (getContentEditable(node) === \"true\") {\r\n\t\t\t\t\t\t// Found contentEditable=true element return this one to we can move the caret inside it\r\n\t\t\t\t\t\treturn node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn element;\r\n\t\t\t};\r\n\r\n\t\t\t// Remove any existing caret containers\r\n\t\t\tremoveCaretContainer();\r\n\r\n\t\t\t// Get noneditable start/end elements\r\n\t\t\tisCollapsed = selection.isCollapsed();\r\n\t\t\tnonEditableStart = getNonEditableParent(selection.getStart());\r\n\t\t\tnonEditableEnd = getNonEditableParent(selection.getEnd());\r\n\r\n\t\t\t// Is any fo the range endpoints noneditable\r\n\t\t\tif (nonEditableStart || nonEditableEnd) {\r\n\t\t\t\trng = selection.getRng(true);\r\n\r\n\t\t\t\t// If it's a caret selection then look left/right to see if we need to move the caret out side or expand\r\n\t\t\t\tif (isCollapsed) {\r\n\t\t\t\t\tnonEditableStart = nonEditableStart || nonEditableEnd;\r\n\t\t\t\t\tvar start = selection.getStart();\r\n\t\t\t\t\tif (element = hasSideContent(nonEditableStart, true)) {\r\n\t\t\t\t\t\t// We have no contents to the left of the caret then insert a caret container before the noneditable element\r\n\t\t\t\t\t\tinsertCaretContainerOrExpandToBlock(element, true);\r\n\t\t\t\t\t} else if (element = hasSideContent(nonEditableStart, false)) {\r\n\t\t\t\t\t\t// We have no contents to the right of the caret then insert a caret container after the noneditable element\r\n\t\t\t\t\t\tinsertCaretContainerOrExpandToBlock(element, false);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// We are in the middle of a noneditable so expand to select it\r\n\t\t\t\t\t\tselection.select(nonEditableStart);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\trng = selection.getRng(true);\r\n\r\n\t\t\t\t\t// Expand selection to include start non editable element\r\n\t\t\t\t\tif (nonEditableStart) {\r\n\t\t\t\t\t\trng.setStartBefore(nonEditableStart);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Expand selection to include end non editable element\r\n\t\t\t\t\tif (nonEditableEnd) {\r\n\t\t\t\t\t\trng.setEndAfter(nonEditableEnd);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tselection.setRng(rng);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function convertRegExpsToNonEditable(ed, args) {\r\n\t\t\t\tvar i = nonEditableRegExps.length, content = args.content, cls = tinymce.trim(nonEditClass);\r\n\r\n\t\t\t\t// Don't replace the variables when raw is used for example on undo/redo\r\n\t\t\t\tif (args.format == \"raw\") {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\twhile (i--) {\r\n\t\t\t\t\tcontent = content.replace(nonEditableRegExps[i], function(match) {\r\n\t\t\t\t\t\tvar args = arguments, index = args[args.length - 2];\r\n\r\n\t\t\t\t\t\t// Is value inside an attribute then don't replace\r\n\t\t\t\t\t\tif (index > 0 && content.charAt(index - 1) == '\"') {\r\n\t\t\t\t\t\t\treturn match;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn '<span class=\"' + cls + '\" data-mce-content=\"' + ed.dom.encode(args[0]) + '\">' + ed.dom.encode(typeof(args[1]) === \"string\" ? args[1] : args[0]) + '</span>';\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\targs.content = content;\r\n\t\t\t}"
        ],
        [
            "function setupLogger(name, cfg) {\n  assume(name).is.a('string');\n  if (cfg) {\n    assume(cfg).is.an('object');\n    assume(cfg).not.includes('name');\n  } else {\n    cfg = {};\n  }\n  cfg.name = name;\n\n  // Sometimes, just make it easy to have everything show the file and line\n  // number.  This is supposed to be quite slow, so the name is what it is to\n  // make it impossible to claim you didn't know it made things slow\n  if (process.env.FORCE_LOG_LINE_NUMBERS_AND_BE_SLOW === '1') {\n    cfg.src = true;\n  }\n\n  // We want to be able to override whatever the library or application has\n  // specified by changing only an evironment variable.\n  let envLevel = parseEnvironment(process.env.LOG_LEVEL, cfg);\n  let oldLevel = cfg.level;\n  cfg.level = envLevel;\n\n  cfg.serializers = {\n    err: bunyan.stdSerializers.err,\n  };\n\n  let logger = bunyan.createLogger(cfg);\n\n  // But let's make it clear that we did this by logging\n  if (oldLevel) {\n    if (oldLevel !== envLevel) {\n      logger.warn({\n        requested: oldLevel,\n        used: envLevel,\n      }, 'using log level from environment instead of code');\n    }\n  }\n\n  assume(logger).does.not.include('debugCompat');\n  logger.debugCompat = makeCompat(logger);\n  return logger;\n}"
        ],
        [
            "function makeCompat(logger) {\n  return function(name) {\n    return function(...x) {\n      assume(x).is.an('array');\n      assume(x.length).greaterThan(0);\n      let msg = util.format.apply(null, x);\n      let level = 'warn';\n      let msgObj = {\n        dbgname: name,\n        dbgcmpt: true,\n      };\n      if (msg.match(/\\[alert-operator\\]/)) {\n        level = 'fatal';\n        msgObj.alert = true;\n      }\n      logger[level].call(logger, msgObj, msg);\n    };\n  };\n}"
        ],
        [
            "function(height) {\n        var me = this,\n            isNum = (typeof height == \"number\");\n\n        if (isNum && me.autoBoxAdjust && !me.isBorderBox()) {\n            height -= (me.getBorderWidth(\"tb\") + me.getPadding(\"tb\"));\n        }\n        return (isNum && height < 0) ? 0 : height;\n    }"
        ],
        [
            "function(opacity, animate) {\n        var me = this;\n\n        if (!me.dom) {\n            return me;\n        }\n\n        if (!animate || !me.anim) {\n            me.setStyle('opacity', opacity);\n        }\n        else {\n            if (typeof animate != 'object') {\n                animate = {\n                    duration: 350,\n                    easing: 'ease-in'\n                };\n            }\n\n            me.animate(Ext.applyIf({\n                to: {\n                    opacity: opacity\n                }\n            }, animate));\n        }\n        return me;\n    }"
        ],
        [
            "function(className, testFn, scope) {\n        var me = this,\n            dom = me.dom,\n            hasTest = Ext.isFunction(testFn);\n            \n        me.hover(\n            function() {\n                if (hasTest && testFn.call(scope || me, me) === false) {\n                    return;\n                }\n                Ext.fly(dom, INTERNAL).addCls(className);\n            },\n            function() {\n                Ext.fly(dom, INTERNAL).removeCls(className);\n            }\n        );\n        return me;\n    }"
        ],
        [
            "function init(type) {  // {{{2\n  O.ui.updateHistory();\n\n  O.inherited(this)('html5-dialog' + (type ? '-' + type : ''));\n\n  this.appendTo(document.body);\n\n  O.ui.newHistory();\n  this.lastHistory = O.ui.lastHistory;\n\n  this.hook();\n\n  this.type = type;\n\n  if (! O.ui.dialogs) {\n    O.ui.dialogs = [];\n  }\n  O.ui.dialogs.push(this);\n\n  this.on('removed', removed.bind(this));\n  this.on('closed', closed.bind(this));\n}"
        ],
        [
            "function(e, target) {\n        var me = this,\n            item, record;\n\n        if (Ext.fly(target).hasCls(me.labelSelector) && !me.editing && !e.ctrlKey && !e.shiftKey) {\n            e.stopEvent();\n            item = me.view.findItemByChild(target);\n            record = me.view.store.getAt(me.view.indexOf(item));\n            me.startEdit(target, record.data[me.dataIndex]);\n            me.activeRecord = record;\n        } else if (me.editing) {\n            me.field.blur();\n            e.preventDefault();\n        }\n    }"
        ],
        [
            "function(dir) {\n\n        var cmd = path.normalize(config.bin);\n\n        if (config.jdependChart !== undefined) {\n            cmd += ' --jdepend-chart=' + config.jdependChart;\n        }\n\n        if (config.jdependXml !== undefined) {\n            cmd += ' --jdepend-xml=' + config.jdependXml;\n        }\n\n        if (config.overviewPyramid !== undefined) {\n            cmd += ' --overview-pyramid=' + config.overviewPyramid;\n        }\n\n        if (config.summaryXml !== undefined) {\n            cmd += ' --summary-xml=' + config.summaryXml;\n        }\n\n        if (config.coderankMode !== undefined) {\n            cmd += ' --coderank-mode=' + config.coderankMode;\n        }\n\n        if (config.coverageReport !== undefined) {\n            cmd += ' --coverage-report=' + config.coverageReport;\n        }\n\n        if (config.configuration !== undefined) {\n            cmd += ' --configuration=' + config.configuration;\n        }\n\n        if (config.ignoreDirectories !== undefined) {\n            cmd += ' --ignore=' + config.ignoreDirectories;\n        }\n\n        if (config.debug) {\n            cmd += ' --debug ';\n        }\n\n        return cmd;\n    }"
        ],
        [
            "function canonicalMd5(md5) {\n  if (md5) {\n    if (Buffer.isBuffer(md5))\n      md5 = md5.toString('base64')\n    else if (md5 && md5.match(/^md5-/))\n      md5 = md5.replace(/^md5-/, '')\n\n    if (md5.length === 32)\n      md5 = new Buffer(md5, 'hex').toString('base64')\n  }\n  return md5\n}"
        ],
        [
            "function() {\n        var me = this;\n        if (me.fireEvent('beforedestroy', me) !== false) {\n            me.remove();\n            me.surface.onDestroy(me);\n            me.clearListeners();\n            me.fireEvent('destroy');\n        }\n    }"
        ],
        [
            "function (options) {\n\tthis.astStack = new ASTStack();\n\tthis.tags = options.customTags;\n\tthis.raw = '';\n\tthis.disableParseTag = false;\n\tthis.line = 1;\n\tthis.lineStart = 0;\n\tthis.position = 0;\n\tthis.parseTagStack = [];\n\tthis.forItems = [];\n\tthis.tablerowItems = [];\n\tthis.forItems.test = this.tablerowItems.test = function (name) {\n\t\tvar name = name.split('.')[0];\n\t\treturn this.indexOf(name) === -1 ? false : true;\n\t};\n}"
        ],
        [
            "function join_plugins(plugins) {\n\tdebug.assert(plugins).is('array');\n\tdebug.assert( ARRAY(plugins).every(is.func) ).equals(true);\n\n\treturn function join_plugins_(req, res, next) {\n\t\tvar queue = [].concat(plugins);\n\n\t\tfunction do_iteration_() {\n\t\t\tif(queue.length === 0) {\n\t\t\t\tnext();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar plugin = queue.shift();\n\t\t\tdebug.assert(plugin).is('function');\n\t\t\tplugin(req, res, function plugin_wrapper(err) {\n\t\t\t\tif(err) {\n\t\t\t\t\tnext(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdo_iteration_();\n\t\t\t});\n\t\t}\n\n\t\tfunction do_iteration() {\n\t\t\ttry {\n\t\t\t\tdo_iteration_();\n\t\t\t} catch(err) {\n\t\t\t\tnext(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tdo_iteration();\n\t};\n}"
        ],
        [
            "function setup_member(context, k) {\n\tvar handler;\n\tvar routes = context.routes;\n\tvar opts = context.opts;\n\tvar middleware = context.middleware;\n\tvar app = context.app;\n\tvar target = context.target;\n\tvar loop_counter = context.loop_counter;\n\tvar v = routes[k];\n\tvar v_is_function = is.func(v) ? true : false;\n\n\t// Special methods\n\tif(_special_methods.indexOf(k) >= 0) {\n\t\thandler = v_is_function ? v : FUNCTION(do_send).curry(opts, v);\n\t\tif(middleware.length === 0) {\n\t\t\tapp[_express_methods[k]](target, build_request(opts, handler) );\n\t\t} else if(k === 'USE') {\n\t\t\t//debug.log('target = ', target);\n\t\t\t//debug.log('k = ', k);\n\t\t\t//debug.log('_express_methods[', k,'] = ', _express_methods[k]);\n\n\t\t\tapp[_express_methods[k]](target, join_plugins( [fix_for_missing_req_route(target, 'use')].concat(middleware).concat([build_request(opts, handler)]) ) );\n\t\t} else {\n\t\t\tapp[_express_methods[k]](target, fix_for_missing_req_route(target, (''+k).toLowerCase() ), middleware, build_request(opts, handler));\n\t\t}\n\t\treturn;\n\t}\n\n\t// Functions\n\tif(process.env.DEBUG_NOR_EXPRESS) {\n\t\tdebug.log( /*(req.id ? '['+req.id+'] ' : '') + */ 'target = ', target);\n\t\tdebug.log( /*(req.id ? '['+req.id+'] ' : '') + */ 'k = ', k);\n\t}\n\n\tvar new_target = (target==='/') ? ('/' + k) : (target + '/' + k);\n\tvar new_route = ROUTES.parse(v);\n\tROUTES.setup(app, new_route, new_target, merge(opts, {'loop_counter': loop_counter+1}));\n}"
        ],
        [
            "function accept_multi(filename, state) {\n\tstate = state || {};\n\tdebug.assert(filename).is('string');\n\tdebug.assert(state).is('object');\n\tif(state.directory) { return accept_dir(filename, state); }\n\tif(state.file) { return accept_file(filename, state); }\n\treturn;\n}"
        ],
        [
            "function makeDefine(mapping, id) {\n  var require = function(id) { return mapping[id]; };\n  var exports = mapping[id] = {};\n  var module = null; // Unused arg. Included for completeness.\n  return function(factory) {\n    factory(require, exports, module);\n  };\n}"
        ],
        [
            "function(root, action) {\n        var parts, ns, i, l;\n        \n        root  = root || Ext.global;\n        parts = action.toString().split('.');\n\n        for (i = 0, l = parts.length; i < l; i++) {\n            ns   = parts[i];\n            root = root[ns];\n\n            if (typeof root === 'undefined') {\n                return root;\n            }\n        }\n\n        return root;\n    }"
        ],
        [
            "function() {\n        var me = this,\n            actions = me.actions,\n            namespace = me.namespace,\n            action, cls, methods, i, len, method;\n            \n        for (action in actions) {\n            if (actions.hasOwnProperty(action)) {\n                if (me.disableNestedActions) {\n                    cls = namespace[action];\n                    \n                    if (!cls) {\n                        cls = namespace[action] = {};\n                    }\n                }\n                else {\n                    cls = me.getNamespace(namespace, action);\n\n                    if (!cls) {\n                        cls = me.createNamespaces(namespace, action);\n                    }\n                }\n\n                methods = actions[action];\n\n                for (i = 0, len = methods.length; i < len; ++i) {\n                    method = new Ext.direct.RemotingMethod(methods[i]);\n                    cls[method.name] = me.createHandler(action, method);\n                }\n            }\n        }\n    }"
        ],
        [
            "function(action, method) {\n        var me = this,\n            slice = Array.prototype.slice,\n            handler;\n        \n        if (!method.formHandler) {\n            handler = function() {\n                me.configureRequest(action, method, slice.call(arguments, 0));\n            };\n        }\n        else {\n            handler = function(form, callback, scope) {\n                me.configureFormRequest(action, method, form, callback, scope);\n            };\n        }\n\n        handler.directCfg = {\n            action: action,\n            method: method\n        };\n\n        return handler;\n    }"
        ],
        [
            "function(transaction, event) {\n        var success = !!event.status,\n            funcName = success ? 'success' : 'failure',\n            callback, options, result;\n        \n        if (transaction && transaction.callback) {\n            callback = transaction.callback;\n            options  = transaction.callbackOptions;\n            result   = typeof event.result !== 'undefined' ? event.result : event.data;\n\n            if (Ext.isFunction(callback)) {\n                callback(result, event, success, options);\n            }\n            else {\n                Ext.callback(callback[funcName], callback.scope, [result, event, success, options]);\n                Ext.callback(callback.callback,  callback.scope, [result, event, success, options]);\n            }\n        }\n    }"
        ],
        [
            "function(options, success, response) {\n        var me = this,\n            i, len, events, event, transaction, transactions;\n            \n        if (success) {\n            events = me.createEvents(response);\n\n            for (i = 0, len = events.length; i < len; ++i) {\n                event = events[i];\n                transaction = me.getTransaction(event);\n                me.fireEvent('data', me, event);\n\n                if (transaction && me.fireEvent('beforecallback', me, event, transaction) !== false) {\n                    me.runCallback(transaction, event, true);\n                    Ext.direct.Manager.removeTransaction(transaction);\n                }\n            }\n        }\n        else {\n            transactions = [].concat(options.transaction);\n            \n            for (i = 0, len = transactions.length; i < len; ++i) {\n                transaction = me.getTransaction(transactions[i]);\n\n                if (transaction && transaction.retryCount < me.maxRetries) {\n                    transaction.retry();\n                }\n                else {\n                    event = new Ext.direct.ExceptionEvent({\n                        data: null,\n                        transaction: transaction,\n                        code: Ext.direct.Manager.exceptions.TRANSPORT,\n                        message: 'Unable to connect to the server.',\n                        xhr: response\n                    });\n\n                    me.fireEvent('data', me, event);\n\n                    if (transaction && me.fireEvent('beforecallback', me, transaction) !== false) {\n                        me.runCallback(transaction, event, false);\n                        Ext.direct.Manager.removeTransaction(transaction);\n                    }\n                }\n            }\n        }\n    }"
        ],
        [
            "function(options) {\n        return options && options.tid ? Ext.direct.Manager.getTransaction(options.tid) : null;\n    }"
        ],
        [
            "function(action, method, args) {\n        var me = this,\n            callData, data, callback, scope, opts, transaction, params;\n\n        callData = method.getCallData(args);\n        data     = callData.data;\n        callback = callData.callback;\n        scope    = callData.scope;\n        opts     = callData.options || {};\n\n        params = Ext.apply({}, {\n            provider: me,\n            args: args,\n            action: action,\n            method: method.name,\n            data: data,\n            callbackOptions: opts,\n            callback: scope && Ext.isFunction(callback) ? Ext.Function.bind(callback, scope) : callback\n        });\n\n        if (opts.timeout) {\n            Ext.applyIf(params, {\n                timeout: opts.timeout\n            });\n        };\n\n        transaction = new Ext.direct.Transaction(params);\n\n        if (me.fireEvent('beforecall', me, transaction, method) !== false) {\n            Ext.direct.Manager.addTransaction(transaction);\n            me.queueTransaction(transaction);\n            me.fireEvent('call', me, transaction, method);\n        }\n    }"
        ],
        [
            "function(transaction) {\n        return {\n            action: transaction.action,\n            method: transaction.method,\n            data: transaction.data,\n            type: 'rpc',\n            tid: transaction.id\n        };\n    }"
        ],
        [
            "function(transaction) {\n        var me = this,\n            enableBuffer = me.enableBuffer;\n        \n        if (transaction.form) {\n            me.sendFormRequest(transaction);\n            return;\n        }\n\n        if (typeof transaction.timeout !== 'undefined') {\n            me.sendRequest(transaction);\n            return;\n        }\n        \n        if (enableBuffer) {\n            me.callBuffer.push(transaction);\n\n            if (!me.callTask) {\n                me.callTask = new Ext.util.DelayedTask(me.combineAndSend, me);\n            }\n\n            me.callTask.delay(Ext.isNumber(enableBuffer) ? enableBuffer : 10);\n        }\n        else {\n            me.combineAndSend();\n        }\n    }"
        ],
        [
            "function() {\n        var me = this,\n            buffer = me.callBuffer,\n            len = buffer.length;\n            \n        if (len > 0) {\n            me.sendRequest(len == 1 ? buffer[0] : buffer);\n            me.callBuffer = [];\n        }\n    }"
        ],
        [
            "function createLookupTable(option, default_value, extend) {\r\n\t\t\tvar value = settings[option];\r\n\r\n\t\t\tif (!value) {\r\n\t\t\t\t// Get cached default map or make it if needed\r\n\t\t\t\tvalue = mapCache[option];\r\n\r\n\t\t\t\tif (!value) {\r\n\t\t\t\t\tvalue = makeMap(default_value, ' ', makeMap(default_value.toUpperCase(), ' '));\r\n\t\t\t\t\tvalue = tinymce.extend(value, extend);\r\n\r\n\t\t\t\t\tmapCache[option] = value;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Create custom map\r\n\t\t\t\tvalue = makeMap(value, ',', makeMap(value.toUpperCase(), ' '));\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}"
        ],
        [
            "function addCustomElements(custom_elements) {\r\n\t\t\tvar customElementRegExp = /^(~)?(.+)$/;\r\n\r\n\t\t\tif (custom_elements) {\r\n\t\t\t\teach(split(custom_elements), function(rule) {\r\n\t\t\t\t\tvar matches = customElementRegExp.exec(rule),\r\n\t\t\t\t\t\tinline = matches[1] === '~',\r\n\t\t\t\t\t\tcloneName = inline ? 'span' : 'div',\r\n\t\t\t\t\t\tname = matches[2];\r\n\r\n\t\t\t\t\tchildren[name] = children[cloneName];\r\n\t\t\t\t\tcustomElementsMap[name] = cloneName;\r\n\r\n\t\t\t\t\t// If it's not marked as inline then add it to valid block elements\r\n\t\t\t\t\tif (!inline) {\r\n\t\t\t\t\t\tblockElementsMap[name.toUpperCase()] = {};\r\n\t\t\t\t\t\tblockElementsMap[name] = {};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Add elements clone if needed\r\n\t\t\t\t\tif (!elements[name]) {\r\n\t\t\t\t\t\telements[name] = elements[cloneName];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Add custom elements at span/div positions\r\n\t\t\t\t\teach(children, function(element, child) {\r\n\t\t\t\t\t\tif (element[cloneName])\r\n\t\t\t\t\t\t\telement[name] = element[cloneName];\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function(node) {\r\n\t\t\tvar contentEditable;\r\n\r\n\t\t\t// Check type\r\n\t\t\tif (node.nodeType != 1) {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for fake content editable\r\n\t\t\tcontentEditable = node.getAttribute(\"data-mce-contenteditable\");\r\n\t\t\tif (contentEditable && contentEditable !== \"inherit\") {\r\n\t\t\t\treturn contentEditable;\r\n\t\t\t}\r\n\r\n\t\t\t// Check for real content editable\r\n\t\t\treturn node.contentEditable !== \"inherit\" ? node.contentEditable : null;\r\n\t\t}"
        ],
        [
            "function done() {\r\n\t\t\t\tdom.remove(id);\r\n\r\n\t\t\t\tif (elm)\r\n\t\t\t\t\telm.onreadystatechange = elm.onload = elm = null;\r\n\r\n\t\t\t\tcallback();\r\n\t\t\t}"
        ],
        [
            "function eventHandler(evt, args) {\r\n\t\t\tvar type = evt.type;\r\n\r\n\t\t\t// Don't fire events when it's removed\r\n\t\t\tif (self.removed)\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// Sends the native event out to a global dispatcher then to the specific event dispatcher\r\n\t\t\tif (self.onEvent.dispatch(self, evt, args) !== false) {\r\n\t\t\t\tself[nativeToDispatcherMap[evt.fakeType || evt.type]].dispatch(self, evt, args);\r\n\t\t\t}\r\n\t\t}"
        ],
        [
            "function(command) {\r\n\t\t\t\tif (selection.isCollapsed())\r\n\t\t\t\t\tselection.select(selection.getNode());\r\n\r\n\t\t\t\texecNativeCommand(command);\r\n\t\t\t\tselection.collapse(FALSE);\r\n\t\t\t}"
        ],
        [
            "function(command) {\r\n\t\t\t\tvar listElm, listParent;\r\n\r\n\t\t\t\texecNativeCommand(command);\r\n\r\n\t\t\t\t// WebKit produces lists within block elements so we need to split them\r\n\t\t\t\t// we will replace the native list creation logic to custom logic later on\r\n\t\t\t\t// TODO: Remove this when the list creation logic is removed\r\n\t\t\t\tlistElm = dom.getParent(selection.getNode(), 'ol,ul');\r\n\t\t\t\tif (listElm) {\r\n\t\t\t\t\tlistParent = listElm.parentNode;\r\n\r\n\t\t\t\t\t// If list is within a text block then split that block\r\n\t\t\t\t\tif (/^(H[1-6]|P|ADDRESS|PRE)$/.test(listParent.nodeName)) {\r\n\t\t\t\t\t\tstoreSelection();\r\n\t\t\t\t\t\tdom.split(listParent, listElm);\r\n\t\t\t\t\t\trestoreSelection();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function(command) {\r\n\t\t\t\tvar name = 'align' + command.substring(7);\r\n\t\t\t\tvar nodes = selection.isCollapsed() ? [dom.getParent(selection.getNode(), dom.isBlock)] : selection.getSelectedBlocks();\r\n\t\t\t\tvar matches = tinymce.map(nodes, function(node) {\r\n\t\t\t\t\treturn !!formatter.matchNode(node, name);\r\n\t\t\t\t});\r\n\t\t\t\treturn tinymce.inArray(matches, TRUE) !== -1;\r\n\t\t\t}"
        ],
        [
            "function removeCaretContainer(node, move_caret) {\r\n\t\t\t\tvar child, rng;\r\n\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = getParentCaretContainer(selection.getStart());\r\n\r\n\t\t\t\t\tif (!node) {\r\n\t\t\t\t\t\twhile (node = dom.get(caretContainerId)) {\r\n\t\t\t\t\t\t\tremoveCaretContainer(node, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\trng = selection.getRng(true);\r\n\r\n\t\t\t\t\tif (isCaretContainerEmpty(node)) {\r\n\t\t\t\t\t\tif (move_caret !== false) {\r\n\t\t\t\t\t\t\trng.setStartBefore(node);\r\n\t\t\t\t\t\t\trng.setEndBefore(node);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdom.remove(node);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tchild = findFirstTextNode(node);\r\n\r\n\t\t\t\t\t\tif (child.nodeValue.charAt(0) === INVISIBLE_CHAR) {\r\n\t\t\t\t\t\t\tchild = child.deleteData(0, 1);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tdom.remove(node, 1);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tselection.setRng(rng);\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function unmarkBogusCaretParents() {\r\n\t\t\t\tvar i, caretContainer, node;\r\n\r\n\t\t\t\tcaretContainer = getParentCaretContainer(selection.getStart());\r\n\t\t\t\tif (caretContainer && !dom.isEmpty(caretContainer)) {\r\n\t\t\t\t\ttinymce.walk(caretContainer, function(node) {\r\n\t\t\t\t\t\tif (node.nodeType == 1 && node.id !== caretContainerId && !dom.isEmpty(node)) {\r\n\t\t\t\t\t\t\tdom.setAttrib(node, 'data-mce-bogus', null);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 'childNodes');\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function renderBlockOnIE(block) {\r\n\t\t\t\tvar oldRng;\r\n\r\n\t\t\t\tif (tinymce.isIE && dom.isBlock(block)) {\r\n\t\t\t\t\toldRng = selection.getRng();\r\n\t\t\t\t\tblock.appendChild(dom.create('span', null, '\\u00a0'));\r\n\t\t\t\t\tselection.select(block);\r\n\t\t\t\t\tblock.lastChild.outerHTML = '';\r\n\t\t\t\t\tselection.setRng(oldRng);\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function moveToCaretPosition(root) {\r\n\t\t\t\tvar walker, node, rng, y, viewPort, lastNode = root, tempElm;\r\n\r\n\t\t\t\trng = dom.createRng();\r\n\r\n\t\t\t\tif (root.hasChildNodes()) {\r\n\t\t\t\t\twalker = new TreeWalker(root, root);\r\n\r\n\t\t\t\t\twhile (node = walker.current()) {\r\n\t\t\t\t\t\tif (node.nodeType == 3) {\r\n\t\t\t\t\t\t\trng.setStart(node, 0);\r\n\t\t\t\t\t\t\trng.setEnd(node, 0);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (nonEmptyElementsMap[node.nodeName.toLowerCase()]) {\r\n\t\t\t\t\t\t\trng.setStartBefore(node);\r\n\t\t\t\t\t\t\trng.setEndBefore(node);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlastNode = node;\r\n\t\t\t\t\t\tnode = walker.next();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!node) {\r\n\t\t\t\t\t\trng.setStart(lastNode, 0);\r\n\t\t\t\t\t\trng.setEnd(lastNode, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (root.nodeName == 'BR') {\r\n\t\t\t\t\t\tif (root.nextSibling && dom.isBlock(root.nextSibling)) {\r\n\t\t\t\t\t\t\t// Trick on older IE versions to render the caret before the BR between two lists\r\n\t\t\t\t\t\t\tif (!documentMode || documentMode < 9) {\r\n\t\t\t\t\t\t\t\ttempElm = dom.create('br');\r\n\t\t\t\t\t\t\t\troot.parentNode.insertBefore(tempElm, root);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\trng.setStartBefore(root);\r\n\t\t\t\t\t\t\trng.setEndBefore(root);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trng.setStartAfter(root);\r\n\t\t\t\t\t\t\trng.setEndAfter(root);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trng.setStart(root, 0);\r\n\t\t\t\t\t\trng.setEnd(root, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.setRng(rng);\r\n\r\n\t\t\t\t// Remove tempElm created for old IE:s\r\n\t\t\t\tdom.remove(tempElm);\r\n\r\n\t\t\t\tviewPort = dom.getViewPort(editor.getWin());\r\n\r\n\t\t\t\t// scrollIntoView seems to scroll the parent window in most browsers now including FF 3.0b4 so it's time to stop using it and do it our selfs\r\n\t\t\t\ty = dom.getPos(root).y;\r\n\t\t\t\tif (y < viewPort.y || y + 25 > viewPort.y + viewPort.h) {\r\n\t\t\t\t\teditor.getWin().scrollTo(0, y < viewPort.y ? y : y - viewPort.h + 25); // Needs to be hardcoded to roughly one line of text if a huge text block is broken into two blocks\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function createNewBlock(name) {\r\n\t\t\t\tvar node = container, block, clonedNode, caretNode;\r\n\r\n\t\t\t\tblock = name || parentBlockName == \"TABLE\" ? dom.create(name || newBlockName) : parentBlock.cloneNode(false);\r\n\t\t\t\tcaretNode = block;\r\n\r\n\t\t\t\t// Clone any parent styles\r\n\t\t\t\tif (settings.keep_styles !== false) {\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tif (/^(SPAN|STRONG|B|EM|I|FONT|STRIKE|U)$/.test(node.nodeName)) {\r\n\t\t\t\t\t\t\t// Never clone a caret containers\r\n\t\t\t\t\t\t\tif (node.id == '_mce_caret') {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tclonedNode = node.cloneNode(false);\r\n\t\t\t\t\t\t\tdom.setAttrib(clonedNode, 'id', ''); // Remove ID since it needs to be document unique\r\n\r\n\t\t\t\t\t\t\tif (block.hasChildNodes()) {\r\n\t\t\t\t\t\t\t\tclonedNode.appendChild(block.firstChild);\r\n\t\t\t\t\t\t\t\tblock.appendChild(clonedNode);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcaretNode = clonedNode;\r\n\t\t\t\t\t\t\t\tblock.appendChild(clonedNode);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} while (node = node.parentNode);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// BR is needed in empty blocks on non IE browsers\r\n\t\t\t\tif (!tinymce.isIE) {\r\n\t\t\t\t\tcaretNode.innerHTML = '<br data-mce-bogus=\"1\">';\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn block;\r\n\t\t\t}"
        ],
        [
            "function wrapSelfAndSiblingsInDefaultBlock(container, offset) {\r\n\t\t\t\tvar newBlock, parentBlock, startNode, node, next, blockName = newBlockName || 'P';\r\n\r\n\t\t\t\t// Not in a block element or in a table cell or caption\r\n\t\t\t\tparentBlock = dom.getParent(container, dom.isBlock);\r\n\t\t\t\tif (!parentBlock || !canSplitBlock(parentBlock)) {\r\n\t\t\t\t\tparentBlock = parentBlock || editableRoot;\r\n\r\n\t\t\t\t\tif (!parentBlock.hasChildNodes()) {\r\n\t\t\t\t\t\tnewBlock = dom.create(blockName);\r\n\t\t\t\t\t\tparentBlock.appendChild(newBlock);\r\n\t\t\t\t\t\trng.setStart(newBlock, 0);\r\n\t\t\t\t\t\trng.setEnd(newBlock, 0);\r\n\t\t\t\t\t\treturn newBlock;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Find parent that is the first child of parentBlock\r\n\t\t\t\t\tnode = container;\r\n\t\t\t\t\twhile (node.parentNode != parentBlock) {\r\n\t\t\t\t\t\tnode = node.parentNode;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Loop left to find start node start wrapping at\r\n\t\t\t\t\twhile (node && !dom.isBlock(node)) {\r\n\t\t\t\t\t\tstartNode = node;\r\n\t\t\t\t\t\tnode = node.previousSibling;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (startNode) {\r\n\t\t\t\t\t\tnewBlock = dom.create(blockName);\r\n\t\t\t\t\t\tstartNode.parentNode.insertBefore(newBlock, startNode);\r\n\r\n\t\t\t\t\t\t// Start wrapping until we hit a block\r\n\t\t\t\t\t\tnode = startNode;\r\n\t\t\t\t\t\twhile (node && !dom.isBlock(node)) {\r\n\t\t\t\t\t\t\tnext = node.nextSibling;\r\n\t\t\t\t\t\t\tnewBlock.appendChild(node);\r\n\t\t\t\t\t\t\tnode = next;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Restore range to it's past location\r\n\t\t\t\t\t\trng.setStart(container, offset);\r\n\t\t\t\t\t\trng.setEnd(container, offset);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn container;\r\n\t\t\t}"
        ],
        [
            "function hasRightSideBr() {\r\n\t\t\t\tvar walker = new TreeWalker(container, parentBlock), node;\r\n\r\n\t\t\t\twhile (node = walker.current()) {\r\n\t\t\t\t\tif (node.nodeName == 'BR') {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnode = walker.next();\r\n\t\t\t\t}\r\n\t\t\t}"
        ],
        [
            "function insertBr() {\r\n\t\t\t\tvar brElm, extraBr, marker;\r\n\r\n\t\t\t\tif (container && container.nodeType == 3 && offset >= container.nodeValue.length) {\r\n\t\t\t\t\t// Insert extra BR element at the end block elements\r\n\t\t\t\t\tif (!tinymce.isIE && !hasRightSideBr()) {\r\n\t\t\t\t\t\tbrElm = dom.create('br');\r\n\t\t\t\t\t\trng.insertNode(brElm);\r\n\t\t\t\t\t\trng.setStartAfter(brElm);\r\n\t\t\t\t\t\trng.setEndAfter(brElm);\r\n\t\t\t\t\t\textraBr = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbrElm = dom.create('br');\r\n\t\t\t\trng.insertNode(brElm);\r\n\r\n\t\t\t\t// Rendering modes below IE8 doesn't display BR elements in PRE unless we have a \\n before it\r\n\t\t\t\tif (tinymce.isIE && parentBlockName == 'PRE' && (!documentMode || documentMode < 8)) {\r\n\t\t\t\t\tbrElm.parentNode.insertBefore(dom.doc.createTextNode('\\r'), brElm);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Insert temp marker and scroll to that\r\n\t\t\t\tmarker = dom.create('span', {}, '&nbsp;');\r\n\t\t\t\tbrElm.parentNode.insertBefore(marker, brElm);\r\n\t\t\t\tselection.scrollIntoView(marker);\r\n\t\t\t\tdom.remove(marker);\r\n\r\n\t\t\t\tif (!extraBr) {\r\n\t\t\t\t\trng.setStartAfter(brElm);\r\n\t\t\t\t\trng.setEndAfter(brElm);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trng.setStartBefore(brElm);\r\n\t\t\t\t\trng.setEndBefore(brElm);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.setRng(rng);\r\n\t\t\t\tundoManager.add();\r\n\t\t\t}"
        ],
        [
            "function(el, prefix) {\n        var me = this,\n            sandboxPrefix = '';\n        el = Ext.getDom(el, true) || {};\n        if (el === document) {\n            el.id = me.documentId;\n        }\n        else if (el === window) {\n            el.id = me.windowId;\n        }\n        if (!el.id) {\n            if (me.isSandboxed) {\n                sandboxPrefix = Ext.sandboxName.toLowerCase() + '-';\n            }\n            el.id = sandboxPrefix + (prefix || \"ext-gen\") + (++Ext.idSeed);\n        }\n        return el.id;\n    }"
        ],
        [
            "function(callback, scope, args, delay){\n        if(Ext.isFunction(callback)){\n            args = args || [];\n            scope = scope || window;\n            if (delay) {\n                Ext.defer(callback, delay, scope, args);\n            } else {\n                callback.apply(scope, args);\n            }\n        }\n    }"
        ],
        [
            "function(dest, source, names, usePrototypeKeys){\n            if(typeof names == 'string'){\n                names = names.split(/[,;\\s]/);\n            }\n\n            var n,\n                nLen = names? names.length : 0,\n                name;\n\n            for(n = 0; n < nLen; n++) {\n                name = names[n];\n\n                if(usePrototypeKeys || source.hasOwnProperty(name)){\n                    dest[name] = source[name];\n                }\n            }\n\n            return dest;\n        }"
        ],
        [
            "function(o){\n            for (var i = 1, a = arguments, len = a.length; i < len; i++) {\n                Ext.destroy(o[a[i]]);\n                delete o[a[i]];\n            }\n        }"
        ],
        [
            "function(arr, methodName){\n            var ret  = [],\n                args = Array.prototype.slice.call(arguments, 2),\n                a, v,\n                aLen = arr.length;\n\n            for (a = 0; a < aLen; a++) {\n                v = arr[a];\n\n                if (v && typeof v[methodName] == 'function') {\n                    ret.push(v[methodName].apply(v, args));\n                } else {\n                    ret.push(undefined);\n                }\n            }\n\n            return ret;\n        }"
        ],
        [
            "function(){\n            var parts = Ext.partition(arguments, function( val ){ return typeof val != 'function'; }),\n                arrs = parts[0],\n                fn = parts[1][0],\n                len = Ext.max(Ext.pluck(arrs, \"length\")),\n                ret = [],\n                i,\n                j,\n                aLen;\n\n            for (i = 0; i < len; i++) {\n                ret[i] = [];\n                if(fn){\n                    ret[i] = fn.apply(fn, Ext.pluck(arrs, i));\n                }else{\n                    for (j = 0, aLen = arrs.length; j < aLen; j++){\n                        ret[i].push( arrs[j][i] );\n                    }\n                }\n            }\n            return ret;\n        }"
        ],
        [
            "function report(node, needed, gotten, loc, isLastNodeCheck) {\n\t\tvar msgContext = {\n\t\t\tneeded: needed,\n\t\t\ttype: indentType,\n\t\t\tcharacters: needed === 1 ? \"character\" : \"characters\",\n\t\t\tgotten: gotten\n\t\t};\n\t\tvar indentChar = indentType === \"space\" ? \" \" : \"\\t\";\n\n\t\t/**\n\t\t * Responsible for fixing the indentation issue fix\n\t\t * @returns {Function} function to be executed by the fixer\n\t\t * @private\n\t\t */\n\t\tfunction getFixerFunction() {\n\t\t\tvar rangeToFix = [];\n\n\t\t\tif (needed > gotten) {\n\t\t\t\tvar spaces = \"\" + new Array(needed - gotten + 1).join(indentChar);  // replace with repeat in future\n\n\t\t\t\tif (isLastNodeCheck === true) {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[1] - 1,\n\t\t\t\t\t\tnode.range[1] - 1\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[0],\n\t\t\t\t\t\tnode.range[0]\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn function(fixer) {\n\t\t\t\t\treturn fixer.insertTextBeforeRange(rangeToFix, spaces);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (isLastNodeCheck === true) {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[1] - (gotten - needed) - 1,\n\t\t\t\t\t\tnode.range[1] - 1\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[0] - (gotten - needed),\n\t\t\t\t\t\tnode.range[0]\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn function(fixer) {\n\t\t\t\t\treturn fixer.removeRange(rangeToFix);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (loc) {\n\t\t\tcontext.report({\n\t\t\t\tnode: node,\n\t\t\t\tloc: loc,\n\t\t\t\tmessage: MESSAGE,\n\t\t\t\tdata: msgContext,\n\t\t\t\tfix: getFixerFunction()\n\t\t\t});\n\t\t} else {\n\t\t\tcontext.report({\n\t\t\t\tnode: node,\n\t\t\t\tmessage: MESSAGE,\n\t\t\t\tdata: msgContext,\n\t\t\t\tfix: getFixerFunction()\n\t\t\t});\n\t\t}\n\t}"
        ],
        [
            "function getFixerFunction() {\n\t\t\tvar rangeToFix = [];\n\n\t\t\tif (needed > gotten) {\n\t\t\t\tvar spaces = \"\" + new Array(needed - gotten + 1).join(indentChar);  // replace with repeat in future\n\n\t\t\t\tif (isLastNodeCheck === true) {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[1] - 1,\n\t\t\t\t\t\tnode.range[1] - 1\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[0],\n\t\t\t\t\t\tnode.range[0]\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn function(fixer) {\n\t\t\t\t\treturn fixer.insertTextBeforeRange(rangeToFix, spaces);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (isLastNodeCheck === true) {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[1] - (gotten - needed) - 1,\n\t\t\t\t\t\tnode.range[1] - 1\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\trangeToFix = [\n\t\t\t\t\t\tnode.range[0] - (gotten - needed),\n\t\t\t\t\t\tnode.range[0]\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn function(fixer) {\n\t\t\t\t\treturn fixer.removeRange(rangeToFix);\n\t\t\t\t};\n\t\t\t}\n\t\t}"
        ],
        [
            "function getNodeIndent(node, byLastLine, excludeCommas) {\n\t\tvar token = byLastLine ? context.getLastToken(node) : context.getFirstToken(node);\n\t\tvar src = context.getSource(token, token.loc.start.column);\n\t\tvar regExp = excludeCommas ? indentPattern.excludeCommas : indentPattern.normal;\n\t\tvar indent = regExp.exec(src);\n\n\t\treturn indent ? indent[0].length : 0;\n\t}"
        ],
        [
            "function isNodeFirstInLine(node, byEndLocation) {\n\t\tvar firstToken = byEndLocation === true ? context.getLastToken(node, 1) : context.getTokenBefore(node),\n\t\t\tstartLine = byEndLocation === true ? node.loc.end.line : node.loc.start.line,\n\t\t\tendLine = firstToken ? firstToken.loc.end.line : -1;\n\n\t\treturn startLine !== endLine;\n\t}"
        ],
        [
            "function isNodeFirstArgument(node) {\n\t\tif (!node.parent.arguments) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn equal(node, node.parent.arguments[0]);\n\n\t\t// var firstToken = context.getTokenBefore(node),\n\t\t// \tstartLine = node.loc.start.line,\n\t\t// \tendLine = firstToken ? firstToken.loc.end.line : -1;\n\t\t//\n\t\t// var previous = findNodeOfInterest(firstToken);\n\t\t//\n\t\t// if (previous === undefined || getCallee(node.parent) === undefined) {\n\t\t// \tdebugger;\n\t\t// }\n\t\t//\n\t\t// if (equal(previous, getCallee(node.parent))) {\n\t\t// \treturn true;\n\t\t// }\n\t\t//\n\t\t// return startLine !== endLine;\n\t}"
        ],
        [
            "function checkNodeIndent(node, indent, excludeCommas) {\n\t\tvar nodeIndent = getNodeIndent(node, false, excludeCommas);\n\t\tif (\n\t\t\tnode.type !== \"ArrayExpression\" && node.type !== \"ObjectExpression\" &&\n\t\t\tnodeIndent !== indent && isNodeFirstInLine(node)\n\t\t) {\n\t\t\treport(node, indent, nodeIndent);\n\t\t}\n\t}"
        ],
        [
            "function checkNodesIndent(nodes, indent, excludeCommas) {\n\t\tnodes.forEach(function(node) {\n\t\t\tif (node.type === \"IfStatement\" && node.alternate) {\n\t\t\t\tvar elseToken = context.getTokenBefore(node.alternate);\n\t\t\t\tcheckNodeIndent(elseToken, indent, excludeCommas);\n\t\t\t}\n\t\t\tcheckNodeIndent(node, indent, excludeCommas);\n\t\t});\n\t}"
        ],
        [
            "function checkLastNodeLineIndent(node, lastLineIndent) {\n\t\tvar lastToken = context.getLastToken(node);\n\t\tvar endIndent = getNodeIndent(lastToken, true);\n\n\t\tif (endIndent !== lastLineIndent && isNodeFirstInLine(node, true)) {\n\t\t\treport(\n\t\t\t\tnode,\n\t\t\t\tlastLineIndent,\n\t\t\t\tendIndent,\n\t\t\t\t{\n\t\t\t\t\tline: lastToken.loc.start.line,\n\t\t\t\t\tcolumn: lastToken.loc.start.column\n\t\t\t\t},\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\t}"
        ],
        [
            "function checkFirstNodeLineIndent(node, firstLineIndent) {\n\t\tvar startIndent = getNodeIndent(node, false);\n\t\tif (startIndent !== firstLineIndent && isNodeFirstInLine(node)) {\n\t\t\treport(\n\t\t\t\tnode,\n\t\t\t\tfirstLineIndent,\n\t\t\t\tstartIndent,\n\t\t\t\t{line: node.loc.start.line, column: node.loc.start.column}\n\t\t\t);\n\t\t}\n\t}"
        ],
        [
            "function getVariableDeclaratorNode(node) {\n\t\tvar parent = node.parent;\n\n\t\twhile (parent.type !== \"VariableDeclarator\" && parent.type !== \"Program\") {\n\t\t\tparent = parent.parent;\n\t\t}\n\n\t\treturn parent.type === \"VariableDeclarator\" ? parent : null;\n\t}"
        ],
        [
            "function checkIndentInFunctionBlock(node) {\n\n\t\t// Search first caller in chain.\n\t\t// Ex.:\n\t\t//\n\t\t// Models <- Identifier\n\t\t//   .User\n\t\t//   .find()\n\t\t//   .exec(function() {\n\t\t//   // function body\n\t\t// });\n\t\t//\n\t\t// Looks for 'Models'\n\t\tvar calleeNode = node.parent; // FunctionExpression\n\t\tvar indent;\n\n\t\tif (calleeNode.parent &&\n\t\t\t(calleeNode.parent.type === \"Property\" ||\n\t\t\tcalleeNode.parent.type === \"ArrayExpression\")) {\n\t\t\t// If function is part of array or object, comma can be put at left\n\t\t\tindent = getNodeIndent(calleeNode, false, false);\n\t\t} else {\n\t\t\t// If function is standalone, simple calculate indent\n\t\t\tindent = getNodeIndent(calleeNode);\n\t\t}\n\n\t\tif (calleeNode.parent.type === \"CallExpression\") {\n\t\t\tvar calleeParent = calleeNode.parent;\n\n\t\t\tif (calleeNode.type !== \"FunctionExpression\" && calleeNode.type !== \"ArrowFunctionExpression\") {\n\t\t\t\tif (calleeParent && calleeParent.loc.start.line < node.loc.start.line) {\n\t\t\t\t\tindent = getNodeIndent(calleeParent);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isArgBeforeCalleeNodeMultiline(calleeNode) &&\n\t\t\t\t\tcalleeParent.callee.loc.start.line === calleeParent.callee.loc.end.line && !isNodeFirstInLine(calleeNode)) {\n\t\t\t\t\tindent = getNodeIndent(calleeParent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// function body indent should be indent + indent size\n\t\tindent += indentSize;\n\n\t\t// check if the node is inside a variable\n\t\tvar parentVarNode = getVariableDeclaratorNode(node);\n\t\tif (parentVarNode && isNodeInVarOnTop(node, parentVarNode)) {\n\t\t\tindent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];\n\t\t}\n\n\t\tif (node.body.length > 0) {\n\t\t\tcheckNodesIndent(node.body, indent);\n\t\t}\n\n\t\tcheckLastNodeLineIndent(node, indent - indentSize);\n\t}"
        ],
        [
            "function isSingleLineNode(node) {\n\t\tvar lastToken = context.getLastToken(node),\n\t\t\tstartLine = node.loc.start.line,\n\t\t\tendLine = lastToken.loc.end.line;\n\n\t\treturn startLine === endLine;\n\t}"
        ],
        [
            "function isFirstArrayElementOnSameLine(node) {\n\t\tif (node.type === \"ArrayExpression\" && node.elements[0]) {\n\t\t\treturn node.elements[0].loc.start.line === node.loc.start.line && node.elements[0].type === \"ObjectExpression\";\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"
        ],
        [
            "function checkIndentInArrayOrObjectBlock(node) {\n\t\t// Skip inline\n\t\tif (isSingleLineNode(node)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar elements = (node.type === \"ArrayExpression\") ? node.elements : node.properties;\n\n\t\t// filter out empty elements example would be [ , 2] so remove first element as espree considers it as null\n\t\telements = elements.filter(function(elem) {\n\t\t\treturn elem !== null;\n\t\t});\n\n\t\t// Skip if first element is in same line with this node\n\t\tif (elements.length > 0 && elements[0].loc.start.line === node.loc.start.line) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar nodeIndent;\n\t\tvar elementsIndent;\n\t\tvar parentVarNode = getVariableDeclaratorNode(node);\n\n\t\t// TODO - come up with a better strategy in future\n\t\tif (isNodeFirstInLine(node)) {\n\t\t\tvar parent = node.parent;\n\t\t\tvar effectiveParent = parent;\n\n\t\t\tif (parent.type === \"MemberExpression\") {\n\t\t\t\tif (isNodeFirstInLine(parent)) {\n\t\t\t\t\teffectiveParent = parent.parent.parent;\n\t\t\t\t} else {\n\t\t\t\t\teffectiveParent = parent.parent;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnodeIndent = getNodeIndent(effectiveParent);\n\t\t\tif (parentVarNode && parentVarNode.loc.start.line !== node.loc.start.line) {\n\t\t\t\tif (parent.type !== \"VariableDeclarator\" || parentVarNode === parentVarNode.parent.declarations[0]) {\n\t\t\t\t\tif (parentVarNode.loc.start.line === effectiveParent.loc.start.line) {\n\t\t\t\t\t\tnodeIndent = nodeIndent + (indentSize * options.VariableDeclarator[parentVarNode.parent.kind]);\n\t\t\t\t\t} else if (\n\t\t\t\t\t\tparent.type === \"ObjectExpression\" ||\n\t\t\t\t\t\tparent.type === \"ArrayExpression\" ||\n\t\t\t\t\t\tparent.type === \"CallExpression\" ||\n\t\t\t\t\t\tparent.type === \"ArrowFunctionExpression\" ||\n\t\t\t\t\t\tparent.type === \"NewExpression\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tnodeIndent = nodeIndent + indentSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (!parentVarNode && !isFirstArrayElementOnSameLine(parent) && effectiveParent.type !== \"MemberExpression\" && effectiveParent.type !== \"ExpressionStatement\" && effectiveParent.type !== \"AssignmentExpression\" && effectiveParent.type !== \"Property\") {\n\t\t\t\tnodeIndent = nodeIndent + indentSize;\n\t\t\t}\n\n\t\t\telementsIndent = nodeIndent + indentSize;\n\n\t\t\tcheckFirstNodeLineIndent(node, nodeIndent);\n\t\t} else {\n\t\t\tnodeIndent = getNodeIndent(node);\n\t\t\telementsIndent = nodeIndent + indentSize;\n\t\t}\n\n\t\t// check if the node is a multiple variable declaration, if yes then make sure indentation takes into account\n\t\t// variable indentation concept\n\t\tif (isNodeInVarOnTop(node, parentVarNode)) {\n\t\t\telementsIndent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];\n\t\t}\n\n\t\tif (node.parent && node.parent.type === \"CallExpression\" && node.parent.arguments.length > 1 && isNodeFirstArgument(node) && isNodeOnSameLineAsPrevious(node) && isNextArgumentOnNextLine(node)) {\n\t\t\telementsIndent += indentSize;\n\t\t}\n\n\t\t// Comma can be placed before property name\n\t\tcheckNodesIndent(elements, elementsIndent, true);\n\n\t\tif (elements.length > 0) {\n\t\t\t// Skip last block line check if last item in same line\n\t\t\tif (elements[elements.length - 1].loc.end.line === node.loc.end.line) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tvar lastIndent = elementsIndent - indentSize;\n\n\t\tcheckLastNodeLineIndent(node, lastIndent);\n\t}"
        ],
        [
            "function isNodeBodyBlock(node) {\n\t\treturn node.type === \"BlockStatement\" || (node.body && node.body.type === \"BlockStatement\") ||\n\t\t\t(node.consequent && node.consequent.type === \"BlockStatement\");\n\t}"
        ],
        [
            "function blockIndentationCheck(node) {\n\t\t// Skip inline blocks\n\t\tif (isSingleLineNode(node)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (node.parent && (\n\t\t\t\tnode.parent.type === \"FunctionExpression\" ||\n\t\t\t\tnode.parent.type === \"FunctionDeclaration\" ||\n\t\t\t\tnode.parent.type === \"ArrowFunctionExpression\"\n\t\t\t)) {\n\t\t\tcheckIndentInFunctionBlock(node);\n\t\t\treturn;\n\t\t}\n\n\t\tvar indent;\n\t\tvar nodesToCheck = [];\n\n\t\t// For this statements we should check indent from statement begin\n\t\t// (not from block begin)\n\t\tvar statementsWithProperties = [\n\t\t\t\"IfStatement\", \"WhileStatement\", \"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"DoWhileStatement\"\n\t\t];\n\n\t\tif (node.parent && statementsWithProperties.indexOf(node.parent.type) !== -1 && isNodeBodyBlock(node)) {\n\t\t\tindent = getNodeIndent(node.parent);\n\t\t} else {\n\t\t\tindent = getNodeIndent(node);\n\t\t}\n\n\t\tif (node.type === \"IfStatement\" && node.consequent.type !== \"BlockStatement\") {\n\t\t\tnodesToCheck = [node.consequent];\n\t\t} else if (util.isArray(node.body)) {\n\t\t\tnodesToCheck = node.body;\n\t\t} else {\n\t\t\tnodesToCheck = [node.body];\n\t\t}\n\n\t\tif (nodesToCheck.length > 0) {\n\t\t\tcheckNodesIndent(nodesToCheck, indent + indentSize);\n\t\t}\n\n\t\tif (node.type === \"BlockStatement\") {\n\t\t\tcheckLastNodeLineIndent(node, indent);\n\t\t}\n\t}"
        ],
        [
            "function checkIndentInVariableDeclarations(node) {\n\t\tvar elements = filterOutSameLineVars(node);\n\t\tvar nodeIndent = getNodeIndent(node);\n\t\tvar lastElement = elements[elements.length - 1];\n\n\t\tvar elementsIndent = nodeIndent + indentSize * options.VariableDeclarator[node.kind];\n\n\t\t// Comma can be placed before declaration\n\t\tcheckNodesIndent(elements, elementsIndent, true);\n\n\t\t// Only check the last line if there is any token after the last item\n\t\tif (context.getLastToken(node).loc.end.line <= lastElement.loc.end.line) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar tokenBeforeLastElement = context.getTokenBefore(lastElement);\n\n\t\tif (tokenBeforeLastElement.value === \",\") {\n\t\t\t// Special case for comma-first syntax where the semicolon is indented\n\t\t\tcheckLastNodeLineIndent(node, getNodeIndent(tokenBeforeLastElement));\n\t\t} else {\n\t\t\tcheckLastNodeLineIndent(node, elementsIndent - indentSize);\n\t\t}\n\t}"
        ],
        [
            "function expectedCaseIndent(node, switchIndent) {\n\t\tvar switchNode = (node.type === \"SwitchStatement\") ? node : node.parent;\n\t\tvar caseIndent;\n\n\t\tif (caseIndentStore[switchNode.loc.start.line]) {\n\t\t\treturn caseIndentStore[switchNode.loc.start.line];\n\t\t} else {\n\t\t\tif (typeof switchIndent === \"undefined\") {\n\t\t\t\tswitchIndent = getNodeIndent(switchNode);\n\t\t\t}\n\n\t\t\tif (switchNode.cases.length > 0 && options.SwitchCase === 0) {\n\t\t\t\tcaseIndent = switchIndent;\n\t\t\t} else {\n\t\t\t\tcaseIndent = switchIndent + (indentSize * options.SwitchCase);\n\t\t\t}\n\n\t\t\tcaseIndentStore[switchNode.loc.start.line] = caseIndent;\n\t\t\treturn caseIndent;\n\t\t}\n\t}"
        ],
        [
            "function factory(name, attrs, fn) {\n  if (arguments.length === 2) {\n    fn = attrs;\n    attrs = null;\n  }\n\n  factories.get(name).create(attrs, fn);\n}"
        ],
        [
            "function define(type, Model) {\n  if (arguments.length === 1) {\n    Model = type;\n    type = Model.prototype.__type || Model.modelName;\n  }\n\n  var factory = new Factory(Model);\n  factories.set(type, factory)\n\n  return factory;\n}"
        ],
        [
            "function list(type, num, fn) {\n  var records = [];\n  var bail = false;\n\n  var created = function(err, record) {\n    if (bail) return;\n\n    if (err) {\n      bail = true;\n      return fn(err);\n    }\n\n    records.push(record);\n\n    if (records.length === num) {\n      fn(null, records);\n    }\n  };\n\n  for (var i = 0; i < num; i++) {\n    factory(type, created);\n  }\n}"
        ],
        [
            "function(size, units) {\n            // Most common case first: Size is set to a number\n            if (typeof size == 'number') {\n                return size + (units || this.defaultUnit || 'px');\n            }\n\n            // Size set to a value which means \"auto\"\n            if (size === \"\" || size == \"auto\" || size === undefined || size === null) {\n                return size || '';\n            }\n\n            // Otherwise, warn if it's not a valid CSS measurement\n            if (!this.unitRe.test(size)) {\n                //<debug>\n                if (Ext.isDefined(Ext.global.console)) {\n                    Ext.global.console.warn(\"Warning, size detected as NaN on Element.addUnits.\");\n                }\n                //</debug>\n                return size || '';\n            }\n\n            return size;\n        }"
        ],
        [
            "function() {\n            return Math.max(!Ext.isStrict ? document.body.scrollHeight : document.documentElement.scrollHeight, this.getViewportHeight());\n        }"
        ],
        [
            "function ( iterable = null ) {\n\n\tthis.front = null ;\n\tthis.back = null ;\n\tthis.length = 0 ;\n\n\tif ( iterable !== null ) {\n\n\t\tfor ( let value of iterable ) this.push( value ) ;\n\n\t}\n\n}"
        ],
        [
            "function LoaderCache(options) {\n  if (!(this instanceof LoaderCache)) {\n    return new LoaderCache(options);\n  }\n  this.options = options || {};\n  this.defaultType = this.options.defaultType || 'sync';\n  this.types = [];\n  this.decorate('resolve');\n  this.decorate('get');\n}"
        ],
        [
            "function(type, options, fn) {\n    if (arguments.length === 1) {\n      return this[type].iterator.fn;\n    }\n    if (typeof options === 'function') {\n      fn = options;\n      options = {};\n    }\n    this[type] = new LoaderType(options, fn.bind(this));\n    this.setLoaderType(type);\n    return this;\n  }"
        ],
        [
            "function(name/*, options, fns*/) {\n    var args = utils.slice(arguments, 1);\n    var opts = args.shift();\n    var type = this.getLoaderType(opts);\n    this[type].set(name, this[type].resolve(args));\n    return this;\n  }"
        ],
        [
            "function(name, options, stack) {\n    var args = utils.slice(arguments);\n    var opts = {};\n    name = args.shift();\n\n    if (!utils.isLoader(options) && lazy.isObject(options)) {\n      opts = args.shift();\n    }\n\n    opts = opts || {};\n    var type = this.getLoaderType(opts);\n    opts.loaderType = type;\n\n    var inst = this[type];\n    var iterator = this.iterator(type);\n    stack = inst.resolve(inst.get(name).concat(args));\n\n    var ctx = { app: this };\n    ctx.options = opts;\n    ctx.iterator = inst.iterator;\n    ctx.loaders = inst;\n\n    return function () {\n      var args = [].slice.call(arguments).filter(Boolean);\n      var len = args.length, loaders = [];\n\n      while (len-- > 1) {\n        var arg = args[len];\n        if (!utils.isLoader(arg)) break;\n        loaders.unshift(args.pop());\n      }\n\n      // combine the `create` and collection stacks\n      loaders = stack.concat(inst.resolve(loaders));\n\n      // if loading is async, move the done function to args\n      if (type === 'async') {\n        args.push(loaders.pop());\n      }\n\n      loaders = inst.resolve(loaders);\n      if (loaders.length === 0) {\n        loaders = inst.resolve(opts.defaultLoader || []);\n      }\n\n      var wrapped = loaders.map(opts.wrap || utils.identity);\n\n      // create the actual `load` function\n      var load = iterator.call(this, wrapped);\n      var res = load.apply(ctx, args);\n      return res;\n    }.bind(this);\n  }"
        ],
        [
            "function(cmp) {\n        var me = this,\n            newGroup = cmp,\n            oldGroup;\n\n        if(Ext.isString(cmp)) {\n            newGroup = Ext.getCmp(newGroup);\n        }\n\n        if (newGroup === me.activeGroup) {\n            return true;\n        }\n\n        oldGroup = me.activeGroup;\n        if (me.fireEvent('beforegroupchange', me, newGroup, oldGroup) !== false) {\n             me.activeGroup = newGroup;\n             me.fireEvent('groupchange', me, newGroup, oldGroup);\n         } else {\n             return false;\n         }\n         return true;\n    }"
        ],
        [
            "function() {\n        var me = this,\n            delimiter = me.delimiter,\n            val = me.getValue();\n        \n        return Ext.isString(delimiter) ? val.join(delimiter) : val;\n    }"
        ],
        [
            "function compile(content, options) {\n  options = merge({\n    outputLanguage: 'es5',\n    modules: 'commonjs',\n    filename: '<unknown file>',\n    sourceMap: false,\n    cwd: process.cwd(),\n    moduleName: false\n  }, options || {});\n\n  var moduleName = options.moduleName;\n\n  traceurOptions.reset();\n  merge(traceurOptions, options);\n\n  var errorReporter = new ErrorReporter();\n  var sourceFile = new SourceFile(options.filename, content);\n  var parser = new Parser(sourceFile, errorReporter);\n  var tree = parser.parseModule();\n  var transformer;\n  if (moduleName === true || options.modules == 'register' || options.modules == 'inline') {\n    moduleName = options.filename.replace(/\\.js$/, '');\n    moduleName = path.relative(options.cwd, moduleName).replace(/\\\\/g,'/');\n  }\n  if (moduleName) {\n    transformer = new AttachModuleNameTransformer(moduleName);\n    tree = transformer.transformAny(tree);\n  }\n\n  if (options.outputLanguage.toLowerCase() === 'es6') {\n    transformer = new PureES6Transformer(errorReporter);\n  } else {\n    transformer = new FromOptionsTransformer(errorReporter);\n  }\n\n  var transformedTree = transformer.transform(tree);\n\n  if (errorReporter.hadError()) {\n    return {\n      js: null,\n      errors: errorReporter.errors,\n      sourceMap: null\n    };\n  }\n\n  var treeWriterOptions = {};\n\n  if (options.sourceMap) {\n    treeWriterOptions.sourceMapGenerator = new SourceMapGenerator({\n      file: options.filename,\n      sourceRoot: null\n    });\n  }\n\n  return {\n    js: TreeWriter.write(transformedTree, treeWriterOptions),\n    errors: errorReporter.errors,\n    sourceMap: treeWriterOptions.sourceMap || null\n  };\n}"
        ],
        [
            "function() {\n        var me = this,\n            value = me.textField.getValue();\n            \n        if (value === '') {\n            return null;\n        }\n        if (!me.regExpMode) {\n            value = value.replace(me.regExpProtect, function(m) {\n                return '\\\\' + m;\n            });\n        } else {\n            try {\n                new RegExp(value);\n            } catch (error) {\n                me.statusBar.setStatus({\n                    text: error.message,\n                    iconCls: 'x-status-error'\n                });\n                return null;\n            }\n            // this is stupid\n            if (value === '^' || value === '$') {\n                return null;\n            }\n        }\n\n        return value;\n    }"
        ],
        [
            "function() {\n         var me = this,\n             count = 0;\n\n         me.view.refresh();\n         // reset the statusbar\n         me.statusBar.setStatus({\n             text: me.defaultStatusText,\n             iconCls: ''\n         });\n\n         me.searchValue = me.getSearchValue();\n         me.indexes = [];\n         me.currentIndex = null;\n\n         if (me.searchValue !== null) {\n             me.searchRegExp = new RegExp(me.searchValue, 'g' + (me.caseSensitive ? '' : 'i'));\n             \n             \n             me.store.each(function(record, idx) {\n                 var td = Ext.fly(me.view.getNode(idx)).down('td'),\n                     cell, matches, cellHTML;\n                 while(td) {\n                     cell = td.down('.x-grid-cell-inner');\n                     matches = cell.dom.innerHTML.match(me.tagsRe);\n                     cellHTML = cell.dom.innerHTML.replace(me.tagsRe, me.tagsProtect);\n                     \n                     // populate indexes array, set currentIndex, and replace wrap matched string in a span\n                     cellHTML = cellHTML.replace(me.searchRegExp, function(m) {\n                        count += 1;\n                        if (Ext.Array.indexOf(me.indexes, idx) === -1) {\n                            me.indexes.push(idx);\n                        }\n                        if (me.currentIndex === null) {\n                            me.currentIndex = idx;\n                        }\n                        return '<span class=\"' + me.matchCls + '\">' + m + '</span>';\n                     });\n                     // restore protected tags\n                     Ext.each(matches, function(match) {\n                        cellHTML = cellHTML.replace(me.tagsProtect, match); \n                     });\n                     // update cell html\n                     cell.dom.innerHTML = cellHTML;\n                     td = td.next();\n                 }\n             }, me);\n\n             // results found\n             if (me.currentIndex !== null) {\n                 me.getSelectionModel().select(me.currentIndex);\n                 me.statusBar.setStatus({\n                     text: count + ' matche(s) found.',\n                     iconCls: 'x-status-valid'\n                 });\n             }\n         }\n\n         // no results found\n         if (me.currentIndex === null) {\n             me.getSelectionModel().deselectAll();\n         }\n\n         // force textfield focus\n         me.textField.focus();\n     }"
        ],
        [
            "function() {\n        var me = this,\n            idx;\n            \n        if ((idx = Ext.Array.indexOf(me.indexes, me.currentIndex)) !== -1) {\n            me.currentIndex = me.indexes[idx - 1] || me.indexes[me.indexes.length - 1];\n            me.getSelectionModel().select(me.currentIndex);\n         }\n    }"
        ],
        [
            "function makeCtor (className) {\n        function constructor () {\n            // Opera has some problems returning from a constructor when Dragonfly isn't running. The || null seems to\n            // be sufficient to stop it misbehaving. Known to be required against 10.53, 11.51 and 11.61.\n            return this.constructor.apply(this, arguments) || null;\n        }\n        //<debug>\n        if (className) {\n            constructor.displayName = className;\n        }\n        //</debug>\n        return constructor;\n    }"
        ],
        [
            "function(config, existingEl) {\n        config = config || {};\n        var me = this,\n            dh = Ext.DomHelper,\n            cp = config.parentEl,\n            pel = cp ? Ext.getDom(cp) : document.body,\n            hm = config.hideMode,\n            cls = Ext.baseCSSPrefix + (config.fixed && !(Ext.isIE6 || Ext.isIEQuirks) ? 'fixed-layer' : 'layer');\n\n        // set an \"el\" property that references \"this\".  This allows\n        // Ext.util.Positionable methods to operate on this.el.dom since it\n        // gets mixed into both Element and Component\n        me.el = me;\n\n        if (existingEl) {\n            me.dom = Ext.getDom(existingEl);\n        }\n        if (!me.dom) {\n            me.dom = dh.append(pel, config.dh || {\n                tag: 'div',\n                cls: cls // primarily to give el 'position:absolute' or, if fixed, 'position:fixed'\n            });\n        } else {\n            me.addCls(cls);\n            if (!me.dom.parentNode) {\n                pel.appendChild(me.dom);\n            }\n        }\n\n        if (config.id) {\n            me.id = me.dom.id = config.id;\n        } else {\n            me.id = Ext.id(me.dom);\n        }\n\n        Ext.Element.addToCache(me);\n\n        if (config.cls) {\n            me.addCls(config.cls);\n        }\n        me.constrain = config.constrain !== false;\n\n        // Allow Components to pass their hide mode down to the Layer if they are floating.\n        // Otherwise, allow useDisplay to override the default hiding method which is visibility.\n        // TODO: Have ExtJS's Element implement visibilityMode by using classes as in Mobile.\n        if (hm) {\n            me.setVisibilityMode(Ext.Element[hm.toUpperCase()]);\n            if (me.visibilityMode == Ext.Element.ASCLASS) {\n                me.visibilityCls = config.visibilityCls;\n            }\n        } else if (config.useDisplay) {\n            me.setVisibilityMode(Ext.Element.DISPLAY);\n        } else {\n            me.setVisibilityMode(Ext.Element.VISIBILITY);\n        }\n\n        if (config.shadow) {\n            me.shadowOffset = config.shadowOffset || 4;\n            me.shadow = new Ext.Shadow({\n                offset: me.shadowOffset,\n                mode: config.shadow,\n                fixed: config.fixed\n            });\n            me.disableShadow();\n        } else {\n            me.shadowOffset = 0;\n        }\n        me.useShim = config.shim !== false && Ext.useShims;\n        if (config.hidden === true) {\n            me.hide();\n        } else {\n            me.show();\n        }\n    }"
        ],
        [
            "function(err)\n\t\t    {\n\t\t        if(err)\n\t\t        {\n\t\t            defer.reject(err);\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            //remove the error object, send the info onwards\n\t\t            [].shift.call(arguments);\n\n\t\t            //now we have to do something funky here\n\t\t            //if you expect more than one argument, we have to send in the argument object \n\t\t            //and you pick out the appropriate arguments\n\t\t            //if it's just one, we send the one argument like normal\n\n\t\t            //this is the behavior chosen\n\t\t            if(arguments.length > 1)\n\t\t                defer.resolve(arguments);\n\t\t            else\n\t\t                defer.resolve.apply(defer, arguments);\n\t\t        }\n\t\t    }"
        ],
        [
            "function readAnalyserConfig(analyserPath) {\n    var filePath = path.join(analyserPath, 'config.json');\n\n    return readFile(filePath, {encoding: 'utf8'})\n      .then(function(fileContents){\n        try {\n          return doResolve(JSON.parse(jsonWithComments(fileContents)));\n        } catch(err){\n          return doReject(`Unable to parse config file for analyser '${analyserPath}'`, err);\n        }\n      }, function(err){\n        return doReject(`Unable to read config file for analyser '${analyserPath}'`, err);\n      });\n  }"
        ],
        [
            "function build(mode, system, cdef, out, cb) {\n    var cmd = cdef.specific.processBuild || cdef.specific.build;\n    var branch = '';\n\n    logger.info('building');\n    out.stdout('building');\n\n    if (!cmd) { return cb(null, {}); }\n    if (!cdef.specific.repositoryUrl) { return cb(new Error('missing repositoryUrl'), {}); }\n\n    //var parsed = parseGitUrl(cdef.specific.repositoryUrl).branch;\n    var parsed = parseGitUrl(cdef.specific.repositoryUrl);\n    if (parsed.branch) {\n      branch = parsed.branch;\n    }\n\n    if (cdef.specific.commit) {\n      var synchCommand =  [\n        [\n          ' ( ' +\n          'test `git show-ref --hash refs/heads/' + branch +'` = ' + cdef.specific.commit,\n          ' && ',\n          'git checkout -q ' + branch,\n          ' ) ',\n          ' || ',\n          'git checkout -q ' + cdef.specific.commit\n        ].join(' '),\n        'echo checked out ' + cdef.specific.commit,\n      ].join(' && ');\n\n      executor.exec(mode, synchCommand, pathFromRepoUrl(system, cdef), out, function(err) {\n        if (err) { return cb(err); }\n        executor.exec(mode, cmd, pathFromRepoUrl(system, cdef), out, cb);\n      });\n    }\n    else {\n      executor.exec(mode, cmd, pathFromRepoUrl(system, cdef), out, cb);\n    }\n  }"
        ],
        [
            "function start(mode, target, system, containerDef, container, out, cb) {\n    proc.start(mode, target, system, containerDef, container, out, cb);\n  }"
        ],
        [
            "function isIllegalArguments(_ref) {\n    var fn = _ref.fn;\n    var cb = _ref.cb;\n    var matcher = _ref.matcher;\n\n    if (typeof fn !== 'function') {\n      return Promise.reject(new Error('Expected fn to be a Function'));\n    }\n    if (typeof cb !== 'undefined' && typeof cb !== 'function') {\n      return Promise.reject(new Error('Expected cb to be a Function'));\n    }\n    if (!(matcher instanceof RegExp) && ['function', 'string'].indexOf(typeof matcher === 'undefined' ? 'undefined' : _typeof(matcher)) === -1 && matcher.constructor !== Error.constructor) {\n      return Promise.reject(new Error(UNRECOGNISED_MATCHER_ERR));\n    }\n    return Promise.resolve();\n  }"
        ],
        [
            "function catchAndMatch(fn, matcher, cb) {\n    return isIllegalArguments({ fn: fn, matcher: matcher, cb: cb }).then(fn, function (err) {\n      throw err;\n    }).then(function () {\n      // If we got here the function did not throw an error\n      var error = new Error('No error thrown');\n      if (cb) cb(error);\n      return Promise.reject(error);\n    }, function (err) {\n      // Error was thrown - check that it satisfies the matcher\n      if (doesMatch({ matcher: matcher, err: err })) {\n        if (cb) cb();\n        return Promise.resolve();\n      }\n      var error = new Error('Error does not satisfy matcher');\n      if (cb) cb(error);\n      return Promise.reject(error);\n    });\n  }"
        ],
        [
            "function exec(cmd) {\n        return new Promise(\n            function (resolve, reject) {\n                child_process.exec(cmd, function (error, stdout, stderr) {\n                    if (error) {\n                        reject(stderr.trim());\n                    } else {\n                        resolve(stdout.trim());\n                    }\n                });\n            }\n        );\n    }"
        ],
        [
            "function listen(name, callBack) {\n  function f() {\n    try {\n      callBack.apply(this, arguments);\n    } catch (e) {\n      console.error(e); // eslint-disable-line no-console\n    }\n  }\n  callbacks[callBack] = f;\n  messageBus.bind(name, f);\n}"
        ],
        [
            "function ImageDimensions (assetPath, registeredAssets, callback) {\n    sassUtils.assertType(assetPath, \"string\");\n    sassUtils.assertType(registeredAssets, \"map\");\n    var self = this;\n    var getPath = self.checkImagePath(assetPath.getValue(), registeredAssets);\n    getPath.then(function (success) {\n      var imageDimensions = self.getDimensions(success);\n      imageDimensions.then(function (dimensions) {\n        callback(null, dimensions);\n      }, function (err) {\n        callback(err, null);\n      });\n    }, function (err) {\n      callback(err, null);\n    });\n  }"
        ],
        [
            "function clientReadyMessage (cookies, user, pass) {\n  return {\n    type: 'connected',\n    user: user,\n    sessionID: cookies.sessionID,\n    pass: pass\n  }\n}"
        ],
        [
            "function CouchDBCache(options) {\n    var self = this;\n    options = options || {};\n\n    this.expireAfterSeconds = options.expireAfterSeconds || 60;\n\n    this.connection = Promise.resolve()\n        .then(function () {\n            return options.auth ? this.auth(options.auth.username, options.auth.password) : null;\n        })\n        .then(function (cookie) {\n            return nano({\n                url: options.url || (options.protocol + '://' + options.host + ':' + options.port),\n                cookie: cookie\n            });\n        });\n\n    // create database if it doesn't exist\n    this.db = this.connection.then(function (connection) {\n        var dbName = options.db || 'openamagent';\n        return Promise.promisify(connection.db.create.bind(connection.db))(dbName)\n            .catch(function () {\n                // ignore\n            })\n            .then(function () {\n                return connection.use(dbName);\n            });\n    });\n}"
        ],
        [
            "function (obj) {\n\tvar res = {}, i;\n\tfor (i in obj) {\n\t\tres[i] = obj[i];\n\t}\n\treturn res;\n}"
        ],
        [
            "function (rootPath) {\n\t// public properties\n\tthis.plugins = {};\n\tthis.mainTree = {};\n\tthis.groups = {};\n\tthis.resolved = false;\n\tif (rootPath) {\n\t\tif (typeof rootPath !== 'string') {\n\t\t\tthrow new Error( 'Invalid rootPath parameter creating tree' );\n\t\t}\n\t\tthis.rootPath = rootPath;\n\t} else {\n\t\t// no argument passed\n\t\tthis.rootPath = '.';\n\t}\n}"
        ],
        [
            "function configure(pkg, env, target) {\n    const isModule = target === 'module';\n    const input = `src/index.js`;\n    const deps = []\n        .concat(pkg.dependencies ? Object.keys(pkg.dependencies) : [])\n        .concat(pkg.peerDependencies ? Object.keys(pkg.peerDependencies) : []);\n\n    const plugins = [\n        // Allow Rollup to resolve modules from `node_modules`, since it only\n        // resolves local modules by default.\n        resolve({\n            browser: true\n        }),\n\n        // Convert JSON imports to ES6 modules.\n        json(),\n\n        // Replace `process.env.NODE_ENV` with its value, which enables some modules\n        // like React and Slate to use their production variant.\n        replace({\n            'process.env.NODE_ENV': JSON.stringify(env)\n        }),\n\n        // Register Node.js builtins for browserify compatibility.\n        builtins(),\n\n        // Use Babel to transpile the result, limiting it to the source code.\n        babel({\n            include: [`src/**`]\n        }),\n\n        // Register Node.js globals for browserify compatibility.\n        globals()\n    ].filter(Boolean);\n\n    if (isModule) {\n        return {\n            plugins,\n            input,\n            output: [\n                {\n                    file: `${pkg.module}`,\n                    format: 'es',\n                    sourcemap: true\n                },\n                {\n                    file: `${pkg.main}`,\n                    format: 'cjs',\n                    exports: 'named',\n                    sourcemap: true\n                }\n            ],\n            // We need to explicitly state which modules are external, meaning that\n            // they are present at runtime. In the case of non-UMD configs, this means\n            // all non-Slate packages.\n            external: id =>\n                !!deps.find(dep => dep === id || id.startsWith(`${dep}/`))\n        };\n    }\n    return undefined;\n}"
        ],
        [
            "function () {\n\n        var requiredRules = [\n            // This one comes out of the box with parsley\n            'required',\n\n            // These ones were added with this library\n            'requiredIf', 'requiredUnless', 'requiredWith', 'requiredWithAll', 'requiredWithout', 'requiredWithoutAll'\n        ];\n\n        var requiredRulesFound = [];\n\n        // Loop over the list to check if they're defined on the field.\n        requiredRules.forEach(function (rule) {\n            if ('undefined' !== typeof this.constraintsByName[rule]) {\n                requiredRulesFound.push(rule);\n            }\n        }, this);\n\n        // If there's not one required rule, return false\n        if (requiredRulesFound.length == 0)\n            return false;\n\n        // If parsley's on required rule was found\n        if (requiredRulesFound.indexOf('required') >= 0) {\n            // Check if the flag is set to true\n            return false !== this.constraintsByName.required.requirements;\n        }\n\n        return true;\n    }"
        ],
        [
            "function(headers, callback) {\n                    // setup all variables\n                    var xhr = new XMLHttpRequest(),\n                        url = options.url,\n                        type = options.type,\n                        async = options.async || true,\n                        // blob or arraybuffer. Default is blob\n                        dataType = options.responseType || \"blob\",\n                        data = options.data || null,\n                        username = options.username || null,\n                        password = options.password || null;\n\n                    xhr.addEventListener('load', function() {\n                        var data = {};\n                        data[options.dataType] = xhr.response;\n                        // make callback and send data\n                        callback(xhr.status, xhr.statusText, data, xhr.getAllResponseHeaders());\n                    });\n                    xhr.addEventListener('error', function() {\n                        var data = {};\n                        data[options.dataType] = xhr.response;\n                        // make callback and send data\n                        callback(xhr.status, xhr.statusText, data, xhr.getAllResponseHeaders());\n                    });\n\n                    xhr.open(type, url, async, username, password);\n\n                    // setup custom headers\n                    for (var i in headers) {\n                        xhr.setRequestHeader(i, headers[i]);\n                    }\n\n                    xhr.responseType = dataType;\n                    xhr.send(data);\n                }"
        ],
        [
            "function compose (/* [func,] */) {\n        var args = argsToArray(arguments);\n        return function (arg0) {\n            return args.reduceRight(function (value, arg){\n                return arg(value);\n            }, arg0);\n        };\n    }"
        ],
        [
            "function curryN (fn, executeArity) {\n        var curriedArgs = restArgs(arguments, 2);\n        return function () {\n            var args = argsToArray(arguments),\n                concatedArgs = replacePlaceHolders(curriedArgs, args),\n                placeHolders = concatedArgs.filter(isPlaceholder),\n                canBeCalled = (concatedArgs.length - placeHolders.length >= executeArity) || !executeArity;\n            return !canBeCalled ? curryN.apply(null, [fn, executeArity].concat(concatedArgs)) :\n                fn.apply(null, concatedArgs);\n        };\n    }"
        ],
        [
            "function replacePlaceHolders (array, args) {\n        var out = array.map(function (element) {\n            return ! (element instanceof PlaceHolder) ? element :\n                (args.length > 0 ? args.shift() : element);\n        });\n        return args.length > 0 ? out.concat(args) : out;\n    }"
        ],
        [
            "function classOf (value) {\n        var retVal,\n            valueType,\n            toString;\n        if (typeof value === _undefined) {\n            retVal = _Undefined;\n        }\n        else if (value === null) {\n            retVal = _Null;\n        }\n        else {\n            toString = value.toString.name === 'toString' ? Object.prototype.toString : value.toString;\n            valueType = toString.call(value);\n            retVal = valueType.substring(8, valueType.length - 1);\n            if (retVal === _Number && isNaN(value)) {\n                retVal = 'NaN';\n            }\n        }\n        return retVal;\n    }"
        ],
        [
            "function forEach (arrayLike, callback, context) {\n        var classOfArrayLike = sjl.classOf(arrayLike);\n        switch (classOfArrayLike) {\n            case _Array:\n            case 'Set':\n            case 'SjlSet':\n            case 'SjlMap':\n            case 'Map':\n                arrayLike.forEach(callback, context);\n            break;\n            case _Object:\n                forEachInObj(arrayLike, callback, context);\n            break;\n            default:\n                throw new TypeError('sjl.forEach takes only ' +\n                    '`Array`, `Object`, `Map`, `Set`, `SjlSet`, and `SjlMap` objects.  ' +\n                    'Type passed in: `' + classOfArrayLike + '`.');\n        }\n    }"
        ],
        [
            "function classOfIsMulti (value, type /**[,type...] **/) {\n        return (sjl.restArgs(arguments, 1)).some(function (_type) {\n            return classOfIs(value, _type);\n        });\n    }"
        ],
        [
            "function isEmpty(value) {\n        var classOfValue = classOf(value),\n            retVal;\n\n        // If value is an array or a string\n        if (classOfValue === _Array || classOfValue === _String) {\n            retVal = value.length === 0;\n        }\n\n        else if ((classOfValue === _Number && value !== 0) || (classOfValue === _Function)) {\n            retVal = false;\n        }\n\n        else if (classOfValue === _Object) {\n            retVal = isEmptyObj(value);\n        }\n\n        // If value is `0`, `false`, or is not set (!isset) then `value` is empty.\n        else {\n            retVal = !isset(value) || value === 0 || value === false;\n        }\n\n        return retVal;\n    }"
        ],
        [
            "function implode (list, separator) {\n        var retVal = '',\n            prototypeOfList = Object.getPrototypeOf(list);\n        if (isArray(list)) {\n            retVal = list.join(separator);\n        }\n        else if (prototypeOfList.constructor.name === 'Set' || prototypeOfList.constructor.name === 'SjlSet') {\n            retVal = [];\n            list.forEach(function (value) {\n                retVal.push(value);\n            });\n            retVal = retVal.join(separator);\n        }\n        return retVal;\n    }"
        ],
        [
            "function searchObj (ns_string, objToSearch) {\n        var parts = ns_string.split('.'),\n            parent = objToSearch,\n            classOfObj = classOf(objToSearch),\n            i;\n        throwTypeErrorIfNotOfType('sjl.searchObj', 'ns_string', ns_string, String);\n        if (classOfObj !== _Object && objToSearch instanceof Function === false) {\n            throw new TypeError ('sjl.searchObj expects `objToSearch` to be of type object ' +\n                'or an instance of `Function`.  Type received: ' + classOfObj);\n        }\n        for (i = 0; i < parts.length; i += 1) {\n            if (parts[i] in parent === false || isUndefined(parent[parts[i]])) {\n                parent = undefined;\n                break;\n            }\n            parent = parent[parts[i]];\n        }\n        return parent;\n    }"
        ],
        [
            "function extend(o, p, deep) {\n        // If `o` or `p` are not set bail\n        if (!o || !p) {\n            return o;\n        }\n\n        // Merge all props from `p` to `o`\n        Object.keys(p).forEach(function (prop) { // For all props in p.\n            // If property is present on target (o) and is not writable, skip iteration\n            var propDescription = Object.getOwnPropertyDescriptor(o, prop);\n            if (propDescription &&\n                !(isset(propDescription.get) && isset(propDescription.set)) &&\n                !propDescription.writable) {\n                return;\n            }\n            if (deep === true) {\n                if (isObject(p[prop]) && isObject(o[prop]) && !isEmptyObj(p[prop])) {\n                    extend(o[prop], p[prop], deep);\n                }\n                else {\n                    o[prop] = p[prop];\n                }\n            }\n            else {\n                o[prop] = p[prop];\n            }\n        });\n\n        return o;\n    }"
        ],
        [
            "function extendMulti () {\n        var args = argsToArray(arguments),\n            deep = extractBoolFromArrayStart(args),\n            arg0 = args.shift();\n\n        // Extend object `0` with other objects\n        args.forEach(function (arg) {\n            // Extend `arg0` if `arg` is an object\n            if (isObject(arg)) {\n                extend(arg0, arg, deep);\n            }\n        });\n\n        return arg0;\n    }"
        ],
        [
            "function normalizeArgsForDefineSubClass (superClass, constructor, methods, statics) {\n        superClass = superClass || Object.create(Object.prototype);\n\n        // Snatched statics\n        var _statics;\n\n        // Should extract statics?\n        if (isFunction(superClass)) {\n            // Extract statics\n            _statics = Object.keys(superClass).reduce(function (agg, key) {\n                if (key === 'extend' || key === 'extendWith') { return agg; }\n                agg[key] = superClass[key];\n                return agg;\n            }, {});\n        }\n\n        // Re-arrange args if constructor is object\n        if (isObject(constructor)) {\n            statics = methods;\n            methods = clone(constructor);\n            constructor = ! isFunction(methods.constructor) ? standInConstructor(superClass) : methods.constructor;\n            unset(methods, 'constructor');\n        }\n\n        // Ensure constructor\n        constructor = isset(constructor) ? constructor : standInConstructor(superClass);\n\n        // Returned normalized args\n        return {\n            constructor: constructor,\n            methods: methods,\n            statics: extend(_statics || {}, statics || {}, true),\n            superClass: superClass\n        };\n    }"
        ],
        [
            "function makeExtendableConstructor (constructor) {\n        var extender = function (constructor_, methods_, statics_) {\n            return defineSubClass(constructor, constructor_, methods_, statics_);\n        };\n\n        /**\n         * Extends a new copy of self with passed in parameters.\n         * @memberof class:sjl.stdlib.Extendable\n         * @static sjl.stdlib.Extendable.extend\n         * @param constructor {Function|Object} - Required.  Note: if is an object, then other params shift over by 1 (`methods` becomes `statics` and this param becomes `methods`).\n         * @param methods {Object|undefined} - Methods.  Optional.  Note:  If `constructor` param is an object, this gets cast as `statics` param.  Also for overriding\n         * @param statics {Object|undefined} - Static methods.  Optional.  Note:  If `constructor` param is an object, it is not used.\n         */\n        constructor.extend =\n            constructor.extendWith =\n                extender;\n\n        // Return constructor\n        return constructor;\n    }"
        ],
        [
            "function defineSubClassPure (superClass, constructor, methods, statics) {\n        var normalizedArgs = normalizeArgsForDefineSubClass.apply(null, arguments),\n            _superClass = normalizedArgs.superClass,\n            _statics = normalizedArgs.statics,\n            _constructor = normalizedArgs.constructor,\n            _methods = normalizedArgs.methods;\n\n        // Set prototype\n        _constructor.prototype = Object.create(_superClass.prototype);\n\n        // Define constructor\n        Object.defineProperty(_constructor.prototype, 'constructor', {value: _constructor});\n\n        // Extend constructor\n        extend(_constructor.prototype, _methods);\n        extend(_constructor, _statics, true);\n\n        // Return constructor\n        return _constructor;\n    }"
        ],
        [
            "function throwTypeErrorIfEmpty (prefix, paramName, value, type, suffix) {\n        throwTypeErrorIfEmptyOrNotOfType (prefix, paramName, value, type, suffix);\n    }"
        ],
        [
            "function valueOrDefault (value, defaultValue, type) {\n        defaultValue = typeof defaultValue === _undefined ? null : defaultValue;\n        var retVal;\n        if (isset(type)) {\n            retVal = issetAndOfType.apply(null, [value].concat(sjl.restArgs(arguments, 2))) ? value : defaultValue;\n        }\n        else {\n            retVal = isset(value) ? value : defaultValue;\n        }\n        return retVal;\n    }"
        ],
        [
            "function defineEnumProp(obj, key, value) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true\n        });\n    }"
        ],
        [
            "function unConfigurableNamespace(ns_string, objToSearch, valueToSet) {\n        var parent = objToSearch,\n            shouldSetValue = typeof valueToSet !== _undefined,\n            hasOwnProperty;\n\n        ns_string.split('.').forEach(function (key, i, parts) {\n            hasOwnProperty = parent.hasOwnProperty(key);\n            if (i === parts.length - 1\n                && shouldSetValue && !hasOwnProperty) {\n                defineEnumProp(parent, key, valueToSet);\n            }\n            else if (typeof parent[key] === _undefined && !hasOwnProperty) {\n                defineEnumProp(parent, key, {});\n            }\n            parent = parent[key];\n        });\n\n        return parent;\n    }"
        ],
        [
            "function changeCaseOfFirstChar(str, func, thisFuncsName) {\n        var search, char, right, left;\n\n        // If typeof `str` is not of type \"String\" then bail\n        throwTypeErrorIfNotOfType(thisFuncsName, 'str', str, _String);\n\n        // Search for first alpha char\n        search = str.search(/[a-z]/i);\n\n        // If alpha char\n        if (isNumber(search) && search > -1) {\n\n            // Make it lower case\n            char = str.substr(search, 1)[func]();\n\n            // Get string from `char`'s index\n            right = str.substr(search + 1, str.length - 1);\n\n            // Get string upto `char`'s index\n            left = search !== 0 ? str.substr(0, search) : '';\n\n            // Concatenate original string with lower case char in it\n            str = left + char + right;\n        }\n\n        return str;\n    }"
        ],
        [
            "function extractBoolFromArray(array, startOrEndBln) {\n        var extractedValue = extractFromArrayAt(\n            array,\n            startOrEndBln ? 0 : array.length - 1,\n            _Boolean,\n            false\n        )[0];\n        return isBoolean(extractedValue) ? extractedValue : false;\n    }"
        ],
        [
            "function mergeOnPropsMulti (obj1, obj2) {\n        var args = argsToArray(arguments),\n            deep = extractBoolFromArrayStart(args),\n            arg0 = args.shift();\n\n        // Extend object `0` with other objects\n        args.forEach(function (arg) {\n            if (!isObject(arg)) {\n                return;\n            }\n            // Extend `arg0` with `arg`\n            mergeOnProps(arg0, arg, deep);\n        });\n\n        return arg0;\n    }"
        ],
        [
            "function (keyOrNsKey, value) {\n                var self = this;\n                if (sjl.isObject(keyOrNsKey)) {\n                    sjl.extend.apply(sjl, [true, self].concat(sjl.argsToArray(arguments)));\n                }\n                else if (sjl.isString(keyOrNsKey)) {\n                    sjl.autoNamespace(keyOrNsKey, self, value);\n                }\n                else if (sjl.isset(keyOrNsKey)) {\n                    throw new TypeError(contextName + '.set only allows strings or objects as it\\'s first parameter.  ' +\n                        'Param type received: `' + sjl.classOf(keyOrNsKey) + '`.');\n                }\n                return self;\n            }"
        ],
        [
            "function () {\n            var self = this;\n            return self.valid() ? {\n                done: false,\n                value: self._values[self.pointer]\n            } : {\n                done: true\n            };\n        }"
        ],
        [
            "function (callback, context) {\n            var self = this,\n                values = self._values;\n            context = context || self;\n            self._keys.forEach(function (key, index, keys) {\n                callback.call(context, values[index], key, keys);\n            });\n            return this;\n        }"
        ],
        [
            "function (value) {\n            var _index = this._values.indexOf(value);\n            if (_index > -1 && _index <= this._values.length) {\n                this._values.splice(_index, 1);\n            }\n            return this;\n        }"
        ],
        [
            "function (key) {\n                if (this.has(key)) {\n                    var _index = this._keys.indexOf(key);\n                    this._values.splice(_index, 1);\n                    this._keys.splice(_index, 1);\n                }\n                return this;\n            }"
        ],
        [
            "function (key, value) {\n            var index = this._keys.indexOf(key);\n            if (index > -1) {\n                this._keys[index] = key;\n                this._values[index] = value;\n            }\n            else {\n                this._keys.push(key);\n                this._values.push(value);\n            }\n            return this;\n        }"
        ],
        [
            "function (object) {\n            sjl.throwTypeErrorIfNotOfType(SjlMap.name, 'object', object, 'Object',\n                'Only `Object` types allowed.');\n            var self = this,\n                entry,\n                objectIt = new ObjectIterator(object);\n            while (objectIt.valid()) {\n                entry = objectIt.next();\n                self.set(entry.value[0], entry.value[1]);\n            }\n            return self;\n        }"
        ],
        [
            "function () {\n            var self = this,\n                out = {};\n            this._keys.forEach(function (key, i) {\n                out[key] = self._values[i];\n            });\n            return out;\n        }"
        ],
        [
            "function () {\n            var next = Iterator.prototype.next.call(this);\n            if (!next.done && this.wrapItems) {\n                next.value = next.value.value;\n            }\n            return next;\n        }"
        ],
        [
            "function () {\n            return this.sort().wrapItems ?\n                new ObjectIterator(this._keys, this._values.map(function (item) {\n                    return item.value;\n                })) :\n                new SjlMap.prototype.entries.call(this.sort());\n        }"
        ],
        [
            "function (callback, context) {\n            SjlMap.prototype.forEach.call(this.sort(), function (value, key, map) {\n                callback.call(context, this.wrapItems ? value.value : value, key, map);\n            }, this);\n            return this;\n        }"
        ],
        [
            "function () {\n            if (this.wrapItems) {\n                return new Iterator(this.sort()._values.map(function (item) {\n                    return item.value;\n                }));\n            }\n            return new SjlMap.prototype.values.call(this.sort());\n        }"
        ],
        [
            "function (key, value, priority) {\n            SjlMap.prototype.set.call(this, key, this.resolveItemWrapping(key, value, priority));\n            this._sorted = false;\n            return this;\n        }"
        ],
        [
            "function (priority) {\n            var retVal;\n            if (sjl.classOfIs(priority, Number)) {\n                retVal = priority;\n            }\n            else {\n                this._internalPriorities += 1;\n                retVal = +this._internalPriorities;\n            }\n            return retVal;\n        }"
        ],
        [
            "function (key, value, priority) {\n            var normalizedPriority = this.normalizePriority(priority),\n                serial = this._internalSerialNumbers++;\n            if (this.wrapItems) {\n                return new (this.itemWrapperConstructor) (key, value, normalizedPriority, serial);\n            }\n            try {\n                value.key = key;\n                value.priority = priority;\n                value.serial = serial;\n            }\n            catch (e) {\n                throw new TypeError('PriorityList can only work in \"unwrapped\" mode with values/objects' +\n                    ' that can have properties created/set on them.  Type encountered: `' + sjl.classOf(value) + '`;' +\n                    '  Original error: ' + e.message);\n            }\n            return value;\n        }"
        ],
        [
            "function doesSecurityGroupExist (ec2, securityGroupName) {\n  function inspectError (err) {\n    if (err.code === 'InvalidGroup.NotFound') {\n      return false\n    }\n\n    return Bluebird.reject(err)\n  }\n\n  return ec2\n    .describeSecurityGroupsPromised({\n      GroupNames: [ securityGroupName ]\n    })\n    .then(_.constant(true))\n    .error(inspectError)\n}"
        ],
        [
            "function doesAutoScalingGroupExist (autoScaling, asgName) {\n  return autoScaling\n    .describeAutoScalingGroupsPromised({\n      AutoScalingGroupNames: [ asgName ]\n    })\n    .then(function found (data) {\n      return !_.isEmpty(data.AutoScalingGroups)\n    })\n}"
        ],
        [
            "function buildParams (identifier, instanceState) {\n  var params = {}\n\n  if (instanceState) {\n    params.Filters = [\n      {\n        Name: 'instance-state-name',\n        Values: [instanceState]\n      }\n    ]\n  }\n\n  if (isInstanceId(identifier)) {\n    params.InstanceIds = [identifier]\n    return params\n  }\n\n  params.Filters = params.Filters || []\n\n  params.Filters.push({\n    Name: 'tag:Name',\n    Values: [identifier]\n  })\n\n  return params\n}"
        ],
        [
            "function doesInstanceExist (ec2, identifier, instanceState) {\n  var params = buildParams(identifier, instanceState)\n\n  function inspectError (err) {\n    if (err.code === 'InvalidInstanceID.NotFound') {\n      return false\n    }\n\n    return Bluebird.reject(err)\n  }\n\n  return ec2\n    .describeInstancesPromised(params)\n    .then(function checkResult (data) {\n      return !isEmpty(data.Reservations)\n    })\n    .catch(inspectError)\n}"
        ],
        [
            "function EdmundsClient(config) {\n  if (!(this instanceof EdmundsClient)) {\n    return new EdmundsClient(config);\n  }\n\n  var defaultConfig = {};\n  defaultConfig.responseFormat = 'json';\n  defaultConfig.baseUrl = 'https://api.edmunds.com';\n\n  this.config = extend(defaultConfig, config);\n\n  if (!this.config.apiKey) {\n    throw new Error('API key must be provided');\n  }\n}"
        ],
        [
            "function addDefinition(defName) {\n  var definition = definitions[defName];\n  return function(params, done) {\n    if (!done && typeof params === 'function') {\n      done = params;\n      params = {};\n    }\n\n    var url = this.config.baseUrl + definition.url;\n    var xtraParams = {};\n    xtraParams.fmt = this.config.responseFormat;\n    xtraParams.api_key = this.config.apiKey;\n\n    try {\n      Object.keys(definition.params).forEach(function(paramName) {\n        var paramDef = definition.params[paramName];\n        if (!params[paramName]) {\n          if (paramDef.required) {\n            throw new Error('Parameter ' + paramName + ' is required');\n          } else {\n            return;\n          }\n        }\n        if (paramDef.location === 'url') {\n          url = url.replace(new RegExp('{' + paramName + '}', 'g'), params[paramName]);\n        } else if (paramDef.location === 'querystring') {\n          xtraParams[paramName] = params[paramName];\n        }\n      });\n    } catch (e) {\n      return done(e);\n    }\n\n    return request\n      .get(url)\n      .query(xtraParams)\n      .end(function onEnd(err, res) {\n        return done(err, res.body);\n      });\n  };\n}"
        ],
        [
            "function createClient (host, port, concurrent, frequency, duration, gen, iteration) {\n  var auth = defaults.auth\n  var getMessage = defaults.getMessage\n  emitter.emit('start')\n\n  if (typeof gen.authenticate === 'function') {\n    auth = gen.authenticate\n  }\n\n  if (typeof gen.clientIterateMessage === 'function') {\n    getMessage = gen.clientIterateMessage\n  }\n\n  /**\n   * Once auth is complete, this actually initiates the client\n   * @method  postAuth\n   * @async\n   * @private\n   * @param   {object} err Error from auth, if any\n   * @param   {object} cookies Any cookies to pass through to the socket object\n   * @param   {string} user The username used to login\n   * @param   {string} pass The password used to login\n   * @returns {object} undefined\n   */\n  var postAuth = function (err, cookies, user, pass) {\n    ++clientsAttempted\n    if (err) {\n      emitter.emit('error', err)\n      if (clientsAttempted === concurrent && _intervals.length === 0) {\n        emitter.emit('end')\n      }\n      return\n    }\n\n    var socketUrl = gen.getSocketURL(host, port, cookies, user, pass) || host + ':' + port\n    var socket = io(socketUrl, { multiplex: false })\n      .on('connect', function () {\n        emitter.emit('client-connected')\n        if (typeof gen.events.connect === 'function') {\n          gen.events.connect('connect', cookies, user, pass, {}, socket, emitter)\n        }\n\n        Object.keys(gen.events).forEach(function (eventName) {\n          socket.on(eventName, function (data) {\n            gen.events[eventName].call(null, eventName, cookies, user, pass, data, socket, emitter)\n          })\n        })\n\n        var sendMessage = function () {\n          var message = getMessage(cookies, user, pass)\n          if (!Array.isArray(message)) {\n            message = [message]\n          }\n\n          for (var i = 0, len = message.length; i < len; i++) {\n            if (message[i]) {\n              socket.json.send(message[i])\n              emitter.emit('message', message[i])\n            }\n          }\n        }\n\n        _intervals.push(setInterval(sendMessage, frequency))\n\n        setTimeout(function () {\n          clearInterval(_intervals.pop())\n          socket.emit('disconnect')\n          emitter.emit('disconnect')\n          socket.close()\n          if (_intervals.length === 0) {\n            done()\n          }\n        }, duration)\n      })\n      .on('connect_error', function (err) {\n        emitter.emit('error', err)\n        if (clientsAttempted === concurrent && _intervals.length === 0) {\n          emitter.emit('end')\n        }\n      })\n  }\n\n  auth(host, port, iteration, postAuth)\n}"
        ],
        [
            "function(file) {\n    var xml = file.contents;\n    var xmlDoc = libxmljs.parseXml(xml);\n    var rootNode = xmlDoc.root();\n\n    var resourceObject = {};\n    var valueNodes = rootNode.find(\"data\");\n    valueNodes.forEach(function(element) {\n      var name = element.attr(\"name\").value();\n      var value = element.get(\"value\").text();\n      resourceObject[name] = value;\n    });\n\n    return JSON.stringify(resourceObject);\n  }"
        ],
        [
            "function doesLaunchConfigurationExist (autoScaling, launchConfigurationName) {\n  return autoScaling.\n    describeLaunchConfigurationsPromised({\n      LaunchConfigurationNames: [ launchConfigurationName ]\n    })\n    .then(function found (data) {\n      return !_.isEmpty(data.LaunchConfigurations)\n    })\n}"
        ],
        [
            "function KJU(configuration) {\n  var self = this\n    , option;\n\n  // defaults\n  this.limit = 500;\n  this.ms = 100;\n  this.interval = 15000;\n  this.warnings = true;\n  this.enabled = true;\n  this.recover = true;\n  this.dump = true;\n  this.path = process.cwd() + '/';\n  this.name = 'node_kju_backup.{sequence}.kju';\n\n  // apply the configuration\n  for (option in configuration)\n    this[option] = configuration[option];\n\n  // these values should not be configured\n  this.buffer = [];\n  this.length = 0;\n\n  this.drained = 0;\n  this.processed = 0;\n  this.since = Date.now();\n\n  this.minimum = this.interval / 2;\n  this.maximum = this.interval * 2;\n\n  // initialize the event emitter\n  EventEmitter2.call(this, { wildcard: true });\n\n  if (this.recover) this.recovery();\n  if (this.enabled) this.enable();\n\n  // make sure our backup path exists\n  fsExists(this.path, function existing(exists) {\n    if (!exists) {\n      return self.emit('error', new Error(self.path + ' does not exist.'));\n    }\n\n    if (self.path[self.path.length - 1] !== '/') {\n      return self.emit('error', new Error(self.path + ' should end with a slash'));\n    }\n  });\n}"
        ],
        [
            "function filter(err, files) {\n    if (err) return self.emit('error', err);\n\n    var kjud = files.filter(function filterfiles(file) {\n      return (/(\\d)\\.kju$/).test(file);\n    });\n\n    // if we don't have any files we don't really need to emit 'recovered' so\n    // no need to check for the length here. We are only gonna use the length\n    // if there are files.\n    processed = kjud.length;\n    kjud.forEach(read);\n  }"
        ],
        [
            "function read(file, index, files) {\n    fs.readFile(self.path + file, function readFile(err, contents) {\n      if (err) return done(), self.emit('error', err);\n\n      // try to parse the file as JSON, if that doesn't work we have big issue\n      // because the file is damaged.\n      try {\n        var todo = JSON.parse(contents.toString('utf8'));\n\n        // pfew, it worked re-add it to kju and remove the file, I don't really\n        // care about the clean up process. So I'm not gonna handle the errors\n        // that could occur there.\n        self.push.apply(self, todo);\n        fs.unlink(self.path + file, function ignore(err) {});\n      } catch (e) {\n        self.emit('error'\n          , new Error('Corrupted file, unable to parse contents of ' + file)\n        );\n      }\n\n      done();\n    });\n  }"
        ],
        [
            "function () {\n\tvar s4 = function () {\n\t\treturn Math.floor((1 + Math.random()) * 0x10000)\n\t\t.toString(16)\n\t\t.substring(1);\n\t};\n\treturn s4() + s4() + '-' + s4();\n}"
        ],
        [
            "function (raw) {\n\tif (typeof raw !== 'object' || raw === null || util.isArray( raw )) {\n\t\treturn false;\n\t}\n\tif (raw.wiretree) {\n\t\treturn true;\n\t}\n\treturn false;\n}"
        ],
        [
            "function (func) {\n\tvar fnStr = func.toString().replace( /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg, '' );\n\treturn fnStr.slice( fnStr.indexOf( '(' ) + 1, fnStr.indexOf( ')' )).match(/([^\\s,]+)/g) || [];\n}"
        ],
        [
            "function (mod) {\n\t\tself.res = getProcessed( self.processing, mod, self.raw.settings );\n\t\tself.resolved = true;\n\t\tcallback();\n\t}"
        ],
        [
            "function(width, height, camera) {\n\t\tvar id;\n\t\tvar w = width, h = height;\n\n\t\tthis.orientation = 'landscape';\n\n\t\tthis.listeners = {};\n\n\t\tif (typeof width !== 'number') {\n\t\t\tvar image = width;\n\t\t\tcamera = height;\n\t\t\tw = image.videoWidth || image.width;\n\t\t\th = image.videoHeight || image.height;\n\t\t\tthis.image = image;\n\t\t}\n\n\t\tthis.defaultMarkerWidth = 1;\n\t\tthis.patternMarkers = {};\n\t\tthis.barcodeMarkers = {};\n\t\tthis.transform_mat = new Float32Array(16);\n\n\t\tthis.canvas = document.createElement('canvas');\n\t\tthis.canvas.width = w;\n\t\tthis.canvas.height = h;\n\t\tthis.ctx = this.canvas.getContext('2d');\n\n\t\tthis.videoWidth = w;\n\t\tthis.videoHeight = h;\n\n\t\tif (typeof camera === 'string') {\n\n\t\t\tvar self = this;\n\t\t\tthis.cameraParam = new ARCameraParam(camera, function() {\n\t\t\t\tself._initialize();\n\t\t\t}, function(err) {\n\t\t\t\tconsole.error(\"ARController: Failed to load ARCameraParam\", err);\n\t\t\t});\n\n\t\t} else {\n\n\t\t\tthis.cameraParam = camera;\n\t\t\tthis._initialize();\n\n\t\t}\n\t}"
        ],
        [
            "function(src, onload, onerror) {\n\t\tthis.id = -1;\n\t\tthis._src = '';\n\t\tthis.complete = false;\n\t\tthis.onload = onload;\n\t\tthis.onerror = onerror;\n\t\tif (src) {\n\t\t\tthis.load(src);\n\t\t}\n\t}"
        ],
        [
            "function PackageMemberListReadStream(dirToScan) {\n    sjl.throwTypeErrorIfEmpty('PackageMemberListReadStream', 'dirToScan', dirToScan, String);\n    this._pathToRead = dirToScan;\n    Readable.call(this, {\n        encoding: 'utf8',\n        objectMode: false,\n        highWaterMark: 100000,\n    });\n}"
        ],
        [
            "function doesLoadBalancerExist (elb, loadBalancerName) {\n  function inspectError (err) {\n    if (err.code === 'LoadBalancerNotFound') {\n      return false\n    }\n\n    return Bluebird.reject(err)\n  }\n\n  return elb\n    .describeLoadBalancersPromised({\n      LoadBalancerNames: [ loadBalancerName ]\n    })\n    .then(_.constant(true))\n    .error(inspectError)\n}"
        ],
        [
            "function lint(files) {\n    return gulp.src(files)\n        .pipe($.plumber())\n        .pipe($.eslint())\n        .pipe($.eslint.format())\n        .pipe($.eslint.failOnError())\n        .pipe($.jscs())\n        .pipe($.notify(_jscsNotify));\n}"
        ],
        [
            "function _browserifyBundle() {\n    let bundler = browserifyBundler();\n    // Watch the bundler, and re-bundle it whenever files change\n    bundler = watchify(bundler);\n    bundler.on('update', () => _runBrowserifyBundle(bundler));\n\n    return _runBrowserifyBundle(bundler);\n}"
        ],
        [
            "function PauseCommand(args, define) {\n    if (args.length) {\n        this.message = new statements.ExpressionStatement(args, define);\n        if (this.message.error) throw this.message.error;\n    } else this.message = new statements.StringStatement(\"[<< Paused, Press RETURN to Continue >>]\");\n}"
        ],
        [
            "function ValidationErrors(errors) {\n  this.errors = errors ? errors : {};\n\n  this.addError = function(field, message) {\n    if (!this.errors[field]) { this.errors[field] = []; }\n    this.errors[field].push(util.format(message, field));\n  };\n\n  // omit field for full hash of errors\n  this.getErrors = function(field) {\n    if (field) {\n      return this.errors[field];\n    } else {\n      return this.errors;\n    }\n  };\n\n  this.hasErrors = function() {\n    return _.keys(this.errors).length > 0;\n  };\n\n  this.isValidationErrors = function() {\n    return true;\n  };\n}"
        ],
        [
            "function LineCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 4) throw new SyntaxError('LINE command requires 4 arguments');\n    this.x1 = parsed.args[0];\n    this.y1 = parsed.args[1];\n    this.x2 = parsed.args[2];\n    this.y2 = parsed.args[3];\n    this.width = parsed.args.length > 4 ? parsed.args[4] : false;\n}"
        ],
        [
            "function PointCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 2) throw new SyntaxError('POINT command requires 2 arguments');\n    this.x = parsed.args[0];\n    this.y = parsed.args[1];\n    if (parsed.args.length > 2) this.size = parsed.args[2];\n    else this.size = false;\n}"
        ],
        [
            "function getRandom(data) {\n    var x = Math.sin(data.getPrivate('rnd_seed')) * 10000;\n    data.setPrivate('rnd_seed', data.getPrivate('rnd_seed') + 1);\n    return x - Math.floor(x);\n}"
        ],
        [
            "function ForCommand(args, define) {\n    var lowerArgs = args.toLowerCase();\n    var toIndex = lowerArgs.indexOf(' to ');\n    if (toIndex === -1) throw new SyntaxError('FOR has no TO');\n    var assignmentText = args.substring(0, toIndex).trim();\n\n    var stepIndex = lowerArgs.indexOf(' step ');\n    var upperLimitText, stepText;\n    if (stepIndex === -1) {\n        upperLimitText = args.substring(toIndex + 4).trim();\n        stepText = '1';\n    } else {\n        upperLimitText = args.substring(toIndex + 4, stepIndex).trim();\n        stepText = args.substring(stepIndex + 6).trim();\n    }\n\n    var assignmentEquals = assignmentText.indexOf('=');\n    if (assignmentEquals === -1) throw new SyntaxError('Expected assignment');\n    var variableName = assignmentText.substring(0, assignmentEquals).trim();\n    var equalsExpression = assignmentText.substring(assignmentEquals + 1).trim();\n    var assignmentExpr = new statements.AssignmentStatement(\n            new statements.VariableStatement(variableName),\n            new statements.ExpressionStatement(equalsExpression, define)\n    );\n\n    var upperLimitExpr = new statements.ExpressionStatement(upperLimitText, define);\n    if (upperLimitExpr.error) throw upperLimitExpr.error;\n\n    var stepExpr = new statements.ExpressionStatement(stepText, define);\n    if (stepExpr.error) throw stepExpr.error;\n\n    this.assignmentExpr = assignmentExpr;\n    this.upperLimitExpr = upperLimitExpr;\n    this.stepExpr = stepExpr;\n\n    this.block = define({\n        start: 'FOR',\n        end: 'NEXT'\n    });\n\n    this.loopCount = 0;\n}"
        ],
        [
            "function Emitter(opts) {\n  Transform.call(this);\n  this._writableState.objectMode = true;\n  this._readableState.objectMode = true;\n  opts = opts || {};\n  // emit a fixed event name\n  // rather than the default type\n  this.name = opts.name;\n\n  this.passthrough = opts.passthrough;\n}"
        ],
        [
            "function freeMemory (mappedVars /*: Array<SublimeObject>*/, step /*: ?StepObject*/) /*: Promise<any> | void*/ {\n  if (mappedVars.length > 0) {\n    let mappedVarsStringify = []\n    for (let mappedVar /*: Object*/ of mappedVars) {\n      if (mappedVar.hasOwnProperty(\"self\") && mappedVar.self) {\n        delete mappedVar.self.code\n        mappedVarsStringify.push(JSON.stringify(mappedVar.self))\n      }\n    }\n    return simpleEval(`freeMemory(json.loads(\"\"\"[${mappedVarsStringify.join(',')}]\"\"\"))`, false, step)\n  }\n}"
        ],
        [
            "function DrawtextCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 3) throw new SyntaxError('DRAWTEXT command requires 3 arguments');\n    else if (parsed.args.length > 3 && parsed.args.length < 5) throw new SyntaxError('DRAWTEXT command requires 5 arguments');\n\n    this.text = parsed.args[0];\n    this.x1 = parsed.args[1];\n    this.y1 = parsed.args[2];\n    if (parsed.args.length > 3) {\n        this.x2 = parsed.args[3];\n        this.y2 = parsed.args[4];\n    } else {\n        this.x2 = false;\n        this.y2 = false;\n    }\n}"
        ],
        [
            "function writeLockFile(path, data, cb) { // Like fs.writeFile within a lock.\n    lock(path, function (unlock) {\n        fse.writeFile(path, data, function (e, d) { unlock(); cb(e, d); });\n    });\n}"
        ],
        [
            "function callHandlers(cults, e) {\n    var broken = false;\n\n    for (var i = 0; i < cults.length; i++) {\n        var cult = cults[i];\n        var handlers = cult && cult.events && cult.events[e.type];\n\n        if (!handlers) continue;\n\n        var selectors = Object.keys(handlers);\n\n        if (callHandler(cult, e, handlers, selectors) === false) {\n            broken = true;\n            break;\n        }\n    }\n\n    return broken;\n}"
        ],
        [
            "function(def) {\n        var start = Array.isArray(def.start) ? def.start : [def.start];\n        var end = Array.isArray(def.end) ? def.end : [def.end];\n        var then = def.then ? (Array.isArray(def.then) ? def.then : [def.then]) : [];\n\n        var child = new Block(line, {\n            start: start,\n            end: end,\n            then: then\n        }, self);\n        self.children.push(child);\n        return child;\n    }"
        ],
        [
            "function entry(object) {\n  var buffer;\n  switch(object.type) {\n    case 'header':\n      buffer = this.header(object.version);\n      break;\n    case 'database':\n      buffer = this.database(object.number);\n      break;\n    case 'key':\n      buffer = this.key(object);\n      //console.dir(object.type);\n      //console.dir(buffer);\n      break;\n    case 'eof':\n      buffer = this.eof();\n      break;\n  }\n  return buffer;\n}"
        ],
        [
            "function database(n) {\n  var dbid = new Buffer([0xFE])\n    , len = this.getLengthEncoding(n, false);\n  return Buffer.concat([dbid, len], dbid.length + len.length);\n}"
        ],
        [
            "function key(obj, vonly) {\n  var buffer = new Buffer(0)\n    , item;\n  if(obj.expiry !== undefined && !vonly) {\n    buffer = this.expiry(obj.expiry);\n  }\n  item = this[obj.rtype](obj, vonly);\n  return Buffer.concat(\n    [\n      buffer,\n      item\n    ],\n    buffer.length + item.length\n  )\n}"
        ],
        [
            "function expiry(expires) {\n  var buffer\n    , int64;\n  if(expires % 1000 === 0) {\n    buffer = new Buffer(5);\n    buffer.writeUInt8(0xFD, 0);\n    buffer.writeInt32LE(expires / 1000, 1);\n  }else{\n    buffer = new Buffer(9);\n    int64 = new Int64(expires);\n    buffer.writeUInt8(0xFC, 0);\n    buffer.writeUInt32LE(int64.low32(), 1);\n    buffer.writeUInt32LE(int64.high32(), 5);\n  }\n  return buffer;\n}"
        ],
        [
            "function string(obj, vonly) {\n  var vtype = this.type(0)\n    , key = !vonly ? this.getStringBuffer(obj.key) : new Buffer(0)\n    , value = this.getStringBuffer(obj.value);\n  return Buffer.concat(\n    [\n      vtype,\n      key,\n      value\n    ],\n    vtype.length + key.length + value.length\n  )\n}"
        ],
        [
            "function list(obj, vonly) {\n  var vtype = this.type(1)\n    , key = !vonly ? this.getStringBuffer(obj.key) : new Buffer(0)\n    , len = this.getLengthEncoding(obj.value.length, false)\n    , value = this.array(obj.value);\n  return Buffer.concat(\n    [\n      vtype,\n      key,\n      len,\n      value\n    ],\n    vtype.length + key.length + len.length + value.length\n  )\n}"
        ],
        [
            "function zset(obj, vonly) {\n  var vtype = this.type(3)\n    , key = !vonly ? this.getStringBuffer(obj.key) : new Buffer(0)\n    , length = obj.length !== undefined\n        ? obj.length : Object.keys(obj.value).length\n    , len = this.getLengthEncoding(length, false)\n    , value = this.object(obj.value);\n  return Buffer.concat(\n    [\n      vtype,\n      key,\n      len,\n      value\n    ],\n    vtype.length + key.length + len.length + value.length\n  )\n}"
        ],
        [
            "function array(arr) {\n  var buffers = []\n    , buf\n    , i\n    , len = 0;\n  for(i = 0; i < arr.length; i++) {\n    buf = this.getStringBuffer(arr[i]);\n    len += buf.length;\n    buffers.push(buf);\n  }\n  return Buffer.concat(buffers, len);\n}"
        ],
        [
            "function object(obj) {\n  var buffers = []\n    , buf\n    , k\n    , v\n    , len = 0;\n  for(k in obj) {\n    buf = this.getStringBuffer(k);\n    len += buf.length;\n    buffers.push(buf);\n\n    buf = this.getStringBuffer(obj[k]);\n    len += buf.length;\n    buffers.push(buf);\n  }\n  return Buffer.concat(buffers, len);\n}"
        ],
        [
            "function getStringBuffer(s) {\n  var buffer\n    , n = typeof s === 'number' ? s : null\n    // compressed header buffer\n    , cheader\n    , compressed;\n\n  // Does it look like a number?\n  if(n !== null\n    || typeof s === 'string' && s.match(/^-?\\d+$/)) {\n    if(n === null) {\n      n = parseInt(s);\n    }\n    if (n >= -128 && n <= 127) {\n      buffer = new Buffer(1);\n      buffer.writeInt8(n, 0);\n      buffer = this.length(buffer, 0, true);\n      return buffer;\n    } else if (n >= -32768 && n <= 32767) {\n      buffer = new Buffer(2);\n      buffer.writeInt16LE(n, 0);\n      buffer = this.length(buffer, 1, true);\n      return buffer;\n    } else if (n >= -2147483648 && n <= 2147483647) {\n      buffer = new Buffer(4);\n      buffer.writeInt32LE(n, 0);\n      buffer = this.length(buffer, 2, true);\n      return buffer;\n    }\n  }\n\n  // It doesn't look like a number, or it's too big\n  if(typeof s === 'string') {\n    buffer = new Buffer(s, this.encoding);\n  }else if(s instanceof Buffer){\n    buffer = s;\n  }\n\n  if(buffer.length > this.compressionThreshold) {\n    compressed = lzf.compress(buffer);\n    if (compressed.length < buffer.length) {\n      // It saved some space\n      cheader = Buffer.concat(\n        [\n          this.getLengthEncoding(3, true),\n          this.getLengthEncoding(compressed.length, false),\n          this.getLengthEncoding(buffer.length, false)\n        ]);\n      return Buffer.concat(\n        [cheader, compressed], cheader.length + compressed.length);\n    }\n  }\n\n  buffer = this.length(buffer, buffer.length, false);\n  return buffer;\n}"
        ],
        [
            "function length(buffer, n, special) {\n  var len = this.getLengthEncoding(n, special);\n  return Buffer.concat([len, buffer], len.length + buffer.length);\n}"
        ],
        [
            "function getLengthEncoding(n, special) {\n  if(n < 0) throw new Error('Cannot write negative length encoding: ' + n);\n  if(!special) {\n    if(n <= 0x3F) {\n      return new Buffer([n]);\n    }else if (n <= 0x3FFF) {\n      return new Buffer([0x40 | (n >> 8), n & 0xFF]);\n    }else if (n <= 0xFFFFFFFF) {\n      var buffer = new Buffer(5);\n      buffer.writeUInt8(0x80, 0);\n      buffer.writeUInt32BE(n, 1);\n      return buffer;\n    }\n    throw new Error('Failed to write length encoding: ' + n);\n  }else{\n    if (n > 0x3F) {\n      throw new Error('Cannot encode ' + n + ' using special length encoding');\n    }\n    return new Buffer([0xC0 | n]);\n  }\n}"
        ],
        [
            "function TextfontCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length > 2) {\n        this.family = parsed.args[0];\n        this.style = parsed.args[1];\n        this.size = parsed.args[2];\n    } else if (parsed.args.length > 1) {\n        this.familyOrStyle = parsed.args[0];\n        this.size = parsed.args[1];\n    } else if (parsed.args.length > 0) {\n        var arg = parsed.args[0];\n        if (arg.child.type === 'string' || arg.child instanceof statements.StringStatement) this.familyOrStyle = arg;\n        else this.size = arg;\n    } else {\n        this.reset = true;\n    }\n}"
        ],
        [
            "function MerchantCalculations (objGoogleCheckout) {\n\tvar self = this;\n\t\n\t//todo: check the constructor name\n\tassert.ok(objGoogleCheckout, \"A GoogleCheckout object is the only required argument\");\n\t\n\tself.gc = objGoogleCheckout;\n\tself.settings = self.gc.settings;\n}"
        ],
        [
            "function replace(value, configData) {\n    if (typeof value != \"string\") {\n        return value;\n    } else {\n        return value.replace(propStringTmplRe, function(match, path) {\n            var value = get(configData, path);\n            if (!(value instanceof Error)) {\n                return value;\n            } else {\n                return match;\n            }\n        });\n    }\n}"
        ],
        [
            "function get(object, path) {\n    if (memoGet[path]) {\n        return new Error(\"circular reference for \" + path);\n    }\n    var parts = path.split(\".\");\n    var obj = object;\n\n    while (typeof obj === \"object\" && obj && parts.length) {\n        var part = parts.shift();\n        if (!(part in obj)) {\n            return new Error(\"invalid path\");\n        }\n        obj = obj[part];\n    }\n    memoGet[path] = true;\n    // The replace can cause a circular reference\n    var value = replace(obj, object);\n    delete memoGet[path];\n    return value;\n}"
        ],
        [
            "function checkBug() {\n    // Check if it works on newly created node (fails in IE 9)\n    var a = document.createElement('div');\n    if (method.call(a, 'div')) {\n        return false;\n    }\n\n    // Check if it works when node is appended to another node (works in IE 9)\n    var b = document.createElement('div');\n    a.appendChild(b);\n    return method.call(b, 'div');\n}"
        ],
        [
            "function workaround() {\n    var node = document.createElement('div');\n\n    function matches(element, selector) {\n        if (method.call(element, selector)) {\n            return true;\n        } else if (!element.parentNode) {\n            // If node is not attached, temporarily attach to node\n            node.appendChild(element);\n            var result = method.call(element, selector);\n            node.removeChild(element);\n            return result;\n        } else {\n            return false;\n        }\n    }\n\n    return matches;\n}"
        ],
        [
            "function allow(action, req, res, cb) {\n\t\t// call the allow method in our options if it exists\n\t\t// or we will just assume it is always allowed\n\t\tif (options.allow) {\n\t\t\treturn options.allow.apply(this, arguments);\n\t\t}\n\n\t\treturn cb && cb(null, true);\n\t}"
        ],
        [
            "function clean(action, result, req, res, cb) {\n\t\t// call the clean method in our options if it exists\n\t\t// or we will just assume it is always clean\n\t\tif (options.clean) {\n\t\t\treturn options.clean.apply(this, arguments);\n\t\t}\n\t\treturn cb && cb();\n\t}"
        ],
        [
            "function find(action, req, res, cb) {\n\t\tvar result = {};\n\t\t// TODO: run our query\n\n\t\t// clean our result\n\t\tclean(action, result, req, res, function(err) {\n\t\t\tif (err) {\n\t\t\t\treturn cb(err);\n\t\t\t}\n\n\t\t\t// see if there is a method in our options that we need\n\t\t\t// to run once we have found our results\n\t\t\tif (options.found) {\n\t\t\t\toptions.found(result, req, res, cb);\n\t\t\t} else {\n\t\t\t\tcb && cb(null, result);\n\t\t\t}\n\t\t});\n\t}"
        ],
        [
            "function dispatch(ctx) {\n\n        if (_curCtx) {\n            var ret = _curCtx.route.exit({\n                path: _curCtx.path,\n                params: _curCtx.params\n            }, true);\n            if (!ret) {\n                return;\n            }\n        }\n\n        _prevCtx = _curCtx;\n        _curCtx = ctx;\n        if (!_curCtx.route) {\n            var m = map(_curCtx.path);\n            _curCtx.route = m.route;\n            _curCtx.params = m.params;\n        }\n\n        var r = _curCtx.route.enter({\n            force: _curCtx.force,\n            path: _curCtx.path,\n            params: _curCtx.params\n        },true);\n\n        langx.Deferred.when(r).then(function() {\n            _hub.trigger(createEvent(\"routing\", {\n                current: _curCtx,\n                previous: _prevCtx\n            }));\n\n            _curCtx.route.enter({\n                path: _curCtx.path,\n                params: _curCtx.params\n            },false);\n\n            if (_prevCtx) {\n                _prevCtx.route.exit({\n                    path: _prevCtx.path,\n                    params: _prevCtx.params\n                }, false);\n            }\n\n            _hub.trigger(createEvent(\"routed\", {\n                current: _curCtx,\n                previous: _prevCtx\n            }));\n        });\n    }"
        ],
        [
            "function start() {\n        if (router.useHashbang == null && router.useHistoryApi == null) {\n            if (window.location.host  && window.history.pushState) {\n                //web access\n                router.useHistoryApi = true;\n            } else {\n                // local access\n                router.useHashbang = true;\n            }\n        }\n\n        var initPath = \"\";\n\n        if (router.useHistoryApi) {\n            initPath = window.location.pathname;\n            if (_baseUrl === undefined) {\n                _baseUrl = initPath.replace(/\\/$/, \"\");\n            }\n            initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\n        } else if (router.useHashbang) {\n            initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\n        } else {\n            initPath = \"/\";\n        }\n\n        if (!initPath.startsWith(\"/\")) {\n            initPath = \"/\" + initPath;\n        }\n        /*\n        eventer.on(document.body, \"click\", \"a[href]\", function(e) {\n            var elm = e.currentTarget,\n                url = elm.getAttribute(\"href\");\n\n            if (url == \"#\") {\n                return;\n            }\n            if (url && langx.isSameOrigin(elm.href)) {\n                if (url.indexOf(_baseUrl) === 0) {\n                    url = url.substr(_baseUrl.length);\n                    eventer.stop(e);\n                    url = url.replace('#!', '');\n                    go(url);\n                }\n            }\n        });\n        */\n        if (router.useHistoryApi) {\n            window.addEventListener(\"popstate\", function(e) {\n                if(e.state) dispatch(e.state);\n                e.preventDefault();\n            });\n        } else if (router.useHashbang) {\n            window.addEventListener(\"hashchange\", function(e) {\n                dispatch({\n                    path: window.location.hash.replace(/^#!/, \"\")\n                });\n                e.preventDefault();\n            });\n        }\n\n        go(initPath);\n    }"
        ],
        [
            "function() {\n            var curCtx = router.current(),\n                prevCtx = router.previous();\n            var content = curCtx.route.render(curCtx);\n            if (content===undefined || content===null) {\n                return;\n            }\n            if (langx.isString(content)) {\n                this._rvc.innerHTML = content;\n            } else {\n                this._rvc.innerHTML = \"\";\n                this._rvc.appendChild(content);\n            }\n            curCtx.route.trigger(createEvent(\"rendered\", {\n                route: curCtx.route,\n                content: content\n            }));\n        }"
        ],
        [
            "function(key) {\n        var value;\n        if (key.indexOf('.') == -1) {\n            value = this.configObj[key];\n        } else {\n            var keyArray = key.split('.');\n            var keyStr = keyArray[0];\n            value = this.configObj[keyStr];\n            for(var i= 1,len=keyArray.length;i<len;i++) {\n                if (!value && i < len-1) {\n                    exitProcess('the var ['+keyStr + '] is empty.', this.alarm);\n                    return undefined;\n                }\n                var keyNow = keyArray[i];\n                keyStr += '.'+keyNow;\n                value = value[keyNow];\n            }\n        }\n        slogger.debug('load var ['+key+'],value:',value);\n        return value;\n    }"
        ],
        [
            "function(key) {\n        var value = this.loadVar(key);\n        if (typeof(value) =='undefined') {\n            exitProcess('the value of ' + key + ' is necessary , but now is undefined', this.alarm);\n            return false;\n        }\n        return value;\n    }"
        ],
        [
            "function(key) {\n        var str = this.loadVar(key);\n        if (typeof (str) != 'string') {\n            exitProcess('the value of ' + key + ' is a necessary string, but get ' + str, this.alarm);\n            return false;\n        }\n        return str;\n    }"
        ],
        [
            "function(key) {\n        var num = parseInt(this.loadVar(key));\n        if (isNaN(num)) {\n            exitProcess('the value of ' +key+' is a necessary int ,but get ' + num, this.alarm);\n            return false;\n        }\n        return num;\n    }"
        ],
        [
            "function(key) {\n        var obj = this.loadVar(key);\n        if (!obj || typeof (obj) != 'object') {\n            exitProcess('the value of ' +key+' is a necessary object ,but get '+ obj, this.alarm);\n            return false;\n        }\n        return obj;\n    }"
        ],
        [
            "function(key,onlyCheckDirectory) {\n        var filePath = this.loadVar(key);\n        if (!filePath) {\n            exitProcess('empty file path for ' + key, this.alarm);\n            return false;\n        }\n        if (!onlyCheckDirectory) {\n            if (!fs.existsSync(filePath)) {\n                exitProcess('the value of ' +key+' is a necessary file ,but not exists in '+ filePath, this.alarm);\n                return false;\n            }\n        } else {\n            var dirname = path.dirname(filePath);\n            if (!fs.lstatSync(dirname).isDirectory()) {\n                exitProcess('the path '+dirname + ' must exist and be a directory', this.alarm);\n                return false;\n            }\n        }\n\n        return filePath;\n    }"
        ],
        [
            "function(key,endWithSeparator) {\n        var filepath = this.loadNecessaryFile(key);\n        if (!filepath) {\n            exitProcess('empty directory for ' + key, this.alarm);\n            return false;\n        }\n        if (!fs.lstatSync(filepath).isDirectory()) {\n            exitProcess('the path '+filepath + ' must be a directory', this.alarm);\n            return false;\n        }\n        if (endWithSeparator && !filepath.endWith(path.sep)) {\n            exitProcess('the path '+filepath + ' must be end with a separator', this.alarm);\n            return false;\n        }\n        return filepath;\n    }"
        ],
        [
            "function(key,endWithSeparator) {\n        var url = this.loadNecessaryString(key);\n        if (!url) {\n            exitProcess('empty url for ' + key, this.alarm);\n            return false;\n        }\n        if (!url.startWith('http://') && !url.startWith('https://')) {\n            exitProcess('invalid url:' + url, this.alarm);\n            return false;\n        }\n        if (endWithSeparator && !url.endWith('/')) {\n            exitProcess('the url['+url+'] must be end with /', this.alarm);\n            return false;\n        }\n        if (!endWithSeparator && url.endWith('/')) {\n            exitProcess('the url['+url+'] must not be end with /', this.alarm);\n            return false;\n        }\n        return url;\n    }"
        ],
        [
            "function VariableStatement(name) {\n    var bracketIndex = name.indexOf('(');\n    if (bracketIndex !== -1) {\n        var endBracketIndex = name.indexOf(')');\n        if (endBracketIndex === -1) throw new SyntaxError('Expected end bracket');\n\n        var arrayName = name.substring(0, bracketIndex);\n        var arrayDimensionsText = name.substring(bracketIndex + 1, endBracketIndex).trim();\n        var arrayDimensions = new statements.ArgumentStatement(arrayDimensionsText);\n\n        name = arrayName;\n        this.isArray = true;\n        this.dimensions = arrayDimensions.args;\n    } else this.isArray = false;\n\n    if (name[name.length - 1] === '$') {\n        this.type = 'string';\n        this.name = name.substring(0, name.length - 1);\n    } else {\n        this.type = 'number';\n        this.name = name;\n    }\n}"
        ],
        [
            "function() {\n    var versions = [\"Msxml2.XMLHTTP\",\n                    \"Msxml3.XMLHTTP\",\n                    \"Microsoft.XMLHTTP\",\n                    \"MSXML2.XmlHttp.6.0\",\n                    \"MSXML2.XmlHttp.5.0\",\n                    \"MSXML2.XmlHttp.4.0\",\n                    \"MSXML2.XmlHttp.3.0\",\n                    \"MSXML2.XmlHttp.2.0\"\n    ]\n\n    if(XMLHttpRequest !== undefined) {  // For non-IE browsers\n        createXMLHTTPObject = function() {  // Use memoization to cache the factory\n            return new XMLHttpRequest()\n        }\n        return createXMLHTTPObject()\n\n    } else { // IE\n        for(var i=0, n=versions.length; i<n; i++) {\n            try {\n                var version = versions[i]\n                var fn = function() {\n                    return new ActiveXObject(version)\n                }\n                createXMLHTTPObject = fn   // Use memoization to cache the factory\n                return createXMLHTTPObject()\n\n            } catch(e) {   }\n        }\n    }\n\n    throw new Error('Cant get XmlHttpRequest object')\n}"
        ],
        [
            "function isLikeAFuture(x) {\n    return x.isResolved !== undefined && x.queue !== undefined && x.then !== undefined\n}"
        ],
        [
            "function(e) {\n\t        var stack = (e.stack + '\\n').replace(/^\\S[^\\(]+?[\\n$]/gm, '').\n\t          replace(/^\\s+(at eval )?at\\s+/gm, '').\n\t          replace(/^([^\\(]+?)([\\n$])/gm, '{anonymous}()@$1$2').\n\t          replace(/^Object.<anonymous>\\s*\\(([^\\)]+)\\)/gm, '{anonymous}()@$1').split('\\n');\n\t        stack.pop();\n\t        return stack;\n\t    }"
        ],
        [
            "function(e) {\n\t        var lineRE = /^.*at (\\w+) \\(([^\\)]+)\\)$/gm;\n\t        return e.stack.replace(/at Anonymous function /gm, '{anonymous}()@')\n\t            .replace(/^(?=\\w+Error\\:).*$\\n/m, '')\n\t            .replace(lineRE, '$1@$2')\n\t            .split('\\n');\n\t    }"
        ],
        [
            "function(e) {\n\t        // \"  Line 43 of linked script file://localhost/G:/js/stacktrace.js\\n\"\n\t        // \"  Line 7 of inline#1 script in file://localhost/G:/js/test/functional/testcase1.html\\n\"\n\t        var ANON = '{anonymous}', lineRE = /Line (\\d+).*script (?:in )?(\\S+)/i;\n\t        var lines = e.message.split('\\n'), result = [];\n\n\t        for (var i = 2, len = lines.length; i < len; i += 2) {\n\t            var match = lineRE.exec(lines[i]);\n\t            if (match) {\n\t                result.push(ANON + '()@' + match[2] + ':' + match[1] + ' -- ' + lines[i + 1].replace(/^\\s+/, ''));\n\t            }\n\t        }\n\n\t        return result;\n\t    }"
        ],
        [
            "function(url) {\n\t        // TODO reuse source from script tags?\n\t        if (!(url in this.sourceCache)) {\n\t            this.sourceCache[url] = this.ajax(url).split('\\n');\n\t        }\n\t        return this.sourceCache[url];\n\t    }"
        ],
        [
            "function recordAndTriggerHandlers(type, eventData) {\n            this.history.push({type:type, data: eventData})\n            this.handlers[type].forEach(function(handlerInfo) {\n                try {\n                    handlerInfo.handler.call(undefined, eventData)\n                } catch(e) {\n\n                    // throw error asynchronously because these error should be separate from the test exceptions\n                    var throwErrorFn = options.throwAsyncException\n\n                    if(handlerInfo.domain) {\n                        throwErrorFn = handlerInfo.domain.bind(throwErrorFn)    // this domain bind is needed because emit is done inside deadunit's test domain, which isn't where we want to put errors caused by the event handlers\n                    }\n\n                    throwErrorFn(e)\n                }\n            })\n        }"
        ],
        [
            "function(name, mainTester, parentTester) {\n        if(!mainTester) mainTester = this\n\n        this.id = groupid()\n        this.mainTester = mainTester // the mainTester is used to easily figure out if the test results have been accessed (so early accesses can be detected)\n        this.parentTester = parentTester // used to reset timeouts\n        this.name = name\n\n        this.doneTests = 0\n        this.doneAsserts = 0\n        this.runningTests = 0 // the number of subtests created synchronously\n        this.doneCalled = false\n        this.doSourcemappery = true // whether to do source mapping, if possible, within this test\n\n        this.complete = new Future // resolved when done\n    }"
        ],
        [
            "function remove(array, item) {\n        console.log(\"attempting to remove \"+item)\n        var index = array.indexOf(item)\n        if(index !== -1)\n            array.splice(index, 1) // no longer throwing Error(\"Item doesn't exist to remove\") if there's nothing to remove - in the case that mainTester.timeouts gets set back to [] (when done), it won't be there\n\n    }"
        ],
        [
            "function assert(that, success, actualValue, expectedValue, type, functionName/*=\"ok\"*/, lineInfo/*=dynamic*/, stackIncrease/*=0*/) {\n        if(!stackIncrease) stackIncrease = 1\n        if(!functionName) functionName = \"ok\"\n        if(!lineInfo)\n            var lineInfoFuture = getLineInformation(functionName, stackIncrease, that.doSourcemappery, that.warningHandler)\n        else\n            var lineInfoFuture = Future(lineInfo)\n\n        // reste timeouts up the chain\n        var cur = that\n        while(cur !== undefined) {\n            setTesterTimeout(cur)\n            cur = cur.parentTester\n        }\n\n        var emitData = lineInfoFuture.then(function(lineInfo) {\n            var result = lineInfo\n            result.type = 'assert'\n            if(type !=='count') result.success = success === true\n\n            if(actualValue !== undefined)     result.actual = actualValue\n            if(expectedValue !== undefined)   result.expected = expectedValue\n\n            result.parent = that.id\n            result.time = now()\n\n           return Future(result)\n        })\n\n        return that.manager.emit(type, emitData)\n    }"
        ],
        [
            "function getMappedSourceInfo(sourceMapConsumer, originalFilePath, originalLine, originalColumn, originalFunctionName) {\n        var sourceMapInfo = sourceMapConsumer.originalPositionFor({line:originalLine, column:originalColumn||0})       // the 0 is for browsers (like firefox) that don't output column numbers\n        var line = sourceMapInfo.line\n        var column = sourceMapInfo.column\n        var fn = sourceMapInfo.name\n\n        if(sourceMapInfo.source !== null) {\n            var relative = isRelative(sourceMapInfo.source)\n\n            /* I don't think this is needed any longer, and probably isn't correct - this was working around an issue in webpack: See https://github.com/webpack/webpack/issues/559 and https://github.com/webpack/webpack/issues/238\n            if(sourceMapConsumer.sourceRoot !== null) {\n                sourceMapInfo.source = sourceMapInfo.source.replace(sourceMapConsumer.sourceRoot, '') // remove sourceRoot\n            }*/\n\n            if(relative) {\n                var file = Url.resolve(originalFilePath, path.basename(sourceMapInfo.source))\n            } else {\n                var file = sourceMapInfo.source\n            }\n\n\n            var originalFile = true\n        } else {\n            var file = originalFilePath\n            var originalFile = false\n        }\n\n        if(fn === null || !originalFile) {\n            fn = originalFunctionName\n        }\n        if(line === null || !originalFile) {\n            line = originalLine\n            column = originalColumn\n        }\n        if(column === null) {\n            column = undefined\n        }\n\n        if(file != undefined && sourceMapConsumer.sourcesContent != undefined) { // intentional single !=\n            var index = sourceMapConsumer.sources.indexOf(file)\n            var sourceLines = sourceMapConsumer.sourcesContent[index]\n            if(sourceLines !== undefined) sourceLines = sourceLines.split('\\n')\n        }\n\n        return {\n            file: file,\n            function: fn,\n            line: line,\n            column: column,\n            usingOriginalFile: originalFile,\n            sourceLines: sourceLines\n        }\n    }"
        ],
        [
            "function getFunctionCallLines(sourcesContent, filePath, functionName, lineNumber, multiLineSearch, warningHandler) {\n        if(sourcesContent !==  undefined) {\n            var source = Future(sourcesContent)\n        } else {\n            var source = options.getScriptSourceLines(filePath)\n        }\n        return source.catch(function(e) {\n            warningHandler(e)\n            return Future(undefined)\n\n        }).then(function(fileLines) {\n            if(fileLines !== undefined) {\n\n                var startLine = findStartLine(fileLines, functionName, lineNumber)\n                if(startLine === 'lineOfCodeNotFound') {\n                    return Future(\"<line of code not found (possibly an error?)> \")\n\n                } else if(startLine !== 'sourceNotAvailable') {\n                    if(multiLineSearch) {\n                        return Future(findFullSourceLine(fileLines, startLine))\n                    } else {\n                        return Future(fileLines[startLine].trim())\n                    }\n                }\n            }\n            // else\n            return Future(\"<source not available>\")\n\n        })\n    }"
        ],
        [
            "function mapException(exception, warningHandler) {\n        try {\n            if(exception instanceof Error) {\n                var stacktrace;\n                return options.getExceptionInfo(exception).then(function(trace){\n                    stacktrace = trace\n\n                    var smcFutures = []\n                    for(var n=0; n<trace.length; n++) {\n                        if(trace[n].file !== undefined) {\n                            smcFutures.push(getSourceMapConsumer(trace[n].file, warningHandler))\n                        } else {\n                            smcFutures.push(Future(undefined))\n                        }\n                    }\n\n                    return Future.all(smcFutures)\n                }).then(function(sourceMapConsumers) {\n                    var CustomMappedException = proto(MappedException, function() {\n                        // set the name so it looks like the original exception when printed\n                        // this subclasses MappedException so that name won't be an own-property\n                        this.name = exception.name\n                    })\n\n                    try {\n                        throw CustomMappedException(exception, stacktrace, sourceMapConsumers)  // IE doesn't give exceptions stack traces unless they're actually thrown\n                    } catch(mappedExcetion) {\n                        return Future(mappedExcetion)\n                    }\n                })\n            } else {\n                return Future(exception)\n            }\n        } catch(e) {\n            var errorFuture = new Future\n            errorFuture.throw(e)\n            return errorFuture\n        }\n    }"
        ],
        [
            "function YearMonthForm({ date, localeUtils, onChange, fromMonth, toMonth }) {\n    const months = localeUtils.getMonths();\n\n    const years = [];\n    for (let i = fromMonth.getFullYear(); i <= toMonth.getFullYear(); i += 1) {\n        years.push(i);\n    }\n\n    const handleChange = function handleChange(e) {\n        const { year, month } = e.target.form;\n        onChange(new Date(year.value, month.value));\n    };\n\n    return (\n        <form className=\"DayPicker-Caption\">\n            <select name=\"month\" onChange={handleChange} value={date.getMonth()}>\n                {months.map((month, i) => <option key={i} value={i}>{month}</option>)}\n            </select>\n            <select name=\"year\" onChange={handleChange} value={date.getFullYear()}>\n                {years.map((year, i) =>\n                    <option key={i} value={year}>\n                        {year}\n                    </option>\n                )}\n            </select>\n        </form>\n    );\n}"
        ],
        [
            "function Floodgate (opts) {\n  if (!(this instanceof Floodgate)) return new Floodgate(opts);\n\n  opts = opts || {};\n  Transform.call(this, opts);\n  this._interval = opts.interval || 0;\n}"
        ],
        [
            "function remove(obj, path, i) {\n\ti = i || 0\n\n\tvar key = path[i],\n\t\tlast = i === path.length - 1\n\n\tif (!obj || typeof obj !== 'object') {\n\t\tthrow new Error('Can\\'t remove key ' + key + ' from non-object')\n\t}\n\n\tif (Array.isArray(obj)) {\n\t\tif (typeof key !== 'number') {\n\t\t\tobj.forEach(function (each) {\n\t\t\t\tremove(each, path, i)\n\t\t\t})\n\t\t} else if (key >= 0 && key < obj.length) {\n\t\t\tif (last) {\n\t\t\t\tobj.splice(key, 1)\n\t\t\t} else {\n\t\t\t\tremove(obj[key], path, i + 1)\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Can\\'t remove index ' + key + ' from an array with ' + obj.length + ' elements')\n\t\t}\n\t} else {\n\t\tif (typeof key !== 'string') {\n\t\t\tthrow new Error('Can\\'t remove the numeric key ' + key + ' from an object')\n\t\t} else if (key in obj) {\n\t\t\tif (last) {\n\t\t\t\tdelete obj[key]\n\t\t\t} else {\n\t\t\t\tremove(obj[key], path, i + 1)\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Can\\'t remove key ' + key + ' from the object')\n\t\t}\n\t}\n}"
        ],
        [
            "function(uuid_or_name, cb) {\n        if (_.isObject(uuid_or_name)) { return cb(new Error('parameter must be a uuid or name')); }\n        var self = this;\n        client.getEntity({ type: self._usergrid.type, uuid: uuid_or_name }, translateSDKCallback(function (err, entity) {\n          if (err) { return cb(err); }\n          cb(null, wrap(self, entity));\n        }));\n      }"
        ],
        [
            "function(criteria, limit, cb) {\n        if (_.isFunction(limit)) { cb = limit; limit = undefined; }\n        var self = this;\n        var query = buildQuery(criteria, limit);\n        client.createCollection(options(self, query), translateSDKCallback(function (err, collection) {\n          if (err) { return cb(err); }\n          cb(null, wrapCollection(self, collection));\n        }));\n      }"
        ],
        [
            "function(criteria, cb) {\n        var self = this;\n        this.first(criteria, function(err, entity) {\n          if (err) { return cb(err); }\n          if (entity) {\n            cb(null, entity);\n          } else {\n            self.create(criteria, cb);\n          }\n        });\n      }"
        ],
        [
            "function options(Class, hash) {\n  var opts;\n  var type = { type: Class._usergrid.type };\n  if (hash) {\n    opts = _.assign({}, hash, type);\n  } else {\n    opts = type;\n  }\n  return opts;\n}"
        ],
        [
            "function define(Class, constructor, type) {\n  if (!client) { throw new Error('Usergrid not configured'); }\n  if (typeof Class === 'function') {\n    type = constructor;\n    constructor = Class;\n    Class = {};\n  }\n  Class._usergrid = {\n    constructor: constructor,\n    type: (type) ? type : constructor.name.toLowerCase()\n  };\n  _.mixin(Class, usergridStatics(client));\n  return Class;\n}"
        ],
        [
            "function SavespriteCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 2) throw new SyntaxError('SAVESPRITE command requires 2 arguments');\n\n    this.id = parsed.args[0];\n    this.fileName = parsed.args[1];\n}"
        ],
        [
            "function defer(func) {\r\n    return new (class {\r\n        constructor(generator) {\r\n            this.generator = generator;\r\n        }\r\n        [Symbol.iterator]() {\r\n            return this.generator()[Symbol.iterator]();\r\n        }\r\n    })(func);\r\n}"
        ],
        [
            "function forward(event, source, target) {\n    source.on(event, target.emit.bind(target, event));\n}"
        ],
        [
            "function (state, scope, secondaryScope) {\n        if(!validators.isBlockStart(state)) return state.error(constants.unexpectedToken);\n        state.next(); //Skip block start.\n\n        utils.statementsInBlock(state, scope, secondaryScope);\n\n        if(!validators.isBlockEnd(state)) return state.error(constants.unexpectedToken);\n        state.next(); //Skip block end.\n    }"
        ],
        [
            "function(state, scope, secondaryScope) {\n        state.createLexicalEnvironment();\n\n        state.levelDown(scope);\n        if(secondaryScope) state.levelDown(secondaryScope);\n\n        while(state.token && !validators.isBlockEnd(state)) {\n            state.processor.token(state);\n        }\n\n        if(secondaryScope) state.levelUp();\n        state.levelUp();\n\n        state.finalizeLexicalEnvironment();\n    }"
        ],
        [
            "function(state, noError) {\n        if(validators.isSemicolon(state)) {\n            state.next();\n        }\n        else if(state.token && !validators.isBlockEnd(state)) {\n            var lb = state.lookback();\n            if(!lb || state.token.line === lb.line) {\n                if(!noError) state.error(constants.unexpectedToken);\n                return false;\n            }\n        }\n\n        return true;\n    }"
        ],
        [
            "function ReadpixelCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 2) throw new SyntaxError('READPIXEL command requires 2 arguments');\n    this.x = parsed.args[0];\n    this.y = parsed.args[1];\n}"
        ],
        [
            "function(config) {\r\n\t\t\tif(!config) {\r\n\t\t\t\treturn \"\";\r\n\t\t\t}\r\n\r\n\t\t\tvar result = [];\r\n\r\n\t\t\tfor(var key in config) {\r\n\t\t\t\tif(typeof config[key] == \"undefined\") {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult.push(key + \"=\" + config[key]);\r\n\t\t\t}\r\n\r\n\t\t\tif(result.length > 0) {\r\n\t\t\t\treturn \"?\" + result.join(\"&\");\r\n\t\t\t}\r\n\r\n\t\t\treturn \"\";\r\n\t\t}"
        ],
        [
            "function(consumerKey, consumerSecret, applicationName, format, useCompression) {\r\n\t\tthis.eventHandlers = {};\r\n\t\tthis.consumerKey = consumerKey;\r\n\t\tthis.consumerSecret = consumerSecret;\r\n\t\tthis.useCompression = useCompression || true;\r\n\t\tthis.format = format || \"json\";\r\n\t    this.acceptEncoding = this.useCompression ? 'gzip, deflate' : 'identity';\r\n\t    this.applicationName = applicationName ? (applicationName + \"/\") : \"\";\r\n\r\n\t    if(!this.consumerKey || !this.consumerSecret) {\r\n\t    \tthrow \"ConsumerKey and ConsumerSecret should be specified in order to use SDK\";\r\n\t    }\r\n\r\n\t    this.applicationName += this.tpl(\"JavaScript/{SDK_VERSION}/{format}\", {\r\n\t    \tSDK_VERSION: this.SDK_VERSION,\r\n\t    \tformat: this.format\r\n\t    });\r\n\t}"
        ],
        [
            "function save(file, options) {\n  var stream = fs.createWriteStream(file, options);\n  function onSave() {\n    stream.removeAllListeners();\n    this.emit('save');\n  }\n  function onError(err) {\n    stream.removeAllListeners();\n    this.emit('error', err);\n  }\n  stream.on('finish', onSave.bind(this));\n  stream.on('error', onError.bind(this));\n  this.pipe(stream);\n  return this;\n}"
        ],
        [
            "function findPath(request, paths) {\n  if (paths.length == 1 && /^\\.{2}/.test(request)) {\n    paths[0] = path.dirname(paths[0])\n    request = request.slice(1)\n  }\n  return originalFindPath(request, paths)\n}"
        ],
        [
            "function run(js, path) {\n  var m = new Module(path, module)\n  Module._findPath = findPath\n  m.paths = Module._nodeModulePaths(dirname(path))\n  m.id = path\n  m.filename = path\n  js = 'module.return=eval(' + json(js) + ')'\n  m._compile(js, path)\n  Module._findPath = originalFindPath\n  return m\n}"
        ],
        [
            "function move_aspirate_forward(hash) {\n    var asp = u.unasp2asp(hash.stemUlt);\n    if (!asp) return;\n    var stem = u.replaceEnd(hash.stem, hash.stemUlt, asp);\n    if (!stem || stem == hash.stem) return;\n    hash.stems = [stem];\n    if (debug) log('mod: move_aspirate_forward', stem);\n}"
        ],
        [
            "function get (options, config) {\n  options = options || found\n  config = config || {}\n\n  // Load options.\n  var dir = options.dir || found.dir || 'config'\n  var env = options.env || found.env || 'staging'\n  var base = options.base || found.base || 'base'\n\n  // Allow many \"env\" values.\n  var key = env.toLowerCase()\n    .replace(/^([gro]|ca)/, 'p')  // gamma, release, one, canary -> \"production\".\n    .replace(/^(sa|[al])/, 'd')   // sandbox, alpha, local -> \"development\".\n    .replace(/^[qtbcij]/, 's')[0] // qa, test, beta, ci, jenkins -> \"staging\".\n\n  // Coerce to an expected environment.\n  var environment = map[key] || map[key = 's']\n\n  config.env = env\n  config.environment = environment\n  config.isDebug = /de?bu?g/i.test(env)\n  config.isDevelopment = (key === 'd')\n  config.isStaging = (key === 's')\n  config.isProduction = (key === 'p')\n\n  // Load files.\n  hide(config, 'load', load)\n\n  // Load configuration from files.\n  config.load(dir, base)\n  config.load(dir, environment)\n\n  // Load any matching sub-environments.\n  var subEnvironments = config.subEnvironments\n  if (subEnvironments && subEnvironments.indexOf(env) > -1) {\n    config.load(dir, env)\n  }\n\n  return config\n}"
        ],
        [
            "function decorate (object, values) {\n  for (var key in values) {\n    if (typeof object[key] === 'object') {\n      decorate(object[key], values[key])\n    } else {\n      object[key] = values[key]\n    }\n  }\n}"
        ],
        [
            "function hide (object, name, value) {\n  Object.defineProperty(object, name, {\n    enumerable: false,\n    value: value\n  })\n}"
        ],
        [
            "function _instanceCopy(sourceRef, copyRef, rc, copier) {\r\n    let origIndex = rc.xStack.indexOf(sourceRef);\r\n    if (origIndex === -1) {\r\n        rc.push(sourceRef, copyRef);\r\n        forEach(sourceRef, function(value, key) {\r\n            copier(copyRef, value, key);\r\n        });\r\n        rc.pop();\r\n        return copyRef;\r\n    }\r\n    else\r\n        return rc.yStack[origIndex];\r\n}"
        ],
        [
            "function _objectCopy(sourceRef, copyRef, rc) {\r\n    let origIndex = rc.xStack.indexOf(sourceRef);\r\n    if (origIndex === -1) {\r\n        rc.push(sourceRef, copyRef);\r\n        for (let [key, val] of _entries(sourceRef))\r\n            copyRef[key] = _clone(val, rc);\r\n        let symbols = Object.getOwnPropertySymbols(sourceRef);\r\n        for (let symbol of symbols)\r\n            copyRef[symbol] = _clone(sourceRef[symbol], rc);\r\n        rc.pop();\r\n        return copyRef;\r\n    }\r\n    else\r\n        return rc.yStack[origIndex];\r\n}"
        ],
        [
            "function _setCopy(sourceRef, copyRef, rc) {\r\n    return _instanceCopy(sourceRef, copyRef, rc, (set, val) => {\r\n        set.add(_clone(val, rc));\r\n    });\r\n}"
        ],
        [
            "function _mapCopy(sourceRef, copyRef, rc) {\r\n    return _instanceCopy(sourceRef, copyRef, rc, (map, val, key) => {\r\n        map.set(key, _clone(val, rc));\r\n    });\r\n}"
        ],
        [
            "function _singleCopy(sourceRef, copyRef, rc) {\r\n    return _instanceCopy(sourceRef, copyRef, rc, (item, val, key) => {\r\n        copyRef[key] = _clone(val, rc);\r\n    });\r\n}"
        ],
        [
            "function clone(origSource) {\r\n    let origIndex = -1;\r\n    let rc = new RecurseCounter(1000);\r\n    return _clone.call(null, origSource, rc);\r\n}"
        ],
        [
            "function _compareObject(x, y, rc) {\r\n    if (x === y)\r\n        return true;\r\n    if (x.constructor && y.constructor && x.constructor !== y.constructor)\r\n        return false;\r\n    let xKeys = Object.keys(x);\r\n    let yKeys = Object.keys(y);\r\n    xKeys.sort();\r\n    yKeys.sort();\r\n    if (!_equals(xKeys, yKeys, rc))\r\n        return false;\r\n    rc.push(x, y);\r\n    for (let k in x) {\r\n        if (!_equals(x[k], y[k], rc))\r\n            return false;\r\n    }\r\n    rc.pop();\r\n    return true;\r\n}"
        ],
        [
            "function equals(x, y) {\r\n    let rc = new RecurseCounter(1000);\r\n    return _equals.call(null, x, y, rc);\r\n}"
        ],
        [
            "function forEach(item, method, context) {\r\n    let type = getType(item);\r\n    switch(type) {\r\n        case types.date:\r\n        case types.function:\r\n        case types.object:\r\n        case types.regexp:\r\n            if (!item[Symbol.iterator]) {\r\n                for (let [key, value] of _entries(item)) {\r\n                    if (item.hasOwnProperty(key))\r\n                        method.call(context, value, key, item);\r\n                }\r\n            }\r\n            else { // shenanigans\r\n                for (let value of item) {\r\n                    // do we want to check if value is array, and spread it across value/key?\r\n                    method.call(context, value, undefined, item);\r\n                }\r\n            }\r\n            break;\r\n        case types.arguments:\r\n        case types.array:\r\n            for (let i = 0; i < item.length; i++)\r\n                method.call(context, item[i], i, item);\r\n            break;\r\n        case types.map:\r\n            for (let [key, value] of item)\r\n                method.call(context, value, key, item);\r\n            break;\r\n        case types.set:\r\n            for (let value of item) // treat keys and values as equivalent for sets\r\n                method.call(context, value, value, item);\r\n            break;\r\n        default:\r\n            // if unknown type, then check for Symbol.iterator\r\n            if (item[Symbol.iterator]) {\r\n                for (let value of item[Symbol.iterator]())\r\n                    method.call(context, value, undefined, item);\r\n            }\r\n            else if (!typeset.has(type) && type && type.constructor) {\r\n                for (let [ key, value ] of _entries(item)) {\r\n                    if (item.hasOwnProperty(key)) // necessary with _entries?\r\n                        method.call(context, value, key, item);\r\n                }\r\n            }\r\n            break;\r\n    }\r\n    return item;\r\n}"
        ],
        [
            "function typeForExtend(val) {\r\n    // treat unknown types (classes, hopefully?) and functions as objects\r\n    let type = getType(val);\r\n    if (type === types.function || !typeset.has(type) && type && type.constructor)\r\n        type = types.object;\r\n    return type;\r\n}"
        ],
        [
            "function isExtendable(...args) {\r\n    // this is a fairly expensive call. find a way to optimize further?\r\n    if (args.length < 1)\r\n        return false;\r\n\r\n    let baseType = typeForExtend(args[0]);\r\n    if (!(\r\n               baseType === types.array\r\n            || baseType === types.object\r\n            || baseType === types.set\r\n            || baseType === types.map\r\n            || baseType === types.function)) {\r\n        return false;\r\n    }\r\n    for (let i = 1; i < args.length; i++) {\r\n        let targetType = typeForExtend(args[i]);\r\n        if (targetType !== baseType)\r\n            return false;\r\n    }\r\n    return true;\r\n}"
        ],
        [
            "function _extend(a, b) {\r\n    forEach(b, (bVal, key) => {\r\n        let type = typeForExtend(a);\r\n        switch(type) {\r\n            case types.array:\r\n            case types.object:\r\n                if (a[key] === undefined || a[key] === null)\r\n                    a[key] = b[key];\r\n                else if (isExtendable(a[key], b[key]))\r\n                    _extend(a[key], b[key]);\r\n                break;\r\n            case types.set:\r\n                if (!a.has(bVal))\r\n                    a.add(bVal);\r\n                break;\r\n            case types.map:\r\n                if (!a.has(key))\r\n                    a.set(key, bVal);\r\n                else {\r\n                    let aVal = a.get(key);\r\n                    if (aVal === undefined || aVal === null)\r\n                        a.set(key, bVal);\r\n                    else if (isExtendable(aVal, bVal))\r\n                        _extend(aVal, bVal);\r\n                }\r\n                break;\r\n        }\r\n    });\r\n    return a;\r\n}"
        ],
        [
            "function extend(a, ...rest) {\r\n    rest.forEach(b => {\r\n        if (isExtendable(a, b))\r\n            _extend(a, b);\r\n    });\r\n    return a;\r\n}"
        ],
        [
            "function _smash(a, b) {\r\n    this.forEach(b, (val, key) => {\r\n        if (this.isSmashable(a[key], b[key])) // find a way to move isSmashable internal\r\n            this._smash(a[key], b[key]);\r\n        else\r\n            a[key] = this.deepCopy(b[key]);\r\n    });\r\n    return a;\r\n}"
        ],
        [
            "function smash(a, ...rest) {\r\n    rest.forEach(b => {\r\n        if (this.isSmashable(a, b)) // find a way to move isSmashable internal\r\n            this._smash(a, b);\r\n    });\r\n    return a;\r\n}"
        ],
        [
            "function File(name, file, parent) {\n    this.name = name;\n    this.file = file;\n    this.parent = parent;\n    this.readCursor = 0;\n    this.eof = false;\n}"
        ],
        [
            "function(msg, code, errorStr, cb) {\n                return function(error, data) {\n                    if (error) {\n                        error = json_rpc.newSysError(msg, code, errorStr,\n                                                     error);\n                    }\n                    cb(error, data);\n                };\n            }"
        ],
        [
            "function getTimeDifference(timestr1, timestr2) {\n\tif (typeof timestr1 !== 'string' || typeof timestr2 !== 'string') {\n\t\tthrow new Error('pendel.time() expects string arguments');\n\t}\n\n\t// Check if we are getting the short timecode formats\n\t// like 1:32PM or 13:32. If Yes, convert it into a\n\t// generic datestring so that we can support the old API.\n\tvar date1 = shortTimeToDateString(timestr1);\n\tvar date2 = shortTimeToDateString(timestr2);\n\n\tif (!date1) {\n\t\tdate1 = new Date(timestr1).toString();\n\t}\n\n\tif (!date2) {\n\t\tdate2 = new Date(timestr2).toString();\n\t}\n\n\tvar time1 = dateComponents(date1);\n\tvar time2 = dateComponents(date2);\n\n\tvar results = getTotalResultsFromEpochs(time1.epoch, time2.epoch);\n\n\treturn {\n\t\thours: Math.floor(results.totalSeconds / 60 / 60),\n\t\tminutes: Math.floor((results.totalSeconds / 60) % 60),\n\t\tseconds: Math.floor(results.totalSeconds % 60),\n\t\ttotalMinutes: results.totalMinutes,\n\t\ttotalSeconds: results.totalSeconds\n\t};\n}"
        ],
        [
            "function getDateDifference(timestr1, timestr2) {\n\t// Force into predictable date format\n\tvar start = timestr1.toLocaleDateString ? timestr1 : new Date(timestr1);\n\tvar end = timestr2.toLocaleDateString ? timestr2 : new Date(timestr2);\n\n\tif (start.toString() === 'Invalid Date' || end.toString() === 'Invalid Date') {\n\t\tthrow new TypeError('pendel.date() expects two valid date strings');\n\t}\n\n\tvar dr = moment.range(start, end);\n\n\treturn {\n\t\tyears: dr.diff('years'),\n\t\tmonths: dr.diff('months'),\n\t\tweeks: dr.diff('weeks'),\n\t\tdays: dr.diff('days'),\n\t\thours: dr.diff('hours'),\n\t\tminutes: dr.diff('minutes'),\n\t\tseconds: dr.diff('seconds')\n\t};\n}"
        ],
        [
            "function getTotalResultsFromEpochs(epoch1, epoch2) {\n\tvar millisecs = Math.abs(epoch1 - epoch2);\n\tvar seconds = millisecs / 1000;\n\n\treturn {\n\t\ttotalSeconds: seconds,\n\t\ttotalMinutes: Math.floor(seconds / 60),\n\t\ttotalHours: Math.floor(seconds / 60) * 60\n\t};\n}"
        ],
        [
            "function InputCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n    if (!parsed.args.length) throw new SyntaxError('INPUT requires at least one argument');\n\n    var question = \"\", placeVar, file;\n    if (parsed.args.length === 1) placeVar = parsed.args[0];\n    else {\n        if (parsed.args[0].child instanceof statements.PointerStatement) file = parsed.args[0];\n        else question = parsed.args[0];\n\n        placeVar = parsed.args[1];\n    }\n\n    if (!(placeVar.child instanceof statements.VariableStatement || placeVar.child instanceof statements.FunctionStatement))\n        throw new SyntaxError('Expected variable');\n\n    this.file = file;\n    this.question = question;\n    this.placeVar = placeVar;\n}"
        ],
        [
            "function PiechartCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 8) throw new SyntaxError('PIECHART command requires 8 arguments');\n    this.x = parsed.args[0];\n    this.y = parsed.args[1];\n    this.r = parsed.args[2];\n    this.itemsLength = parsed.args[3];\n    this.percentages = parsed.args[4];\n    this.itemsRed = parsed.args[5];\n    this.itemsGreen = parsed.args[6];\n    this.itemsBlue = parsed.args[7];\n}"
        ],
        [
            "function flatMap(mapper) {\r\n    return function* (iterable) {\r\n        let index = 0;\r\n        for (const value of iterable) {\r\n            const innerIterable = mapper(value, index);\r\n            for (const inner of innerIterable) {\r\n                yield inner;\r\n            }\r\n            index = index + 1;\r\n        }\r\n    };\r\n}"
        ],
        [
            "function skipWhile(predicate) {\r\n    return function* (iterable) {\r\n        let i = 0;\r\n        let canReturn = false;\r\n        for (const item of iterable) {\r\n            if (!canReturn) {\r\n                canReturn = !predicate(item, i);\r\n                if (canReturn) {\r\n                    yield item;\r\n                }\r\n                i = i + 1;\r\n            }\r\n            else {\r\n                yield item;\r\n            }\r\n        }\r\n    };\r\n}"
        ],
        [
            "function skipUntil(predicate) {\r\n    return function* (iterable) {\r\n        let i = 0;\r\n        let canReturn = false;\r\n        for (const item of iterable) {\r\n            if (!canReturn) {\r\n                canReturn = predicate(item, i);\r\n                if (canReturn) {\r\n                    yield item;\r\n                }\r\n                i = i + 1;\r\n            }\r\n            else {\r\n                yield item;\r\n            }\r\n        }\r\n    };\r\n}"
        ],
        [
            "function distinctUntilKeyChanged(keySelector) {\r\n    return function* (it) {\r\n        let prev = undefined;\r\n        for (const item of it) {\r\n            const key = keySelector(item);\r\n            if (key === prev) {\r\n                continue;\r\n            }\r\n            prev = key;\r\n            yield item;\r\n        }\r\n    };\r\n}"
        ],
        [
            "function orderBy(keySelector, comparison) {\r\n    const trueKeySelector = keySelector || defaultKeySelector;\r\n    const trueComparison = comparison || defaultComparison;\r\n    return function* (item) {\r\n        const keyedMapper = map((item, index) => ({ item, key: trueKeySelector(item, index) }));\r\n        const keyed = keyedMapper(item);\r\n        const keyedArray = Array.from(keyed);\r\n        keyedArray.sort((a, b) => trueComparison(a.key, b.key));\r\n        for (const { item } of keyedArray) {\r\n            yield item;\r\n        }\r\n    };\r\n}"
        ],
        [
            "function repeat(times) {\r\n    return function* (it) {\r\n        const buffer = [];\r\n        for (const item of it) {\r\n            buffer.push(item);\r\n            yield item;\r\n        }\r\n        for (let i = 0; i < times; ++i) {\r\n            yield* buffer;\r\n        }\r\n    };\r\n}"
        ],
        [
            "function shuffle(it, rand = () => Math.random()) {\r\n    return map((x) => x[0])(orderBy((x) => x[1])(map((x) => [x, rand()])(it)));\r\n}"
        ],
        [
            "function(compressedData) {\n    var inflatedData =  zlib.inflateSync( new Buffer(compressedData, 'base64'));\n    var outputString = \"[\" + String.fromCharCode.apply(null,inflatedData) + \"]\";\n    var outputArray = JSON.parse(outputString);\n    return ArrayConverter.diffsToValues(outputArray);\n  }"
        ],
        [
            "function ShapeCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 3) throw new SyntaxError('SHAPE command requires 3 arguments');\n    this.pointsLength = parsed.args[0];\n    this.pointsX = parsed.args[1];\n    this.pointsY = parsed.args[2];\n    this.stroke = parsed.args.length > 3 ? parsed.args[3] : false;\n}"
        ],
        [
            "function scrollSpy() {\n            var scrollTop = $window.scrollTop(),\n                $anchors = $childMenu.find('a'),\n                activeIndex;\n            $anchors.each(function (index) {\n                var $target = $($(this).attr('href').replace(/\\./g, '\\\\.')),\n                    offsetTop = $target.offset().top,\n                    offsetBottom = offsetTop + $target.outerHeight(true);\n                if (offsetTop <= scrollTop && scrollTop < offsetBottom) {\n                    activeIndex = index;\n                    return false;\n                }\n            });\n            $childMenuItem.removeClass('kss-active');\n            if (typeof activeIndex !== 'undefined') {\n                $childMenuItem.eq(activeIndex).addClass('kss-active');\n            }\n        }"
        ],
        [
            "function fixSidebar() {\n            if ($sidebarInner.outerHeight() < $content.outerHeight()) {\n                $sidebar.addClass('kss-fixed');\n                if ($sidebarInner.outerHeight() > $window.height()) {\n                    $sidebar.height($window.height());\n                    $window.on('scroll', scrollSidebar).trigger('scroll');\n                }\n                else {\n                    $sidebar.height('auto');\n                    $window.off('scroll', scrollSidebar);\n                }\n            }\n            else {\n                $sidebar.removeClass('kss-fixed');\n                $sidebar.height('auto');\n                $window.off('scroll', scrollSidebar);\n            }\n        }"
        ],
        [
            "function scrollSidebar(event) {\n            if (event.handled !== true) {\n                var scrollTop = $window.scrollTop(),\n                    maxScrollTop = $document.height() - $window.height();\n                if (scrollTop >= 0 && prevScrollTop >= 0 && scrollTop <= maxScrollTop && prevScrollTop <= maxScrollTop) {  // for Mac scrolling\n                    $sidebar.scrollTop($sidebar.scrollTop() + (scrollTop - prevScrollTop));\n                }\n                prevScrollTop = scrollTop;\n                event.handled = true;\n            }\n            else {\n                return false;\n            }\n        }"
        ],
        [
            "function forEach(declarations, reqName, callback) {\n        var d;\n        if (reqName === \"*\") {\n            // Iterate over all declarations.\n            for (d in declarations) {\n                callback.call(this, d);\n            }\n        } else if (reqName.charAt(reqName.length - 1) === \"*\") {\n            // Iterate over uncapped `*` declarations.\n            var baseName = reqName.substring(0, reqName.length - 1);\n            for (d in declarations) {\n                if (d.indexOf(baseName) === 0) {\n                    callback.call(this, d);\n                }\n            }\n        } else {\n            // A single dependency iteration.\n            if (declarations[reqName]) {\n                callback.call(this, reqName);\n            } else {\n                error(\"Invalid dependency '\" + reqName + \"'\");\n            }\n        }\n    }"
        ],
        [
            "function mkdir(units, name) {\n        if (name !== \"\") {\n            var parts = name.split(\".\");\n            var path = \"\";\n            for (var i = 0, len = parts.length; i < len; i++) {\n                var part = parts[i];\n                path += part;\n                if (units[part] == null) {\n                    units[part] = {};\n                } else if (typeof units[part] !== \"object\") {\n                    error(\"Cann't init unit '\" + name\n                            + \"' because path element '\" + path\n                            + \"' isn't an object\");\n                }\n                units = units[part];\n                path += \".\";\n            }\n        }\n        return units;\n    }"
        ],
        [
            "function pickUnit(srcDecls, destDecls, name, picked, stack) {\n        var decl = srcDecls[name];\n        if (!picked[name]) {\n            if (stack[name]) {\n                error(\"Recursive dependency '\" + name + \"'\");\n            }\n            stack[name] = true;\n            for (var i = 0, len = decl._dependencies.length; i < len; i++) {\n                var reqName = decl._dependencies[i];\n                forEach(srcDecls, reqName, function(depName) {\n                    if (depName !== name) {\n                        pickUnit(srcDecls, destDecls, depName, picked, stack);\n                    }\n                });\n            }\n            destDecls[name] = decl;\n            picked[name] = true;\n        }\n    }"
        ],
        [
            "function pickUnits(dest, settings) {\n        var units = settings.units;\n        if (!isArray(units)) {\n            error(\"Invalid units array in pick settings\");\n        }\n        if (!(settings.namespace instanceof Gumup)) {\n            error(\"Invalid namespace in pick settings\");\n        }\n        var picked = {},\n            srcDecls = settings.namespace._declarations;\n        for (var i = 0, len = units.length; i < len; i++) {\n            var reqName = units[i];\n            if (!checkRequireName(reqName)) {\n                error(\"Invalid unit name '\" + reqName + \"' in pick settings\");\n            }\n            forEach(srcDecls, reqName, function(depName) {\n                pickUnit(srcDecls, dest._declarations, depName, picked, {});\n            });\n        }\n    }"
        ],
        [
            "function initialize(dest, declarations, name, cache, inited) {\n        var decl = declarations[name];\n        if (!inited[name]) {\n            // Create unit dependencies first.\n            var len = cache.dependencies[name].length;\n            for (var i = 0; i < len; i++) {\n                initialize(dest, declarations,\n                        cache.dependencies[name][i], cache, inited);\n            }\n            // Create unit.\n            decl._init(dest, name);\n            inited[name] = true;\n        }\n    }"
        ],
        [
            "function getShaSalt() {\n  var shaDeps = [__filename,\n                 __dirname + '/protractor_api.dart'];\n  return shaTextHexDigest.apply(shaDeps.map(utils.readTextFile));\n}"
        ],
        [
            "function isBemDecl(node) {\n    if (node.type !== 'CallExpression') {\n        return false;\n    }\n\n    if (node.callee.type !== 'MemberExpression') {\n        return false;\n    }\n\n    if (node.callee.property.type !== 'Identifier' || node.callee.property.name !== 'decl') {\n        return false;\n    }\n\n    var obj = node.callee.object;\n    if (obj.type === \"Identifier\") {\n        return obj.name === \"BEM\";\n    }\n\n    if (obj.type === \"MemberExpression\") {\n        if (obj.object.type !== \"Identifier\") {\n            return false;\n        }\n\n        if (obj.object.name !== \"BEM\") {\n            return false;\n        }\n\n        if (obj.property.type !== \"Identifier\") {\n            return false;\n        }\n\n        return obj.property.name === \"DOM\";\n    }\n    return false;\n}"
        ],
        [
            "function getEntity(decl) {\n    if (decl.type === \"Literal\") {\n        return {block: decl.value};\n    }\n\n    if (decl.type === \"ObjectExpression\") {\n        var base = getProperty(decl, 'baseBlock'),\n            o = {\n                block: getProperty(decl, 'block'),\n                mod: getProperty(decl, 'modName'),\n                val: getProperty(decl, 'modVal')\n            };\n        \n        if (base) {\n            o.base = base;\n        }\n        return o;\n    }\n\n}"
        ],
        [
            "function getProperty(objNode, name) {\n    for (var i=0; i<objNode.properties.length; i++) {\n        if (getKey(objNode.properties[i]) === name) {\n            return getValue(objNode.properties[i]);\n        }\n    }\n}"
        ],
        [
            "function getKey(propNode) {\n    if (propNode.key.type === \"Literal\") {\n        return propNode.key.value;\n    }\n\n    if (propNode.key.type === \"Identifier\") {\n        return propNode.key.name;\n    }\n}"
        ],
        [
            "function addDocletBemEntity(e) {\n    var bemEntity = e.code.bemEntity;\n    e.doclet.block = bemEntity.block;\n    if (bemEntity.base) {\n        e.doclet.baseBlock = bemEntity.base;\n    }\n    if (bemEntity.mod) {\n        e.doclet.mod = {\n            name: bemEntity.mod,\n            value: bemEntity.val\n        };\n    }\n}"
        ],
        [
            "function isStaticDecl(node) {\n    var parent = node.parent;\n    return hasStatic(parent) &&\n        parent.arguments[2] === node;\n}"
        ],
        [
            "function hasStatic(node) {\n    var args = node.arguments;\n    if (!args) {\n        return false;\n    }\n    return args.length >= 3 &&\n        args[1].type === \"ObjectExpression\" &&\n        args[2].type === \"ObjectExpression\";\n}"
        ],
        [
            "function getInputArguments(args) {\n      var out = {};\n      out.localServices = {};\n      if (args.length > 0) {\n         out.source = args[0];\n         out.target = args[0];\n         if (_.isPlainObject(args[0])) {\n            var opts = args[0];\n            out.target = opts.target;\n            out.source = opts.source;\n            out.instance = opts.instance;\n         }\n         // call(func, callback)\n         if (args.length > 1) {\n            var argsDefined = _.isString(args[0]) || _.isArray(args[0]);\n            if (argsDefined) {\n               if (_.isArray(args[0])) {\n                  out.source = args[0];\n               } else {\n                  out.source = _.isString(args[0]) ? [args[0]] : args[0];\n               }\n               if (_.isFunction(args[1])) {\n                  out.target = args[1];\n               }\n               if (_.isFunction(args[2])) {\n                  out.target = args[2];\n               }\n            } else {\n\n               if (_.isFunction(args[1])) {\n                  out.callReady = args[1];\n               }\n               if (_.isPlainObject(args[1])) {\n                  out.localServices = args[1];\n               }\n            }\n         }\n         if (args.length === 3) {\n            if (_.isPlainObject(args[1])) {\n               out.localServices = args[1];\n            }\n            if (_.isFunction(args[2])) {\n               out.callReady = args[2];\n            }\n         }\n      }\n      out.target = out.target || function() {};\n      out.source = out.source ? out.source : out.target;\n      out.callReady = out.callReady || function() {};\n      return out;\n   }"
        ],
        [
            "function findNext(data, items, index) {\n    var currentIndex = data.length + 1, found = '';\n    for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var location = data.indexOf(item, index);\n        if (location !== -1 && location < currentIndex) {\n            currentIndex = location;\n            found = item;\n        }\n    }\n    if (currentIndex === data.length + 1) return { index: -1, found: '' };\n    return {\n        index: currentIndex,\n        found: found\n    };\n}"
        ],
        [
            "function findLast(data, items, index) {\n    var currentIndex = -1, found = '';\n    for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var location = data.lastIndexOf(item, index);\n        if (location > currentIndex) {\n            currentIndex = location;\n            found = item;\n        }\n    }\n    return {\n        index: currentIndex,\n        found: found\n    };\n}"
        ],
        [
            "function findNextOutside(data, items, index, exclude) {\n    var result, positionResult = {start: 0, end: index ? index - 1 : -1};\n\n    do {\n        result = findNext(data, items, positionResult.end + 1);\n    } while (result.index !== -1 && (positionResult = inPosition(result.index, exclude)));\n    return result;\n}"
        ],
        [
            "function findLastOutside(data, items, index, exclude) {\n    var result, positionResult = {start: index ? index + 1 : data.length + 1, end: 0};\n\n    do {\n        result = findLast(data, items, positionResult.start - 1);\n    } while (result.index !== -1 && (positionResult = inPosition(result.index, exclude)));\n    return result;\n}"
        ],
        [
            "function indexOfOutside(data, item, index, exclude) {\n    var result, positionResult = {start: 0, end: index ? index - 1 : -1};\n\n    do {\n        result = data.indexOf(item, positionResult.end + 1);\n    } while (result !== -1 && (positionResult = inPosition(result, exclude)));\n    return result;\n}"
        ],
        [
            "function lastIndexOfOutside(data, item, index, exclude) {\n    var result, positionResult = {start: index ? index + 1 : data.length + 1, end: 0};\n\n    do {\n        result = data.lastIndexOf(item, positionResult.start - 1);\n    } while (result.index !== -1 && (positionResult = inPosition(result.index, exclude)));\n    return result;\n}"
        ],
        [
            "function splitOutside(data, separator, exclude) {\n    var result = [];\n\n    var accumulator = \"\";\n    for (var i = 0; i < data.length; i++) {\n        accumulator += data[i];\n\n        var isInExclusion = inPosition(i, exclude);\n        if (!isInExclusion && endsWith(accumulator, separator)) {\n            result.push(accumulator.substring(0, accumulator.length - separator.length));\n            accumulator = '';\n        }\n    }\n    result.push(accumulator);\n    return result;\n}"
        ],
        [
            "function inPosition(index, items) {\n    for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        if (index >= item.start && index <= item.end) return item;\n    }\n    return false;\n}"
        ],
        [
            "function endsWith(data, str) {\n    if (data.length < str.length) return false;\n    if (data === str) return true;\n    return data.lastIndexOf(str) === data.length - str.length;\n}"
        ],
        [
            "function pad(data, length, pad) {\n    data = String(data);\n    pad = pad || ' ';\n    while (data.length < length) data += pad;\n    return data;\n}"
        ],
        [
            "function shallowClone(source, obj) {\n    if (arguments.length < 2) {\n        obj = source;\n        source = {};\n    }\n\n    for (var key in obj) {\n        if (!obj.hasOwnProperty(key)) continue;\n        source[key] = obj[key];\n    }\n    return source;\n}"
        ],
        [
            "function() {\n      var args = norma('path:s?', arguments);\n      var _url = url.format(_.clone(this.url));\n      var _path = (args.path || '').replace(/^\\//, '');\n      return url.resolve(_url, _path);\n    }"
        ],
        [
            "function nextLine(context, ast, prompt, oldPrompt, forceCursor, eval) {\n    rl.question(prompt, function(answer) {\n        eval(answer, context, ast, forceCursor === -1 ? ast.root.length : forceCursor, function(newPrompt, newCursor) {\n            nextLine(context, ast, newPrompt || oldPrompt, oldPrompt, typeof newCursor === 'undefined' ? -1 : newCursor, eval);\n        });\n    });\n}"
        ],
        [
            "function initialize(done) {\n    done = done || function() { };\n    if (fileContents) done();\n\n    fs.readFile(__dirname + '/../../data/filesystem.json', {\n        encoding: 'utf8'\n    }, function(err, data) {\n        if (err) fileContents = {};\n        else fileContents = JSON.parse(data);\n        done();\n    });\n}"
        ],
        [
            "function save(done) {\n    if (process.browser) return done();\n\n    fs.writeFile(__dirname + '/../../data/filesystem.json', JSON.stringify(fileContents), function(err) {\n        if (done) done(err);\n    });\n}"
        ],
        [
            "function (i, validate){\n  // we offer a shortcut to get types when only one argument is provided\n  if (arguments.length === 1) {\n    return av.type(i);\n  }\n\n  // we store the value in private scope\n  var _i;\n  // our getter-setter-combo including validation\n  var me = function (d){\n    if (!arguments.length) {\n      if (typeof _i === 'object'){\n        var o = {};\n        for (var prop in _i){\n          o[prop] = _i[prop]();\n        }\n        return o;\n      } else {\n        return _i;\n      }\n    }\n    _i = validate(d);\n    // if _i is an object we expose the getter/setter methods of its attributes\n    if (typeof _i === 'object'){\n      for (var prop_object in _i){\n        me[prop_object] = _i[prop_object];\n      }\n    }\n  };\n  // we initialize the getter-setter-combo with the provided value\n  me(i);\n  // return the getter-setter-combo (allows chaining, among other things)\n  return me;\n}"
        ],
        [
            "function (d){\n    if (!arguments.length) {\n      if (typeof _i === 'object'){\n        var o = {};\n        for (var prop in _i){\n          o[prop] = _i[prop]();\n        }\n        return o;\n      } else {\n        return _i;\n      }\n    }\n    _i = validate(d);\n    // if _i is an object we expose the getter/setter methods of its attributes\n    if (typeof _i === 'object'){\n      for (var prop_object in _i){\n        me[prop_object] = _i[prop_object];\n      }\n    }\n  }"
        ],
        [
            "function DimCommand(args) {\n    var parsed = new statements.ArgumentStatement(args, {\n        parseArgs: false\n    });\n\n    this.creates = [];\n\n    for (var i = 0; i < parsed.args.length; i++) {\n        var dimDef = parsed.args[i];\n        var startBracket = dimDef.indexOf('(');\n        var endBracket = dimDef.indexOf(')');\n\n        if (startBracket === -1) throw new SyntaxError('Expected start bracket');\n        if (endBracket === -1) throw new SyntaxError('Expected end bracket');\n\n        var arrayName = dimDef.substring(0, startBracket).trim();\n        var arrayLengthName = dimDef.substring(startBracket + 1, endBracket);\n        var arrayLengthArg = new statements.ArgumentStatement(arrayLengthName);\n\n        this.creates.push({\n            name: arrayName,\n            lengths: arrayLengthArg.args\n        })\n    }\n}"
        ],
        [
            "function genEntityDescription(data, kind, entityName) {\n    return data({kind: kind, name: entityName}).select('description').join('\\n\\n');\n}"
        ],
        [
            "function genBlockMethod(members, name) {\n    var res = {\n        name: name,\n        description: '',\n        params: [],\n        returns: [],\n        deprecated: false,\n        final: false\n    };\n    members.filter({\n        kind: 'function',\n        name: name\n    }).each(function(doclet) {\n        if (doclet.description) {\n            res.description += doclet.description + '\\n';\n        }\n\n        if (!res.access) {\n            res.access = doclet.access;\n        }\n\n        if (!res.scope) {\n            res.scope = doclet.scope;\n        }\n\n        if (res.returns.length === 0) {\n            res.returns = genMethodReturns(doclet.returns);\n        }\n\n        if (res.params.length === 0) {\n            res.params  = genMethodParams(doclet.params);\n        }\n\n        if (doclet.deprecated) {\n            res.deprecated = doclet.deprecated;\n        }\n\n        if (doclet.final) {\n            res.final = doclet.final;\n        }\n    });\n\n    res.scope = res.scope || 'instance';\n    res.access = res.access || 'public';\n\n    return res;\n}"
        ],
        [
            "function genParam(param) {\n    var res = {\n        name: param.name || '',\n        description: param.description || '',\n        optional: !!param.optional\n    };\n    if (param.type) {\n        res.types = param.type.names.slice(0);\n    }\n\n    if (param.defaultvalue) {\n        res['default'] = param.defaultvalue;\n    }\n    return res;\n}"
        ],
        [
            "function genProperty(members, name) {\n    var res = {\n        name: name,\n        deprecated: false,\n        description: '',\n        types: []\n    };\n\n    members.filter({\n        kind: 'member',\n        name: name\n    }).each(function(doclet) {\n        if (doclet.description) {\n            res.description += doclet.description + '\\n';\n        }\n\n        if (!res.access) {\n            res.access = doclet.access;\n        }\n\n        if (!res.scope) {\n            res.scope = doclet.scope;\n        }\n\n        if (doclet.deprected) {\n            res.deprecated = true;\n        }\n        if (res.types.length === 0 && doclet.type) {\n            res.types = doclet.type.names.slice(0);\n        }\n    });\n\n    res.scope = res.scope || 'instance';\n    res.access = res.acccess || 'public';\n\n    return res;\n}"
        ],
        [
            "function IfCommand(args, define) {\n    if (util.endsWith(args.toLowerCase(), ' then')) args = args.slice(0, args.length - 5).trim();\n    else throw new SyntaxError('IF has no THEN');\n\n    var parsed = new statements.ArgumentStatement(args, {\n        separator: false\n    }, define);\n\n    this.condition = parsed.args[0];\n    this.block = define({\n        start: 'IF',\n        then: 'ELSE',\n        end: ['ENDIF', 'RETURN']\n    });\n}"
        ],
        [
            "function logger(stream){\r\n\treturn (...text) => {\r\n\t\ttext.map(text => {\r\n\t\t\tconsole.log(text)\r\n\t\t\tstream.write(`${Date.now()} - ${JSON.stringify(text)}\\n`)\r\n\t\t})\r\n\t}\r\n}"
        ],
        [
            "function forward(receiver, provider, keys) {\n  keys = keys || allKeys(provider);\n  keys = Array.isArray(keys) ? keys : [keys];\n\n  keys.forEach(function (key) {\n    var val = provider[key];\n\n    if (typeof val === 'function') {\n      receiver[key] = function () {\n        return provider[key].apply(provider, arguments);\n      };\n    } else {\n      receiver[key] = val;\n    }\n  });\n  return receiver;\n}"
        ],
        [
            "function RegexFinderStrategy(config) {\n\tconfig = config || {};\n\n\tFinderStrategy.call(this, config);\n\tthis.config = extend(true, this.config, {}, config);\n}"
        ],
        [
            "function SyncFile(path, flags, mode) {\n  flags = flags || 'w';\n  this.fd = fs.openSync(path, flags, mode);\n  this.crc = new Crc64();\n  this.converter = new Converter();\n}"
        ],
        [
            "function write(obj) {\n  if(obj.type === 'crc') return this.end();\n  var buffer = this.converter.entry(obj);\n  this.crc.push(buffer);\n  return this.writeBuffer(buffer);\n}"
        ],
        [
            "function writeBuffer(buffer) {\n  var written = fs.writeSync(this.fd, buffer, 0, buffer.length, null);\n  fs.fsyncSync(this.fd);\n  return written;\n}"
        ],
        [
            "function end() {\n  this.writeBuffer(this.crc.value());\n  fs.closeSync(this.fd);\n\n  this.fd = null;\n  this.crc = null;\n  this.converter = null;\n}"
        ],
        [
            "function AbstractSyntaxTree(root, labels, manager) {\n    this.root = root;\n    this.labels = labels;\n    this.manager = manager;\n\n    manager.parse(this);\n}"
        ],
        [
            "function execute(ast, ctx, done) {\n    if (!done && !(ctx instanceof ExecutionContext)) {\n        done = ctx;\n        ctx = new ExecutionContext();\n    }\n\n    ast.execute(ctx, done);\n}"
        ],
        [
            "function MarkLogicStore(options) {\n    options = options || {};\n    var collectionName = options.collection || defaultOptions.collection;\n    this.baseUri = options.baseUri || encodeURI(collectionName.replace(/\\s/g,'-'));\n\n    Store.call(this, options);\n\n    this.collectionName = collectionName;\n    this.ttl =  options.ttl || defaultOptions.ttl || 0;\n\n    // retain the client that was passed in, or create a new client\n    this.db = options.client || marklogic.createDatabaseClient(options);\n\n  }"
        ],
        [
            "function _vendorsList(vendors, ignore = false) {\n  let vendorsList = ''\n  let sign = (ignore) ? '-' : '+'\n\n  for (let vendor of vendors) {\n    vendorsList += ` ${sign} ${vendor}`\n  }\n\n  return vendorsList\n}"
        ],
        [
            "function create (prototype, properties) {\n  Ctor.prototype = prototype || {}\n  return properties ? copy(new Ctor(), properties) : new Ctor()\n}"
        ],
        [
            "function copy (target, source) {\n  for (var key in Object(source)) target[key] = source[key]\n  return target\n}"
        ],
        [
            "function identity(iterable) {\r\n    return __asyncGenerator(this, arguments, function* identity_1() {\r\n        return yield __await(yield __await(yield* __asyncDelegator(__asyncValues(iterable))));\r\n    });\r\n}"
        ],
        [
            "function scan(predicate, initial) {\r\n    return function (iterable) {\r\n        return __asyncGenerator(this, arguments, function* () {\r\n            var e_7, _a;\r\n            let index = 0;\r\n            let prevState = initial;\r\n            try {\r\n                for (var iterable_5 = __asyncValues(iterable), iterable_5_1; iterable_5_1 = yield __await(iterable_5.next()), !iterable_5_1.done;) {\r\n                    const value = iterable_5_1.value;\r\n                    prevState = yield __await(Promise.resolve(predicate(prevState, value, index)));\r\n                    yield yield __await(prevState);\r\n                    index = index + 1;\r\n                }\r\n            }\r\n            catch (e_7_1) { e_7 = { error: e_7_1 }; }\r\n            finally {\r\n                try {\r\n                    if (iterable_5_1 && !iterable_5_1.done && (_a = iterable_5.return)) yield __await(_a.call(iterable_5));\r\n                }\r\n                finally { if (e_7) throw e_7.error; }\r\n            }\r\n            return yield __await(prevState);\r\n        });\r\n    };\r\n}"
        ],
        [
            "async function first(iterable) {\r\n    var e_13, _a;\r\n    try {\r\n        for (var iterable_11 = __asyncValues(iterable), iterable_11_1; iterable_11_1 = await iterable_11.next(), !iterable_11_1.done;) {\r\n            const item = iterable_11_1.value;\r\n            return item;\r\n        }\r\n    }\r\n    catch (e_13_1) { e_13 = { error: e_13_1 }; }\r\n    finally {\r\n        try {\r\n            if (iterable_11_1 && !iterable_11_1.done && (_a = iterable_11.return)) await _a.call(iterable_11);\r\n        }\r\n        finally { if (e_13) throw e_13.error; }\r\n    }\r\n    return undefined;\r\n}"
        ],
        [
            "function skipUntil(predicate) {\r\n    return function (iterable) {\r\n        return __asyncGenerator(this, arguments, function* () {\r\n            var e_18, _a;\r\n            let i = 0;\r\n            let canReturn = false;\r\n            try {\r\n                for (var iterable_16 = __asyncValues(iterable), iterable_16_1; iterable_16_1 = yield __await(iterable_16.next()), !iterable_16_1.done;) {\r\n                    const item = iterable_16_1.value;\r\n                    if (!canReturn) {\r\n                        canReturn = yield __await(predicate(item, i));\r\n                        if (canReturn) {\r\n                            yield yield __await(item);\r\n                        }\r\n                        i = i + 1;\r\n                    }\r\n                    else {\r\n                        yield yield __await(item);\r\n                    }\r\n                }\r\n            }\r\n            catch (e_18_1) { e_18 = { error: e_18_1 }; }\r\n            finally {\r\n                try {\r\n                    if (iterable_16_1 && !iterable_16_1.done && (_a = iterable_16.return)) yield __await(_a.call(iterable_16));\r\n                }\r\n                finally { if (e_18) throw e_18.error; }\r\n            }\r\n        });\r\n    };\r\n}"
        ],
        [
            "function concat(...iterables) {\r\n    return function (it) {\r\n        return __asyncGenerator(this, arguments, function* () {\r\n            var e_20, _a;\r\n            yield __await(yield* __asyncDelegator(__asyncValues(it)));\r\n            try {\r\n                for (var iterables_1 = __asyncValues(iterables), iterables_1_1; iterables_1_1 = yield __await(iterables_1.next()), !iterables_1_1.done;) {\r\n                    const iterable = iterables_1_1.value;\r\n                    yield __await(yield* __asyncDelegator(__asyncValues(iterable)));\r\n                }\r\n            }\r\n            catch (e_20_1) { e_20 = { error: e_20_1 }; }\r\n            finally {\r\n                try {\r\n                    if (iterables_1_1 && !iterables_1_1.done && (_a = iterables_1.return)) yield __await(_a.call(iterables_1));\r\n                }\r\n                finally { if (e_20) throw e_20.error; }\r\n            }\r\n        });\r\n    };\r\n}"
        ],
        [
            "function distinct(it) {\r\n    return __asyncGenerator(this, arguments, function* distinct_1() {\r\n        var e_24, _a;\r\n        const resultSet = new Set();\r\n        try {\r\n            for (var it_5 = __asyncValues(it), it_5_1; it_5_1 = yield __await(it_5.next()), !it_5_1.done;) {\r\n                const item = it_5_1.value;\r\n                if (!resultSet.has(item)) {\r\n                    resultSet.add(item);\r\n                    yield yield __await(item);\r\n                }\r\n            }\r\n        }\r\n        catch (e_24_1) { e_24 = { error: e_24_1 }; }\r\n        finally {\r\n            try {\r\n                if (it_5_1 && !it_5_1.done && (_a = it_5.return)) yield __await(_a.call(it_5));\r\n            }\r\n            finally { if (e_24) throw e_24.error; }\r\n        }\r\n    });\r\n}"
        ],
        [
            "function orderBy(keySelector, comparison) {\r\n    const trueKeySelector = keySelector || defaultKeySelector;\r\n    const trueComparison = comparison || defaultComparison;\r\n    return function (item) {\r\n        return __asyncGenerator(this, arguments, function* () {\r\n            var e_25, _a;\r\n            const keyedMapper = map((item, index) => ({ item, key: trueKeySelector(item, index) }));\r\n            const keyed = keyedMapper(item);\r\n            const keyedArray = yield __await(toWriteableArray(keyed));\r\n            keyedArray.sort((a, b) => trueComparison(a.key, b.key));\r\n            try {\r\n                for (var keyedArray_1 = __asyncValues(keyedArray), keyedArray_1_1; keyedArray_1_1 = yield __await(keyedArray_1.next()), !keyedArray_1_1.done;) {\r\n                    const { item } = keyedArray_1_1.value;\r\n                    yield yield __await(item);\r\n                }\r\n            }\r\n            catch (e_25_1) { e_25 = { error: e_25_1 }; }\r\n            finally {\r\n                try {\r\n                    if (keyedArray_1_1 && !keyedArray_1_1.done && (_a = keyedArray_1.return)) yield __await(_a.call(keyedArray_1));\r\n                }\r\n                finally { if (e_25) throw e_25.error; }\r\n            }\r\n        });\r\n    };\r\n}"
        ],
        [
            "function flip(it) {\r\n    return __asyncGenerator(this, arguments, function* flip_1() {\r\n        yield __await(yield* __asyncDelegator(__asyncValues(yield __await(reduce((prev, next) => [next].concat(prev), [])(it)))));\r\n    });\r\n}"
        ],
        [
            "function repeat(times) {\r\n    return function (it) {\r\n        return __asyncGenerator(this, arguments, function* () {\r\n            var e_26, _a;\r\n            const buffer = [];\r\n            try {\r\n                for (var it_6 = __asyncValues(it), it_6_1; it_6_1 = yield __await(it_6.next()), !it_6_1.done;) {\r\n                    const item = it_6_1.value;\r\n                    buffer.push(item);\r\n                    yield yield __await(item);\r\n                }\r\n            }\r\n            catch (e_26_1) { e_26 = { error: e_26_1 }; }\r\n            finally {\r\n                try {\r\n                    if (it_6_1 && !it_6_1.done && (_a = it_6.return)) yield __await(_a.call(it_6));\r\n                }\r\n                finally { if (e_26) throw e_26.error; }\r\n            }\r\n            for (let i = 0; i < times; ++i) {\r\n                yield __await(yield* __asyncDelegator(__asyncValues(buffer)));\r\n            }\r\n        });\r\n    };\r\n}"
        ],
        [
            "function doppler(it) {\r\n    return __asyncGenerator(this, arguments, function* doppler_1() {\r\n        var e_27, _a;\r\n        const buffer = [];\r\n        try {\r\n            for (var it_7 = __asyncValues(it), it_7_1; it_7_1 = yield __await(it_7.next()), !it_7_1.done;) {\r\n                const item = it_7_1.value;\r\n                buffer.push(item);\r\n                yield yield __await(item);\r\n            }\r\n        }\r\n        catch (e_27_1) { e_27 = { error: e_27_1 }; }\r\n        finally {\r\n            try {\r\n                if (it_7_1 && !it_7_1.done && (_a = it_7.return)) yield __await(_a.call(it_7));\r\n            }\r\n            finally { if (e_27) throw e_27.error; }\r\n        }\r\n        buffer.reverse();\r\n        yield __await(yield* __asyncDelegator(__asyncValues(buffer)));\r\n    });\r\n}"
        ],
        [
            "async function count(source) {\r\n    var e_33, _a;\r\n    let i = 0;\r\n    try {\r\n        for (var source_4 = __asyncValues(source), source_4_1; source_4_1 = await source_4.next(), !source_4_1.done;) {\r\n            const it = source_4_1.value;\r\n            ++i;\r\n        }\r\n    }\r\n    catch (e_33_1) { e_33 = { error: e_33_1 }; }\r\n    finally {\r\n        try {\r\n            if (source_4_1 && !source_4_1.done && (_a = source_4.return)) await _a.call(source_4);\r\n        }\r\n        finally { if (e_33) throw e_33.error; }\r\n    }\r\n    return i;\r\n}"
        ],
        [
            "async function empty(source) {\r\n    var e_34, _a;\r\n    let i = 0;\r\n    try {\r\n        for (var source_5 = __asyncValues(source), source_5_1; source_5_1 = await source_5.next(), !source_5_1.done;) {\r\n            const it = source_5_1.value;\r\n            return false;\r\n        }\r\n    }\r\n    catch (e_34_1) { e_34 = { error: e_34_1 }; }\r\n    finally {\r\n        try {\r\n            if (source_5_1 && !source_5_1.done && (_a = source_5.return)) await _a.call(source_5);\r\n        }\r\n        finally { if (e_34) throw e_34.error; }\r\n    }\r\n    return true;\r\n}"
        ],
        [
            "function CloseCommand(args, define) {\n    var parsed = new statements.ExpressionStatement(args, define);\n    if (!(parsed.child instanceof statements.PointerStatement)) throw new SyntaxError('Expected pointer');\n\n    this.pointer = parsed;\n}"
        ],
        [
            "function Block(line, def, parent) {\n    this.startNames = [];\n    this.thenNames = [];\n    this.endNames = [];\n    for (var i = 0; i < def.start.length; i++) this.startNames.push(def.start[i].toLowerCase());\n    for (var x = 0; x < def.end.length; x++) this.endNames.push(def.end[x].toLowerCase());\n    for (var y = 0; y < def.then.length; y++) this.thenNames.push(def.then[y].toLowerCase());\n\n    this.line = line;\n    this.parent = parent;\n    this.searchIndex = line;\n    this.start = -1;\n    this.intermediateIndexes = {};\n    this.intermediateCursors = {};\n    this.end = -1;\n}"
        ],
        [
            "function ReadCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n    for (var i = 0; i < parsed.args.length; i++) {\n        var placeVar = parsed.args[i];\n        if (!(placeVar.child instanceof statements.VariableStatement || placeVar.child instanceof statements.FunctionStatement))\n            throw new SyntaxError('Expected variable');\n    }\n    this.items = parsed.args;\n}"
        ],
        [
            "function compileValue(value) {\n\t\tif (value.subtype === 'array') {\n\t\t\treturn compileArray(value)\n\t\t} else if (value.subtype === 'object') {\n\t\t\treturn compileObject(value)\n\t\t} else if (value.subtype === 'mixin') {\n\t\t\treturn compileMixin(value)\n\t\t} else if (value.subtype === 'js') {\n\t\t\treturn compileJS(value)\n\t\t} else if (value.subtype === 'function') {\n\t\t\treturn compileFunction(value)\n\t\t}\n\t\tthrow new Error('Invalid subtype: ' + value.subtype)\n\t}"
        ],
        [
            "function DrawspriteCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 3) throw new SyntaxError('DRAWSPRITE command requires 3 arguments');\n    this.id = parsed.args[0];\n    this.x = parsed.args[1];\n    this.y = parsed.args[2];\n    this.scale = parsed.args.length === 4 ? parsed.args[3] : false;\n    this.rotation = parsed.args.length === 5 ? parsed.args[4] : false;\n}"
        ],
        [
            "function (string) { // string.check check sting type and size\n\n            return ((typeof string === 'string' || string instanceof String)\n                    && string.length >= this.min\n                    && string.length <= this.max\n                    && (!this.match || string.match(this.match))\n                   );\n          }"
        ],
        [
            "function sprintf (fstr, array) {\n  // check the formatted string is for JSON and confirm is a valid JSON\n  array.forEach(function (value) {\n    fstr = format(fstr, value);\n  });\n  return fstr;\n}"
        ],
        [
            "function deepLook(obj, types) {\n  if (typeof (obj) !== 'object') return obj;\n  for (var key in obj) {\n    if (!obj[key].type) {\n      obj[key] = deepLook(obj[key], types);\n    } else {\n      if (!types[obj[key].type]) {\n        throw new Error('No type ' + obj[key].type + ' in Types: key ' + key);\n      }\n\n      // check for range in new object\n      if (typeof obj[key].min !== 'undefined'\n        && typeof types[obj[key].type].min !== 'undefined'\n        && types[obj[key].type].min > obj[key].min) {\n        throw new Error('Key ' + key + ' minimal value (' + obj[key].min\n          + ') is less than acceptable minimal in Types ('\n          + types[obj[key].type].min + ')');\n      }\n\n      if (typeof obj[key].max !== 'undefined'\n        && typeof types[obj[key].type].max !== 'undefined'\n        && types[obj[key].type].max < obj[key].max) {\n        throw new Error('Key ' + key + ' maximal value (' + obj[key].max\n          + ') is in excess of maximal acceptable value in Types ('\n          + types[obj[key].type].max + ')');\n      }\n    }\n\n    // get properties and methods from Types\n    for (var keyParent in types[obj[key].type]) {\n      if (!obj[key][keyParent]) {\n        obj[key][keyParent] = types[obj[key].type][keyParent];\n      }\n    }\n  }\n\n  return obj;\n}"
        ],
        [
            "function validateObjectRequired(options, modelObject, entity, parents, errors) {\n  for (var key in modelObject) {\n    if (!modelObject[key].type && entity) {\n      validateObjectRequired(\n        options,\n        modelObject[key],\n        entity[key],\n        parents + '.' + key,\n        errors);\n    } else if (!options.notRequired && modelObject[key].required && (!entity || !entity[key])) {\n      if (!errors.notFound) errors.notFound = [];\n      var fieldName = parents + '.' + key;\n      errors.notFound.push(fieldName);\n      errors.text.push('Field ' + fieldName + ' not found');\n    }\n  }\n\n  return errors;\n}"
        ],
        [
            "function validateObjectEntity(modelObject, entity, parents, errors) {\n  if (!errors) errors = {};\n  if (!errors.text) errors.text = [];\n  if (!parents) parents = [];\n\n  for (var key in entity) {\n    var fieldName = parents + '.' + key;\n    if (!modelObject || !modelObject[key]) {\n      if (!errors.notRequired) errors.notRequired = [];\n      errors.notRequired.push(fieldName);\n      errors.text.push('Field ' + fieldName + ' not required');\n    } else if (!modelObject[key].type) {\n      validateObjectEntity(modelObject[key], entity[key], [parents, key], errors);\n    } else if (!modelObject[key].check(entity[key])) {\n      if (!errors.notMatched) errors.notMatched = {};\n      errors.notMatched[fieldName] = modelObject[key].type;\n      errors.text.push('Field ' + fieldName + ' not matched with type ' + modelObject[key].type);\n    }\n  }\n\n  return errors;\n}"
        ],
        [
            "function (params) {\n    var res = [];\n    if (typeof (params) === 'undefined') params = { displayEverything: false };\n    if (!this.registeredModels || Object.keys(this.registeredModels).length === 0) {\n      res.push('There is no registered models');\n    } else {\n      res.push('List of registered models');\n      for (var modelName in this.registeredModels) {\n        res.push('  - ' + modelName);\n        if (params.displayEverything) {\n          for (var key in this.registeredModels[modelName]) {\n            res.push('      ' + key + ' : ' + this.registeredModels[modelName][key].type);\n          }\n        }\n      }\n    }\n\n    return res.join('\\n');\n  }"
        ],
        [
            "function (modelName, entity, options, next) {\n    if (typeof options === 'function') next = options;\n    if (!options) options = {};\n\n    var modelObject = this.registeredModels[modelName];\n\n    if (typeof modelName === 'object') {\n      modelObject = deepLook(modelName, this.types);\n    } else if (this.types[modelName]) {\n      if (options.one) this.types[modelName].one = options.one;\n      var result = this.types[modelName].check(entity) ? null : { notMatched: modelName };\n      return typeof next === 'function' ? next(result) : result;\n    }\n\n    var errors = validateObjectRequired(\n      options, modelObject, entity, [],\n      validateObjectEntity(modelObject, entity)\n    );\n    if (!errors.text[0]) errors = {};\n    if (errors && errors.text) errors.text = errors.text.join('. ');\n\n    if (typeof next === 'function') {\n      next(Object.keys(errors).length ? errors : null);\n    } else {\n      return Object.keys(errors).length ? errors : {};\n    }\n  }"
        ],
        [
            "function (type) {\n    var examples = this.getExamples(type);\n    return examples[Math.floor(Math.random() * examples.length)];\n  }"
        ],
        [
            "function SleepCommand(args, define) {\n    this.duration = new statements.ExpressionStatement(args, define);\n    if (this.duration.error) throw this.duration.error;\n}"
        ],
        [
            "function(callback,compilationSource){\n\t\tif( compilationSource && this.cache.compilationSource && this.cache.compilationSource === compilationSource ) return;\n\t\tvar callbackError=function(type,strOrErr){\n\t\t\t/*if(strOrErr instanceof Array){\n\t\t\t\tvar i,finalStr='Errors :';\n\t\t\t\tfor(i in strOrErr){\n\t\t\t\t\tconsole.error(strOrErr[i].stack);\n\t\t\t\t\tfinalStr+=+\"\\n\"+strOrErr[i].toString().slice(7);\n\t\t\t\t}\n\t\t\t\tstrOrErr=finalStr;\n\t\t\t}*/\n\t\t\t//var error=new Error(strOrErr instanceof Error ? strOrErr.toString().slice(7) : strOrErr);\n\t\t\tvar error=strOrErr instanceof Error ? strOrErr : new Error(strOrErr);\n\t\t\terror._Type=type;\n\t\t\tt.cache.error=error;\n\t\t\tcallback(error);\n\t\t},t=this;\n\t\t\n\t\tif(t.compiler){\n\t\t\t(t.compiler.read||function(path,callback){\n\t\t\t\tfs.readFile(t.srcPath,function(err,buffer){\n\t\t\t\t\tif(err) return callback(err);\n\t\t\t\t\tcallback(null,buffer.toString());\n\t\t\t\t});\n\t\t\t})(t.srcPath,function(err,fileContent){\n\t\t\t\tif(err) return callbackError('Reading',err);\n\t\t\t\tt.lint(t,fileContent,function(err){\n\t\t\t\t\tif(err) return callbackError('Linting',err);\n\t\t\t\t\t\n\t\t\t\t\tt.parse(fileContent,function(err,data){\n\t\t\t\t\t\tif(err) return callbackError('Parsing',err);\n\t\t\t\t\t\ttry{\n\t\t\t\t\t\t\tt._compile(data,function(err,results,dependencies){\n\t\t\t\t\t\t\t\tif(err) return callbackError('Compiling',err);\n\t\t\t\t\t\t\t\tif(err===false) return callback();\n\t\t\t\t\t\t\t\tt.optimize(t,results,function(err,optimizedResults){\n\t\t\t\t\t\t\t\t\tif(err) return callbackError('Optimizing',err);\n\t\t\t\t\t\t\t\t\tt.cache.error=null;\n\t\t\t\t\t\t\t\t\tt.cache.compilationTime=Date.now();\n\t\t\t\t\t\t\t\t\tt.cache.compilationSource=compilationSource;\n\t\t\t\t\t\t\t\t\tif(err===false){\n\t\t\t\t\t\t\t\t\t\tt.cache.dependencies=null;\n\t\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tt.cache.dependencies=!dependencies || dependencies.app ? dependencies : {app:dependencies};\n\t\t\t\t\t\t\t\t\tt.write(optimizedResults,callback);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}catch(err){\n\t\t\t\t\t\t\treturn callbackError('Compiling',err);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}else{\n\t\t\tt.copy(callback);\n\t\t}\n\t}"
        ],
        [
            "function errorHandler(response, error) {\n    response\n      .status(500)\n      .send(error !== undefined && error !== null ? error.toString() : '')\n  }"
        ],
        [
            "function(cb) {\n      Person.find('Scott', function(err, person) {\n        if (err) { return cb(err); }\n\n        assert(person.uuid);\n        assert(person.name === 'Scott');\n        scott = person;\n        cb();\n      });\n    }"
        ],
        [
            "function(cb) {\n      var calli = Dog.new({ name: 'Calli' });\n      // saves and creates connection\n      scott.addDog(calli, function(err) {\n        if (err) { return cb(err); }\n\n        scott.fetchDogs(function(err) {\n          if (err) { return cb(err); }\n\n          assert(scott.dogs);\n          var dog = scott.dogs[0];\n          assert(dog.uuid);\n          assert(dog.name === 'Calli');\n          cb();\n        });\n      });\n    }"
        ],
        [
            "function CircleCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 3) throw new SyntaxError('CIRCLE command requires 3 arguments');\n    this.x = parsed.args[0];\n    this.y = parsed.args[1];\n    this.radius = parsed.args[2];\n    this.stroke = parsed.args.length > 3 ? parsed.args[3] : false;\n}"
        ],
        [
            "function Polling (objGoogleCheckout) {\n\tvar self = this;\n\t\n\t//todo: check the constructor name\n\tassert.ok(objGoogleCheckout, \"A GoogleCheckout object is the only required argument\");\n\t\n\tself.gc = objGoogleCheckout;\n\tself.settings = self.gc.settings;\n\tself.continueToken = null;\n}"
        ],
        [
            "function TriangleCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 6) throw new SyntaxError('TRIANGLE command requires 6 arguments');\n    this.x1 = parsed.args[0];\n    this.y1 = parsed.args[1];\n    this.x2 = parsed.args[2];\n    this.y2 = parsed.args[3];\n    this.x3 = parsed.args[4];\n    this.y3 = parsed.args[5];\n    this.stroke = parsed.args.length > 6 ? parsed.args[6] : false;\n}"
        ],
        [
            "function processFile(file) {\n\t\tvar changed = true;\n\n\t\twhile(changed && !file.processed) {\n\t\t\tchanged = false;\n\t\t\tchanged = processWraps(file);\n\t\t\tchanged = processInserts(file);\n\t\t}\n\t\tfile.processed = true;\n\t}"
        ],
        [
            "function Service(name) {\n  debug('new service: %s', name);\n  assert(name, \"service not supplied with name\");\n\n  this.name       = name;\n  this.middleware = [];\n  this.uri        = new Uri();\n  this.status     = new Status();\n\n  this.initialize();\n\n  return this;\n}"
        ],
        [
            "function Analyzer(config, state) {\n\tconfig = config || {};\n\n\tthis.state = state;\n\n\tthis.config = extend(true, {\n\t\tfinders: {\n\t\t\tstyl : [\n\t\t\t\t{\n\t\t\t\t\tname: 'regex',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tpattern: /^\\s*(?:@import|@require)\\s+['\"](.+?)['\"](?:$|;)/gm,\n\t\t\t\t\t\texclude: ['nib']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tcoffee: [\n\t\t\t\t{\n\t\t\t\t\tname: 'regex',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tpattern: /^\\s*(?:.+?\\s*[=\\:\\(\\{\\;])?\\s*require\\s*(?:\\()?['\"]([^'\"]+)['\"](?:\\))?/gm\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tcjsx: [\n\t\t\t\t{\n\t\t\t\t\tname: 'regex',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tpattern: /^\\s*(?:.+?\\s*[=\\:\\(\\{\\;])?\\s*require\\s*(?:\\()?['\"]([^'\"]+)['\"](?:\\))?/gm\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tjs: [\n\t\t\t\t{\n\t\t\t\t\tname: 'regex',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tpattern: [\n\t\t\t\t\t\t\t/^\\s*(?:.+?\\s*[=\\:\\(\\{\\;])?\\s*require\\s*\\(?['\"]([^'\"]+)['\"]\\)?/gm,\n\t\t\t\t\t\t\t/\\bimport\\s+(?:.+\\s+from\\s+)?[\\'\"]([^\"\\']+)[\"\\']/gm\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tjsx: [\n\t\t\t\t{\n\t\t\t\t\tname: 'regex',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tpattern: [\n\t\t\t\t\t\t\t/^\\s*(?:.+?\\s*[=\\:\\(\\{\\;])?\\s*require\\s*\\(?['\"]([^'\"]+)['\"]\\)?/gm,\n\t\t\t\t\t\t\t/\\bimport\\s+(?:.+\\s+from\\s+)?[\\'\"]([^\"\\']+)[\"\\']/gm\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\n\t\tresolvers: {\n\t\t\tstyl : [\n\t\t\t\t{\n\t\t\t\t\tname: 'basic',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t'styl',\n\t\t\t\t\t\t\t'css'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tcoffee: [\n\t\t\t\t{\n\t\t\t\t\tname: 'common-js',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t'coffee',\n\t\t\t\t\t\t\t'js',\n\t\t\t\t\t\t\t'cjsx',\n\t\t\t\t\t\t\t'jsx'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\n\t\t\tcjsx: [\n\t\t\t\t{\n\t\t\t\t\tname: 'common-js',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t'coffee',\n\t\t\t\t\t\t\t'js',\n\t\t\t\t\t\t\t'cjsx',\n\t\t\t\t\t\t\t'jsx'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tjs: [\n\t\t\t\t{\n\t\t\t\t\tname: 'common-js',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t'coffee',\n\t\t\t\t\t\t\t'js',\n\t\t\t\t\t\t\t'cjsx',\n\t\t\t\t\t\t\t'jsx'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\n\t\t\tjsx: [\n\t\t\t\t{\n\t\t\t\t\tname: 'common-js',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\textensions: [\n\t\t\t\t\t\t\t'coffee',\n\t\t\t\t\t\t\t'js',\n\t\t\t\t\t\t\t'cjsx',\n\t\t\t\t\t\t\t'jsx'\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}, config);\n\n\tthis.finders = {};\n\tthis.resolvers = {};\n\n\tthis.createFinders();\n\tthis.createResolvers();\n}"
        ],
        [
            "function RrectCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 5) throw new SyntaxError('RRECT command requires 5 arguments');\n    this.x1 = parsed.args[0];\n    this.y1 = parsed.args[1];\n    this.x2 = parsed.args[2];\n    this.y2 = parsed.args[3];\n    this.radius = parsed.args[4];\n    this.stroke = parsed.args.length > 5 ? parsed.args[5] : false;\n}"
        ],
        [
            "function cons (b, value, next) {\n  var free = readValue(b, 0) || 8\n  updateValue(b, free, value); updateNext(b, free, next)\n  updateValue(b, 0, free+8) //update free pointer\n  return free\n}"
        ],
        [
            "function insert (b, node, value) {\n  return updateNext(b, node, cons(b, value, readNext(b, node)))\n}"
        ],
        [
            "function init(pathToModels, cb, addToSwagger) {\n\tmodelPath = pathToModels;\n\tglob(modelPath + '/**/*.js', function(err, files) {\n\t\tif (err) return cb && cb(err);\n\n\t\tfiles.forEach(function(file) {\n\t\t\tvar Model = require(file)(),\n\t\t\t\tmodelSwagger = null;\n\n            if (Model.init) {\n                Model.init();\n            }\n\n            modelSwagger = Model.getSwagger();\n            \n\t\t\tif (modelSwagger && addToSwagger) {\n\t\t\t\tmodelSwagger.forEach(function(swaggerResource) {\n\t\t\t\t\tswagger[swaggerMethodName[swaggerResource.spec.method.toLowerCase()]](swaggerResource);\n\t\t\t\t});\n\t\t\t}\n\t\t\tmodels.push(Model);\n\t\t});\n\n\t\treturn cb && cb(null, models);\n\t});\n}"
        ],
        [
            "function ArgumentStatement(args, options, define) {\n    options = options || {};\n    this.value = args;\n    this.flags = {};\n    this.args = [];\n    this.options = options;\n\n    if (typeof options.parse === 'undefined') options.parse = true;\n    if (typeof options.separator === 'undefined') options.separator = ',';\n    if (typeof options.parseArgs === 'undefined') options.parseArgs = true;\n\n    if (options.parse) {\n        if (options.flags) {\n            var isFlag = true;\n\n            // Find all matching flags  until no flag is found\n            while(isFlag) {\n                var firstFlagEnd = args.indexOf(' ');\n                if (firstFlagEnd === -1) firstFlagEnd = args.length;\n                var firstFlag = args.substring(0, firstFlagEnd).trim().toUpperCase();\n\n                if (options.flags.indexOf(firstFlag) !== -1) {\n                    this.flags[firstFlag] = true;\n                    args = args.substring(firstFlagEnd).trim();\n                }\n                else isFlag = false;\n            }\n        }\n\n        this.rawArgs = args;\n\n        args = args.trim();\n        var argList = [args];\n        if (options.separator) {\n            if (!args.length) argList = [];\n            else {\n                var positions = util.findPositions(args, [\n                    {'start': '\"', 'end': '\"'},\n                    {'start': '(', 'end': ')'}\n                ]);\n                argList = util.splitOutside(args, options.separator, positions);\n            }\n        }\n        for (var i = 0; i < argList.length; i++) {\n            var arg = argList[i].trim();\n            if (options.parseArgs) arg = new statements.ExpressionStatement(arg, define);\n            this.args.push(arg);\n        }\n    }\n}"
        ],
        [
            "function OpenCommand(args, define) {\n    var lowerArgs = args.toLowerCase();\n    var forIndex = lowerArgs.indexOf(' for ');\n    if (forIndex === -1) throw new SyntaxError('OPEN without FOR');\n    var filename = new statements.ExpressionStatement(args.substring(0, forIndex).trim(), define);\n\n    var asIndex = lowerArgs.indexOf(' as ');\n    if (asIndex === -1) throw new SyntaxError('OPEN without AS');\n    var type = args.substring(forIndex + 5, asIndex).trim().toLowerCase();\n    if (type !== 'input' && type !== 'output' && type !== 'append') throw new SyntaxError('Invalid mode');\n\n    var pointer = new statements.ExpressionStatement(args.substring(asIndex + 4).trim(), define);\n    if (!(pointer.child instanceof statements.PointerStatement)) throw new SyntaxError('Expected pointer');\n\n    this.filename = filename;\n    this.type = type;\n    this.pointer = pointer;\n}"
        ],
        [
            "function CommonJSResolverStrategy(config) {\n\tBasicResolverStrategy.call(this, config);\n\tthis.config = extend(true, this.config, {}, config);\n}"
        ],
        [
            "function WhileCommand(args, define) {\n    var parsed = new statements.ArgumentStatement(args, {\n        separator: false\n    });\n\n    this.condition = parsed.args[0];\n    this.block = define({\n        start: 'WHILE',\n        end: 'WEND'\n    });\n}"
        ],
        [
            "function load(file, options) {\n  var stream = fs.createReadStream(file, options);\n  function onEnd() {\n    this.emit('load');\n  }\n  function onError(err) {\n    this.emit('error', err);\n  }\n\n  //stream.on('data', function onData(buf) {\n    //console.dir('got buffer length: ' + buf.length);\n  //})\n\n  stream.on('end', onEnd.bind(this));\n  stream.on('error', onError.bind(this));\n  stream.pipe(this);\n  return this;\n}"
        ],
        [
            "function(cb) {\n            // Callback is optional\n            cb = util.optional(cb);\n\n            // Grab policies config & policy modules and trigger callback\n            this.loadMiddleware(function (err) {\n                if (err) return cb(err);\n\n                sails.log.verbose('Finished loading policy middleware logic.');\n                cb();\n            }.bind(this));\n\n            // Before routing, curry controller functions with appropriate policy chains\n            sails.on('router:before', this.bindPolicies);\n        }"
        ],
        [
            "function() {\n            // Build / normalize policy config\n            this.mapping = this.buildPolicyMap();\n            _bindPolicies(this.mapping, sails.middleware.controllers);\n\n            // Emit event to let other hooks know we're ready to go\n            sails.log.verbose('Policy-controller bindings complete!');\n            sails.emit('hook:policies:bound');\n        }"
        ],
        [
            "function () {\n            var mapping = { };\n            _.each(sails.config.policies, function (_policy, controllerId) {\n\n                // Accept `FooController` or `foo`\n                // Case-insensitive\n                controllerId = util.normalizeControllerId(controllerId);\n\n                // Controller-level policy ::\n                // Just map the policy to the controller directly\n                if (!util.isDictionary(_policy)) {\n                    mapping[controllerId] = policyHookDef.normalizePolicy(_policy);\n                    return;\n                }\n\n                // Policy mapping contains a sub-object ::\n                // So we need to dive in and build/normalize the policy mapping from here\n                // Mapping each policy to each action for this controller\n                mapping[controllerId] = {};\n                _.each( _policy, function (__policy, actionId) {\n\n                    // Case-insensitive\n                    actionId = actionId.toLowerCase();\n\n                    mapping[controllerId][actionId] = policyHookDef.normalizePolicy(__policy);\n                });\n            });\n\n            return mapping;\n        }"
        ],
        [
            "function (event) {\n            // Only pay attention to delegated route events\n            // if `policy` is declared in event.target\n            if ( !event.target || !event.target.policy ) {\n                return;\n            }\n\n            // Bind policy function to route\n            var fn = this.lookupFn(event.target.policy, 'config.routes');\n            sails.router.bind(event.path, fn, event.verb, _.merge(event.options, event.target));\n        }"
        ],
        [
            "function FunctionStatement(name, args) {\n    if (name[name.length - 1] === '$') {\n        this.type = 'string';\n        this.name = name.substring(0, name.length - 1);\n    } else {\n        this.type = 'number';\n        this.name = name;\n    }\n\n    var positions = util.findPositions(args, [\n        { 'start': '\"', 'end': '\"' },\n        { 'start': '(', 'end': ')' }\n    ]);\n    var argList = util.splitOutside(args, \",\", positions);\n\n    this.args = [];\n    for (var i = 0; i < argList.length; i++) {\n        this.args.push(new statements.ExpressionStatement(argList[i].trim()));\n    }\n}"
        ],
        [
            "function LoadspriteCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 2) throw new SyntaxError('LOADSPRITE command requires 2 arguments');\n    else if (parsed.args.length > 2 && parsed.args.length < 5) throw new SyntaxError('LOADSPRITE command requires 5 arguments');\n\n    this.id = parsed.args[0];\n\n    if (parsed.args.length > 2) {\n        this.x1 = parsed.args[1];\n        this.y1 = parsed.args[2];\n        this.x2 = parsed.args[3];\n        this.y2 = parsed.args[4];\n    } else {\n        this.fileName = parsed.args[1];\n    }\n}"
        ],
        [
            "function(verb, path, controller, method){\n\n        // Only add the route if we recognise the verb.\n        if (this.__verbs.indexOf(verb) >= 0){\n\n            // Create an actual object.\n            var entry = {\n                verb: verb,\n                path: path,\n                controller: controller,\n                method: method\n            };\n\n            this.routes.push(entry);\n        }\n\n        // Otherwise, they've made a mistake in their config, so throw an error.\n        else {\n            throw new Error('Unrecognised HTTP verb for route: ' + path);\n        }\n\n    }"
        ],
        [
            "function(url, val){\n\n        // Create a new object that we can manipulate safely.\n        var object = extend({}, val);\n\n        // Flag so we remember to append any attributes that can't be bound.\n        var append = false;\n\n        // If there are still parameters to bind, pull them out.\n        // Note: We use a different regex here because we need the global flag to ensure we pull all remaining bindings.\n        var remaining = url.match(/:\\w+/ig);\n        if (remaining && remaining.length > 0){\n\n            // Iterate over the remaining potential bindings, looking for matches by name.\n            for (var j = 0; j < remaining.length; j++){\n\n                // Grab the key, stripping the : character.\n                var key = remaining[j].replace(':', '');\n\n                // Does our object contain that key?\n                if (object[key] !== undefined){\n\n                    // Is it a type we can serialise?\n                    if (this.canSerialise(object[key])){\n\n                        // If it is, replace that value.\n                        var keyRegex = new RegExp(':' + key);\n                        url = url.replace(keyRegex, object[key]);\n                    }\n\n                    // Even if it wasn't, delete the value so we don't try again later.\n                    delete object[key];\n                }\n            }\n\n            // If there are still fields left on our object, they need to become query parameters.\n            if (object !== {}){\n                append = true;\n            }\n        }\n\n        // Otherwise, we're going to append the object's values as key/value pairs.\n        else {\n            append = true;\n        }\n\n        // If we need to append key/values, do so.\n        if (append){\n\n            for (var attr in object){\n\n                // If the value is an object or a function, ignore it.\n                if (this.canSerialise(object[attr])){\n\n                    // How are we appending?\n                    var joiner = (url.indexOf('?') >= 0) ? \"&\" : \"?\";\n\n                    // Append.\n                    url += joiner + attr + \"=\" + object[attr];\n                }\n            }\n        }\n\n        return url;\n    }"
        ],
        [
            "function(app, route){\n\n        var self = this;\n\n        var controller;\n        var controllerPath = self.options.controllersPath + route.controller;\n\n        // Load the controller.\n        try {\n            controller = require(self.options.rootPath + controllerPath);\n        }\n        catch (e) {\n            throw new Error('The specified controller (' + controllerPath + ') does not exist.');\n        }\n\n        if (controller) {\n\n            // If the specified method does not exist, throw an exception.\n            if (controller[route.method] === undefined) {\n                throw new Error('The specified method (' + route.method + ') does not exist on the controller (' + controllerPath + ').');\n            }\n\n            // Bind the route.\n            app[route.verb](route.path, controller[route.method]);\n        }\n    }"
        ],
        [
            "function(app, route){\n\n        var self = this;\n\n        // Figure out the folder they want to bind.\n        var folderPath = route.controller.replace(/staticDir:/g, '');\n        var folder = self.options.rootPath + folderPath;\n\n        // Make sure that's actually a folder.\n        try {\n            var info = fs.lstatSync(folder);\n            if (info.isDirectory()) {\n                app.use(express.static(folder));\n            }\n        }\n        catch (e) {\n            throw new Error('The specified static path (' + folderPath + ') does not exist or is not a directory.');\n        }\n    }"
        ],
        [
            "function(app){\n\n        // Cache the instance.\n        var self = this;\n\n        // Insert the instance into app.locals so it can be used in views.\n        app.locals[self.options.templateVar] = self;\n\n        // Grab the routes.\n        var routes = self.getRoutes();\n\n        // Bind them.\n        routes.forEach(function(route){\n\n            // If the controller begins with 'staticDir:', it's a static route.\n            if (route.controller.indexOf('staticDir:') === 0) {\n                self.bindStaticRoute(app, route);\n            }\n\n            else {\n                self.bindRegularRoute(app, route);\n            }\n        });\n    }"
        ],
        [
            "function(){\n\n        // If we've already loaded the routes, skip.\n        if (this.routes.length === 0){\n\n            // Grab the entries.\n            var routes;\n            try {\n                routes = this.readFile(this.options.rootPath + this.options.routesFile);\n            }\n            catch (e) {\n                throw new Error('The specified routes file (' + this.options.routesFile + ') does not exist or could not be read.');\n            }\n\n            // Turn them into actual route entries.\n            for (var i = 0; i < routes.length; i++){\n\n                // Split it up into its component parts (VERB /path controller.method).\n                // TODO: An equivalent to PHP's list() would be really awesome too.\n                var bits = routes[i].split(/\\s+/);\n\n                // Split the controller up further, so we can store the file and method separately.\n                var controller = bits[2].split('.');\n\n                // If the controller contains a wildcard, we handle it differently.\n                if (controller[1] == '{method}') {\n                    this.getWildcardRoutes(bits[0].toLowerCase(), bits[1], controller[0]);\n                }\n\n                else {\n                    this.addNewRouteEntry(bits[0].toLowerCase(), bits[1], controller[0], controller[1]);\n                }\n            }\n        }\n\n        return this.routes;\n    }"
        ],
        [
            "function(verb, path, controllerName){\n\n        // Load the referenced controller.\n        var controllerPath = this.options.controllersPath + controllerName;\n        try {\n            var controller = require(this.options.rootPath + controllerPath);\n\n            // Iterate over the controller, creating new route entries for each function.\n            for (var field in controller) {\n\n                if (typeof controller[field] == 'function') {\n                    this.addNewRouteEntry(verb, path.replace(/{method}/, field), controllerName, field);\n                }\n            }\n        }\n        catch (e) {\n            throw new Error('The specified controller (' + controllerPath + ') does not exist.');\n        }\n    }"
        ],
        [
            "function(path){\n\n        // Define the array we'll return.\n        var routes = [];\n\n        // Grab the FS library.\n        var fs = require('fs');\n\n        // Read the contents from disk.\n        var array = fs.readFileSync(path).toString().split(\"\\n\");\n\n        // We need to post-process since there might have been empty lines, or comments.\n        array.forEach(function(route){\n\n            // If it's not an empty line or a comment, add it.\n            if (route !== \"\" && route.match(/^#/) === null) {\n                routes.push(route);\n            }\n        });\n\n        return routes;\n    }"
        ],
        [
            "function(action){\n\n        var url;\n        var error;\n\n        // Iterate over the routes, looking for a match.\n        var routes = this.getRoutes();\n        for (var i = 0; url === undefined && i < routes.length; i++){\n\n            try {\n\n                // Simplify access.\n                var route = routes[i];\n\n                // Check the controller + method. If we find one, figure out the URL to return.\n                if (action == route.controller + '.' + route.method){\n\n                    var params = [];\n\n                    // If there are parameters, bind them.\n                    if (arguments.length > 1) {\n\n                        // Turn them into a proper array.\n                        params = Array.prototype.slice.apply(arguments);\n\n                        // And drop the first entry (which was the action itself).\n                        params = params.slice(1);\n                    }\n\n                    // We always call bind, even with an empty array, to see if we generate an error.\n                    url = this.bindUrl(route.path, params);\n                }\n            }\n\n            catch(e) {\n\n                // Store the error in case we need to rethrow it.\n                error = e;\n            }\n\n        }\n\n        // If we found a match, return it.\n        if (url !== undefined) {\n            return url;\n        }\n\n        // Otherwise, throw an exception.\n        else {\n\n            // If we captured an earlier error, reuse that (since it implies we found a match but couldn't bind it).\n            if (error !== undefined) {\n                throw error;\n            }\n\n            else {\n                throw new Error(\"No matching action was found.\");\n            }\n        }\n    }"
        ],
        [
            "function(value){\n\t\t/*#if BROWSER*/ if(this._label) this._label.text(value); else /*#/if*/\n\t\tthis._label=$.create('label').attr('for',this.getAttr('id'))/*#if BROWSER*/.prependTo(this._container)/*#/if*/.text(value);\n\t\treturn this;\n\t}"
        ],
        [
            "function parse(code) {\n    try {\n        var labels = {};\n        var root = [];\n        var manager = new BlockManager();\n\n        var lines = code.split('\\n');\n        for (var i = 0; i < lines.length; i++) {\n            try {\n                var line = parseLine(lines[i].trim(), i, labels, false, manager);\n                if (line instanceof SyntaxError) throw createLineError(line, i);\n                if (line.error instanceof SyntaxError) throw createLineError(line.error, i);\n                root[i] = line;\n            } catch (ex) {\n                throw createLineError(ex, i);\n            }\n        }\n\n        return new AbstractSyntaxTree(root, labels, manager);\n    } catch (ex) {\n        return { \"error\": ex };\n    }\n}"
        ],
        [
            "function CommandStatement(name, args, manager, line) {\n    this.name = name;\n    this.args = args;\n\n    if (!commands[name]) throw new SyntaxError('Unknown command: ' + name);\n    this.command = new commands[name](args, manager.create(line));\n}"
        ],
        [
            "function BasicResolverStrategy(config) {\n\tResolverStrategy.call(this, config);\n\tthis.config = extend(true, this.config, {}, config);\n}"
        ],
        [
            "function toArray() {\n    return Object\n      .keys(data)\n      .map(function(name) { return data[name]; })\n      .sort(function(a, b) {\n        return a.compareTo(b);\n      });\n  }"
        ],
        [
            "function add(snapshot) {\n    return Promise\n      .resolve(mapFn(snapshot))\n      .then(function(val) {\n        data[snapshot.key()] = val;\n      });\n  }"
        ],
        [
            "function emitValue() {\n    var arr = toArray();\n    marker = arr[arr.length - 1];\n    setTimeout(function() {\n      emitter.emit('value', arr);\n    }, 0);\n  }"
        ],
        [
            "function onChildAdd(newData) {\n\n    // ignore all events before first read\n    if (!started) return;\n\n    // ignore already added item\n    if (data[newData.key()]) return;\n\n    // ignore older items that are not loaded\n    if ( !ended\n      && !data[newData.key()]\n      && marker && newData.compareTo(marker) > 0) return;\n\n    return add(newData).then(emitValue);\n  }"
        ],
        [
            "function addChildren(newData) {\n    var promises = [];\n    newData.forEach(function (child) {\n      promises.push(add(child));\n    });\n\n    return Promise.all(promises).then(emitValue);\n  }"
        ],
        [
            "function modalOpen (options) {\n    if (isString(options)) options = optionsFromTarget(options);\n    var modal = select('#d3-view-modal');\n    if (!modal.size())\n        select('body').append('modal').mount(options, vm => vm.model.$showModal());\n    else\n        modal.model().$update(options).$showModal();\n}"
        ],
        [
            "function ColorCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 3) throw new SyntaxError('COLOR command requires 3 arguments');\n    this.red = parsed.args[0];\n    this.green = parsed.args[1];\n    this.blue = parsed.args[2];\n    this.alpha = parsed.args.length > 3 ? parsed.args[3] : false;\n}"
        ],
        [
            "function onChange () {\n    if (props.onChange) {\n      var changeHandlers = [...props.onChange]\n      var value = editor.getValue()\n      return changeHandlers.map((f) => f(value))\n    }\n  }"
        ],
        [
            "function PrintCommand(args, define) {\n    if (args[args.length - 1] === \";\") {\n        this.noLine = true;\n        args = args.substr(-1);\n    } else this.noLine = false;\n\n    var parsed = new statements.ArgumentStatement(args, {\n        flags: ['USING'],\n        parseArgs: false\n    });\n\n    if (parsed.flags.USING) {\n        if (parsed.args.length !== 1) throw new SyntaxError('PRINT USING command requires 1 argument');\n        if (parsed.args.length > 1) throw new SyntaxError('Unexpected comma');\n\n        var semicolonIndex = parsed.args[0].indexOf(';');\n        if (semicolonIndex === -1) throw new SyntaxError('Expected semicolon');\n\n        var formatExpression = new statements.ExpressionStatement(parsed.args[0].substring(0, semicolonIndex).trim(), define);\n        var numberExpression = new statements.ExpressionStatement(parsed.args[0].substring(semicolonIndex + 1).trim(), define);\n        if (formatExpression.error instanceof SyntaxError) throw formatExpression.error;\n        if (numberExpression.error instanceof SyntaxError) throw numberExpression.error;\n\n        this.formatExpr = formatExpression;\n        this.numberExpr = numberExpression;\n    } else {\n        var items = [];\n        for (var i = 0; i < parsed.args.length; i++) {\n            var expr = new statements.ExpressionStatement(parsed.args[i], define);\n            if (expr.error instanceof SyntaxError) throw expr.error;\n            items.push(expr);\n        }\n        this.items = items;\n    }\n}"
        ],
        [
            "function intoExport(obj) {\n    for (var k in obj) {\n        if (!obj.hasOwnProperty(k)) continue;\n        exports[k] = obj[k];\n    }\n}"
        ],
        [
            "function charAt(index) {\r\n    return value => value.length <= index ? undefined : value.charAt(index);\r\n}"
        ],
        [
            "function replace(target, replaceWith) {\r\n    function escapeRegExp(str) {\r\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\r\n    }\r\n    return target instanceof RegExp\r\n        ? value => value.replace(target, replaceWith)\r\n        : replace(new RegExp(escapeRegExp(target), \"g\"), replaceWith);\r\n}"
        ],
        [
            "function ExpressionStatement(data, define) {\n    this.child = parseExpression(data, define ? define.line : 'unknown');\n\n    if (this.child instanceof SyntaxError) throw this.child;\n    else if (this.child.error) throw this.child.error;\n}"
        ],
        [
            "function cleanLines(block, lines) {\n\t\tvar removeFirst = false\n\t\tif (lines.length && emptyRegex.test(lines[0].str)) {\n\t\t\tblock.line += 1\n\t\t\tblock.size -= 1\n\t\t\tremoveFirst = true\n\t\t}\n\n\t\treturn lines.filter(function (each, i) {\n\t\t\treturn !(!i && removeFirst) && !commentRegex.test(each.str)\n\t\t})\n\t}"
        ],
        [
            "function drawAllDataPoints(animationDecimal){\n\t\t\tvar rotationDegree = (2*Math.PI)/data.datasets[0].data.length;\n\n\t\t\tctx.save();\n\t\t\t//translate to the centre of the canvas.\n\t\t\tctx.translate(width/2,height/2);\n\t\t\t\n\t\t\t//We accept multiple data sets for radar charts, so show loop through each set\n\t\t\tfor (var i=0; i<data.datasets.length; i++){\n\t\t\t\tctx.beginPath();\n\n\t\t\t\tctx.moveTo(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[0],calculatedScale,scaleHop)));\n\t\t\t\tfor (var j=1; j<data.datasets[i].data.length; j++){\n\t\t\t\t\tctx.rotate(rotationDegree);\t\n\t\t\t\t\tctx.lineTo(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[j],calculatedScale,scaleHop)));\n\t\t\t\n\t\t\t\t}\n\t\t\t\tctx.closePath();\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tctx.fillStyle = data.datasets[i].fillColor;\n\t\t\t\tctx.strokeStyle = data.datasets[i].strokeColor;\n\t\t\t\tctx.lineWidth = config.datasetStrokeWidth;\n\t\t\t\tctx.fill();\n\t\t\t\tctx.stroke();\n\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\tif (config.pointDot){\n\t\t\t\t\tctx.fillStyle = data.datasets[i].pointColor;\n\t\t\t\t\tctx.strokeStyle = data.datasets[i].pointStrokeColor;\n\t\t\t\t\tctx.lineWidth = config.pointDotStrokeWidth;\n\t\t\t\t\tfor (var k=0; k<data.datasets[i].data.length; k++){\n\t\t\t\t\t\tctx.rotate(rotationDegree);\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.arc(0,animationDecimal*(-1*calculateOffset(data.datasets[i].data[k],calculatedScale,scaleHop)),config.pointDotRadius,2*Math.PI,false);\n\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tctx.rotate(rotationDegree);\n\t\t\t\t\n\t\t\t}\n\t\t\tctx.restore();\n\t\t\t\n\t\t\t\n\t\t}"
        ],
        [
            "function populateLabels(labelTemplateString, labels, numberOfSteps, graphMin, stepValue) {\n        if (labelTemplateString) {\n            //Fix floating point errors by setting to fixed the on the same decimal as the stepValue.\n            for (var i = 1; i < numberOfSteps + 1; i++) {\n                labels.push(tmpl(labelTemplateString, {value: (graphMin + (stepValue * i)).toFixed(getDecimalPlaces(stepValue))}));\n            }\n        }\n    }"
        ],
        [
            "function(path){\n\tvar xhr=new XMLHttpRequest;\n\txhr.open('GET',baseUrl+'web/'+path+'.js', false);\n\txhr.send();\n\tif(xhr.status !== 200) new FatalError(/*#if DEV*/'Unable to load: '+path+'.js'/*#/if*/); \n\tvar s = document.createElement('script');\n\ts.type = \"text/javascript\";\n\ts.text = xhr.responseText;\n\tdocument.getElementsByTagName('head')[0].appendChild(s);\n}"
        ],
        [
            "function TcolorCommand(args) {\n    var parsed = new statements.ArgumentStatement(args);\n\n    if (parsed.args.length < 3) throw new SyntaxError('TCOLOR command requires 3 arguments');\n    this.red = parsed.args[0];\n    this.green = parsed.args[1];\n    this.blue = parsed.args[2];\n}"
        ],
        [
            "function publish(subject, op, target) {\n  try {\n    var type = (_.isString(target)) ? target : target.type;\n    var topic = getTopic(type);\n    // optimization: would be nice to tell if there are subscribers before I bother to create\n    var event = new Event(subject, op, target);\n    provider.publish(topic, event);\n  }\n  catch (err) {\n    logger.error('unable to publish event', err);\n  }\n}"
        ],
        [
            "function ExecutionContext(options) {\n    EventEmitter.call(this);\n\n    this.stringVars = {};\n    this.numberVars = {};\n    this.pointers = {};\n    this.gosubs = [];\n    this.private = {\n        rnd_seed: Math.random(),\n        sprites: [],\n        data: []\n    };\n    this.constants = require('./constants');\n    this.running = false;\n    options = options || {};\n    this.options = options;\n\n    if (typeof options.delay === 'undefined') options.delay = false;\n\n    // Copy all functions as constants\n    for (var k in functions) {\n        if (!functions.hasOwnProperty(k)) continue;\n        this.constants[k] = functions[k];\n    }\n\n    // Stop multiple contexts conflicting with constants\n    this.constants = pUtil.shallowClone(this.constants);\n}"
        ],
        [
            "function setArrayIndexAt(arr, dimensions, val, data) {\n    var currentDimension = dimensions[0].execute(data);\n    data.validate(currentDimension, 'number');\n    currentDimension -= 1;\n    if (currentDimension < 0) currentDimension = 0;\n\n    if (arr.length <= currentDimension) throw new Error('Invalid array bounds');\n    var item = arr[currentDimension];\n    if (dimensions.length > 1) {\n        if (!Array.isArray(item)) throw new Error('Invalid array dimensions');\n        return setArrayIndexAt(arr[currentDimension], dimensions.slice(1), val,  data);\n    } else arr[currentDimension] = val;\n}"
        ],
        [
            "function getArrayIndexAt(arr, dimensions, data) {\n    var currentDimension = dimensions[0];\n    data.validate(currentDimension, 'number');\n    currentDimension = Math.max(0, Math.floor(currentDimension - 1));\n\n    if (arr.length <= currentDimension) throw new Error('Invalid array bounds');\n    var item = arr[currentDimension];\n    if (dimensions.length > 1) {\n        if (!Array.isArray(item)) throw new Error('Invalid array dimensions');\n        return getArrayIndexAt(arr[currentDimension], dimensions.slice(1), data);\n    } else return item;\n}"
        ],
        [
            "function createArrayDepth(dimensions, endpoint) {\n    var currentDimension = dimensions[0];\n\n    var newArr = new Array(currentDimension);\n    for (var i = 0; i < currentDimension; i++) {\n        var value = endpoint;\n        if (dimensions.length > 1) value = createArrayDepth(dimensions.slice(1), endpoint);\n        newArr[i] = value;\n    }\n    return newArr;\n}"
        ],
        [
            "function (section) {\n\t\tsection.children.forEach(function (child) {\n\t\t\tif (child.type === 'section') {\n\t\t\t\tfinalParse(child)\n\t\t\t} else if (child.type === 'text' ||\n\t\t\t\tchild.type === 'value' ||\n\t\t\t\tchild.type === 'code') {\n\t\t\t\tvar sliceStart = child.line - 1,\n\t\t\t\t\tsliceEnd = child.line + child.size - 1,\n\t\t\t\t\tsubLines = lines.slice(sliceStart, sliceEnd)\n\t\t\t\tif (child.type === 'text') {\n\t\t\t\t\tchild.content = subLines.join('\\n')\n\t\t\t\t} else if (child.type === 'code') {\n\t\t\t\t\tchild.language = subLines[0].substr(3)\n\t\t\t\t\tchild.content = subLines.slice(1, -1).join('\\n')\n\t\t\t\t} else if (child.type === 'value') {\n\t\t\t\t\tchild.content = subLines.join('\\n')\n\n\t\t\t\t\t// Remove starting tab character\n\t\t\t\t\tparseValue(child, subLines.map(function (e, i) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tline: child.line + i,\n\t\t\t\t\t\t\tstr: e.substr(1)\n\t\t\t\t\t\t}\n\t\t\t\t\t}), throwSyntaxError)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}"
        ],
        [
            "function takeHeader(content, level, name) {\n\t\tvar currLevel = sectionStack.length\n\n\t\tif (level > currLevel + 1) {\n\t\t\tthrowSyntaxError('Unexpected header level ' + level + ' on section level ' + currLevel)\n\t\t} else if (level === 1) {\n\t\t\tthrowSyntaxError('There can be only one header level 1, the first line of the file')\n\t\t}\n\n\t\t// Walk out\n\t\tsectionStack.length = level - 1\n\n\t\t// Create section\n\t\tsection = {\n\t\t\ttype: 'section',\n\t\t\tname: name || '',\n\t\t\tline: line,\n\t\t\tsize: 1,\n\t\t\tcontent: content,\n\t\t\tlevel: level,\n\t\t\tchildren: []\n\t\t}\n\t\tsectionStack[sectionStack.length - 1].children.push(section)\n\t\tsectionStack.push(section)\n\t}"
        ],
        [
            "function throwSyntaxError(message, errorLine, size) {\n\t\terrorLine = errorLine === undefined ? line : errorLine\n\t\tsize = size === undefined ? 1 : size\n\t\tvar snippet = getSnippet(source, errorLine, size),\n\t\t\terr = new SyntaxError(message + '\\n' + snippet)\n\t\terr.line = errorLine\n\t\tthrow err\n\t}"
        ],
        [
            "function appendLine(type) {\n\t\tvar len = section.children.length\n\t\tif (newBlock ||\n\t\t\t!len ||\n\t\t\tsection.children[len - 1].type !== type) {\n\t\t\tsection.children.push({\n\t\t\t\ttype: type,\n\t\t\t\tline: line,\n\t\t\t\tsize: 1\n\t\t\t})\n\t\t} else {\n\t\t\tsection.children[len - 1].size += 1\n\t\t}\n\t\tnewBlock = false\n\t}"
        ],
        [
            "function on(event, cb, context) {\n                var args = Array.prototype.slice.call(arguments, 0);\n                return dom.on.apply(false, [this].concat(args));\n            }"
        ],
        [
            "function detach(node) {\n            if (node.placeholder instanceof HTMLElement === false) {\n                node.placeholder = createPlaceholder(node.data.tag || node.el.tagName);\n            }\n            if (node && node.el && node.el.parentNode) {\n                node.el.parentNode.replaceChild(node.placeholder, node.el);\n            }\n        }"
        ],
        [
            "function attach(node) {\n            if (node && node.el && node.placeholder && node.placeholder.parentNode) {\n                node.placeholder.parentNode.replaceChild(node.el, node.placeholder);\n            }\n        }"
        ],
        [
            "function append(parent, child) {\n            if (parent.el !== undefined && child.el !== undefined) {\n                parent.el.appendChild(child.el);\n            }\n        }"
        ],
        [
            "function insertBefore(parent, child, index) {\n            var parentEl = parent.el,\n                childEl = child.el;\n            if (parentEl !== undefined && childEl !== undefined) {\n                if (parentEl.childNodes[index] !== undefined) {\n                    parentEl.insertBefore(childEl, parentEl.childNodes[index]);\n                } else {\n                    parentEl.appendChild(childEl);\n                }\n            }\n        }"
        ],
        [
            "function changePosition(el, index) {\n\n            var HTMLElement = el.el;\n            if (HTMLElement && HTMLElement.parentNode) {\n\n                var parentNode = HTMLElement.parentNode,\n                    elGroup = el.elGroup,\n                    size = elGroup.size,\n                    target = elGroup.getKeyByIndex(index) || elGroup.getLast();\n\n                if (target !== HTMLElement) {\n                    if (size - 1 >= index) {\n                        parentNode.insertBefore(HTMLElement, target);\n                    } else if (target.nextSibling !== null) {\n                        parentNode.insertBefore(HTMLElement, target.nextSibling);\n                    } else {\n                        parentNode.appendChild(HTMLElement);\n                    }\n\n                    el.elGroup.changeIndex(HTMLElement, index);\n                }\n            }\n        }"
        ],
        [
            "function text(node, _text2) {\n            if (node && node.el) {\n                node.el.innerHTML = _text2;\n            }\n        }"
        ],
        [
            "function setAttribute(node, prop, value) {\n            if (node && node.el) {\n                if (isObject(prop)) {\n                    Object.keys(prop).forEach(function (key) {\n                        node.el.setAttribute(key, prop[key]);\n                    });\n                } else {\n                    node.el.setAttribute(prop, value);\n                }\n            }\n        }"
        ],
        [
            "function getAttribute(node, prop) {\n            if (node && node.el) {\n                return node.el.getAttribute(prop);\n            } else {\n                return undefined;\n            }\n        }"
        ],
        [
            "function removeAttribute(node, prop) {\n            if (node && node.el) {\n                node.el.removeAttribute(prop);\n            }\n        }"
        ],
        [
            "function setStyle(node, prop, value) {\n            if (node && node.el) {\n                if (isObject(prop)) {\n                    Object.keys(prop).forEach(function (key) {\n                        node.el.style[key] = prop[key];\n                    });\n                } else {\n                    node.el.style[prop] = value;\n                }\n            }\n        }"
        ],
        [
            "function getStyle(node, prop) {\n            if (node && node.el) {\n                if (node.el !== undefined && node.el.style !== undefined) {\n                    return node.el.style[prop];\n                } else {\n                    return undefined;\n                }\n            }\n        }"
        ],
        [
            "function removeStyle(node, prop) {\n            if (node && node.el) {\n                node.el.style[prop] = '';\n            }\n        }"
        ],
        [
            "function addClass(node, className) {\n            if (node && node.el) {\n                node.el.classList.add(className);\n            }\n        }"
        ],
        [
            "function hasClass(node, className) {\n            if (node && node.el) {\n                return node.el.classList.contains(className);\n            } else {\n                return false;\n            }\n        }"
        ],
        [
            "function removeClass(node, className) {\n            if (node && node.el) {\n                node.el.classList.remove(className);\n            }\n        }"
        ],
        [
            "function val(node, _val2) {\n            if (node && node.el) {\n                var el = node.el;\n                if (_val2 !== undefined) {\n                    el.value = _val2;\n                } else {\n                    return el.value;\n                }\n            }\n        }"
        ],
        [
            "function on(element, ev, cb, context) {\n            for (var _len = arguments.length, args = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n                args[_key - 4] = arguments[_key];\n            }\n\n            var _this = this;\n\n            var el = element.el,\n                events = ev.split(' '),\n                fn = function fn(e) {\n                cb.apply(context || _this, [e, element].concat(args));\n            };\n\n            events.forEach(function (event) {\n                el.addEventListener(event, fn);\n            });\n            var evt = {\n                remove: function remove() {\n                    events.forEach(function (event) {\n                        return el.removeEventListener(event, fn);\n                    });\n                    var evts = element._events;\n                    evts.splice(evts.indexOf(evt), 1);\n                }\n            };\n            element._events.push(evt);\n            return evt;\n        }"
        ],
        [
            "function remove(el) {\n            while (el._events.length > 0) {\n                el._events.shift().remove();\n            }\n\n            if (el.children) {\n                destroy(el.children);\n            }\n            if (el.elGroup !== undefined) {\n                el.elGroup.delete(el.el);\n            }\n\n            if (el.el !== undefined) {\n                if (el.el.remove) {\n                    el.el.remove();\n                } else if (el.el.parentNode) {\n                    el.el.parentNode.removeChild(el.el);\n                }\n                delete el.el;\n            }\n        }"
        ],
        [
            "function onDOMAttached(el) {\n            var _this2 = this;\n\n            var handlers = [],\n                attached = false,\n                _step = undefined;\n\n            if (el.el !== undefined) {\n                _step = function step() {\n                    if (attached) {\n                        while (handlers.length > 0) {\n                            handlers.shift()();\n                        }\n                    } else {\n                        window.requestAnimationFrame(_step);\n                        if (document.body.contains(el.el)) {\n                            attached = true;\n                        }\n                    }\n                };\n            }\n            return {\n                then: function then(cb, context) {\n                    handlers.push(cb.bind(context || _this2));\n                    window.requestAnimationFrame(_step);\n                }\n            };\n        }"
        ],
        [
            "function match({ just, nothing }) {\r\n    return function (maybe) {\r\n        for (const value of maybe) {\r\n            return just(value);\r\n        }\r\n        return nothing();\r\n    };\r\n}"
        ],
        [
            "function flatMap(mapper) {\r\n    return function (maybe) {\r\n        for (const value of maybe) {\r\n            return mapper(value);\r\n        }\r\n        return maybe_1.nothing();\r\n    };\r\n}"
        ],
        [
            "function filter(predicate) {\r\n    return flatMap(value => predicate(value) ? maybe_1.just(value) : maybe_1.nothing());\r\n}"
        ],
        [
            "function or(defaultValue) {\r\n    return function (maybe) {\r\n        for (const value of maybe) {\r\n            return maybe_1.just(value);\r\n        }\r\n        return defaultValue;\r\n    };\r\n}"
        ],
        [
            "function(e){\n\t\t\tvar history=S.History, current = history.getFragment();\n\t\t\tif(OLD_IE && current == history.fragment && history.iframe) current = history.getFragment(history.getHash(history.iframe));\n\t\t\tif(current == history.fragment) return false;\n\t\t\tif(history.iframe) history.navigate(current);\n\t\t\thistory.loadUrl();\n\t\t}"
        ],
        [
            "function(fragmentOverride,state){\n\t\t\tvar fragment = baseUrl+( this.fragment = this.getFragment(fragmentOverride));\n\t\t\tif(fragment){\n\t\t\t\tvar a=$('a[href=\"'+fragment+'\"]');\n\t\t\t\ta.length===0 ? S.redirect(fragment) : a.click();\n\t\t\t}\n\t\t}"
        ]
    ]
}