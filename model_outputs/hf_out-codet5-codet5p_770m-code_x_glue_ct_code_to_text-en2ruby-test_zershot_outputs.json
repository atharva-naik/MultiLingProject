{
    "accuracy": 0.0,
    "bleu": {
        "bleu": 0.010679422706255676,
        "precisions": [
            0.10802966784908094,
            0.014219178927238518,
            0.004692945094091226,
            0.0018043802887008462
        ],
        "brevity_penalty": 1.0,
        "length_ratio": 2.08287222133376,
        "translation_length": 65121,
        "reference_length": 31265
    },
    "codebleu": 0.1090895395785688,
    "preds": [
        "\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.fans   # => [#<Turntabler::User ...>, ...]\n   user.f",
        ".purchased\n\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::Sticker ...>, ...]\n @example\n   user.stickers_purchased   # => [#<Turntabler::",
        "\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...]\n   user.blocks   # => [#<Turntabler::User ...>, ...",
        "\n\n    def get_profile_information(self):\n        \"\"\"\n        Returns the profile information for the current user.\n        \"\"\"\n        return self.profile_information\n\n    def set_profile_information(self, profile_information):\n        \"\"\"\n        Sets the profile information for the current user.\n        \"\"\"\n        self.profile_information = profile_information\n\n    def get_profile_information_for_user(self, user):\n        \"\"\"\n        Returns the profile information for the given user.\n        \"\"\"\n        return self.profile_information_for_user(user)\n\n    def set_profile_information_for_user(self, user, profile_information):\n        \"\"\"\n        Sets the profile information for the given user.\n        \"\"\"\n        self.profile_information_for_user(user, profile_information)\n\n    def get_profile_information_for_user_by_id(self, user_id):\n        \"\"\"\n        Returns the profile information for the given user.\n        \"\"\"\n        return self.profile_information_for_user_by_id(user_id)\n\n    def set_profile_information_for_user_by_id(self, user_id, profile_information):\n        \"\"\"\n        Sets the profile information for the given user.\n        \"\"\"\n        self",
        "\n\n    def update_laptop(self, laptop):\n        \"\"\"Updates the laptop currently being used.\"\"\"\n        self.laptop = laptop\n        self.update()\n\n    def update(self):\n        \"\"\"Updates the laptop currently being used.\"\"\"\n        self.laptop.update()\n\n    def get_laptop(self):\n        \"\"\"Returns the laptop currently being used.\"\"\"\n        return self.laptop\n\n    def get_laptop_name(self):\n        \"\"\"Returns the laptop currently being used.\"\"\"\n        return self.laptop.name\n\n    def get_laptop_id(self):\n        \"\"\"Returns the laptop currently being used.\"\"\"\n        return self.laptop.id\n\n    def get_laptop_description(self):\n        \"\"\"Returns the laptop currently being used.\"\"\"\n        return self.laptop.description\n\n    def get_laptop_image(self):\n        \"\"\"Returns the laptop currently being used.\"\"\"\n        return self.laptop.image\n\n    def get_laptop_image_url(self):\n        \"\"\"Returns the laptop currently being used.\"\"\"\n        return self.laptop.image_url\n\n    def get_l",
        "\n    }\n\n    public function testGetStatus()\n    {\n        $this->assertEquals(Status::PENDING, $this->status->getStatus());\n    }\n\n    public function testGetStatusName()\n    {\n        $this->assertEquals('pending', $this->status->getStatusName());\n    }\n\n    public function testGetStatusDescription()\n    {\n        $this->assertEquals('Pending', $this->status->getStatusDescription());\n    }\n\n    public function testGetStatusIcon()\n    {\n        $this->assertEquals('fa-check', $this->status->getStatusIcon());\n    }\n\n    public function testGetStatusIconName()\n    {\n        $this->assertEquals('fa-check', $this->status->getStatusIconName());\n    }\n\n    public function testGetStatusIconUrl()\n    {\n        $this->assertEquals('fa-check', $this->status->getStatusIconUrl());\n    }\n\n    public function testGetStatusIconUrlName()\n    {\n        $this->assertEquals('fa-check', $this->status->getStatusIconUrlName());\n    }\n\n    public function testGetStatusIconUrlDescription()\n    {\n        $this->assertEquals('fa-check', $this->status->getStatus",
        "\n Returns [Boolean]\n */\nfunction isWord(input) {\n    var word = input.toLowerCase();\n    return word.match(/\\w/);\n}\n\n/**\n Determines if input is sentence or passage and adds it\n\n @param [String] input\n Returns [Boolean]\n */\nfunction isPassage(input) {\n    var passage = input.toLowerCase();\n    return passage.match(/\\s+/);\n}\n\n/**\n Determines if input is word, sentence or passage and adds it\n\n @param [String] input\n Returns [Boolean]\n */\nfunction isSentence(input) {\n    var passage = input.toLowerCase();\n    return passage.match(/\\s+/);\n}\n\n/**\n Determines if input is word, sentence or passage and adds it\n\n @param [String] input\n Returns [Boolean]\n */\nfunction isPassageOrSentence(input) {\n    var passage = input.toLowerCase();\n    return passage.match(/\\s+/) || passage.match(/\\w/);\n}\n\n/**\n Determines if input is word, sentence or passage and adds it\n\n @param [String] input\n Returns [Boolean]\n */\nfunction isPassageOrSentenceOrWord(input) {\n    var passage = input.to",
        "\n @return [Integer]\n */\nfunction weightedRandom(type, group) {\n  var count = 0\n  var first = 0\n  var next = 0\n  var last = 0\n\n  switch (type) {\n    case :count:\n      count = Math.floor(Math.random() * 10)\n      break\n    case :first:\n      first = Math.floor(Math.random() * 10)\n      break\n    case :next:\n      next = Math.floor(Math.random() * 10)\n      break\n    case :last:\n      last = Math.floor(Math.random() * 10)\n      break\n  }\n\n  if (group) {\n    group = group.toLowerCase()\n    if (group.length === 1) {\n      group = '0' + group\n    }\n    group = group.charAt(0)\n    group = group.toUpperCase() + group.slice(1)\n  }\n\n  return Math.floor(Math.random() * (last + first + next))\n}\n\nmodule.exports = weightedRandom\n",
        "\n */\nfunction bindHandler(event, options) {\n  var handler = new Turntabler::Handler(event, options);\n  handler.once = options.once;\n  handler.if = options.if;\n  return handler;\n}\n\nmodule.exports = bindHandler;\n",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        ".\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [IndexError] if the coordinate is out of bounds\n @raise [",
        ".\n\n @sa ContainerType\n */\n- (Capacity)copyCapacity;\n\n/**\n @brief Returns the Container's ContainerType capacity, if it exists, or the default Container capacity.\n\n @return [Capacity, nil] the initialized capacity, if it exists.\n\n @sa ContainerType\n */\n- (Capacity)capacity;\n\n/**\n @brief Returns the Container's ContainerType capacity, if it exists, or the default Container capacity.\n\n @param capacity the new capacity.\n\n @return [Capacity, nil] the initialized capacity, if it exists.\n\n @sa ContainerType\n */\n- (Capacity)setCapacity:(Capacity)capacity;\n\n/**\n @brief Returns the Container's ContainerType capacity, if it exists, or the default Container capacity.\n\n @param capacity the new capacity.\n\n @return [Capacity, nil] the initialized capacity, if it exists.\n\n @sa ContainerType\n */\n- (Capacity)setCapacity:(Capacity)capacity withContainerType:(ContainerType *)containerType;\n\n/**\n @brief Returns the Container's ContainerType capacity, if it exists, or the default Container capacity.\n\n @param capacity the new capacity.\n\n @return [Capacity, nil] the initialized capacity, if it exists.\n\n @sa ContainerType\n */\n- (Capacity)setCapacity:(Capacity)capacity withContainerType",
        "        # => true\n   preferences.notify_dj   # => true\n   preferences.load        # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false\n   preferences.notify_dj   # => false",
        " new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates a new extractor\n\nCreates",
        "\n @raise [ArgumentError] if summoner is not a summoner object or id\n @raise [ArgumentError] if summoner is not a valid summoner object\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not a valid summoner id\n @raise [ArgumentError] if summoner is not",
        ".\n */\nfunction getDocumentType(path) {\n  var doc = path.split('/').pop();\n  var docType = doc.split('.').pop();\n  return docType;\n}\n\n/**\n * Get the document type from the YAML file next to the document.\n\n @param [Pathname] The path to the location of the template.yml file.\n @return [String] the type of the document found in the YAML file.\n */\nfunction getDocumentTypeFromTemplate(path) {\n  var doc = path.split('/').pop();\n  var docType = doc.split('.').pop();\n  return docType;\n}\n\n/**\n * Get the document type from the YAML file next to the document.\n\n @param [Pathname] The path to the location of the template.yml file.\n @return [String] the type of the document found in the YAML file.\n */\nfunction getDocumentTypeFromTemplate(path) {\n  var doc = path.split('/').pop();\n  var docType = doc.split('.').pop();\n  return docType;\n}\n\n/**\n * Get the document type from the YAML file next to the document.\n\n @param [Pathname] The path to the location of the template.yml file.\n @return [String] the type of the document",
        " and rows to the key.\n\nUsage:\n\n    $ ./allocator.py infile outfile key rows columns\n\n    $ ./allocator.py infile outfile key rows columns rows\n\n    $ ./allocator.py infile outfile key rows columns rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows rows",
        "\n * *Examples* :\n   - +spanner+ -> Vector(1,2,3)\n   - +spanner+ -> Vector(1,2,3,4)\n   - +spanner+ -> Vector(1,2,3,4,5)\n   - +spanner+ -> Vector(1,2,3,4,5,6)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7,8)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7,8,9)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7,8,9,10)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7,8,9,10,11)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7,8,9,10,11,12)\n   - +spanner+ -> Vector(1,2,3,4,5,6,7,8,9,10,11,12,13)\n   - +spanner+",
        ".\n\nReturns a list of Feed objects.\n\n\"\"\"\n\nimport urllib2\nimport re\nimport json\nimport time\nimport os\nimport sys\nimport logging\nimport logging.handlers\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.RotatingFileHandler\nimport logging.handlers.",
        " and\n   configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file, and source directory, and destination directory,\n   and configuration file",
        ".\n\nUsage:\n  $ python log.py\n\n  $ python log.py -t\n\n  $ python log.py -t -t\n\n  $ python log.py -t -t -t\n\n  $ python log.py -t -t -t -t\n\n  $ python log.py -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -t -t -t\n\n  $ python log.py -t -t -t -t -t -t -",
        ".\n//\n// The result of the operation is a string.\nfunc (s *Operation) Execute() (string, error) {\n\treturn s.Execute(nil)\n}\n\n// Execute executes the operation and writes the result to the result.\n//\n// The result of the operation is a string.\nfunc (s *Operation) Execute(result interface{}) (string, error) {\n\treturn s.Execute(result)\n}\n\n// Execute executes the operation and writes the result to the result.\n//\n// The result of the operation is a string.\nfunc (s *Operation) Execute(result interface{}, resultType interface{}) (string, error) {\n\treturn s.Execute(result, resultType)\n}\n\n// Execute executes the operation and writes the result to the result.\n//\n// The result of the operation is a string.\nfunc (s *Operation) Execute(result interface{}, resultType interface{}, result interface{}) (string, error) {\n\treturn s.Execute(result, resultType, result)\n}\n\n// Execute executes the operation and writes the result to the result.\n//\n// The result of the operation is a string.\nfunc (s *Operation) Execute(result interface{}, resultType interface{}, result interface{}) (string, error) {\n\treturn s.Execute(",
        "\n    //\n    // @param {Array} operands\n    // @param {Array} [options]\n    // @param {Array} [options.spreadsheet]\n    // @param {Array} [options.spreadsheet.columns]\n    // @param {Array} [options.spreadsheet.rows]\n    // @param {Array} [options.spreadsheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.columns]\n    // @param {Array} [options.spreadsheet.sheet.rows]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet.sheet]\n    // @param {Array} [options.spreadsheet.sheet",
        " the message sent\n */\nfunction publish(params) {\n  var self = this;\n  var socket = this.socket;\n  var id = socket.id;\n  var message = {\n    id: id,\n    params: params\n  };\n  socket.send(JSON.stringify(message));\n  return id;\n}\n\n/**\n * Publishes the given params to the underlying web socket.  The defaults\n initially configured as part of the connection will also be included in\n the message.\n\n @param [Hash] params The parameters to include in the message sent\n @return [Fixnum] The id of the message sent\n */\nfunction publish(params) {\n  var self = this;\n  var socket = this.socket;\n  var id = socket.id;\n  var message = {\n    id: id,\n    params: params\n  };\n  socket.send(JSON.stringify(message));\n  return id;\n}\n\n/**\n * Publishes the given params to the underlying web socket.  The defaults\n initially configured as part of the connection will also be included in\n the message.\n\n @param [Hash] params The parameters to include in the message sent\n @return [Fixnum] The id of the message sent\n */\nfunction publish(params) {\n  var self = this;\n ",
        "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/ioctl.h>\n#include <sys/socket.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <sys/socket.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <sys/socket.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/m",
        "\n\n    def get_api_key(self):\n        \"\"\"\n        Returns the API key for the current user.\n        \"\"\"\n        return self.request.get_api_key()\n\n    def get_api_secret(self):\n        \"\"\"\n        Returns the API secret for the current user.\n        \"\"\"\n        return self.request.get_api_secret()\n\n    def get_api_url(self):\n        \"\"\"\n        Returns the API URL for the current user.\n        \"\"\"\n        return self.request.get_api_url()\n\n    def get_api_version(self):\n        \"\"\"\n        Returns the API version for the current user.\n        \"\"\"\n        return self.request.get_api_version()\n\n    def get_api_version_string(self):\n        \"\"\"\n        Returns the API version string for the current user.\n        \"\"\"\n        return self.request.get_api_version_string()\n\n    def get_api_version_string_with_version(self):\n        \"\"\"\n        Returns the API version string with the given version for the current user.\n        \"\"\"\n        return self.request.get_api_version_string_with_version()\n\n    def get_api_version_string_with_version_and_api_key(self):",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveMessageCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        ".\n */\nfunction connectToPort22() {\n  var host = 'localhost';\n  var port = 22;\n  var timeout = 1;\n  var connect = function() {\n    var socket = new Socket(host, port);\n    socket.on('connect', function() {\n      console.log('Connected to ' + host + ':' + port);\n    });\n    socket.on('error', function(err) {\n      console.log('Error connecting to ' + host + ':' + port + ': ' + err);\n    });\n    socket.on('close', function() {\n      console.log('Connection closed to ' + host + ':' + port);\n    });\n    socket.on('timeout', function() {\n      console.log('Connection timed out to ' + host + ':' + port);\n    });\n    socket.on('timeout', function() {\n      console.log('Connection timed out to ' + host + ':' + port);\n    });\n    socket.on('timeout', function() {\n      console.log('Connection timed out to ' + host + ':' + port);\n    });\n    socket.on('timeout', function() {\n      console.log('Connection timed out to ' + host + ':' + port);\n    });\n    socket.on('timeout', function() {\n      console.log('Connection timed",
        ": public\n*/\n\nvar fs = require('fs');\nvar path = require('path');\nvar rimraf = require('rimraf');\nvar mkdirp = require('mkdirp');\nvar rimrafSync = require('rimrafSync');\nvar rimrafSyncRecursive = require('rimrafSyncRecursive');\nvar rimrafSyncRecursiveRecursive = require('rimrafSyncRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimrafSyncRecursiveRecursiveRecursiveRecursive = require('rimrafSyncRecursiveRecursiveRecursiveRecursiveRecursive');\nvar rimraf",
        ": public\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nint main()\n{\n    char *str = \"Hello World\";\n    char *str2 = strdup(str);\n    printf(\"str2 = %s\\n\", str2);\n    free(str2);\n    return 0;\n}\n",
        ": public\n */\nclass HostFile {\n    constructor(host) {\n        this.host = host;\n    }\n\n    /**\n     * @param {string} path\n     * @returns {string}\n     * @api private\n     */\n    read(path) {\n        return this.host.read(path);\n    }\n}\n\n/**\n * @param {string} path\n * @returns {HostFile}\n * @api private\n */\nfunction read(path) {\n    return new HostFile(path);\n}\n\nmodule.exports = read;\n",
        ": public\n */\n\nvar exec = require('child_process').exec;\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\nvar argv = require('minimist')(process.argv.slice(2));\n\nvar host = argv.host || 'localhost';\nvar port = argv.port || 8080;\nvar command = argv.command || 'ls';\nvar cwd = argv.cwd || '.';\n\nvar output = '';\n\nvar stdout = '';\nvar stderr = '';\n\nvar stdin = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdin = '';\nvar stdout = '';\nvar stderr = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdoutStream = '';\nvar stderrStream = '';\n\nvar stdinStream = '';\nvar stdout",
        "\n\n    @param Storable Storable to test\n    @return True if Storable is a supported by this SpecimenArrayType\n    @rtype bool\n    @example\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE_TYPE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE_TYPE_TYPE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE_TYPE_TYPE_TYPE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE_TYPE_TYPE_TYPE_TYPE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE_TYPE_TYPE_TYPE_TYPE_TYPE)\n    True\n    >>> Storable.is_supported_by(Storable.STORABLE_TYPE_STORABLE_TYPE_TYPE_TYPE_TYPE_TYPE",
        ".\n\n _outfile_ is the name of the output file.\n\n _args_ is the arguments to pass to the process.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a list of strings.\n\n _args_ is a",
        "\n\n    def test_get_results(self):\n        \"\"\"\n        Tests the get_results method.\n        \"\"\"\n        results = self.results\n        results.add_result(\n            'test_result',\n            'test_result_1',\n            'test_result_2',\n            'test_result_3',\n            'test_result_4',\n            'test_result_5',\n            'test_result_6',\n            'test_result_7',\n            'test_result_8',\n            'test_result_9',\n            'test_result_10',\n            'test_result_11',\n            'test_result_12',\n            'test_result_13',\n            'test_result_14',\n            'test_result_15',\n            'test_result_16',\n            'test_result_17',\n            'test_result_18',\n            'test_result_19',\n            'test_result_20',\n            'test_result_21',\n            'test_result_22',\n            'test_result_23',\n            'test_result_24',\n            'test_result_25',\n            'test_result_26',\n            'test_result_27',\n            'test_",
        " column.\n\nGiven a string, return the sum of the characters in the string.\n\nExample 1:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 2:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 3:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 4:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 5:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 6:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 7:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 8:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 9:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 10:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 11:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 12:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 13:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n\nExample 14:\n\nInput: \"abcde\"\nOutput: \"abcde\"\n",
        "\n    string   :title\n    string   :description\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes do\n    string   :first_name\n    string   :last_name\n    integer  :age, optional: true\n  end\n\n  @example\n  attributes",
        "\n */\nmodule.exports = function(dep_hashes, repos) {\n  var deps = [];\n  var dep_hash;\n  var dep_hash_group_id;\n  var dep_hash_artifact_id;\n  var dep_hash_version;\n  var dep_hash_extension;\n  var dep_hash_group_id_range;\n  var dep_hash_artifact_id_range;\n  var dep_hash_version_range;\n  var dep_hash_extension_range;\n  var dep_hash_group_id_range_range;\n  var dep_hash_artifact_id_range_range;\n  var dep_hash_version_range_range;\n  var dep_hash_extension_range_range;\n  var dep_hash_group_id_range_range_range;\n  var dep_hash_artifact_id_range_range_range;\n  var dep_hash_version_range_range_range;\n  var dep_hash_extension_range_range_range;\n  var dep_hash_group_id_range_range_range;\n  var dep_hash_artifact_id_range_range_range;\n  var dep_hash_version_range_range_range;\n  var dep_hash_extension_range_range",
        ".\n\n    You can specify a list of rules for each category.\n    \"\"\"\n    def __init__(self, name, *args, **kwargs):\n        super(Game, self).__init__(*args, **kwargs)\n        self.name = name\n        self.rules = []\n\n    def add_rule(self, rule):\n        self.rules.append(rule)\n\n    def get_rules(self):\n        return self.rules\n\n    def get_name(self):\n        return self.name\n\n    def get_rules_by_category(self, category):\n        return [rule for rule in self.rules if rule.category == category]\n\n    def get_rules_by_name(self, name):\n        return [rule for rule in self.rules if rule.name == name]\n\n    def get_rules_by_category_and_name(self, category, name):\n        return [rule for rule in self.rules if rule.category == category and rule.name == name]\n\n    def get_rules_by_category_and_name_and_category(self, category, name, category2):\n        return [rule for rule in self.rules if rule.category == category and rule.name == name and rule.category == category2]\n\n    def",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputFile;\nuse Illuminate\\Support\\Facades\\InputFileValidator;\nuse Illuminate\\Support\\Facades\\InputFileUpload;\nuse Illuminate\\Support\\Facades\\InputFileUploadValidator;\nuse Illuminate\\Support\\Facades\\InputFileUploadFile;\nuse Illuminate\\Support\\Facades\\InputFileUploadFileValidator;\nuse Illuminate\\Support\\Facades\\InputFileUploadFileUpload;\nuse Illuminate\\Support\\Facades\\InputFileUploadFileUploadValidator;\nuse Illuminate\\Support\\Facades\\InputFileUploadFileUploadValidator;\nuse Illuminate\\Support\\Facades\\InputFileUploadFileUploadValidator;\nuse Illuminate\\Support",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        " the summoner is in\n @example\n   summoner = Summoner.new(1)\n   summoner.leagues = [League.new(1, \"League 1\"), League.new(2, \"League 2\")]\n   summoner.leagues.each do |league|\n     puts league.name\n   end\n @example\n   summoner = Summoner.new(1)\n   summoner.leagues = [League.new(1, \"League 1\"), League.new(2, \"League 2\")]\n   summoner.leagues.each do |league|\n     puts league.name\n   end\n @example\n   summoner = Summoner.new(1)\n   summoner.leagues = [League.new(1, \"League 1\"), League.new(2, \"League 2\")]\n   summoner.leagues.each do |league|\n     puts league.name\n   end\n @example\n   summoner = Summoner.new(1)\n   summoner.leagues = [League.new(1, \"League 1\"), League.new(2, \"League 2\")",
        "\n @example\n   get_all_entries(summoner: 1)\n   # => [LeagueItem.new(1, \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1\", \"League 1",
        "\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78, -23)   # => true\n   sticker.place(126, 78,",
        " the array of feed URIs\n */\nfunction findFeedUris(uris) {\n  var feedUris = [];\n  for (var i = 0; i < uris.length; i++) {\n    var uri = uris[i];\n    var feed = new XMLHttpRequest();\n    feed.open(\"GET\", uri, false);\n    feed.send();\n    feedUris.push(uri);\n  }\n  return feedUris;\n}\n\nfunction findFeed(uri) {\n  var feedUris = findFeedUris(uri);\n  if (feedUris.length > 0) {\n    return feedUris[0];\n  } else {\n    return null;\n  }\n}\n\nfunction findFeedUri(uri) {\n  var feedUris = findFeedUris(uri);\n  if (feedUris.length > 0) {\n    return feedUris[0];\n  } else {\n    return null;\n  }\n}\n\nfunction findFeedUri(uri) {\n  var feedUris = findFeedUris(uri);\n  if (feedUris.length > 0) {\n    return feedUris[0];\n  } else {\n    return null;\n  }\n}\n\nfunction findFeedUri(uri) {\n  var feedUris = findFeedUris(uri);\n  if (feedUris.length > 0",
        ".\n */\nfunction setCollectionStatus(value) {\n  var self = this;\n  var url = '/scgs/' + self.id + '/collections/' + value;\n  $.ajax({\n    url: url,\n    type: 'PUT',\n    dataType: 'json',\n    success: function(data) {\n      self.status = data.status;\n      self.collection = data.collection;\n      self.collection_id = data.collection_id;\n      self.collection_name = data.collection_name;\n      self.collection_description = data.collection_description;\n      self.collection_type = data.collection_type;\n      self.collection_status = data.collection_status;\n      self.collection_created_at = data.collection_created_at;\n      self.collection_updated_at = data.collection_updated_at;\n      self.collection_deleted_at = data.collection_deleted_at;\n      self.collection_deleted = data.collection_deleted;\n      self.collection_deleted_by = data.collection_deleted_by;\n      self.collection_deleted_by_id = data.collection_deleted_by_id;\n      self.collection_deleted_by_name = data.collection_deleted_by_name;\n      self.collection",
        ".\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #156: SCG with consent status displays error.\n   A SCG consent tier status is required for each consent tier in the SCG registration.\n\n @quirk caTissue Bug #",
        "\n    protocol.\n\n    Returns:\n        A tuple of (protocol, protocol_name)\n    \"\"\"\n    for protocol in protocols:\n        if protocol.name == protocol_name:\n            return protocol, protocol.name\n    return None, None\n\n\ndef get_protocol_by_name(protocol_name):\n    \"\"\"\n    Returns the first protocol registered with this protocol name.\n\n    Args:\n        protocol_name (str): The name of the protocol.\n\n    Returns:\n        A tuple of (protocol, protocol_name)\n    \"\"\"\n    for protocol in protocols:\n        if protocol.name == protocol_name:\n            return protocol, protocol.name\n    return None, None\n\n\ndef get_protocol_by_id(protocol_id):\n    \"\"\"\n    Returns the first protocol registered with this protocol id.\n\n    Args:\n        protocol_id (int): The id of the protocol.\n\n    Returns:\n        A tuple of (protocol, protocol_name)\n    \"\"\"\n    for protocol in protocols:\n        if protocol.id == protocol_id:\n            return protocol, protocol.name\n    return None, None\n\n\ndef get_protocol_by_name_and_id(protocol_name, protocol_id):\n    \"\"\"\n    Returns the first protocol registered with this protocol name",
        "\n */\nCaTissue::User::CollectionProtocolCoordinator::CollectionProtocolCoordinator()\n{\n\t_cp = new CaTissue::CollectionProtocolCoordinator();\n}\n\n/**\n Returns the collection protocol coordinator. Fetches the CP if necessary and possible.\n Adds defaults to the CP if necessary, which sets a default coordinator if possible.\n\n @param [CaTissue::User] the default coordinator\n\n @return [CaTissue::User] the default coordinator\n */\nCaTissue::User::CollectionProtocolCoordinator::CollectionProtocolCoordinator(CaTissue::User::CollectionProtocolCoordinator::CollectionProtocolCoordinator&& cp)\n{\n\t_cp = std::move(cp._cp);\n}\n\n/**\n Returns the collection protocol coordinator. Fetches the CP if necessary and possible.\n Adds defaults to the CP if necessary, which sets a default coordinator if possible.\n\n @param [CaTissue::User] the default coordinator\n\n @return [CaTissue::User] the default coordinator\n */\nCaTissue::User::CollectionProtocolCoordinator::CollectionProtocolCoordinator(const CaTissue::User& cp)\n{\n\t_cp = new CaTissue::CollectionProtocolCoordinator(cp);\n}\n\n/**\n Returns the collection protocol coordinator. Fetches the CP if necessary and possible.\n Adds defaults to the CP if necessary, which sets a default coordinator if possible.\n\n @",
        ".\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity by the given child's initial quantity, if the\nspecimen types are the same and there are the relevant quantities.\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity by the given child's initial quantity, if the\nspecimen types are the same and there are the relevant quantities.\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity by the given child's initial quantity, if the\nspecimen types are the same and there are the relevant quantities.\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity by the given child's initial quantity, if the\nspecimen types are the same and there are the relevant quantities.\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity by the given child's initial quantity, if the\nspecimen types are the same and there are the relevant quantities.\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity by the given child's initial quantity, if the\nspecimen types are the same and there are the relevant quantities.\n\nThe action is a bit like a 'move' in that it decrements the parent's available quantity",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.codec;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.Generated;\nimport com.hazelcast.client.impl.protocol.codec.builtin.*;\nimport com.hazelcast.client.impl.protocol.codec.custom.*;\n\nimport javax.annotation.Nullable;\n\nimport static com.hazelcast.client.impl.protocol.ClientMessage.*;\nimport static com.hazelcast.client.impl.protocol",
        " user\n */\nCaTissue::User updateUserAddress(CaTissue::User& user, CaTissue::Address& address);\n\n/**\n Updates the given user address.\n\n @param [CaTissue::User] the user owner\n @param [CaTissue::Address] the address to update\n @return [CaTissue::User] the updated user\n */\nCaTissue::User updateUserAddress(CaTissue::User& user, const CaTissue::Address& address);\n\n/**\n Updates the given user address.\n\n @param [CaTissue::User] the user owner\n @param [CaTissue::Address] the address to update\n @return [CaTissue::User] the updated user\n */\nCaTissue::User updateUserAddress(CaTissue::User& user, const CaTissue::Address& address);\n\n/**\n Updates the given user address.\n\n @param [CaTissue::User] the user owner\n @param [CaTissue::Address] the address to update\n @return [CaTissue::User] the updated user\n */\nCaTissue::User updateUserAddress(CaTissue::User& user, const CaTissue::Address& address);\n\n/**\n Updates the given user address.\n\n @param [CaTissue::User] the user owner\n @param [CaT",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n */\n- (void)prepare_annotation_for_save;\n\n/**\n @brief Returns the primary annotation hook.\n\n @param (see #prepare_annotation_for_save)\n @return [CaRuby::AnnotationHook] the primary annotation hook.\n @raise [CaRuby::DatabaseError] if the annotation does not reference a hook entity.\n */\n- (CaRuby::AnnotationHook *)primary_annotation_hook;\n\n/**\n @brief Returns the primary annotation hook.\n\n @param (see #prepare_annotation_for_save)\n @return [CaRuby::AnnotationHook] the primary annotation hook.\n @raise [CaRuby::DatabaseError] if the annotation does not reference a hook entity.\n */\n- (CaRuby::AnnotationHook *)primary_annotation_hook_for_save;\n\n/**\n @brief Returns the primary annotation hook.\n\n @param (see #prepare_annotation_for_save)\n @return [CaRuby::AnnotationHook] the primary annotation hook.\n @raise [CaRuby::DatabaseError] if the annotation does not reference a hook entity.\n */\n- (CaRuby::AnnotationHook *)primary_annotation_hook_for_save_with_name:(NSString *)name;\n\n/**\n @brief Returns the primary annotation hook.\n\n @param",
        "\n @param [Annotation] target the copy target\n @param [Annotation] hook the annotation hook\n @param [Annotation] annotation the annotation to copy\n @param [Annotation] annotationProxy the annotation proxy to copy\n @param [Annotation] annotationProxyTemplate the annotation proxy template to copy\n @param [Annotation] annotationProxyTemplateTarget the annotation proxy template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplate the annotation proxy template target template to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTarget the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotationProxyTemplateTargetTemplateTargetTemplate the annotation proxy template target template target to copy\n @param [Annotation] annotation",
        "\n    }\n\n    /**\n     * @param string $name\n     * @param string $value\n     * @param string $type\n     * @param string $comment\n     * @param string $commentType\n     * @param string $commentComment\n     * @param string $commentCommentType\n     * @param string $commentCommentComment\n     * @param string $commentCommentCommentType\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment\n     * @param string $commentCommentComment",
        "\n\n    def test_table_to_csv_with_header(self):\n        \"\"\"\n        Tests that the table_to_csv method returns the correct csv\n        \"\"\"\n        table = Table([('a', 'b'), ('c', 'd')])\n        csv_string = table_to_csv(table)\n        self.assertEqual(csv_string, 'a,b,c\\na,b,c\\na,b,c\\n')\n\n    def test_table_to_csv_with_header_and_rows(self):\n        \"\"\"\n        Tests that the table_to_csv method returns the correct csv\n        \"\"\"\n        table = Table([('a', 'b'), ('c', 'd')])\n        csv_string = table_to_csv(table, headers=['a', 'b'])\n        self.assertEqual(csv_string, 'a,b,c\\na,b,c\\n')\n\n    def test_table_to_csv_with_header_and_rows_and_headers(self):\n        \"\"\"\n        Tests that the table_to_csv method returns the correct csv\n        \"\"\"\n        table = Table([('a', 'b'), ('c', 'd')])\n        csv_string = table_to_csv(",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "_row_pos and sum_row_patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the sum of the sum of the\nsum_row_pos and sum_row patterns.\n\nThe sum_row_pos and sum_row_patterns are the",
        ".\n//\n// Example:\n//\n//   var sum = sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow(sumColumn, sumRow",
        " been processed.\n\n    :param file: The file to be processed.\n    :type file: :class:`~astropy.io.fits.File`\n    :returns: The sum_row of the file.\n    :rtype: :class:`~astropy.table.Table`\n    \"\"\"\n    return sum_row(file.data)\n\n\ndef create_sum_row_from_file(file, **kwargs):\n    \"\"\"Creates the sum_row of the file.\n\n    :param file: The file to be processed.\n    :type file: :class:`~astropy.io.fits.File`\n    :param kwargs: The keyword arguments to be passed to the constructor.\n    :type kwargs: :class:`dict`\n    :returns: The sum_row of the file.\n    :rtype: :class:`~astropy.table.Table`\n    \"\"\"\n    return sum_row(file.data, **kwargs)\n\n\ndef create_sum_row_from_file_with_header(file, header, **kwargs):\n    \"\"\"Creates the sum_row of the file.\n\n    :param file: The file to be processed.\n    :type file: :class:`~astropy.io.fits.File`\n    :param header: The header to be used for the sum",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.n",
        " to be re-evaluated.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n// This is a convenience function for adding a node to a graph, and then\n// evaluating it.\n//\n//",
        "\n\n    def test_node_edges(self):\n        \"\"\"\n        Tests that the node edges are correctly handled.\n        \"\"\"\n        node = self.nodes[0]\n        node.add_edge(self.nodes[1], self.nodes[2])\n        node.add_edge(self.nodes[2], self.nodes[3])\n        node.add_edge(self.nodes[3], self.nodes[4])\n        node.add_edge(self.nodes[4], self.nodes[5])\n        node.add_edge(self.nodes[5], self.nodes[6])\n        node.add_edge(self.nodes[6], self.nodes[7])\n        node.add_edge(self.nodes[7], self.nodes[8])\n        node.add_edge(self.nodes[8], self.nodes[9])\n        node.add_edge(self.nodes[9], self.nodes[10])\n        node.add_edge(self.nodes[10], self.nodes[11])\n        node.add_edge(self.nodes[11], self.nodes[12])\n        node.add_edge(self.nodes[12], self.nodes[13])\n        node.add_edge(self.nodes[13], self.nodes[",
        "\n  rooms.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms.with_friends.with_friends.with_friends.with_friends.with_friends.with_friends # => [#<Turntabler::Room ...>, ...]\n  rooms",
        "\n @example\n   rooms.find('indie')\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :limit => 20)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 0)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 1)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 2)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 3)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 4)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 5)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 6)\n   # => [#<Turntabler::Room ...>, ...]\n   rooms.find('indie', :skip => 7)\n   # => [#<Turntabler::Room ...>, ...]\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\",
        "\n   playlist.update(:id => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\", :description => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\", :description => \"rock\", :image => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\", :description => \"rock\", :image => \"rock\", :image_url => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\", :description => \"rock\", :image => \"rock\", :image_url => \"rock\", :image_url => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\", :description => \"rock\", :image => \"rock\", :image_url => \"rock\", :image_url => \"rock\", :image_url => \"rock\")  # => true\n   playlist.update(:id => \"rock\", :name => \"rock\", :description => \"rock\", :image => \"rock\", :image => \"rock\", :image_url => \"rock\", :image_url => \"rock\", :image_url =>",
        "\n   playlist.active? # => true\n   playlist.active   # => false\n   playlist.active? # => false\n   playlist.active   # => true\n   playlist.active? # => true\n   playlist.active   # => false\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n   playlist.active? # => true\n   playlist.active? # => false\n  ",
        ".\n\n @example\n\n     var attributes = new AttributesDSL::Attributes();\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"value\"));\n     attributes.add(new Attribute(\"name\", \"",
        "\n   parameter\n @option args [CaTissue::SpecimenCollectionGroup] :collector the collection to which\n   the specimens are added\n @option args [CaTissue::Participant] :registration the registration to which\n   the specimens are added\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either a collector or\n   a registration\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either a collector or\n   a registration\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either a collector or\n   a registration\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either a collector or\n   a registration\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either a participant or\n   a registration\n @raise [ArgumentError] if the options do not include either",
        "\n */\nfunction summoner(name_or_id, optional) {\n  var region = optional.region || 'us';\n  var region_id = optional.region_id || 'us';\n  var region_name = optional.region_name || 'US';\n  var region_code = optional.region_code || 'US';\n  var region_name_code = optional.region_name_code || 'US';\n  var region_code_name = optional.region_code_name || 'US';\n  var region_name_code_name = optional.region_name_code_name || 'US';\n  var region_code_name_code = optional.region_code_name_code || 'US';\n  var region_name_code_code = optional.region_name_code_code || 'US';\n  var region_code_name_code = optional.region_code_name_code || 'US';\n  var region_name_code_code = optional.region_name_code_code || 'US';\n  var region_code_name_code = optional.region_code_name_code || 'US';\n  var region_code_name_code = optional.region_code_name_code || 'US';\n  var region_code_name_code = optional.region",
        " name\n */\nfunction names(ids, optional) {\n  var region = optional.region || 'US';\n  var names = [];\n  ids.forEach(function(id) {\n    names.push(name(id, region));\n  });\n  return names;\n}\n\n/**\n returns the names for the ids\n @param ids [Array<Numeric>] ids\n @param optional [Hash<Symbol, String>] optional arguments: :region => replaces default region\n @return [Array<String>] names\n */\nfunction names(ids, optional) {\n  var region = optional.region || 'US';\n  var names = [];\n  ids.forEach(function(id) {\n    names.push(name(id, region));\n  });\n  return names;\n}\n\n/**\n returns the names for the ids\n @param ids [Array<Numeric>] ids\n @param optional [Hash<Symbol, String>] optional arguments: :region => replaces default region\n @return [Array<String>] names\n */\nfunction names(ids, optional) {\n  var region = optional.region || 'US';\n  var names = [];\n  ids.forEach(function(id) {\n    names.push(name(id, region));\n  });\n  return names;\n}\n\n",
        "\n */\nfunction runebook(summoner, optional) {\n  var region = optional.region || 'default';\n  var summonerId = summoner.id || summoner.name;\n  var summonerName = summoner.name || summonerId;\n  var summoner = summoner.id ? summoner.name : summonerId;\n  var summonerName = summonerName.toLowerCase();\n  var summonerNameLower = summonerName.toLowerCase();\n  var summonerNameUpper = summonerName.toUpperCase();\n  var summonerNameLowerUpper = summonerNameLower.toUpperCase();\n  var summonerNameLowerLower = summonerNameLower.toLowerCase();\n  var summonerNameUpperLower = summonerNameUpper.toLowerCase();\n  var summonerNameUpperUpper = summonerNameUpper.toUpperCase();\n  var summonerNameLowerLowerUpper = summonerNameLowerLower.toLowerCase();\n  var summonerNameUpperUpperLower = summonerNameUpperUpper.toLowerCase();\n  var summonerNameLowerLowerUpper = summonerNameLowerLowerUpper.toLowerCase();\n  var summonerNameUpperUpperLower = summonerNameUpperUpperLower.to",
        " of summoners\n */\nfunction summoners(summoners, optional) {\n  var summoners_ids = [];\n  for (var i = 0; i < summoners.length; i++) {\n    summoners_ids.push(summoners[i].id);\n  }\n  return {\n    'summoners': summoners_ids,\n    'region': optional.region || 'default'\n  };\n}\n\n/**\nreturns the runebook for a single summoner\n @param summoner [Summoner]\n @param optional [Hash<Symbol, String>] optional arguments: :region => replaces default region\n @return [Runebook] A hash mapping runebooks to the ids of summoners\n */\nfunction summoner(summoner, optional) {\n  var summoner_ids = [];\n  for (var i = 0; i < summoner.summoners.length; i++) {\n    summoner_ids.push(summoner.summoners[i].id);\n  }\n  return {\n    'summoners': summoner_ids,\n    'region': optional.region || 'default'\n  };\n}\n\n/**\nreturns the runebook for a single summoner\n @param sum",
        ".\n\nvar config = require('../config.json');\n\nvar db = require('../db');\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar db = db.connect(config.db);\n\nvar",
        ".\n */\n- (void)collect:(Jinx::CollectibleOptions)opts;\n\n/**\n @brief Collects and receives this Collectible with the given options.\n\n @param (see #extract_event_parameters)\n @option opts (see #extract_event_parameters)\n @raise [Jinx::ValidationError] if this Collectible has already been received.\n */\n- (void)collect:(Jinx::CollectibleOptions)opts error:(NSError **)error;\n\n/**\n @brief Collects and receives this Collectible with the given options.\n\n @param (see #extract_event_parameters)\n @option opts (see #extract_event_parameters)\n @raise [Jinx::ValidationError] if this Collectible has already been received.\n */\n- (void)collect:(Jinx::CollectibleOptions)opts error:(NSError **)error error:(NSError **)error;\n\n/**\n @brief Collects and receives this Collectible with the given options.\n\n @param (see #extract_event_parameters)\n @option opts (see #extract_event_parameters)\n @raise [Jinx::ValidationError] if this Collectible has already been received.\n */\n- (void)collect:(Jinx::CollectibleOptions)opts error:(NSError **)error error:(NSError",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.",
        "\n    return true;\n  }\n\n  @Override\n  public String toString() {\n    return \"BooleanFilter{\" +\n        \"value=\" + value +\n        '}';\n  }\n}\n",
        " value.\n  #\n  # @return [Boolean]\n  def matches?(value)\n    value.is_a?(String) && value.match(self.class.value_regex)\n  end\n\n  # Returns the value of the field as a string.\n  #\n  # @return [String]\n  def to_s\n    value\n  end\n\n  # Returns the value of the field as a string.\n  #\n  # @return [String]\n  def to_s(options = {})\n    value\n  end\n\n  # Returns the value of the field as a string.\n  #\n  # @return [String]\n  def to_s(options = {})\n    value\n  end\n\n  # Returns the value of the field as a string.\n  #\n  # @return [String]\n  def to_s(options = {})\n    value\n  end\n\n  # Returns the value of the field as a string.\n  #\n  # @return [String]\n  def to_s(options = {})\n    value\n  end\n\n  # Returns the value of the field as a string.\n  #\n  # @return [String]\n  def to_s(options = {})\n    value\n  end\n\n  #",
        "\n//\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and returns a boolean\n//   - `filter`: a function that accepts a row and column and",
        "\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_add_single_value);\n\n        // Get the fragment manager\n        FragmentManager fm = getSupportFragmentManager();\n\n        // Get the fragment for the add single value fragment\n        AddSingleValueFragment fragment = (AddSingleValueFragment) fm.findFragmentById(R.id.fragment_add_single_value);\n\n        // Set the fragment as the main content\n        fragment.setMainContent(R.layout.fragment_add_single_value);\n\n        // Get the fragment's View\n        View view = fragment.getView();\n\n        // Get the TextView\n        TextView textView = (TextView) view.findViewById(R.id.textView_add_single_value);\n\n        // Set the textView's text\n        textView.setText(\"Add a single value\");\n\n        // Set the TextView's text color\n        textView.setTextColor(Color.BLUE);\n\n        // Set the TextView's text size\n        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 20);\n\n        // Set the TextView's text color\n        textView.setTextColor(Color.BLUE);\n",
        ".\n\n    Returns:\n        A list of the values that were added.\n    \"\"\"\n    return [1, 2, 3]\n\n\ndef add_multiple_values(values):\n    \"\"\"Adds multiple values to a list.\n\n    Args:\n        values (list): A list of values to add.\n\n    Returns:\n        A list of the values that were added.\n    \"\"\"\n    return [1, 2, 3]\n\n\ndef add_multiple_values_with_type(values, type):\n    \"\"\"Adds multiple values to a list with a type.\n\n    Args:\n        values (list): A list of values to add.\n        type (str): The type of the values to add.\n\n    Returns:\n        A list of the values that were added.\n    \"\"\"\n    return [1, 2, 3]\n\n\ndef add_multiple_values_with_type_and_values(values, type, values):\n    \"\"\"Adds multiple values to a list with a type and values.\n\n    Args:\n        values (list): A list of values to add.\n        type (str): The type of the values to add.\n        values (list): A list of values to add.\n\n    Returns:\n        A list of the values that were added.\n    \"\"\"\n    return [1",
        "\n    }\n\n    public void setRange(int start, int end) {\n        this.start = start;\n        this.end = end;\n    }\n\n    public void addRange(int start, int end) {\n        this.start = start;\n        this.end = end;\n    }\n\n    public void addRange(int start, int end, int step) {\n        this.start = start;\n        this.end = end;\n        this.step = step;\n    }\n\n    public void addRange(int start, int end, int step, int step2) {\n        this.start = start;\n        this.end = end;\n        this.step = step;\n        this.step2 = step2;\n    }\n\n    public void addRange(int start, int end, int step2, int step3) {\n        this.start = start;\n        this.end = end;\n        this.step = step;\n        this.step2 = step2;\n        this.step3 = step3;\n    }\n\n    public void addRange(int start, int end, int step2, int step3, int step4) {\n        this.start = start;\n        this.end = end;\n        this.step = step;\n       ",
        ".\n    //\n    // Returns:\n    //   The new range.\n    //\n    // Raises:\n    //   RangeError: If the range is invalid.\n    //\n    // Examples:\n    //\n    //   var range = new Range(1, 2);\n    //   range.add(3);\n    //   range.add(4);\n    //   range.add(5);\n    //   range.add(6);\n    //   range.add(7);\n    //   range.add(8);\n    //   range.add(9);\n    //   range.add(10);\n    //   range.add(11);\n    //   range.add(12);\n    //   range.add(13);\n    //   range.add(14);\n    //   range.add(15);\n    //   range.add(16);\n    //   range.add(17);\n    //   range.add(18);\n    //   range.add(19);\n    //   range.add(20);\n    //   range.add(21);\n    //   range.add(22);\n    //   range.add(23);\n    //   range.add(24);\n    //   range.add(25);\n    //   range.",
        "\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparisson);\n\n    // Add a comparisson filter\n    addComparissonFilter(comparis",
        "\n\n    /**\n     * @param string $date\n     * @return string\n     */\n    public function filterDate($date)\n    {\n        $date = new \\DateTime($date);\n        $date->setTimezone(new \\DateTimeZone('UTC'));\n        return $date->format('Y-m-d');\n    }\n\n    /**\n     * @param string $date\n     * @return string\n     */\n    public function filterDateWithTimezone($date)\n    {\n        $date = new \\DateTime($date);\n        $date->setTimezone(new \\DateTimeZone('UTC'));\n        return $date->format('Y-m-d H:i:s');\n    }\n\n    /**\n     * @param string $date\n     * @return string\n     */\n    public function filterDateWithTimezoneAndFormat($date)\n    {\n        $date = new \\DateTime($date);\n        $date->setTimezone(new \\DateTimeZone('UTC'));\n        return $date->format('Y-m-d H:i:s');\n    }\n\n    /**\n     * @param string $date\n     * @return string\n     */\n    public function filterDateWithTimezoneAndFormatAndFormat($date)\n    {\n        $date = new \\DateTime($date);\n",
        "\n\n    def test_filter_by_date(self):\n        \"\"\"\n        Tests that a date range filter works.\n        \"\"\"\n        self.assertEqual(\n            filter_by_date(\n                '2012-01-01',\n                '2012-01-02',\n                '2012-01-03',\n                '2012-01-04',\n                '2012-01-05',\n                '2012-01-06',\n                '2012-01-07',\n                '2012-01-08',\n                '2012-01-09',\n                '2012-01-10',\n                '2012-01-11',\n                '2012-01-12',\n                '2012-01-13',\n                '2012-01-14',\n                '2012-01-15',\n                '2012-01-16',\n                '2012-01-17',\n                '2012-01-18',\n                '2012-01-19',\n                '2012-01-20',\n                '2012-01-21',\n                '2012-01-22',\n                '2012-01-23',\n                '2012-01-24',\n                '2012-01-25',\n               ",
        "\n\n    /**\n     * @param string $value\n     * @return string\n     */\n    public function addNumber($value)\n    {\n        $this->number = $value;\n\n        return $this->number;\n    }\n\n    /**\n     * @return string\n     */\n    public function getNumber()\n    {\n        return $this->number;\n    }\n\n    /**\n     * @param string $value\n     * @return string\n     */\n    public function setNumber($value)\n    {\n        $this->number = $value;\n\n        return $this->number;\n    }\n\n    /**\n     * @return string\n     */\n    public function getQuantity()\n    {\n        return $this->quantity;\n    }\n\n    /**\n     * @param string $value\n     * @return string\n     */\n    public function setQuantity($value)\n    {\n        $this->quantity = $value;\n\n        return $this->quantity;\n    }\n\n    /**\n     * @return string\n     */\n    public function getQuantityUnit()\n    {\n        return $this->quantityUnit;\n    }\n\n    /**\n     * @param string $value\n     * @return string\n     */\n    public function setQuantityUnit($value",
        "\n    }\n\n    public static void main(String[] args) {\n        String[] input = new String[]{\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91",
        ".\n */\nCaTissue::Annotation::Annotation(const CaTissue::Resource& hook, const CaTissue::Annotation& annotation)\n{\n  _hook = hook;\n  _annotation = annotation;\n}\n\n/**\n @brief Creates a new annotation object in the caTissue database.\n\n @param [CaTissue::Resource] hook the existing static hook object to annotate\n @param [CaTissue::Annotation] annotation the annotation object to create\n @raise [AnnotationError] if the hook object does not have a database identifier\n */\nCaTissue::Annotation::Annotation(const CaTissue::Resource& hook, const CaTissue::Annotation& annotation, const std::string& database_identifier)\n{\n  _hook = hook;\n  _annotation = annotation;\n  _database_identifier = database_identifier;\n}\n\n/**\n @brief Creates a new annotation object in the caTissue database.\n\n @param [CaTissue::Resource] hook the existing static hook object to annotate\n @param [CaTissue::Annotation] annotation the annotation object to create\n @raise [AnnotationError] if the hook object does not have a database identifier\n */\nCaTissue::Annotation::Annotation(const CaTissue::Resource& hook, const CaTissue::Annotation& annotation, const std::string& database_identifier, const std::string& name",
        ")\n * `final_conjunction` - inserted between the final two items (if > 2), but before the conjunction (default: ' and ')\n * `final_delimiter` - inserted between the final two items (if > 2), but before the conjunction (default: ', ')\n * `final_conjunction` - inserted between the final two items (if > 2), but before the conjunction (default: ' and ')\n * `final_delimiter` - inserted between the final two items (if > 2), but before the conjunction (default: ', ')\n * `final_conjunction` - inserted between the final two items (if > 2), but before the conjunction (default: ' and ')\n * `final_delimiter` - inserted between the final two items (if > 2), but before the conjunction (default: ', ')\n * `final_conjunction` - inserted between the final two items (if > 2), but before the conjunction (default: ' and ')\n * `final_delimiter` - inserted between the final two items (if > 2), but before the conjunction (default: ', ')\n * `final_conjunction` - inserted between the final two items (if > 2), but before the conjunction (default: ' and ')\n * `final_delimiter` - inserted between the final two items (if > 2), but before the conjunction (default: ', ')\n * `final_conjunction`",
        " string\n */\nfunction format(string) {\n    var formattedString = '';\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n   ",
        " {\n  if File.exist?(path)\n    File.open(path, 'r') { |f| f.each_line { |line| line.chomp! } }\n  end\nend\n\ndef meta_file_path\n  File.join(File.dirname(__FILE__), 'meta.json')\nend\n\ndef meta_file_path_with_json\n  File.join(File.dirname(__FILE__), 'meta.json.erb')\nend\n\ndef meta_file_path_with_json_with_json_path\n  File.join(File.dirname(__FILE__), 'meta.json.erb.with.json.path')\nend\n\ndef meta_file_path_with_json_with_json_path_with_json_path\n  File.join(File.dirname(__FILE__), 'meta.json.erb.with.json.path.with.json.path')\nend\n\ndef meta_file_path_with_json_with_json_path_with_json_path\n  File.join(File.dirname(__FILE__), 'meta.json.erb.with.json.path.with.json.path.with.json.path.with.json.path.with.json.path.with.json",
        "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/wait.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n",
        "\n\n    def test_get_all_with_empty_collection(self):\n        self.assertEqual(self.collection.get_all(), [])\n\n    def test_get_all_with_empty_collection_with_empty_list(self):\n        self.assertEqual(self.collection.get_all(['a']), [])\n\n    def test_get_all_with_empty_collection_with_empty_dict(self):\n        self.assertEqual(self.collection.get_all(['a', 'b']), [])\n\n    def test_get_all_with_empty_collection_with_empty_list_with_empty_dict(self):\n        self.assertEqual(self.collection.get_all(['a', 'b', 'c']), [])\n\n    def test_get_all_with_empty_collection_with_empty_list_with_empty_dict(self):\n        self.assertEqual(self.collection.get_all(['a', 'b', 'c', 'd']), [])\n\n    def test_get_all_with_empty_collection_with_empty_list_with_empty_dict(self):\n        self.assertEqual(self.collection.get_all(['a', 'b', 'c",
        "\n\n#define DEBUG\n\n#define DEBUG_LEVEL\n\n#define DEBUG_LEVEL_DEBUG\n\n#define DEBUG_LEVEL_INFO\n\n#define DEBUG_LEVEL_WARNING\n\n#define DEBUG_LEVEL_ERROR\n\n#define DEBUG_LEVEL_FATAL\n\n#define DEBUG_LEVEL_OFF\n\n#define DEBUG_LEVEL_OFF_DEBUG\n\n#define DEBUG_LEVEL_OFF_INFO\n\n#define DEBUG_LEVEL_OFF_WARNING\n\n#define DEBUG_LEVEL_OFF_ERROR\n\n#define DEBUG_LEVEL_OFF_FATAL\n\n#define DEBUG_LEVEL_OFF\n\n#define DEBUG_LEVEL_OFF_DEBUG\n\n#define DEBUG_LEVEL_OFF_INFO\n\n#define DEBUG_LEVEL_OFF_WARNING\n\n#define DEBUG_LEVEL_OFF_ERROR\n\n#define DEBUG_LEVEL_OFF_FATAL\n\n#define DEBUG_LEVEL_OFF\n\n#define DEBUG_LEVEL_OFF_DEBUG\n\n#define DEBUG_LEVEL_OFF\n\n#define DEBUG_LEVEL_OFF_INFO\n\n#define DEBUG_LEVEL_OFF_WARNING\n\n#define DEBUG_LEVEL_OFF_ERROR\n\n#define DEBUG_LEVEL_OFF_FATAL\n\n#define DEBUG_LEVEL_OFF\n\n#define DEBUG_LEVEL_OFF_DEBUG\n\n#define DEBUG_LEVEL_OFF\n\n#define DEBUG_LEVEL_OFF_INFO",
        ".\n\n @overload require_aether(*coords, sources, deps)\n   @param [Array<String>] coords one or more colon-separated maven coordinate strings\n   @param [Hash] sources a hash with a key +:source+ or +:sources+\n   and a value of a single string or an array of sources that will be\n   permanently added to the list of sources\n   @param [Array<String>] deps one or more colon-separated dependency names\n   @param [Hash] deps a hash with a key +:dependency+ or +:deps+\n   and a value of a single string or an array of dependency names\n   that will be permanently added to the list of deps\n\n @overload require_aether(*coords, sources, deps, deps_to_add)\n   @param [Array<String>] coords one or more colon-separated maven coordinate strings\n   @param [Hash] sources a hash with a key +:source+ or +:sources+\n   and a value of a single string or an array of sources that will be\n   permanently added to the list of sources\n   @param [Array<String>] deps one or more colon-separated dependency names\n   @param [Hash] deps a hash with a key +:dependency+ or +:deps+\n   and a value of a single string or an array",
        " and the value of the lookup table is the value of the source file's\nvalue.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is a dictionary of strings to strings. The lookup table is\nindexed by the source file name.\n\nThe lookup table is",
        ".\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n\nThe column positions are stored in the form of a list of tuples. The first tuple\ncontains the column name and the second tuple contains the column position.\n",
        "'\n\nExample:\n\nInput:\n\n joins:: \"4=0;4=1\"\n positions:: \"1,2;4,5\"\n columns:: \"1,2;3,4\"\n\n Return value:: positions where to insert values in source file\n\nExample:\n\nInput:\n\n joins:: \"4=0;4=1\"\n positions:: \"1,2;4,5\"\n columns:: \"1,2;3,4\"\n\n Return value:: positions where to insert values in source file\n\nExample:\n\nInput:\n\n joins:: \"4=0;4=1\"\n positions:: \"1,2;4,5\"\n columns:: \"1,2;3,4\"\n\n Return value:: positions where to insert values in source file\n\nExample:\n\nInput:\n\n joins:: \"4=0;4=1\"\n positions:: \"1,2;4,5\"\n columns:: \"1,2;3,4\"\n\n Return value:: positions where to insert values in source file\n\nExample:\n\nInput:\n\n joins:: \"4=0;4=1\"\n positions:: \"1,2;4,5\"\n columns:: \"1,2;3,4\"\n\n Return value:: positions where to insert values in source file\n\nExample:\n\nInput:",
        ".\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is set to the short title.\n\nThe end date is set to now. The title is",
        " the corresponding row and column labels.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels as the\noriginal spread sheet.\n\nThe result is a new spread sheet with the same row and column labels",
        ".\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string.\n//\n// The operation on each column is a string",
        ".\n\nIf the provided row and column labels are larger than the spread sheet's rows\n and columns then only the respective row and column values are used. If\n the row and column labels are fewer than the respective row and column\n sizes the old labels are left untouched for the missing new labels.\n\nIf the provided row and column labels are larger than the spread sheet's rows\n and columns then only the respective row and column values are used. If\n the row and column labels are fewer than the respective row and column\n sizes the old labels are left untouched for the missing new labels.\n\nIf the provided row and column labels are larger than the spread sheet's rows\n and columns then only the respective row and column values are used. If\n the row and column labels are fewer than the respective row and column\n sizes the old labels are left untouched for the missing new labels.\n\nIf the provided row and column labels are larger than the spread sheet's rows\n and columns then only the respective row and column values are used. If\n the row and column labels are fewer than the respective row and column\n sizes the old labels are left untouched for the missing new labels.\n\nIf the provided row and column labels are larger than the spread sheet's rows\n and columns then only the respective row and column values are used. If\n the row and column labels are fewer than the respective row and column\n sizes the old",
        " to the console.\n\nThe matrix is a matrix of integers. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of strings. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of floats. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of booleans. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of strings. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of floats. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of booleans. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of strings. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of floats. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of booleans. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of strings. The first row is the column number and the second row is the row number.\n\nThe matrix is a matrix of floats",
        " and notAvailable values.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.\n\nIf file is provided the rows are created from the file.\n\nIf array is provided the rows are created from the array.",
        " row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the rows are equalized by column\n\nIf rows are of different column size the rows are equalized by row\n\nIf rows are of different column size the",
        ".\n\nReturns false if all rows have the same column size.\n\nExample:\n\n    >>> from pandas import DataFrame, Series, Series\n    >>> df = DataFrame([[1, 2, 3], [4, 5, 6]])\n    >>> df.columns\n    ['a', 'b', 'c']\n    >>> df.columns.size\n    2\n    >>> df.columns.size == df.columns.size\n    True\n    >>> df.columns.size == df.columns.size\n    False\n    >>> df.columns.size == df.columns.size\n    True\n    >>> df.columns.size == df.columns.size\n    False\n    >>> df.columns.size == df.columns.size\n    True\n    >>> df.columns.size == df.columns.size\n    False\n    >>> df.columns.size == df.columns.size\n    True\n    >>> df.columns.size == df.columns.size\n    False\n    >>> df.columns.size == df.columns.size\n    True\n    >>> df.columns.size == df.columns.size\n    False\n    >>> df.columns.size == df.columns.size\n    True\n    >>> df.columns.size == df.columns.size\n    False\n    >>> df.columns.size == df.columns.size\n",
        "\n    #\n    # @param [Integer, Array] value The value to coerce.\n    # @return [Object] The coerced value.\n    #\n    # @since 2.0.0.rc.1\n    def coerce(value)\n      case value\n      when Integer\n        value\n      when Array\n        value.map { |v| coerce(v) }\n      else\n        value\n      end\n    end\n\n    #\n    # Converts a string to a number or an array.\n    #\n    # @example Coerce a string to a number or an array.\n    #   Coerce('1')\n    #   # => [1]\n    #\n    # @param [String] value The value to coerce.\n    # @return [Array] The coerced value.\n    #\n    # @since 2.0.0.rc.1\n    def coerce(value)\n      case value\n      when String\n        value.to_i\n      when Array\n        value.map { |v| coerce(v) }\n      else\n        value\n      end\n    end\n\n    #\n    # Converts a string to a number or an array.\n    #\n    # @example Coerce a string to a number or an array.\n    #   Coerce('1,2,3",
        ".\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n\nThe result is a number or an array.\n",
        "\n\n    def test_count_on_file(self):\n        \"\"\"\n        Tests the count on file.\n        \"\"\"\n        self.assertEqual(count_on_file(self.test_file), 1)\n\n    def test_count_on_file_with_no_file(self):\n        \"\"\"\n        Tests the count on file with no file.\n        \"\"\"\n        self.assertEqual(count_on_file(None), 0)\n\n    def test_count_on_file_with_empty_file(self):\n        \"\"\"\n        Tests the count on file with empty file.\n        \"\"\"\n        self.assertEqual(count_on_file(\"\"), 0)\n\n    def test_count_on_file_with_empty_file_with_no_file(self):\n        \"\"\"\n        Tests the count on file with empty file with no file.\n        \"\"\"\n        self.assertEqual(count_on_file(\".\"), 0)\n\n    def test_count_on_file_with_empty_file_with_no_file(self):\n        \"\"\"\n        Tests the count on file with empty file with no file.\n        \"\"\"\n        self.assertEqual(count_on_file(\".\"), 0)\n\n    def test_count_on_",
        "\n\n    def test_count_with_limit(self):\n        \"\"\"\n        Tests that the count works with a limit\n        \"\"\"\n        count = Count(limit=1)\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save()\n        count.delete()\n        count.save",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetOperationCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.GetOperation;\nimport com.hazelcast.",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\",
        "\n\n#include \"../include/common.h\"\n\n#include \"../include/common/util.h\"\n\n#include \"../include/common/log.h\"\n\n#include \"../include/common/string.h\"\n\n#include \"../include/common/array.h\"\n\n#include \"../include/common/hash.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/common/listmap.h\"\n\n#include \"../include/common/hashset.h\"\n\n#include \"../include/common/listset.h\"\n\n#include \"../include/common/hashsetmap.h\"\n\n#include \"../include/common/listsetmap.h\"\n\n#include \"../include/common/hashset.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/common/hashmap.h\"\n\n#include \"../include/common/hashset.h\"\n\n#include \"../include/common/list.h\"\n\n#include \"../include/",
        "\n    }\n\n    @Override\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n        // TODO Auto-generated method stub\n        if (position == 0) {\n            Intent intent = new Intent(MainActivity.this, DetailActivity.class);\n            intent.putExtra(\"row\", row);\n            startActivity(intent);\n        } else if (position == 1) {\n            Intent intent = new Intent(MainActivity.this, DetailActivity.class);\n            intent.putExtra(\"row\", row);\n            intent.putExtra(\"id\", id);\n            startActivity(intent);\n        } else if (position == 2) {\n            Intent intent = new Intent(MainActivity.this, DetailActivity.class);\n            intent.putExtra(\"row\", row);\n            intent.putExtra(\"id\", id);\n            startActivity(intent);\n        } else if (position == 3) {\n            Intent intent = new Intent(MainActivity.this, DetailActivity.class);\n            intent.putExtra(\"row\", row);\n            intent.putExtra(\"id\", id);\n            startActivity(intent);\n        } else if (position == 4) {\n            Intent intent = new Intent(MainActivity.this, DetailActivity.class);\n            intent.put",
        "\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...]\n   user.messages   # => [#<Turntabler::Message ...>, ...",
        "\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<Turntabler::Room ...>\n   user.stalk    # => #<",
        "\n   user.boot('Broke rules')    # => false\n */\nmodule.exports = function(reason) {\n  return this.command('boot', reason);\n};\n",
        "\n*/\n\nmodule.exports = function(reason) {\n  return function(user) {\n    return user.report(reason);\n  };\n};\n",
        "\n */\n- (CaTissue::SpecimenCharacteristics *) specimenCharacteristics;\n\n/**\n Returns the parent specimen.\n\n @return [CaTissue::Specimen, nil] a copy of this Specimen's parent, or nil if none\n */\n- (CaTissue::Specimen *) parent;\n\n/**\n Returns the identifier of the specimen.\n\n @return [NSString *] the identifier of the specimen\n */\n- (NSString *) identifier;\n\n/**\n Returns the name of the specimen.\n\n @return [NSString *] the name of the specimen\n */\n- (NSString *) name;\n\n/**\n Returns the type of the specimen.\n\n @return [NSString *] the type of the specimen\n */\n- (NSString *) type;\n\n/**\n Returns the type of the specimen.\n\n @return [NSString *] the type of the specimen\n */\n- (NSString *) typeString;\n\n/**\n Returns the type of the specimen.\n\n @return [NSString *] the type of the specimen\n */\n- (NSString *) typeStringWithIdentifier:(NSString *)identifier;\n\n/**\n Returns the type of the specimen.\n\n @return [NSString *] the type of the specimen\n */\n- (NSString *) typeStringWithIdentifier",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate",
        "\n */\nCaTissue::Site* Participant::getCollectionSite() {\n  return collectionSite;\n}\n\n/**\n Returns the collection site for which this participant has a MRN. If there is not exactly one\n such site, then this method returns nil. This method is a convenience for the common situation\n where a participant is enrolled at one site.\n\n @return [CaTissue::Site] the collection site\n */\nCaTissue::Site* Participant::getCollectionSiteForMrn() {\n  return collectionSiteForMrn;\n}\n\n/**\n Returns the collection site for which this participant has a MRN. If there is not exactly one\n such site, then this method returns nil. This method is a convenience for the common situation\n where a participant is enrolled at one site.\n\n @return [CaTissue::Site] the collection site\n */\nCaTissue::Site* Participant::getCollectionSiteForMrn(const std::string& mrn) {\n  return collectionSiteForMrn.find(mrn);\n}\n\n/**\n Returns the collection site for which this participant has a MRN. If there is not exactly one\n such site, then this method returns nil. This method is a convenience for the common situation\n where a participant is enrolled at one site.\n\n @return [CaTissue::Site] the",
        " the other SpecimenRequirement characteristics.\n\n@param other The other SpecimenRequirement to compare to.\n@return True if this SpecimenRequirement characteristics matches the other SpecimenRequirement characteristics,\nfalse otherwise.\n*/\n- (BOOL)matchesWithOther:(SpecimenRequirement *)other;\n\n/**\nReturns the name of the SpecimenRequirement.\n\n@return The name of the SpecimenRequirement.\n*/\n- (NSString *)name;\n\n/**\nReturns the description of the SpecimenRequirement.\n\n@return The description of the SpecimenRequirement.\n*/\n- (NSString *)description;\n\n/**\nReturns the type of the SpecimenRequirement.\n\n@return The type of the SpecimenRequirement.\n*/\n- (NSString *)type;\n\n/**\nReturns the value of the SpecimenRequirement.\n\n@return The value of the SpecimenRequirement.\n*/\n- (NSNumber *)value;\n\n/**\nReturns the value of the SpecimenRequirement.\n\n@return The value of the SpecimenRequirement.\n*/\n- (NSNumber *)valueOf;\n\n/**\nReturns the value of the SpecimenRequirement.\n\n@return The value of the SpecimenRequirement.\n*/\n- (NSNumber *)valueOf:(NSString *)valueType;\n\n/**\nReturns the value of the Spec",
        ".\n\nReturns the first CPG CP coordinator, if any, or None.\n\"\"\"\n\nimport os\nimport sys\n\n# Get the first CPG CP coordinator, if any.\nif os.path.exists('/etc/cpg/cpg.conf'):\n    cpg_cp = os.path.join('/etc/cpg/cpg.conf', 'cpg')\n    cpg_cp_dir = os.path.dirname(cpg_cp)\n    cpg_cp_file = os.path.join(cpg_cp_dir, 'cpg.conf')\n    if os.path.exists(cpg_cp_file):\n        with open(cpg_cp_file) as f:\n            cpg_cp = f.read()\n    else:\n        cpg_cp = None\n\n# Get the first CPG CP coordinator, if any.\nif cpg_cp is None:\n    cpg_cp = os.path.join('/etc/cpg/cpg.conf', 'cpg')\n    cpg_cp_dir = os.path.dirname(cpg_cp)\n    cpg_cp_file = os.path.join(cpg_cp_dir, 'cpg.conf')\n    if os.path.exists(cp",
        ".\n\nThe following files are automatically generated by `npm run build:translations`\n\nThe `.babelrc` file contains a list of files that should be automatically\ngenerated. These files will be included in the build process when\nthis file is imported.\n\nThe `.babelrc.json` file contains a mapping of all the files that\nshould be automatically generated. These files will be included in the\nbuild process when this file is imported.\n\nThe `.babelrc.dev` file contains a mapping of all the files that\nshould be automatically generated when the `dev` option is set to true. These\nfiles will be included in the build process when this file is imported.\n\nThe `.babelrc.test` file contains a mapping of all the files that\nshould be automatically generated when the `test` option is set to true. These\nfiles will be included in the build process when this file is imported.\n\nThe `.babelrc.prod` file contains a mapping of all the files that\nshould be automatically generated when the `prod` option is set to true. These\nfiles will be included in the build process when this file is imported.\n\nThe `.babelrc.dist` file contains a mapping of all the files that\nshould be automatically generated when the `dist` option is set to true. These\nfiles will be included in the build process",
        "\n    #\n    # @param [String] path\n    # @param [String] content\n    # @param [Hash] options\n    # @option options [String] :path\n    # @option options [String] :content\n    # @option options [String] :path_with_extension\n    # @option options [String] :content_with_extension\n    # @option options [String] :path_with_extension_and_content\n    # @option options [String] :content_with_extension_and_content\n    # @option options [String] :path_with_extension_and_content_with_extension\n    # @option options [String] :content_with_extension_and_content_with_extension\n    # @option options [String] :path_with_extension_and_content_with_extension_and_content\n    # @option options [String] :content_with_extension_and_content_with_extension_and_content\n    # @option options [String] :path_with_extension_and_content_with_extension_and_content_with_extension\n    # @option options [String] :content_with_extension_and_content_with_extension_and_content_with_extension\n    # @option options [String] :path_with_extension_",
        "\n    }\n\n    /**\n     * @param string $locale\n     * @param string $key\n     * @param string $value\n     * @return string\n     */\n    public function set($locale, $key, $value)\n    {\n        $this->translations[$locale][$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     * @param string $locale\n     * @param string $key\n     * @return string\n     */\n    public function get($locale, $key)\n    {\n        return $this->translations[$locale][$key];\n    }\n\n    /**\n     * @param string $locale\n     * @param string $key\n     * @return string\n     */\n    public function remove($locale, $key)\n    {\n        unset($this->translations[$locale][$key]);\n\n        return $this;\n    }\n\n    /**\n     * @param string $locale\n     * @return array\n     */\n    public function all($locale)\n    {\n        return $this->translations[$locale];\n    }\n\n    /**\n     * @param string $locale\n     * @return array\n     */\n    public function allKeys($locale)\n    {\n        return array_keys($this->translations[$locale",
        ".\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main function is called by the TissueTester.\n\nThe main",
        "\n    #\n    # @param [String] filename\n    # @return [String]\n    def parse(filename)\n      File.open(filename, 'r') do |f|\n        f.each_line do |line|\n          if line =~ /^#/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n            next\n          end\n          if line =~ /^#\\s*$/\n           ",
        ".\n\n# Download the data files.\n#\n# @param [String] path\n# @param [String] filename\n# @param [String] type\n# @param [String] format\n# @param [String] format_type\n# @param [String] format_version\n# @param [String] format_date\n# @param [String] format_time\n# @param [String] format_duration\n# @param [String] format_duration_type\n# @param [String] format_duration_version\n# @param [String] format_duration_date\n# @param [String] format_duration_time\n# @param [String] format_duration_duration_type\n# @param [String] format_duration_duration_version\n# @param [String] format_duration_duration_date\n# @param [String] format_duration_duration_time\n# @param [String] format_duration_duration_duration_type\n# @param [String] format_duration_duration_version\n# @param [String] format_duration_duration_date\n# @param [String] format_duration_duration_time\n# @param [String] format_duration_duration_duration_type\n# @param [String] format_duration_duration_version\n# @param [String] format_duration_duration_date",
        "\n    #\n    # @param [String] path\n    # @return [String]\n    def download_file path\n      File.open(path, 'rb') { |f| f.read }\n    end\n\n    #\n    # Download a url to a file path\n    #\n    # @param [String] path\n    # @return [String]\n    def download_file path\n      File.open(path, 'rb') { |f| f.read }\n    end\n\n    #\n    # Download a url to a file path\n    #\n    # @param [String] path\n    # @return [String]\n    def download_file path\n      File.open(path, 'rb') { |f| f.read }\n    end\n\n    #\n    # Download a url to a file path\n    #\n    # @param [String] path\n    # @return [String]\n    def download_file path\n      File.open(path, 'rb') { |f| f.read }\n    end\n\n    #\n    # Download a url to a file path\n    #\n    # @param [String] path\n    # @return [String]\n    def download_file path\n      File.open(path, 'rb') { |f| f.read }",
        "\n\n    def get_random_vatsim_data_url(self):\n        \"\"\"\n        Returns a random vatsim data url\n        \"\"\"\n        return self.vatsim_data_url\n\n    def get_random_vatsim_data_url_from_status(self):\n        \"\"\"\n        Returns a random vatsim data url from status\n        \"\"\"\n        return self.vatsim_data_url\n\n    def get_random_vatsim_data_url_from_status_file(self):\n        \"\"\"\n        Returns a random vatsim data url from status file\n        \"\"\"\n        return self.vatsim_data_url\n\n    def get_random_vatsim_data_url_from_status_file_from_status(self):\n        \"\"\"\n        Returns a random vatsim data url from status file from status\n        \"\"\"\n        return self.vatsim_data_url\n\n    def get_random_vatsim_data_url_from_status_file_from_status_file(self):\n        \"\"\"\n        Returns a random vatsim data url from status file from status file\n        \"\"\"\n        return self.vatsim_data_url\n\n    def get_random_vatsim_data_url_from_status_",
        "\n\n    def test_cache_clear(self):\n        cache = Cache()\n        cache.clear()\n        self.assertEqual(cache.get('foo'), None)\n\n    def test_cache_clear_with_key(self):\n        cache = Cache()\n        cache.set('foo', 'bar')\n        cache.clear('foo')\n        self.assertEqual(cache.get('foo'), None)\n\n    def test_cache_clear_with_key_and_value(self):\n        cache = Cache()\n        cache.set('foo', 'bar')\n        cache.set('bar', 'baz')\n        cache.clear('foo')\n        self.assertEqual(cache.get('foo'), None)\n        self.assertEqual(cache.get('bar'), None)\n\n    def test_cache_clear_with_key_and_value_and_key(self):\n        cache = Cache()\n        cache.set('foo', 'bar')\n        cache.set('bar', 'baz')\n        cache.set('baz', 'qux')\n        cache.clear('foo', 'bar')\n        self.assertEqual(cache.get('foo'), None)\n        self.assertEqual(cache.get('bar'), None)\n        self.assertEqual(cache.",
        "\n\n    def test_write_json_with_json_object\n      @json_writer.write_json({ :name => 'John' })\n      assert_equal '{\"name\":\"John\"}', @json_writer.string\n    end\n\n    def test_write_json_with_json_array\n      @json_writer.write_json([{ :name => 'John' }, { :name => 'Doe' }])\n      assert_equal '[{\"name\":\"John\"},{\"name\":\"Doe\"}], @json_writer.string\n    end\n\n    def test_write_json_with_json_hash\n      @json_writer.write_json({ :name => 'John', :age => '42' })\n      assert_equal '{\"name\":\"John\",\"age\":\"42\"}', @json_writer.string\n    end\n\n    def test_write_json_with_json_array_with_hash\n      @json_writer.write_json([{ :name => 'John' }, { :name => 'Doe' }], { :name => 'John', :age => '42' })\n      assert_equal '[{\"name\":\"John\"},{\"name\":\"Doe\"}], @json_writer.string\n    end\n\n    def",
        "\n\n  def self.find_by_id(id)\n    find_by(id: id)\n  end\n\n  def self.find_by_name(name)\n    find_by(name: name)\n  end\n\n  def self.find_by_name_and_id(name, id)\n    find_by(name: name, id: id)\n  end\n\n  def self.find_by_name_and_id_and_type(name, id, type)\n    find_by(name: name, id: id, type: type)\n  end\n\n  def self.find_by_name_and_id_and_type_and_id(name, id, type, id)\n    find_by(name: name, id: id, type: type, id: id)\n  end\n\n  def self.find_by_name_and_id_and_type_and_id_and_type(name, id, type, id, type)\n    find_by(name: name, id: id, type: type, id: id, type: type)\n  end\n\n  def self.find_by_name_and_id_and_type_and_id_and_type(name, id, type, id,",
        "\n\n  def self.find_by_id(id)\n    find_by(:id => id)\n  end\n\n  def self.find_by_name(name)\n    find_by(:name => name)\n  end\n\n  def self.find_by_name_and_id(name, id)\n    find_by(:name => name, :id => id)\n  end\n\n  def self.find_by_name_and_id_and_type(name, id, type)\n    find_by(:name => name, :id => id, :type => type)\n  end\n\n  def self.find_by_name_and_id_and_type_and_id(name, id, type, id)\n    find_by(:name => name, :id => id, :type => type, :id => id)\n  end\n\n  def self.find_by_name_and_id_and_type_and_id_and_type_and_id(name, id, type, id, type, id)\n    find_by(:name => name, :id => id, :type => type, :id => id, :type => type, :id => id)\n  end\n\n  def self.find_by_name_and_id",
        ".\n @return [void]\n @since 1.0.0\n @api private\n */\nfunction EventListener(options) {\n  this.options = options || {};\n  this.name = this.options.name || 'EventListener';\n  this.events_exchange = this.options.events_exchange || 'events';\n  this.models_exchange = this.options.models_exchange || 'models';\n  this.error_limit = this.options.error_limit || 10;\n  this.error_interval = this.options.error_interval || 3600;\n  this.error_counter = this.options.error_counter || 0;\n  this.error_interval_seconds = this.options.error_interval_seconds || 3600;\n  this.error_interval_minutes = this.options.error_interval_minutes || 3600;\n  this.error_interval_hours = this.options.error_interval_hours || 3600;\n  this.error_interval_days = this.options.error_interval_days || 3600;\n  this.error_interval_weeks = this.options.error_interval_weeks || 3600;\n  this.error_interval_months = this.options.error_interval_months || 3600;\n  this.error_interval_years = this.options.error_interval_years ||",
        "\n\n    def test_watch_file(self):\n        \"\"\"Test that the file watcher works.\"\"\"\n        self.assertTrue(self.watcher.watch_file('/tmp/test.txt'))\n        self.assertTrue(self.watcher.watch_file('/tmp/test.txt'))\n        self.assertFalse(self.watcher.watch_file('/tmp/test.txt'))\n\n    def test_watch_directory(self):\n        \"\"\"Test that the directory watcher works.\"\"\"\n        self.assertTrue(self.watcher.watch_directory('/tmp'))\n        self.assertTrue(self.watcher.watch_directory('/tmp/test'))\n        self.assertFalse(self.watcher.watch_directory('/tmp/test/test'))\n\n    def test_watch_directory_with_no_file(self):\n        \"\"\"Test that the directory watcher works.\"\"\"\n        self.assertTrue(self.watcher.watch_directory('/tmp/test'))\n        self.assertTrue(self.watcher.watch_directory('/tmp/test/test'))\n        self.assertFalse(self.watcher.watch_directory('/tmp/test/test/test'))\n\n    def test_watch_directory_with_no_directory(self):\n        \"\"\"Test that the directory watcher works.\"\"\"\n        self.assertTrue",
        ".\n*/\n\nvar observer = require('./observer');\nvar queue = require('./queue');\nvar util = require('util');\n\nvar observerQueue = new queue.ObserverQueue();\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.on('update', function(event) {\n  console.log('Observer update: ' + event.name);\n});\n\nobserverQueue.on('add', function(event) {\n  console.log('Observer add: ' + event.name);\n});\n\nobserverQueue.on('remove', function(event) {\n  console.log('Observer remove: ' + event.name);\n});\n\nobserverQueue.startListening();\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue.addObserver(observer);\n\nobserverQueue",
        ".\n\n    @param observer The observer instance to unregister.\n    @param message The message to unregister.\n    @param cancel Whether to cancel the message.\n    @param context The context to use for the message.\n    @param sender The sender of the message.\n    @param senderId The sender ID of the message.\n    @param senderName The sender name of the message.\n    @param senderDisplayName The sender display name of the message.\n    @param senderAvatar The sender avatar of the message.\n    @param senderAvatarURL The sender avatar URL of the message.\n    @param senderAvatarURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURLURL The sender avatar URL of the message.\n    @param senderAvatarURLURLURLURL The sender avatar URL of the",
        "\n    {\n        return _observerQueue;\n    }\n\n    public void setObserverQueue(ObserverQueue observerQueue)\n    {\n        _observerQueue = observerQueue;\n    }\n\n    public void addObserver(Observer observer)\n    {\n        _observerQueue.addObserver(observer);\n    }\n\n    public void removeObserver(Observer observer)\n    {\n        _observerQueue.removeObserver(observer);\n    }\n\n    public void notifyObservers()\n    {\n        _observerQueue.notifyObservers();\n    }\n\n    public void notifyObservers(Object event)\n    {\n        _observerQueue.notifyObservers(event);\n    }\n\n    public void notifyObservers(Object event, Object arg)\n    {\n        _observerQueue.notifyObservers(event, arg);\n    }\n\n    public void notifyObservers(Object event, Object arg, Object arg2)\n    {\n        _observerQueue.notifyObservers(event, arg, arg2);\n    }\n\n    public void notifyObservers(Object event, Object arg, Object arg2, Object arg3)\n    {\n        _observerQueue.notifyObservers(event, arg, arg2, arg3);\n    }\n\n    public void notifyObservers(Object event, Object arg, Object arg2, Object arg3, Object arg4)\n    {",
        "\n */\nfunction serialize(data, options) {\n  if (typeof data !== 'object') {\n    throw new Error('data must be an object');\n  }\n  if (typeof options !== 'object') {\n    throw new Error('options must be an object');\n  }\n  if (options.omit_parameters) {\n    delete options.omit_parameters;\n  }\n  return JSON.stringify(data, options);\n}\n\n/**\n Return hash of data to be serialized to JSON\n @option options [Boolean] :omit_parameters when set, do not include attributes or parameters in data\n @return [Hash] data\n */\nfunction serializeWithParameters(data, options) {\n  if (typeof data !== 'object') {\n    throw new Error('data must be an object');\n  }\n  if (typeof options !== 'object') {\n    throw new Error('options must be an object');\n  }\n  if (options.omit_parameters) {\n    delete options.omit_parameters;\n  }\n  return JSON.stringify(data, options);\n}\n\n/**\n Return hash of data to be serialized to JSON\n @option options [Boolean] :omit_parameters when set, do not include attributes or parameters in data\n @return [Hash] data\n */\nfunction serializeWithAttributes(data",
        " 'draft'\n\ntype string = 'string'\ntype number = 'number'\ntype boolean = 'boolean'\ntype date = 'date'\ntype object = 'object'\ntype array = 'array'\ntype regexp = 'regexp'\ntype dateTime = 'dateTime'\ntype date = 'date'\ntype time = 'time'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'dateRange'\ntype dateRange = 'date",
        " or 'unpublish'\n\ntype is a string, either 'string' or 'number'\n\ntype is a number, either 'number' or 'string'\n\ntype is a boolean, either 'true' or 'false'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either 'function' or 'object'\n\ntype is a function, either '",
        ",to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a string,to a",
        " the HTML fragment in which to resolve links.\n */\nfunction resolveRelativeLinks(text) {\n  var links = [];\n  var linksRegex = /<a\\s+href=\"([^\"]+)\"\\s+[^>]*>([^<]+)<\\/a>/gi;\n  var matches = linksRegex.exec(text);\n  if (matches) {\n    matches.forEach(function (match) {\n      links.push(match[1]);\n    });\n  }\n  return links.join('\\n');\n}\n\nmodule.exports = resolveRelativeLinks;\n",
        "\n\n    def self.build_http_connection(host, port, user, password, ssl = false)\n      uri = URI.parse(\"http://#{host}:#{port}\")\n      uri.user = user\n      uri.password = password\n      uri.scheme = \"https\" if ssl\n      uri\n    end\n\n    def self.build_http_connection_with_ssl(host, port, user, password, ssl = false)\n      uri = URI.parse(\"https://#{host}:#{port}\")\n      uri.user = user\n      uri.password = password\n      uri.scheme = \"https\" if ssl\n      uri\n    end\n\n    def self.build_http_connection_with_ssl_with_ssl_context(host, port, user, password, ssl = false, ssl_context = nil)\n      uri = URI.parse(\"https://#{host}:#{port}\")\n      uri.user = user\n      uri.password = password\n      uri.scheme = \"https\" if ssl\n      uri.ssl_context = ssl_context\n      uri\n    end\n\n    def self.build_http_connection_with_ssl_with_ssl_context_with_ssl_context(host, port, user, password, ssl = false, ssl_context = nil, ssl_context_options",
        "\n\n# You can specify a list of conditions, including the following conditions:\n#\n#   * Redistributions of source code must retain the above copyright notice, this\n#     list of conditions and the following disclaimer.\n#\n#   * Redistributions in binary form must reproduce the above copyright notice,\n#     this list of conditions and the following disclaimer in the documentation\n#     and/or other materials provided with the distribution.\n#\n#   * Neither the name of the copyright holder nor the names of its\n#     contributors may be used to endorse or promote products derived from\n#     this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUD",
        "\n\n  # ==> Configuration for :confirmable\n  # A period that the user is allowed to access the website even without\n  # confirming his account. For instance, if set to 2.days, the user will be\n  # able to access the website for two days without confirming his account,\n  # access will be blocked just in the third day. Default is 0.days, meaning\n  # the user cannot access the website without confirming his account.\n  # config.allow_unconfirmed_access_for = 2.days\n\n  # A period that the user is allowed to confirm their account before their\n  # token becomes invalid. For example, if set to 3.days, the user can confirm\n  # their account within 3 days after the mail was sent, but on the fourth day\n  # their account can't be confirmed with the token any more.\n  # Default is nil, meaning there is no restriction on how long a user can take\n  # before confirming their account.\n  # config.confirm_within = 3.days\n\n  # If true, requires any email changes to be confirmed (exactly the same way as\n  # initial account confirmation) to be applied. Requires additional unconfirmed_email\n  # db field (see migrations). Until confirmed, new email is stored in\n  # unconfirmed_email column",
        "\n\n#\n# \n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
        "\n\n#\n# \n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#",
        "\n    #\n    # @param [String] name\n    # @param [String] value\n    # @return [String]\n    def self.label(name, value)\n      \"#{name}=#{value}\"\n    end\n\n    #\n    # @param [String] name\n    # @param [String] value\n    # @return [String]\n    def self.label_with_value(name, value)\n      \"#{name}=#{value}\"\n    end\n\n    #\n    # @param [String] name\n    # @param [String] value\n    # @return [String]\n    def self.label_with_value_with_prefix(name, value, prefix)\n      \"#{prefix}#{name}=#{value}\"\n    end\n\n    #\n    # @param [String] name\n    # @param [String] value\n    # @return [String]\n    def self.label_with_value_with_suffix(name, value, suffix)\n      \"#{suffix}#{name}=#{value}\"\n    end\n\n    #\n    # @param [String] name\n    # @param [String] value\n    # @return [String]\n    def self.label_with_value_with_prefix_and_suffix(name, value, prefix, suffix)\n      \"#{prefix}#{name",
        "\n @see BunnyClient#subscribe\n @see BunnyClient#subscribe_with_routing_keys\n @see BunnyClient#subscribe_with_routing_keys_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_and_arguments_and_arguments\n @see BunnyClient#subscribe_with_routing_keys_and_arguments_and_arguments_",
        ".\n @yieldreturn [Bunny::Consumer] Bunny consumer interface.\n @see Bunny::Consumer#subscribe\n @see Bunny::Consumer#unsubscribe\n @see Bunny::Consumer#subscribe_with_block\n @see Bunny::Consumer#unsubscribe_with_block\n @see Bunny::Consumer#subscribe_with_block_with_block\n @see Bunny::Consumer#unsubscribe_with_block_with_block\n @see Bunny::Consumer#subscribe_with_block_with_block_with_block\n @see Bunny::Consumer#unsubscribe_with_block_with_block_with_block\n @see Bunny::Consumer#subscribe_with_block_with_block_with_block_with_block\n @see Bunny::Consumer#unsubscribe_with_block_with_block_with_block_with_block\n @see Bunny::Consumer#subscribe_with_block_with_block_with_block_with_block\n @see Bunny::Consumer#unsubscribe_with_block_with_block_with_block_with_block\n @see Bunny::Consumer#subscribe_with_block_with_block_with_block_with_block\n @see Bunny::Consumer#unsubscribe_with_block_with",
        "\n @raise [Bunny::Error] if the queue already exists\n @raise [Bunny::Error] if the exchange already exists\n @raise [Bunny::Error] if the queue name is invalid\n @raise [Bunny::Error] if the exchange name is invalid\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the exchange name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound to an exchange\n @raise [Bunny::Error] if the queue name is already bound",
        "\n @yieldparam [Error] error error object\n @yieldreturn [void]\n */\nfunction subscribe(queue, options, callback) {\n  var self = this;\n  var queue_ = queue;\n  var options_ = options;\n  var callback_ = callback;\n\n  if (typeof options_ === 'function') {\n    callback_ = options_;\n    options_ = {};\n  }\n\n  if (typeof callback_ === 'function') {\n    queue_ = queue;\n    callback_ = callback_;\n  }\n\n  queue_.subscribe(options_, function(payload) {\n    callback_(payload);\n  });\n}\n\n/**\n * Unsubscribe from messages on the Bunny queue.\n *\n * @param [Bunny::Queue] queue Bunny queue\n * @param [Hash] options {} subscription options -- @see Bunny::Queue#unsubscribe\n * @yieldparam [String] payload message text\n * @yieldreturn [void]\n */\nfunction unsubscribe(queue, options) {\n  var self = this;\n  var queue_ = queue;\n  var options_ = options;\n\n  if (typeof options_ === 'function') {\n    callback_ = options_;\n    options_ = {};\n  }\n\n  queue_.unsubscribe(options_",
        "\n */\nfunction openChannel() {\n  var channel = new Bunny.Channel();\n  channel.open();\n  return channel;\n}\n\n/**\n Close a channel, or return the current channel for this thread if it exists and is currently closed.\n @param [Bunny::Channel] channel instance\n @return [Bunny::Channel] channel instance\n */\nfunction closeChannel(channel) {\n  if (channel.isOpen()) {\n    channel.close();\n  }\n  return channel;\n}\n\n/**\n Get the current channel for this thread.\n @return [Bunny::Channel] channel instance\n */\nfunction getChannel() {\n  return new Bunny.Channel();\n}\n\n/**\n Get the current channel for this thread.\n @return [Bunny::Channel] channel instance\n */\nfunction getCurrentChannel() {\n  return new Bunny.Channel();\n}\n\n/**\n Get the current channel for this thread.\n @return [Bunny::Channel] channel instance\n */\nfunction getCurrentChannel() {\n  return new Bunny.Channel();\n}\n\n/**\n Get the current channel for this thread.\n @return [Bunny::Channel] channel instance\n */\nfunction getCurrentChannel() {\n  return new Bunny.Channel();\n}\n\n/**\n Get the current",
        "\n @see http://rubybunny.info/articles/exchanges.html\n @see http://rubybunny.info/articles/topics.html\n @see http://rubybunny.info/articles/topics.html#publishing-a-message\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-routing-key\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-payload\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-options\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-routing_key\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-payload-and-options\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-routing_key-and-payload\n @see http://rubybunny.info/articles/topics.html#publishing-a-message-with-a-payload-and-options\n @see http://rubybunny.info/",
        "\n    #\n    # @param [String] name\n    # @param [String] value\n    # @param [String] type\n    # @param [String] format\n    # @param [String] format_options\n    # @param [String] format_options_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String] format_options_with_delimiter_with_delimiter_with_delimiter\n    # @param [String",
        " draft\nfunc TestNonTimestampedDraft(t *testing.T) {\n\tdraft := NewNonTimestampedDraft()\n\tif draft.IsNewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.NewerThan(draft.Newer",
        "\n @option options [String] :path_to_source [String] path to the source directory\n @option options [String] :path_to_destination [String] path to the destination directory\n @option options [String] :path_to_draft [String] path to the draft file\n @option options [String] :path_to_timestamp [String] path to the timestamp file\n @option options [String] :path_to_source_timestamp [String] path to the source timestamp file\n @option options [String] :path_to_destination_timestamp [String] path to the destination timestamp file\n @option options [String] :path_to_source_draft [String] path to the source draft file\n @option options [String] :path_to_destination_draft [String] path to the destination draft file\n @option options [String] :path_to_source_timestamp_draft [String] path to the source timestamp draft file\n @option options [String] :path_to_destination_timestamp_draft [String] path to the destination timestamp draft file\n @option options [String] :path_to_source_draft_timestamp [String] path to the source draft timestamp file\n @option options [String] :path_to_destination_draft_timestamp [String] path to the destination draft timestamp file\n @option options [String] :path_to",
        " and forgive me a little more.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <time.h>\n#include <assert.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys/mman.h>\n#include <sys",
        " to be marked as\n  # public and accessible to all users.\n  def self.allow_public_access?\n    true\n  end\n\n  # Override functionality from ActionController::Base to allow\n  # objects to be marked as public and accessible to all users.\n  def self.allow_public_access_to?(user)\n    user.is_admin? || user.is_staff?\n  end\n\n  # Override functionality from ActionController::Base to allow\n  # objects to be marked as private and accessible to all users.\n  def self.allow_private_access?\n    true\n  end\n\n  # Override functionality from ActionController::Base to allow\n  # objects to be marked as protected and accessible to all users.\n  def self.allow_protected_access?\n    true\n  end\n\n  # Override functionality from ActionController::Base to allow\n  # objects to be marked as private and accessible to all users.\n  def self.allow_protected_access_to?(user)\n    user.is_admin? || user.is_staff?\n  end\n\n  # Override functionality from ActionController::Base to allow\n  # objects to be marked as protected and accessible to all users.\n  def self.allow_protected_access_to?(user)\n    user.is_admin? || user",
        "\n\n    def initialize(args)\n      @args = args\n    end\n\n    def run\n      @args.each do |arg|\n        if arg =~ /^-/\n          @args.shift\n          @args.each do |arg|\n            if arg =~ /^-/\n              @args.shift\n              @args.each do |arg|\n                if arg =~ /^-/\n                  @args.shift\n                  @args.each do |arg|\n                    if arg =~ /^-/\n                      @args.shift\n                      @args.each do |arg|\n                        if arg =~ /^-/\n                          @args.shift\n                          @args.each do |arg|\n                            if arg =~ /^-/\n                              @args.shift\n                              @args.each do |arg|\n                                if arg =~ /^-/\n                                  @args.shift\n                                  @args.each do |arg|\n                                    if arg =~ /^-/\n                                      @args.shift\n                                      @args.each do |arg|\n                                        if arg =~ /^-/\n                                          @args.shift\n                                          @args.each do |arg|\n                                            if arg =~ /^-/\n                                              @args.shift\n                                              @args.each do |arg|\n                                                if arg =~ /",
        "\n\n    def test_run_with_no_args(self):\n        self.assertEqual(self.run_with_args(), [])\n\n    def test_run_with_args(self):\n        self.assertEqual(self.run_with_args(['--help']), [])\n\n    def test_run_with_args_with_help(self):\n        self.assertEqual(self.run_with_args(['--help', '--help']), [])\n\n    def test_run_with_args_with_help_and_args(self):\n        self.assertEqual(self.run_with_args(['--help', '--help', '--help']), [])\n\n    def test_run_with_args_with_help_and_args_with_help(self):\n        self.assertEqual(self.run_with_args(['--help', '--help', '--help', '--help']), [])\n\n    def test_run_with_args_with_help_and_args_with_help(self):\n        self.assertEqual(self.run_with_args(['--help', '--help', '--help', '--help']), [])\n\n    def test_run_with_args_with_help_and_args_with_",
        " the directory.\n\nIf there's no _posts directory in current directory, then we can't find a custom src\ndirectory.  If we do, return the name of the directory.\n\nIf there's no _config.yml, then we can't find a custom src directory.  If we do, return\nthe name of the directory.\n\nIf there's no _posts directory in current directory, then we can't find a custom src\ndirectory.  If we do, return the name of the directory.\n\nIf there's no _config.yml, then we can't find a custom src directory.  If we do, return\nthe name of the directory.\n\nIf there's no _posts directory in current directory, then we can't find a custom src\ndirectory.  If we do, return the name of the directory.\n\nIf there's no _config.yml, then we can't find a custom src directory.  If we do, return\nthe name of the directory.\n\nIf there's no _config.yml, then we can't find a custom src directory.  If we do, return\nthe name of the directory.\n\nIf there's no _config.yml, then we can't find a custom src directory.  If we do, return\nthe name of the directory.\n\nIf there's no _config.yml, then we can't find a custom",
        ".\n\nIf layout_path is nil, then the default layout will be returned.\n\nIf layout_path is a string, then the layout will be returned as a string.\n\nIf layout_path is a file, then the layout will be returned as a file.\n\nIf layout_path is a directory, then the layout will be returned as a directory.\n\nIf layout_path is nil, then the default layout will be returned.\n\nIf layout_path is a file, then the layout will be returned as a file.\n\nIf layout_path is a directory, then the layout will be returned as a directory.\n\nIf layout_path is nil, then the default layout will be returned.\n\nIf layout_path is a file, then the layout will be returned as a file.\n\nIf layout_path is a directory, then the layout will be returned as a directory.\n\nIf layout_path is nil, then the default layout will be returned.\n\nIf layout_path is a file, then the layout will be returned as a file.\n\nIf layout_path is a directory, then the layout will be returned as a directory.\n\nIf layout_path is nil, then the default layout will be returned.\n\nIf layout_path is a file, then the layout will be returned as a file.\n\nIf layout_path is a directory, then the layout",
        "\n\n    def test_usage(self):\n        \"\"\"\n        Test usage of the command line tool.\n        \"\"\"\n        # Create a new instance of the command line tool.\n        cmd = CommandLineTool()\n\n        # Set the command line tool's usage message.\n        cmd.usage = \"Usage: %prog [options]\"\n\n        # Run the command line tool.\n        cmd.run()\n\n        # Check the command line tool's usage message.\n        self.assertEqual(cmd.usage, \"Usage: %prog [options]\")\n\n    def test_help(self):\n        \"\"\"\n        Test help of the command line tool.\n        \"\"\"\n        # Create a new instance of the command line tool.\n        cmd = CommandLineTool()\n\n        # Set the command line tool's usage message.\n        cmd.usage = \"Usage: %prog [options]\"\n\n        # Run the command line tool.\n        cmd.run()\n\n        # Check the command line tool's usage message.\n        self.assertEqual(cmd.help, \"Usage: %prog [options]\")\n\n    def test_version(self):\n        \"\"\"\n        Test version of the command line tool.\n        \"\"\"\n        # Create a new instance of the command line tool.\n        cmd = CommandLineTool()\n\n        # Set",
        "\n\n#include \"../include/main.h\"\n\n#include \"../include/notification.h\"\n\n#include \"../include/notification_message.h\"\n\n#include \"../include/notification_message_controller.h\"\n\n#include \"../include/notification_message_controller_test.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../include/notification_message_controller_test_helper.h\"\n\n#include \"../",
        "\n\n    def test_get_messages(self):\n        self.assertEqual(self.messages.get_messages(), [])\n\n    def test_get_messages_with_no_messages(self):\n        self.messages.add(Message('foo', 'bar'))\n        self.messages.add(Message('baz', 'qux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'quux'))\n        self.messages.add(Message('quux', 'qu",
        ".\n * +symbol_sequence+ - Return each analysis as a single symbol.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis as a sequence of symbols.\n   Multicharacter symbols will be strings on the form +<symbol>+.\n * +symbol_sequence+ - Return each analysis",
        ".\n\nExample:\n\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"Hello World!\"\n    string = \"",
        "\n\n    def test_cli_help(self):\n        \"\"\"\n        Test the CLI help command\n        \"\"\"\n        self.assertEqual(self.cli.help(), 'Usage: %prog [options] [command] [args]')\n\n    def test_cli_version(self):\n        \"\"\"\n        Test the CLI version command\n        \"\"\"\n        self.assertEqual(self.cli.version(), '0.1')\n\n    def test_cli_help_help(self):\n        \"\"\"\n        Test the CLI help command\n        \"\"\"\n        self.assertEqual(self.cli.help('help'), 'Usage: %prog [options] [command] [args]')\n\n    def test_cli_help_version(self):\n        \"\"\"\n        Test the CLI version command\n        \"\"\"\n        self.assertEqual(self.cli.version('version'), '0.1')\n\n    def test_cli_help_help_help(self):\n        \"\"\"\n        Test the CLI help command\n        \"\"\"\n        self.assertEqual(self.cli.help('help', 'help'), 'Usage: %prog [options] [command] [args]')\n\n    def test_cli_help_version_help(self):\n        \"\"\"\n        Test the CLI version command\n        \"\"\"\n        self.assertEqual(",
        "\n */\nfunction parseSpecs(path) {\n  var specs = [];\n  var file = fs.createReadStream(path);\n  file.on('data', function(data) {\n    specs.push(data);\n  });\n  file.on('end', function() {\n    specs = specs.filter(function(spec) {\n      return spec.status === 'failed';\n    });\n    return specs;\n  });\n  return specs;\n}\n\n/**\n * Parse the specs on the given file path and return those\n that have not been fulfilled or need to be updated.\n\n @param [String] path target file path\n @return [<Spectro::Spec>] collection of specs not fulfilled or out of of of time\n */\nfunction parseSpecsWithTime(path) {\n  var specs = [];\n  var file = fs.createReadStream(path);\n  file.on('data', function(data) {\n    specs.push(data);\n  });\n  file.on('end', function() {\n    specs = specs.filter(function(spec) {\n      return spec.status === 'failed' && spec.time > 0;\n    });\n    return specs;\n  });\n  return specs;\n}\n\n/**\n * Parse the specs on the given file path and",
        "\n\n    #\n    # @param [String] name\n    # @param [String] value\n    # @return [String]\n    #\n    def self.remove_non_reporting_server(name, value)\n      name = name.to_s\n      value = value.to_s\n\n      if value.include?(':')\n        name, value = value.split(':')\n      end\n\n      if value.include?('/')\n        name, value = value.split('/')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.')\n      end\n\n      if value.include?('.')\n        name, value = value.split('.'",
        "\n\n    def self.included(base)\n      base.extend ClassMethods\n    end\n\n    module ClassMethods\n      def excluded_from_search?\n        @excluded_from_search ||= false\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search?=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search?\n        @excluded_from_search\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n      def excluded_from_search=(value)\n        @excluded_from_search = value\n      end\n\n     ",
        " a SMS message to the user.\n *\n * @param {string} message - The message to send.\n * @param {string} [from] - The user to send the message to.\n * @param {string} [to] - The user to send the message to.\n * @param {string} [subject] - The subject of the message.\n * @param {string} [text] - The text of the message.\n * @param {string} [html] - The HTML of the message.\n * @param {string} [html_url] - The URL of the message.\n * @param {string} [html_text] - The text of the message.\n * @param {string} [html_html] - The HTML of the message.\n * @param {string} [html_text_url] - The URL of the message.\n * @param {string} [html_html_text] - The text of the message.\n * @param {string} [html_html_html] - The HTML of the message.\n * @param {string} [html_html_text_url] - The URL of the message.\n * @param {string} [html_html_html_text] - The text of the message.\n * @param {string} [html_html_html_text_url] - The",
        "<?php\n\nnamespace AppBundle\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity\n * @ORM\\Table(name=\"user\")\n */\nclass User\n{\n    /**\n     * @ORM\\Id\n     * @ORM\\Column(type=\"integer\")\n     * @ORM\\GeneratedValue(strategy=\"AUTO\")\n     */\n    private $id;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $username;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $email;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $password_confirmation;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role_name;\n\n    /**\n     * @ORM\\Column(type=\"string\", length=255)\n     */\n    private $role",
        "\n    }\n\n    /**\n     * @param string $value\n     * @param string $format\n     * @param string $message\n     * @param string $context\n     * @param string $code\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $codeFormat\n     * @param string $code",
        ".Session\n @param [String] session_id The session id\n @param [String] session_name The session name\n @param [String] session_type The session type\n @param [String] session_type_description The session type description\n @param [String] session_type_description_short The session type description short\n @param [String] session_type_description_long The session type description long\n @param [String] session_type_description_full The session type description full\n @param [String] session_type_description_short_full The session type description short full\n @param [String] session_type_description_long_full The session type description long full\n @param [String] session_type_description_full_short The session type description full short\n @param [String] session_type_description_long_short The session type description long short\n @param [String] session_type_description_full_long The session type description full long\n @param [String] session_type_description_full_full The session type description full full\n @param [String] session_type_description_short_full The session type description short full\n @param [String] session_type_description_long_short The session type description long short\n @param [String] session_type_description_full_long The session type description full long\n @param",
        " the results of the search\n */\nfunction searchGeo(table, field_name, value) {\n  var query = \"SELECT * FROM \" + table + \" WHERE \" + field_name + \" LIKE ?\";\n  return db.query(query, [value]);\n}\n\n/**\n * Performs a search for geo-attributes.\n\n @param [String] table the table to search\n @param [String] field_name the field/column to search in the given table\n @param [String] value string value to search in the given field and table\n @return [Hash] search results\n */\nfunction searchGeoGeo(table, field_name, value) {\n  var query = \"SELECT * FROM \" + table + \" WHERE \" + field_name + \" LIKE ? AND \" + field_name + \" LIKE ?\";\n  return db.query(query, [value, value]);\n}\n\n/**\n * Performs a search for geo-attributes.\n\n @param [String] table the table to search\n @param [String] field_name the field/column to search in the given table\n @param [String] value string value to search in the given field and table\n @return [Hash] search results\n */\nfunction searchGeoGeoGeo(table, field_name, value) {\n  var query = \"SELECT * FROM \" + table + \" WHERE",
        ".\n */\n\nvar adjuster = require('./adjuster');\n\nmodule.exports = function(condition, adjuster) {\n  return function(obj) {\n    if (obj === null) {\n      return null;\n    }\n    if (typeof obj === 'function') {\n      return obj(condition, adjuster);\n    }\n    if (typeof obj === 'object') {\n      return adjuster(obj, condition, adjuster);\n    }\n    return obj;\n  };\n};\n",
        ".\n */\nfunction apply(adjuster1, adjuster2, adjusters) {\n  var adjuster1_result = adjuster1.apply(adjusters);\n  var adjuster2_result = adjuster2.apply(adjusters);\n  return [adjuster1_result, adjuster2_result];\n}\n\n/**\n @param adjuster1 [Proc, #to_proc]\n @param adjuster2 [Proc, #to_proc]\n @param adjusters [Proc, #to_proc]\n @return [Proc, #to_proc]\n */\nfunction apply_all(adjuster1, adjuster2, adjusters) {\n  var adjuster1_result = adjuster1.apply(adjusters);\n  var adjuster2_result = adjuster2.apply(adjusters);\n  return [adjuster1_result, adjuster2_result];\n}\n\n/**\n @param adjuster1 [Proc, #to_proc]\n @param adjuster2 [Proc, #to_proc]\n @param adjusters [Proc, #to_proc]\n @return [Proc, #to_proc]\n */\nfunction apply_all_all(adjuster1, adjuster2, adjusters) {\n  var adjuster1_result = adjuster1.apply(adjusters);\n ",
        " the parser\n */\nfunction acceptParser(parser) {\n  return function(value) {\n    return parser(value);\n  };\n}\n\n/**\n * Parse a string.\n * @param value [string]\n * @return [object]\n */\nfunction parse(value) {\n  return {\n    type: 'parse',\n    value: value\n  };\n}\n\n/**\n * Parse a number.\n * @param value [number]\n * @return [object]\n */\nfunction parseNumber(value) {\n  return {\n    type: 'parse',\n    value: value\n  };\n}\n\n/**\n * Parse a boolean.\n * @param value [boolean]\n * @return [object]\n */\nfunction parseBoolean(value) {\n  return {\n    type: 'parse',\n    value: value\n  };\n}\n\n/**\n * Parse a string.\n * @param value [string]\n * @return [object]\n */\nfunction parseString(value) {\n  return {\n    type: 'parse',\n    value: value\n  };\n}\n\n/**\n * Parse a date.\n * @param value [date]\n * @return [object]\n */\nfunction parseDate(value) {\n  return {\n    type: 'parse",
        "\n\n    def __init__(self, name, *args, **kwargs):\n        super(ClassMatch, self).__init__(name, *args, **kwargs)\n        self.class_match = None\n\n    def __repr__(self):\n        return '<ClassMatch %r>' % self.name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __ne__(self, other):\n        return self.name != other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return '<ClassMatch %r>' % self.name\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __ne__(self, other):\n        return self.name != other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return '<ClassMatch %r>' % self.name\n\n    def __eq__(self, other):\n        return self.name == other.name\n",
        "\n\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500\n#define _XOPEN_SOURCE 500",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input",
        "\n\n#include \"../include/common.h\"\n\n#include \"../include/common/string.h\"\n#include \"../include/common/log.h\"\n#include \"../include/common/memory.h\"\n#include \"../include/common/thread.h\"\n#include \"../include/common/mutex.h\"\n#include \"../include/common/condvar.h\"\n#include \"../include/common/mutex_lock.h\"\n#include \"../include/common/condvar_lock.h\"\n#include \"../include/common/mutex_unlock.h\"\n#include \"../include/common/condvar_unlock.h\"\n#include \"../include/common/mutex_lock_unlock.h\"\n#include \"../include/common/mutex_lock_unlock_unlock.h\"\n#include \"../include/common/mutex_lock_unlock_unlock_unlock.h\"\n#include \"../include/common/mutex_lock_unlock_unlock_unlock.h\"\n#include \"../include/common/mutex_lock_unlock_unlock_unlock.h\"\n#include \"../include/common/mutex_lock_unlock_unlock_unlock.h\"\n#include \"../include/common/mutex_lock_unlock_unlock_unlock.h\"\n#include",
        ".\n  #\n  # @param [String] html\n  #   The HTML to wrap.\n  #\n  # @return [String]\n  #   The wrapped HTML.\n  def self.wrap_html(html)\n    html.gsub(/<br\\s*\\/?>/, '<br />')\n  end\n\n  # Returns the given HTML in Rails' default style to highlight validation errors, if any.\n  #\n  # @param [String] html\n  #   The HTML to wrap.\n  #\n  # @return [String]\n  #   The wrapped HTML.\n  def self.default_html(html)\n    html.gsub(/<br\\s*\\/?>/, '<br />')\n  end\n\n  # Returns the given HTML in Rails' default style to highlight validation errors, if any.\n  #\n  # @param [String] html\n  #   The HTML to wrap.\n  #\n  # @return [String]\n  #   The wrapped HTML.\n  def self.default_html_with_errors(html)\n    html.gsub(/<br\\s*\\/?>/, '<br />')\n  end\n\n  # Returns the given HTML in Rails' default style to highlight validation errors, if any.\n  #\n  # @param [",
        "\n\n - items/new.html.erb:\n\n     <%= select_tag_for_filter(\"items\", Item::FILTERS, params) -%>\n\n - items_controller.rb:\n\n     def new\n       @filters = Item::FILTERS\n       @items = Item.order_by(params[:by], params[:dir])\n       ...\n     end\n\n - items/edit.html.erb:\n\n     <%= select_tag_for_filter(\"items\", Item::FILTERS, params) -%>\n\n - items_controller.rb:\n\n     def edit\n       @filters = Item::FILTERS\n       @item = Item.find(params[:id])\n       ...\n     end\n\n - items/update.html.erb:\n\n     <%= select_tag_for_filter(\"items\", Item::FILTERS, params) -%>\n\n - items_controller.rb:\n\n     def update\n       @filters = Item::FILTERS\n       @item = Item.find(params[:id])\n       @item.update_attributes(params[:item])\n       ...\n     end\n\n - items/destroy.html.erb:\n\n     <%= select_tag_for_filter(\"items\", Item::FILTERS, params) -%>\n\n - items_controller",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveMessageCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.",
        "\n\n    /**\n     * @param string $password\n     * @param string $email\n     * @param string $passwordConfirmation\n     * @param string $passwordResetToken\n     * @param string $passwordResetTokenExpires\n     * @param string $passwordResetTokenType\n     * @param string $passwordResetTokenUser\n     * @param string $passwordResetTokenUserEmail\n     * @param string $passwordResetTokenUserPassword\n     * @param string $passwordResetTokenUserPasswordConfirmation\n     * @param string $passwordResetTokenUserPasswordResetToken\n     * @param string $passwordResetTokenUserPasswordResetTokenExpires\n     * @param string $passwordResetTokenUserPasswordResetTokenType\n     * @param string $passwordResetTokenUserPasswordResetTokenUser\n     * @param string $passwordResetTokenUserPasswordResetTokenUserEmail\n     * @param string $passwordResetTokenUserPasswordResetTokenUserPassword\n     * @param string $passwordResetTokenUserPasswordResetTokenUserPasswordConfirmation\n     * @param string $passwordResetTokenUserPasswordResetTokenUserPasswordResetTokenExpires\n     * @param string $passwordResetTokenUserPasswordResetTokenUserPasswordResetTokenType\n     * @param string $passwordResetTokenUserPasswordResetTokenUserPasswordResetTokenUser\n     * @param string $passwordResetTokenUserPasswordResetTokenUserPasswordResetTokenUserEmail\n     * @",
        "\n\n    def test_open_file_dialog(self):\n        self.assertEqual(\n            open_file_dialog(\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test',\n                'test",
        "\n\n    def __init__(self, name, description, **kwargs):\n        self.name = name\n        self.description = description\n        self.kwargs = kwargs\n\n    def __repr__(self):\n        return '<%s %s>' % (self.__class__.__name__, self.name)\n\n    def __str__(self):\n        return '<%s %s>' % (self.__class__.__name__, self.name)\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __ne__(self, other):\n        return self.name != other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __eq__(self, other):\n        return self.name == other\n\n    def __ne__(self, other):\n        return self.name != other\n\n    def __str__(self):\n        return '<%s %s>' % (self.__class__.__name__, self.name)\n\n    def __repr__(self):\n        return '<%s %s>' % (self.__class__.__name__, self.name)\n\n    def __str__(self):\n        return '<%s %s>' % (self.__class__",
        "\n\n    def test_add_path_with_no_path(self):\n        \"\"\"\n        Tests that adding a path with no path raises an error.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            self.path.add_path('/foo/bar')\n\n    def test_add_path_with_no_path_with_no_path(self):\n        \"\"\"\n        Tests that adding a path with no path with no path raises an error.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            self.path.add_path('/foo/bar/baz')\n\n    def test_add_path_with_no_path_with_no_path(self):\n        \"\"\"\n        Tests that adding a path with no path with no path raises an error.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            self.path.add_path('/foo/bar/baz/qux')\n\n    def test_add_path_with_no_path_with_no_path(self):\n        \"\"\"\n        Tests that adding a path with no path with no path raises an error.\n        \"\"\"\n        with self.assertRaises(ValueError):\n            self.path.add_path('/foo/bar/baz",
        ".run()\n\nOr, if you want to run the migration in a separate process,\nuse the following:\n\n   MyMigration.new.run(process.argv[2])\n\nThe migration will be run in the current directory.\n\n   MyMigration.new.run(process.argv[2], process.argv[3])\n\nThe migration will be run in the current directory, and the process will be killed.\n\n   MyMigration.new.run(process.argv[2], process.argv[3], process.argv[4])\n\nThe migration will be run in the current directory, and the process will be killed,\nand the process will be killed again.\n\n   MyMigration.new.run(process.argv[2], process.argv[3], process.argv[4], process.argv[5])\n\nThe migration will be run in the current directory, and the process will be killed,\nand the process will be killed again, and the process will be killed again again.\n\n   MyMigration.new.run(process.argv[2], process.argv[3], process.argv[4], process.argv[5], process.argv[6])\n\nThe migration will be run in the current directory, and the process will be killed,\nand the process will be killed again, and the process will be killed again again again.\n",
        ".\n\nFor example,\n\nGiven a list of integers, return all the parents of the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,",
        ".\n\n @example\n   var text = 'This is a test';\n   var extracted = extract(text, ['<', '>']);\n   console.log(extracted); // 'This is a test'\n\n @example\n   var text = 'This is a test';\n   var extracted = extract(text
        ".\n */\nexport function getQueryAttributeHash() {\n  return JSON.parse(JSON.stringify(this));\n}\n\n/**\n * Set query attribute hash.\n *\n * @param {Hash} hash\n * @return {void}\n */\nexport function setQueryAttributeHash(hash) {\n  this.set(JSON.stringify(hash));\n}\n\n/**\n * Get query attribute value.\n *\n * @return {string}\n */\nexport function getQueryAttribute() {\n  return this.get(JSON.stringify(this));\n}\n\n/**\n * Set query attribute value.\n *\n * @param {string} value\n * @return {void}\n */\nexport function setQueryAttribute(value) {\n  this.set(JSON.stringify(value));\n}\n\n/**\n * Get query attribute value.\n *\n * @return {string}\n */\nexport function getQueryAttributeString() {\n  return this.get(JSON.stringify(this));\n}\n\n/**\n * Set query attribute value.\n *\n * @param {string} value\n * @return {void}\n */\nexport function setQueryAttributeString(value) {\n  this.set(JSON.stringify(value));\n}\n\n/**\n * Get query attribute value.\n *\n * @return {string}\n */\nexport function getQueryAttributeNumber()",
        "\n */\nfunction getWebSocketAPIURI() {\n  return 'ws://' + window.location.host + '/ws';\n}\n\n/**\n * Get the WebSocket API version\n *\n * @return [String] version\n */\nfunction getWebSocketAPIVersion() {\n  return 'v1';\n}\n\n/**\n * Get the WebSocket API endpoint\n *\n * @return [String] endpoint\n */\nfunction getWebSocketAPIEndpoint() {\n  return 'ws://' + window.location.host + '/ws';\n}\n\n/**\n * Get the WebSocket API version\n *\n * @return [String] version\n */\nfunction getWebSocketAPIVersion() {\n  return 'v1';\n}\n\n/**\n * Get the WebSocket API endpoint\n *\n * @return [String] endpoint\n */\nfunction getWebSocketAPIEndpoint() {\n  return 'ws://' + window.location.host + '/ws';\n}\n\n/**\n * Get the WebSocket API endpoint\n *\n * @return [String] endpoint\n */\nfunction getWebSocketAPIEndpoint() {\n  return 'ws://' + window.location.host + '/ws';\n}\n\n/**\n * Get the WebSocket API endpoint\n *\n * @return [String] endpoint\n */\nfunction getWebSocketAPIEndpoint() {\n  return 'ws://' + window.location.host + '/ws';\n}",
        "\n    def test_parse_configuration_file(self):\n        \"\"\"Test parsing of the configuration file.\"\"\"\n        config = ConfigParser.ConfigParser()\n        config.read('test/test_config.ini')\n        self.assertEqual(config.get('test', 'test_key'), 'test_value')\n\n    def test_parse_configuration_file_with_default(self):\n        \"\"\"Test parsing of the configuration file with default.\"\"\"\n        config = ConfigParser.ConfigParser()\n        config.read('test/test_config.ini', default='test_value')\n        self.assertEqual(config.get('test', 'test_key'), 'test_value')\n\n    def test_parse_configuration_file_with_default_and_override(self):\n        \"\"\"Test parsing of the configuration file with default and override.\"\"\"\n        config = ConfigParser.ConfigParser()\n        config.read('test/test_config.ini', default='test_value', override='test_value2')\n        self.assertEqual(config.get('test', 'test_key'), 'test_value2')\n\n    def test_parse_configuration_file_with_override_and_default(self):\n        \"\"\"Test parsing of the configuration file with override and default.\"\"\"\n        config = ConfigParser.ConfigParser()\n        config.read('",
        "\n    }\n\n    // Run the test suite\n    if (require.main === module) {\n      require('asyncjs').test.testcase(module.exports).exec();\n    }\n  }\n});\n",
        ".\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in the table.\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in the table\n    with the given FQDN.\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in the table\n    with the given FQDN and ID.\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in the table\n    with the given FQDN and ID and FQDN.\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in the table\n    with the given FQDN and ID and FQDN and ID.\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in the table\n    with the given FQDN and ID and FQDN and ID.\n\n    If the table is empty, return an empty list.\n\n    If the table is not empty, return the list of all the entries in",
        "\n    def initialize(self, *args, **kwargs):\n        super(Database, self).__init__(*args, **kwargs)\n        self.connection = None\n\n    def connect(self):\n        self.connection = Database.connect(self.database)\n\n    def close(self):\n        self.connection.close()\n\n    def execute(self, query, *args, **kwargs):\n        return self.connection.execute(query, *args, **kwargs)\n\n    def execute_batch(self, query, *args, **kwargs):\n        return self.connection.execute_batch(query, *args, **kwargs)\n\n    def execute_scalar(self, query, *args, **kwargs):\n        return self.connection.execute_scalar(query, *args, **kwargs)\n\n    def execute_scalar_batch(self, query, *args, **kwargs):\n        return self.connection.execute_scalar_batch(query, *args, **kwargs)\n\n    def execute_scalar_scalar(self, query, *args, **kwargs):\n        return self.connection.execute_scalar_scalar(query, *args, **kwargs)\n\n    def execute_scalar_scalar_batch(self, query, *args, **kwargs):\n        return self.connection.execute_scalar_scalar",
        "\n    #\n    # @param [String] name The name of the database\n    # @param [Hash] options The options to be passed to the database\n    #\n    # @return [Boolean] True if the database was updated, false otherwise\n    def update_database(name, options = {})\n      return false unless name\n      return false unless options\n\n      # Create the table if it doesn't exist\n      if !@db.table_exists?(name)\n        @db.create_table(name, options)\n      end\n\n      # Update the table\n      @db.update(name, options)\n\n      # Return true if the table was updated\n      return true\n    end\n\n    # Create the table if it doesn't exist\n    #\n    # @param [String] name The name of the table\n    #\n    # @return [Boolean] True if the table was created, false otherwise\n    def create_table(name)\n      return false unless name\n\n      # Create the table\n      @db.create_table(name)\n\n      # Return true if the table was created\n      return true\n    end\n\n    # Delete the table if it doesn't exist\n    #\n    # @param [String] name The name of the table\n    #\n    # @return [Boolean] True",
        "\n\n    /**\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * @param string $name\n     */\n    public function setName($name)\n    {\n        $this->name = $name;\n    }\n\n    /**\n     * @return string\n     */\n    public function getDescription()\n    {\n        return $this->description;\n    }\n\n    /**\n     * @param string $description\n     */\n    public function setDescription($description)\n    {\n        $this->description = $description;\n    }\n\n    /**\n     * @return string\n     */\n    public function getAuthor()\n    {\n        return $this->author;\n    }\n\n    /**\n     * @param string $author\n     */\n    public function setAuthor($author)\n    {\n        $this->author = $author;\n    }\n\n    /**\n     * @return string\n     */\n    public function getAuthorEmail()\n    {\n        return $this->authorEmail;\n    }\n\n    /**\n     * @param string $authorEmail\n     */\n    public function setAuthorEmail($authorEmail)\n    {\n        $this->authorEmail = $authorEmail;\n   ",
        "\n    #\n    # @param [String] name\n    # @return [String]\n    def self.attribute_name(name)\n      name.to_s.gsub(/\\W/, '_').to_sym\n    end\n\n    #\n    # @param [String] name\n    # @return [String]\n    def self.attribute_type(name)\n      name.to_s.gsub(/\\W/, '_').to_sym\n    end\n\n    #\n    # @param [String] name\n    # @return [String]\n    def self.attribute_format(name)\n      name.to_s.gsub(/\\W/, '_').to_sym\n    end\n\n    #\n    # @param [String] name\n    # @return [String]\n    def self.attribute_type_name(name)\n      name.to_s.gsub(/\\W/, '_').to_sym\n    end\n\n    #\n    # @param [String] name\n    # @return [String]\n    def self.attribute_type_name_plural(name)\n      name.to_s.gsub(/\\W/, '_').to_sym\n    end\n\n    #\n    # @param [String] name\n    # @return",
        "<?php\n\nnamespace App\\Http\\Controllers\\Admin;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\InputFilter;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\n",
        "\n\n    def test_write_list(self):\n        \"\"\"\n        Test that the list can be written to a file.\n        \"\"\"\n        self.assertEqual(\n            self.write_list(\n                [\n                    'a',\n                    'b',\n                    'c',\n                    'd',\n                    'e',\n                    'f',\n                    'g',\n                    'h',\n                    'i',\n                    'j',\n                    'k',\n                    'l',\n                    'm',\n                    'n',\n                    'o',\n                    'p',\n                    'q',\n                    'r',\n                    's',\n                    't',\n                    'u',\n                    'v',\n                    'w',\n                    'x',\n                    'y',\n                    'z',\n                ]\n            ),\n            [\n                'a',\n                'b',\n                'c',\n                'd',\n                'e',\n                'f',\n                'g',\n                'h',\n                'i',\n                'j',\n                'k',\n                'l',\n                'm',\n                'n',\n                'o',\n                'p',\n                'q',\n                'r',\n                's',\n                't',\n                'u',\n                'v",
        "\n    #\n    # @param [String] value\n    # @return [String]\n    def self.attribute_map[value]\n      {\n        :'x-ms-request-id' => :'xMsRequestId',\n        :'x-ms-client-request-id' => :'xMsClientRequestId',\n        :'x-ms-routing-request-id' => :'xMsRoutingRequestId',\n        :'x-ms-correlation-request-id' => :'xMsCorrelationRequestId',\n        :'x-ms-routing-response-id' => :'xMsRoutingResponseId',\n        :'x-ms-routing-function-name' => :'xMsRoutingFunctionName',\n        :'x-ms-routing-parameter-names' => :'xMsRoutingParameterNames',\n        :'x-ms-routing-parameter-values' => :'xMsRoutingParameterValues',\n        :'x-ms-routing-parameter-types' => :'xMsRoutingParameterTypes',\n        :'x-ms-routing-parameter-encoding' => :'xMsRoutingParameterEncoding',\n        :'x-ms-routing-parameter-granularity' => :'xMsRoutingParameterGranularity',\n        :'x-ms-routing-parameter-granularity-unit' => :'xMsRoutingParameterGranularityUnit',\n        :'x-ms-routing-parameter-granularity",
        "\n    //\n    // @param {Object} field\n    // @param {Object} options\n    // @param {Object} options.options\n    // @param {Object} options.options.options\n    // @param {Object} options.options.options.options\n    // @param {Object} options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options.options.options.options.options.options.options\n    // @param {Object} options.options.options.options.options.options.options.options.options.options.options.options.options.options.options.options.options.options.",
        ".\n */\nfunction filter(method, objects, user) {\n  var filtered = [];\n\n  if (user) {\n    objects.forEach(function(obj) {\n      if (obj.user_id !== user.id) {\n        filtered.push(obj);\n      }\n    });\n  } else {\n    objects.forEach(function(obj) {\n      filtered.push(obj);\n    });\n  }\n\n  return filtered;\n}\n\nmodule.exports = filter;\n",
        "\n @since 1.0.0\n */\nfunction authorize(method) {\n  return (method === 'authorize');\n}\n\n/**\n Helper method available in controllers and views\n that returns the value of the policy method\n\n @param (see #authorize!)\n @return (Boolean)\n\n @visibility public\n */\nfunction authorize!() {\n  return (true);\n}\n\n/**\n Helper method available in controllers and views\n that returns the value of the policy method\n\n @param (see #authorize!)\n @return (Boolean)\n\n @visibility public\n */\nfunction authorize!(method) {\n  return (method === 'authorize!');\n}\n\n/**\n Helper method available in controllers and views\n that returns the value of the policy method\n\n @param (see #authorize!)\n @return (Boolean)\n\n @visibility public\n */\nfunction authorize!(method) {\n  return (method === 'authorize!');\n}\n\n/**\n Helper method available in controllers and views\n that returns the value of the policy method\n\n @param (see #authorize!)\n @return (Boolean)\n\n @visibility public\n */\nfunction authorize!(method) {\n  return (method === 'authorize!');\n}\n\n/**\n Helper method available in controllers and views\n that returns the value of the policy method\n\n @param (see #authorize!)",
        ".html#nethash for more information.\n\n /nethash/stats\n Default INTERVAL=500, START=0, STOP=infinity.\n\n See http://dogechain.info/chain/Dogecoin/q/nethash for more information.\n\n /nethash/stats/stats\n Default INTERVAL=500, START=0, STOP=infinity.\n\n See http://dogechain.info/chain/Dogecoin/q/nethash/stats for more information.\n\n /nethash/stats/stats/stats\n Default INTERVAL=500, START=0, STOP=infinity.\n\n See http://dogechain.info/chain/Dogecoin/q/nethash/stats/stats/stats\n for more information.\n\n /nethash/stats/stats/stats/stats\n Default INTERVAL=500, START=0, STOP=infinity.\n\n See http://dogechain.info/chain/Dogecoin/q/nethash/stats/stats/stats/stats\n for more information.\n\n /nethash/stats/stats/stats/stats/stats\n Default INTERVAL=500, START=0, STOP=infinity.\n\n See http://dogechain.info/chain/Dogecoin/q/nethash",
        " the first saved record\n @param ids [Array] the ids to search for\n @param offset [Integer] from the end of the index, back\n @param limit [Integer] the maximum number of records to return\n @return [Base, Array] the first saved record\n */\nfunction last(limit, offset, ids, limit) {\n  var ids = ids || [];\n  var offset = offset || 0;\n  var limit = limit || 1;\n  var result = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j",
        " the record(s) matching `ids`.\n */\nfunction find(ids) {\n  return this.findOne({id: ids});\n}\n\n/**\n Find a record by `id`\n @param id [Integer] of the record(s) to lookup.\n @return [Base, Array] matching the record(s) matching `id`.\n */\nfunction findOne(id) {\n  return this.findOne({id: id});\n}\n\n/**\n Find a record by `id`\n @param id [Integer] of the record(s) to lookup.\n @param options [Object] of options to pass to the find method.\n @return [Base, Array] matching the record(s) matching `id`.\n */\nfunction findOne(id, options) {\n  return this.findOne({id: id}, options);\n}\n\n/**\n Find a record by `id`\n @param id [Integer] of the record(s) to lookup.\n @param options [Object] of options to pass to the find method.\n @return [Base, Array] matching the record(s) matching `id`.\n */\nfunction findOneAndUpdate(id, options) {\n  return this.findOneAndUpdate({id: id}, options);\n}\n\n/**\n Find a record by `id`\n @param id [Integer] of",
        "\n @param &done [Proc] passes the number of records processed\n @param &error [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number of records processed\n @param &error_callback [Proc] passes the error\n @param &done_callback [Proc] passes the number",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Lazy, self).__init__(*args, **kwargs)\n        self.lazy_loader = LazyLoader()\n\n    def __get__(self, instance, owner):\n        if instance is None:\n            instance = self.lazy_loader.load()\n        return instance\n\n    def __set__(self, instance, value):\n        instance = self.lazy_loader.load()\n        setattr(instance, self.name, value)\n\n    def __del__(self, instance):\n        instance = self.lazy_loader.load()\n        delattr(instance, self.name)\n\n\nclass LazyLoader(object):\n    \"\"\"\n    A lazy loader that loads objects from a file.\n    \"\"\"\n    def __init__(self):\n        self.loader = LazyLoader()\n\n    def load(self):\n        \"\"\"\n        Loads objects from a file.\n        \"\"\"\n        with open(self.filename) as f:\n            for line in f:\n                yield self.loader.load(line)\n\n    def __get__(self, instance, owner):\n        return self.loader.load()\n\n    def __set__(self, instance, value):\n        self.loader.load()\n",
        ".to_sym\n\n  # Returns the deserialized mapped key when provided with the latter key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products, 2).to_sym\n\n  # Returns the deserialized mapped key when provided with the former key.\n\n  mapped_key(:products,",
        "\n *\n * This is a simple example of how to use the CPU counter.\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <sys/resource.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource.h>\n#include <sys/resource",
        "\n\n#define NUM_OF_CPU_CORES (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT (NUM_OF_CPU_CORES_DEFAULT)\n\n#define NUM_OF_CPU_CORES_DEFAULT",
        "\n\n    def test_run_with_no_args(self):\n        \"\"\"\n        Test that the command line runner does not run the command if no arguments are given.\n        \"\"\"\n        runner = CommandRunner()\n        runner.run(['run', 'test'])\n        self.assertEqual(runner.output, '')\n\n    def test_run_with_no_args_and_no_output(self):\n        \"\"\"\n        Test that the command line runner does not run the command if no arguments are given and no output is given.\n        \"\"\"\n        runner = CommandRunner()\n        runner.run(['run', 'test', '--no-output'])\n        self.assertEqual(runner.output, '')\n\n    def test_run_with_no_args_and_output(self):\n        \"\"\"\n        Test that the command line runner does not run the command if no arguments are given and output is given.\n        \"\"\"\n        runner = CommandRunner()\n        runner.run(['run', 'test', '--output', 'test'])\n        self.assertEqual(runner.output, 'test')\n\n    def test_run_with_no_args_and_output_and_no_error(self):\n        \"\"\"\n        Test that the command line runner does not run the command if no arguments are given and output is",
        ".\n\nIf the event file is not found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found, reload the events from the current directory.\n\nIf the event file is found",
        "\n   >> @ruby.followee_of?(jim)\n   => true\n\n   >> @ruby.followee_of?(jim)\n   => false\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil\n\n   >> @ruby.followee_of?(jim)\n   => nil",
        "\n\n   >> @ruby.ever_followed\n   => [@ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby, @ruby, @ruby]\n\n   >> @ruby.ever_followed\n   => [@ruby, @ruby",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapRemoveCodec;\nimport com.hazelcast.client.impl.protocol.task.AbstractPartitionMessageTask;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.Action",
        "\n @example\n ```js\n var validateTimeout = require('../lib/validate-timeout');\n validateTimeout(10);\n ```\n */\nmodule.exports = function validateTimeout(timeout) {\n  if (typeof timeout !== 'number') {\n    throw new TypeError('timeout must be a number');\n  }\n  if (timeout < 0) {\n    throw new TypeError('timeout must be positive');\n  }\n};\n",
        "\n\n    // render the template\n    function render() {\n        var template = Handlebars.compile(template);\n        var data = {\n            title: 'Hello World',\n            message: 'Hello World'\n        };\n        var html = template(data);\n        $('#content').html(html);\n    }\n\n    // render the template\n    function render2() {\n        var template = Handlebars.compile(template);\n        var data = {\n            title: 'Hello World',\n            message: 'Hello World'\n        };\n        var html = template(data);\n        $('#content').html(html);\n    }\n\n    // render the template\n    function render3() {\n        var template = Handlebars.compile(template);\n        var data = {\n            title: 'Hello World',\n            message: 'Hello World'\n        };\n        var html = template(data);\n        $('#content').html(html);\n    }\n\n    // render the template\n    function render4() {\n        var template = Handlebars.compile(template);\n        var data = {\n            title: 'Hello World',\n            message: 'Hello World'\n        };\n        var html = template(data);\n        $('#content').html(html);\n   ",
        ".\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above call, but it is not a good idea to\nuse it.\n\nthis call is a bit more complicated than the above",
        ", and see if you can do it in O(n) time.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        " the method will return nil.\n\nInput:\n1. The number of cards in the hand\n2. The number of cards you want to discard\n3. The number of cards you want to discard\n4. The number of cards you want to discard\n\nOutput:\nThe card you want to discard is the card you want to discard after the hand is over the limit.\n\nExample:\n\nInput:\n1\n2\n3\n4\n\nOutput:\n1\n2\n3\n4\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.\n\nNote:\n\nYou may assume that the hand is not empty.",
        "\n    // You can use this method to add your own custom logic.\n    // It is called every frame.\n    // You can add your own custom logic in the `onFrame` method.\n    // You can add your own custom logic in the `onRender` method.\n    // You can add your own custom logic in the `onResize` method.\n    // You can add your own custom logic in the `onUpdate` method.\n    // You can add your own custom logic in the `onDestroy` method.\n    // You can add your own custom logic in the `onResizeEnd` method.\n    // You can add your own custom logic in the `onResizeStart` method.\n    // You can add your own custom logic in the `onResize` method.\n    // You can add your own custom logic in the `onResizeEnd` method.\n    // You can add your own custom logic in the `onResizeStart` method.\n    // You can add your own custom logic in the `onResize` method.\n    // You can add your own custom logic in the `onResizeEnd` method.\n    // You can add your own custom logic in the `onResizeStart` method.\n    // You can add your own custom logic in the `onResize` method.\n    // You can add your own custom logic in the `onResize`",
        "\n @since 1.0.0\n @see Thread#sleep\n @see Thread#sleep(long)\n @see Thread#sleep(long, long)\n @see Thread#sleep(long, long, long)\n @see Thread#sleep(long, long, long, long)\n @see Thread#sleep(long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long, long)\n @see Thread#sleep(long, long, long, long, long, long, long,",
        " block\n */\nfunction unlock(block) {\n  if (block) {\n    try {\n      block();\n    } catch (e) {\n      throw new ThreadError(e);\n    }\n  }\n}\n\n/**\n * @api private\n */\nfunction unlockAll() {\n  for (var i = 0; i < arguments.length; i++) {\n    unlock(arguments[i]);\n  }\n}\n\n/**\n * @api private\n */\nfunction unlockAllWith(block) {\n  for (var i = 0; i < arguments.length; i++) {\n    unlock(arguments[i], block);\n  }\n}\n\n/**\n * @api private\n */\nfunction unlockAllWithTimeout(block, timeout) {\n  for (var i = 0; i < arguments.length; i++) {\n    unlock(arguments[i], block, timeout);\n  }\n}\n\n/**\n * @api private\n */\nfunction unlockAllWithTimeoutAnd(block, timeout, block) {\n  for (var i = 0; i < arguments.length; i++) {\n    unlock(arguments[i], block, timeout, block);\n  }\n}\n\n/**\n * @api private\n */\nfunction unlockAllWithTimeoutAndTimeout(block, timeout, block) {\n  for (var",
        " timer\n @yieldparam start_time [Time]\n @raise [Exception] any exception raised in block\n @return [Float] time elapsed while running timer\n @example\n @example\n var timer = new Timer();\n var start_time = new Date();\n timer.start();\n timer.yield(start_time);\n timer.yield(start_time);\n timer.yield(start_time);\n @example\n @example\n var timer = new Timer();\n var start_time = new Date();\n timer.start();\n timer.yield(start_time);\n timer.yield(start_time);\n timer.yield(start_time);\n @example\n @example\n var timer = new Timer();\n var start_time = new Date();\n timer.start();\n timer.yield(start_time);\n timer.yield(start_time);\n @example\n @example\n var timer = new Timer();\n var start_time = new Date();\n timer.start();\n timer.yield(start_time);\n @example\n @example\n var timer = new Timer();\n var start_time = new Date();\n timer.start();\n timer.yield(start_time);\n @example\n @example\n var timer = new Timer();\n var start_time = new Date();\n timer.start();\n timer.yield(start_time);\n @example\n @",
        ":\n\n    $('#test').click(function() {\n        $('#test').html('<p>test</p>');\n        setTimeout(function() {\n            $('#test').html('<p>test</p>');\n        }, 1000);\n    });\n\n    $('#test').click(function() {\n        $('#test').html('<p>test</p>');\n        setTimeout(function() {\n            $('#test').html('<p>test</p>');\n        }, 1000);\n    });\n\n    $('#test').click(function() {\n        $('#test').html('<p>test</p>');\n        setTimeout(function() {\n            $('#test').html('<p>test</p>');\n        }, 1000);\n    });\n\n    $('#test').click(function() {\n        $('#test').html('<p>test</p>');\n        setTimeout(function() {\n            $('#test').html('<p>test</p>');\n        }, 1000);\n    });\n\n    $('#test').click(function() {\n        $('#test').html('<p>test</p>');\n        setTimeout(function() {\n            $('#test').html('<p>test",
        "\n    #\n    # @param [String] name\n    #   The name of the block\n    # @param [Hash] options\n    #   The block options\n    # @option options [String] :name\n    #   The name of the block\n    # @option options [String] :description\n    #   The description of the block\n    # @option options [String] :description_html\n    #   The description of the block in HTML format\n    # @option options [String] :description_markdown\n    #   The description of the block in Markdown format\n    # @option options [String] :description_markdown_html\n    #   The description of the block in Markdown format in HTML format\n    # @option options [String] :description_markdown_markdown\n    #   The description of the block in Markdown format in Markdown format\n    # @option options [String] :description_markdown_markdown_html\n    #   The description of the block in Markdown format in Markdown format in HTML format\n    # @option options [String] :description_markdown_markdown_markdown\n    #   The description of the block in Markdown format in Markdown format in Markdown format in HTML format\n    # @option options [String] :description_markdown_markdown_markdown\n    #   The description of the block in Markdown format in Markdown format in Markdown format in Markdown format in",
        " the ruby file source and returns the\n  # ruby file source as a string.\n  #\n  # @param [String] ruby_file_source The ruby file source to extract.\n  # @return [String] The ruby file source as a string.\n  def self.extract_ruby_file_source(ruby_file_source)\n    # If the ruby file source is a string, return it.\n    if ruby_file_source.is_a?(String)\n      ruby_file_source\n    else\n      # If the ruby file source is a hash, return the hash.\n      ruby_file_source.to_hash\n    end\n  end\nend\n",
        "\n\nAdd select method to select the first element of the array\n\nAdd select method to select the last element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the last element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the array\n\nAdd select method to select the middle element of the",
        "\n\n    def get_pagination(self, request, *args, **kwargs):\n        \"\"\"\n        Returns a pagination object.\n        \"\"\"\n        return Pagination(request, *args, **kwargs)\n\n    def get_queryset(self):\n        \"\"\"\n        Returns a queryset object.\n        \"\"\"\n        return self.model.objects.all()\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Returns a context data object.\n        \"\"\"\n        context = super(ListView, self).get_context_data(**kwargs)\n        context['pagination'] = self.get_pagination(request, *args, **kwargs)\n        return context\n\n    def get_queryset_for_data(self, data):\n        \"\"\"\n        Returns a queryset object for the given data.\n        \"\"\"\n        return self.model.objects.filter(**data)\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Returns a context data object for the given data.\n        \"\"\"\n        context = super(ListView, self).get_context_data(**kwargs)\n        context['pagination'] = self.get_pagination(request, *args, **kwargs)\n        return context\n\n    def get_template_names(self):\n        \"\"\"\n        Returns a list of",
        ".\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <time.h>\n#include <math.h>\n#include <assert.h>\n\n#define MAX_SIZE 100\n\nint main()\n{\n    int n, m, k, a[MAX_SIZE], b[MAX_SIZE];\n    int i, j, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10, k11, k12, k13, k14, k15, k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28, k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41, k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54, k55, k56, k57, k58, k59, k60, k61, k62, k63, k64, k65, k66, k67, k68,",
        "\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby)\n   => false\n   >> @jim.follower_of?(ruby)\n   => true\n   >> @jim.follower_of?(ruby",
        "\n\n    def test_get_model_from_file(self):\n        model = self.get_model_from_file('test/test_model.py')\n        self.assertEqual(model.name, 'TestModel')\n\n    def test_get_model_from_file_with_no_model(self):\n        with self.assertRaises(ValueError):\n            self.get_model_from_file('test/test_model.py')\n\n    def test_get_model_from_file_with_no_file(self):\n        with self.assertRaises(ValueError):\n            self.get_model_from_file('test/test_model.py.no_model')\n\n    def test_get_model_from_file_with_no_file_with_no_model(self):\n        with self.assertRaises(ValueError):\n            self.get_model_from_file('test/test_model.py.no_model.no_model')\n\n    def test_get_model_from_file_with_no_file_with_no_model(self):\n        with self.assertRaises(ValueError):\n            self.get_model_from_file('test/test_model.py.no_model.no_model.no",
        "\n\n    def test_get_model_from_file(self):\n        \"\"\"\n        Tests that the model is loaded from a file.\n        \"\"\"\n        model = self.get_model_from_file('test.json')\n        self.assertEqual(model.__module__, 'unfollow.models')\n        self.assertEqual(model.__name__, 'Unfollow')\n\n    def test_get_model_from_file_with_invalid_extension(self):\n        \"\"\"\n        Tests that the model is loaded from a file with an invalid extension.\n        \"\"\"\n        with self.assertRaises(ImportError):\n            self.get_model_from_file('test.json')\n\n    def test_get_model_from_file_with_invalid_module(self):\n        \"\"\"\n        Tests that the model is loaded from a file with an invalid module.\n        \"\"\"\n        with self.assertRaises(ImportError):\n            self.get_model_from_file('test.json')\n\n    def test_get_model_from_file_with_invalid_name(self):\n        \"\"\"\n        Tests that the model is loaded from a file with an invalid name.\n        \"\"\"\n        with self.assertRaises(ImportError):\n            self.get_model_",
        ".ever_follow]\n\n   >> @jim.ever_follow(user)\n   => [.ever_follow]\n\n   >> @jim.ever_follow(user, :since => 1.day.ago)\n   => [.ever_follow]\n\n   >> @jim.ever_follow(user, :since => 1.day.ago, :until => 1.day.ago)\n   => [.ever_follow]\n\n   >> @jim.ever_follow(user, :since => 1.day.ago, :until => 1.day.ago, :limit => 2)\n   => [.ever_follow]\n\n   >> @jim.ever_follow(user, :since => 1.day.ago, :until => 1.day.ago, :limit => 2, :include_rts => true)\n   => [.ever_follow]\n\n   >> @jim.ever_follow(user, :since => 1.day.ago, :until => 1.day.ago, :limit => 2, :include_rts => true, :include_mentions => true)\n   => [.ever_follow]\n\n   >> @jim.ever_follow(user, :since => 1.day.ago, :until => 1.day.ago, :limit => 2",
        " the item.\n @param item [Object] the item to retrieve.\n @param non_block [Boolean] if +true+, a +ThreadError+ will be raised.\n @return [Object] the item.\n @raise [ThreadError] if it is empty and +non_block+ is +true+\n @param item [Object] the item to retrieve.\n @see #get\n @see #get_all\n @see #get_all_with_meta\n @see #get_all_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_meta_with_meta_with_meta\n @see #get_all_with_",
        "\n @param block [Function]\n @return [Object]\n */\nfunction initialize(key, block) {\n  var service = services[key];\n  if (!service) {\n    throw new Error('Unknown service: ' + key);\n  }\n  return service.initialize(block);\n}\n\n/**\n Initialize can accept custom configuration parameters\n Lookup for a specific service `key`\n passed block is called with the result values\n in case of `http` backend it return the result directly\n @param key [string] identifier of the service\n @param block [Function]\n @return [Object]\n */\nfunction initialize(key, block) {\n  var service = services[key];\n  if (!service) {\n    throw new Error('Unknown service: ' + key);\n  }\n  return service.initialize(block);\n}\n\n/**\n Initialize can accept custom configuration parameters\n Lookup for a specific service `key`\n passed block is called with the result values\n in case of `http` backend it return the result directly\n @param key [string] identifier of the service\n @param block [Function]\n @return [Object]\n */\nfunction initialize(key, block) {\n  var service = services[key];\n  if (!service) {\n    throw new Error('Unknown service: ' + key);\n  }\n  return service.",
        "\n @return [void]\n @example\n var announce = require('node-announce');\n announce.announce('my-service', 'my-port', function(err, announce) {\n   if (err) {\n     console.log(err);\n   } else {\n     console.log('Announce sent to ' + announce.service + ' on port ' + announce.port);\n   }\n });\n */\nmodule.exports = function(key, port, block) {\n  if (typeof key === 'function') {\n    block = key;\n    key = null;\n  }\n  if (typeof port === 'function') {\n    block = port;\n    port = null;\n  }\n  if (typeof block === 'function') {\n    block = function() {};\n  }\n  if (!key) {\n    throw new Error('key is required');\n  }\n  if (!port) {\n    throw new Error('port is required');\n  }\n  if (!block) {\n    throw new Error('block is required');\n  }\n  var announce = require('node-announce');\n  announce.announce(key, port, block);\n};\n",
        ".\n */\n\nfunction buildCondition(delegated) {\n  var builder = new ConditionBuilder();\n  builder.add(delegated);\n  return builder;\n}\n\n/**\n * Condition Builder\n *\n * @constructor\n */\nfunction ConditionBuilder() {\n  this.delegates = [];\n}\n\n/**\n * Add a delegate to the builder.\n *\n * @param delegate [Symbol]\n * @return [Symbol]\n */\nConditionBuilder.prototype.add = function(delegate) {\n  this.delegates.push(delegate);\n  return delegate;\n};\n\n/**\n * Build a condition.\n *\n * @param delegated [Symbol]\n * @return [Symbol]\n */\nConditionBuilder.prototype.build = function(delegated) {\n  var builder = buildCondition(delegated);\n  for (var i = 0; i < this.delegates.length; i++) {\n    builder = builder.add(this.delegates[i]);\n  }\n  return builder;\n};\n\n/**\n * Build a condition.\n *\n * @param delegated [Symbol]\n * @return [Symbol]\n */\nConditionBuilder.prototype.buildAnd = function(delegated) {\n  var builder = buildCondition(delegated);\n  builder.",
        "\n @param [String] body The body of the request\n @param [String] headers The headers to use when crafting the request.\n @param [String] method The HTTP method to use when crafting the request.\n @param [String] url The URL to use when crafting the request.\n @param [String] body The body of the request\n @param [String] headers The headers to use when crafting the request.\n @param [String] method The HTTP method to use when crafting the request.\n @param [String] url The URL to use when crafting the request.\n @param [String] body The body of the request\n @param [String] headers The headers to use when crafting the request.\n @param [String] method The HTTP method to use when crafting the request.\n @param [String] url The URL to use when crafting the request.\n @param [String] body The body of the request\n @param [String] headers The headers to use when crafting the request.\n @param [String] method The HTTP method to use when crafting the request.\n @param [String] url The URL to use when crafting the request.\n @param [String] body The body of the request\n @param [String] headers The headers to use when crafting the request.\n",
        "\n\n    def height\n      @height ||= @image.height\n    end\n\n    def width\n      @width ||= @image.width\n    end\n\n    def width=(width)\n      @width = width\n    end\n\n    def height=(height)\n      @height = height\n    end\n\n    def to_s\n      @image.to_s\n    end\n\n    def to_image\n      @image.to_image\n    end\n\n    def to_image_with_width(width)\n      @image.to_image_with_width(width)\n    end\n\n    def to_image_with_height(height)\n      @image.to_image_with_height(height)\n    end\n\n    def to_image_with_width_and_height(width, height)\n      @image.to_image_with_width_and_height(width, height)\n    end\n\n    def to_image_with_width_and_height_with_scale(width, height, scale)\n      @image.to_image_with_width_and_height_with_scale(width, height, scale)\n    end\n\n    def to_image_with_width_and_height_with_scale_with_crop(width, height, scale,",
        " pixel in resized image\n    # Finds the closest color\n    # @param [Array<Integer>] pixels Array of pixels to find closest color\n    # @return [Integer] The closest color\n    def find_closest_color(pixels)\n      pixels.each do |pixel|\n        if self.color_at(pixel) == self.color_at(pixels.find { |p| p == pixel })\n          return pixel\n        end\n      end\n      nil\n    end\n\n    # Finds the closest color\n    # @param [Array<Integer>] pixels Array of pixels to find closest color\n    # @return [Integer] The closest color\n    def find_closest_color(pixels)\n      pixels.each do |pixel|\n        if self.color_at(pixel) == self.color_at(pixels.find { |p| p == pixel })\n          return pixel\n        end\n      end\n      nil\n    end\n\n    # Finds the closest color\n    # @param [Array<Integer>] pixels Array of pixels to find closest color\n    # @return [Integer] The closest color\n    def find_closest_color(pixels)\n      pixels.each do |pixel|\n        if self.color_at(pixel) == self.color_at(pixels.find { |p",
        "\n    // the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n    //\n    // The color is the color of the most similar color.\n",
        ".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "\n    def __init__(self, *args, **kwargs):\n        super(DepthFirstTree, self).__init__(*args, **kwargs)\n        self.depth = 0\n\n    def __repr__(self):\n        return '<DepthFirstTree %r>' % self.depth\n\n    def __eq__(self, other):\n        return self.depth == other.depth\n\n    def __ne__(self, other):\n        return self.depth != other.depth\n\n    def __lt__(self, other):\n        return self.depth < other.depth\n\n    def __le__(self, other):\n        return self.depth <= other.depth\n\n    def __gt__(self, other):\n        return self.depth > other.depth\n\n    def __ge__(self, other):\n        return self.depth >= other.depth\n\n    def __eq__(self, other):\n        return self.depth == other.depth\n\n    def __ne__(self, other):\n        return self.depth != other.depth\n\n    def __lt__(self, other):\n        return self.depth < other.depth\n\n    def __le__(self, other):\n        return self.depth <= other.depth\n\n    def __gt__(self, other):\n",
        "/*\n * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.hazelcast.client.impl.protocol.task.map;\n\nimport com.hazelcast.client.impl.protocol.ClientMessage;\nimport com.hazelcast.client.impl.protocol.codec.MapGetResponseCodec;\nimport com.hazelcast.instance.impl.Node;\nimport com.hazelcast.map.impl.MapService;\nimport com.hazelcast.map.impl.operation.MapOperation;\nimport com.hazelcast.nio.Connection;\nimport com.hazelcast.security.permission.ActionConstants;\n",
        "\n @example\n ```js\n var timeout = new Date(0);\n var valid = new Date(0);\n valid.setTime(valid.getTime() + timeout);\n ```\n */\n\nvar validate = require('./validate');\n\n/**\n Validates a timeout value, converting to a acceptable value if necessary\n @api private\n @param timeout [nil,Numeric]\n @raise [TypeError] if +timeout+ is not +nil+ or +Numeric+\n @raise [ArgumentError] if +timeout+ is negative\n @return [nil,Numeric]\n @example\n ```js\n var timeout = new Date(0);\n var valid = new Date(0);\n valid.setTime(valid.getTime() + timeout);\n ```\n */\n\nmodule.exports = validate;\n",
        ".\n\nIf this note is not already an authorization by this note, create it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is not an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization by this note, delete it.\n\nIf this note is already an authorization",
        "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\",
        ".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "\n\n @param {Date} date\n @param {String} [format]\n @param {String} [locale]\n @param {String} [timezone]\n @param {String} [timezoneOffset]\n @param {String} [timezoneName]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffixSuffix]\n @param {String} [timezoneNameSuffixSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix]\n @param {String} [timezoneNameSuffix",
        "\n\n    def test_get_day_of_week(self):\n        self.assertEqual(self.day_of_week, 'Sunday')\n\n    def test_get_day_of_week_with_no_day(self):\n        self.assertEqual(self.day_of_week, 'Saturday')\n\n    def test_get_day_of_week_with_no_week(self):\n        self.assertEqual(self.day_of_week, 'Sunday')\n\n    def test_get_day_of_week_with_no_day_in_week(self):\n        self.assertEqual(self.day_of_week, 'Saturday')\n\n    def test_get_day_of_week_with_no_day_in_month(self):\n        self.assertEqual(self.day_of_week, 'Sunday')\n\n    def test_get_day_of_week_with_no_day_in_year(self):\n        self.assertEqual(self.day_of_week, 'Saturday')\n\n    def test_get_day_of_week_with_no_day_in_year_in_month(self):\n        self.assertEqual(self.day_of_",
        "\n\n    def __init__(self, *args, **kwargs):\n        super(Calendar, self).__init__(*args, **kwargs)\n        self.calendar = Calendar()\n\n    def get_calendar(self):\n        return self.calendar\n\n    def get_calendar_by_name(self, name):\n        return self.calendar.get_calendar_by_name(name)\n\n    def get_calendar_by_id(self, id):\n        return self.calendar.get_calendar_by_id(id)\n\n    def get_calendar_by_year(self, year):\n        return self.calendar.get_calendar_by_year(year)\n\n    def get_calendar_by_month(self, month):\n        return self.calendar.get_calendar_by_month(month)\n\n    def get_calendar_by_day(self, day):\n        return self.calendar.get_calendar_by_day(day)\n\n    def get_calendar_by_weekday(self, weekday):\n        return self.calendar.get_calendar_by_weekday(weekday)\n\n    def get_calendar_by_weekday_name(self, weekday_name):\n        return self.calendar.get_calendar_by_weekday_name(week",
        "\n\n# Days - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months - Years - Weeks - Months",
        "\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus n days\n\n - hijri date plus n days\n\n - hijri date minus",
        " the error\n @example\n var error = new Error('Something went wrong');\n error.complete = function() {\n   console.log('Complete');\n };\n error.set(error);\n */\nvar Error = function(exception) {\n  this.exception = exception;\n};\n\n/**\n @method complete\n @param {Object} [error] the error to complete\n @return {void}\n @example\n var error = new Error('Something went wrong');\n error.complete = function() {\n   console.log('Complete');\n };\n error.set(error);\n */\nError.prototype.complete = function() {\n  this.exception.complete();\n};\n\n/**\n @method set\n @param {Object} [error] the error to set\n @return {void}\n @example\n var error = new Error('Something went wrong');\n error.set(error);\n */\nError.prototype.set = function(error) {\n  this.exception = error;\n};\n\nmodule.exports = Error;\n",
        "\n    def test_should_return_an_instance_of_a_class_with_a_new_method_with_a_new_arguments\n      assert_instance_of(Class, Class.new)\n    end\n\n    def test_should_return_an_instance_of_a_class_with_a_new_method_with_a_new_arguments_with_a_new_arguments\n      assert_instance_of(Class, Class.new(1, 2, 3))\n    end\n\n    def test_should_return_an_instance_of_a_class_with_a_new_method_with_a_new_arguments_with_a_new_arguments\n      assert_instance_of(Class, Class.new(1, 2, 3, 4))\n    end\n\n    def test_should_return_an_instance_of_a_class_with_a_new_method_with_a_new_arguments_with_a_new_arguments\n      assert_instance_of(Class, Class.new(1, 2, 3, 4, 5))\n    end\n\n    def test_should_return_an_instance_of_a_class_with_a_new_method_with_a_new_arguments_with_a_new_arguments",
        "\n    {\n        return $this->site;\n    }\n\n    /**\n     * Sets the site for the class in which this class is extended.\n     *\n     * @param Site $site\n     *\n     * @return $this\n     */\n    public function setSite(Site $site)\n    {\n        $this->site = $site;\n\n        return $this;\n    }\n\n    /**\n     * Returns the site for the class in which this class is extended.\n     *\n     * @return Site\n     */\n    public function getSite()\n    {\n        return $this->site;\n    }\n\n    /**\n     * Returns the site for the class in which this class is extended.\n     *\n     * @return Site\n     */\n    public function getSite()\n    {\n        return $this->site;\n    }\n\n    /**\n     * Returns the site for the class in which this class is extended.\n     *\n     * @return Site\n     */\n    public function getSite()\n    {\n        return $this->site;\n    }\n\n    /**\n     * Returns the site for the class in which this class is extended.\n     *\n     * @return Site\n     */\n    public function getSite()\n    {\n        return $this->site;\n",
        "?\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n   site && user && password\n end\n\ndef all_attributes_set?\n",
        ".\n\n@method initialize\n@param {Object} [options]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResourceClass]\n@param {String} [options.activeResource",
        ".\n\nThe agent will be configured with the following options:\n\n    - `port`: The port to listen on.\n    - `host`: The host to listen on.\n    - `debug`: Enable debug logging.\n    - `debug_level`: The debug level to use.\n    - `debug_file`: The debug file to use.\n    - `debug_file_path`: The debug file path to use.\n    - `debug_file_name`: The debug file name to use.\n    - `debug_file_type`: The debug file type to use.\n    - `debug_file_mode`: The debug file mode to use.\n    - `debug_file_size`: The debug file size to use.\n    - `debug_file_mode`: The debug file mode to use.\n    - `debug_file_size`: The debug file size to use.\n    - `debug_file_mode`: The debug file mode to use.\n    - `debug_file_size`: The debug file size to use.\n    - `debug_file_mode`: The debug file mode to use.\n    - `debug_file_size`: The debug file size to use.\n    - `debug_file_mode`: The debug file mode to use.\n   ",
        "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Support\\Facades\\URL;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\Input;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades\\InputValidator;\nuse Illuminate\\Support\\Facades",
        " and\n# remove the following lines.\n\n# This file is copied to spec/ when you run 'rails generate rspec:install'\nENV[\"RAILS_ENV\"] ||= 'test'\nrequire File.expand_path(\"../../config/environment\", __FILE__)\nrequire 'rspec/rails'\nrequire 'rspec/autorun'\nrequire 'capybara/rails'\nrequire 'capybara/poltergeist'\nrequire 'capybara/poltergeist/rspec'\nrequire 'capybara/poltergeist/rspec/rails'\nrequire 'capybara/poltergeist/rspec/rails/capybara'\nrequire 'capybara/poltergeist/rspec/rails/capybara/rspec'\nrequire 'capybara/poltergeist/rspec/rails/capybara/rspec'\nrequire 'capybara/poltergeist/rspec/rails/capybara/rspec'\nrequire 'capybara/poltergeist/rspec/rails/capybara/rspec'\nrequire 'capybara/poltergeist/rspec/rails/capybara/rspec'\nrequire"
    ],
    "references": [
        [
            "def fans\n      data = api('user.get_fans')\n      data['fans'].map {|id| User.new(client, :_id => id)}\n    end"
        ],
        [
            "def stickers_purchased\n      data = api('sticker.get_purchased_stickers')\n      data['stickers'].map {|sticker_id| Sticker.new(client, :_id => sticker_id)}\n    end"
        ],
        [
            "def blocks\n      data = api('block.list_all')\n      data['blocks'].map {|attrs| User.new(client, attrs['block']['blocked'])}\n    end"
        ],
        [
            "def update_profile(attributes = {})\n      assert_valid_keys(attributes, :name, :twitter_id, :facebook_url, :website, :about, :top_artists, :hangout)\n\n      # Convert attribute names over to their Turntable equivalent\n      {:twitter_id => :twitter, :facebook_url => :facebook, :top_artists => :topartists}.each do |from, to|\n        attributes[to] = attributes.delete(from) if attributes[from]\n      end\n\n      api('user.modify_profile', attributes)\n      self.attributes = attributes\n      true\n    end"
        ],
        [
            "def update_laptop(name)\n      assert_valid_values(name, *%w(mac pc linux chrome iphone cake intel android))\n\n      api('user.modify', :laptop => name)\n      self.attributes = {'laptop' => name}\n      true\n    end"
        ],
        [
            "def update_status(status = self.status)\n      assert_valid_values(status, *%w(available unavailable away))\n\n      now = Time.now.to_i\n      result = api('presence.update', :status => status)\n\n      client.reset_keepalive(result['interval'])\n      client.clock_delta = ((now + Time.now.to_i) / 2 - result['now']).round\n      self.attributes = {'status' => status}\n\n      true\n    end"
        ],
        [
            "def <<(input)\n      if input.index(/\\s+/).nil?\n        word      = normalize_word input\n        self.word = word unless word == ''\n      elsif input.scan(SENTENCE_DELIMITER).length < 2\n        self.sentence = input.gsub(SENTENCE_DELIMITER, '')\n      else\n        self.passage = input\n      end\n    end"
        ],
        [
            "def weighted(type, group)\n      if @weights[type].has_key?(group)\n        selector = WeightedSelect::Selector.new @weights[type][group]\n        selector.select\n      end\n    end"
        ],
        [
            "def run(event)\n      if conditions_match?(event.data)\n        # Run the block for each individual result\n        event.results.each do |args|\n          begin\n            @block.call(*args)\n          rescue StandardError => ex\n            logger.error(([ex.message] + ex.backtrace) * \"\\n\")\n          end\n        end\n\n        true\n      else\n        false\n      end\n    end"
        ],
        [
            "def conditions_match?(data)\n      if conditions\n        conditions.all? {|(key, value)| data[key] == value}\n      else\n        true\n      end\n    end"
        ],
        [
            "def add(storable, *coordinate)\n      validate_type(storable)\n      loc = create_location(coordinate)\n      pos = storable.position || storable.position_class.new\n      pos.location = loc\n      pos.occupant = storable\n      pos.holder = self\n      logger.debug { \"Added #{storable.qp} to #{qp} at #{loc.coordinate}.\" }\n      update_full_flag\n      self\n    end"
        ],
        [
            "def copy_container_type_capacity\n      return unless container_type and container_type.capacity\n      self.capacity = cpc = container_type.capacity.copy(:rows, :columns)\n      logger.debug { \"Initialized #{qp} capacity from #{container_type.qp} capacity #{cpc}.\" }\n      update_full_flag\n      cpc\n    end"
        ],
        [
            "def load\n      data = api('user.get_prefs')\n      self.attributes = data['result'].inject({}) do |result, (preference, value, *)|\n        result[preference] = value\n        result\n      end\n      super\n    end"
        ],
        [
            "def execute\n      File.open(out_file, 'w') do |o|\n        File.new(in_file, 'r').each_with_index do |line, index|\n          extraction = col_filter.process(row_filter.process(line.chomp, row: index))\n          o.puts extraction unless extraction.nil?\n        end\n      end\n    end"
        ],
        [
            "def teams(summoner, optional={})\n    region = optional[:region] || @sightstone.region\n    id = if summoner.is_a? Summoner\n      summoner.id\n    else\n      summoner\n    end\n    \n    uri = \"https://prod.api.pvp.net/api/lol/#{region}/v2.2/team/by-summoner/#{id}\"\n\n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n      teams = []\n      data.each do |team|\n        teams << Team.new(team)\n      end\n      if block_given?\n        yield teams\n      else\n        return teams\n      end\n    }\n  end"
        ],
        [
            "def get_doctype(path)\n      doc_type = nil\n      begin\n        metadata = YAML.load_file(path + 'template.yml')\n        doc_type = metadata['type']\n        if doc_type.nil?\n          say 'Type value not found. Check template.yml in the document directory', :red\n          say 'Make sure there is an entry `type: DOC_TYPE` in the file.'\n          say \"  #{path}\"\n          raise_error('DOC_TYPE not found in template.yml')\n        end\n      rescue Errno::ENOENT # File not found\n        say 'No template.yml found in the document directory. Did you forget to add it?', :red\n        say 'Did you run the command in the directory where the document is located?'\n        say \"  #{path}\"\n        raise_error('template.yml not found')\n      end\n      return doc_type\n    end"
        ],
        [
            "def execute\n      allocation = {}\n      File.open(infile).each_with_index do |line, index|\n        row = row_filter.process(line, row: index)\n        next if row.nil? or row.empty?\n        key = key_filter.process(row)\n        allocation[key] = [] if allocation[key].nil?\n        allocation[key] << col_filter.process(row).split(';') \n      end\n\n      File.open(outfile, 'w') do |out|\n        allocation.each do |key, values|\n          out.puts \"#{key};#{values.flatten.uniq.sort.join(';')}\"\n        end\n      end\n    end"
        ],
        [
            "def span_to(spanner)\n      Vector.new((@x - spanner.x).abs, (@y - spanner.y).abs)\n    end"
        ],
        [
            "def build\n      log_configuration_information\n\n      if subscription_list.empty?\n        Mako.logger.warn 'No feeds were found in your subscriptions file. Please add feeds and try again.'\n        return\n      end\n\n      log_time do\n        request_and_build_feeds\n        renderers.each do |renderer|\n          renderer_instance = renderer.new(bound: self)\n          writer.new(renderer: renderer_instance,\n                     destination: File.expand_path(renderer_instance.file_path, Mako.config.destination)).write\n        end\n      end\n    end"
        ],
        [
            "def log_configuration_information\n      Mako.logger.info \"Configuration File: #{Mako.config.config_file}\"\n      Mako.logger.info \"Theme: #{Mako.config.theme}\"\n      Mako.logger.info \"Destination: #{Mako.config.destination}\"\n    end"
        ],
        [
            "def log_time\n      Mako.logger.info 'Generating...'\n      start_time = Time.now.to_f\n      yield\n      generation_time = Time.now.to_f - start_time\n      Mako.logger.info \"done in #{generation_time} seconds\"\n    end"
        ],
        [
            "def execute\n      result = eval(operation)      \n      if outfile\n        if result.is_a?(SpreadSheet)\n          result.write(outfile)\n        else\n          puts\n          puts \"Warning: Result is no spread sheet and not written to file!\"\n          puts \"         To view the result use -p flag\" unless print\n        end\n      end\n\n      if print\n        puts\n        puts \"Operation\"\n        puts \"---------\"\n        operation.split(';').each { |o| puts o }\n        puts\n        puts \"Result\"\n        puts \"------\"\n        if result.nil? || result.empty?\n          puts result.inspect\n        else\n          puts result\n        end\n        puts\n      end\n    end"
        ],
        [
            "def create_operands(opts)\n        files   = opts[:files].split(',')\n        rlabels = opts[:rlabels].split(',').collect { |l| l.upcase == \"TRUE\" }\n        clabels = opts[:clabels].split(',').collect { |l| l.upcase == \"TRUE\" }\n\n        operands = {}\n        opts[:aliases].split(',').each_with_index do |a,i|\n          operands[a] = SpreadSheet.new(file: files[i], ds: opts[:ds], \n                                        equalize: opts[:equalize],\n                                        r: rlabels[i], c: clabels[i])\n        end\n\n        operands\n      end"
        ],
        [
            "def publish(params)\n      params[:msgid] = message_id = next_message_id\n      params = @default_params.merge(params)\n\n      logger.debug \"Message sent: #{params.inspect}\"\n\n      if HTTP_APIS.include?(params[:api])\n        publish_to_http(params)\n      else\n        publish_to_socket(params)\n      end\n\n      # Add timeout handler\n      EventMachine.add_timer(@timeout) do\n        dispatch('msgid' => message_id, 'command' => 'response_received', 'error' => 'timed out')\n      end if @timeout\n\n      message_id\n    end"
        ],
        [
            "def publish_to_socket(params)\n      message = params.is_a?(String) ? params : params.to_json\n      data = \"~m~#{message.length}~m~#{message}\"\n      @socket.send(data)\n    end"
        ],
        [
            "def publish_to_http(params)\n      api = params.delete(:api)\n      message_id = params[:msgid]\n\n      http = EventMachine::HttpRequest.new(\"http://turntable.fm/api/#{api}\").get(:query => params)\n      if http.response_header.status == 200\n        # Command executed properly: parse the results\n        success, data = JSON.parse(http.response)\n        data = {'result' => data} unless data.is_a?(Hash)\n        message = data.merge('success' => success)\n      else\n        # Command failed to run\n        message = {'success' => false, 'error' => http.error}\n      end\n      message.merge!('msgid' => message_id)\n\n      # Run the message handler\n      event = Faye::WebSocket::API::Event.new('message', :data => \"~m~#{Time.now.to_i}~m~#{JSON.generate(message)}\")\n      on_message(event)\n    end"
        ],
        [
            "def on_message(event)\n      data = event.data\n\n      response = data.match(/~m~\\d*~m~(.*)/)[1]\n      message =\n        case response\n        when /no_session/\n          {'command' => 'no_session'}\n        when /(~h~[0-9]+)/\n          # Send the heartbeat command back to the server\n          publish_to_socket($1)\n          {'command' => 'heartbeat'}\n        else\n          JSON.parse(response)\n        end\n      message['command'] = 'response_received' if message['msgid']\n\n      logger.debug \"Message received: #{message.inspect}\"\n      dispatch(message)\n    end"
        ],
        [
            "def add_defaults_local\n      super\n      self.capacity ||= Capacity.new.add_defaults\n      self.row_label ||= capacity.rows && capacity.rows > 0 ? 'Row' : 'Unused'\n      self.column_label ||= capacity.columns && capacity.columns > 0 ? 'Column' : 'Unused'\n    end"
        ],
        [
            "def ping ()\n      log.debug \"Pinging\"\n      Timeout.timeout(1) do\n        TCPSocket.new(address, 22).close\n      end\n      true\n    rescue Timeout::Error, Errno::ECONNREFUSED\n      fail \"Failed to ping #{self}\"\n    end"
        ],
        [
            "def cp (froms, to, as: nil, quiet: false)\n      as ||= @user\n      output = \"\"\n      synchronize do\n        [froms].flatten.each do |from|\n          if from.is_a?(String)\n            to += \"/\" if to[-1] != \"/\" && from.is_a?(Array)\n            command = [\"rsync\", \"-e\", ssh_command, \"-r\"]\n            command += [*from, \"#{as}@#{@address}:#{to}\"]\n            log.trace command.shelljoin, quiet: quiet\n            IO.popen(command, in: :close, err: %i(child out)) do |io|\n              until io.eof?\n                begin\n                  output << io.read_nonblock(100)\n                rescue IO::WaitReadable\n                  IO.select([io])\n                  retry\n                end\n              end\n              io.close\n              if !$?.success?\n                log.fatal \"exit status #{$?.exitstatus}: #{command}\", quiet: quiet\n                log.fatal output, quiet: quiet\n                fail \"failed to copy files\"\n              end\n            end\n          elsif from.respond_to?(:read)\n            cmd = \"echo #{Base64.strict_encode64(from.read).shellescape} | base64 -d > #{to.shellescape}\"\n            sh cmd, quiet: quiet\n          else\n            fail \"Don't know how to copy a #{from.class}: #{from}\"\n          end\n        end\n      end\n      true\n    end"
        ],
        [
            "def write (string, to, as: nil, quiet: false)\n      cp StringIO.new(string), to, as: as, quiet: quiet\n    end"
        ],
        [
            "def read (filename, as: nil, quiet: false)\n      Base64.decode64 sh(\"cat #{filename.shellescape} | base64\", as: as, quiet: quiet)\n    end"
        ],
        [
            "def sh (command, as: nil, quiet: false)\n      as ||= @user\n      output = \"\"\n      synchronize do\n        log.debug \"sh #{command}\", quiet: quiet\n        result = nil\n        ch = ssh(as).open_channel do |ch|\n          ch.request_pty do |ch, success|\n            \"failed to acquire pty\" unless success\n            ch.exec(command) do |_, success|\n              fail \"failed to execute command\" unless success\n              ch.on_data do |_, data|\n                log.trace \"received #{data.bytesize} bytes stdout\", quiet: quiet\n                output << data\n              end\n              ch.on_extended_data do |_, _, data|\n                log.trace \"received #{data.bytesize} bytes stderr\", quiet: quiet\n                output << data.colorize(:red)\n              end\n              ch.on_request(\"exit-status\") do |_, data|\n                result = data.read_long\n                log.trace \"received exit-status #{result}\", quiet: quiet\n              end\n            end\n          end\n        end\n        ch.wait\n        fail FailedCommand, output if result != 0\n        output\n      end\n    end"
        ],
        [
            "def can_hold_child?(storable)\n      Specimen === storable and storable.specimen_class == specimen_class and specimen_types.include?(storable.specimen_type)\n    end"
        ],
        [
            "def process_aggregation\n      File.new(infile).each_with_index do |line, index|\n        result = col_filter.process(row_filter.process(line.chomp, row: index))\n        unless result.nil? or result.empty?\n          if heading.empty? and not headerless\n            heading << result.split(';')\n            next\n          else\n            @sum_col = [result.split(';').size, sum_col].max \n          end\n          key_values[result]  += 1\n          sums[sum_col_title] += 1\n        end\n      end\n      heading.flatten!\n      heading[sum_col] = sum_col_title\n    end"
        ],
        [
            "def write_result\n      sum_line = [sum_row_title]\n      (heading.size - 2).times { sum_line << \"\" }\n      sum_line << sums[sum_col_title]\n      row = 0;\n      File.open(outfile, 'w') do |out|\n        out.puts sum_line.join(';') if row == sum_row ; row += 1\n        out.puts heading.join(';')\n        key_values.each do |k, v|\n          out.puts sum_line.join(';') if row == sum_row ; row += 1\n          out.puts [k, v].join(';')\n        end\n      end\n    end"
        ],
        [
            "def init_sum_scheme(sum_scheme)\n        row_scheme, col_scheme = sum_scheme.split(',') unless sum_scheme.nil?\n\n        unless row_scheme.nil?\n          @sum_row_title, @sum_row = row_scheme.split(':') unless row_scheme.empty?\n        end\n        \n        @sum_row.nil? ? @sum_row = 0 : @sum_row = @sum_row.to_i\n        @sum_row_title = 'Total' if @sum_row_title.nil? \n\n        col_scheme.nil? ? @sum_col_title = 'Total' : @sum_col_title = col_scheme\n        @sum_col = 0\n      end"
        ],
        [
            "def attributes(&block)\n      raise ArgumentError, \"You should provide block\" unless block_given?\n\n      attributes = Morf::AttributesParser.parse(&block)\n      self.class_variable_set(:@@attributes, attributes)\n    end"
        ],
        [
            "def resolve(dep_hashes, repos)\n      logger.info 'resolving dependencies'\n      \n      session = MavenRepositorySystemSession.new\n      local_repo = LocalRepository.new(local_repository_path)\n      local_manager = @system.newLocalRepositoryManager(local_repo)\n      session.setLocalRepositoryManager(local_manager)\n\n      collect_req = CollectRequest.new\n\n      dep_hashes.each do |hash|\n        dep = Dependency.new new_artifact(hash), 'compile'\n        collect_req.addDependency dep\n        logger.debug 'requested {}', dep\n      end\n\n      repos.each do |uri|\n        repo = RemoteRepository.new(uri.object_id.to_s, 'default', uri)\n        collect_req.addRepository repo\n        logger.info 'added repository {}', repo.getUrl\n        enabled = []\n        enabled << 'releases' if repo.getPolicy(false).isEnabled\n        enabled << 'snapshots' if repo.getPolicy(true).isEnabled\n        logger.debug '{}', enabled.join('+')\n      end\n\n      node = @system.collectDependencies(session, collect_req).getRoot\n        \n      dependency_req = DependencyRequest.new(node, nil)\n      @system.resolveDependencies(session, dependency_req)\n      \n      nlg = PreorderNodeListGenerator.new\n      node.accept nlg\n\n      if logger.isDebugEnabled\n        total_size = 0\n        nlg.getArtifacts(false).each do |artifact|\n          file = artifact.file\n          size = File.stat(artifact.file.absolute_path).size\n          total_size += size\n          \n          logger.debug(\"Using %0.2f %s\" % [size/MiB_PER_BYTE, artifact])\n        end\n        logger.debug('      -----')\n        logger.debug(\"      %0.2f MiB total\" % [total_size/MiB_PER_BYTE])\n      else\n        nlg.getArtifacts(false).each do |artifact|\n          logger.info 'Using {}', artifact\n        end\n      end\n\n      nlg.getFiles.map{|e| e.to_s }\n    end"
        ],
        [
            "def place(stone)\n      x, y = stone.to_coord\n\n      internal_board[y][x] = stone\n    end"
        ],
        [
            "def parse(argv)\n      OptionParser.new do |options|\n        usage_and_help options\n        assign_text_file options\n        assign_weights_file options\n        assign_output_file options\n\n        begin\n          options.parse argv\n        rescue OptionParser::ParseError => error\n          STDERR.puts error.message, \"\\n\", options\n          exit(-1)\n        end\n      end\n    end"
        ],
        [
            "def execute(command, params)\n      params[:Bugzilla_login]    ||= username\n      params[:Bugzilla_password] ||= password\n\n      self.last_command = command_string(command, params)\n      xmlrpc_client.call(command, params)\n    end"
        ],
        [
            "def leagues(summoner, optional={})\n    region = optional[:region] || @sightstone.region\n    id = if summoner.is_a? Summoner\n      summoner.id\n    else\n      summoner\n    end\n    \n    uri = \"https://prod.api.pvp.net/api/lol/#{region}/v2.3/league/by-summoner/#{id}\"\n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n      leagues = []\n      data.each do |league|\n        leagues << League.new(league)\n      end\n      if block_given?\n        yield leagues\n      else\n        return leagues\n      end\n    }\n  end"
        ],
        [
            "def league_entries(summoner, optional={})\n    region = optional[:region] || @sightstone.region\n    id = if summoner.is_a? Summoner\n      summoner.id\n    else\n      summoner\n    end\n    \n    uri = \"https://prod.api.pvp.net/api/lol/#{region}/v2.3/league/by-summoner/#{id}/entry\"\n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n      entries = []\n      data.each do |entry|\n        entries << LeagueItem.new(entry)\n      end\n      if block_given?\n        yield entries\n      else\n        return entries\n      end\n    }\n  end"
        ],
        [
            "def place(top, left, angle)\n      api('sticker.place', :placement => [:sticker_id => id, :top => top, :left => left, :angle => angle], :is_dj => client.user.dj?, :roomid => room.id, :section => room.section)\n      true\n    end"
        ],
        [
            "def find\n      request_uris.map do |request|\n        if request[:body].nil?\n          request[:uri]\n        else\n          html = Nokogiri::HTML(request[:body])\n          potential_feed_uris = html.xpath(XPATHS.detect { |path| !html.xpath(path).empty? })\n          if potential_feed_uris.empty?\n            Mako.errors.add_error \"Could not find feed for #{request[:uri]}\"\n            next\n          end\n          uri_string = potential_feed_uris.first.value\n          feed_uri = URI.parse(uri_string)\n          feed_uri.absolutize!(request[:uri])\n        end\n      end.compact\n    end"
        ],
        [
            "def collection_status=(value)\n      if value == 'Complete' then\n        specimens.each { |spc| spc.collection_status = 'Collected' if spc.pending? }\n      end\n      setCollectionStatus(value)\n    end"
        ],
        [
            "def make_default_consent_tier_statuses\n      return if registration.nil? or registration.consent_tier_responses.empty?\n      \n      # the consent tiers\n      ctses = consent_tier_statuses.map { |cts| cts.consent_tier }\n      # ensure that there is a CT status for each consent tier\n      registration.consent_tier_responses.each do |ctr|\n        ct = ctr.consent_tier\n        # skip if there is a status for the response tier\n        next if ctses.include?(ct)\n        # make a new status\n        cts = CaTissue::ConsentTierStatus.new(:consent_tier => ct)\n        cts.add_defaults\n        consent_tier_statuses << cts\n        logger.debug { \"Made default #{qp} #{cts.qp} for consent tier #{ct.qp}.\" }\n      end\n    end"
        ],
        [
            "def default_collection_event\n      return if registration.nil?\n      pcl = registration.protocol || return\n      # if no protocol event, then add the default event\n      pcl.add_defaults if pcl.events.empty?\n      ev = pcl.sorted_events.first || return\n      logger.debug { \"Default #{qp} collection event is the registration protocol #{pcl.qp} first event #{ev.qp}.\" }\n      ev\n    end"
        ],
        [
            "def default_receiver\n      cep = collection_event_parameters\n      cltr = cep.user if cep\n      return cltr if cltr\n      cp = collection_protocol || return\n      rcv = cp.coordinators.first\n      return rcv if rcv or cp.fetched?\n      # Try to fetch the CP coordinator \n      return cp.coordinators.first if cp.find\n      # CP does not exist; add the CP defaults and retry\n      cp.add_defaults\n      cp.coordinators.first\n    end"
        ],
        [
            "def decrement_derived_quantity(child)\n      return unless specimen_type == child.specimen_type and child.initial_quantity\n      if available_quantity.nil? then\n        raise Jinx::ValidationError.new(\"Derived specimen has an initial quantity #{child.initial_quantity} but the parent is missing an available quantity\")\n      elsif (available_quantity - child.initial_quantity).abs < 0.00000001 then\n        # rounding error\n        self.available_quantity = 0.0\n      elsif child.initial_quantity <= available_quantity then\n        self.available_quantity -= child.initial_quantity\n      else\n        raise Jinx::ValidationError.new(\"Derived specimen initial quantity #{child.initial_quantity} exceeds parent available quantity #{available_quantity}\")\n      end\n    end"
        ],
        [
            "def update_changed_dependent(owner, property, dependent, autogenerated)\n      # Save the changed collectible event parameters directly rather than via a cascade.\n      if CollectibleEventParameters === dependent then\n        logger.debug { \"Work around a caTissue bug by resaving the collected #{owner} #{dependent} directly rather than via a cascade...\" }\n        update_from_template(dependent)\n      elsif CaTissue::User === owner and property.attribute == :address then\n        update_user_address(owner, dependent)\n      elsif CaTissue::Specimen === owner and CaTissue::Specimen === dependent then\n        logger.debug { \"Work around caTissue bug to update #{dependent} separately after the parent #{owner} update...\" }\n        prepare_specimen_for_update(dependent)\n        update_from_template(dependent)\n        logger.debug { \"Updated the #{owner} child #{dependent}.\" }\n      elsif CaTissue::ConsentTierStatus === dependent then\n          update_from_template(owner)\n      else\n        super\n      end\n    end"
        ],
        [
            "def update_user_address(user, address)\n      logger.debug { \"Work around caTissue prohibition of #{user} address #{address} update by creating a new address record for a dummy user...\" }\n      address.identifier = nil\n      perform(:create, address) { create_object(address) }\n      logger.debug { \"Worked around caTissue address update bug by swizzling the #{user} address #{address} identifier.\" }\n      perform(:update, user) { update_object(user) }\n      user\n    end"
        ],
        [
            "def add_position_to_specimen_template(specimen, template)\n      pos = specimen.position\n      # the non-domain position attributes\n      pas = pos.class.nondomain_attributes\n      # the template position reflects the old values, if available\n      ss = pos.snapshot\n      # the attribute => value hash\n      vh = ss ? pas.to_compact_hash { |pas| ss[pas] } : pos.value_hash(pas)\n      vh[:specimen] = template\n      vh[:storage_container] = pos.storage_container.copy\n      # the template position reflects the old values\n      template.position = pos.class.new(vh)\n      logger.debug { \"Work around #{specimen} update anomaly by copying position #{template.position.qp} to update template #{template.qp} as #{template.position.qp} with values #{vh.qp}...\" }\n    end"
        ],
        [
            "def ensure_primary_annotation_has_hook(annotation)\n      hook = annotation.hook\n      if hook.nil? then\n        raise CaRuby::DatabaseError.new(\"Cannot save annotation #{annotation} since it does not reference a hook entity\")\n      end\n      if hook.identifier.nil? then\n        logger.debug { \"Ensuring that the annotation #{annotation.qp} hook entity #{hook.qp} exists in the database...\" }\n        ensure_exists(hook)\n      end\n    end"
        ],
        [
            "def copy_annotation_proxy_owner_to_template(obj, template)\n      prop = obj.class.proxy_property\n      # Ignore the proxy attribute if it is defined by caRuby rather than caTissue.\n      return unless prop and prop.java_property?\n      rdr, wtr = prop.java_accessors\n      pxy = obj.send(rdr)\n      logger.debug { \"Setting #{obj.qp} template #{template.qp} proxy owner to #{pxy}...\" }\n      template.send(wtr, pxy)\n    end"
        ],
        [
            "def create_table_data\n      processed_header = false\n\n      File.open(infile).each_with_index do |line, index|\n        line = line.chomp\n\n        next if line.empty?\n        \n        line = unstring(line).chomp\n\n        header.process line, processed_header\n\n        unless processed_header\n          processed_header = true\n          next\n        end\n\n        next if row_filter.process(line, row: index).nil?\n        \n        @columns = line.split(';')\n\n        create_row(create_key, line)\n      end\n\n    end"
        ],
        [
            "def write_to_file\n      File.open(outfile, 'w') do |out|\n        out.puts header.to_s\n        out.puts create_sum_row if @sum_row_pos == 'TOP'\n        rows.each do |key, row|\n          line = [] << row[:key]\n          header.clear_header_cols.each_with_index do |col, index|\n            next if index < row[:key].size\n            line << row[:cols][col]\n          end\n          out.puts line.flatten.join(';')\n        end\n        out.puts create_sum_row if @sum_row_pos == 'EOF'\n      end\n    end"
        ],
        [
            "def to_number(value)\n        value = convert_to_en(value)\n        return value.to_i unless value =~ /\\./\n        return value.to_f if     value =~ /\\./ \n      end"
        ],
        [
            "def prepare_sum_row(pattern)\n        return if pattern.nil? || pattern.empty?\n        @sum_row_pos, sum_row_pattern = pattern.split(/(?<=^top|^eof):/i)\n        @sum_row_pos.upcase!\n        @sum_row = Hash.new\n        @sum_row_patterns = split_by_comma_regex(sum_row_pattern)\n      end"
        ],
        [
            "def add_to_sum_row(value, column)\n        return unless @sum_row_patterns\n        @sum_row_patterns.each do |pattern|\n          if pattern =~ /^\\(?c\\d+[=~+.]/\n            header_column = evaluate(pattern, \"\")\n          else\n            header_column = pattern\n          end\n\n          if header_column == column\n            @sum_row[header_column] ||= 0\n            @sum_row[header_column] += value\n          end\n        end\n      end"
        ],
        [
            "def create_sum_row\n        line = []\n        header.clear_header_cols.each do |col|\n          line << @sum_row[col] || \"\"\n        end\n        line.flatten.join(';')\n      end"
        ],
        [
            "def _rewrap_array(result)\n      if @wrap_results\n        newcoll = @collection.class.new(result)\n        self.class.new(newcoll, @wrapfunc_in, @wrapfunc_out)\n      else\n        @collection.class.new(result.map(&@wrapfunc_out))\n      end\n    end"
        ],
        [
            "def add_dependency(key, dependencies = [])\n\n      raise SelfDependencyError, \"An object's dependencies cannot contain itself\" if dependencies.include? key\n\n      node = node_for_key_or_new key\n      dependencies.each do |dependency|\n        node.addEdge(node_for_key_or_new(dependency))\n      end\n      resolve_dependencies\n    end"
        ],
        [
            "def resolve_dependency(node)\n      node.seen = true\n      @seen_this_pass << node\n\n      node.edges.each do |edge|\n        unless @resolved.include? edge\n          unless @seen_this_pass.include? edge\n            unless edge.seen?\n              resolve_dependency edge\n            end\n          else\n            raise CircularDependencyError, \"Circular reference detected: #{node.key.to_s} - #{edge.key.to_s}\"\n          end\n        end\n      end\n      @resolved << node\n    end"
        ],
        [
            "def with_friends\n      data = api('room.directory_graph')\n      data['rooms'].map do |(attrs, friends)|\n        Room.new(client, attrs.merge(:friends => friends))\n      end\n    end"
        ],
        [
            "def find(query, options = {})\n      assert_valid_keys(options, :limit, :skip)\n      options = {:limit => 20, :skip => 0}.merge(options)\n\n      data = api('room.search', :query => query, :skip => options[:skip])\n      data['rooms'].map {|(attrs, *)| Room.new(client, attrs)}\n    end"
        ],
        [
            "def load(options = {})\n      assert_valid_keys(options, :minimal)\n      options = {:minimal => false}.merge(options)\n\n      data = api('playlist.all', options)\n      self.attributes = data\n      super()\n    end"
        ],
        [
            "def update(attributes = {})\n      assert_valid_keys(attributes, :id)\n\n      # Update id\n      id = attributes.delete(:id)\n      update_id(id) if id\n\n      true\n    end"
        ],
        [
            "def active\n      @active = client.user.playlists.all.any? {|playlist| playlist == self && playlist.active?} if @active.nil?\n      @active\n    end"
        ],
        [
            "def add(name, options = {}, &coercer)\n      name  = name.to_sym\n      value = Attribute.new(name, options, &coercer)\n      clone_with do\n        @attributes  = attributes.merge(name => value)\n        @transformer = nil\n      end\n    end"
        ],
        [
            "def add_specimens(*args)\n      hash = args.pop\n      spcs = args\n      # validate arguments\n      unless Hash === hash then\n        raise ArgumentError.new(\"Collection parameters are missing when adding specimens to protocol #{self}\")\n      end\n      # Make the default registration, if necessary.\n      unless hash.has_key?(:registration) || hash.has_key?(:collection_protocol_registration) then\n        # the participant\n        pnt = hash.delete(:participant)\n        unless pnt then\n          raise ArgumentError.new(\"Registration or participant missing from collection parameters: #{hash.qp}\")\n        end\n        hash[:registration] = registration(pnt) || make_cpr(pnt)\n      end\n      # the new SCG\n      scg = SpecimenCollectionGroup.new(hash)\n      # set each Specimen SCG\n      spcs.each { |spc| spc.specimen_collection_group = scg }\n      scg\n    end"
        ],
        [
            "def summoner(name_or_id, optional={})\n    region = optional[:region] || @sightstone.region\n    uri = if name_or_id.is_a? Integer\n      \"https://prod.api.pvp.net/api/lol/#{region}/v1.3/summoner/#{name_or_id}\"\n    else\n      \"https://prod.api.pvp.net/api/lol/#{region}/v1.3/summoner/by-name/#{URI::encode(name_or_id)}\"\n    end\n    \n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n      s = Summoner.new(data.values[0])\n      if block_given?\n        yield s\n      else\n        return s\n      end\n    }\n  end"
        ],
        [
            "def names(ids, optional={})\n    region = optional[:region] || @sightstone.region\n    ids = ids.join(',')\n    uri = \"https://prod.api.pvp.net/api/lol/#{region}/v1.3/summoner/#{ids}/name\"\n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n\n      names_hash = Hash.new\n      data.each do |id, name|\n        names_hash[id.to_i] = name\n      end\n      if block_given?\n        yield names_hash\n      else\n        return names_hash\n      end\n    }\n  end"
        ],
        [
            "def runebook(summoner, optional={})\n    region = optional[:region] || @sightstone.region\n    id = if summoner.is_a? Summoner\n      summoner.id\n    else\n      summoner\n    end\n    uri = \"https://prod.api.pvp.net/api/lol/#{region}/v1.3/summoner/#{id}/runes\"\n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n      book = RuneBook.new(data.values[0])\n      if block_given?\n        yield book\n      else\n        return book\n      end\n    }\n  end"
        ],
        [
            "def runebooks(summoners, optional={})\n    return {} if summoners.empty?\n\n    region = optional[:region] || @sightstone.region\n    ids = summoners.collect { |summoner|\n      if summoner.is_a? Summoner\n        summoner.id\n      else\n        summoner\n      end\n    }\n    uri = \"https://prod.api.pvp.net/api/lol/#{region}/v1.3/summoner/#{ids.join(',')}/runes\"\n    response = _get_api_response(uri)\n    _parse_response(response) { |resp|\n      data = JSON.parse(resp)\n      books = {}\n      data.each do |key, raw_book|\n        books[key] = RuneBook.new(raw_book)\n      end\n      if block_given?\n        yield books\n      else\n        return books\n      end\n    }\n  end"
        ],
        [
            "def write\n            buffer = create_zip(@entries, @ignore_entries)\n\n            puts \"\\nwrite file #{@output_file}\"\n            File.open(@output_file, \"wb\") {|f| f.write buffer.string }\n        end"
        ],
        [
            "def collect(opts)\n      raise Jinx::ValidationError.new(\"#{self} is already collected\") if received?\n      specimen_event_parameters.merge!(extract_event_parameters(opts))\n    end"
        ],
        [
            "def method_missing(id, *args, &block)\n      boolean_row_regex = %r{\n        BEGIN(\\(*[nsd]\\d+[<!=~>]{1,2}\n         (?:[A-Z][A-Za-z]*\\.new\\(.*?\\)|\\d+|['\"].*?['\"])\n         (?:\\)*(?:&&|\\|\\||$)\n         \\(*[nsd]\\d+[<!=~>]{1,2}\n         (?:[A-Z][A-Za-z]*\\.new\\(.*?\\)|\\d+|['\"].*?['\"])\\)*)*)END\n      }xi\n\n      return boolean_row($1, args, block)          if id =~ boolean_row_regex\n      return equal($1, args, block)                if id =~ /^(\\d+)$/\n      return equal_type($1, $2, args, block)       if id =~ /^(s|n|d):(\\d+)$/\n      return range($1, $2, args, block)            if id =~ /^(\\d+)-(\\d+)$/\n      return range_type($1, $2, $3, args, block)   if id =~ /^(s|n|d):(\\d+)-(\\d+)$/\n      return regex($1, args, block)                if id =~ /^\\/(.*)\\/$/\n      return col_regex($1, $2, args, block)        if id =~ /^(\\d+):\\/(.*)\\/$/\n      return date($1, $2, $3, args, block)         if id =~ /^(\\d+):(<|=|>)(\\d+.\\d+.\\d+)$/\n      return date_range($1, $2, $3, args, block)   if id =~ /^(\\d+):(\\d+.\\d+.\\d+.)-(\\d+.\\d+.\\d+)$/\n      return number($1, $2, $3, args, block)       if id =~ /^(\\d+):(<|=|>)(\\d+)$/\n      return number_range($1, $2, $3, args, block) if id =~ /^(\\d):(\\d+)-(\\d+)$/\n\n      super\n    end"
        ],
        [
            "def match_boolean_filter?(values=[])\n      return false if boolean_filter.empty? or values.empty?\n      expression = boolean_filter\n      columns = expression.scan(/(([nsd])(\\d+))([<!=~>]{1,2})(.*?)(?:[\\|&]{2}|$)/)\n      columns.each do |c|\n        value = case c[1]\n        when 'n'\n          values[c[2].to_i].empty? ? '0' : values[c[2].to_i]\n        when 's'\n          \"\\\"#{values[c[2].to_i]}\\\"\"\n        when 'd'\n          begin\n            Date.strptime(values[c[2].to_i], date_format)\n          rescue Exception => e\n            case c[3]\n            when '<', '<=', '=='\n              \"#{c[4]}+1\"\n            when '>', '>='\n              '0'\n            when '!='\n              c[4]\n            end\n          else\n            \"Date.strptime('#{values[c[2].to_i]}', '#{date_format}')\"\n          end \n        end\n        expression = expression.gsub(c[0], value)\n      end\n      eval(expression)\n    end"
        ],
        [
            "def pivot_each_column(values=[])\n      pivot.each do |column, parameters|\n        value = values[parameters[:col].to_i]\n        value = value.strip.gsub(/^\"|\"$/, \"\") unless value.nil?\n        match = false\n        begin\n          match = eval(parameters[:operation].gsub('[value]', value))\n        rescue Exception => e\n\n        end\n        yield column, match\n      end\n    end"
        ],
        [
            "def create_filter(values)\n        values.scan(/(?<=,|^)(BEGIN.*?END|\\/.*?\\/|.*?)(?=,|$)/i).flatten.each do |value|\n          send(value)\n        end unless values.nil?\n      end"
        ],
        [
            "def equal(value, args, block)\n        filter << value.to_i unless filter.index(value.to_i) \n      end"
        ],
        [
            "def equal_type(type, value, args, block)\n        filter_size_before = filter.size\n        equal(value, args, block)\n        types << type if filter_size_before < filter.size\n      end"
        ],
        [
            "def range(start_value, end_value, args, block)\n        filter << (start_value.to_i..end_value.to_i).to_a\n      end"
        ],
        [
            "def range_type(type, start_value, end_value, args, block)\n        filter_size_before = filter.size\n        range(start_value, end_value, args, block)\n        (filter.size - filter_size_before).times { types << type }\n      end"
        ],
        [
            "def col_regex(col, r, args, block)\n        operation = \"'[value]' =~ Regexp.new('#{r}')\"\n        pivot[r] = { col: col, operation: operation } \n      end"
        ],
        [
            "def date(col, comparator, date, args, block)\n        comparator = '==' if comparator == '='\n        operation = \"Date.strptime(\\\"[value]\\\", \\\"#{date_format}\\\") #{comparator} \" +\n                    \"Date.strptime(\\\"#{date}\\\", \\\"#{date_format}\\\")\"\n        pivot[\"#{comparator}#{date}\"] = { col: col, operation: operation }\n      end"
        ],
        [
            "def date_range(col, start_date, end_date, args, block)\n        operation = \"   Date.strptime(\\\"#{start_date}\\\",  \\\"#{date_format}\\\") \"    +\n                    \"<= Date.strptime(\\\"[value]\\\",        \\\"#{date_format}\\\") && \" +\n                    \"   Date.strptime(\\\"[value]\\\",        \\\"#{date_format}\\\") \"    +\n                    \"<= Date.strptime(\\\"#{end_date}\\\",    \\\"#{date_format}\\\")\"\n        pivot[\"#{start_date}-#{end_date}\"] = { col: col, operation: operation }\n      end"
        ],
        [
            "def number(col, comparator, number, args, block)\n        comparator = '==' if comparator == '='\n        operation = \"[value] #{comparator} #{number}\"\n        pivot[\"#{comparator}#{number}\"] = { col: col, operation: operation }\n      end"
        ],
        [
            "def number_range(col, start_number, end_number, arg, block)\n        operation = \" #{start_number} <= [value] && [value] <= #{end_number}\"\n        pivot[\"#{start_number}-#{end_number}\"] = { col: col, operation: operation }\n      end"
        ],
        [
            "def create_annotation(hook, annotation)\n      # validate the arguments\n      if hook.nil? then raise ArgumentError.new(\"Annotated caTissue object is missing\") end\n      if annotation.nil? then raise ArgumentError.new(\"Annotation caTissue object is missing\") end\n      # the annotated object must exist in the database\n      unless hook.identifier then\n        raise AnnotationError.new(\"Annotation writer does not support annotation of a caTissue object without an identifier: #{hook}\")\n      end\n      # load the caRuby annotations if necessary\n      hook.class.ensure_annotations_loaded\n      # set the annotation hook reference\n      annotation.hook = hook\n      # create the annotation in the database\n      annotation.create\n    end"
        ],
        [
            "def join_as_series(options = {})\n      if defined?(I18n)\n        default_delimiter       = I18n.translate(:'series_joiner.default_delimiter',       :locale => options[:locale])\n        default_final_delimiter = I18n.translate(:'series_joiner.default_final_delimiter', :locale => options[:locale])\n        default_conjunction     = I18n.translate(:'series_joiner.default_conjunction',     :locale => options[:locale])\n      else\n        default_delimiter       = ', '\n        default_final_delimiter = ''\n        default_conjunction     = ' and '\n      end\n\n      delimiter = options[:delimiter] || default_delimiter\n      final_delimiter = options[:final_delimiter] || default_final_delimiter\n      conjunction = options[:conjunction] || default_conjunction\n\n      sz = self.size\n      if sz > 0\n        r = self[0]\n        if sz > 1\n          if sz > 2\n            for i in 1..(sz - 2)\n              r += delimiter + self[i]\n            end\n            r += final_delimiter\n          end\n          r += conjunction + self[sz - 1]\n        end\n      end\n      return r\n    end"
        ],
        [
            "def awesome_string(string)\n      lexers = ::Rouge::Guessers::Source.new(string).filter(R_LEXERS)\n      if !lexers.empty?\n        format_syntax_string(string, lexers.first)\n      elsif string =~ /(?:\\r?\\n)(?!\\z)/\n        format_multiline_string(string)\n      else\n        format_plain_string(string)\n      end\n    end"
        ],
        [
            "def meta=val\n      val = JSON.parse(val) if val.is_a?(String)\n      write_store_attribute(:data, :meta, val)\n    end"
        ],
        [
            "def execute\n      File.new(infile).each_with_index do |line, index|\n        row = row_filter.process(line, row: index)\n        next if row.nil? or row.chomp.empty?\n        collection.each do |category, elements|\n          values = elements[:filter].process(row) \n          values.chomp.split(';').each do |value|\n            elements[:entries] << value.chomp if elements[:entries].index(value.chomp).nil?\n          end\n        end\n      end\n\n      File.open(outfile, 'w') do |out|\n        collection.each do |category, elements|\n          out.puts \"[#{category}]\"\n          elements[:entries].sort.each { |c| out.puts c }\n        end\n      end\n    end"
        ],
        [
            "def init_collection(column_filter)\n        column_filter.split('+').each do |f|\n          category, filter = f.split(':')\n          collection[category] = { entries: [], filter: ColumnFilter.new(filter) }\n        end \n      end"
        ],
        [
            "def log\n      out.sync = true\n      @log ||= Logger.new(out)\n\n      @log.formatter = proc do |severity, datetime, progname, msg|\n        if verbose\n          string = \"#{severity} [#{datetime.strftime('%Y-%m-%d %H:%M:%S.%2N')}]: \"\n        else\n          string = \"[#{datetime.strftime('%H:%M:%S')}]: \"\n        end\n\n        string += \"#{msg}\\n\"\n\n        string\n      end\n      @log\n    end"
        ],
        [
            "def require_aether *deps\n      @mini_aether_require_spec ||= MiniAether::Spec.new\n      @mini_aether_require_resolver ||= MiniAether::Resolver.new\n\n      spec = @mini_aether_require_spec\n      resolver = @mini_aether_require_resolver\n\n      if deps.last.kind_of?(Hash)\n        hash = deps.pop\n        [hash[:source], hash[:sources]].flatten.compact.each do |source|\n          spec.source(source)\n        end\n      end\n\n      deps.each {|coords| spec.jar(coords) }\n      resolver.require(spec.dependencies, spec.sources)\n      nil\n    end"
        ],
        [
            "def create_lookup_table\n        File.open(source).each_with_index do |line|\n          next if line.chomp.empty?\n\n          values = unstring(line).chomp.split(';')\n\n          next if values.empty?\n\n          @joiners.each do |joiner|\n            key = values[joiner.join[0]]\n            joiner.lookup[:rows][key] = []\n\n            joiner.cols.each do |i|\n              joiner.lookup[:rows][key] << values[i]\n            end\n          end\n\n        end\n      end"
        ],
        [
            "def col_positions(pos, cols)\n        if pos.nil? || pos.empty?\n          pos = []\n          cols.each { |c| pos << Array.new(c.size) { |c| c } }\n          pos\n        else\n          pos.split(';').collect { |p| p.split(',').collect { |p| p.to_i } }\n        end\n      end"
        ],
        [
            "def create_joiners(j, c, p)\n        js = j.split(';').collect { |j| j.split('=').collect { |j| j.to_i } }\n        cs = c.split(';').collect { |c| c.split(',').collect { |c| c.to_i } }\n        ps = col_positions(p, cs)\n\n        @joiners = []\n        (0...js.size).each do |i| \n          @joiners << Joiner.new(js[i], ps[i], cs[i], { rows: { } }) \n        end \n\n        ps.flatten\n      end"
        ],
        [
            "def add_defaults_local\n      super\n      self.title ||= short_title\n      self.short_title ||= title\n      self.start_date ||= Java::JavaUtil::Date.new\n    end"
        ],
        [
            "def [](*range)\n      r, c = range\n      r ||= 0..(nrows-1)\n      c ||= 0..(ncols-1)\n \n      row_selection = rows.values_at(*r)\n      col_selection = []\n\n      if rows_are_arrays?(row_selection)\n        row_selection.each do |row|\n          values = row.values_at(*c)\n          col_selection << (values.respond_to?(:to_ary) ? values : [values])\n        end \n      else\n        col_selection << row_selection[*c]\n      end\n\n      SpreadSheet.new(*col_selection, \n                      row_labels: row_labels.values_at(*r),\n                      col_labels: col_labels.values_at(*c))\n    end"
        ],
        [
            "def column_collect(&block)\n      result = []\n      0.upto(ncols-1) { |i| result << block.call(self[nil,i]) }\n      result\n    end"
        ],
        [
            "def rename(opts = {})\n      if opts[:rows]\n        opts[:rows] = opts[:rows][0,nrows]\n        opts[:rows] += row_labels[opts[:rows].size, nrows]\n      end\n\n      if opts[:cols]\n        opts[:cols] = opts[:cols][0,ncols]\n        opts[:cols] += col_labels[opts[:cols].size, ncols]\n      end\n\n      @row_labels = opts[:rows] if opts[:rows]\n      @col_labels = opts[:cols] if opts[:cols]\n    end"
        ],
        [
            "def to_s\n      col_label_sizes = col_labels.collect { |c| c.to_s.size + 2 }\n      row_label_size = row_labels.collect { |r| r.to_s.size + 2 }.max\n\n      row_col_sizes = rows.transpose.collect { |r| r.collect { |c| c.to_s.size } } \n\n      i = -1\n      col_sizes = col_label_sizes.collect do |s| \n        i += 1\n        [row_col_sizes[i],s].flatten.max + 1\n      end\n\n      s = (sprintf(\"%#{row_label_size}s\", \" \"))\n      col_labels.each_with_index { |l,i| s << (sprintf(\"%#{col_sizes[i]}s\", \n                                                       \"[#{l}]\"))           } \n      s << \"\\n\"\n\n      rows.each_with_index do |row, i|\n        s << (sprintf(\"%#{row_label_size}s\", \"[#{row_labels[i]}]\"))\n        row.each_with_index { |c,j| s << (sprintf(\"%#{col_sizes[j]}s\", c)) }\n        s << \"\\n\"\n      end\n\n      s\n    end"
        ],
        [
            "def rows_from_params(opts)\n        col_count = opts[:cols] \n        row_count = opts[:rows]\n        \n        size = row_count * col_count if row_count && col_count\n\n        rows = []\n\n        if values = opts[:values] \n          if size\n            values += [NotAvailable] * (size - values.size)\n          elsif col_count\n            values += [NotAvailable] * ((col_count - values.size) % col_count)\n          elsif row_count\n            values += [NotAvailable] * ((row_count - values.size) % row_count)\n            col_count = values.size / row_count\n          else\n            col_count = Math.sqrt(values.size).ceil\n            values += [NotAvailable] * ((col_count - values.size) % col_count)\n          end\n          values.each_slice(col_count) { |row| rows << row }\n        elsif opts[:file]\n          File.foreach(opts[:file]) do |line| \n            next if line.chomp.empty?\n            values = line.split(SEMICOLON) rescue str2utf8(line).split(SEMICOLON)\n            rows << values.collect { |v| \n              v.strip.empty? ? NotAvailable : str2num(v.chomp, opts[:ds])\n            }\n          end\n        end\n\n        rows\n      end"
        ],
        [
            "def equalize_rows(rows)\n        column_sizes = rows.collect { |r| r.size }\n\n        return rows if column_sizes.uniq.size == 1\n\n        max_size = column_sizes.max\n        small_rows = []\n        column_sizes.each_with_index { |c,i| small_rows << i if c < max_size }\n\n        small_rows.each do |i| \n          rows[i] += [NotAvailable] * (max_size - rows[i].size)\n        end\n\n        rows\n      end"
        ],
        [
            "def same_column_size?(rows)\n        offset = opts[:c] ? 1 : 0\n        return true if rows.size == 1 + offset\n        (0 + offset).upto(rows.size - 2) do |i| \n          return false unless rows[i].size == rows[i+1].size\n        end\n        true\n      end"
        ],
        [
            "def coerce(value)\n        return SpreadSheet.new([value]) if value.is_a?(Numeric)\n        return SpreadSheet.new(value)   if value.is_a?(Array)\n      end"
        ],
        [
            "def process(operator, s)\n        s = coerce(s) || s\n        raise \"operand needs to be a SpreadSheet, \"+\n              \"Numeric or Array\" unless s.is_a?(SpreadSheet)\n        result = []\n        rlabel = []\n        clabel = []\n        s1_row_count, s1_col_count = dim\n        s2_row_count, s2_col_count = s.dim\n        row_count = [s1_row_count, s2_row_count].max\n        col_count = [s1_col_count, s2_col_count].max\n        0.upto(row_count - 1) do |r|\n          r1 = r % s1_row_count\n          r2 = r % s2_row_count\n          rlabel << \"#{row_labels[r1]}#{operator}#{s.row_labels[r2]}\"\n          element = []\n          0.upto(col_count - 1) do |c|\n            c1 = c % s1_col_count\n            c2 = c % s2_col_count\n            clabel << \"#{col_labels[c1]}#{operator}#{s.col_labels[c2]}\"\n            element << rows[r1][c1].send(operator, s.rows[r2][c2])\n          end\n          result << element\n        end\n        SpreadSheet.new(*result, row_labels: rlabel, col_labels: clabel)\n      end"
        ],
        [
            "def process_count\n      File.new(infile).each_with_index do |line, index|\n        result = col_filter.process(row_filter.process(line.chomp, row: index))\n        unless result.nil? or result.empty?\n          key = unstring(line).split(';').values_at(*key_columns)\n          key_value = key_values[key] || key_values[key] = { name: key, \n                                                             elements: Hash.new(0), \n                                                             sum: 0 }\n          result.chomp.split(';').each do |column|\n            heading << column if heading.index(column).nil?\n            key_value[:elements][column] += 1\n            key_value[:sum] += 1\n            sums[column] += 1\n          end\n        end\n      end\n    end"
        ],
        [
            "def write_result\n      sum_line = [sum_row_title] + [''] * (key_titles.size - 1)\n      headline = heading_sort ? heading.sort : original_pivot_sequence_heading\n      headline << add_sum_col unless sum_col_title.nil?\n      headline.each do |h|\n        sum_line << sums[h]\n      end\n      row = 0;\n      File.open(outfile, 'w') do |out|\n        out.puts sum_line.join(';') if row == sum_row ; row += 1\n        out.puts (key_titles + headline).join(';')\n        key_values.each do |k,v|\n          out.puts sum_line.join(';') if row == sum_row ; row += 1\n          line = [k]\n          headline.each do |h|\n            line << v[:elements][h] unless h == sum_col_title\n          end\n          line << v[:sum] unless sum_col_title.nil?\n          out.puts line.join(';')\n        end\n      end\n    end"
        ],
        [
            "def init_sum_scheme(sum_scheme)\n\n        return if sum_scheme.nil?\n\n        re = /(\\w+):(\\d+)|(\\w+)/\n\n        sum_scheme.scan(re).each do |part|\n          if part.compact.size == 2\n            @sum_row_title = part[0]\n            @sum_row       = part[1].to_i\n          else\n            @sum_col_title = part[2]\n          end\n        end\n\n      end"
        ],
        [
            "def init_key_columns(key_scheme)\n\n        @key_titles  = []\n        @key_columns = []\n\n        keys = key_scheme.scan(/(\\d+):(\\w+)/)\n\n        keys.each do |key|\n          @key_titles  << key[1]\n          @key_columns << key[0].to_i\n        end\n\n      end"
        ],
        [
            "def original_pivot_sequence_heading\n        (heading.sort - col_filter.pivot.keys << col_filter.pivot.keys).flatten\n      end"
        ],
        [
            "def process(object, options={})\n      object = unstring(object)\n      return object unless has_filter?\n      filtered = !filter.flatten.uniq.index(options[:row]).nil?\n      pattern.each do |p|\n        filtered = (filtered or !(object =~ Regexp.new(p)).nil?)\n      end\n      filtered = (filtered or match_boolean_filter?(object.split(';')))\n      filtered ? object : nil\n    end"
        ],
        [
            "def messages\n      data = api('pm.history', :receiverid => id)\n      data['history'].map {|attrs| Message.new(client, attrs)}\n    end"
        ],
        [
            "def stalk\n      become_fan unless client.user.fan_of.include?(self)\n      client.rooms.with_friends.detect do |room|\n        room.listener(id)\n      end\n    end"
        ],
        [
            "def boot(reason = '')\n      api('room.boot_user', :roomid => room.id, :section => room.section, :target_userid => id, :reason => reason)\n      true\n    end"
        ],
        [
            "def report(reason = '')\n      api('room.report_user', :roomid => room.id, :section => room.section, :reported => id, :reason => reason)\n      true\n    end"
        ],
        [
            "def default_derived_characteristics\n      chrs = specimen_characteristics || return\n      pas = chrs.class.nondomain_attributes.reject { |pa| pa == :identifier }\n      chrs.copy(pas)\n    end"
        ],
        [
            "def region=(args)\n      case args\n        when Hash\n          self.setRegion(CoordinateRegion.new(args[:region]).api, animated: args[:animated])\n        else\n          self.setRegion(CoordinateRegion.new(args).api, animated: false)\n      end\n    end"
        ],
        [
            "def collection_site\n      return unless medical_identifiers.size == 1\n      site = medical_identifiers.first.site\n      return if site.nil?\n      site.site_type == Site::SiteType::COLLECTION ? site : nil\n    end"
        ],
        [
            "def match_characteristics(other)\n      chr = characteristics\n      ochr = other.characteristics\n      chr and ochr and chr.tissue_side == ochr.tissue_side and chr.tissue_site == ochr.tissue_site\n    end"
        ],
        [
            "def default_user\n      scg = specimen_collection_group || (specimen.specimen_collection_group if specimen) || return\n      cp = scg.collection_protocol || return\n      cp.coordinators.first || (cp.sites.first.coordinator if cp.sites.size === 1)\n    end"
        ],
        [
            "def export!\n      puts \"Exporting translations:\\n\"\n      if config[:split]\n        translations.keys.each do |locale|\n          if translations[:en].nil?\n            puts 'Missing english translation'\n            exit\n          end\n          puts \"\\nLocale: #{locale}\"\n          fallback_english_hash = flat_hash(translations[:en])\n          translations_hash = flat_hash(translations[locale])\n          if locale != :en\n            translations_hash.each do |key, value|\n              english_fallback = fallback_english_hash[key]\n              if value == nil || value == \"\"\n                puts \"  #{key} missing!\"\n                puts \"     taking english default: '#{english_fallback}'\"\n                translations_hash[key] = english_fallback\n              end\n            end\n          end\n          save(translations_hash, File.join(export_dir, \"translations_#{locale}.js\"))\n        end\n      else\n        save(flat_hash(translations), File.join(export_dir, 'translations.js'))\n      end\n    end"
        ],
        [
            "def save(translations, file)\n      file = ::Rails.root.join(file)\n      FileUtils.mkdir_p File.dirname(file)\n\n      variable_to_assign = config.fetch(:variable, 'Ember.I18n.translations')\n\n      File.open(file, 'w+') do |f|\n        f << variable_to_assign\n        f << ' = '\n        f << JSON.pretty_generate(translations).html_safe\n        f << ';'\n      end\n    end"
        ],
        [
            "def translations\n      ::I18n.load_path = default_locales_path\n      ::I18n.backend.instance_eval do\n        init_translations unless initialized?\n        translations\n      end\n    end"
        ],
        [
            "def load_properties\n      # the properties file\n      file = default_properties_file\n      # the access properties\n      props = file && File.exists?(file) ? load_properties_file(file) : {}\n      # Load the Java application jar path.\n      path = props[:classpath] || props[:path] || infer_classpath\n      Java.expand_to_class_path(path) if path\n      # Get the application login properties from the remoteService.xml, if necessary.\n      unless props.has_key?(:host) or props.has_key?(:port) then\n        url = remote_service_url\n        if url then\n          host, port = url.split(':')\n          props[:host] = host\n          props[:port] = port\n        end\n      end\n      unless props.has_key?(:database) then\n        props.merge(infer_database_properties)\n      end\n      props\n    end"
        ],
        [
            "def parse\n      download_files\n\n      parsing_clients = false\n      parsing_prefile = false\n      parsing_general = false\n      parsing_servers = false\n      parsing_voice_servers = false\n\n      File.open(DATA_FILE_PATH, 'r:ascii-8bit').each { |line|\n\n        if line.start_with? \";\"\n          parsing_clients = false\n          parsing_prefile = false\n          parsing_general = false\n          parsing_servers = false\n          parsing_voice_servers = false\n        elsif parsing_clients\n          clienttype = line.split(\":\")[3]\n          if clienttype.eql? \"PILOT\"\n            @pilots << Pilot.new(line)\n          elsif clienttype.eql? \"ATC\"\n            @atc << ATC.new(line)\n          end\n        elsif parsing_prefile\n          @prefiles << Prefile.new(line)\n        elsif parsing_general\n          line_split = line.split(\"=\")\n          @general[line_split[0].strip.downcase.gsub(\" \", \"_\")] = line_split[1].strip\n        elsif parsing_servers\n          @servers << Server.new(line)\n        elsif parsing_voice_servers\n          @voice_servers << VoiceServer.new(line) if line.length > 2 # ignore last, empty line for voice server that contains 2 characters\n        end\n\n        parsing_clients = true if line.start_with? \"!CLIENTS:\"\n        parsing_prefile = true if line.start_with? \"!PREFILE:\"\n        parsing_general = true if line.start_with? \"!GENERAL:\"\n        parsing_servers = true if line.start_with? \"!SERVERS:\"\n        parsing_voice_servers = true if line.start_with? \"!VOICE SERVERS:\"\n      }\n    end"
        ],
        [
            "def download_files\n      if !File.exists?(STATUS_FILE_PATH) or File.mtime(STATUS_FILE_PATH) < Time.now - STATUS_DOWNLOAD_INTERVAL\n       download_to_file STATUS_URL, STATUS_FILE_PATH\n      end\n\n      if !File.exists?(DATA_FILE_PATH) or File.mtime(DATA_FILE_PATH) < Time.now - DATA_DOWNLOAD_INTERVAL\n        download_to_file random_data_url, DATA_FILE_PATH\n      end\n    end"
        ],
        [
            "def download_to_file url, file\n      url = URI.parse(URI.encode(url.strip))\n\n      File.new(file, File::CREAT)\n\n      Net::HTTP.start(url.host) { |http|\n        resp = http.get(url.path)\n        open(file, \"wb\") { |file|\n          file.write(resp.body)\n        }\n      }\n    end"
        ],
        [
            "def random_data_url\n      url0s = Array.new\n      file = File.open(STATUS_FILE_PATH)\n      file.each {|line|\n        if line.start_with? \"url0\"\n          url0s << line.split(\"=\").last\n        end\n      }\n      return url0s[rand(url0s.length)]\n     end"
        ],
        [
            "def cachier!(var = nil)\n      if var && instance_variable_get(\"@#{var}\")\n        # => Clear the Single Variable\n        remove_instance_variable(\"@#{var}\")\n      else\n        # => Clear the Whole Damned Cache\n        instance_variables.each { |x| remove_instance_variable(x) }\n      end\n    end"
        ],
        [
            "def write_json(file, object)\n      return unless file && object\n      begin\n        File.open(file, 'w') { |f| f.write(JSON.pretty_generate(object)) }\n      end\n    end"
        ],
        [
            "def filestring(file, size = 8192)\n      return unless file\n      return file unless file.is_a?(String) && File.file?(file) && File.size(file) <= size\n      File.read(file)\n    end"
        ],
        [
            "def common_array(ary) # rubocop: disable AbcSize\n      return ary unless ary.is_a? Array\n      count = ary.count\n      return ary if count.zero?\n      return ary.flatten.uniq if count == 1\n      common = ary[0] & ary[1]\n      return common if count == 2\n      (count - 2).times { |x| common &= ary[x + 2] } if count > 2\n      common\n    end"
        ],
        [
            "def run\n      bind_queues and return if test_env?\n      start_shutdown_thread\n      start_error_counter_thread\n      client.on_exception do |e|\n        count_error(e)\n      end\n      client.connect\n      start_event_thread\n\n      puts 'EventListener started. Hit Ctrl-C to exit'\n      Thread.stop\n      puts 'Main thread wakeup - exiting.'\n      client.close\n    end"
        ],
        [
            "def register_observer_class(observer_class)\n      @observer_mutex.synchronize do\n        return if @observed_models.include?(observer_class)\n        @observed_models << observer_class\n        log \"EventListener: registering observer class #{observer_class}\"\n        observer_queue.bind(models_exchange, routing_key: \"#{Isimud.model_watcher_schema}.#{observer_class.base_class.name}.*\")\n      end\n    end"
        ],
        [
            "def register_observer(observer)\n      @observer_mutex.synchronize do\n        log \"EventListener: registering observer #{observer.class} #{observer.id}\"\n        @observers[observer_key_for(observer.class, observer.id)] = observer.observe_events(client)\n      end\n    end"
        ],
        [
            "def unregister_observer(observer_class, observer_id)\n      @observer_mutex.synchronize do\n        log \"EventListener: un-registering observer #{observer_class} #{observer_id}\"\n        if (consumer = @observers.delete(observer_key_for(observer_class, observer_id)))\n          consumer.cancel\n        end\n      end\n    end"
        ],
        [
            "def observer_queue\n      @observer_queue ||= client.create_queue([name, 'listener', Socket.gethostname, Process.pid].join('.'),\n                                              models_exchange,\n                                              queue_options:     {exclusive: true},\n                                              subscribe_options: {manual_ack: true})\n    end"
        ],
        [
            "def as_json(options = {})\n      session_id = parameters.delete(:session_id) || Thread.current[:keas_session_id]\n\n      data = {type:          type,\n              action:        action,\n              user_id:       user_id,\n              occurred_at:   occurred_at,\n              eventful_type: eventful_type,\n              eventful_id:   eventful_id,\n              session_id:    session_id}\n      unless options[:omit_parameters]\n        data[:parameters] = parameters\n        data[:attributes] = attributes\n      end\n      data\n    end"
        ],
        [
            "def do_create(action)\n      options = do_creation_options\n      options.title ||= @params.first\n\n      @helper.send(\"#{action}_usage\") unless options.title\n      fn = @commands.send(action, options)\n      puts \"#{@src_dir}/#{fn}\"\n    end"
        ],
        [
            "def do_move(action)\n      options = do_move_options(action)\n      path = @params.first\n\n      @helper.send(\"#{action}_usage\") unless path\n      fn = @commands.send(action, path, options)\n      puts \"#{@src_dir}/#{fn}\"\n    end"
        ],
        [
            "def do_move_options(type)\n      options = OpenStruct.new\n      opt_parser = OptionParser.new do |opts|\n        if type == 'publish'\n          opts.on('-d', '--keep-draft', \"Keep draft post\") do |d|\n            options.keep_draft = d\n          end\n        else\n          opts.on('-p', '--keep-post', \"Do not delete post\") do |p|\n            options.keep_post = p\n          end\n        end\n\n        opts.on('-t', '--keep-timestamp', \"Keep existing timestamp\") do |t|\n          options.keep_timestamp = t\n        end\n      end\n\n      opt_parser.parse! @params\n      options\n    end"
        ],
        [
            "def resolve_links(text)\n      html = Nokogiri::HTML.fragment(text)\n      html.css(\"a[href]\").each do |link|\n        href = URI(link[\"href\"])\n        next unless href.relative? && markup_for_file(nil, href.path) == :markdown\n        link.replace \"{file:#{href} #{link.inner_html}}\"\n      end\n      super(html.to_s)\n    end"
        ],
        [
            "def nr_api\n      # => Build the Faraday Connection\n      @conn ||= Faraday::Connection.new('https://api.newrelic.com', conn_opts) do |client|\n        client.use Faraday::Response::RaiseError\n        client.use FaradayMiddleware::EncodeJson\n        client.use FaradayMiddleware::ParseJson, content_type: /\\bjson$/\n        client.response :logger if Config.environment.to_s.casecmp('development').zero? # => Log Requests to STDOUT\n        client.adapter Faraday.default_adapter #:net_http_persistent\n      end\n    end"
        ],
        [
            "def alert_add_entity(entity_id, condition_id, entity_type = 'Server')\n      nr_api.put do |req|\n        req.url url('alerts_entity_conditions', entity_id)\n        req.params['entity_type'] = entity_type\n        req.params['condition_id'] = condition_id\n      end\n    end"
        ],
        [
            "def alert_delete_entity(entity_id, condition_id, entity_type = 'Server')\n      nr_api.delete do |req|\n        req.url url('alerts_entity_conditions', entity_id)\n        req.params['entity_type'] = entity_type\n        req.params['condition_id'] = condition_id\n      end\n    end"
        ],
        [
            "def get_server_id(server_id)\n      return nil unless server_id =~ /^[0-9]+$/\n      ret = nr_api.get(url('servers', server_id)).body\n      ret['server']\n    rescue Faraday::ResourceNotFound, NoMethodError\n      nil\n    end"
        ],
        [
            "def get_server_name(server, exact = true)\n      ret = nr_api.get(url('servers'), 'filter[name]' => server).body\n      return ret['servers'] unless exact\n      ret['servers'].find { |x| x['name'].casecmp(server).zero? }\n    rescue NoMethodError\n      nil\n    end"
        ],
        [
            "def get_servers_labeled(labels)\n      label_query = Array(labels).reject { |x| !x.include?(':') }.join(';')\n      return [] unless label_query\n      nr_api.get(url('servers'), 'filter[labels]' => label_query).body\n    end"
        ],
        [
            "def observe_events(client)\n      return unless enable_listener?\n      queue = create_queue(client)\n      client.subscribe(queue) do |message|\n        event = Event.parse(message)\n        handle_event(event)\n      end\n    end"
        ],
        [
            "def bind(queue_name, exchange_name, *routing_keys, &block)\n      queue = create_queue(queue_name, exchange_name,\n                           queue_options: {durable: true},\n                           routing_keys:  routing_keys)\n      subscribe(queue, &block) if block_given?\n    end"
        ],
        [
            "def create_queue(queue_name, exchange_name, options = {})\n      queue_options = options[:queue_options] || {durable: true}\n      routing_keys  = options[:routing_keys] || []\n      log \"Isimud::BunnyClient: create_queue #{queue_name}: queue_options=#{queue_options.inspect}\"\n      queue = find_queue(queue_name, queue_options)\n      bind_routing_keys(queue, exchange_name, routing_keys) if routing_keys.any?\n      queue\n    end"
        ],
        [
            "def subscribe(queue, options = {}, &block)\n      queue.subscribe(options.merge(manual_ack: true)) do |delivery_info, properties, payload|\n        current_channel = delivery_info.channel\n        begin\n          log \"Isimud: queue #{queue.name} received #{properties[:message_id]} routing_key: #{delivery_info.routing_key}\", :debug\n          Thread.current['isimud_queue_name']    = queue.name\n          Thread.current['isimud_delivery_info'] = delivery_info\n          Thread.current['isimud_properties']    = properties\n          block.call(payload)\n          if current_channel.open?\n            log \"Isimud: queue #{queue.name} finished with #{properties[:message_id]}, acknowledging\", :debug\n            current_channel.ack(delivery_info.delivery_tag)\n          else\n            log \"Isimud: queue #{queue.name} unable to acknowledge #{properties[:message_id]}\", :warn\n          end\n        rescue => e\n          log(\"Isimud: queue #{queue.name} error processing #{properties[:message_id]} payload #{payload.inspect}: #{e.class.name} #{e.message}\\n  #{e.backtrace.join(\"\\n  \")}\", :warn)\n          retry_status = run_exception_handlers(e)\n          log \"Isimud: rejecting #{properties[:message_id]} requeue=#{retry_status}\", :warn\n          current_channel.open? && current_channel.reject(delivery_info.delivery_tag, retry_status)\n        end\n      end\n    end"
        ],
        [
            "def channel\n      if (channel = Thread.current[CHANNEL_KEY]).try(:open?)\n        channel\n      else\n        new_channel = connection.channel\n        new_channel.confirm_select\n        new_channel.prefetch(Isimud.prefetch_count) if Isimud.prefetch_count\n        Thread.current[CHANNEL_KEY] = new_channel\n      end\n    end"
        ],
        [
            "def publish(exchange, routing_key, payload, options = {})\n      log \"Isimud::BunnyClient#publish: exchange=#{exchange} routing_key=#{routing_key}\", :debug\n      channel.topic(exchange, durable: true).publish(payload, options.merge(routing_key: routing_key, persistent: true))\n    end"
        ],
        [
            "def post(opts)\n      opts = @helper.ensure_open_struct(opts)\n      date = @helper.get_date_stamp\n\n      # still want to escape any garbage in the slug\n      slug = if opts.slug.nil? || opts.slug.empty?\n               opts.title\n             else\n               opts.slug\n             end\n      slug = @helper.get_slug_for(slug)\n\n      # put the metadata into the layout header\n      head, ext = @helper.get_layout(opts.layout)\n      head.sub!(/^title:\\s*$/, \"title: #{opts.title}\")\n      head.sub!(/^date:\\s*$/, \"date: #{date}\")\n      ext ||= @ext\n\n      path = File.join(POSTS_FOLDER, \"#{date}-#{slug}.#{ext}\")\n      f = File.open(path, \"w\")\n      f.write(head)\n      f.close\n      @helper.open_in_editor(path) # open file if config key set\n      path    # return the path, in case we want to do anything useful\n    end"
        ],
        [
            "def draft(opts)\n      opts = @helper.ensure_open_struct(opts)\n\n      # the drafts folder might not exist yet...create it just in case\n      FileUtils.mkdir_p(DRAFTS_FOLDER)\n\n      slug = if opts.slug.nil? || opts.slug.empty?\n               opts.title\n             else\n               opts.slug\n             end\n      slug = @helper.get_slug_for(slug)\n\n      # put the metadata into the layout header\n      head, ext = @helper.get_layout(opts.layout)\n      head.sub!(/^title:\\s*$/, \"title: #{opts.title}\")\n      head.sub!(/^date:\\s*$/, \"date: #{@helper.get_date_stamp}\")\n      ext ||= @ext\n\n      path = File.join(DRAFTS_FOLDER, \"#{slug}.#{ext}\")\n      f = File.open(path, \"w\")\n      f.write(head)\n      f.close\n      @helper.open_in_editor(path) # open file if config key set\n      path    # return the path, in case we want to do anything useful\n    end"
        ],
        [
            "def publish(draftpath, opts={})\n      opts = @helper.ensure_open_struct(opts)\n      tail = File.basename(draftpath)\n\n      begin\n        infile = File.open(draftpath, \"r\")\n      rescue Errno::ENOENT\n        @helper.bad_path(draftpath)\n      end\n\n      date = @helper.get_date_stamp\n      time = @helper.get_time_stamp\n\n      outpath = File.join(POSTS_FOLDER, \"#{date}-#{tail}\")\n      outfile = File.open(outpath, \"w\")\n\n      infile.each_line do |line|\n        line.sub!(/^date:.*$/, \"date: #{date} #{time}\\n\") unless opts.keep_timestamp\n        outfile.write(line)\n      end\n\n      infile.close\n      outfile.close\n      FileUtils.rm(draftpath) unless opts.keep_draft\n\n      outpath\n    end"
        ],
        [
            "def terminal_size\n    rows, cols = 25, 80\n    buf = [0, 0, 0, 0].pack(\"SSSS\")\n    if $stdout.ioctl(TIOCGWINSZ, buf) >= 0 then\n      rows, cols, row_pixels, col_pixels = buf.unpack(\"SSSS\")\n    end\n    return [rows, cols]\n  end"
        ],
        [
            "def prepare_modes\n    buf = [0, 0, 0, 0, 0, 0, ''].pack(\"IIIICCA*\")\n    $stdout.ioctl(TCGETS, buf)\n    @old_modes = buf.unpack(\"IIIICCA*\")\n    new_modes = @old_modes.clone\n    new_modes[3] &= ~ECHO # echo off\n    new_modes[3] &= ~ICANON # one char @ a time\n    $stdout.ioctl(TCSETS, new_modes.pack(\"IIIICCA*\"))\n    print \"\\e[2J\" # clear screen\n    print \"\\e[H\" # go home\n    print \"\\e[?47h\" # kick xterm into the alt screen\n    print \"\\e[?1000h\" # kindly ask for mouse positions to make up for it\n    self.cursor = false\n    flush\n  end"
        ],
        [
            "def extract_subjects(subject)\n      return extract_subjects(subject.to_permission_instance) if subject.respond_to? :to_permission_instance\n\n      return subject[:any] if subject.is_a? Hash and subject.key? :any\n\n      [subject]\n    end"
        ],
        [
            "def daemon # rubocop: disable AbcSize, MethodLength\n      # => Windows Workaround (https://github.com/bdwyertech/newrelic-management/issues/1)\n      ENV['TZ'] = 'UTC' if OS.windows? && !ENV['TZ']\n\n      scheduler = Rufus::Scheduler.new\n      Notifier.msg('Daemonizing Process')\n\n      # => Alerts Management\n      alerts_interval = Config.alert_management_interval\n      scheduler.every alerts_interval, overlap: false do\n        Manager.manage_alerts\n      end\n\n      # => Cleanup Stale Servers\n      if Config.cleanup\n        cleanup_interval = Config.cleanup_interval\n        cleanup_age = Config.cleanup_age\n\n        scheduler.every cleanup_interval, overlap: false do\n          Manager.remove_nonreporting_servers(cleanup_age)\n        end\n      end\n\n      # => Join the Current Thread to the Scheduler Thread\n      scheduler.join\n    end"
        ],
        [
            "def run\n      daemon if Config.daemonize\n\n      # => Manage Alerts\n      Manager.manage_alerts\n\n      # => Manage\n      Manager.remove_nonreporting_servers(Config.cleanup_age) if Config.cleanup\n    end"
        ],
        [
            "def ensure_jekyll_dir\n      @orig_dir = Dir.pwd\n      start_path = Pathname.new(@orig_dir)\n\n      ok = File.exists?('./_posts')\n      new_path = nil\n\n      # if it doesn't exist, check for a custom source dir in _config.yml\n      if !ok\n        check_custom_src_dir!\n        ok = File.exists?('./_posts')\n        new_path = Pathname.new(Dir.pwd)\n      end\n\n      if ok\n        return (new_path ? new_path.relative_path_from(start_path) : '.')\n      else\n        puts 'ERROR: Cannot locate _posts directory. Double check to make sure'\n        puts '       that you are in a jekyll directory.'\n        exit\n      end\n    end"
        ],
        [
            "def get_layout(layout_path)\n\n      if layout_path.nil?\n        contents  = \"---\\n\"\n        contents << \"title:\\n\"\n        contents << \"layout: post\\n\"\n        contents << \"date:\\n\"\n        contents << \"---\\n\"\n        ext = nil\n      else\n        begin\n          contents = File.open(layout_path, \"r\").read()\n          ext = layout_path.match(/\\.(.*?)$/)[1]\n        rescue Errno::ENOENT\n          bad_path(layout_path)\n        end\n      end\n\n      return contents, ext\n    end"
        ],
        [
            "def gen_usage\n      puts 'Usage:'\n      puts '  poole [ACTION] [ARG]'\n      puts ''\n      puts 'Actions:'\n      puts '  draft      Create a new draft in _drafts with title SLUG'\n      puts '  post       Create a new timestamped post in _posts with title SLUG'\n      puts '  publish    Publish the draft with SLUG, timestamping appropriately'\n      puts '  unpublish  Move a post to _drafts, untimestamping appropriately'\n      exit\n    end"
        ],
        [
            "def msg(message, subtitle = message, title = 'NewRelic Management')\n      # => Stdout Messages\n      terminal_notification(message, subtitle)\n\n      return if Config.silent\n\n      # => Pretty GUI Messages\n      osx_notification(message, subtitle, title) if OS.x?\n    end"
        ],
        [
            "def osx_notification(message, subtitle, title)\n      TerminalNotifier.notify(message, title: title, subtitle: subtitle)\n    end"
        ],
        [
            "def analyze(string, options = {})\n      x = []\n      @fst._analyze(string) do |a| \n        if options[:symbol_sequence]\n          x << a.map { |s| s.match(/^<(.*)>$/) ? $1.to_sym : s }\n        else\n          x << a.join\n        end\n      end\n      x\n    end"
        ],
        [
            "def generate(string)\n      x = []\n      @fst._generate(string) { |a| x << a.join }\n      x\n    end"
        ],
        [
            "def configure(argv = ARGV)\n      # => Parse CLI Configuration\n      cli = Options.new\n      cli.parse_options(argv)\n\n      # => Parse JSON Config File (If Specified and Exists)\n      json_config = Util.parse_json(cli.config[:config_file] || Config.config_file)\n\n      # => Merge Configuration (CLI Wins)\n      config = [json_config, cli.config].compact.reduce(:merge)\n\n      # => Apply Configuration\n      config.each { |k, v| Config.send(\"#{k}=\", v) }\n    end"
        ],
        [
            "def missing_specs_from_file(path)\n      Spectro::Spec::Parser.parse(path).select do |spec|\n        index_spec = Spectro::Database.index[path] && Spectro::Database.index[path][spec.signature.name]\n        index_spec.nil? || index_spec['spec_md5'] != spec.md5\n      end\n    end"
        ],
        [
            "def remove_nonreporting_servers(keeptime = nil)\n      list_nonreporting_servers.each do |server|\n        next if keeptime && Time.parse(server[:last_reported_at]) >= Time.now - ChronicDuration.parse(keeptime)\n        Notifier.msg(server[:name], 'Removing Stale, Non-Reporting Server')\n        Client.delete_server(server[:id])\n      end\n    end"
        ],
        [
            "def find_excluded(excluded)\n      result = []\n      Array(excluded).each do |exclude|\n        if exclude.include?(':')\n          find_labeled(exclude).each { |x| result << x }\n          next\n        end\n        res = Client.get_server(exclude)\n        result << res['id'] if res\n      end\n      result\n    end"
        ],
        [
            "def send_sms_confirmation!\n      return false if _TC_sms_blocked\n      return true  if sms_confirmed?\n      return false if _TC_phone_number.blank?\n\n      format_phone_number\n      confirmation_code = TwilioContactable.confirmation_code(self, :sms)\n\n      # Use this class' confirmation_message method if it\n      # exists, otherwise use the generic message\n      message = (self.class.respond_to?(:confirmation_message) ?\n                   self.class :\n                   TwilioContactable).confirmation_message(confirmation_code)\n\n      if message.to_s.size > 160\n        raise ArgumentError, \"SMS Confirmation Message is too long. Limit it to 160 characters of unescaped text.\"\n      end\n\n      response = TwilioContactable::Gateway.deliver_sms(message, _TC_formatted_phone_number)\n\n      if response.success?\n        update_twilio_contactable_sms_confirmation confirmation_code\n      end\n\n      response\n    end"
        ],
        [
            "def send_voice_confirmation!\n      return false if _TC_voice_blocked\n      return true  if voice_confirmed?\n      return false if _TC_phone_number.blank?\n\n      format_phone_number\n      confirmation_code = TwilioContactable.confirmation_code(self, :voice)\n\n      response = TwilioContactable::Gateway.initiate_voice_call(self, _TC_formatted_phone_number)\n\n      if response.success?\n        update_twilio_contactable_voice_confirmation confirmation_code\n      end\n\n      response\n    end"
        ],
        [
            "def validate(value, format, raise_error=false)\n      unless FORMATS.key?(format)\n        raise FormatError, \"Invalid data format: #{format}\"\n      end\n      result = value =~ FORMATS[format] ? true : false\n      if raise_error && !result\n        raise ValidationError, \"Invalid value \\\"#{value}\\\" for #{format}\"\n      end\n      result\n    end"
        ],
        [
            "def call(url, settings, &block)\n      uri = URI.parse(url)\n      klass = adapter_class(uri.scheme)\n      session = klass.new(uri, settings.deep_dup)\n      session.start(&block)\n    end"
        ],
        [
            "def all_fields(table, field_name, value)\n      body = savon.\n             call(:get_all_fields_records_given_a_field_name_and_value,\n                  message: {\n                    'strFeatureClassOrTableName' => table,\n                    'strFieldNameToSearchOn' => field_name,\n                    'strValueOfFieldToSearchOn' => value\n                  }).\n             body\n\n      resp = body[:get_all_fields_records_given_a_field_name_and_value_response]\n      rslt = resp[:get_all_fields_records_given_a_field_name_and_value_result]\n      polys = rslt[:diffgram][:document_element][:municipality_poly]\n\n      poly = if polys.is_a? Array\n               polys.first\n             elsif polys.is_a? Hash\n               polys\n             else\n               fail \"Unexpected polys #{polys.class.name}, wanted Array or Hash\"\n             end\n    end"
        ],
        [
            "def WHEN(condition, adjuster)\n      unless Validation.conditionable? condition\n        raise TypeError, 'wrong object for condition'\n      end\n\n      unless Validation.adjustable? adjuster\n        raise TypeError, 'wrong object for adjuster'\n      end\n\n      ->v{_valid?(condition, v) ? adjuster.call(v) : v}\n    end"
        ],
        [
            "def INJECT(adjuster1, adjuster2, *adjusters)\n      adjusters = [adjuster1, adjuster2, *adjusters]\n\n      unless adjusters.all?{|f|adjustable? f}\n        raise TypeError, 'wrong object for adjuster'\n      end\n\n      ->v{\n        adjusters.reduce(v){|ret, adjuster|adjuster.call ret}\n      }\n    end"
        ],
        [
            "def PARSE(parser)\n      if !::Integer.equal?(parser) and !parser.respond_to?(:parse)\n        raise TypeError, 'wrong object for parser'\n      end\n\n      ->v{\n        if ::Integer.equal? parser\n          ::Kernel.Integer v\n        else\n          parser.parse(\n            case v\n            when String\n              v\n            when ->_{v.respond_to? :to_str}\n              v.to_str\n            when ->_{v.respond_to? :read}\n              v.read\n            else\n              raise TypeError, 'wrong object for parsing source'\n            end\n          )\n        end\n      }\n    end"
        ],
        [
            "def get_class(name)\n      @class_list = get_class_list\n      @class_list.select {|x| x.include?(name)}.collect{|y| y.strip}\n    end"
        ],
        [
            "def connection\n      @options[:path] =API_REST + @options[:path]\n      @options[:headers] = HEADERS.merge({\n        'X-Megam-Date' =>  Time.now.strftime(\"%Y-%m-%d %H:%M\")\n      }).merge(@options[:headers])\n\n      text.info(\"HTTP Request Data:\")\n      text.msg(\"> HTTP #{@options[:scheme]}://#{@options[:host]}\")\n      @options.each do |key, value|\n        text.msg(\"> #{key}: #{value}\")\n      end\n      text.info(\"End HTTP Request Data.\")\n      http = Net::HTTP.new(@options[:host], @options[:port])\n      http\n    end"
        ],
        [
            "def wake_deadline(start_time, timeout)\n      timeout = process_timeout(timeout)\n      deadline = start_time + timeout if timeout\n    end"
        ],
        [
            "def crud_links(model, instance_name, actions, args={})\n      _html = \"\"\n      _options = args.keys.empty? ? '' : \", #{args.map{|k,v| \":#{k} => #{v}\"}}\"\n  \n      if use_crud_icons\n        if actions.include?(:show)\n          _html << eval(\"link_to image_tag('/images/icons/view.png', :class => 'crud_icon'), model, :title => 'View'#{_options}\")\n        end\n        if actions.include?(:edit)\n          _html << eval(\"link_to image_tag('/images/icons/edit.png', :class => 'crud_icon'), edit_#{instance_name}_path(model), :title => 'Edit'#{_options}\")\n        end\n        if actions.include?(:delete)\n          _html << eval(\"link_to image_tag('/images/icons/delete.png', :class => 'crud_icon'), model, :confirm => 'Are you sure? This action cannot be undone.', :method => :delete, :title => 'Delete'#{_options}\")\n        end\n      else\n        if actions.include?(:show)\n          _html << eval(\"link_to 'View', model, :title => 'View', :class => 'crud_link'#{_options}\")\n        end\n        if actions.include?(:edit)\n          _html << eval(\"link_to 'Edit', edit_#{instance_name}_path(model), :title => 'Edit', :class => 'crud_link'#{_options}\")\n        end\n        if actions.include?(:delete)\n          _html << eval(\"link_to 'Delete', model, :confirm => 'Are you sure? This action cannot be undone.', :method => :delete, :title => 'Delete', :class => 'crud_link'#{_options}\")\n        end\n      end\n      _html\n    end"
        ],
        [
            "def obfuscated_link_to(path, image, label, args={})\n      _html = %{<form action=\"#{path}\" method=\"get\" class=\"obfuscated_link\">}\n      _html << %{ <fieldset><input alt=\"#{label}\" src=\"#{image}\" type=\"image\" /></fieldset>}\n      args.each{ |k,v| _html << %{  <div><input id=\"#{k.to_s}\" name=\"#{k}\" type=\"hidden\" value=\"#{v}\" /></div>} }\n      _html << %{</form>}\n      _html\n    end"
        ],
        [
            "def required_field_helper( model, element, html )\n      if model && ! model.errors.empty? && element.is_required\n        return content_tag( :div, html, :class => 'fieldWithErrors' )\n      else\n        return html\n      end\n    end"
        ],
        [
            "def select_tag_for_filter(model, nvpairs, params)\n      return unless model && nvpairs && ! nvpairs.empty?\n      options = { :query => params[:query] }\n      _url = url_for(eval(\"#{model}_url(options)\"))\n      _html = %{<label for=\"show\">Show:</label><br />}\n      _html << %{<select name=\"show\" id=\"show\" onchange=\"window.location='#{_url}' + '?show=' + this.value\">}\n      nvpairs.each do |pair|\n        _html << %{<option value=\"#{pair[:scope]}\"}\n        if params[:show] == pair[:scope] || ((params[:show].nil? || params[:show].empty?) && pair[:scope] == \"all\")\n          _html << %{ selected=\"selected\"}\n        end\n        _html << %{>#{pair[:label]}}\n        _html << %{</option>}\n      end\n      _html << %{</select>}\n    end"
        ],
        [
            "def sort_link(model, field, params, html_options={})\n      if (field.to_sym == params[:by] || field == params[:by]) && params[:dir] == \"ASC\"\n        classname = \"arrow-asc\"\n        dir = \"DESC\"\n      elsif (field.to_sym == params[:by] || field == params[:by])\n        classname = \"arrow-desc\"\n        dir = \"ASC\"\n      else\n        dir = \"ASC\"\n      end\n  \n      options = {\n        :anchor => html_options[:anchor] || nil,\n        :by => field,\n        :dir => dir,\n        :query => params[:query],\n        :show => params[:show]\n      }\n  \n      options[:show] = params[:show] unless params[:show].blank? || params[:show] == 'all'\n  \n      html_options = {\n        :class => \"#{classname} #{html_options[:class]}\",\n        :style => \"color: white; font-weight: #{params[:by] == field ? \"bold\" : \"normal\"}; #{html_options[:style]}\",\n        :title => \"Sort by this field\"\n      }\n  \n      field_name = params[:labels] && params[:labels][field] ? params[:labels][field] : field.titleize\n  \n      _link = model.is_a?(Symbol) ? eval(\"#{model}_url(options)\") : \"/#{model}?#{options.to_params}\"\n      link_to(field_name, _link, html_options)\n    end"
        ],
        [
            "def tag_for_label_with_inline_help( label_text, field_id, help_text )\n      _html = \"\"\n      _html << %{<label for=\"#{field_id}\">#{label_text}}\n      _html << %{<img src=\"/images/icons/help_icon.png\" onclick=\"$('#{field_id}_help').toggle();\" class='inline_icon' />}\n      _html << %{</label><br />}\n      _html << %{<div class=\"inline_help\" id=\"#{field_id}_help\" style=\"display: none;\">}\n      _html << %{<p>#{help_text}</p>}\n      _html << %{</div>}\n      _html\n    end"
        ],
        [
            "def key_press(keys)\n      dump_caller_stack\n      \n      if keys =~ /^Ctrl\\+([A-Z])$/\n        filtered_keys = \"^+#{$1}\"\n      elsif keys =~ /^Ctrl\\+Shift\\+([A-Z])$/\n        filtered_keys = \"^+#{$1.downcase}\"\n      elsif keys =~ /^Alt+([A-Z])$/\n        filtered_keys = \"!+#{$1}\"\n      elsif keys =~ /^Alt\\+Shift\\+([a-z])$/\n        filtered_keys = \"!+#{$1.downcase}\"\n      else\n        filtered_keys = keys\n      end\n      filtered_keys = keys.gsub(\"Alt+\", \"!+\").gsub(\"Ctrl+\", \"^+\")\n      RFormSpec::Keyboard.press(filtered_keys)\n      sleep 0.5\n    end"
        ],
        [
            "def open_file_dialog(title, filepath, text=\"\")\n      wait_and_focus_window(title)\n      dialog = RFormSpec::OpenFileDialog.new(title, text)\n      dialog.enter_filepath(filepath)\n      sleep 1\n      dialog.click_open\n    end"
        ],
        [
            "def parse(args)\n      # The options specified on the command line will be collected in\n      # *options*.\n      @options = Options.new\n      opt_parser = OptionParser.new do |parser|\n        @options.define_options(parser)\n      end\n      opt_parser.parse!(args)\n\n      @options\n    end"
        ],
        [
            "def add(path)\n      str = \"#{path} filter=rgc diff=rgc\"\n      if content.include?(str)\n        abort \"`#{str}\\n` is already included in #{@location}.\"\n      end\n\n      File.open(@location, 'a') do |f|\n        f.write(\"#{str}\\n\")\n      end\n    rescue Errno::ENOENT\n      abort \"File #{@location} does not exists.\"\n    rescue Errno::EACCES\n      abort \"File #{@location} is not accessible for writing.\"\n    end"
        ],
        [
            "def run\n      logger.info(\"#{self.class.to_s} is starting.\")\n      count_options = self.class.legacy_find_options.dup\n      count_options.delete(:order)\n      count_options.delete(:group)\n      count_options.delete(:limit)\n      count_options.delete(:offset)\n      @num_of_records = self.class.legacy_model.count(count_options)\n      if self.class.legacy_find_options[:limit] && (@num_of_records > self.class.legacy_find_options[:limit])\n        run_in_batches @num_of_records\n      else\n        run_normal\n      end\n      logger.info(\"#{self.class.to_s} migrated all #{@num_of_records} records successfully.\")\n    end"
        ],
        [
            "def parents\n      page, parents = self, Array.new\n      while page.parent\n        page = page.parent\n        parents << page\n      end\n      parents\n    end"
        ],
        [
            "def extract_search_text(*attributes)\n      Array(attributes).map { |meth|\n        Nokogiri::HTML(self.send(meth)).xpath(\"//text()\").\n          map {|node| text = node.text; text.try(:strip!); text}.join(\" \")\n      }.reject(&:blank?).join(\"\\n\")\n    end"
        ],
        [
            "def set_query_attributes!\n      attr_names = self.class.search_query_attributes.map(&:to_s)\n      self.query = attr_names.inject({}) { |memo, attr|\n        memo[attr] = self.send(attr)\n        memo\n      }\n    end"
        ],
        [
            "def manager_ws_uri\n    # convert manager uri to websocket\n    uri = URI.parse(manager_uri)\n    uri.scheme = (uri.scheme == \"https\" ? \"wss\" : \"ws\")\n    uri.path = \"/wsapi\"\n    return uri.to_s\n  end"
        ],
        [
            "def parse_config(conffile = nil)\n      conffile ||= Dir.glob([\n\t  \"/etc/foreman_hooks-host_rename/settings.yaml\",\n\t  \"#{confdir}/settings.yaml\"])[0]\n      raise \"Could not locate the configuration file\" if conffile.nil?\n    \n      # Parse the configuration file\n      config = {\n          hook_user: 'foreman',\n          database_path: '/var/tmp/foreman_hooks-host_rename.db',\n          log_path: '/var/tmp/foreman_hooks-host_rename.log',\n          log_level: 'warn',\n          rename_hook_command: '/bin/true',\n      }.merge(symbolize(YAML.load(File.read(conffile))))\n      config.each do |k,v|\n        instance_variable_set(\"@#{k}\",v)\n      end\n    \n      # Validate the schema\n      document = Kwalify::Yaml.load_file(conffile)\n      schema = Kwalify::Yaml.load_file(\"#{confdir}/schema.yaml\")\n      validator = Kwalify::Validator.new(schema)\n      errors = validator.validate(document)\n      if errors && !errors.empty?\n        puts \"WARNING: The following errors were found in #{conffile}:\"\n        for e in errors\n          puts \"[#{e.path}] #{e.message}\"\n        end\n        raise \"Errors in the configuration file\"\n      end\n    \n      check_script @rename_hook_command\n    end"
        ],
        [
            "def check_script(path)\n      binary=path.split(' ')[0]\n      raise \"#{path} does not exist\" unless File.exist? binary\n      raise \"#{path} is not executable\" unless File.executable? binary\n      path\n    end"
        ],
        [
            "def sync_host_table\n      uri = foreman_uri('/hosts?per_page=9999999')\n      debug \"Loading hosts from #{uri}\"\n      json = RestClient.get uri\n      debug \"Got JSON: #{json}\"\n      JSON.parse(json)['results'].each do |rec|\n        @db.execute \"insert into host (id,name) values ( ?, ? )\",\n                   rec['id'], rec['name']\n      end\n    end"
        ],
        [
            "def initialize_database\n      @db = SQLite3::Database.new @database_path\n      File.chmod 0600, @database_path\n      begin\n        @db.execute 'drop table if exists host;'\n        @db.execute <<-SQL\n            create table host (\n              id INT,\n              name varchar(254)\n            );\n        SQL\n        sync_host_table\n      rescue\n        File.unlink @database_path\n        raise\n      end\n    end"
        ],
        [
            "def execute_hook_action\n      @rename = false\n      name = @rec['host']['name']\n      id = @rec['host']['id']\n    \n      case @action\n      when 'create'\n        sql = \"insert into host (id, name) values (?, ?)\"\n        params = [id, name]\n      when 'update'\n        # Check if we are renaming the host\n        @old_name = @db.get_first_row('select name from host where id = ?', id)\n        @old_name = @old_name[0] unless @old_name.nil?\n        if @old_name.nil?\n          warn 'received an update for a non-existent host'\n        else\n          @rename = @old_name != name\n        end\n        debug \"checking for a rename: old=#{@old_name} new=#{name} rename?=#{@rename}\"\n    \n        sql = 'update host set name = ? where id = ?'\n        params = [name, id]\n      when 'destroy'\n        sql = 'delete from host where id = ?'\n        params = [id]\n      else\n        raise ArgumentError, \"unsupported action: #{ARGV[0]}\"\n      end\n      debug \"updating database; id=#{id} name=#{name} sql=#{sql}\"\n      stm = @db.prepare sql\n      stm.bind_params *params\n      stm.execute\n    end"
        ],
        [
            "def read_list(name)\n      opts = self.class.persisted_attrs[name]\n\n      if !lists[name] && opts[:default]\n        opts[:default]\n      else\n        send(\"#{name}=\", lists[name].value) if lists[name].is_a?(Redis::Future)\n        lists[name]\n      end\n    end"
        ],
        [
            "def read_hash(name)\n      opts = self.class.persisted_attrs[name]\n\n      if !hashes[name] && opts[:default]\n        opts[:default]\n      else\n        self.send(\"#{name}=\", hashes[name].value) if hashes[name].is_a?(Redis::Future)\n        hashes[name]\n      end\n    end"
        ],
        [
            "def write_attribute(name, val)\n      if attributes.is_a?(Redis::Future)\n        value = attributes.value \n        self.attributes = value ? Hash[*self.class.fields.keys.zip(value).flatten] : {}\n      end\n\n      attributes[name] = self.class.transform(:to, name, val)\n    end"
        ],
        [
            "def write_list(name, val)\n      raise \"RedisAssist: tried to store a #{val.class.name} as Array\" unless val.is_a?(Array)\n      lists[name] = val\n    end"
        ],
        [
            "def write_hash(name, val)\n      raise \"RedisAssist: tried to store a #{val.class.name} as Hash\" unless val.is_a?(Hash)\n      hashes[name] = val\n    end"
        ],
        [
            "def update_columns(attrs)\n      redis.multi do\n        attrs.each do |attr, value|\n          if self.class.fields.has_key?(attr)\n            write_attribute(attr, value)  \n            redis.hset(key_for(:attributes), attr, self.class.transform(:to, attr, value)) unless new_record?\n          end\n\n          if self.class.lists.has_key?(attr)\n            write_list(attr, value)       \n\n            unless new_record?\n              redis.del(key_for(attr))\n              redis.rpush(key_for(attr), value) unless value.empty?\n            end\n          end\n\n          if self.class.hashes.has_key?(attr)\n            write_hash(attr, value)       \n\n            unless new_record?\n              hash_as_args = hash_to_redis(value)\n              redis.hmset(key_for(attr), *hash_as_args)\n            end\n          end\n        end\n      end\n    end"
        ],
        [
            "def filter_authorized!(method, objects, user = current_user)\n      object_array = Array(objects)\n\n      object_array.select do |object|\n        policy = policy_for(object)\n        policy.can?(method, user)\n      end\n    end"
        ],
        [
            "def can?(method, object, user = current_user)\n      policy = policy_for(object)\n      policy.can?(method, user)\n    end"
        ],
        [
            "def nethash interval = 500, start = 0, stop = false\n      suffixe = stop ? \"/#{stop}\" : ''\n      JSON.parse(call_blockchain_api(\"nethash/#{interval}/#{start}#{suffixe}?format=json\"))\n    end"
        ],
        [
            "def last(limit=1, offset=0)\n      from    = offset\n      to      = from + limit - 1\n      members = redis.zrange(index_key_for(:id), (to * -1) + -1, (from * -1) + -1).reverse\n\n      find(limit > 1 ? members : members.first)\n    end"
        ],
        [
            "def find(ids, opts={})\n      ids.is_a?(Array) ? find_by_ids(ids, opts) : find_by_id(ids, opts)\n    end"
        ],
        [
            "def find_in_batches(options={})\n      start       = options[:start]      || 0\n      marker      = start\n      batch_size  = options[:batch_size] || 500\n      record_ids  = redis.zrange(index_key_for(:id), marker, marker + batch_size - 1)\n\n      while record_ids.length > 0\n        records_count   = record_ids.length\n        marker          += records_count\n        records         = find(record_ids)\n\n        yield records\n\n        break if records_count < batch_size\n\n        record_ids = redis.zrange(index_key_for(:id), marker, marker + batch_size - 1)\n      end\n    end"
        ],
        [
            "def load_keymap(map) #:nodoc:\n      @maps ||= Hash.new\n      if @maps[map].nil? && File.file?(File.join(self.storage_path, map.to_s + \"_map.yml\"))\n        @maps[map] = YAML.load(File.open(File.join(self.storage_path, map.to_s + \"_map.yml\")))\n        logger.debug(\"#{self.class.to_s} lazy loaded #{map} successfully.\")\n      end\n    end"
        ],
        [
            "def mapped_key(map, key)\n      load_keymap(map.to_s)\n      @maps[map.to_s][handle_composite(key)]\n    end"
        ],
        [
            "def processor_count\n      @processor_count ||= begin\n        os_name = RbConfig::CONFIG[\"target_os\"]\n        if os_name =~ /mingw|mswin/\n          require 'win32ole'\n          result = WIN32OLE.connect(\"winmgmts://\").ExecQuery(\n            \"select NumberOfLogicalProcessors from Win32_Processor\")\n          result.to_enum.collect(&:NumberOfLogicalProcessors).reduce(:+)\n        elsif File.readable?(\"/proc/cpuinfo\")\n          IO.read(\"/proc/cpuinfo\").scan(/^processor/).size\n        elsif File.executable?(\"/usr/bin/hwprefs\")\n          IO.popen(\"/usr/bin/hwprefs thread_count\").read.to_i\n        elsif File.executable?(\"/usr/sbin/psrinfo\")\n          IO.popen(\"/usr/sbin/psrinfo\").read.scan(/^.*on-*line/).size\n        elsif File.executable?(\"/usr/sbin/ioscan\")\n          IO.popen(\"/usr/sbin/ioscan -kC processor\") do |out|\n            out.read.scan(/^.*processor/).size\n          end\n        elsif File.executable?(\"/usr/sbin/pmcycles\")\n          IO.popen(\"/usr/sbin/pmcycles -m\").read.count(\"\\n\")\n        elsif File.executable?(\"/usr/sbin/lsdev\")\n          IO.popen(\"/usr/sbin/lsdev -Cc processor -S 1\").read.count(\"\\n\")\n        elsif File.executable?(\"/usr/sbin/sysconf\") and os_name =~ /irix/i\n          IO.popen(\"/usr/sbin/sysconf NPROC_ONLN\").read.to_i\n        elsif File.executable?(\"/usr/sbin/sysctl\")\n          IO.popen(\"/usr/sbin/sysctl -n hw.ncpu\").read.to_i\n        elsif File.executable?(\"/sbin/sysctl\")\n          IO.popen(\"/sbin/sysctl -n hw.ncpu\").read.to_i\n        else\n          $stderr.puts \"Unknown platform: \" + RbConfig::CONFIG[\"target_os\"]\n          $stderr.puts \"Assuming 1 processor.\"\n          1\n        end\n      end\n    end"
        ],
        [
            "def physical_processor_count\n      @physical_processor_count ||= begin\n        ppc = case RbConfig::CONFIG[\"target_os\"]\n        when /darwin1/\n          IO.popen(\"/usr/sbin/sysctl -n hw.physicalcpu\").read.to_i\n        when /linux/\n          cores = {}  # unique physical ID / core ID combinations\n          phy = 0\n          IO.read(\"/proc/cpuinfo\").scan(/^physical id.*|^core id.*/) do |ln|\n            if ln.start_with?(\"physical\")\n              phy = ln[/\\d+/]\n            elsif ln.start_with?(\"core\")\n              cid = phy + \":\" + ln[/\\d+/]\n              cores[cid] = true if not cores[cid]\n            end\n          end\n          cores.count\n        when /mswin|mingw/\n          require 'win32ole'\n          result_set = WIN32OLE.connect(\"winmgmts://\").ExecQuery(\n            \"select NumberOfCores from Win32_Processor\")\n          result_set.to_enum.collect(&:NumberOfCores).reduce(:+)\n        else\n          processor_count\n        end\n        # fall back to logical count if physical info is invalid\n        ppc > 0 ? ppc : processor_count\n      end\n    end"
        ],
        [
            "def valid?(options = {})\n      options = {:input => {}}.merge(options)\n      errors = []\n\n      # initial sandbox\n      sandbox = _source(options)\n\n      # add in inputs\n      sandbox[:inputs] = options[:input]\n\n      validity = @filters.map do |filter_name, filter|\n\n        # find input for given filter\n        sandbox[:input] = options[:input][filter[:key]] if options[:input].is_a?(Hash)\n\n        filter_validity = filter[:valid].nil? || sandbox.instance_eval(&filter[:valid])\n\n        if filter_validity == false\n          # Ignore an empty filter unless it's required\n          if !sandbox[:input].to_s.blank?\n            errors << \"#{filter_name} is invalid.\"\n            false\n          else\n            if sandbox[:input].to_s.blank? && !filter[:require].blank?\n              errors << \"#{filter_name} is required.\"\n              false\n            else\n              true\n            end\n          end\n        elsif filter_validity == true\n          if sandbox[:input].to_s.blank? && !filter[:require].blank?\n            errors << \"#{filter_name} is required.\"\n            false\n          else\n            true\n          end\n        elsif !filter_validity.nil? && !filter_validity[:status].nil? && filter_validity[:status] == false\n          # Ignore an empty filter unless it's required or the error is forced.\n          if !sandbox[:input].to_s.blank? || filter_validity[:force_error] == true\n            errors << filter_validity[:errors]\n            false\n          else\n            if sandbox[:input].to_s.blank? && !filter[:require].blank?\n              errors << \"#{filter_name} is required.\"\n              false\n            else\n              true\n            end\n          end\n        end\n      end\n\n      return {:status => !validity.include?(false), :errors => errors}\n\n    end"
        ],
        [
            "def reload()\n      self.clear\n      self.concat File.read(event_file).split(/\\r?\\n/).map{|e| Event.new(e)}\n    end"
        ],
        [
            "def followee_of?(model)\n      0 < self.followers.by_model(model).limit(1).count * model.followees.by_model(self).limit(1).count\n    end"
        ],
        [
            "def ever_followed\n      follow = []\n      self.followed_history.each do |h|\n        follow << h.split('_')[0].constantize.find(h.split('_')[1])\n      end\n      follow\n    end"
        ],
        [
            "def wait(mutex, timeout = nil)\n      validate_mutex(mutex)\n      validate_timeout(timeout)\n      waitable = waitable_for_current_thread\n      @mutex.synchronize do\n        @waitables.push(waitable)\n        @waitables_to_resume.push(waitable)\n      end\n      waitable.wait(mutex, timeout)\n      self\n    end"
        ],
        [
            "def validate_timeout(timeout)\n      unless timeout == nil\n        raise TypeError, \"'timeout' must be nil or a Numeric\" unless timeout.is_a?(Numeric)\n        raise ArgumentError, \"'timeout' must not be negative\" if timeout.negative?\n      end\n    end"
        ],
        [
            "def render(template_name, view_handler, locals, &content)\n      self.erb_source.render(template_name, render_locals(view_handler, locals), &content)\n    end"
        ],
        [
            "def run_entry\n      entry = get_entry()\n      output = '';\n      @keys.keys.select { |k| @config['key_fields'][k] && @keys[k] }.each do |key|\n        output += [ key, @keys[key] ].join(' ') + \" \"\n      end\n\n      unless entry\n        $stderr.puts \"#{ output } is not supported on #{ @page_name }\" if @debug\n        return\n      end\n\n      unless entry['ready'] == \"1\"\n        $stderr.puts \"#{ output } is not ready to run #{ @agent_name }\" if @debug\n        return false, entry\n      end\n\n      if entry['complete'] == \"1\"\n        $stderr.puts \"All goals are completed for #{ output }\" if @debug\n        return false, entry\n      end\n\n      if entry[@agent_name]\n        (status, running_hostname) = entry[@agent_name].split(':')\n\n        case status\n        when 'r'\n          $stderr.puts \" #{ output } is already running #{ @agent_name } on #{ running_hostname }\" if @debug\n          return false, entry\n        \n        when \"1\"\n          $stderr.puts \" #{ output } has already run #{ @agent_name }\" if @debug\n          return false, entry\n\n        when 'F'\n          $stderr.puts \" #{ output } has already Failed  #{ @agent_name }\" if @debug\n          return false, entry\n        end\n      end\n\n      if @prerequisites\n        @prerequisites.each do |prereq_field|\n          unless entry[prereq_field] == \"1\"\n            $stderr.puts \" #{ output } has not finished #{ prereq_field }\" if @debug\n            return false, entry\n          end\n        end\n      end\n\n      # first attempt to set the hostname of the machine as the value of the agent\n      hostname = Socket.gethostname;\n      begin\n        entry.update @agent_name => \"r:#{ hostname }\"\n        @worksheet.save\n\n      rescue GoogleDrive::Error\n        # this is a collision, which is to be treated as if it is not runnable\n        $stderr.puts \" #{ output } lost #{ @agent_name } on #{hostname}\" if @debug\n        return false, entry\n      end\n\n      sleep 3\n      begin\n        @worksheet.reload\n      rescue GoogleDrive::Error\n        # this is a collision, which is to be treated as if it is not runnable\n        $stderr.puts \" #{ output } lost #{ @agent_name } on #{hostname}\" if @debug\n        return false, entry\n      end\n\n      check = entry[@agent_name]\n      (status, running_hostname) = check.split(':')\n      if hostname == running_hostname\n        return true, entry\n      end\n      $stderr.puts \" #{ output } lost #{ @agent_name } on #{hostname}\" if @debug\n      return false, entry\n    end"
        ],
        [
            "def pick(number, *cards)\n      ordered = cards.flatten.map do |card|\n        i = card_preference.map { |preference| card.type == preference }.index(true)\n        {card: card, index: i}\n      end\n      ordered.sort_by { |h| h[:index] || 99 }.first(number).map {|h| h[:card] }\n    end"
        ],
        [
            "def discard\n      ordered = player.hand.map do |card|\n        i = card_preference.map { |preference| card.type == preference }.index(true)\n        {card: card, index: i}\n      end\n      ordered.sort_by { |h| h[:index] || 99 }.last.try(:fetch, :card)\n    end"
        ],
        [
            "def play\n      bangs_played = 0\n      while !player.hand.find_all(&:draws_cards?).empty?\n        player.hand.find_all(&:draws_cards?).each {|card| player.play_card(card)}\n      end\n      play_guns\n      player.hand.each do |card|\n        target = find_target(card)\n        next if skippable?(card, target, bangs_played)\n        bangs_played += 1 if card.type == Card.bang_card\n        player.play_card(card, target, :hand)\n      end\n    end"
        ],
        [
            "def sleep(timeout = nil)\n      validate_timeout(timeout)\n      unlock do\n        if timeout == nil || timeout == Float::INFINITY\n          elapsed_time = (timer { Thread.stop }).round\n        else\n          elapsed_time = Kernel.sleep(timeout)\n        end\n      end\n    end"
        ],
        [
            "def temporarily_release(&block)\n      raise ArgumentError, 'no block given' unless block_given?\n      unlock\n      begin\n        return_value = yield\n        lock\n      rescue Exception\n        lock_immediately\n        raise\n      end\n      return_value\n    end"
        ],
        [
            "def timer(&block)\n      start_time = Time.now\n      yield(start_time)\n      time_elapsed = Time.now - start_time\n    end"
        ],
        [
            "def wait\n      continue = false\n      trap \"SIGINT\" do\n        puts \"Continuing...\"\n        continue = true\n      end\n      puts \"Waiting. Press ^C to continue test...\"\n      wait_until(3600) { continue }\n      trap \"SIGINT\", \"DEFAULT\"\n    end"
        ],
        [
            "def optional_args_block_call(block, args)\n      if RUBY_VERSION >= \"1.9.0\"\n        if block.arity == 0\n          block.call\n        else\n          block.call(*args)\n        end\n      else\n        block.call(*args)\n      end\n    end"
        ],
        [
            "def extract_file_rdoc(file, from = nil, reverse = false)\n      lines = File.readlines(file)\n      if from.nil? and reverse\n        lines = lines.reverse\n      elsif !reverse\n        lines = lines[(from || 0)..-1]\n      else\n        lines = lines[0...(from || -1)].reverse\n      end\n      \n      doc, started = [], false\n      lines.each{|line|\n        if /^\\s*[#]/ =~ line\n          doc << line\n          started = true\n        elsif started\n          break\n        end \n      }\n      \n      doc = reverse ? doc.reverse[0..-1] : doc[0..-1]\n      doc = doc.join(\"\\n\")\n      doc.gsub(/^\\s*[#] ?/, \"\")\n    end"
        ],
        [
            "def select(fields)\n      if (fields == []) || (fields.nil?)\n        fields = [:_id]\n      end\n      clone.tap {|q| q.options[:fields] = fields}\n    end"
        ],
        [
            "def set_pagination_info(page_no, page_size, record_count)\n      @current_page = page_no\n      @per_page = page_size\n      @total_count = record_count\n      @total_pages = (record_count / page_size.to_f).ceil\n    \n      extend PaginationMethods\n\n      self\n    end"
        ],
        [
            "def echo_uploads_data=(data)\n      parsed = JSON.parse Base64.decode64(data)\n      # parsed will look like:\n      # { 'attr1' => [ {'id' => 1, 'key' => 'abc...'} ] }\n      unless parsed.is_a? Hash\n        raise ArgumentError, \"Invalid JSON structure in: #{parsed.inspect}\"\n      end\n      parsed.each do |attr, attr_data|\n        # If the :map option was passed, there may be multiple variants of the uploaded\n        # file. Even if not, attr_data is still a one-element array.\n        unless attr_data.is_a? Array\n          raise ArgumentError, \"Invalid JSON structure in: #{parsed.inspect}\"\n        end\n        attr_data.each do |variant_data|\n          unless variant_data.is_a? Hash\n            raise ArgumentError, \"Invalid JSON structure in: #{parsed.inspect}\"\n          end\n          if meta = ::EchoUploads::File.where(\n            id: variant_data['id'], key: variant_data['key'], temporary: true\n          ).first\n            if send(\"#{attr}_tmp_metadata\").nil?\n              send \"#{attr}_tmp_metadata=\", []\n            end\n            send(\"#{attr}_tmp_metadata\") << meta\n          end\n        end\n      end\n    end"
        ],
        [
            "def follower_of?(model)\n      0 < self.followees.by_model(model).limit(1).count * model.followers.by_model(self).limit(1).count\n    end"
        ],
        [
            "def follow(*models)\n      models.each do |model|\n        unless model == self or self.follower_of?(model) or model.followee_of?(self) or self.cannot_follow.include?(model.class.name) or model.cannot_followed.include?(self.class.name)\n          model.followers.create!(:f_type => self.class.name, :f_id => self.id.to_s)\n          model.followed_history << self.class.name + '_' + self.id.to_s\n          model.save\n          self.followees.create!(:f_type => model.class.name, :f_id => model.id.to_s)\n          self.follow_history << model.class.name + '_' + model.id.to_s\n          self.save\n        end\n      end\n    end"
        ],
        [
            "def unfollow(*models)\n      models.each do |model|\n        unless model == self or !self.follower_of?(model) or !model.followee_of?(self) or self.cannot_follow.include?(model.class.name) or model.cannot_followed.include?(self.class.name)\n          model.followers.by_model(self).first.destroy\n          self.followees.by_model(model).first.destroy\n        end\n      end\n    end"
        ],
        [
            "def ever_follow\n      follow = []\n      self.follow_history.each do |h|\n        follow << h.split('_')[0].constantize.find(h.split('_')[1])\n      end\n      follow\n    end"
        ],
        [
            "def pop(non_block = false)\n      @pop_mutex.lock do\n        @mutex.synchronize do\n          if empty?\n            return if closed?\n            raise ThreadError if non_block\n            @mutex.unlock\n            @waiter.wait\n            @mutex.lock\n            return if closed?\n          end\n          @items.shift\n        end\n      end\n    end"
        ],
        [
            "def lookup(key, opts={}, &block)\n      unless addr = cache.has?(key)\n        addr = link.send('lookup', key, opts, &block)\n        cache.save(key, addr)\n      end\n      yield addr if block_given?\n      addr\n    end"
        ],
        [
            "def announce(key, port, opts={}, &block)\n      payload = [key,port]\n      link.send 'announce', payload, opts, &block\n      if config.auto_announce\n        periodically(config.auto_announce_interval) do\n          link.send 'announce', payload, opts, &block\n        end\n      end\n    end"
        ],
        [
            "def _logical_operator(delegated, *conditions)\n      unless conditions.all?{|c|conditionable? c}\n        raise TypeError, 'wrong object for condition'\n      end\n\n      ->v{\n        conditions.__send__(delegated) {|condition|\n          _valid? condition, v\n        }\n      }\n    end"
        ],
        [
            "def post_with_signature(opts)\n      path = opts.fetch(:path)\n      payload = opts.fetch(:payload)\n      secret = opts.fetch(:secret)\n\n      post path, {payload: payload}, generate_secret_header(secret, URI.encode_www_form(payload: payload))\n    end"
        ],
        [
            "def get_height(img)\n      new_height = (img.height / (img.width.to_f / self.width.to_f)).ceil\n    end"
        ],
        [
            "def create_color_string\n      (0...img.height).map do |y|\n        (0...img.width).map do |x|\n          pix = self.img[x,y]\n          pix_vals = [r(pix), g(pix), b(pix)]\n          find_closest_term_color(pix_vals)\n        end\n      end.join\n    end"
        ],
        [
            "def find_closest_term_color(pixel_values)\n      color = \"\"\n      lil_dist = 195075\n      @@palette.each do |col_name, col_values|\n        dist = find_distance(col_values, pixel_values)\n        if dist < lil_dist\n          lil_dist = dist\n          color = col_name\n        end\n      end\n      color\n    end"
        ],
        [
            "def draw_line(pixels)\n      pix_line = \"\"\n      pixels.each do |pixel|\n        pix_line = pix_line + \"  \".colorize(:background => find_color(pixel))\n      end\n      puts pix_line\n    end"
        ],
        [
            "def tree\n      @tree and return @tree \n      @tree = []\n      file_set = version_files\n\n      while child = file_set.shift\n        tree << child #if child.dir?\n\n        if child.type == \"dir\"\n          file_set.unshift( github.where(child.path).contents ).flatten!\n        end\n      end\n\n      @tree\n    end"
        ],
        [
            "def search(options = {})\n      self.date = options[:date] || date\n      self.hd = options[:hd] || hd\n      response = HTTParty.get(DEFAULT_URL, query: attributes)\n      handle_response(response)\n    end"
        ],
        [
            "def process_timeout(timeout)\n      unless timeout == nil\n        raise TypeError, \"'timeout' must be nil or a Numeric\" unless timeout.is_a?(Numeric)\n        raise ArgumentError, \"'timeout' must not be negative\" if timeout.negative?\n      end\n      timeout = nil if timeout == Float::INFINITY\n      timeout\n    end"
        ],
        [
            "def find_or_create_authorization_by_note(note)\n      found_auth = list_authorizations.find {|auth| auth.note == note}\n      if found_auth\n        found_auth.token\n      else\n        create_authorization(note)\n      end\n    end"
        ],
        [
            "def send(type, payload, opts = {}, &block)\n      res = http_send type, Oj.dump({\"rid\" => uuid, \"data\" => payload})\n      block.call(res) if block\n      res\n    end"
        ],
        [
            "def jquids_includes(options = {})\n\n      # Set the format for the datepickers\n      Jquids.format = options[:format] if options.has_key?(:format)\n      html_out = \"\"\n\n      if options.has_key?(:style)\n        html_out <<  stylesheet_link_tag(jq_ui_stylesheet(options[:style])) + \"\\n\" unless options[:style] == nil or options[:style] == :none or options[:style] == false\n      else\n        html_out << stylesheet_link_tag(jq_ui_stylesheet) + \"\\n\"\n      end\n\n      jq_vrs = options.has_key?(:jQuery) ? options[:jQuery] : Jquids::JQVersions.last\n      ui_vrs = options.has_key?(:jQueryUI) ? options[:jQueryUI] : Jquids::UIVersions.last\n      trtp_vrs = options.has_key?(:TRTimepicker) ? options[:TRTimepicker] : :none\n\n      # A little bit of css of the timepicker, and it is not added if the\n      # timepicker javascript file is not included\n      unless trtp_vrs == :none or trtp_vrs == false or trtp_vrs == nil\n        html_out << \"<style type=\\\"text/css\\\">.ui-timepicker-div .ui-widget-header{margin-bottom:8px;}.ui-timepicker-div dl{text-align:left;}.ui-timepicker-div dl dt{height:25px;}.ui-timepicker-div dl dd{margin:-25px 0 10px 65px;}.ui-timepicker-div td{font-size:90%;}</style>\\n\"\n      end\n\n      html_out << javascript_include_tag(jq_ui_javascripts(jq_vrs, ui_vrs, trtp_vrs)) + \"\\n\"\n\n      options[:datepicker_options] ||= {}\n      \n      # Some opiniated defaults (basically an attempt to make the jQuery\n      # datepicker similar to the calendar_date_select with out making\n      # modifications or having local dependencies)\n      options[:datepicker_options][:showOtherMonths] = true if options[:datepicker_options][:showOtherMonths].nil?\n      options[:datepicker_options][:selectOtherMonths] = true if options[:datepicker_options][:selectOtherMonths].nil?\n      options[:datepicker_options][:changeMonth] = true if options[:datepicker_options][:changeMonth].nil?\n      options[:datepicker_options][:changeYear] = true if options[:datepicker_options][:changeYear].nil?\n      options[:datepicker_options][:dateFormat] = Jquids.format[:js_date]\n\n      Jquids.jquids_process_options(options)\n\n      # Decides whether the 'to_json' method exists (part of rails 3) or if the\n      # gem needs to us the json gem\n      datepicker_options = \n        if options[:datepicker_options].respond_to?(:to_json)\n            options.delete(:datepicker_options).to_json\n        else\n          begin\n            JSON.unparse(options.delete(:datepicker_options))\n          rescue\n            \"\"\n          end\n        end\n\n      html_out << '<script type=\"text/javascript\">$.datepicker.setDefaults(' + datepicker_options + ');'\n\n\n      unless trtp_vrs == :none or trtp_vrs == false or trtp_vrs == nil\n        options[:timepicker_options] ||= {}\n        \n        # Some opiniated defaults (basically an attempt to make the jQuery\n        # datepicker similar to the calendar_date_select with out making\n        # modifications or having local dependencies)\n        # Sets the time format based off of the current format\n        options[:timepicker_options][:ampm] = Jquids.format[:ampm]\n        options[:timepicker_options][:timeFormat] = Jquids.format[:tr_js_time]\n\n        timepicker_options = \n          if options[:timepicker_options].respond_to?(:to_json)\n              options.delete(:timepicker_options).to_json\n          else\n            begin\n              JSON.unparse(options.delete(:timepicker_options))\n            rescue\n              \"\"\n            end\n          end\n\n        html_out << '$.timepicker.setDefaults(' + timepicker_options + ');'\n      end\n\n      # A minified version of this javascript.\n      #   <script type=\"text/javascript\">\n      #     $(document).ready(function(){\n      #       $(\".jquids_dp\").each(function(){\n      #         var s = $(this).attr(\"data-jquipicker\");\n      #         $(this).attr(\"data-jquipicker\") ? $(this).datepicker(JSON.parse(s)) : $(this).datepicker();\n      #       });\n      #       $(\".jquids_tp\").each(function(){\n      #         var s = $(this).attr(\"data-jquipicker\");\n      #         $(this).attr(\"data-jquipicker\") ? $(this).timepicker(JSON.parse(s)) : $(this).timepicker();\n      #       });\n      #       $(\".jquids_dtp\").each(function(){\n      #         var s=$(this).attr(\"data-jquipicker\");\n      #         $(this).attr(\"data-jquipicker\")?$(this).datetimepicker(JSON.parse(s)) : $(this).datetimepicker()\n      #       })\n      #     });\n      #   </script>\n      #\n      # Used to parse out options for each datepicker instance\n      html_out << '$(document).ready(function(){$(\".jquids_dp\").each(function(){var s=$(this).attr(\"data-jquipicker\");$(this).attr(\"data-jquipicker\")?$(this).datepicker(JSON.parse(s)):$(this).datepicker()});$(\".jquids_tp\").each(function(){var s=$(this).attr(\"data-jquipicker\");$(this).attr(\"data-jquipicker\")?$(this).timepicker(JSON.parse(s)):$(this).timepicker()});$(\".jquids_dtp\").each(function(){var s=$(this).attr(\"data-jquipicker\");$(this).attr(\"data-jquipicker\")?$(this).datetimepicker(JSON.parse(s)):$(this).datetimepicker()})});</script>'\n\n      if html_out.respond_to?(:html_safe)\n        return html_out.html_safe\n      else\n        return html_out\n      end\n    end"
        ],
        [
            "def method_missing method, *args, &block\n      if args.empty?\n        @config.send(method)\n      else\n        @config.send(\"#{method}=\", args.first)\n      end\n    end"
        ],
        [
            "def to_s\n      today = arabno_to_hindi(day)  + \" \"\n      today = today + HijriUmmAlqura::MONTHNAMES[month] + \" \"\n      today = today + arabno_to_hindi(year) + \" \u0647\u0640\" \n    end"
        ],
        [
            "def jd(date = self)\n      index = (12 * (date.year - 1)) + date.month - 16260\n      mcjdn = date.day + HijriUmmAlqura::UMMALQURA_DAT[index - 1] - 1\n      mcjdn = mcjdn + 2400000 - 0.5\n      return mcjdn\n    end"
        ],
        [
            "def gd(date = self)        \n      j_date = jd(date)\n      g_date = HijriUmmAlqura.jd_to_gd(j_date)\n      return g_date\n    end"
        ],
        [
            "def add(date = self, offset, period)\n      y = period == 'y' ? (date.year + offset) : date.year \n      m = period == 'm' ? (month_of_year(date.year, date.month) + offset) : month_of_year(date.year, date.month) \n      d = date.day\n      begin\n        if (period == 'd' || period == 'w') \n          week_days = period == 'w' ? 7 : 1\n          j_date = jd\n          j_date = j_date + offset * week_days \n          result = HijriUmmAlqura.jd(j_date)\n          return result\n        elsif (period == 'm') \n          rys = resync_year_month(y, m)\n          y  = rys[0]\n          m = rys[1]\n          return HijriUmmAlqura.format_date([y, m, d])\n        elsif (period == 'y') \n          return HijriUmmAlqura.format_date([y, m, d])\n        end\n      rescue Exception => e  \n        puts \"Exception details: #{e.class} #{e.message}\" \n      end\n    end"
        ],
        [
            "def + (n)\n      case n\n      when Numeric then  \n        j_date = jd + n * 1 \n        result = HijriUmmAlqura.jd(j_date)\n        return result\n      end\n      raise TypeError, 'expected numeric'\n    end"
        ],
        [
            "def raise(exception = nil)\n      exception = case\n      when exception == nil then StandardError.new\n      when exception.is_a?(Exception) then exception\n      when Exception >= exception then exception.new\n      else\n        Kernel.raise(TypeError, \"'exception' must be nil or an instance of or descendant of Exception\")\n      end\n      @mutex.synchronize do\n        Kernel.raise(Complete) if @complete\n        @complete = true\n        @exception = exception\n        @waiter.resume_all_indefinitely\n      end\n      nil\n    end"
        ],
        [
            "def to_hash\n      index_hash = Hash.new\n      index_hash[\"json_claz\"] = self.class.name\n      index_hash[\"creationDate\"] = creationDate\n      index_hash[\"admin\"] = admin\n      index_hash[\"type\"] = type\n      index_hash[\"password\"] = password\n      index_hash[\"name\"] = name\n      index_hahs[\"mail\"] = mail\n      index_hash[\"displayName\"] = displayName\n      index_hash[\"lastModified\"] = lastModified\n      index_hash[\"active\"] = active\n      index_hash[\"some_msg\"] = some_msg\n      index_hash\n    end"
        ],
        [
            "def site=(site)\n      if site != self.site\n        @site = site\n        uri = URI.parse(site)\n        @user = URI.decode(uri.user) if(uri.user)\n        @password = URI.decode(uri.password) if(uri.password)\n        @resource_class = self.send(:create_resource_class)\n      end\n      @site\n    end"
        ],
        [
            "def find(*args)\n      scope = args.slice!(0)\n      options = args.slice!(0) || {}\n      @resource_class.find(scope, options)\n    end"
        ],
        [
            "def create_resource_class\n      raise \"Please set the site for #{self} class.\" unless(self.site)\n      created_class = Class.new(MingleResource)\n      created_class.format = :xml\n      setup_class(created_class)\n      created_class\n    end"
        ],
        [
            "def run!\n    # load agent from config or cli opts\n    agent = load_agent()\n\n    fix_ownership()\n\n    # debug mode, stay in front\n    if @config[:debug] then\n      Logging::Logger.root.add_appenders(\"stdout\")\n      return start_websocket_client()\n    end\n\n    # start daemon\n    validate_argv()\n    daemon_dir = Bixby.path(\"var\")\n    ensure_state_dir(daemon_dir)\n    close_fds()\n\n    daemon_opts = {\n      :dir        => daemon_dir,\n      :dir_mode   => :normal,\n      :log_output => true,\n      :stop_proc  => lambda { logger.info \"Agent shutdown on service stop command\" }\n    }\n\n    Daemons.run_proc(\"bixby-agent\", daemon_opts) do\n      Logging.logger.root.clear_appenders\n      start_websocket_client()\n    end\n  end"
        ],
        [
            "def start_websocket_client\n    # make sure log level is still set correctly here\n    Bixby::Log.setup_logger(:level => Logging.appenders[\"file\"].level)\n    logger.info \"Started Bixby Agent #{Bixby::Agent::VERSION}\"\n    @client = Bixby::WebSocket::Client.new(Bixby.agent.manager_ws_uri, AgentHandler)\n    trap_signals()\n    @client.start\n  end"
        ],
        [
            "def fix_ownership\n    return if Process.uid != 0\n    begin\n      uid = Etc.getpwnam(\"bixby\").uid\n      gid = Etc.getgrnam(\"bixby\").gid\n      # user/group exists, chown\n      File.chown(uid, gid, Bixby.path(\"var\"), Bixby.path(\"etc\"))\n    rescue ArgumentError\n    end\n  end"
        ]
    ]
}