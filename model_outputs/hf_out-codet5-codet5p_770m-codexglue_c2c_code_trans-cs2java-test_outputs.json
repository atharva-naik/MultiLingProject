{
    "accuracy": 0.676,
    "bleu": {
        "bleu": 0.911280950461702,
        "precisions": [
            0.9560928337143425,
            0.929721740903068,
            0.906835059094237,
            0.8865052088927076
        ],
        "brevity_penalty": 0.9911437139836687,
        "length_ratio": 0.9911827003595882,
        "translation_length": 40244,
        "reference_length": 40602
    },
    "codebleu": 0.8538636545425786,
    "preds": [
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_vcenter);}\n",
        "public void addAll(BlockList<T> src) {if (src.size == 0) {return;}int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++) {addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);}if (src.tailBlkIdx != 0) {addAll(src.tailBlock, 0, src.tailBlkIdx);}}\n",
        "public void writeByte(byte b) {if (upto == blockSize) {if (currentBlock != null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;}\n",
        "public ObjectId getObjectId() {return objectId;}\n",
        "public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) {request = beforeClientExecution(request);return executeDeleteDomainEntry(request);}\n",
        "public long ramBytesUsed() {long sizeInBytes = 0;for(FieldIndexData entry : fields.values()) {sizeInBytes += entry.ramBytesUsed();}return sizeInBytes;}\n",
        "public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return \"\"; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}\n",
        "public POIFSFileSystem() {HeaderBlock headerBlock = new HeaderBlock(bigBlockSize);_property_table = new PropertyTable(headerBlock);_documents = new ArrayList<>();_root = null;}\n",
        "public void init(int address) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice != null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto < slice.length;}\n",
        "public SubmoduleAddCommand setPath(String path) {this.path = path;return this;}\n",
        "public ListIngestionsResult listIngestions(ListIngestionsRequest request) {request = beforeClientExecution(request);return executeListIngestions(request);}\n",
        "public QueryParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}\n",
        "public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request) {request = beforeClientExecution(request);return executeGetShardIterator(request);}\n",
        "public ModifyStrategyRequest() {super(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\");setMethod(MethodType.POST);}\n",
        "public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException(\"InputStreamReader is closed\");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {return false;}}\n",
        "public EscherOptRecord getOptRecord() {return _optRecord;}\n",
        "public synchronized int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException(\"buffer == null\");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length ? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer[pos + i];}pos += copylen;return copylen;}\n",
        "public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {this.sentenceOp = sentenceOp;}\n",
        "public void print(String str) {write(str != null ? str : String.valueOf(null));}\n",
        "public NotImplementedFunctionException(String functionName, Throwable cause) {super(functionName, cause);this.functionName = functionName;}\n",
        "public V next() { return super.nextEntry().value; }\n",
        "public final void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {final int available = bufferLength - bufferPosition;if (len <= available) {if (len > 0) { System.arraycopy(buffer, bufferPosition, b, offset, len);}bufferPosition += len;} else if (available > 0) {System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len < bufferSize) {refill();if (bufferLength < len) {System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException(\"read past EOF: \" + this);} else {System.arraycopy(buffer, 0, b, offset, len);bufferPosition = len;}} else {final long after = bufferStart + bufferPosition + len;if (after > length) {throw new EOFException(\"read past EOF: \" + this);}readInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0; } }\n",
        "public TagQueueResult tagQueue(TagQueueRequest request) {request = beforeClientExecution(request);return executeTagQueue(request);}\n",
        "public void remove() {throw new UnsupportedOperationException();}\n",
        "public CacheSubnetGroup modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheSubnetGroup(request);}\n",
        "public void setParams(String params) {super.setParams(params);culture = \"\";StringTokenizer st = new StringTokenizer(params, \",\");if (st.hasMoreTokens()) {culture = st.nextToken();if (st.hasMoreTokens()) {culture += \"-\" + st.nextToken();}if (st.hasMoreTokens()) {ignore = st.nextToken();}}}\n",
        "public DeleteDocumentationVersionResult deleteDocumentationVersion(DeleteDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationVersion(request);}\n",
        "public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length != other.length) {return false;}for (int i = length - 1; i >= 0; i--) {if (!components[i].equals(other.components[i])) {return false;}}return true;}\n",
        "public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccessDetails(request);}\n",
        "public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}\n",
        "public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}\n",
        "public GetDashboardResult getDashboard(GetDashboardRequest request) {request = beforeClientExecution(request);return executeGetDashboard(request);}\n",
        "public AssociateSigninDelegateGroupsWithAccountResult associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {request = beforeClientExecution(request);return executeAssociateSigninDelegateGroupsWithAccount(request);}\n",
        "public void addMultipleBlanks(MulBlankRecord mbr) {for(int j=0;j<mbr.getNumColumns();j++) {BlankRecord br = new BlankRecord();br.setColumn((short) (j+mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}\n",
        "public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append(\"\\\\Q\");int apos = 0;int k;while ((k = string.indexOf(\"\\\\E\", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append(\"\\\\\\\\E\\\\Q\");apos = k + 2;}return sb.append(string.substring(apos)).append(\"\\\\E\").toString();}\n",
        "public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}\n",
        "public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r = 0; r < nRows; r++) {Object[] rowData = values2d[r];for (int c = 0; c < nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}\n",
        "public GetIceServerConfigResult getIceServerConfig(GetIceServerConfigRequest request) {request = beforeClientExecution(request);return executeGetIceServerConfig(request);}\n",
        "public String toString() {return getClass().getName() + \" [\" + getValueAsString() + \"]\";}\n",
        "public String toString(String field) {return \"ToChildBlockJoinQuery (\"+parentQuery.toString()+\")\";}\n",
        "public final void incRef() {refCount.incrementAndGet();}\n",
        "public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetSendingEnabled(request);}\n",
        "public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}\n",
        "public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}\n",
        "public String toString() {StringBuilder builder = new StringBuilder();final int length = this.length();builder.append(Path.DIRECTORY_SEPARATOR);for(int i=0;i<length;i++) {builder.append(this.getComponent(i));if (i<(length-1)) {builder.append(Path.DIRECTORY_SEPARATOR);}}return builder.toString();}\n",
        "public ECSMetadataServiceCredentialsFetcher withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}\n",
        "public void setProgressMonitor(ProgressMonitor pm) {progressMonitor = pm;}\n",
        "public void reset() {if (!first()) {ptr = 0;nextSubtreePos = 0;currentEntry = null;if (!eof())parseEntry();}}\n",
        "public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}\n",
        "public String getNewPrefix() {return this.newPrefix;}\n",
        "public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}\n",
        "public List<CharsRef> uniqueStems(char word[], int length) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}\n",
        "public GetGatewayResponsesResult getGatewayResponses(GetGatewayResponsesRequest request) {request = beforeClientExecution(request);return executeGetGatewayResponses(request);}\n",
        "public void setPosition(long position) {currentBlockIndex = (int) (position >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (position & blockMask);}\n",
        "public long skip(long n) {long s = (long) Math.min(available(), n);ptr += s;return s;}\n",
        "public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {setBootstrapActionConfig(bootstrapActionConfig);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_row);out.writeShort(field_2_col);out.writeShort(field_3_flags);out.writeShort(field_4_shapeid);out.writeShort(field_6_author.length());out.writeByte(field_5_hasMultibyte ? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putCompressedUnicode(field_6_author, out);}if(field_7_padding != null) {out.writeByte(field_7_padding.intValue());}}\n",
        "public int lastIndexOf(String string) {return lastIndexOf(string, count);}\n",
        "public boolean add(E object) {return addLastImpl(object);}\n",
        "public void unsetSection(String section, String subsection) {ConfigSnapshot src;ConfigSnapshot res;do {src = state.get();res = unsetSection(src, section, subsection);} while (!state.compareAndSet(src, res));}\n",
        "public String getTagName() {return tagName;}\n",
        "public void addSubRecord(int index, SubRecord element){subrecords.add( index, element );}\n",
        "public boolean remove(Object object) {synchronized (mutex) {return delegate().remove(object);}}\n",
        "public DoubleMetaphoneFilter create(TokenStream input) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}\n",
        "public long length() {return inCoreLength();}\n",
        "public void setValue(boolean newValue) {value = newValue;}\n",
        "public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}\n",
        "public int get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}\n",
        "public CreateRepoRequest() {super(\"cr\", \"2016-06-07\", \"CreateRepo\", \"cr\");setUriPattern(\"/repos\");setMethod(MethodType.PUT);}\n",
        "public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}\n",
        "public void remove() {if (expectedModCount == list.modCount) {if (lastLink != null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}\n",
        "public MergeShardsResult mergeShards(MergeShardsRequest request) {request = beforeClientExecution(request);return executeMergeShards(request);}\n",
        "public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {request = beforeClientExecution(request);return executeAllocateHostedConnection(request);}\n",
        "public int getBeginIndex() {return start;}\n",
        "public static final WeightedTerm[] getTerms(Query query) {return getTerms(query, false);}\n",
        "public ByteBuffer compact() {throw new ReadOnlyBufferException();}\n",
        "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}\n",
        "public String getHumanishName() {if (String.empty().equals(getPath()) || getPath() == null)throw new IllegalArgumentException();String s = getPath();String[] elements;if (\"file\".equals(scheme) || LOCAL_FILE.matcher(s).matches()){elements = s.split(\"[\\\\\" + File.separatorChar + \"/]\");}else{elements = s.split(\"/\");}if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result)){result = elements[elements.length - 2];}else{if (result.endsWith(Constants.DOT_GIT_EXT)){result = result.substring(0, result.length()-Constants.DOT_GIT_EXT.length());}}return result;}\n",
        "public DescribeNotebookInstanceLifecycleConfigResult describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeDescribeNotebookInstanceLifecycleConfig(request);}\n",
        "public String getAccessKeySecret() {return accessSecret;}\n",
        "public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}\n",
        "public DescribeVoicesResult describeVoices(DescribeVoicesRequest request) {request = beforeClientExecution(request);return executeDescribeVoices(request);}\n",
        "public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request) {request = beforeClientExecution(request);return executeListMonitoringExecutions(request);}\n",
        "public DescribeJobRequest(String vaultName, String jobId) {setVaultName(vaultName);setJobId(jobId);}\n",
        "public EscherRecord getEscherRecord(int index) {return escherRecords.get(index);}\n",
        "public GetApisResult getApis(GetApisRequest request) {request = beforeClientExecution(request);return executeGetApis(request);}\n",
        "public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) {request = beforeClientExecution(request);return executeDeleteSmsChannel(request);}\n",
        "public TrackingRefUpdate getTrackingRefUpdate() {return trackingRefUpdate;}\n",
        "public void print(boolean b) {print(String.valueOf(b));}\n",
        "public QueryNode getChild() {return getChildren()[0];}\n",
        "public NotIgnoredFilter(int workdirTreeIndex) {this.index = workdirTreeIndex;}\n",
        "public AreaRecord(RecordInputStream in) {field_1_formatFlags = in.readShort();}\n",
        "public GetThumbnailRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetThumbnail\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayVpcAttachments(request);}\n",
        "public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorStreamingConfiguration(request);}\n",
        "public OrdRange getOrdRange(String dim) {OrdRange result = prefixToOrdRange.get(dim);if (result != null) {return result;}return defaultOrdRange;}\n",
        "public String toString() {String symbol = \"\";if ( startIndex >= 0 && startIndex < getInputStream().size() ) {symbol = getInputStream().getText(Interval.of(startIndex, startIndex));symbol = Utils.escapeWhitespace(symbol, false);}return String.format(Locale.ROOT,\"{0}('{1}')\",LexerNoViableAltException.class.getSimpleName(),symbol);}\n",
        "public E peek() {return peekFirstImpl();}\n",
        "public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) {request = beforeClientExecution(request);return executeCreateWorkspaces(request);}\n",
        "public NumberFormatIndexRecord clone() {return copy();}\n",
        "public DescribeRepositoriesResult describeRepositories(DescribeRepositoriesRequest request) {request = beforeClientExecution(request);return executeDescribeRepositories(request);}\n",
        "public SparseIntArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}\n",
        "public TokenStream create(TokenStream input) {return new HyphenatedWordsFilter(input);}\n",
        "public CreateDistributionWithTagsResult createDistributionWithTags(CreateDistributionWithTagsRequest request) {request = beforeClientExecution(request);return executeCreateDistributionWithTags(request);}\n",
        "public RandomAccessFile(String fileName, String mode) throws IOException {this(new File(fileName), mode);}\n",
        "public DeleteWorkspaceImageResult deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeDeleteWorkspaceImage(request);}\n",
        "public static String toHex(int value) {StringBuilder sb = new StringBuilder(8);writeHex(sb, value & 0xFFFFFFFFL, 8, \"\");return sb.toString();}\n",
        "public UpdateDistributionResult updateDistribution(UpdateDistributionRequest request) {request = beforeClientExecution(request);return executeUpdateDistribution(request);}\n",
        "public HSSFColor getColor(short index) {if(index == HSSFColor.Automatic.getIndex())return HSSFColor.Automatic.getInstance();byte[] b = _palette.getColor(index);if(b != null)return new CustomColor(index, b);return null;}\n",
        "public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {throw new NotImplementedFunctionException(_functionName);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_number_crn_records);out.writeShort(field_2_sheet_table_index);}\n",
        "public DescribeDBEngineVersionsResult describeDBEngineVersions() {return describeDBEngineVersions(new DescribeDBEngineVersionsRequest());}\n",
        "public FormatRun(short character, short fontIndex) {this._character = character;this._fontIndex = fontIndex;}\n",
        "public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;for (int i = offset; i < end; ++i) {char ch = chars[i];result[resultIndex++] = (byte) (ch >>> 8);result[resultIndex++] = (byte) ch;}return result;}\n",
        "public UploadArchiveResult uploadArchive(UploadArchiveRequest request) {request = beforeClientExecution(request);return executeUploadArchive(request);}\n",
        "public List<Token> getHiddenTokensToLeft(int tokenIndex) {return getHiddenTokensToLeft(tokenIndex, -1);}\n",
        "public boolean equals(Object obj) {if (this == obj)return true;if (!super.equals(obj))return false;if (getClass() != obj.getClass())return false;AutomatonQuery other = (AutomatonQuery) obj;if (!compiled.equals(other.compiled))return false;if (term == null) {if (other.term != null)return false;} else if (!term.equals(other.term))return false;return true;}\n",
        "public SpanQuery makeSpanClause() {List<SpanQuery> spanQueries = new ArrayList<>();for (Map.Entry<SpanQuery, Float> wsq : weightBySpanQuery.entrySet()) {SpanQuery spq = wsq.getKey();spq.setBoost(wsq.getValue());spanQueries.add(spq);}if (spanQueries.size() == 1)return spanQueries.get(0);elsereturn new SpanOrQuery(spanQueries.toArray(new SpanQuery[spanQueries.size()]));}\n",
        "public StashCreateCommand stashCreate() {return new StashCreateCommand(repo);}\n",
        "public FieldInfo fieldInfo(String fieldName) {return byName.get(fieldName);}\n",
        "public DescribeEventSourceResult describeEventSource(DescribeEventSourceRequest request) {request = beforeClientExecution(request);return executeDescribeEventSource(request);}\n",
        "public GetDocumentAnalysisResult getDocumentAnalysis(GetDocumentAnalysisRequest request) {request = beforeClientExecution(request);return executeGetDocumentAnalysis(request);}\n",
        "public CancelUpdateStackResult cancelUpdateStack(CancelUpdateStackRequest request) {request = beforeClientExecution(request);return executeCancelUpdateStack(request);}\n",
        "public ModifyLoadBalancerAttributesResult modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {request = beforeClientExecution(request);return executeModifyLoadBalancerAttributes(request);}\n",
        "public SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request) {request = beforeClientExecution(request);return executeSetInstanceProtection(request);}\n",
        "public ModifyDBProxyResult modifyDBProxy(ModifyDBProxyRequest request) {request = beforeClientExecution(request);return executeModifyDBProxy(request);}\n",
        "public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];System.arraycopy(outputs, 0, next, 0, count);outputs = next;}if (count == endOffsets.length) {int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.length) {int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {outputs[count] = new CharsRefBuilder();}outputs[count].copyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}\n",
        "public FetchLibrariesRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchLibraries\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public boolean exists() {return objects.exists();}\n",
        "public FilterOutputStream(OutputStream out) {this.out = out;}\n",
        "public ScaleClusterRequest() {super(\"CS\", \"2015-12-15\", \"ScaleCluster\", \"cs\");setUriPattern(\"/clusters/[ClusterId]\");setMethod(MethodType.PUT);}\n",
        "public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);}\n",
        "public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request) {request = beforeClientExecution(request);return executeListObjectParentPaths(request);}\n",
        "public DescribeCacheSubnetGroupsResult describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheSubnetGroups(request);}\n",
        "public void setSharedFormula(boolean flag) {field_5_options = sharedFormula.setShortBoolean(field_5_options, flag);}\n",
        "public boolean isReuseObjects() {return reuseObjects;}\n",
        "public ErrorNode addErrorNode(Token badToken) {ErrorNodeImpl t = new ErrorNodeImpl(badToken);addAnyChild(t);t.setParent(this);return t;}\n",
        "public LatvianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public RemoveSourceIdentifierFromSubscriptionResult removeSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {request = beforeClientExecution(request);return executeRemoveSourceIdentifierFromSubscription(request);}\n",
        "public static TokenFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}\n",
        "public AddAlbumPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"AddAlbumPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public GetThreatIntelSetResult getThreatIntelSet(GetThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeGetThreatIntelSet(request);}\n",
        "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n",
        "public boolean equals( Object o ) {return o instanceof ArmenianStemmer;}\n",
        "public final boolean hasArray() {return protectedHasArray();}\n",
        "public UpdateContributorInsightsResult updateContributorInsights(UpdateContributorInsightsRequest request) {request = beforeClientExecution(request);return executeUpdateContributorInsights(request);}\n",
        "public void unwriteProtectWorkbook() {records.remove(fileShare);records.remove(writeProtect);fileShare = null;writeProtect = null;}\n",
        "public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {super(dedup, analyzer);this.expand = expand;}\n",
        "public RequestSpotInstancesResult requestSpotInstances(RequestSpotInstancesRequest request) {request = beforeClientExecution(request);return executeRequestSpotInstances(request);}\n",
        "public byte[] getObjectData(){return findObjectRecord().getObjectData();}\n",
        "public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {request = beforeClientExecution(request);return executeGetContactAttributes(request);}\n",
        "public String toString() {return getKey() + \": \" + getValue();}\n",
        "public ListTextTranslationJobsResult listTextTranslationJobs(ListTextTranslationJobsRequest request) {request = beforeClientExecution(request);return executeListTextTranslationJobs(request);}\n",
        "public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request) {request = beforeClientExecution(request);return executeGetContactMethods(request);}\n",
        "public static short lookupIndexByName(String name) {FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);if (fd == null) {return -1;}return (short) fd.getIndex();}\n",
        "public DescribeAnomalyDetectorsResult describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {request = beforeClientExecution(request);return executeDescribeAnomalyDetectors(request);}\n",
        "public static String insertId(String message, ObjectId changeId) {return insertId(message, changeId, false);}\n",
        "public long getObjectSize(AnyObjectId objectId, int typeHint)throws MissingObjectException, MissingObjectException, IOException {long sz = db.getObjectSize(this, objectId);if (sz < 0)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);return sz;}\n",
        "public ImportInstallationMediaResult importInstallationMedia(ImportInstallationMediaRequest request) {request = beforeClientExecution(request);return executeImportInstallationMedia(request);}\n",
        "public PutLifecycleEventHookExecutionStatusResult putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {request = beforeClientExecution(request);return executePutLifecycleEventHookExecutionStatus(request);}\n",
        "public NumberPtg(LittleEndianInput in)  {field_1_value = in.readDouble();}\n",
        "public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryptionConfig(request);}\n",
        "public DescribeDetectorResult describeDetector(DescribeDetectorRequest request) {request = beforeClientExecution(request);return executeDescribeDetector(request);}\n",
        "public ReportInstanceStatusResult reportInstanceStatus(ReportInstanceStatusRequest request) {request = beforeClientExecution(request);return executeReportInstanceStatus(request);}\n",
        "public DeleteAlarmResult deleteAlarm(DeleteAlarmRequest request) {request = beforeClientExecution(request);return executeDeleteAlarm(request);}\n",
        "public TokenStream create(TokenStream input) {return new PortugueseStemFilter(input);}\n",
        "public FtCblsSubRecord() {associatedRange = new CellRangeAddress(0, 0, 0, 0);}\n",
        "public boolean remove(Object object) {synchronized (mutex) {return delegate().remove(object);}}\n",
        "public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) {request = beforeClientExecution(request);return executeGetDedicatedIp(request);}\n",
        "public String toString() {return precedence + \" >= _p\";}\n",
        "public ListStreamProcessorsResult listStreamProcessors(ListStreamProcessorsRequest request) {request = beforeClientExecution(request);return executeListStreamProcessors(request);}\n",
        "public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}\n",
        "public WindowProtectRecord(int options) {_options = options;}\n",
        "public UnbufferedCharStream(int bufferSize) {n = 0;data = new int[bufferSize];}\n",
        "public GetOperationsResult getOperations(GetOperationsRequest request) {request = beforeClientExecution(request);return executeGetOperations(request);}\n",
        "public void copyRawTo(int[] b, int o) {b[o] = w1;b[o + 1] = w2;b[o + 2] = w3;b[o + 3] = w4;b[o + 4] = w5;}\n",
        "public WindowOneRecord(RecordInputStream in) {field_1_h_hold          = in.readShort();field_2_v_hold          = in.readShort();field_3_width             = in.readShort();field_4_height            = in.readShort();field_5_options           = in.readShort();field_6_active_sheet    = in.readShort();field_7_first_visible_tab = in.readShort();field_8_num_selected_tabs = in.readShort();field_9_tab_width_ratio    = in.readShort();}\n",
        "public StopWorkspacesResult stopWorkspaces(StopWorkspacesRequest request) {request = beforeClientExecution(request);return executeStopWorkspaces(request);}\n",
        "public void close() throws IOException {if (isOpen) {isOpen = false;try {dump();} finally {try {channel.truncate(fileLength);} finally {try {channel.close();} finally {fos.close();}}}}\n",
        "public DescribeMatchmakingRuleSetsResult describeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmakingRuleSets(request);}\n",
        "public String getPronunciation(int wordId, char surface[], int off, int len) {return null; }\n",
        "public String getPath() {return pathStr;}\n",
        "public static double devsq(double[] v) {double r = Double.NaN;if (v!=null && v.length >= 1) {double m = 0;double s = 0;int n = v.length;for (int i=0; i<n; i++) {s += v[i];}m = s / n;s = 0;for (int i=0; i<n; i++) {s += (v[i] - m) * (v[i] - m);}r = (n == 1)? 0: s;}return r;}\n",
        "public DescribeResizeResult describeResize(DescribeResizeRequest request) {request = beforeClientExecution(request);return executeDescribeResize(request);}\n",
        "public boolean hasPassedThroughNonGreedyDecision() {return passedThroughNonGreedyDecision;}\n",
        "public int end() {return end(0);}\n",
        "public void traverse(CellHandler handler) {int firstRow = range.getFirstRow();int lastRow  = range.getLastRow();int firstColumn = range.getFirstColumn();int lastColumn  = range.getLastColumn();int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();Row currentRow = null;Cell currentCell = null;for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {currentRow = sheet.getRow(ctx.rowNumber);if (currentRow == null) {continue;}for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {currentCell = currentRow.getCell(ctx.colNumber);if (currentCell == null) {continue;}if (isEmpty(currentCell) && !traverseEmptyCells) {continue;}ctx.ordinalNumber =(ctx.rowNumber - firstRow) * width +(ctx.colNumber - firstColumn + 1);handler.onCell(currentCell, ctx);}}}\n",
        "public int getReadIndex() {return _readIndex;}\n",
        "public int compareTo(ScoreTerm other) {if (term.bytesEquals(other.term))return 0; if (this.boost == other.boost)return other.term.compareTo(this.term);elsereturn Float.compare(this.boost, other.boost);}\n",
        "public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE: len = delete(s, i, len);i--;break;default:break;}}return len;}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(_options);}\n",
        "public DiagnosticErrorListener(boolean exactOnly) {this.exactOnly = exactOnly;}\n",
        "public KeySchemaElement(String attributeName, KeyType keyType) {setAttributeName(attributeName);setKeyType(keyType.toString());}\n",
        "public GetAssignmentResult getAssignment(GetAssignmentRequest request) {request = beforeClientExecution(request);return executeGetAssignment(request);}\n",
        "public boolean hasObject(AnyObjectId id) {return findOffset(id) != -1;}\n",
        "public GroupingSearch setAllGroups(boolean allGroups) {this.allGroups = allGroups;return this;}\n",
        "public synchronized void setMultiValued(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.multiValued = v;}\n",
        "public int getCellsVal() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0) {size++;}}return size;}\n",
        "public DeleteVoiceConnectorResult deleteVoiceConnector(DeleteVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnector(request);}\n",
        "public DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLifecyclePolicy(request);}\n",
        "public void write(byte[] b) {int len = b.length;checkPosition(len);System.arraycopy(b, 0, _buf, _writeIndex, len);_writeIndex += len;}\n",
        "public RebaseResult getRebaseResult() {return rebaseResult;}\n",
        "public static int getNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation){for (int t : usableBitSetSizes){int numSetBitsAtDesiredSaturation = (int) (t*desiredSaturation);int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(t, numSetBitsAtDesiredSaturation);if(estimatedNumUniqueValues > maxNumberOfValuesExpected){return t;}}return -1;}\n",
        "public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {request = beforeClientExecution(request);return executeDescribeDashboard(request);}\n",
        "public CreateSegmentResult createSegment(CreateSegmentRequest request) {request = beforeClientExecution(request);return executeCreateSegment(request);}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[DBCELL]\\n\");buffer.append(\"    .rowoffset       = \").append(Integer.toHexString(getRowOffset())).append(\"\\n\");for (short field_2_cell_offset : field_2_cell_offsets) {buffer.append(\"    .cell_\").append(field_2_cell_offset).append(\" = \").append(HexDump.shortToHex(field_2_cell_offset)).append(\"\\n\");}buffer.append(\"[/DBCELL]\\n\");return buffer.toString();}\n",
        "public List<String> getUndeletedList() {return undeletedList;}\n",
        "public String toString() {return \"[INTERFACEEND/]\\n\";}\n",
        "public DBCellRecord clone() {return copy();}\n",
        "public PlainTextDictionary(Reader reader) {in = reader;}\n",
        "public StringBuilder append(CharSequence csq) {if (csq == null) {appendNull();} else {append0(csq, 0, csq.length());}return this;}\n",
        "public ListAssociatedStacksResult listAssociatedStacks(ListAssociatedStacksRequest request) {request = beforeClientExecution(request);return executeListAssociatedStacks(request);}\n",
        "public static double avedev(double[] v) {double r = 0;double m = 0;double s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += v[i];}m = s / v.length;s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += Math.abs(v[i] - m);}r = s / v.length;return r;}\n",
        "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n",
        "public GetDiskResult getDisk(GetDiskRequest request) {request = beforeClientExecution(request);return executeGetDisk(request);}\n",
        "public DBClusterParameterGroup createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBClusterParameterGroup(request);}\n",
        "public static CharBuffer wrap(char[] array, int start, int charCount) {Arrays.checkOffsetAndCount(array.length, start, charCount);CharBuffer buf = new ReadWriteCharArrayBuffer(array);buf.position = start;buf.limit = start + charCount;return buf;}\n",
        "public SubmoduleStatusType getType() {return type;}\n",
        "public DescribeGameServerGroupResult describeGameServerGroup(DescribeGameServerGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGameServerGroup(request);}\n",
        "public Pattern pattern() {return pattern;}\n",
        "@Override public V setValue(V object) {throw new UnsupportedOperationException();}\n",
        "public StringBuilder stem(String word) {String cmd = stemmer.getLastOnPath(word);if (cmd == null)return null;buffer.setLength(0);buffer.append(word);diff.apply(buffer, cmd);if (buffer.length() > 0)return buffer;elsereturn null;}\n",
        "public RenameFaceRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public char requireChar(Map<String,String> args, String name) {return require(args, name).charAt(0);}\n",
        "public static String toStringTree(Tree t) {return toStringTree(t, (List<String>)null);}\n",
        "public String toString() {return \"<deleted/>\";}\n",
        "public GetRepoWebhookLogListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoWebhookLogList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs\");setMethod(MethodType.GET);}\n",
        "public GetJobUnlockCodeResult getJobUnlockCode(GetJobUnlockCodeRequest request) {request = beforeClientExecution(request);return executeGetJobUnlockCode(request);}\n",
        "public RemoveTagsRequest(String resourceId) {setResourceId(resourceId);}\n",
        "public short getGB2312Id(char ch) {try {byte[] buffer = Character.toString(ch).getBytes(\"GB2312\");if (buffer.length != 2) {return -1;}int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1);} catch (UnsupportedEncodingException e) {throw new RuntimeException(e);}}\n",
        "public BatchRefUpdate addCommand(ReceiveCommand... cmd) {return addCommand(Arrays.asList(cmd));}\n",
        "public int checkExternSheet(int sheetNumber){return getOrCreateLinkTable().checkExternSheet(sheetNumber);}\n",
        "@Override public boolean equals(Object object) {return c.equals(object);}\n",
        "public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {AnyQueryNode andNode = (AnyQueryNode) queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = andNode.getChildren();if (children != null) {for (QueryNode child : children) {Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null) {Query query = (Query) obj;try {bQuery.add(query, BooleanClause.Occur.SHOULD);} catch (TooManyClauses ex) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements());return bQuery.build();}\n",
        "public DescribeStreamProcessorResult describeStreamProcessor(DescribeStreamProcessorRequest request) {request = beforeClientExecution(request);return executeDescribeStreamProcessor(request);}\n",
        "public DescribeDashboardPermissionsResult describeDashboardPermissions(DescribeDashboardPermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeDashboardPermissions(request);}\n",
        "public Ref peel(Ref ref) {try {return getRefDatabase().peel(ref);} catch (IOException e) {throw new UncheckedIOException(e);}}\n",
        "public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(blocks);}\n",
        "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}\n",
        "public DescribeStackEventsResult describeStackEvents(DescribeStackEventsRequest request) {request = beforeClientExecution(request);return executeDescribeStackEvents(request);}\n",
        "public void setRule(int idx, ConditionalFormattingRule cfRule){setRule(idx, (HSSFConditionalFormattingRule)cfRule);}\n",
        "public CreateResolverRuleResult createResolverRule(CreateResolverRuleRequest request) {request = beforeClientExecution(request);return executeCreateResolverRule(request);}\n",
        "public SeriesIndexRecord(RecordInputStream in) {field_1_index = in.readShort();}\n",
        "public GetStylesRequest() {super(\"lubancloud\", \"2018-05-09\", \"GetStyles\", \"luban\");setMethod(MethodType.POST);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_gridset_flag);}\n",
        "public boolean equals(Object obj) {if (this == obj)return true;if (obj == null)return false;if (getClass() != obj.getClass())return false;Toffs other = (Toffs) obj;if (getStartOffset() != other.getStartOffset())return false;if (getEndOffset() != other.getEndOffset())return false;return true;}\n",
        "public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeCreateGatewayGroup(request);}\n",
        "public CreateParticipantConnectionResult createParticipantConnection(CreateParticipantConnectionRequest request) {request = beforeClientExecution(request);return executeCreateParticipantConnection(request);}\n",
        "public static double irr(double[] income) {return irr(income, 0.1d);}\n",
        "public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeRegisterWorkspaceDirectory(request);}\n",
        "public RevertCommand include(Ref commit) {checkCallable();commits.add(commit);return this;}\n",
        "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String iNumber = OperandResolver.coerceValueToString(veText1);Matcher m = COMPLEX_NUMBER_PATTERN.matcher(iNumber);boolean result = m.matches();String imaginary = \"\";if (result) {String imaginaryGroup = m.group(5);boolean hasImaginaryPart = imaginaryGroup.equals(\"i\") || imaginaryGroup.equals(\"j\");if (imaginaryGroup.length() == 0) {return new StringEval(String.valueOf(0));}if (hasImaginaryPart) {String sign = \"\";String imaginarySign = m.group(GROUP3_IMAGINARY_SIGN).value();if (imaginarySign.length() != 0 && !(imaginarySign.equals(\"+\"))) {sign = imaginarySign;}String groupImaginaryNumber = m.group(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE).value();if (groupImaginaryNumber.length() != 0) {imaginary = sign + groupImaginaryNumber;} else {imaginary = sign + \"1\";}} else {return ErrorEval.",
        "public E pollLast() {Map.Entry<E, Object> entry = backingMap.pollLastEntry();return (entry == null) ? null : entry.getKey();}\n",
        "public int readUShort() {readUByte();int ch1 = readUByte();int ch2 = readUByte();return (ch2 << 8) + (ch1 << 0);}\n",
        "public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {setSnapshotId(snapshotId);setAttribute(attribute.toString());setOperationType(operationType.toString());}\n",
        "public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {request = beforeClientExecution(request);return executeListBonusPayments(request);}\n",
        "public V get(Object o) {if(o == null)throw new NullPointerException();return null;}\n",
        "public TokenFilter create(TokenStream input) {CommonGramsFilter commonGrams = (CommonGramsFilter)super.create(input);return new CommonGramsQueryFilter(commonGrams);}\n",
        "public String getPath() {return path;}\n",
        "public InitiateMultipartUploadResult initiateMultipartUpload(InitiateMultipartUploadRequest request) {request = beforeClientExecution(request);return executeInitiateMultipartUpload(request);}\n",
        "public StringBuilder insert(int offset, int i) {insert0(offset, Integer.toString(i));return this;}\n",
        "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (int) ((block >>> shift) & 3);}}}\n",
        "public TokenStream create(TokenStream input) {return new ElisionFilter(input, articles);}\n",
        "public boolean eat(Row in, int[] remap) {int sum = 0;for (Cell c : in.cells.values()) {sum += c.cnt;if (c.ref >= 0) {if (remap[c.ref] == 0) {c.ref = -1;}}}int frame = sum / 10;boolean live = false;for (Cell c : in.cells.values()) {if (c.cnt < frame && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.ref >= 0) {live |= true;}}return !live;}\n",
        "final public Token getToken(int index) {Token t = token;for (int i = 0; i < index; i++) {if (t.next != null) t = t.next;else t = t.next = token_source.getNextToken();}return t;}\n",
        "public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(\" [ARRAY]\\n\");sb.append(\" range=\").append(getRange()).append(\"\\n\");sb.append(\" options=\").append(HexDump.shortToHex(_options)).append(\"\\n\");sb.append(\" notUsed=\").append(HexDump.intToHex(_field3notUsed)).append(\"\\n\");sb.append(\" formula:\").append(\"\\n\");Ptg[] ptgs = _formula.getTokens();for (int i=0; i<ptgs.length; i++) {Ptg ptg = ptgs[i];sb.append(ptg).append(ptg.getRVAType()).append(\"\\n\");}sb.append(\"]\");return sb.toString();}\n",
        "public GetFolderResult getFolder(GetFolderRequest request) {request = beforeClientExecution(request);return executeGetFolder(request);}\n",
        "public void add(int location, E object) {throw new UnsupportedOperationException();}\n",
        "public PositiveScoresOnlyCollector(Collector c) {this.c = c;}\n",
        "public CreateRepoBuildRuleRequest() {super(\"cr\", \"2016-06-07\", \"CreateRepoBuildRule\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");setMethod(MethodType.PUT);}\n",
        "public BaseRef(RefEval re) {_refEval = re;_areaEval = null;_firstRowIndex = re.getRow();_firstColumnIndex = re.getColumn();_height = 1;_width = 1;}\n",
        "public DrawingManager2(EscherDggRecord dgg) {this.dgg = dgg;}\n",
        "public void reset() {if (!first()) {reset(raw);}}\n",
        "public final CharsetDecoder reset() {status = INIT;implReset();return this;}\n",
        "public BufferedReader(Reader in, int size) {super(in);if (size <= 0) {throw new IllegalArgumentException(\"size <= 0\");}this.in = in;buf = new char[size];}\n",
        "public DescribeCodeRepositoryResult describeCodeRepository(DescribeCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeDescribeCodeRepository(request);}\n",
        "public DBSubnetGroup createDBSubnetGroup(CreateDBSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBSubnetGroup(request);}\n",
        "public RenameBranchCommand setOldName(String oldName) {checkCallable();this.oldName = oldName;return this;}\n",
        "public DeleteBranchCommand setForce(boolean force) {checkCallable();this.force = force;return this;}\n",
        "public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request) {request = beforeClientExecution(request);return executeStopCompilationJob(request);}\n",
        "public synchronized void incrementSecondaryProgressBy(int diff) {setSecondaryProgress(mSecondaryProgress + diff);}\n",
        "public int[] clear() {return bytesStart = null;}\n",
        "public String getRawPath() {return path;}\n",
        "public GetUserSourceAccountRequest() {super(\"cr\", \"2016-06-07\", \"GetUserSourceAccount\", \"cr\");setUriPattern(\"/users/sourceAccount\");setMethod(MethodType.GET);}\n",
        "public CreateExportJobResult createExportJob(CreateExportJobRequest request) {request = beforeClientExecution(request);return executeCreateExportJob(request);}\n",
        "public CreateDedicatedIpPoolResult createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {request = beforeClientExecution(request);return executeCreateDedicatedIpPool(request);}\n",
        "public boolean equals(Object obj) {if (this == obj) {return true;}if(obj == null) {return false;}if(obj instanceof HSSFCellStyle) {HSSFCellStyle other = (HSSFCellStyle) obj;if(_format == null) {if(other._format != null)return false;} else if (!_format.equals(other._format))return false;if(index != other.index)return false;return true;}return false;}\n",
        "public ReleaseHostsResult releaseHosts(ReleaseHostsRequest request) {request = beforeClientExecution(request);return executeReleaseHosts(request);}\n",
        "@Override public boolean equals(Object object) {if (this == object) {return true;}if (object instanceof Set) {Set<?> s = (Set<?>) object;try {return size() == s.size() && containsAll(s);} catch (NullPointerException e) {return false;} catch (InvalidCastException e) {return false;}}return false;}\n",
        "public void setRefLogMessage(String msg, boolean appendStatus) {if (msg == null && !appendStatus)disableRefLog();else if (msg == null && appendStatus) {refLogMessage = \"\"; refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}}\n",
        "public StreamIDRecord(RecordInputStream in) {idstm = in.readShort();}\n",
        "public RecognizeCarRequest() {super(\"visionai-poc\", \"2020-04-08\", \"RecognizeCar\");setMethod(MethodType.POST);}\n",
        "public final ByteOrder order() {return ByteOrder.nativeOrder();}\n",
        "public int getAffineCount() {return aheadCount;}\n",
        "public boolean isNewFragment() {return false;}\n",
        "public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {request = beforeClientExecution(request);return executeGetCloudFrontOriginAccessIdentityConfig(request);}\n",
        "public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return token == symbol;}\n",
        "public DeleteTransitGatewayResult deleteTransitGateway(DeleteTransitGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGateway(request);}\n",
        "public static double[] grow(double[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Double.BYTES));} elsereturn array;}\n",
        "public CreateTransactionRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"CreateTransaction\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public BatchRefUpdate setRefLogIdent(PersonIdent pi) {refLogIdent = pi;return this;}\n",
        "public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplateData(request);}\n",
        "public ParseInfo(ProfilingATNSimulator atnSimulator) {this.atnSimulator = atnSimulator;}\n",
        "public SimpleQQParser(String qqName, String indexField) {this(new String[] { qqName }, indexField);}\n",
        "public DBCluster promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {request = beforeClientExecution(request);return executePromoteReadReplicaDBCluster(request);}\n",
        "public DescribeCapacityReservationsResult describeCapacityReservations(DescribeCapacityReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeCapacityReservations(request);}\n",
        "public String toString() {return \"IndexSearcher(\" + reader + \"; executor=\" + executor + \")\";}\n",
        "public boolean incrementToken() {return false;}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(main + 1);out.writeShort(subFrom);out.writeShort(subTo);}\n",
        "public void decode(byte[] blocks, int blocksOffset, long[] values,int valuesOffset, int iterations) {if (bitsPerValue > 32) {throw new UnsupportedOperationException(\"Cannot decode \" + bitsPerValue + \"-bits values into an long[]\");}for (int i = 0; i < iterations; ++i) {final long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(block, values, valuesOffset);}}\n",
        "public boolean isExpectedToken(int symbol) {ATN atn = getInterpreter().atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states.get(getState());IntervalSet following = atn.nextTokens(s);if (following.contains(symbol)) {return true;}if (!following.contains(Token.EPSILON)) {return false;}while (ctx != null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {ATNState invokingState = atn.states.get(ctx.invokingState);RuleTransition rt = (RuleTransition)invokingState.transition(0);following = atn.nextTokens(rt.followState);if (following.contains(symbol)) {return true;}ctx = (ParserRuleContext)ctx.parent;}if (following.contains(Token.EPSILON) && symbol == Token.EOF) {return true;}return false;}\n",
        "public UpdateStreamResult updateStream(UpdateStreamRequest request) {request = beforeClientExecution(request);return executeUpdateStream(request);}\n",
        "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;} catch (EvaluationException e) {int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());return new NumberEval(result);}}\n",
        "public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(\" [\");sb.append(_index).append(\" \").append(_name);sb.append(\"]\");return sb.toString();}\n",
        "public ListAssignmentsForHITResult listAssignmentsForHIT(ListAssignmentsForHITRequest request) {request = beforeClientExecution(request);return executeListAssignmentsForHIT(request);}\n",
        "public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {request = beforeClientExecution(request);return executeDeleteAccessControlRule(request);}\n",
        "public Arc<Long> getFirstArc(Arc<Long> arc) {return fst.getFirstArc(arc);}\n",
        "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16) {values[valuesOffset++] = (int) ((block >>> shift) & 65535);}}}\n",
        "public long skip(long charCount) throws IOException {if (charCount < 0) {throw new IllegalArgumentException(\"charCount < 0: \" + charCount);}synchronized (lock) {checkNotClosed();if (charCount == 0) {return 0;}long inSkipped;final int availableFromBuffer = buf.length - pos;if (availableFromBuffer > 0) {final long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0) {pos += charCount;return charCount;}pos += availableFromBuffer;inSkipped = in.skip(requiredFromIn);} else {inSkipped = in.skip(charCount);}return inSkipped + availableFromBuffer;}}\n",
        "public Map<String, Ref> getRefsMap() {return advertisedRefs;}\n",
        "public UpdateApiKeyResult updateApiKey(UpdateApiKeyRequest request) {request = beforeClientExecution(request);return executeUpdateApiKey(request);}\n",
        "public ObjectStream openStream() {final WindowCursor wc = new WindowCursor(db);try (final PackInputStream in = new PackInputStream(pack, objectOffset + headerLength, wc)) {return wc.open(getObjectId(), type).openStream();}final InflaterInputStream in = new InflaterInputStream(in, wc.getInflater(), 8192);return new Filter(type, size, in);}\n",
        "public ArrayList() {array = EmptyArray.OBJECT;}\n",
        "public UpdateDetectorVersionResult updateDetectorVersion(UpdateDetectorVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDetectorVersion(request);}\n",
        "public void resize(){resize(Double.MAX_VALUE);}\n",
        "public RevFlagSet(Collection<RevFlag> s) {this();addAll(s);}\n",
        "@Override public int size() {return BoundedMap.this.size();}\n",
        "public final long getLong() {int newPosition = position + SizeOf.LONG;if (newPosition > limit) {throw new BufferUnderflowException();}long result = Memory.peekLong(backingArray, offset + position, order);position = newPosition;return result;}\n",
        "public StringBuilder insert(int offset, long l) {insert0(offset, Long.toString(l));return this;}\n",
        "public TurkishLowerCaseFilter(TokenStream in) {super(in);}\n",
        "public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}\n",
        "public void addIfNoOverlap(WeightedPhraseInfo wpi) {for (WeightedPhraseInfo existWpi : getPhraseList()) {if (existWpi.isOffsetOverlap(wpi)) {existWpi.getTermsInfos().addAll(wpi.getTermsInfos());return;}}getPhraseList().add(wpi);}\n",
        "public Merger newMerger(Repository db) {return new StrategySimpleTwoWayInCore.InCoreMerger(db);}\n",
        "public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;}\n",
        "public Collection<ParseTree> evaluate(ParseTree t) {return Trees.findAllRuleNodes(t, ruleIndex);}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[CFRULE]\\n\");buffer.append(\"    .condition_type   =\").append(field_1_condition_type).append(\"\\n\");buffer.append(\"    OPTION FLAGS=0x\").append(Integer.toHexString(getOptions())).append(\"\\n\");if(containsFontFormattingBlock()){buffer.append(_fontFormatting.toString()).append(\"\\n\");}if(containsBorderFormattingBlock()){buffer.append(_borderFormatting.toString()).append(\"\\n\");}if(containsPatternFormattingBlock()){buffer.append(_patternFormatting.toString()).append(\"\\n\");}buffer.append(\"    Formula 1 =\").append(Arrays.toString(field_17_formula1.getTokens())).append(\"\\n\");buffer.append(\"    Formula 2 =\").append(Arrays.toString(field_18_formula2.getTokens())).append(\"\\n\");buffer.append(\"[/CFRULE]\\n\");return",
        "public DescribeServiceUpdatesResult describeServiceUpdates(DescribeServiceUpdatesRequest request) {request = beforeClientExecution(request);return executeDescribeServiceUpdates(request);}\n",
        "public String getNameName(int index) {return getNameAt(index).getNameName();}\n",
        "public DescribeLocationsResult describeLocations() {return describeLocations(new DescribeLocationsRequest());}\n",
        "public String toString() {return \"<phraseslop value='\" + getValueString() + \"'>\" + \"\\n\"+ getChild().toString() + \"\\n</phraseslop>\";}\n",
        "public DirCacheEntry getDirCacheEntry() {return currentSubtree == null ? currentEntry : null;}\n",
        "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n",
        "public void trimToSize() {int s = size;if (s == array.length) {return;}if (s == 0) {array = EmptyArray.OBJECT;} else {Object[] newArray = new Object[s];System.arraycopy(array, 0, newArray, 0, s);array = newArray;}modCount++;}\n",
        "public DescribeLocalGatewayVirtualInterfacesResult describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayVirtualInterfaces(request);}\n",
        "public TokenStream create(TokenStream input) {return new RussianLightStemFilter(input);}\n",
        "public int [] toArray(int[] a) {int[] rval;if (a.length == _limit) { System.arraycopy(_array, 0, a, 0, _limit);rval = a;} else {rval = toArray();}return rval;}\n",
        "public BasicSessionCredentials(String accessKeyId, String accessKeySecret,String sessionToken, long roleSessionDurationSeconds) {if (accessKeyId == null) {throw new IllegalArgumentException(\"Access key ID cannot be null.\");}if (accessKeySecret == null) {throw new IllegalArgumentException(\"Access key secret cannot be null.\");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;sessionStartedTimeInMilliSeconds = System.currentTimeMillis();}\n",
        "public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) {if (shortCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, shortCount);position += shortCount;return this;}\n",
        "public ActivateEventSourceResult activateEventSource(ActivateEventSourceRequest request) {request = beforeClientExecution(request);return executeActivateEventSource(request);}\n",
        "public DescribeReceiptRuleSetResult describeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeDescribeReceiptRuleSet(request);}\n",
        "public Filter(String name) {setName(name);}\n",
        "public DoubleBuffer put(double c) {throw new ReadOnlyBufferException();}\n",
        "public CreateTrafficPolicyInstanceResult createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicyInstance(request);}\n",
        "public JapaneseIterationMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKana) {super(input);this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.reset(input);}\n",
        "public void writeLong(long v) {writeInt((int)(v));writeInt((int)(v >> 32));}\n",
        "public FileResolver() {exports = new ConcurrentHashMap<>();exportBase = new ArrayList<>();}\n",
        "public ValueEval getRef3DEval(Ref3DPtg rptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getExternSheetIndex());return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}\n",
        "public DeleteDatasetResult deleteDataset(DeleteDatasetRequest request) {request = beforeClientExecution(request);return executeDeleteDataset(request);}\n",
        "public StartRelationalDatabaseResult startRelationalDatabase(StartRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeStartRelationalDatabase(request);}\n",
        "public DescribeReservedCacheNodesOfferingsResult describeReservedCacheNodesOfferings() {return describeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());}\n",
        "static public double pmt(double r, int nper, double pv, double fv, int type) {return -r * ((pv * Math.pow(1 + r, nper) + fv) / ((1+r*type) * (Math.pow(1 + r, nper) - 1));}\n",
        "public DescribeDocumentVersionsResult describeDocumentVersions(DescribeDocumentVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeDocumentVersions(request);}\n",
        "public ListPublishingDestinationsResult listPublishingDestinations(ListPublishingDestinationsRequest request) {request = beforeClientExecution(request);return executeListPublishingDestinations(request);}\n",
        "public DeleteAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}\n",
        "public static double[] grow(double[] array) {return grow(array, 1 + array.length);}\n",
        "public String outputToString(Object output) {if(!(output instanceof List)) {return outputs.outputToString((T) output);} else {List<T> outputList = (List<T>) output;StringBuilder b = new StringBuilder();b.append('[');for(T t : outputList) {if(t != null) {b.append(\", \");}b.append(outputs.outputToString(t));}b.append(']');return b.toString();}}\n",
        "public void notifyDeleteCell(Cell cell) {_bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell));}\n",
        "public StringBuilder replace(int start, int end, String str) {replace0(start, end, str);return this;}\n",
        "public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolConfiguration(request);}\n",
        "public static double kthSmallest(double[] v, int k) {double r = Double.NaN;int index = k-1; if (v!=null && v.length > index && index >= 0) {Arrays.sort(v);r = v[index];}return r;}\n",
        "public void set(int index, long value) {final int o = index >>> 5;final int b = index & 31;final int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}\n",
        "public String toString() {if (getChildren() == null || getChildren().size() == 0)return \"<boolean operation='and'/>\";StringBuilder sb = new StringBuilder();sb.append(\"<boolean operation='and'>\");for (QueryNode child : getChildren()) {sb.append(\"\\n\");sb.append(child.toString());}sb.append(\"\\n</boolean>\");return sb.toString();}\n",
        "public int sumTokenSizes(int fromIx, int toIx) {int result = 0;for (int i=fromIx; i<toIx; i++) {result += _ptgs[i].getSize();}return result;}\n",
        "public void setReadonly(boolean readonly) {if (this.readonly && !readonly) {throw new IllegalStateException(\"can't alter readonly IntervalSet\");}this.readonly = readonly;}\n",
        "public final void clearConsumingCell(FormulaCellCacheEntry cce) {if (!_consumingCells.remove(cce)) {throw new IllegalStateException(\"Specified formula cell is not consumed by this cell\");}}\n",
        "@Override public List<E> subList(int start, int end) {synchronized (mutex) {return new SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);}}\n",
        "public FileHeader getFileHeader() {return attributes.getFileHeader();}\n",
        "public AttachLoadBalancersResult attachLoadBalancers(AttachLoadBalancersRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancers(request);}\n",
        "public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {setAccountId(accountId);setVaultName(vaultName);setJobParameters(jobParameters);}\n",
        "public String toString() {return \"SPL\";}\n",
        "public ReplaceableAttribute(String name, String value, boolean replace) {setName(name);setValue(value);setReplace(replace);}\n",
        "public final void add(IndexableField field) {fields.add(field);}\n",
        "public DeleteStackSetResult deleteStackSet(DeleteStackSetRequest request) {request = beforeClientExecution(request);return executeDeleteStackSet(request);}\n",
        "public GetRepoBuildRuleListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoBuildRuleList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");setMethod(MethodType.GET);}\n",
        "public SparseArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new Object[initialCapacity];mSize = 0;}\n",
        "public InvokeServiceRequest() {super(\"industry-brain\", \"2018-07-12\", \"InvokeService\");setMethod(MethodType.POST);}\n",
        "public ListAlbumPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ListAlbumPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public boolean hasPrevious() {return link != list.voidLink;}\n",
        "public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteHsmConfiguration(request);}\n",
        "public CreateLoadBalancerRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}\n",
        "public String getUserInfo() {return decode(userInfo);}\n",
        "public TagAttendeeResult tagAttendee(TagAttendeeRequest request) {request = beforeClientExecution(request);return executeTagAttendee(request);}\n",
        "public String getRefName() {return name;}\n",
        "public PhraseWildcardQuery build() {return new PhraseWildcardQuery(field, phraseTerms, slop, maxMultiTermExpansions, segmentOptimizationEnabled);}\n",
        "public boolean isSubTotal(int rowIndex, int columnIndex) {return false;}\n",
        "public DescribeDBProxiesResult describeDBProxies(DescribeDBProxiesRequest request) {request = beforeClientExecution(request);return executeDescribeDBProxies(request);}\n",
        "public GetVoiceConnectorProxyResult getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorProxy(request);}\n",
        "public void fromConfig(Config rc) {setPackedGitOpenFiles(rc.getInt(\"core\", null, \"packedgitopenfiles\", getPackedGitOpenFiles()));setPackedGitLimit(rc.getLong(\"core\", null, \"packedgitlimit\", getPackedGitLimit()));setPackedGitWindowSize(rc.getInt(\"core\", null, \"packedgitwindowsize\", getPackedGitWindowSize()));setPackedGitMMAP(rc.getBoolean(\"core\", null, \"packedgitmmap\", isPackedGitMMAP()));setDeltaBaseCacheLimit(rc.getInt(\"core\", null, \"deltabasecachelimit\", getDeltaBaseCacheLimit()));final long maxMem = Runtime.getRuntime().maxMemory();long sft = rc.getLong(\"core\", null, \"streamfilethreshold\", getStreamFileThreshold());sft = Math.min(sft, maxMem / 4);sft = Math.min(sft, Integer.MAX_VALUE);setStreamFileThreshold((int) sft);}\n",
        "public static Date getJavaDate(double date) {return getJavaDate(date, false);}\n",
        "public StartPersonTrackingResult startPersonTracking(StartPersonTrackingRequest request) {request = beforeClientExecution(request);return executeStartPersonTracking(request);}\n",
        "@Override public int size() {return BoundedMap.this.size();}\n",
        "public GetRouteResult getRoute(GetRouteRequest request) {request = beforeClientExecution(request);return executeGetRoute(request);}\n",
        "public Cluster deleteCluster(DeleteClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCluster(request);}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[MMS]\\n\");buffer.append(\"    .addMenu        = \").append(Integer.toHexString(getAddMenuCount())).append(\"\\n\");buffer.append(\"    .delMenu        = \").append(Integer.toHexString(getDelMenuCount())).append(\"\\n\");buffer.append(\"[/MMS]\\n\");return buffer.toString();}\n",
        "public FileBasedConfig(Config base, File cfgLocation, FS fs) {super(base);configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}\n",
        "public int following(int pos) {if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {throw new IllegalArgumentException(\"offset out of bounds\");} else if (0 == sentenceStarts.length) {text.setIndex(text.getBeginIndex());return DONE;} else if (pos >= sentenceStarts[sentenceStarts.length - 1]) {text.setIndex(text.getEndIndex());currentSentence = sentenceStarts.length - 1;return DONE;} else { currentSentence = (sentenceStarts.length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2);text.setIndex(sentenceStarts[++currentSentence]);return current();}}\n",
        "public UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request) {request = beforeClientExecution(request);return executeUpdateParameterGroup(request);}\n",
        "public SeriesChartGroupIndexRecord clone() {return copy();}\n",
        "public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {if (distErrPct < 0 || distErrPct > 0.5) {throw new IllegalArgumentException(\"distErrPct \" + distErrPct + \" must be between [0 to 0.5]\", \"distErrPct\");}if (distErrPct == 0 || shape instanceof Point) {return 0;}Rectangle bbox = shape.getBoundingBox();Point ctr = bbox.getCenter();double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY());double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y);return diagonalDist * distErrPct;}\n",
        "public int codePointAt(int index) {if (index < 0 || index >= count) {throw indexAndLength(index);}return Character.codePointAt(value, index, count);}\n",
        "public void setPasswordVerifier(int passwordVerifier) {this.passwordVerifier = passwordVerifier;}\n",
        "public ListVaultsRequest(String accountId) {setAccountId(accountId);}\n",
        "public SquashMessageFormatter() {dateFormatter = new GitDateFormatter(Format.DEFAULT);}\n",
        "public GetVideoCoverRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetVideoCover\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public int lastIndexOf(Object object) {int pos = size;Link<E> link = voidLink.previous;if (object != null) {while (link != voidLink) {pos--;if (object.equals(link.data)) {return pos;}link = link.previous;}} else {while (link != voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}}return -1;}\n",
        "public DescribeSpotFleetRequestsResult describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeDescribeSpotFleetRequests(request);}\n",
        "public IndexFacesResult indexFaces(IndexFacesRequest request) {request = beforeClientExecution(request);return executeIndexFaces(request);}\n",
        "public BreakIterator getBreakIterator(int script) {switch (script) {case UScript.Japanese: return cjkBreakIterator.clone();case UScript.Myanmar:if (myanmarAsWords) {return defaultBreakIterator.clone();} else {return myanmarSyllableIterator.clone();}}\n",
        "public String toString() {StringBuilder b = new StringBuilder();b.append(\"[DCONREF]\\n\");b.append(\"    .ref\\n\");b.append(\"        .firstrow   = \").append(firstRow).append(\"\\n\");b.append(\"        .lastrow    = \").append(lastRow).append(\"\\n\");b.append(\"        .firstcol   = \").append(firstCol).append(\"\\n\");b.append(\"        .lastcol    = \").append(lastCol).append(\"\\n\");b.append(\"    .cch            = \").append(charCount).append(\"\\n\");b.append(\"    .stFile\\n\");b.append(\"        .h          = \").append(charType).append(\"\\n\");b.append(\"        .rgb        = \").append(getReadablePath()).append(\"\\n\");b.append(\"[/DCONREF]\\n\");return",
        "public int getPackedGitOpenFiles() {return packedGitOpenFiles;}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FEATURE HEADER]\\n\");buffer.append(\"[/FEATURE HEADER]\\n\");return buffer.toString();}\n",
        "public static byte[] getToUnicodeLE(String string1) {return UTF16LE.getBytes(string1);}\n",
        "public List<String> getFooterLines(String keyName) {return getFooterLines(new FooterKey(keyName));}\n",
        "public void refresh() {super.refresh();rescan();}\n",
        "public float get(int index) {checkIndex(index);return byteBuffer.getFloat(index * SizeOf.FLOAT);}\n",
        "public DeleteDetectorResult deleteDetector(DeleteDetectorRequest request) {request = beforeClientExecution(request);return executeDeleteDetector(request);}\n",
        "public int[] grow() {assert bytesStart != null;return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);}\n",
        "public ListExclusionsResult listExclusions(ListExclusionsRequest request) {request = beforeClientExecution(request);return executeListExclusions(request);}\n",
        "public static SpatialStrategy getSpatialStrategy(int roundNumber) {SpatialStrategy result = spatialStrategyCache.get(Integer.valueOf(roundNumber));if (result == null) {throw new IllegalStateException(\"Strategy should have been init'ed by SpatialDocMaker by now\");}return result;}\n",
        "public DBCluster restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {request = beforeClientExecution(request);return executeRestoreDBClusterToPointInTime(request);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_categoryDataType);out.writeShort(field_2_valuesDataType);out.writeShort(field_3_numCategories);out.writeShort(field_4_numValues);out.writeShort(field_5_bubbleSeriesType);out.writeShort(field_6_numBubbleValues);}\n",
        "public PostAgentProfileResult postAgentProfile(PostAgentProfileRequest request) {request = beforeClientExecution(request);return executePostAgentProfile(request);}\n",
        "public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {if ( getInputStream()!=null ) {TokenSource tokenSource = getInputStream().getTokenSource();if (tokenSource instanceof Lexer) {Lexer lexer = (Lexer)tokenSource;return compileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new UnsupportedOperationException(\"Parser can't discover a lexer to use\");}\n",
        "public DBCluster backtrackDBCluster(BacktrackDBClusterRequest request) {request = beforeClientExecution(request);return executeBacktrackDBCluster(request);}\n",
        "public String getName() {return strategyName;}\n",
        "public void copyTo(byte[] b, int o) {formatHexByte(b, o + 0, w1);formatHexByte(b, o + 8, w2);formatHexByte(b, o + 16, w3);formatHexByte(b, o + 24, w4);formatHexByte(b, o + 32, w5);}\n",
        "public static IntList lineMap(byte[] buf, int ptr, int end) {IntList map = new IntList((end-ptr) / 36);map.fillTo(1, Integer.MIN_VALUE);for (; ptr < end; ptr = nextLF(buf, ptr))map.add(ptr);map.add(end);return map;}\n",
        "public Set<ObjectId> getAdditionalHaves() {return Collections.emptySet();}\n",
        "public long ramBytesUsed() {return TERMS_BASE_RAM_BYTES_USED + (fst!=null ? fst.ramBytesUsed() : 0)+ RamUsageEstimator.shallowSizeOf(scratch.bytes()) + RamUsageEstimator.sizeOf(scratchUTF16.chars());}\n",
        "public String toXml(String tab) {StringBuilder builder = new StringBuilder();builder.append(tab).append(\"<\").append(getRecordName()).append(\">\\n\");for (EscherRecord escherRecord : getEscherRecords()) {builder.append(escherRecord);}builder.append(tab).append(\"</\").append(getRecordName()).append(\">\\n\");return builder.toString();}\n",
        "public TokenStream create(TokenStream input) {return new GalicianMinimalStemFilter(input);}\n",
        "public String toString() {StringBuilder r = new StringBuilder();r.append(\"Commit\");r.append(\"={\\n\");r.append(\"tree \");r.append(treeId != null ? treeId.name() : \"NOT_SET\");r.append(\"\\n\");for (ObjectId p : parentIds) {r.append(\"parent \");r.append(p.name());r.append(\"\\n\");}r.append(\"author \");r.append(author != null ? author.name() : \"NOT_SET\");r.append(\"\\n\");r.append(\"committer \");r.append(committer != null ? committer.name() : \"NOT_SET\");r.append(\"\\n\");if (encoding != null && encoding != UTF_8) {r.append(\"encoding \");r.append(encoding.name());r.append(\"\\n\");}r.append(\"\\n\");r.append(message != null ? message : \"\");r.append(\"}\");return",
        "public IndicNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public CreateOptionGroupResult createOptionGroup(CreateOptionGroupRequest request) {request = beforeClientExecution(request);return executeCreateOptionGroup(request);}\n",
        "public AssociateMemberAccountResult associateMemberAccount(AssociateMemberAccountRequest request) {request = beforeClientExecution(request);return executeAssociateMemberAccount(request);}\n",
        "public void run() {mRefreshProgressRunnable.run();}\n",
        "public SetTerminationProtectionResult setTerminationProtection(SetTerminationProtectionRequest request) {request = beforeClientExecution(request);return executeSetTerminationProtection(request);}\n",
        "public String getErrorHeader(RecognitionException e) {int line = e.getOffendingToken().getLine();int charPositionInLine = e.getOffendingToken().getCharPositionInLine();return \"line \" + line + \":\" + charPositionInLine;}\n",
        "public CharBuffer asReadOnlyBuffer() {CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}\n",
        "public StopSentimentDetectionJobResult stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopSentimentDetectionJob(request);}\n",
        "public ObjectIdSubclassMap<ObjectId> getNewObjectIds() {if (newObjectIds != null)return newObjectIds;return new ObjectIdSubclassMap<>();}\n",
        "public void clear() {hash = hash(new byte[0]);super.clear();}\n",
        "public void reset() throws IOException {synchronized (lock) {checkNotClosed();if (mark == -1) {throw new IOException(\"Invalid mark\");}pos = mark;}}\n",
        "public RefErrorPtg(LittleEndianInput in)  {field_1_reserved = in.readInt();}\n",
        "public SuspendGameServerGroupResult suspendGameServerGroup(SuspendGameServerGroupRequest request) {request = beforeClientExecution(request);return executeSuspendGameServerGroup(request);}\n",
        "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}\n",
        "public GetRepoRequest() {super(\"cr\", \"2016-06-07\", \"GetRepo\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]\");setMethod(MethodType.GET);}\n",
        "public void setDate(Date date) {if (date != null) {setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND));} else {this.date = null;}}\n",
        "public TokenStream create(TokenStream input) {return new GermanMinimalStemFilter(input);}\n",
        "public Object[] toArray() {return a.clone();}\n",
        "public void write(char[] buffer, int offset, int len) {Arrays.checkOffsetAndCount(buffer.length, offset, len);synchronized (lock) {expand(len);System.arraycopy(buffer, offset, this.buf, this.count, len);this.count += len;}}\n",
        "public static final RevFilter after(long ts) {return new After(ts);}\n",
        "public DeleteGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}\n",
        "public DeregisterTransitGatewayMulticastGroupMembersResult deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeDeregisterTransitGatewayMulticastGroupMembers(request);}\n",
        "public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {request = beforeClientExecution(request);return executeBatchDeleteScheduledAction(request);}\n",
        "public CreateAlgorithmResult createAlgorithm(CreateAlgorithmRequest request) {request = beforeClientExecution(request);return executeCreateAlgorithm(request);}\n",
        "public int readUByte() {checkPosition(1);return (_buf[_readIndex++] & 0xFF);}\n",
        "public void setLength(long sz) {setLength((int) sz);}\n",
        "public DescribeScalingProcessTypesResult describeScalingProcessTypes() {return describeScalingProcessTypes(new DescribeScalingProcessTypesRequest());}\n",
        "public ListResourceRecordSetsResult listResourceRecordSets(ListResourceRecordSetsRequest request) {request = beforeClientExecution(request);return executeListResourceRecordSets(request);}\n",
        "public Token recoverInline(Parser recognizer) throws RecognitionException {InputMismatchException e = new InputMismatchException(recognizer);for (ParserRuleContext context = recognizer.getContext(); context != null; context = context.parent) {context.exception = e;}throw new ParseCancellationException(e);}\n",
        "public SetTagsForResourceResult setTagsForResource(SetTagsForResourceRequest request) {request = beforeClientExecution(request);return executeSetTagsForResource(request);}\n",
        "public ModifyStrategyRequest() {super(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\");setMethod(MethodType.POST);}\n",
        "public DescribeVpcEndpointServicesResult describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServices(request);}\n",
        "public EnableLoggingResult enableLogging(EnableLoggingRequest request) {request = beforeClientExecution(request);return executeEnableLogging(request);}\n",
        "@Override public boolean contains(Object value) {return containsValue(value);}\n",
        "public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {super(bookName, firstSheetIdentifier);_lastSheetIdentifier = lastSheetIdentifier;}\n",
        "public DomainMetadataRequest(String domainName) {setDomainName(domainName);}\n",
        "public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal,String[] tokenImageVal){super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));currentToken = currentTokenVal;expectedTokenSequences = expectedTokenSequencesVal;tokenImage = tokenImageVal;}\n",
        "public FetchPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public PrintWriter writer() {return writer;}\n",
        "public NGramTokenizerFactory(Map<String,String> args) {super(args);minGramSize = getInt(args, \"minGramSize\", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = getInt(args, \"maxGramSize\", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);preserveOriginal = getBoolean(args, \"preserveOriginal\", NGramTokenizer.DEFAULT_PRESERVE_ORIGINAL);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public boolean isDirectoryFileConflict() {return dfConflict != null;}\n",
        "public IndonesianStemFilter(TokenStream input, boolean stemDerivational) {super(input);this.stemDerivational = stemDerivational;}\n",
        "public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicy(request);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeInt(fSD);out.writeInt(passwordVerifier);StringUtil.writeUnicodeString(out, title);out.write(securityDescriptor);}\n",
        "public static double floor(double n, double s) {if (n>0 && s<0) {return Double.NaN;}else {return (n == 0 || s == 0) ? 0 : Math.floor(n/s) * s;}}\n",
        "public ByteArrayDataOutput(byte[] bytes, int offset, int len) {reset(bytes, offset, len);}\n",
        "public static List<? extends Tree> getChildren(Tree t) {List<Tree> kids = new ArrayList<Tree>();for (int i = 0; i < t.getChildCount(); i++) {kids.add(t.getChild(i));}return kids;}\n",
        "@Override public void clear() {AbstractBiMap.this.clear();}\n",
        "public RefreshAllRecord(boolean refreshAll) {this(0);setRefreshAll(refreshAll);}\n",
        "public DeleteNamedQueryResult deleteNamedQuery(DeleteNamedQueryRequest request) {request = beforeClientExecution(request);return executeDeleteNamedQuery(request);}\n",
        "public GraphvizFormatter(ConnectionCosts costs) {this.costs = costs;this.bestPathMap = new HashMap<>();sb.append(formatHeader());sb.append(\"  init [style=invis]\\n\");sb.append(\"  init -> 0.0 [label=\\\"\").append(BOS_LABEL).append(\"]\\n\");}\n",
        "public CheckMultiagentRequest() {super(\"visionai-poc\", \"2020-04-08\", \"CheckMultiagent\");setMethod(MethodType.POST);}\n",
        "public ListUserProfilesResult listUserProfiles(ListUserProfilesRequest request) {request = beforeClientExecution(request);return executeListUserProfiles(request);}\n",
        "public CreateRelationalDatabaseFromSnapshotResult createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseFromSnapshot(request);}\n",
        "public StartTaskResult startTask(StartTaskRequest request) {request = beforeClientExecution(request);return executeStartTask(request);}\n",
        "public Set<String> getIgnoredPaths() {return ignoredPaths;}\n",
        "public FeatSmartTag(RecordInputStream in) {data = in.readRemainder();}\n",
        "public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {setAction(action.toString());setResourceRecordSet(resourceRecordSet);}\n",
        "public DeleteImageResult deleteImage(DeleteImageRequest request) {request = beforeClientExecution(request);return executeDeleteImage(request);}\n",
        "public CreateConfigurationSetResult createConfigurationSet(CreateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSet(request);}\n",
        "@Override public Iterator<E> iterator() {return listIterator(0);}\n",
        "public void visitContainedRecords(RecordVisitor rv) {if (_recs.isEmpty()) {return;}rv.visitRecord(_bofRec);for (int i = 0; i < _recs.size(); i++) {RecordBase rb = _recs.get(i);if (rb instanceof RecordAggregate) {((RecordAggregate) rb).visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) rb);}}rv.visitRecord(EOFRecord.instance);}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FtCbls ]\").append(\"\\n\");buffer.append(\"  size     = \").append(getDataSize()).append(\"\\n\");buffer.append(\"  reserved = \").append(HexDump.toHex(reserved)).append(\"\\n\");buffer.append(\"[/FtCbls ]\").append(\"\\n\");return buffer.toString();}\n",
        "public static BATBlock createEmptyBATBlock(POIFSBigBlockSize bigBlockSize, boolean isXBAT) {BATBlock block = new BATBlock(bigBlockSize);if(isXBAT) {block.setXBATChain(bigBlockSize, POIFSConstants.END_OF_CHAIN);}return block;}\n",
        "public void tagResource(TagResourceRequest request) {request = beforeClientExecution(request);executeTagResource(request);}\n",
        "public DeleteMailboxPermissionsResult deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executeDeleteMailboxPermissions(request);}\n",
        "public ListDatasetGroupsResult listDatasetGroups(ListDatasetGroupsRequest request) {request = beforeClientExecution(request);return executeListDatasetGroups(request);}\n",
        "public ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request) {request = beforeClientExecution(request);return executeResumeProcesses(request);}\n",
        "public GetPersonTrackingResult getPersonTracking(GetPersonTrackingRequest request) {request = beforeClientExecution(request);return executeGetPersonTracking(request);}\n",
        "public String toFormulaString(String[] operands) {if(space.isSet(_options)) {return operands[0];} else if(optiIf.isSet(_options)) {return toFormulaString() + \"(\" + operands[0] + \")\";} else if(optiSkip.isSet(_options)) {return toFormulaString() + operands[0];   } else {return toFormulaString() + \"(\" + operands[0] + \")\";}}\n",
        "public T merge(T first, T second) {throw new UnsupportedOperationException();}\n",
        "public String toString() {return this.message.getKey() + \": \" + getLocalizedMessage();}\n",
        "public XPath(Parser parser, String path) {this.parser = parser;this.path = path;elements = split(path);}\n",
        "public CreateAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}\n",
        "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}\n",
        "public PushConnection openPush() throws NotSupportedException {throw new NotSupportedException(JGitText.get().pushIsNotSupportedForBundleTransport);}\n",
        "public static void strcmp(char[] dst, int di, char[] src, int si) {while (src[si] != 0) {dst[di++] = src[si++];}dst[di] = 0;}\n",
        "@Override public K getKey() {return mapEntry.getKey();}\n",
        "public static int numNonnull(Object[] data) {int n = 0;if (data == null) {return n;}for (Object o : data) {if (o != null) {n++;}}return n;}\n",
        "public void add(int location, E object) {if (location >= 0 && location <= size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}Link<E> previous = link.previous;Link<E> newLink = new Link<E>(object,previous, link);previous.next = newLink;link.previous = newLink;size++;modCount++;} else {throw new IndexOutOfBoundsException();}}\n",
        "public DomainDetail describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}\n",
        "public void flush() throws IOException {drain();output.flush();}\n",
        "public PersianCharFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public boolean incrementToken() {if (used) {return false;}clearAttributes();termAttribute.append(value);offsetAttribute.setOffset(0, value.length());used = true;return true;}\n",
        "public static FloatBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteFloatArrayBuffer(capacity);}\n",
        "public final Edit after(Edit cut) {return new Edit(cut.endA, endA, cut.endB, endB);}\n",
        "public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request) {request = beforeClientExecution(request);return executeUpdateRuleVersion(request);}\n",
        "public ListVoiceConnectorTerminationCredentialsResult listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectorTerminationCredentials(request);}\n",
        "public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {request = beforeClientExecution(request);return executeGetDeploymentTarget(request);}\n",
        "public void setNoChildReport() {letChildReport = false;for (PerfTask task : tasks) {if (task instanceof TaskSequence) {((TaskSequence)task).setNoChildReport();}}}\n",
        "@Override public E get(int location) {try {return a[location];} catch (IndexOutOfBoundsException e) {throw IndexOutOfBoundsException(location, a.length);}}\n",
        "public DescribeDataSetResult describeDataSet(DescribeDataSetRequest request) {request = beforeClientExecution(request);return executeDescribeDataSet(request);}\n",
        "public SkipWorkTreeFilter(int treeIdx) {this.treeIdx = treeIdx;}\n",
        "public DescribeNetworkInterfacesResult describeNetworkInterfaces() {return describeNetworkInterfaces(new DescribeNetworkInterfacesRequest());}\n",
        "public final boolean contains(int row, int col) {return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col;}\n",
        "public String toString() {return new String(this.chars);}\n",
        "public PatchType getPatchType() {return patchType;}\n",
        "@Override public Iterator<K> iterator() {final Iterator<Entry<K, V>> iterator = filteredEntrySet.iterator();return new UnmodifiableIterator<K>() {\n",
        "public CreateScriptResult createScript(CreateScriptRequest request) {request = beforeClientExecution(request);return executeCreateScript(request);}\n",
        "public BytesRef next() {termUpto++;if (termUpto >= info.terms.size()) {return null;} else {info.terms.get(info.sortedTerms[termUpto], br);return br;}}\n",
        "public String outputToString(CharsRef output) {return output.toString();}\n",
        "public AssociateWebsiteAuthorizationProviderResult associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {request = beforeClientExecution(request);return executeAssociateWebsiteAuthorizationProvider(request);}\n",
        "public void unpop(RevCommit c) {Block b = head;if (b == null) {b = free.newBlock();b.resetToMiddle();b.add(c);head = b;tail = b;return;} else if (b.canUnpop())b.unpop(c);b = free.newBlock();b.resetToEnd();b.unpop(c);b.next = head;head = b;}\n",
        "public EdgeNGramTokenizerFactory(Map<String,String> args) {super(args);minGramSize = requireInt(args, \"minGramSize\");maxGramSize = requireInt(args, \"maxGramSize\");preserveOriginal = getBoolean(args, \"preserveOriginal\", EdgeNGramTokenizer.DEFAULT_PRESERVE_ORIGINAL);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public ModifyDBParameterGroupRequest(String dBParameterGroupName, java.util.List<Parameter> parameters) {setDBParameterGroupName(dBParameterGroupName);setParameters(parameters);}\n",
        "public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) {request = beforeClientExecution(request);return executeGetHostedZoneLimit(request);}\n",
        "public void set(int index, long value) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}\n",
        "public RevFilter clone() {return new PatternSearch(pattern());}\n",
        "public String toString() {return \"spans(\" + term.toString() + \")@\" + (doc == -1 ? \"START\" : (doc == Integer.MAX_VALUE) ? \"END\" : doc + \"-\" + position);}\n",
        "public boolean canAppendMatch() {for (int i = 0; i < heads.size(); i++)if (heads.get(i) != LastHead.INSTANCE)return true;return false;}\n",
        "public synchronized int lastIndexOf(String subString, int start) {return super.lastIndexOf(subString, start);}\n",
        "public DeleteNetworkAclEntryResult deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkAclEntry(request);}\n",
        "public AssociateMemberToGroupResult associateMemberToGroup(AssociateMemberToGroupRequest request) {request = beforeClientExecution(request);return executeAssociateMemberToGroup(request);}\n",
        "public static final int committer(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; if (ptr < sz && b[ptr] == 'a')ptr = nextLF(b, ptr);return match(b, ptr, committer);}\n",
        "public int getLineNumber() {return row;}\n",
        "public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}\n",
        "public GetPushTemplateResult getPushTemplate(GetPushTemplateRequest request) {request = beforeClientExecution(request);return executeGetPushTemplate(request);}\n",
        "public DescribeVaultResult describeVault(DescribeVaultRequest request) {request = beforeClientExecution(request);return executeDescribeVault(request);}\n",
        "public DescribeVpcPeeringConnectionsResult describeVpcPeeringConnections() {return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());}\n",
        "public ByteBuffer putLong(int index, long value) {throw new ReadOnlyBufferException();}\n",
        "public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) {request = beforeClientExecution(request);return executeRegisterDevice(request);}\n",
        "public static Format byId(int id) {for (Format format : values()) {if (format.getId() == id) {return format;}}throw new IllegalArgumentException(\"Unknown format id: \" + id);}\n",
        "public DeleteAppResult deleteApp(DeleteAppRequest request) {request = beforeClientExecution(request);return executeDeleteApp(request);}\n",
        "public GetBaiduChannelResult getBaiduChannel(GetBaiduChannelRequest request) {request = beforeClientExecution(request);return executeGetBaiduChannel(request);}\n",
        "public BytesReader getBytesReader() {return fst.getBytesReader();}\n",
        "public static boolean isValidSchemeChar(int index, char c) {if ((c >= 'a' && c <= 'z')|| (c >= 'A' && c <= 'Z')) {return true;}if (index > 0 && ((c >= '0' && c <= '9')|| c == '+' || c == '-' || c == '.')) {return true;}return false;}\n",
        "public ListAppliedSchemaArnsResult listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListAppliedSchemaArns(request);}\n",
        "public Long contentLength() {return this.contentLength;}\n",
        "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length < 1) {return ErrorEval.VALUE_INVALID;}boolean isA1style;String text;try {ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());text = OperandResolver.coerceValueToString(ve);switch (args.length) {case 1:isA1style = true;break;case 2:isA1style = evaluateBooleanArg(args[1], ec);break;default:return ErrorEval.VALUE_INVALID;}return evaluateIndirect(ec, text, isA1style);} catch (EvaluationException e) {return e.getErrorEval();}}\n",
        "public final int compareTo(int[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, bs[p]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, bs[p + 1]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, bs[p + 2]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, bs[p + 3]);if (cmp != 0)return cmp;return NB.compareUInt32(w5, bs[p + 4]);}\n",
        "public void removeName(Name name) {int index = getNameIndex((HSSFName) name);removeName(index);}\n",
        "public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {setQueueUrl(queueUrl);setAttributeNames(attributeNames);}\n",
        "public static boolean[] copyOf(boolean[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}\n",
        "public static void setEnabled(boolean enabled) {ENABLED = enabled;}\n",
        "public DeleteLogPatternResult deleteLogPattern(DeleteLogPatternRequest request) {request = beforeClientExecution(request);return executeDeleteLogPattern(request);}\n",
        "public boolean contains(char[] text, int off, int len) {return map.containsKey(text, off, len);}\n",
        "public int getFirstSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber);}\n",
        "public boolean handles(String commandLine) {return command.length()+1 < commandLine.length() && commandLine.charAt(command.length()) == ' ' && commandLine.startsWith(command);}\n",
        "public static void register(MergeStrategy imp) {register(imp.getName(), imp);}\n",
        "public long ramBytesUsed() {long sizeInBytes = 0;for(FieldIndexData entry : fields.values()) {sizeInBytes += entry.ramBytesUsed();}return sizeInBytes;}\n",
        "public HostedZone(String id, String name, String callerReference) {setId(id);setName(name);setCallerReference(callerReference);}\n",
        "public GetFindingsResult getFindings(GetFindingsRequest request) {request = beforeClientExecution(request);return executeGetFindings(request);}\n",
        "public DescribeTopicsDetectionJobResult describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeTopicsDetectionJob(request);}\n",
        "public boolean processMatch(ValueEval eval) {if(eval instanceof NumericValueEval) {if(minimumValue == null) { minimumValue = eval;}else { double currentValue = ((NumericValueEval)eval).getNumberValue();double oldValue = ((NumericValueEval)minimumValue).getNumberValue();if(currentValue < oldValue) {minimumValue = eval;}}}return true;}\n",
        "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_len_ref_subexpression);}\n",
        "public static int main(String[] args) throws Exception {boolean printTree = false;String path = null;for (int i = 0; i < args.length; i++) {if (args[i].equals(\"-printTree\")) {printTree = true;}else {path = args[i];}}if (args.length != (printTree ? 2 : 1)) {usage();System.exit(1);}Directory dir = FSDirectory.open(Paths.get(path));try (TaxonomyReader r = new DirectoryTaxonomyReader(dir)) {printStats(r, System.out, printTree);}}return 0;}\n",
        "public void setByteValue(byte value) {if (!(fieldsData instanceof Byte)) {throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to Byte\");}fieldsData = Byte.valueOf(value);}\n",
        "public static int initialize() {return initialize(DEFAULT_SEED);}\n",
        "public CachingDoubleValueSource(ValueSource source) {this.source = source;cache = new HashMap<>();}\n",
        "public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {setAttributeName(attributeName);setAttributeType(attributeType.toString());}\n",
        "public static String join(Collection<String> parts, String separator) {return StringUtils.join(parts, separator, separator);}\n",
        "public ListTaskDefinitionFamiliesResult listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {request = beforeClientExecution(request);return executeListTaskDefinitionFamilies(request);}\n",
        "public ListComponentsResult listComponents(ListComponentsRequest request) {request = beforeClientExecution(request);return executeListComponents(request);}\n",
        "public ActivatePhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ActivatePhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public CreateMatchmakingRuleSetResult createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {request = beforeClientExecution(request);return executeCreateMatchmakingRuleSet(request);}\n",
        "public ListAvailableManagementCidrRangesResult listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {request = beforeClientExecution(request);return executeListAvailableManagementCidrRanges(request);}\n",
        "public ObjectIdSubclassMap<ObjectId> getBaseObjectIds() {if (baseObjectIds != null)return baseObjectIds;return new ObjectIdSubclassMap<>();}\n",
        "public DeletePushTemplateResult deletePushTemplate(DeletePushTemplateRequest request) {request = beforeClientExecution(request);return executeDeletePushTemplate(request);}\n",
        "public CreateDomainEntryResult createDomainEntry(CreateDomainEntryRequest request) {request = beforeClientExecution(request);return executeCreateDomainEntry(request);}\n",
        "public static int getEncodedSize(final Array values) {int result = values.length * 1;for (int i = 0; i < values.length; i++) {result += getEncodedSize(values.getValue(i));}return result;}\n",
        "public OpenNLPTokenizerFactory(Map<String,String> args) {super(args);sentenceModelFile = require(args, SENTENCE_MODEL);tokenizerModelFile = require(args, TOKENIZER_MODEL);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public final int getInt(int index) {checkIndex(index, SizeOf.INT);return Memory.peekInt(backingArray, offset + index, order);}\n",
        "public List<Head> getNextHeads(char c) {if (matches(c)) {return newHeads;}return FileNameMatcher.EMPTY_HEAD_LIST;}\n",
        "public ByteBuffer putShort(short value) {throw new ReadOnlyBufferException();}\n",
        "public void writeUnshared(Object object) throws IOException {checkWritePrimitiveTypes();primitiveTypes.writeUnshared(object);}\n",
        "public int offsetByCodePoints(int index, int codePointOffset) {return Character.offsetByCodePoints(value, 0, count, index, codePointOffset);}\n",
        "public static int getUniqueAlt(Collection<BitSet> altsets) {BitSet all = getAlts(altsets);if ( all.cardinality()==1 ) return all.nextSetBit(0);return ATN.INVALID_ALT_NUMBER;}\n",
        "public Date getWhen() {return new Date(when);}\n",
        "public RuleTagToken(String ruleName, int bypassTokenType, String label) {if (ruleName.isEmpty()) {throw new IllegalArgumentException(\"ruleName cannot be null or empty.\");}this.ruleName = ruleName;this.bypassTokenType = bypassTokenType;this.label = label;}\n",
        "public DisableOrganizationAdminAccountResult disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {request = beforeClientExecution(request);return executeDisableOrganizationAdminAccount(request);}\n",
        "public CreateRoomResult createRoom(CreateRoomRequest request) {request = beforeClientExecution(request);return executeCreateRoom(request);}\n",
        "public ReplicationGroup deleteReplicationGroup(DeleteReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDeleteReplicationGroup(request);}\n",
        "public final CharBuffer decode(ByteBuffer buffer) {try {return newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).decode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}\n",
        "public Distribution(String id, String status, String domainName) {setId(id);setStatus(status);setDomainName(domainName);}\n",
        "public final char[] array() {return protectedArray();}\n",
        "public DateWindow1904Record(RecordInputStream in) {field_1_window = in.readShort();}\n",
        "public DeleteDBSnapshotRequest(String dBSnapshotIdentifier) {setDBSnapshotIdentifier(dBSnapshotIdentifier);}\n",
        "public ParserExtension getExtension(String key) {return this.extensions.get(key);}\n",
        "public void inform(ResourceLoader loader) {try {if (chunkerModelFile != null) {OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader);}} catch (IOException e) {throw new IllegalArgumentException(e);}}\n",
        "public CompleteVaultLockResult completeVaultLock(CompleteVaultLockRequest request) {request = beforeClientExecution(request);return executeCompleteVaultLock(request);}\n",
        "public int[] getCharIntervals() {return _points.clone();}\n",
        "public long ramBytesUsed() {return docs.ramBytesUsed()+ RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES+ 2 + Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}\n",
        "public RegisterInstancesWithLoadBalancerResult registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {request = beforeClientExecution(request);return executeRegisterInstancesWithLoadBalancer(request);}\n",
        "public DescribeClusterUserKubeconfigRequest() {super(\"CS\", \"2015-12-15\", \"DescribeClusterUserKubeconfig\", \"cs\");setUriPattern(\"/k8s/[ClusterId]/user_config\");setMethod(MethodType.GET);}\n",
        "public PrecisionRecord(RecordInputStream in) {field_1_precision = in.readShort();}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(getLeftRowGutter());out.writeShort(getTopColGutter());out.writeShort(getRowLevelMax());out.writeShort(getColLevelMax());}\n",
        "public DeleteVirtualInterfaceResult deleteVirtualInterface(DeleteVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeDeleteVirtualInterface(request);}\n",
        "public Entry getEntry(String name) throws IOException {if (excludes.contains(name)) {throw new FileNotFoundException(name);}Entry entry = directory.getEntry(name);return wrapEntry(entry);}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[BACKUP]\\n\");buffer.append(\"    .backup          = \").append(Integer.toHexString(getBackup())).append(\"\\n\");buffer.append(\"[/BACKUP]\\n\");return buffer.toString();}\n",
        "public DeleteVoiceConnectorOriginationResult deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorOrigination(request);}\n",
        "public Appendable append(char c) {write(c);return this;}\n",
        "public static long generationFromSegmentsFileName(String fileName) {if (fileName.equals(IndexFileNames.SEGMENTS)) {return 0;} else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {return Long.parseLong(fileName.substring(1+IndexFileNames.SEGMENTS.length()), Character.MAX_RADIX);} else {throw new IllegalArgumentException(\"fileName \\\"\" + fileName + \"\\\" is not a segments file\");}}\n",
        "public static TagOpt fromOption(String o) {if (o == null || o.length() == 0)return AUTO_FOLLOW;for (TagOpt tagopt : values()) {if (tagopt.option().equals(o))return tagopt;}throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTagOption,o));}\n",
        "public StartContentModerationResult startContentModeration(StartContentModerationRequest request) {request = beforeClientExecution(request);return executeStartContentModeration(request);}\n",
        "public static String quoteReplacement(String s) {StringBuilder result = new StringBuilder(s.length());for (int i = 0; i < s.length(); i++) {char c = s.charAt(i);if (c == '\\\\' || c == '$') {result.append('\\\\');}result.append(c);}return result.toString();}\n",
        "public final void set(V newValue) {unsafe.putOrderedObject(this, valueOffset, newValue);}\n",
        "public QueryParserTokenManager(CharStream stream){initBlock();input_stream = stream;}\n",
        "public long valueFor(double elapsed) {double val;if (modBy == 0) {val = elapsed / factor;} else {val = elapsed / factor % modBy;}if (type == '0') {return (long) Math.round(val);}elsereturn (long) val;}\n",
        "public LongBuffer get(long[] dst, int dstOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount);}this.position += longCount;return this;}\n",
        "public void removeErrorListeners() {_listeners = new ErrorListener[0];}\n",
        "public CommonTokenStream(TokenSource tokenSource, int channel) {this(tokenSource);this.channel = channel;}\n",
        "public ListObjectPoliciesResult listObjectPolicies(ListObjectPoliciesRequest request) {request = beforeClientExecution(request);return executeListObjectPolicies(request);}\n",
        "public ObjectToPack(AnyObjectId src, int type) {super(src);flags = type << TYPE_SHIFT;}\n",
        "public int stem(char s[], int len) {final int numVowels = numVowels(s, len);for (int i = 0; i < affixes.length; i++) {final Affix affix = affixes[i];if (numVowels > affix.vc && len >= affix.affix.length + 3 && endsWith(s, len, affix.affix)) {len -= affix.affix.length;return affix.palatalizes ? unpalatalize(s, len) : len;}}return len;}\n",
        "public void recover(Parser recognizer, RecognitionException e) {if ( lastErrorIndex == recognizer.getInputStream().getIndex() && lastErrorStates!=null && lastErrorStates.contains(recognizer.getState()) ) {recognizer.consume();}lastErrorIndex = recognizer.getInputStream().getIndex();if ( lastErrorStates == null ) {lastErrorStates = new IntervalSet();}lastErrorStates.add(recognizer.getState());IntervalSet followSet = getErrorRecoverySet(recognizer);consumeUntil(recognizer, followSet);}\n",
        "public String toFormulaString() {String value = field_3_string;int len = value.length();StringBuilder sb = new StringBuilder(len + 4);sb.append(FORMULA_DELIMITER);for (int i = 0; i < len; i++) {char c = value.charAt(i);if (c == FORMULA_DELIMITER) {sb.append(FORMULA_DELIMITER);}sb.append(c);}sb.append(FORMULA_DELIMITER);return sb.toString();}\n",
        "public UnlinkFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"UnlinkFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}\n",
        "public ConfigurationOptionSetting(String awsNamespace, String optionName, String value) {setAWSNamespace(awsNamespace);setOptionName(optionName);setValue(value);}\n",
        "public String getFully(String key) {StringBuilder result = new StringBuilder(tries.size() * 2);for (int i = 0; i < tries.size(); i++) {String r = tries.get(i).getFully(key);if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) {return result;}result.append(r);}return result;}\n",
        "public DescribeMountTargetSecurityGroupsResult describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeMountTargetSecurityGroups(request);}\n",
        "public GetApiMappingResult getApiMapping(GetApiMappingRequest request) {request = beforeClientExecution(request);return executeGetApiMapping(request);}\n",
        "public HttpRequest(String strUrl) {super(strUrl);}\n",
        "public MemFuncPtg(int subExprLen) {field_1_len_ref_subexpression = subExprLen;}\n",
        "public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws IOException {TermStatsQueue tiq = null;if (field != null) {Fields fields = MultiFields.getFields(reader);if (fields == null) {throw new RuntimeException(\"field \" + field + \" not found\");}Terms terms = fields.getTerms(field);if (terms != null) {TermsEnum termsEnum = terms.iterator();tiq = new TermStatsQueue(numTerms, comparator);tiq.fill(field, termsEnum);}} else {Fields fields = MultiFields.getFields(reader);if (fields == null) {throw new RuntimeException(\"no fields found for this index\");}tiq = new TermStatsQueue(numTerms, comparator);for (String fieldName : fields.getTermsNames()) {Terms terms = fields.getTerms(fieldName);if (terms != null) {tiq.fill(fieldName, terms.iterator());}}}TermStats[] result = new TermStats[tiq.size()];int count = tiq.size() - 1;while (tiq.size() != 0) {result[count] = tiq.pop();count--;}return result;}\n",
        "public DeleteApnsVoipChannelResult deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsVoipChannel(request);}\n",
        "public ListFacesResult listFaces(ListFacesRequest request) {request = beforeClientExecution(request);return executeListFaces(request);}\n",
        "public ShapeFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {this.ctx = ctx;this.from = from;this.provider = provider;this.multiplier = multiplier;this.nullValue = 180 * multiplier;}\n",
        "public char get(int index) {checkIndex(index);return sequence.charAt(index);}\n",
        "public UpdateConfigurationProfileResult updateConfigurationProfile(UpdateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationProfile(request);}\n",
        "public DescribeLifecycleHooksResult describeLifecycleHooks(DescribeLifecycleHooksRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleHooks(request);}\n",
        "public DescribeHostReservationsResult describeHostReservations(DescribeHostReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeHostReservations(request);}\n",
        "public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {if (outerContext == null)outerContext = ParserRuleContext.EMPTY;if (outerContext.getParent() == null || outerContext == ParserRuleContext.EMPTY)return PredictionContext.EMPTY;PredictionContext parent = PredictionContext.fromRuleContext(atn, outerContext.getParent());ATNState state = atn.states.get(outerContext.invokingState);RuleTransition transition = (RuleTransition)state.transition(0);return parent.getChild(transition.followState.stateNumber);}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SXVDEX]\\n\");buffer.append(\"    .grbit1 =\").append(HexDump.intToHex(grbit1)).append(\"\\n\");buffer.append(\"    .grbit2 =\").append(HexDump.byteToHex(grbit2)).append(\"\\n\");buffer.append(\"    .citmShow =\").append(HexDump.byteToHex(citmShow)).append(\"\\n\");buffer.append(\"    .isxdiSort =\").append(HexDump.shortToHex(isxdiSort)).append(\"\\n\");buffer.append(\"    .isxdiShow =\").append(HexDump.shortToHex(isxdiShow)).append(\"\\n\");buffer.append(\"    .subName =\").append(subName).append(\"\\n\");buffer.append(\"[/SXVDEX]\\n\");return buffer.toString();}\n",
        "public String toString() {StringBuilder r = new StringBuilder();r.append(\"BlameResult: \");r.append(getResultPath());return r.toString();}\n",
        "public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request) {request = beforeClientExecution(request);return executeListChangeSets(request);}\n",
        "public boolean isAllowNonFastForwards() {return allowNonFastForwards;}\n",
        "public FeatRecord() {futureHeader = new FtrHeader();futureHeader.setRecordType(sid);}\n",
        "public ShortBuffer put(ShortBuffer buf) {throw new ReadOnlyBufferException();}\n",
        "public void setQuery(String query) {this.query = query;this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, \"\");}\n",
        "public StashApplyCommand stashApply() {return new StashApplyCommand(repo);}\n",
        "public Set<Long> nameSet() {return Collections.unmodifiableSet(dictionary.keySet());}\n",
        "public static int getEffectivePort(String scheme, int specifiedPort) {if (specifiedPort != -1) {return specifiedPort;}if (scheme.equalsIgnoreCase(\"http\")) {return 80;} else if (scheme.equalsIgnoreCase(\"https\")) {return 443;} else {return -1;}}\n",
        "public ListAssessmentTemplatesResult listAssessmentTemplates(ListAssessmentTemplatesRequest request) {request = beforeClientExecution(request);return executeListAssessmentTemplates(request);}\n",
        "public Snapshot restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreFromClusterSnapshot(request);}\n",
        "public void addShape(HSSFShape shape) {shape.setParent(this);shapes.add(shape);}\n",
        "public boolean equals(Object o) {if (this == o) {return true;}if (o == null || getClass() != o.getClass()) {return false;}FacetEntry that = (FacetEntry) o;if (count != that.count) {return false;}if (!value.equals(that.value)) {return false;}return true;}\n",
        "public static final int prev(byte[] b, int ptr, char chrA) {if (ptr == b.length)--ptr;while (ptr >= 0) {if (b[ptr--] == chrA)return ptr;}return ptr;}\n",
        "public boolean isDeltaRepresentation() {return deltaBase != null;}\n",
        "public Token emitEOF() {int cpos = getColumn();int line = getLine();Token eof = _factory.create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _input.index()-1, line, cpos);emit(eof);return eof;}\n",
        "public UpdateUserRequest(String userName) {setUserName(userName);}\n",
        "public RevFilter negate() {return NotRevFilter.create(this);}\n",
        "public void setTagger(PersonIdent taggerIdent) {tagger = taggerIdent;}\n",
        "public static BufferSize automatic() {long max, total, free;synchronized (Process.getCurrentProcess()) {max = proc.getPeakVirtualMemorySize64(); total = proc.getVirtualMemorySize64(); free = proc.getPrivateMemorySize64(); }long totalAvailableBytes = max - total + free;long sortBufferByteSize = free / 2;long minBufferSizeBytes = MIN_BUFFER_SIZE_MB * MB;if (sortBufferByteSize < minBufferSizeBytes || totalAvailableBytes > 10 * minBufferSizeBytes) {if (totalAvailableBytes / 2 > minBufferSizeBytes) {sortBufferByteSize = totalAvailableBytes / 2; } else {sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.min(Integer.MAX_VALUE, sortBufferByteSize));}\n",
        "public static int trimTrailingWhitespace(byte[] raw, int start, int end) {int ptr = end - 1;while (start <= ptr && isWhitespace(raw[ptr]))ptr--;return ptr + 1;}\n",
        "public TopMarginRecord(RecordInputStream in) {field_1_margin = in.readDouble();}\n",
        "public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) {setInfoType(infoType.toString());}\n",
        "public CreatePlayerSessionsResult createPlayerSessions(CreatePlayerSessionsRequest request) {request = beforeClientExecution(request);return executeCreatePlayerSessions(request);}\n",
        "public CreateProxySessionResult createProxySession(CreateProxySessionRequest request) {request = beforeClientExecution(request);return executeCreateProxySession(request);}\n",
        "public int getObjectType() {return type;}\n",
        "public String getScheme() {return scheme;}\n",
        "public void characters(char[] ch, int start, int length) {contents.append(ch, start, length);}\n",
        "public FetchAlbumTagPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchAlbumTagPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public DeleteMembersResult deleteMembers(DeleteMembersRequest request) {request = beforeClientExecution(request);return executeDeleteMembers(request);}\n",
        "public GetContactReachabilityStatusResult getContactReachabilityStatus(GetContactReachabilityStatusRequest request) {request = beforeClientExecution(request);return executeGetContactReachabilityStatus(request);}\n",
        "public boolean remove(Object o) {synchronized (Hashtable.this) {int oldSize = size;Hashtable.this.remove(o);return size != oldSize;}}\n",
        "public E last() {return backingMap.lastKey();}\n",
        "public CreateStreamingDistributionResult createStreamingDistribution(CreateStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeCreateStreamingDistribution(request);}\n",
        "public boolean isAbsolute() {return absolute;}\n",
        "public DisableAddOnResult disableAddOn(DisableAddOnRequest request) {request = beforeClientExecution(request);return executeDisableAddOn(request);}\n",
        "public DescribeAliasResult describeAlias(DescribeAliasRequest request) {request = beforeClientExecution(request);return executeDescribeAlias(request);}\n",
        "public void next(int delta) {while (--delta >= 0) {if (currentSubtree != null)ptr += currentSubtree.getEntrySpan();else ptr++;if (eof())break;parseEntry();}}\n",
        "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n",
        "public Reader create(Reader input) {return new PersianCharFilter(input);}\n",
        "public String option() {return option;}\n",
        "public String toString(){StringBuilder sb = new StringBuilder(\"[\");for (String item : this) {if (sb.length() > 1) {sb.append(\", \");}sb.append(item);}return sb.append(']').toString();}\n",
        "public DescribeSignalingChannelResult describeSignalingChannel(DescribeSignalingChannelRequest request) {request = beforeClientExecution(request);return executeDescribeSignalingChannel(request);}\n",
        "public AttachStaticIpResult attachStaticIp(AttachStaticIpRequest request) {request = beforeClientExecution(request);return executeAttachStaticIp(request);}\n",
        "public String toString() {StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.append(getClass().getName());sb.append(\" [\").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append(\"]\");return sb.toString();}\n",
        "public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) {super();this.delegatePostingsFormat = delegatePostingsFormat;this.bloomFilterFactory = bloomFilterFactory;}\n",
        "public ListTemplatesResult listTemplates(ListTemplatesRequest request) {request = beforeClientExecution(request);return executeListTemplates(request);}\n",
        "public TimerThread(long resolution, Counter counter) {super(THREAD_NAME);this.resolution = resolution;this.counter = counter;this.setBackground(true);}\n",
        "public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}\n",
        "public ListDirectoriesResult listDirectories(ListDirectoriesRequest request) {request = beforeClientExecution(request);return executeListDirectories(request);}\n",
        "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}\n",
        "public GroupingSearch disableCaching() {this.maxCacheRAMMB = null;this.maxDocsToCache = null;return this;}\n",
        "public static int idealByteArraySize(int need) {for(int i=4;i<32;i++) {if(need <= (1<<i) - 12) {return (1<<i) - 12;}}return need;}\n",
        "public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeUpdateAssessmentTarget(request);}\n",
        "public ModifyVolumeResult modifyVolume(ModifyVolumeRequest request) {request = beforeClientExecution(request);return executeModifyVolume(request);}\n",
        "public Cell merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {Cell c = new Cell(m);c.cnt += e.cnt;return c;}return null;}\n",
        "public ByteBuffer read(int length, long position) throws IOException {if(position >= getSize()) {throw new IllegalArgumentException(\"Position \" + position + \" past the end of the file\");}ByteBuffer dst;int worked = -1;if (writable) {dst = ByteBuffer.allocate(length);worked = 0;} else {fileStream.position = position;dst = ByteBuffer.allocate(length);worked = IOUtils.readFully(fileStream, dst.buffer());}if(worked == -1) {throw new IllegalArgumentException(\"Position \" + position + \" past the end of the file\");}dst.position = 0;return dst;}\n",
        "public void respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {request = beforeClientExecution(request);executeRespondActivityTaskCompleted(request);}\n",
        "public synchronized void incrementProgressBy(int diff) {setProgress(mProgress + diff);}\n",
        "public MetadataDiff compareMetadata(DirCacheEntry entry) {if (entry.isAssumeValid()) {return MetadataDiff.EQUAL;}if (entry.isUpdateNeeded()) {return MetadataDiff.DIFFER_BY_METADATA;}if (!entry.isSmudged() && entry.length != (int) getEntryLength()) {return MetadataDiff.DIFFER_BY_METADATA;}if (isModeDifferent(entry.getRawMode())) {return MetadataDiff.DIFFER_BY_METADATA;}long cacheLastModified = entry.getLastModified();long fileLastModified = getEntryLastModified();if (cacheLastModified % 1000 == 0 || fileLastModified % 1000 == 0) {cacheLastModified = cacheLastModified - cacheLastModified % 1000;fileLastModified = fileLastModified - fileLastModified % 1000;}if (fileLastModified != cacheLastModified) {return MetadataDiff.DIFFER_BY_TIMESTAMP;} else {if (!entry.isSmudged()) {return MetadataDiff.EQUAL;} else {return MetadataDiff.SMUDGED;}}}\n",
        "public static NumberRecord convertToNumberRecord(RKRecord rk) {NumberRecord num = new NumberRecord();num.setColumn((short) rk.getColumn());num.setRow((short) rk.getRow());num.setXFIndex((short) rk.getXFIndex());num.setValue(rk.getRKNumber());return num;}\n",
        "public CharBuffer put(char[] src, int srcOffset, int charCount) {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount);}this.position += charCount;return this;}\n",
        "public int getCells() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0 || e.ref >= 0) {size++;}}return size;}\n",
        "public BeiderMorseFilterFactory(Map<String,String> args) {super(args);NameType nameType = NameType.valueOf(get(args, \"nameType\", NameType.GENERIC.toString()).toUpperCase(Locale.ROOT));RuleType ruleType = RuleType.valueOf(get(args, \"ruleType\", RuleType.APPROX.toString()).toUpperCase(Locale.ROOT));boolean concat = getBoolean(args, \"concat\", true);engine = new PhoneticEngine(nameType, ruleType, concat);Set<String> langs = getSet(args, \"languageSet\");languageSet = (null == langs || (1 == langs.size() && langs.contains(\"auto\"))) ? null : LanguageSet.from(langs);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public static double varp(double[] v) {double r = Double.NaN;if (v!=null && v.length > 1) {r = devsq(v) / v.length;}return r;}\n",
        "public PersianNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n",
        "public static WeightedTerm[] getTerms(Query query, boolean prohibited, String fieldName) {Set<WeightedTerm> terms = new HashSet<>();if (fieldName != null) {fieldName = fieldName.intern();}getTerms(query, terms, prohibited, fieldName);return terms.toArray(new WeightedTerm[terms.size()]);}\n",
        "public DeleteDocumentationPartResult deleteDocumentationPart(DeleteDocumentationPartRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationPart(request);}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[CHART]\\n\");buffer.append(\"    .x                    = \").append(\"0x\").append(HexDump.toHex(getX())).append(\" (\").append(getX()).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"    .y                    = \").append(\"0x\").append(HexDump.toHex(getY())).append(\" (\").append(getY()).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"    .width                = \").append(\"0x\").append(HexDump.toHex(getWidth())).append(\" (\").append(getWidth()).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"    .height               = \").append(\"0x\").append(HexDump.toHex(getHeight())).append(\" (\").append(getHeight()).append(\" )\");buffer.append(System.getProperty(\"",
        "public final short get(int index) {checkIndex(index);return backingArray[offset + index];}\n",
        "public String toString() {return attSource.toString();}\n",
        "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {AreaEval reA = evaluateRef(arg0);AreaEval reB = evaluateRef(arg1);AreaEval result = resolveRange(reA, reB);if (result == null) {return ErrorEval.NULL_INTERSECTION;}return result;} catch (EvaluationException e) {return e.getErrorEval();}}\n",
        "public void clear() { weightBySpanQuery.clear(); }\n",
        "public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;bi.setText(buffer.substring(start, buffer.length() - start));return bi.next() + start;}\n",
        "final public SrndQuery PrimaryQuery() throws ParseException {SrndQuery q;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case LPAREN:jj_consume_token(LPAREN);q = FieldsQuery();jj_consume_token(RPAREN);break;case OR:case AND:case W:case N:q = PrefixOperatorQuery();break;case TRUNCQUOTED:case QUOTED:case SUFFIXTERM:case TRUNCTERM:case TERM:q = SimpleTerm();break;default:jj_la1[3] = jj_gen;jj_consume_token(-1);throw new ParseException();}OptionalWeights(q);{if (true) return q;}throw new Error(\"Missing return statement in function\");}\n",
        "public DeleteApiKeyResult deleteApiKey(DeleteApiKeyRequest request) {request = beforeClientExecution(request);return executeDeleteApiKey(request);}\n",
        "public InsertTagsRequest() {super(\"Ots\", \"2016-06-20\", \"InsertTags\", \"ots\");setMethod(MethodType.POST);}\n",
        "public DeleteUserByPrincipalIdResult deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {request = beforeClientExecution(request);return executeDeleteUserByPrincipalId(request);}\n",
        "public DescribeNetworkInterfacesResult describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkInterfaces(request);}\n",
        "public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, 8 );LittleEndian.putInt( data, offset + 8, field_1_numShapes );LittleEndian.putInt( data, offset + 12, field_2_lastMSOSPID );listener.afterRecordSerialize( offset + 16, getRecordId(), getRecordSize(), this );return getRecordSize();}\n",
        "public CreateSecurityConfigurationResult createSecurityConfiguration(CreateSecurityConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateSecurityConfiguration(request);}\n",
        "public DescribeClientVpnConnectionsResult describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnConnections(request);}\n",
        "public static void fill(double[] array, double value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}\n",
        "public boolean hasNext() {return pos < maxColumn;}\n",
        "public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -2;freq = 0;return this;}\n",
        "public final boolean hasAll(RevFlagSet set) {return (flags & set.mask) == set.mask;}\n",
        "public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {request = beforeClientExecution(request);return executeModifyAccount(request);}\n",
        "public Token LT(int k) {lazyInit();if ( k == 0 ) return null;if ( k < 0 ) return LB(-k);int i = p + k - 1;sync(i);if ( i >= tokens.size() ) return tokens.get(tokens.size()-1);return tokens.get(i);}\n",
        "public void removeSheet(int sheetIndex) {if (boundsheets.size() > sheetIndex) {records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex);boundsheets.remove(sheetIndex);fixTabIdRecord();}int sheetNum1Based = sheetIndex + 1;for (int i = 0; i < getNumNames(); i++) {NameRecord nr = getNameRecord(i);if (nr.getSheetNumber() == sheetNum1Based) {nr.setSheetNumber(0);} else if (nr.getSheetNumber() > sheetNum1Based) {nr.setSheetNumber(nr.getSheetNumber() - 1);}}if (linkTable != null) {for (int i = sheetIndex + 1; i < getNumSheets() + 1; i++) {linkTable.removeSheet(i);}}}\n",
        "public void removeName(Name name) {int index = getNameIndex((HSSFName) name);removeName(index);}\n",
        "public boolean equals(final Object o) {if (!(o instanceof Property))return false;final Property p = (Property) o;final Object pValue = p.getValue();final long pId = p.getID();if (id != pId || (id != 0 && !typesAreEqual(type, p.getType())))return false;if (value == null && pValue == null)return true;if (value == null || pValue == null)return false;final Class<?> valueClass = value.getClass();final Class<?> pValueClass = pValue.getClass();if (!(valueClass.isAssignableFrom(pValueClass)) &&!(pValueClass.isAssignableFrom(valueClass)))return false;if (value instanceof byte[])return Arrays.equals((byte[]) value, (byte[]) pValue);return value.equals(pValue);}\n",
        "public GetRepoBuildListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoBuildList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/build\");setMethod(MethodType.GET);}\n",
        "public MessageWriter() {buf = new ByteArrayOutputStream();enc = new OutputStreamWriter(getRawStream(),UTF_8);}\n",
        "public void append(RecordBase r) {_recs.add(r);}\n",
        "public void close() throws IOException {if (read(skipBuffer) != -1 || actualSize != expectedSize)throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().wrongDecompressedLength));final int used = bAvail - inf.remainingInput();if (0 < used)onObjectData(src, buf, p, used);use(used);inf.reset();}\n",
        "public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {request = beforeClientExecution(request);return executeDescribeModelPackage(request);}\n",
        "public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {if (rec instanceof FormulaRecord) {FormulaRecord formulaRec = (FormulaRecord) rec;StringRecord cachedText=null;Class<? extends StringRecord> nextClass = rs.peekNextClass();if (nextClass == StringRecord.class) {cachedText = (StringRecord) rs.getNext();} else {cachedText = null;}insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));} else {insertCell(rec);}}\n",
        "public DeflateDecompressor clone() {return new DeflateDecompressor(this);}\n",
        "public UpdateS3ResourcesResult updateS3Resources(UpdateS3ResourcesRequest request) {request = beforeClientExecution(request);return executeUpdateS3Resources(request);}\n",
        "public GroupQueryNode(QueryNode query) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"query\", \"null\"));}allocate();setLeaf(false);add(query);}\n",
        "public CharSequence toQueryString(EscapeQuerySyntax escaper) {StringBuilder path = new StringBuilder();path.append(\"/\").append(getFirstPathElement());for (QueryText pathelement : getPathElements(1)) {String value = escaper.escape(new StringCharSequence(pathelement.getValue()),Locale.US,EscapeQuerySyntaxType.STRING).toString();path.append(\"/\\\"\").append(value).append(\"\\\"\");}return path.toString();}\n",
        "public void removeCellComment(){HSSFComment comment2 = _sheet.findCellComment(_record.getRow(), _record.getColumn());comment = null;if(null == comment2){return;}(_sheet.getDrawingPatriarch() instanceof HSSFPatriarch).removeShape(comment2);}\n",
        "public void reset() {count = 0;assert forwardCount == 0: \"pos=\" + pos + \" forwardCount=\" + forwardCount;}\n",
        "public ActivateUserResult activateUser(ActivateUserRequest request) {request = beforeClientExecution(request);return executeActivateUser(request);}\n",
        "public boolean isCharsetDetected() {throw new UnsupportedOperationException();}\n",
        "public Snapshot modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {request = beforeClientExecution(request);return executeModifySnapshotCopyRetentionPeriod(request);}\n",
        "public ClusterSubnetGroup deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSubnetGroup(request);}\n",
        "public static String decode(byte[] buffer) {return decode(buffer, 0, buffer.length);}\n",
        "public int getDefaultPort() {return -1;}\n",
        "public StopTaskResult stopTask(StopTaskRequest request) {request = beforeClientExecution(request);return executeStopTask(request);}\n",
        "public void seekExact(BytesRef target, TermState otherState) {assert otherState != null && otherState instanceof BlockTermState;assert !doOrd || ((BlockTermState) otherState).ord < numTerms;state.copyFrom(otherState);seekPending = true;indexIsCurrent = false;term.copyBytes(target);}\n",
        "public SeriesToChartGroupRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}\n",
        "public static void writeUnicodeStringFlagAndData(LittleEndianOutput out, String value) {boolean is16Bit = hasMultibyte(value);out.writeByte(is16Bit ? 0x01 : 0x00);if (is16Bit) {putUnicodeLE(value, out);} else {putCompressedUnicode(value, out);}}\n",
        "public AuthorizeSecurityGroupIngressResult authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroupIngress(request);}\n",
        "public void addFile(String file) {checkFileNames(new String[] { file });setFiles.add(file);}\n",
        "public void setSize(int width, int height) {mWidth = width;mHeight = height;}\n",
        "public void setPrecedenceFilterSuppressed(boolean value) {if (value) {this.reachesIntoOuterContext |= SUPPRESS_PRECEDENCE_FILTER;} else {this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;}}\n",
        "public IntervalSet LOOK(ATNState s, RuleContext ctx) {return LOOK(s, null, ctx);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(getOptionFlags());out.writeShort(getRowHeight());}\n",
        "public Builder(boolean dedup) {this.dedup = dedup;}\n",
        "public Hashtable(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n",
        "public Object get(CharSequence key) {int bucket = normalCompletion.getBucket(key);return bucket == -1 ? null : bucket;}\n",
        "public ListHyperParameterTuningJobsResult listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {request = beforeClientExecution(request);return executeListHyperParameterTuningJobs(request);}\n",
        "public DeleteTableResult deleteTable(String tableName) {return deleteTable(new DeleteTableRequest().withTableName(tableName));}\n",
        "public boolean lessThan(TextFragment fragA, TextFragment fragB) {if (fragA.score == fragB.score)return fragA.fragNum() > fragB.fragNum();elsereturn fragA.score < fragB.score;}\n",
        "public void freeBefore(int pos) {assert pos >= 0;assert pos <= nextPos;final int newCount = nextPos - pos;assert newCount <= count: \"newCount=\" + newCount + \" count=\" + count;assert newCount <= buffer.length: \"newCount=\" + newCount + \" buf.length=\" + buffer.length;count = newCount;}\n",
        "public UpdateHITTypeOfHITResult updateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {request = beforeClientExecution(request);return executeUpdateHITTypeOfHIT(request);}\n",
        "public UpdateRecommenderConfigurationResult updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateRecommenderConfiguration(request);}\n",
        "public int compareTo(Object other) {assert other instanceof BytesRef;BytesRef br = (BytesRef) other;assert br != null;return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length,br.bytes, br.offset, br.offset + br.length);}\n",
        "public int stem(final char s[], int len) {if (len > 4 && s[len-1] == 's') len--;if (len > 5 && (endsWith(s, len, \"ene\") || (endsWith(s, len, \"ane\") && useNynorsk))) return len - 3;if (len > 4 && (endsWith(s, len, \"er\") ||endsWith(s, len, \"en\") ||endsWith(s, len, \"et\") || (endsWith(s, len, \"ar\") && useNynorsk))) return len - 2;if (len > 3) {switch(s[len-1]) {case 'a': case 'e': return len - 1;}}return len;}\n",
        "public DescribeDBSnapshotsResult describeDBSnapshots(DescribeDBSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeDBSnapshots(request);}\n",
        "public SortedSetDocValuesFacetField(String dim, String label) {super(\"dummy\", TYPE);FacetField.verifyLabel(label);FacetField.verifyLabel(dim);this.dim = dim;this.label = label;}\n",
        "public CreateDocumentationPartResult createDocumentationPart(CreateDocumentationPartRequest request) {request = beforeClientExecution(request);return executeCreateDocumentationPart(request);}\n",
        "public Object getValue() {return value;}\n",
        "public ShortBuffer asReadOnlyBuffer() {return duplicate();}\n",
        "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}\n",
        "public static org.apache.poi.hssf.record.Record createSingleRecord(RecordInputStream in) {if(_recordCreatorsById.containsKey(in.getSid())) {I_RecordCreator constructor = _recordCreatorsById.get(in.getSid());return constructor.create(in);}return new UnknownRecord(in);}\n",
        "public int getCount() {return mTabs.size();}\n",
        "public DeleteApplicationReferenceDataSourceResult deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationReferenceDataSource(request);}\n",
        "public CreateProjectVersionResult createProjectVersion(CreateProjectVersionRequest request) {request = beforeClientExecution(request);return executeCreateProjectVersion(request);}\n",
        "public IntBuffer slice() {return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position);}\n",
        "public final byte get() throws IOException {return (byte) read();}\n",
        "public LongBuffer put(int index, long c) {checkIndex(index);backingArray[offset + index] = c;return this;}\n",
        "public StoredField(String name, double value) {super(name, TYPE);fieldsData = value;}\n",
        "public IntervalSet getExpectedTokensWithinCurrentRule() {ATN atn = getInterpreter().atn;ATNState s = atn.states.get(getState());return atn.nextTokens(s);}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FILESHARING]\\n\");buffer.append(\"    .readonly       = \").append(getReadOnly() == 1 ? \"true\" : \"false\").append(\"\\n\");buffer.append(\"    .password       = \").append(HexDump.shortToHex(getPassword())).append(\"\\n\");buffer.append(\"    .username       = \").append(getUsername()).append(\"\\n\");buffer.append(\"[/FILESHARING]\\n\");return buffer.toString();}\n",
        "public SubmoduleInitCommand(Repository repo) {super(repo);paths = new ArrayList<>();}\n",
        "public void include(String name, AnyObjectId id) {if (!Repository.isValidRefName(name))throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidRefName, name));if (include.containsKey(name))throw new IllegalStateException(JGitText.get().duplicateRef + name);include.put(name, id.toObjectId());}\n",
        "public Snapshot enableSnapshotCopy(EnableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeEnableSnapshotCopy(request);}\n",
        "public ValueFiller getValueFiller() {return new ValueFiller() {private final MutableValueBool mval = new MutableValueBool();@Override\n",
        "public void serialize(LittleEndianOutput out) {out.writeByte(getPane());out.writeShort(getActiveCellRow());out.writeShort(getActiveCellCol());out.writeShort(getActiveCellRef());int nRefs = field_6_refs.length;out.writeShort(nRefs);for(int i=0; i<field_6_refs.length; i++) {field_6_refs[i].serialize(out);}}\n",
        "public static Counter newCounter() {return newCounter(false);}\n",
        "public int get(String name, int dflt) {int vals[] = (int[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, \"\" + dflt);if (sval.indexOf(\":\") < 0) {return Integer.parseInt(sval);}int k = sval.indexOf(\":\");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToIntArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}\n",
        "public void preSerialize() {if (records.getTabpos() > 0) {TabIdRecord tir = (TabIdRecord) records.get(records.getTabpos());if (tir._tabids.length < boundsheets.size()) {fixTabIdRecord();}}}\n",
        "public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) {super(delegate.getReuseStrategy());this.delegate = delegate;this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}\n",
        "public ExternalBookBlock(int numberOfSheets) {_externalBookRecord = SupBookRecord.createInternalReferences((short) numberOfSheets);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SCENARIOPROTECT]\\n\");buffer.append(\"    .options = \").append(HexDump.shortToHex(_options)).append(\"\\n\");buffer.append(\"[/SCENARIOPROTECT]\\n\");return buffer.toString();}\n",
        "public PushCommand setThin(boolean thin) {checkCallable();this.thin = thin;return this;}\n",
        "public int compareTo(SearcherTracker other) {return Float.compare(other.getRecordTimeSec(), getRecordTimeSec());}\n",
        "public TokenStream create(TokenStream input) {return new ReverseStringFilter(input);}\n",
        "public BlockList() {directory = BlockList.<T> newDirectory(256);directory[0] = BlockList.<T> newBlock();tailBlock = directory[0];}\n",
        "public QueryScorer(WeightedSpanTerm[] weightedTerms) {this.fieldWeightedSpanTerms = new HashMap<>(weightedTerms.length);for (WeightedSpanTerm t : weightedTerms) {WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(t.term);if ((existingTerm == null) || (existingTerm.weight < t.weight)) {fieldWeightedSpanTerms.put(t.term, t);maxTermWeight = Math.max(maxTermWeight, t.getWeight());}}skipInitExtractor = true;}\n",
        "public boolean equals(Object other) {assert neverEquals(other);if (other instanceof MergedGroup) {if (groupValue == null) {return otherMergedGroup == null;} else {return groupValueIsValueType ?Comparable.this.equals(groupValue, otherMergedGroup.groupValue) :StructuralEqualityComparator.default.equals(groupValue, otherMergedGroup.groupValue);}} else {return false;}}\n",
        "public final Charset charset() {return cs;}\n",
        "public DescribeExperimentResult describeExperiment(DescribeExperimentRequest request) {request = beforeClientExecution(request);return executeDescribeExperiment(request);}\n",
        "public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel) {this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;this.font = new Font(\"Arial\", 10);this.foreground = forecolor;}\n",
        "public String pattern() {return patternText;}\n",
        "public DeleteRouteTableResult deleteRouteTable(DeleteRouteTableRequest request) {request = beforeClientExecution(request);return executeDeleteRouteTable(request);}\n",
        "public AssociateVPCWithHostedZoneResult associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {request = beforeClientExecution(request);return executeAssociateVPCWithHostedZone(request);}\n",
        "public PutIntegrationResult putIntegration(PutIntegrationRequest request) {request = beforeClientExecution(request);return executePutIntegration(request);}\n",
        "public SimpleEntry(K theKey, V theValue) {key = theKey;value = theValue;}\n",
        "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}\n",
        "public DisassociateConnectionFromLagResult disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {request = beforeClientExecution(request);return executeDisassociateConnectionFromLag(request);}\n",
        "public FileMode getOldMode() {return oldMode;}\n",
        "@Override public String toString() {return mapEntry.toString();}\n",
        "public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}\n",
        "public String toString() {StringBuilder buffer = new StringBuilder(\"[Array Formula or Shared Formula]\\n\");buffer.append(\"row = \").append(getRow()).append(\"\\n\");buffer.append(\"col = \").append(getColumn()).append(\"\\n\");return buffer.toString();}\n",
        "public ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListDominantLanguageDetectionJobs(request);}\n",
        "public String toString() {return \"slice start=\" + start + \" length=\" + length + \" readerIndex=\" + readerIndex;}\n",
        "public static int parseHexInt4(byte digit) {final sbyte r = digits16[digit];if (r < 0) {throw new ArrayIndexOutOfBoundsException();}return r;}\n",
        "public Attribute(String name, String value) {setName(name);setValue(value);}\n",
        "public DescribeStackSetOperationResult describeStackSetOperation(DescribeStackSetOperationRequest request) {request = beforeClientExecution(request);return executeDescribeStackSetOperation(request);}\n",
        "public HSSFCell getCell(int cellnum) {int ushortCellNum = cellnum & 0x0000FFFF;return getCell(ushortCellNum);}\n",
        "public void write(byte[] b) {writeContinueIfRequired(b.length);_ulrOutput.write(b);}\n",
        "public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute) {setImageId(imageId);setAttribute(attribute.toString());}\n",
        "public void discardResultContents() {resultContents = null;}\n",
        "public ObjectId getPeeledObjectId() {return getLeaf().getPeeledObjectId();}\n",
        "public UndeprecateDomainResult undeprecateDomain(UndeprecateDomainRequest request) {request = beforeClientExecution(request);return executeUndeprecateDomain(request);}\n",
        "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(field_3_string.length());out.writeByte(_is16bitUnicode ? 0x01 : 0x00);if (_is16bitUnicode) {StringUtil.putUnicodeLE(field_3_string, out);} else {StringUtil.putCompressedUnicode(field_3_string, out);}}\n",
        "public DeleteQueueResult deleteQueue(String queueUrl) {return deleteQueue(new DeleteQueueRequest().withQueueUrl(queueUrl));}\n",
        "public void setCheckEofAfterPackFooter(boolean b) {checkEofAfterPackFooter = b;}\n",
        "public void swap() {int sBegin = beginA;int sEnd = endA;beginA = beginB;endA = endB;beginB = sBegin;endB = sEnd;}\n",
        "public int getPackedGitWindowSize() {return packedGitWindowSize;}\n",
        "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}\n",
        "public GetCelebrityRecognitionResult getCelebrityRecognition(GetCelebrityRecognitionRequest request) {request = beforeClientExecution(request);return executeGetCelebrityRecognition(request);}\n",
        "public CreateQueueRequest(String queueName) {setQueueName(queueName);}\n",
        "public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) {super(arearef);this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.getSheetIdentifier().getName();if (sheetName instanceof SheetRangeIdentifier) {this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName();} else {this.lastSheetName = null;}}\n",
        "public void setBaseline(long clockTime) {t0 = clockTime;timeout = t0 + ticksAllowed;}\n",
        "public MoveAddressToVpcResult moveAddressToVpc(MoveAddressToVpcRequest request) {request = beforeClientExecution(request);return executeMoveAddressToVpc(request);}\n",
        "public String toString() {String coll = getCollectionName();if (coll != null) {return \"LM \" + getName() + \" - \" + coll;}return \"LM \" + getName();}\n",
        "public DescribeLagsResult describeLags(DescribeLagsRequest request) {request = beforeClientExecution(request);return executeDescribeLags(request);}\n",
        "public AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) {if (_refEval == null) {return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}\n",
        "public ShortBuffer put(short[] src, int srcOffset, int shortCount) {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount);}this.position += shortCount;return this;}\n",
        "public void initialize(String cat) {this._cat = cat;}\n",
        "public void write(int oneByte) throws IOException {write(new byte[] { (byte) oneByte }, 0, 1);}\n",
        "public DescribeImportImageTasksResult describeImportImageTasks(DescribeImportImageTasksRequest request) {request = beforeClientExecution(request);return executeDescribeImportImageTasks(request);}\n",
        "public ColumnInfoRecord(RecordInputStream in) {_firstCol = in.readUShort();_lastCol = in.readUShort();_col_width = in.readUShort();_xf_index = in.readUShort();_options = in.readUShort();switch(in.remaining()) {case 2: field_6_reserved = in.readUShort();break;case 1:field_6_reserved = in.readByte();break;case 0:field_6_reserved = 0;break;default:throw new RuntimeException(\"Unusual record size remaining=(\" + in.remaining() + \")\");}}\n",
        "public Status(IndexDiff diff) {super();this.diff = diff;clean = diff.getAdded().isEmpty() && diff.getChanged().isEmpty() && diff.getRemoved().isEmpty() && diff.getMissing().isEmpty() && diff.getModified().isEmpty() && diff.getUntracked().isEmpty() && diff.getConflicting().isEmpty();}\n",
        "public CreateExperimentResult createExperiment(CreateExperimentRequest request) {request = beforeClientExecution(request);return executeCreateExperiment(request);}\n",
        "public DBCellRecord clone() {return copy();}\n",
        "public FloatBuffer slice() {byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());FloatBuffer result = new FloatToByteBufferAdapter(bb);byteBuffer.clear();return result;}\n",
        "public DescribeSnapshotSchedulesResult describeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotSchedules(request);}\n",
        "public ListImagesResult listImages(ListImagesRequest request) {request = beforeClientExecution(request);return executeListImages(request);}\n",
        "public Diff(int ins, int del, int rep, int noop) {INSERT = ins;DELETE = del;REPLACE = rep;NOOP = noop;}\n",
        "public String toFormulaString(String[] operands) {StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(\",\");buffer.append(operands[ 1 ]);return buffer.toString();}\n",
        "public static void setupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) {WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length];for (int i = 0; i < wbEvals.length; i++) {wbEvals[i] = evaluators[i]._evaluator;}CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);}\n",
        "public ListPhotoTagsRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ListPhotoTags\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public RandomSamplingFacetsCollector(int sampleSize, long seed) {super(false);this.sampleSize = sampleSize;this.random = new XORShift64Random(seed);this.sampledDocs = null;}\n",
        "public AllocateStaticIpResult allocateStaticIp(AllocateStaticIpRequest request) {request = beforeClientExecution(request);return executeAllocateStaticIp(request);}\n",
        "public FeatRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved1 = in.readByte();reserved2 = in.readInt();int cref = in.readUShort();cbFeatData = in.readInt();reserved3 = in.readShort();cellRefs = new CellRangeAddress[cref];for (int i = 0; i < cellRefs.length; i++) {cellRefs[i] = new CellRangeAddress(in);}switch (isf_sharedFeatureType) {case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:sharedFeature = new FeatProtection(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:sharedFeature = new FeatFormulaErr2(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:sharedFeature = new FeatSmartTag(in);break;default:logger.log(POILogger.ERROR, \"Unknown Shared Feature \" + isf_sharedFeatureType + \" found!\");break;}\n",
        "public RevCommit tryFastForward(RevCommit newCommit)throws RefNotFoundException, MissingObjectException,IncorrectObjectTypeException, IOException {Ref head = repo.findRef(Constants.HEAD);if (head == null || head.getObjectId() == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));ObjectId headId = head.getObjectId();if (headId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));RevCommit headCommit = walk.lookupCommit(headId);if (walk.isMergedInto(newCommit, headCommit))return newCommit;final String headName;if (head.isSymbolic())headName = head.getTarget().getName();elsethisName = \"detached HEAD\";return tryFastForward(headName, headCommit, newCommit);}\n",
        "public CreateSnapshotScheduleResult createSnapshotSchedule(CreateSnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeCreateSnapshotSchedule(request);}\n",
        "public Record getNext() {if (_nextIndex >= _list.size()) {throw new RuntimeException(\"Attempt to read past end of record stream\");}_countRead++;return _list.get(_nextIndex++);}\n",
        "public String toString() {return RawParseUtils.decode(buf.toByteArray());}\n",
        "public ListTablesRequest(String exclusiveStartTableName) {setExclusiveStartTableName(exclusiveStartTableName);}\n",
        "public EnableAlarmActionsResult enableAlarmActions(EnableAlarmActionsRequest request) {request = beforeClientExecution(request);return executeEnableAlarmActions(request);}\n",
        "public Builder() {this(false);}\n",
        "public boolean equals(Object obj) {if (!(obj instanceof State)) {return false;}State other = (State) obj;return is_final == other.is_final && Arrays.equals(this.labels, other.labels) && Objects.equals(this.states, other.states);}\n",
        "public TokenStream create(TokenStream input) {return new EnglishPossessiveFilter(input);}\n",
        "public void clearFormatting() {_string = cloneStringIfRequired();_string.clearFormatting();addToSSTIfRequired();}\n",
        "public int get(int index, long[] arr, int off, int len) {assert len > 0 : \"len must be > 0 (got \" + len + \")\";assert index >= 0 && index < valueCount;len = Math.min(len, valueCount - index);Arrays.fill(arr, off, off + len, 0);return len;}\n",
        "public DeleteRouteResponseResult deleteRouteResponse(DeleteRouteResponseRequest request) {request = beforeClientExecution(request);return executeDeleteRouteResponse(request);}\n",
        "public String toPrivateString() {return format(true, false);}\n",
        "public CreatePresignedDomainUrlResult createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) {request = beforeClientExecution(request);return executeCreatePresignedDomainUrl(request);}\n",
        "public void write(int oneChar) {doWrite(new char[] { (char) oneChar }, 0, 1);}\n",
        "public SSTRecord getSSTRecord() {return sstRecord;}\n",
        "public String toString() {return \"term=\" + term + \",field=\" + field + \",value=\" + value;}\n",
        "public boolean isSaturated(FuzzySet bloomFilter,FieldInfo fieldInfo) {return bloomFilter.getSaturation() > 0.9f;}\n",
        "public Builder(boolean dedup) {this.dedup = dedup;}\n",
        "public String toString() {return getClass().getSimpleName()+ \"(maxBasicQueries: \" + maxBasicQueries+ \", queriesMade: \" + queriesMade+ \")\";}\n",
        "public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteDataSource(request);}\n",
        "public RebootNodeResult rebootNode(RebootNodeRequest request) {request = beforeClientExecution(request);return executeRebootNode(request);}\n",
        "public void processChildRecords(){convertRawBytesToEscherRecords();}\n",
        "public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) {request = beforeClientExecution(request);return executeCreateOrUpdateTags(request);}\n",
        "public FileSnapshot getSnapShot() {return snapShot;}\n",
        "public InputStream openStream(String resource) throws IOException {InputStream stream = this.clazz.getClassLoader().findAndGetManifestResourceStream(clazz, resource);if (stream == null) {throw new IOException(\"Resource not found: \" + resource);}return stream;}\n",
        "public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(\" [\");sb.append(\"sid=\").append(HexDump.shortToHex(_sid));sb.append(\" size=\").append(_data.length);sb.append(\" : \").append(HexDump.toHex(_data));sb.append(\"]\\n\");return sb.toString();}\n",
        "public int nextIndex() {return index;}\n",
        "public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";} else {return this.field + \":\" + \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";}}\n",
        "public CalcModeRecord clone() {return copy();}\n",
        "public boolean isOutput() {return output;}\n",
        "public CreateNetworkInterfaceResult createNetworkInterface(CreateNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeCreateNetworkInterface(request);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_password);}\n",
        "public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopDominantLanguageDetectionJob(request);}\n",
        "public STSAssumeRoleSessionCredentialsProvider withConnectionTimeout(int milliseconds) {connectionTimeoutInMilliseconds = milliseconds;return this;}\n",
        "public GetGatewayGroupResult getGatewayGroup(GetGatewayGroupRequest request) {request = beforeClientExecution(request);return executeGetGatewayGroup(request);}\n",
        "public FloatBuffer slice() {return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position);}\n",
        "public static String join(Collection<String> parts, String separator,String lastSeparator) {StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.size() - 1;for (String part : parts) {sb.append(part);if (i == lastIndex - 1) {sb.append(lastSeparator);} else if (i != lastIndex) {sb.append(separator);}}i++;}return sb.toString();}\n",
        "public String toString() {return \"(\" + a.toString() + \" AND \" + b.toString() + \")\";}\n",
        "public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {setTopicArn(topicArn);setNextToken(nextToken);}\n",
        "public byte readByte() {return bytes[pos--];}\n",
        "public TerminateClientVpnConnectionsResult terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeTerminateClientVpnConnections(request);}\n",
        "public ReceiveMessageRequest(String queueUrl) {setQueueUrl(queueUrl);}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_barSpace);out.writeShort(field_2_categorySpace);out.writeShort(field_3_formatFlags);}\n",
        "public Object common(Object output1, Object output2) {return outputs.common((T) output1, (T) output2);}\n",
        "public CreateVariableResult createVariable(CreateVariableRequest request) {request = beforeClientExecution(request);return executeCreateVariable(request);}\n",
        "public static int match(byte[] b, int ptr, byte[] src) {if (ptr + src.length > b.length)return -1;for (int i = 0; i < src.length; i++, ptr++)if (b[ptr] != src[i])return -1;return ptr;}\n",
        "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_rectX1     =  LittleEndian.getInt( data, pos + size );     size += 4;field_2_rectY1     =  LittleEndian.getInt( data, pos + size );     size += 4;field_3_rectX2     =  LittleEndian.getInt( data, pos + size );     size += 4;field_4_rectY2     =  LittleEndian.getInt( data, pos + size );     size += 4;bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException(\"Expected no remaining bytes but got \" + bytesRemaining);}return 8 + size + bytesRemaining;}\n",
        "public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeCreateCloudFrontOriginAccessIdentity(request);}\n",
        "public boolean isNamespaceAware() {return getFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES);}\n",
        "public void setOverridable(boolean on) {overridable = on;}\n",
        "public String getClassName() {return className;}\n",
        "public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}\n",
        "public int indexOfKey(int key) {return binarySearch(mKeys, 0, mSize, key);}\n",
        "public BlankRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_col = in.readShort();field_3_xf = in.readShort();}\n",
        "public long length() {return length;}\n",
        "public PasswordRecord(RecordInputStream in) {field_1_password = in.readShort();}\n",
        "public HashMap(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n",
        "public void run() {long lastReopenStartNS = System.nanoTime()/1000000;while (!finish) {boolean hasWaiting;synchronized (this) {hasWaiting = waitingGen > searchingGen;long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);long sleepNS = nextReopenStartNS - System.nanoTime();if (sleepNS > 0) {try {Thread.currentThread().wait(sleepNS);} catch (InterruptedException ie) {Thread.currentThread().interrupt();return;}}if (finish) {break;}lastReopenStartNS = System.nanoTime();refreshStartGen = writer.getAndIncrementGeneration();try {manager.maybeRefreshBlocking();} catch (IOException ioe) {throw new RuntimeException(ioe);}}refreshDone();}\n",
        "public DeleteLoginProfileRequest(String userName) {setUserName(userName);}\n",
        "public E pollFirst() {return (size == 0) ? null : removeFirstImpl();}\n",
        "public CreatePhotoRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"CreatePhoto\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public String getName() {return \"resolve\";}\n",
        "public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;int offset, count = maxScan;for( offset = start; offset < buffer.length() && count > 0; count-- ){if( boundaryChars.contains( buffer.charAt( offset ) ) return offset;offset++;}return start;}\n",
        "public void setObjectChecker(ObjectChecker oc) {objCheck = oc;}\n",
        "public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}\n",
        "public CreateVpcEndpointResult createVpcEndpoint(CreateVpcEndpointRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpoint(request);}\n",
        "public DeregisterWorkspaceDirectoryResult deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeDeregisterWorkspaceDirectory(request);}\n",
        "public ChartFRTInfoRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();verOriginator = in.readByte();verWriter = in.readByte();int cCFRTID = in.readShort();rgCFRTID = new CFRTID[cCFRTID];for (int i = 0; i < cCFRTID; i++) {rgCFRTID[i] = new CFRTID(in);}}\n",
        "public Merger newMerger(Repository db) {return new OneSide(db, treeIndex);}\n",
        "public CreateDataSourceFromRedshiftResult createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRedshift(request);}\n",
        "public void clearDFA() {for (int d = 0; d < decisionToDFA.length; d++) {decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);}}\n",
        "public void removeName(Name name) {int index = getNameIndex((HSSFName) name);removeName(index);}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( \"[RightMargin]\\n\" );buffer.append( \"    .margin               = \" ).append( \" (\" ).append( getMargin() ).append( \" )\\n\" );buffer.append( \"[/RightMargin]\\n\" );return buffer.toString();}\n",
        "public RefreshAllRecord clone() {return copy();}\n",
        "public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {super(queryConfig);add(new WildcardQueryNodeProcessor());add(new MultiFieldQueryNodeProcessor());add(new FuzzyQueryNodeProcessor());add(new MatchAllDocsQueryNodeProcessor());add(new OpenRangeQueryNodeProcessor());add(new NumericQueryNodeProcessor());add(new NumericRangeQueryNodeProcessor());add(new LowercaseExpandedTermsQueryNodeProcessor());add(new TermRangeQueryNodeProcessor());add(new AllowLeadingWildcardProcessor());add(new AnalyzerQueryNodeProcessor());add(new PhraseSlopQueryNodeProcessor());add(new BooleanQuery2ModifierNodeProcessor());add(new NoChildOptimizationQueryNodeProcessor());add(new RemoveDeletedQueryNodesProcessor());add(new RemoveEmptyNonLeafQueryNodeProcessor());add(new BooleanSingleChildOptimizationQueryNodeProcessor());add(new DefaultPhraseSlopQueryNodeProcessor());add(new BoostQueryNodeProcessor());add(new MultiTermRewriteMethodProcessor());}\n",
        "public String formatAsString(String sheetName, boolean useAbsoluteAddress) {StringBuilder sb = new StringBuilder();if (sheetName != null) {sb.append(SheetNameFormatter.format(sheetName));sb.append(\"!\");}CellReference cellRefFrom = new CellReference(getFirstRow(), getFirstColumn(),useAbsoluteAddress, useAbsoluteAddress);CellReference cellRefTo = new CellReference(getLastRow(), getLastColumn(),useAbsoluteAddress, useAbsoluteAddress);sb.append(cellRefFrom.formatAsString());if (!cellRefFrom.equals(cellRefTo)|| isFullColumnRange() || isFullRowRange()) {sb.append(':');sb.append(cellRefTo.formatAsString());}return sb.toString();}\n",
        "public ByteBuffer put(int index, byte value) {throw new ReadOnlyBufferException();}\n",
        "public void mode(int m) {_mode = m;}\n",
        "public ShortBuffer slice() {return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);}\n",
        "public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}\n",
        "public ByteBuffer putFloat(float value) {throw new ReadOnlyBufferException();}\n",
        "public static double max(double[] values) {double max = Double.NEGATIVE_INFINITY;for (double value : values) {max = Math.max(max, value);}return max;}\n",
        "public UpdateRepoWebhookRequest() {super(\"cr\", \"2016-06-07\", \"UpdateRepoWebhook\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]\");setMethod(MethodType.POST);}\n",
        "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}\n",
        "public String toString() {StringBuilder sb = new StringBuilder();sb.append(\"[SXPI]\\n\");for (int i = 0; i < _fieldInfos.length; i++) {sb.append(\"    item[\").append(i).append(\"]=\");_fieldInfos[i].appendDebugInfo(sb);sb.append('\\n');}sb.append(\"[/SXPI]\\n\");return sb.toString();}\n",
        "public boolean isSuccessful() {if (mergeResult != null) {return mergeResult.getMergeStatus().isSuccessful();} else if (rebaseResult != null) {return rebaseResult.getStatus().isSuccessful();}return true;}\n",
        "public void setBytesValue(byte[] value) {setBytesValue(new BytesRef(value));}\n",
        "public DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeConnections(request);}\n",
        "public DeletePhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"DeletePhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n",
        "public boolean add(E object) {add(size(), object);return true;}\n",
        "public static ByteBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteHeapByteBuffer(capacity);}\n",
        "public SrndQuery getSubQuery(int qn) {return queries.get(qn);}\n",
        "public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.min(currentPayloadScore, currentScore);}}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[BLANK]\\n\");buffer.append(\"row       = \").append(HexDump.shortToHex(getRow())).append(\"\\n\");buffer.append(\"col       = \").append(HexDump.shortToHex(getColumn())).append(\"\\n\");buffer.append(\"xf        = \").append(HexDump.shortToHex(getXFIndex())).append(\"\\n\");buffer.append(\"[/BLANK]\\n\");return buffer.toString();}\n",
        "public DescribeLogPatternResult describeLogPattern(DescribeLogPatternRequest request) {request = beforeClientExecution(request);return executeDescribeLogPattern(request);}\n",
        "public RegisterTransitGatewayMulticastGroupMembersResult registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeRegisterTransitGatewayMulticastGroupMembers(request);}\n",
        "public GetPhoneNumberSettingsResult getPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberSettings(request);}\n",
        "public ObjectId getData() {return data;}\n",
        "public boolean isDirect() {return false;}\n",
        "public DeleteServerCertificateRequest(String serverCertificateName) {setServerCertificateName(serverCertificateName);}\n",
        "public StringBuffer append(boolean b) {return append(b ? \"true\" : \"false\");}\n",
        "public GetEvaluationResult getEvaluation(GetEvaluationRequest request) {request = beforeClientExecution(request);return executeGetEvaluation(request);}\n",
        "public LinkedDataRecord getDataName(){return dataName;}\n",
        "public boolean find(int start) {findPos = start;if (findPos < regionStart) {findPos = regionStart;} else {if (findPos >= regionEnd) {matchFound = false;return false;}matchFound = findImpl(address, input, findPos, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}\n",
        "public GetLifecyclePolicyPreviewResult getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {request = beforeClientExecution(request);return executeGetLifecyclePolicyPreview(request);}\n",
        "public SinglePositionTokenStream(String word) {this.word = word;returned = true;}\n",
        "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_print_gridlines);}\n",
        "public String toString() {final StringBuilder s = new StringBuilder();s.append(Constants.typeString(getType()));s.append(' ');s.append(name());s.append(' ');s.append(commitTime);s.append(' ');appendCoreFlags(s);return s.toString();}\n",
        "public LsRemoteCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}\n",
        "public void collapseRow(int rowNumber) {int startRow = findStartOfRowOutlineGroup(rowNumber);RowRecord rowRecord = getRow(startRow);int lastRow = writeHidden(rowRecord, startRow, true);if (getRow(lastRow + 1) != null) {getRow(lastRow + 1).setColapsed(true);}RowRecord row = createRow(lastRow + 1);row.setColapsed(true);insertRow(row);}\n",
        "public AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {request = beforeClientExecution(request);return executeAssociateSkillGroupWithRoom(request);}\n",
        "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[SERIESLIST]\\n\");buffer.append(\"    .seriesNumbers        = \").append(\" (\").append( getSeriesNumbers() ).append(\" )\");buffer.append(System.getProperty(\"line.separator\"));buffer.append(\"[/SERIESLIST]\\n\");return buffer.toString();}\n",
        "public QueryConfigHandler getQueryConfigHandler() {return this.queryConfig;}\n",
        "public String getClassArg() {if (null != originalArgs) {String className = originalArgs[CLASS_NAME];if (null != className) {return className;}}return getClass().getName();}\n"
    ],
    "references": [
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_vcenter);}\n"
        ],
        [
            "public void addAll(BlockList<T> src) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);if (src.tailBlkIdx != 0)addAll(src.tailBlock, 0, src.tailBlkIdx);}\n"
        ],
        [
            "public void writeByte(byte b) {if (upto == blockSize) {if (currentBlock != null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;}\n"
        ],
        [
            "public ObjectId getObjectId() {return objectId;}\n"
        ],
        [
            "public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) {request = beforeClientExecution(request);return executeDeleteDomainEntry(request);}\n"
        ],
        [
            "public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}\n"
        ],
        [
            "public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return \"\"; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}\n"
        ],
        [
            "public POIFSFileSystem() {this(true);_header.setBATCount(1);_header.setBATArray(new int[]{1});BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);bb.setOurBlockIndex(1);_bat_blocks.add(bb);setNextBlock(0, POIFSConstants.END_OF_CHAIN);setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.setStartBlock(0);}\n"
        ],
        [
            "public void init(int address) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice != null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto < slice.length;}\n"
        ],
        [
            "public SubmoduleAddCommand setPath(String path) {this.path = path;return this;}\n"
        ],
        [
            "public ListIngestionsResult listIngestions(ListIngestionsRequest request) {request = beforeClientExecution(request);return executeListIngestions(request);}\n"
        ],
        [
            "public QueryParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}\n"
        ],
        [
            "public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request) {request = beforeClientExecution(request);return executeGetShardIterator(request);}\n"
        ],
        [
            "public ModifyStrategyRequest() {super(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException(\"InputStreamReader is closed\");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {return false;}}}\n"
        ],
        [
            "public EscherOptRecord getOptRecord() {return _optRecord;}\n"
        ],
        [
            "public synchronized int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException(\"buffer == null\");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length ? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}\n"
        ],
        [
            "public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {this.sentenceOp = sentenceOp;}\n"
        ],
        [
            "public void print(String str) {write(str != null ? str : String.valueOf((Object) null));}\n"
        ],
        [
            "public NotImplementedFunctionException(String functionName, NotImplementedException cause) {super(functionName, cause);this.functionName = functionName;}\n"
        ],
        [
            "public V next() {return super.nextEntry().getValue();}\n"
        ],
        [
            "public final void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException(\"read past EOF: \" + this);} else {System.arraycopy(buffer, 0, b, offset, len);bufferPosition=len;}} else {long after = bufferStart+bufferPosition+len;if(after > length())throw new EOFException(\"read past EOF: \" + this);readInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0;                    }}}\n"
        ],
        [
            "public TagQueueResult tagQueue(TagQueueRequest request) {request = beforeClientExecution(request);return executeTagQueue(request);}\n"
        ],
        [
            "public void remove() {throw new UnsupportedOperationException();}\n"
        ],
        [
            "public CacheSubnetGroup modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheSubnetGroup(request);}\n"
        ],
        [
            "public void setParams(String params) {super.setParams(params);language = country = variant = \"\";StringTokenizer st = new StringTokenizer(params, \",\");if (st.hasMoreTokens())language = st.nextToken();if (st.hasMoreTokens())country = st.nextToken();if (st.hasMoreTokens())variant = st.nextToken();}\n"
        ],
        [
            "public DeleteDocumentationVersionResult deleteDocumentationVersion(DeleteDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationVersion(request);}\n"
        ],
        [
            "public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length != other.length) {return false; }for (int i = length - 1; i >= 0; i--) {if (!components[i].equals(other.components[i])) {return false;}}return true;}\n"
        ],
        [
            "public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccessDetails(request);}\n"
        ],
        [
            "public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}\n"
        ],
        [
            "public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}\n"
        ],
        [
            "public GetDashboardResult getDashboard(GetDashboardRequest request) {request = beforeClientExecution(request);return executeGetDashboard(request);}\n"
        ],
        [
            "public AssociateSigninDelegateGroupsWithAccountResult associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {request = beforeClientExecution(request);return executeAssociateSigninDelegateGroupsWithAccount(request);}\n"
        ],
        [
            "public void addMultipleBlanks(MulBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}\n"
        ],
        [
            "public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append(\"\\\\Q\");int apos = 0;int k;while ((k = string.indexOf(\"\\\\E\", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append(\"\\\\\\\\E\\\\Q\");apos = k + 2;}return sb.append(string.substring(apos)).append(\"\\\\E\").toString();}\n"
        ],
        [
            "public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}\n"
        ],
        [
            "public GetIceServerConfigResult getIceServerConfig(GetIceServerConfigRequest request) {request = beforeClientExecution(request);return executeGetIceServerConfig(request);}\n"
        ],
        [
            "public String toString() {return getClass().getName() + \" [\" +getValueAsString() +\"]\";}\n"
        ],
        [
            "public String toString(String field) {return \"ToChildBlockJoinQuery (\"+parentQuery.toString()+\")\";}\n"
        ],
        [
            "public final void incRef() {refCount.incrementAndGet();}\n"
        ],
        [
            "public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetSendingEnabled(request);}\n"
        ],
        [
            "public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}\n"
        ],
        [
            "public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}\n"
        ],
        [
            "public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}\n"
        ],
        [
            "public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}\n"
        ],
        [
            "public void setProgressMonitor(ProgressMonitor pm) {progressMonitor = pm;}\n"
        ],
        [
            "public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}\n"
        ],
        [
            "public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}\n"
        ],
        [
            "public String getNewPrefix() {return this.newPrefix;}\n"
        ],
        [
            "public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}\n"
        ],
        [
            "public List<CharsRef> uniqueStems(char word[], int length) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}\n"
        ],
        [
            "public GetGatewayResponsesResult getGatewayResponses(GetGatewayResponsesRequest request) {request = beforeClientExecution(request);return executeGetGatewayResponses(request);}\n"
        ],
        [
            "public void setPosition(long pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}\n"
        ],
        [
            "public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}\n"
        ],
        [
            "public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {setBootstrapActionConfig(bootstrapActionConfig);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_row);out.writeShort(field_2_col);out.writeShort(field_3_flags);out.writeShort(field_4_shapeid);out.writeShort(field_6_author.length());out.writeByte(field_5_hasMultibyte ? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putCompressedUnicode(field_6_author, out);}if (field_7_padding != null) {out.writeByte(field_7_padding.intValue());}}\n"
        ],
        [
            "public int lastIndexOf(String string) {return lastIndexOf(string, count);}\n"
        ],
        [
            "public boolean add(E object) {return addLastImpl(object);}\n"
        ],
        [
            "public void unsetSection(String section, String subsection) {ConfigSnapshot src, res;do {src = state.get();res = unsetSection(src, section, subsection);} while (!state.compareAndSet(src, res));}\n"
        ],
        [
            "public final String getTagName() {return tagName;}\n"
        ],
        [
            "public void addSubRecord(int index, SubRecord element) {subrecords.add(index, element);}\n"
        ],
        [
            "public boolean remove(Object o) {synchronized (mutex) {return delegate().remove(o);}}\n"
        ],
        [
            "public DoubleMetaphoneFilter create(TokenStream input) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}\n"
        ],
        [
            "public long length() {return inCoreLength();}\n"
        ],
        [
            "public void setValue(boolean newValue) {value = newValue;}\n"
        ],
        [
            "public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}\n"
        ],
        [
            "public int get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}\n"
        ],
        [
            "public CreateRepoRequest() {super(\"cr\", \"2016-06-07\", \"CreateRepo\", \"cr\");setUriPattern(\"/repos\");setMethod(MethodType.PUT);}\n"
        ],
        [
            "public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}\n"
        ],
        [
            "public void remove() {if (expectedModCount == list.modCount) {if (lastLink != null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}\n"
        ],
        [
            "public MergeShardsResult mergeShards(MergeShardsRequest request) {request = beforeClientExecution(request);return executeMergeShards(request);}\n"
        ],
        [
            "public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {request = beforeClientExecution(request);return executeAllocateHostedConnection(request);}\n"
        ],
        [
            "public int getBeginIndex() {return start;}\n"
        ],
        [
            "public static final WeightedTerm[] getTerms(Query query){return getTerms(query,false);}\n"
        ],
        [
            "public ByteBuffer compact() {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}\n"
        ],
        [
            "public String getHumanishName() throws IllegalArgumentException {String s = getPath();if (\"/\".equals(s) || \"\".equals(s)) s = getHost();if (s == null) throw new IllegalArgumentException();String[] elements;if (\"file\".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split(\"[\\\\\" + File.separatorChar + \"/]\"); elseelements = s.split(\"/+\"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}\n"
        ],
        [
            "public DescribeNotebookInstanceLifecycleConfigResult describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeDescribeNotebookInstanceLifecycleConfig(request);}\n"
        ],
        [
            "public String getAccessKeySecret() {return this.accessKeySecret;}\n"
        ],
        [
            "public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}\n"
        ],
        [
            "public DescribeVoicesResult describeVoices(DescribeVoicesRequest request) {request = beforeClientExecution(request);return executeDescribeVoices(request);}\n"
        ],
        [
            "public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request) {request = beforeClientExecution(request);return executeListMonitoringExecutions(request);}\n"
        ],
        [
            "public DescribeJobRequest(String vaultName, String jobId) {setVaultName(vaultName);setJobId(jobId);}\n"
        ],
        [
            "public EscherRecord getEscherRecord(int index){return escherRecords.get(index);}\n"
        ],
        [
            "public GetApisResult getApis(GetApisRequest request) {request = beforeClientExecution(request);return executeGetApis(request);}\n"
        ],
        [
            "public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) {request = beforeClientExecution(request);return executeDeleteSmsChannel(request);}\n"
        ],
        [
            "public TrackingRefUpdate getTrackingRefUpdate() {return trackingRefUpdate;}\n"
        ],
        [
            "public void print(boolean b) {print(String.valueOf(b));}\n"
        ],
        [
            "public QueryNode getChild() {return getChildren().get(0);}\n"
        ],
        [
            "public NotIgnoredFilter(int workdirTreeIndex) {this.index = workdirTreeIndex;}\n"
        ],
        [
            "public AreaRecord(RecordInputStream in) {field_1_formatFlags            = in.readShort();}\n"
        ],
        [
            "public GetThumbnailRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetThumbnail\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayVpcAttachments(request);}\n"
        ],
        [
            "public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorStreamingConfiguration(request);}\n"
        ],
        [
            "public OrdRange getOrdRange(String dim) {return prefixToOrdRange.get(dim);}\n"
        ],
        [
            "public String toString() {String symbol = \"\";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex,startIndex));symbol = Utils.escapeWhitespace(symbol, false);}return String.format(Locale.getDefault(), \"%s('%s')\", LexerNoViableAltException.class.getSimpleName(), symbol);}\n"
        ],
        [
            "public E peek() {return peekFirstImpl();}\n"
        ],
        [
            "public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) {request = beforeClientExecution(request);return executeCreateWorkspaces(request);}\n"
        ],
        [
            "public NumberFormatIndexRecord clone() {return copy();}\n"
        ],
        [
            "public DescribeRepositoriesResult describeRepositories(DescribeRepositoriesRequest request) {request = beforeClientExecution(request);return executeDescribeRepositories(request);}\n"
        ],
        [
            "public SparseIntArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}\n"
        ],
        [
            "public HyphenatedWordsFilter create(TokenStream input) {return new HyphenatedWordsFilter(input);}\n"
        ],
        [
            "public CreateDistributionWithTagsResult createDistributionWithTags(CreateDistributionWithTagsRequest request) {request = beforeClientExecution(request);return executeCreateDistributionWithTags(request);}\n"
        ],
        [
            "public RandomAccessFile(String fileName, String mode) throws FileNotFoundException {this(new File(fileName), mode);}\n"
        ],
        [
            "public DeleteWorkspaceImageResult deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeDeleteWorkspaceImage(request);}\n"
        ],
        [
            "public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, \"\");return sb.toString();}\n"
        ],
        [
            "public UpdateDistributionResult updateDistribution(UpdateDistributionRequest request) {request = beforeClientExecution(request);return executeUpdateDistribution(request);}\n"
        ],
        [
            "public HSSFColor getColor(short index){if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) {return HSSFColorPredefined.AUTOMATIC.getColor();}byte[] b = _palette.getColor(index);return (b == null) ? null : new CustomColor(index, b);}\n"
        ],
        [
            "public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {throw new NotImplementedFunctionException(_functionName);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort((short)field_1_number_crn_records);out.writeShort((short)field_2_sheet_table_index);}\n"
        ],
        [
            "public DescribeDBEngineVersionsResult describeDBEngineVersions() {return describeDBEngineVersions(new DescribeDBEngineVersionsRequest());}\n"
        ],
        [
            "public FormatRun(short character, short fontIndex) {this._character = character;this._fontIndex = fontIndex;}\n"
        ],
        [
            "public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;for (int i = offset; i < end; ++i) {char ch = chars[i];result[resultIndex++] = (byte) (ch >> 8);result[resultIndex++] = (byte) ch;}return result;}\n"
        ],
        [
            "public UploadArchiveResult uploadArchive(UploadArchiveRequest request) {request = beforeClientExecution(request);return executeUploadArchive(request);}\n"
        ],
        [
            "public List<Token> getHiddenTokensToLeft(int tokenIndex) {return getHiddenTokensToLeft(tokenIndex, -1);}\n"
        ],
        [
            "public boolean equals(Object obj) {if (this == obj)return true;if (!super.equals(obj))return false;if (getClass() != obj.getClass())return false;AutomatonQuery other = (AutomatonQuery) obj;if (!compiled.equals(other.compiled))return false;if (term == null) {if (other.term != null)return false;} else if (!term.equals(other.term))return false;return true;}\n"
        ],
        [
            "public SpanQuery makeSpanClause() {SpanQuery [] spanQueries = new SpanQuery[size()];Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();int i = 0;while (sqi.hasNext()) {SpanQuery sq = sqi.next();float boost = weightBySpanQuery.get(sq);if (boost != 1f) {sq = new SpanBoostQuery(sq, boost);}spanQueries[i++] = sq;}if (spanQueries.length == 1)return spanQueries[0];elsereturn new SpanOrQuery(spanQueries);}\n"
        ],
        [
            "public StashCreateCommand stashCreate() {return new StashCreateCommand(repo);}\n"
        ],
        [
            "public FieldInfo fieldInfo(String fieldName) {return byName.get(fieldName);}\n"
        ],
        [
            "public DescribeEventSourceResult describeEventSource(DescribeEventSourceRequest request) {request = beforeClientExecution(request);return executeDescribeEventSource(request);}\n"
        ],
        [
            "public GetDocumentAnalysisResult getDocumentAnalysis(GetDocumentAnalysisRequest request) {request = beforeClientExecution(request);return executeGetDocumentAnalysis(request);}\n"
        ],
        [
            "public CancelUpdateStackResult cancelUpdateStack(CancelUpdateStackRequest request) {request = beforeClientExecution(request);return executeCancelUpdateStack(request);}\n"
        ],
        [
            "public ModifyLoadBalancerAttributesResult modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {request = beforeClientExecution(request);return executeModifyLoadBalancerAttributes(request);}\n"
        ],
        [
            "public SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request) {request = beforeClientExecution(request);return executeSetInstanceProtection(request);}\n"
        ],
        [
            "public ModifyDBProxyResult modifyDBProxy(ModifyDBProxyRequest request) {request = beforeClientExecution(request);return executeModifyDBProxy(request);}\n"
        ],
        [
            "public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {outputs = ArrayUtil.grow(outputs, count+1);}if (count == endOffsets.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {outputs[count] = new CharsRefBuilder();}outputs[count].copyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}\n"
        ],
        [
            "public FetchLibrariesRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchLibraries\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public boolean exists() {return fs.exists(objects);}\n"
        ],
        [
            "public FilterOutputStream(OutputStream out) {this.out = out;}\n"
        ],
        [
            "public ScaleClusterRequest() {super(\"CS\", \"2015-12-15\", \"ScaleCluster\", \"csk\");setUriPattern(\"/clusters/[ClusterId]\");setMethod(MethodType.PUT);}\n"
        ],
        [
            "public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);}\n"
        ],
        [
            "public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request) {request = beforeClientExecution(request);return executeListObjectParentPaths(request);}\n"
        ],
        [
            "public DescribeCacheSubnetGroupsResult describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheSubnetGroups(request);}\n"
        ],
        [
            "public void setSharedFormula(boolean flag) {field_5_options =sharedFormula.setShortBoolean(field_5_options, flag);}\n"
        ],
        [
            "public boolean isReuseObjects() {return reuseObjects;}\n"
        ],
        [
            "public ErrorNode addErrorNode(Token badToken) {ErrorNodeImpl t = new ErrorNodeImpl(badToken);addAnyChild(t);t.setParent(this);return t;}\n"
        ],
        [
            "public LatvianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public EventSubscription removeSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {request = beforeClientExecution(request);return executeRemoveSourceIdentifierFromSubscription(request);}\n"
        ],
        [
            "public static TokenFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}\n"
        ],
        [
            "public AddAlbumPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"AddAlbumPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public GetThreatIntelSetResult getThreatIntelSet(GetThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeGetThreatIntelSet(request);}\n"
        ],
        [
            "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n"
        ],
        [
            "public boolean equals( Object o ) {return o instanceof ArmenianStemmer;}\n"
        ],
        [
            "public final boolean hasArray() {return protectedHasArray();}\n"
        ],
        [
            "public UpdateContributorInsightsResult updateContributorInsights(UpdateContributorInsightsRequest request) {request = beforeClientExecution(request);return executeUpdateContributorInsights(request);}\n"
        ],
        [
            "public void unwriteProtectWorkbook() {records.remove(fileShare);records.remove(writeProtect);fileShare = null;writeProtect = null;}\n"
        ],
        [
            "public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {super(dedup, analyzer);this.expand = expand;}\n"
        ],
        [
            "public RequestSpotInstancesResult requestSpotInstances(RequestSpotInstancesRequest request) {request = beforeClientExecution(request);return executeRequestSpotInstances(request);}\n"
        ],
        [
            "public byte[] getObjectData() {return findObjectRecord().getObjectData();}\n"
        ],
        [
            "public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {request = beforeClientExecution(request);return executeGetContactAttributes(request);}\n"
        ],
        [
            "public String toString() {return getKey() + \": \" + getValue(); }\n"
        ],
        [
            "public ListTextTranslationJobsResult listTextTranslationJobs(ListTextTranslationJobsRequest request) {request = beforeClientExecution(request);return executeListTextTranslationJobs(request);}\n"
        ],
        [
            "public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request) {request = beforeClientExecution(request);return executeGetContactMethods(request);}\n"
        ],
        [
            "public static short lookupIndexByName(String name) {FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);if (fd == null) {fd = getInstanceCetab().getFunctionByNameInternal(name);if (fd == null) {return -1;}}return (short) fd.getIndex();}\n"
        ],
        [
            "public DescribeAnomalyDetectorsResult describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {request = beforeClientExecution(request);return executeDescribeAnomalyDetectors(request);}\n"
        ],
        [
            "public static String insertId(String message, ObjectId changeId) {return insertId(message, changeId, false);}\n"
        ],
        [
            "public long getObjectSize(AnyObjectId objectId, int typeHint)throws MissingObjectException, IncorrectObjectTypeException,IOException {long sz = db.getObjectSize(this, objectId);if (sz < 0) {if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);throw new MissingObjectException(objectId.copy(), typeHint);}return sz;}\n"
        ],
        [
            "public ImportInstallationMediaResult importInstallationMedia(ImportInstallationMediaRequest request) {request = beforeClientExecution(request);return executeImportInstallationMedia(request);}\n"
        ],
        [
            "public PutLifecycleEventHookExecutionStatusResult putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {request = beforeClientExecution(request);return executePutLifecycleEventHookExecutionStatus(request);}\n"
        ],
        [
            "public NumberPtg(LittleEndianInput in)  {this(in.readDouble());}\n"
        ],
        [
            "public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryptionConfig(request);}\n"
        ],
        [
            "public DescribeDetectorResult describeDetector(DescribeDetectorRequest request) {request = beforeClientExecution(request);return executeDescribeDetector(request);}\n"
        ],
        [
            "public ReportInstanceStatusResult reportInstanceStatus(ReportInstanceStatusRequest request) {request = beforeClientExecution(request);return executeReportInstanceStatus(request);}\n"
        ],
        [
            "public DeleteAlarmResult deleteAlarm(DeleteAlarmRequest request) {request = beforeClientExecution(request);return executeDeleteAlarm(request);}\n"
        ],
        [
            "public TokenStream create(TokenStream input) {return new PortugueseStemFilter(input);}\n"
        ],
        [
            "public FtCblsSubRecord() {reserved = new byte[ENCODED_SIZE];}\n"
        ],
        [
            "@Override public boolean remove(Object object) {synchronized (mutex) {return c.remove(object);}}\n"
        ],
        [
            "public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) {request = beforeClientExecution(request);return executeGetDedicatedIp(request);}\n"
        ],
        [
            "public String toString() {return precedence + \" >= _p\";}\n"
        ],
        [
            "public ListStreamProcessorsResult listStreamProcessors(ListStreamProcessorsRequest request) {request = beforeClientExecution(request);return executeListStreamProcessors(request);}\n"
        ],
        [
            "public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}\n"
        ],
        [
            "public WindowProtectRecord(int options) {_options = options;}\n"
        ],
        [
            "public UnbufferedCharStream(int bufferSize) {n = 0;data = new int[bufferSize];}\n"
        ],
        [
            "public GetOperationsResult getOperations(GetOperationsRequest request) {request = beforeClientExecution(request);return executeGetOperations(request);}\n"
        ],
        [
            "public void copyRawTo(byte[] b, int o) {NB.encodeInt32(b, o, w1);NB.encodeInt32(b, o + 4, w2);NB.encodeInt32(b, o + 8, w3);NB.encodeInt32(b, o + 12, w4);NB.encodeInt32(b, o + 16, w5);}\n"
        ],
        [
            "public WindowOneRecord(RecordInputStream in) {field_1_h_hold            = in.readShort();field_2_v_hold            = in.readShort();field_3_width             = in.readShort();field_4_height            = in.readShort();field_5_options           = in.readShort();field_6_active_sheet      = in.readShort();field_7_first_visible_tab = in.readShort();field_8_num_selected_tabs = in.readShort();field_9_tab_width_ratio   = in.readShort();}\n"
        ],
        [
            "public StopWorkspacesResult stopWorkspaces(StopWorkspacesRequest request) {request = beforeClientExecution(request);return executeStopWorkspaces(request);}\n"
        ],
        [
            "public void close() throws IOException {if (isOpen) {isOpen = false;try {dump();} finally {try {channel.truncate(fileLength);} finally {try {channel.close();} finally {fos.close();}}}}}\n"
        ],
        [
            "public DescribeMatchmakingRuleSetsResult describeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmakingRuleSets(request);}\n"
        ],
        [
            "public String getPronunciation(int wordId, char surface[], int off, int len) {return null; }\n"
        ],
        [
            "public String getPath() {return pathStr;}\n"
        ],
        [
            "public static double devsq(double[] v) {double r = Double.NaN;if (v!=null && v.length >= 1) {double m = 0;double s = 0;int n = v.length;for (int i=0; i<n; i++) {s += v[i];}m = s / n;s = 0;for (int i=0; i<n; i++) {s += (v[i]- m) * (v[i] - m);}r = (n == 1)? 0: s;}return r;}\n"
        ],
        [
            "public DescribeResizeResult describeResize(DescribeResizeRequest request) {request = beforeClientExecution(request);return executeDescribeResize(request);}\n"
        ],
        [
            "public final boolean hasPassedThroughNonGreedyDecision() {return passedThroughNonGreedyDecision;}\n"
        ],
        [
            "public int end() {return end(0);}\n"
        ],
        [
            "public void traverse(CellHandler handler) {int firstRow = range.getFirstRow();int lastRow = range.getLastRow();int firstColumn = range.getFirstColumn();int lastColumn = range.getLastColumn();final int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();Row currentRow = null;Cell currentCell = null;for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {currentRow = sheet.getRow(ctx.rowNumber);if (currentRow == null) {continue;}for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {currentCell = currentRow.getCell(ctx.colNumber);if (currentCell == null) {continue;}if (isEmpty(currentCell) && !traverseEmptyCells) {continue;}long rowSize = ArithmeticUtils.mulAndCheck((long)ArithmeticUtils.subAndCheck(ctx.rowNumber, firstRow), (long)width);ctx.ordinalNumber = ArithmeticUtils.addAndCheck(rowSize, (ctx.colNumber - firstColumn + 1));handler.onCell(currentCell, ctx);}}}\n"
        ],
        [
            "public int getReadIndex() {return pos;}\n"
        ],
        [
            "public int compareTo(ScoreTerm other) {if (this.boost == other.boost)return other.bytes.get().compareTo(this.bytes.get());elsereturn Float.compare(this.boost, other.boost);}\n"
        ],
        [
            "public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE: len = delete(s, i, len);i--;break;default:break;}}return len;}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(_options);}\n"
        ],
        [
            "public DiagnosticErrorListener(boolean exactOnly) {this.exactOnly = exactOnly;}\n"
        ],
        [
            "public KeySchemaElement(String attributeName, KeyType keyType) {setAttributeName(attributeName);setKeyType(keyType.toString());}\n"
        ],
        [
            "public GetAssignmentResult getAssignment(GetAssignmentRequest request) {request = beforeClientExecution(request);return executeGetAssignment(request);}\n"
        ],
        [
            "public boolean hasObject(AnyObjectId id) {return findOffset(id) != -1;}\n"
        ],
        [
            "public GroupingSearch setAllGroups(boolean allGroups) {this.allGroups = allGroups;return this;}\n"
        ],
        [
            "public synchronized void setMultiValued(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.multiValued = v;}\n"
        ],
        [
            "public int getCellsVal() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0) {size++;}}return size;}\n"
        ],
        [
            "public DeleteVoiceConnectorResult deleteVoiceConnector(DeleteVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnector(request);}\n"
        ],
        [
            "public DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLifecyclePolicy(request);}\n"
        ],
        [
            "public void write(byte[] b) {int len = b.length;checkPosition(len);System.arraycopy(b, 0, _buf, _writeIndex, len);_writeIndex += len;}\n"
        ],
        [
            "public RebaseResult getRebaseResult() {return this.rebaseResult;}\n"
        ],
        [
            "public static int getNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) {for (int i = 0; i < usableBitSetSizes.length; i++) {int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation);if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {return usableBitSetSizes[i];}}return -1;}\n"
        ],
        [
            "public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {request = beforeClientExecution(request);return executeDescribeDashboard(request);}\n"
        ],
        [
            "public CreateSegmentResult createSegment(CreateSegmentRequest request) {request = beforeClientExecution(request);return executeCreateSegment(request);}\n"
        ],
        [
            "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[DBCELL]\\n\");buffer.append(\"    .rowoffset = \").append(HexDump.intToHex(field_1_row_offset)).append(\"\\n\");for (int k = 0; k < field_2_cell_offsets.length; k++) {buffer.append(\"    .cell_\").append(k).append(\" = \").append(HexDump.shortToHex(field_2_cell_offsets[ k ])).append(\"\\n\");}buffer.append(\"[/DBCELL]\\n\");return buffer.toString();}\n"
        ],
        [
            "public List<String> getUndeletedList() {return undeletedList;}\n"
        ],
        [
            "public String toString() {return \"[INTERFACEEND/]\\n\";}\n"
        ],
        [
            "public MergeScheduler clone() {return this;}\n"
        ],
        [
            "public PlainTextDictionary(Reader reader) {in = new BufferedReader(reader);}\n"
        ],
        [
            "public StringBuilder append(CharSequence csq) {if (csq == null) {appendNull();} else {append0(csq, 0, csq.length());}return this;}\n"
        ],
        [
            "public ListAssociatedStacksResult listAssociatedStacks(ListAssociatedStacksRequest request) {request = beforeClientExecution(request);return executeListAssociatedStacks(request);}\n"
        ],
        [
            "public static double avedev(double[] v) {double r = 0;double m = 0;double s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += v[i];}m = s / v.length;s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += Math.abs(v[i]-m);}r = s / v.length;return r;}\n"
        ],
        [
            "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n"
        ],
        [
            "public GetDiskResult getDisk(GetDiskRequest request) {request = beforeClientExecution(request);return executeGetDisk(request);}\n"
        ],
        [
            "public DBClusterParameterGroup createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBClusterParameterGroup(request);}\n"
        ],
        [
            "public static CharBuffer wrap(char[] array, int start, int charCount) {Arrays.checkOffsetAndCount(array.length, start, charCount);CharBuffer buf = new ReadWriteCharArrayBuffer(array);buf.position = start;buf.limit = start + charCount;return buf;}\n"
        ],
        [
            "public SubmoduleStatusType getType() {return type;}\n"
        ],
        [
            "public DescribeGameServerGroupResult describeGameServerGroup(DescribeGameServerGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGameServerGroup(request);}\n"
        ],
        [
            "public Pattern pattern() {return pattern;}\n"
        ],
        [
            "public V setValue(V object) {throw new UnsupportedOperationException();}\n"
        ],
        [
            "public StringBuilder stem(CharSequence word) {CharSequence cmd = stemmer.getLastOnPath(word);if (cmd == null)return null;buffer.setLength(0);buffer.append(word);Diff.apply(buffer, cmd);if (buffer.length() > 0)return buffer;elsereturn null;}\n"
        ],
        [
            "public RenameFaceRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public char requireChar(Map<String,String> args, String name) {return require(args, name).charAt(0);}\n"
        ],
        [
            "public static String toStringTree(Tree t) {return toStringTree(t, (List<String>)null);}\n"
        ],
        [
            "public String toString() {return \"<deleted/>\";}\n"
        ],
        [
            "public GetRepoWebhookLogListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoWebhookLogList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs\");setMethod(MethodType.GET);}\n"
        ],
        [
            "public GetJobUnlockCodeResult getJobUnlockCode(GetJobUnlockCodeRequest request) {request = beforeClientExecution(request);return executeGetJobUnlockCode(request);}\n"
        ],
        [
            "public RemoveTagsRequest(String resourceId) {setResourceId(resourceId);}\n"
        ],
        [
            "public short getGB2312Id(char ch) {try {byte[] buffer = Character.toString(ch).getBytes(\"GB2312\");if (buffer.length != 2) {return -1;}int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1);} catch (UnsupportedEncodingException e) {throw new RuntimeException(e);}}\n"
        ],
        [
            "public BatchRefUpdate addCommand(Collection<ReceiveCommand> cmd) {commands.addAll(cmd);return this;}\n"
        ],
        [
            "public short checkExternSheet(int sheetNumber){return (short)getOrCreateLinkTable().checkExternSheet(sheetNumber);}\n"
        ],
        [
            "@Override public boolean equals(Object object) {return c.equals(object);}\n"
        ],
        [
            "public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {AnyQueryNode andNode = (AnyQueryNode) queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = andNode.getChildren();if (children != null) {for (QueryNode child : children) {Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null) {Query query = (Query) obj;try {bQuery.add(query, BooleanClause.Occur.SHOULD);} catch (TooManyClauses ex) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements());return bQuery.build();}\n"
        ],
        [
            "public DescribeStreamProcessorResult describeStreamProcessor(DescribeStreamProcessorRequest request) {request = beforeClientExecution(request);return executeDescribeStreamProcessor(request);}\n"
        ],
        [
            "public DescribeDashboardPermissionsResult describeDashboardPermissions(DescribeDashboardPermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeDashboardPermissions(request);}\n"
        ],
        [
            "public Ref peel(Ref ref) {try {return getRefDatabase().peel(ref);} catch (IOException e) {return ref;}}\n"
        ],
        [
            "public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES     + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(blocks);}\n"
        ],
        [
            "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}\n"
        ],
        [
            "public DescribeStackEventsResult describeStackEvents(DescribeStackEventsRequest request) {request = beforeClientExecution(request);return executeDescribeStackEvents(request);}\n"
        ],
        [
            "public void setRule(int idx, ConditionalFormattingRule cfRule){setRule(idx, (HSSFConditionalFormattingRule)cfRule);}\n"
        ],
        [
            "public CreateResolverRuleResult createResolverRule(CreateResolverRuleRequest request) {request = beforeClientExecution(request);return executeCreateResolverRule(request);}\n"
        ],
        [
            "public SeriesIndexRecord(RecordInputStream in) {field_1_index = in.readShort();}\n"
        ],
        [
            "public GetStylesRequest() {super(\"lubancloud\", \"2018-05-09\", \"GetStyles\", \"luban\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_gridset_flag);}\n"
        ],
        [
            "public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (getClass() != obj.getClass()) {return false;}Toffs other = (Toffs) obj;if (getStartOffset() != other.getStartOffset()) {return false;}if (getEndOffset() != other.getEndOffset()) {return false;}return true;}\n"
        ],
        [
            "public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeCreateGatewayGroup(request);}\n"
        ],
        [
            "public CreateParticipantConnectionResult createParticipantConnection(CreateParticipantConnectionRequest request) {request = beforeClientExecution(request);return executeCreateParticipantConnection(request);}\n"
        ],
        [
            "public static double irr(double[] income) {return irr(income, 0.1d);}\n"
        ],
        [
            "public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeRegisterWorkspaceDirectory(request);}\n"
        ],
        [
            "public RevertCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}\n"
        ],
        [
            "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String iNumber = OperandResolver.coerceValueToString(veText1);Matcher m = COMPLEX_NUMBER_PATTERN.matcher(iNumber);boolean result = m.matches();String imaginary = \"\";if (result) {String imaginaryGroup = m.group(5);boolean hasImaginaryPart = imaginaryGroup.equals(\"i\") || imaginaryGroup.equals(\"j\");if (imaginaryGroup.length() == 0) {return new StringEval(String.valueOf(0));}if (hasImaginaryPart) {String sign = \"\";String imaginarySign = m.group(GROUP3_IMAGINARY_SIGN);if (imaginarySign.length() != 0 && !(imaginarySign.equals(\"+\"))) {sign = imaginarySign;}String groupImaginaryNumber = m.group(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE);if (groupImaginaryNumber.length() != 0) {imaginary = sign + groupImaginaryNumber;} else {imaginary = sign + \"1\";}}} else {return ErrorEval.NUM_ERROR;}return new StringEval(imaginary);}\n"
        ],
        [
            "public E pollLast() {Map.Entry<E, Object> entry = backingMap.pollLastEntry();return (entry == null) ? null : entry.getKey();}\n"
        ],
        [
            "public int readUShort(){int ch1 = readUByte();int ch2 = readUByte();return (ch2 << 8) + (ch1 << 0);}\n"
        ],
        [
            "public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {setSnapshotId(snapshotId);setAttribute(attribute.toString());setOperationType(operationType.toString());}\n"
        ],
        [
            "public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {request = beforeClientExecution(request);return executeListBonusPayments(request);}\n"
        ],
        [
            "public V get(CharSequence cs) {if(cs == null)throw new NullPointerException();return null;}\n"
        ],
        [
            "public TokenFilter create(TokenStream input) {CommonGramsFilter commonGrams = (CommonGramsFilter) super.create(input);return new CommonGramsQueryFilter(commonGrams);}\n"
        ],
        [
            "public String getPath() {return path;}\n"
        ],
        [
            "public InitiateMultipartUploadResult initiateMultipartUpload(InitiateMultipartUploadRequest request) {request = beforeClientExecution(request);return executeInitiateMultipartUpload(request);}\n"
        ],
        [
            "public StringBuilder insert(int offset, int i) {insert0(offset, Integer.toString(i));return this;}\n"
        ],
        [
            "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (int) ((block >>> shift) & 3);}}}\n"
        ],
        [
            "public TokenStream create(TokenStream input) {return new ElisionFilter(input, articles);}\n"
        ],
        [
            "public boolean eat(Row in, int remap[]) {int sum = 0;for (Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {Cell c = i.next();sum += c.cnt;if (c.ref >= 0) {if (remap[c.ref] == 0) {c.ref = -1;}}}int frame = sum / 10;boolean live = false;for (Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {Cell c = i.next();if (c.cnt < frame && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.ref >= 0) {live |= true;}}return !live;}\n"
        ],
        [
            "final public Token getToken(int index) {Token t = jj_lookingAhead ? jj_scanpos : token;for (int i = 0; i < index; i++) {if (t.next != null) t = t.next;else t = t.next = token_source.getNextToken();}return t;}\n"
        ],
        [
            "public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(\" [ARRAY]\\n\");sb.append(\" range=\").append(getRange()).append(\"\\n\");sb.append(\" options=\").append(HexDump.shortToHex(_options)).append(\"\\n\");sb.append(\" notUsed=\").append(HexDump.intToHex(_field3notUsed)).append(\"\\n\");sb.append(\" formula:\").append(\"\\n\");Ptg[] ptgs = _formula.getTokens();for (int i = 0; i < ptgs.length; i++) {Ptg ptg = ptgs[i];sb.append(ptg).append(ptg.getRVAType()).append(\"\\n\");}sb.append(\"]\");return sb.toString();}\n"
        ],
        [
            "public GetFolderResult getFolder(GetFolderRequest request) {request = beforeClientExecution(request);return executeGetFolder(request);}\n"
        ],
        [
            "@Override public void add(int location, E object) {throw new UnsupportedOperationException();}\n"
        ],
        [
            "public PositiveScoresOnlyCollector(Collector in) {super(in);}\n"
        ],
        [
            "public CreateRepoBuildRuleRequest() {super(\"cr\", \"2016-06-07\", \"CreateRepoBuildRule\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");setMethod(MethodType.PUT);}\n"
        ],
        [
            "public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}\n"
        ],
        [
            "public DrawingManager2( EscherDggRecord dgg ) {this.dgg = dgg;}\n"
        ],
        [
            "public void reset() {if (!first())reset(raw);}\n"
        ],
        [
            "public final CharsetDecoder reset() {status = INIT;implReset();return this;}\n"
        ],
        [
            "public BufferedReader(Reader in, int size) {super(in);if (size <= 0) {throw new IllegalArgumentException(\"size <= 0\");}this.in = in;buf = new char[size];}\n"
        ],
        [
            "public DescribeCodeRepositoryResult describeCodeRepository(DescribeCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeDescribeCodeRepository(request);}\n"
        ],
        [
            "public DBSubnetGroup createDBSubnetGroup(CreateDBSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBSubnetGroup(request);}\n"
        ],
        [
            "public RenameBranchCommand setOldName(String oldName) {checkCallable();this.oldName = oldName;return this;}\n"
        ],
        [
            "public DeleteBranchCommand setForce(boolean force) {checkCallable();this.force = force;return this;}\n"
        ],
        [
            "public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request) {request = beforeClientExecution(request);return executeStopCompilationJob(request);}\n"
        ],
        [
            "public synchronized final void incrementSecondaryProgressBy(int diff) {setSecondaryProgress(mSecondaryProgress + diff);}\n"
        ],
        [
            "public int[] clear() {return bytesStart = null;}\n"
        ],
        [
            "public String getRawPath() {return path;}\n"
        ],
        [
            "public GetUserSourceAccountRequest() {super(\"cr\", \"2016-06-07\", \"GetUserSourceAccount\", \"cr\");setUriPattern(\"/users/sourceAccount\");setMethod(MethodType.GET);}\n"
        ],
        [
            "public CreateExportJobResult createExportJob(CreateExportJobRequest request) {request = beforeClientExecution(request);return executeCreateExportJob(request);}\n"
        ],
        [
            "public CreateDedicatedIpPoolResult createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {request = beforeClientExecution(request);return executeCreateDedicatedIpPool(request);}\n"
        ],
        [
            "public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (obj instanceof HSSFCellStyle) {final HSSFCellStyle other = (HSSFCellStyle) obj;if (_format == null) {if (other._format != null) {return false;}} else if (!_format.equals(other._format)) {return false;}if (_index != other._index) {return false;}return true;}return false;}\n"
        ],
        [
            "public ReleaseHostsResult releaseHosts(ReleaseHostsRequest request) {request = beforeClientExecution(request);return executeReleaseHosts(request);}\n"
        ],
        [
            "public boolean equals(Object object) {if (this == object) {return true;}if (object instanceof Set) {Set<?> s = (Set<?>) object;try {return size() == s.size() && containsAll(s);} catch (NullPointerException ignored) {return false;} catch (ClassCastException ignored) {return false;}}return false;}\n"
        ],
        [
            "public void setRefLogMessage(String msg, boolean appendStatus) {customRefLog = true;if (msg == null && !appendStatus) {disableRefLog();} else if (msg == null && appendStatus) {refLogMessage = \"\"; refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}}\n"
        ],
        [
            "public StreamIDRecord(RecordInputStream in) {idstm = in.readShort();}\n"
        ],
        [
            "public RecognizeCarRequest() {super(\"visionai-poc\", \"2020-04-08\", \"RecognizeCar\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public final ByteOrder order() {return ByteOrder.nativeOrder();}\n"
        ],
        [
            "public int getAheadCount() {return aheadCount;}\n"
        ],
        [
            "public boolean isNewFragment() {return false;}\n"
        ],
        [
            "public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {request = beforeClientExecution(request);return executeGetCloudFrontOriginAccessIdentityConfig(request);}\n"
        ],
        [
            "public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return label == symbol;}\n"
        ],
        [
            "public DeleteTransitGatewayResult deleteTransitGateway(DeleteTransitGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGateway(request);}\n"
        ],
        [
            "public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} elsereturn array;}\n"
        ],
        [
            "public CreateTransactionRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"CreateTransaction\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public BatchRefUpdate setRefLogIdent(PersonIdent pi) {refLogIdent = pi;return this;}\n"
        ],
        [
            "public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplateData(request);}\n"
        ],
        [
            "public ParseInfo(ProfilingATNSimulator atnSimulator) {this.atnSimulator = atnSimulator;}\n"
        ],
        [
            "public SimpleQQParser(String qqNames[], String indexField) {this.qqNames = qqNames;this.indexField = indexField;}\n"
        ],
        [
            "public DBCluster promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {request = beforeClientExecution(request);return executePromoteReadReplicaDBCluster(request);}\n"
        ],
        [
            "public DescribeCapacityReservationsResult describeCapacityReservations(DescribeCapacityReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeCapacityReservations(request);}\n"
        ],
        [
            "public String toString() {return \"IndexSearcher(\" + reader + \"; executor=\" + executor + \"; sliceExecutionControlPlane \" + sliceExecutor + \")\";}\n"
        ],
        [
            "public final boolean incrementToken() {return false;}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(main + 1);out.writeShort(subFrom);out.writeShort(subTo);}\n"
        ],
        [
            "public void decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) {if (bitsPerValue > 32) {throw new UnsupportedOperationException(\"Cannot decode \" + bitsPerValue + \"-bits values into an int[]\");}for (int i = 0; i < iterations; ++i) {final long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(block, values, valuesOffset);}}\n"
        ],
        [
            "public boolean isExpectedToken(int symbol) {ATN atn = getInterpreter().atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states.get(getState());IntervalSet following = atn.nextTokens(s);if (following.contains(symbol)) {return true;}if ( !following.contains(Token.EPSILON) ) return false;while ( ctx!=null && ctx.invokingState>=0 && following.contains(Token.EPSILON) ) {ATNState invokingState = atn.states.get(ctx.invokingState);RuleTransition rt = (RuleTransition)invokingState.transition(0);following = atn.nextTokens(rt.followState);if (following.contains(symbol)) {return true;}ctx = (ParserRuleContext)ctx.parent;}if ( following.contains(Token.EPSILON) && symbol == Token.EOF ) {return true;}return false;}\n"
        ],
        [
            "public UpdateStreamResult updateStream(UpdateStreamRequest request) {request = beforeClientExecution(request);return executeUpdateStream(request);}\n"
        ],
        [
            "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;} catch (EvaluationException e) {int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());return new NumberEval(result);}}\n"
        ],
        [
            "public String toString() {return getClass().getName() + \" [\" + _index + \" \" + _name + \"]\";}\n"
        ],
        [
            "public ListAssignmentsForHITResult listAssignmentsForHIT(ListAssignmentsForHITRequest request) {request = beforeClientExecution(request);return executeListAssignmentsForHIT(request);}\n"
        ],
        [
            "public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {request = beforeClientExecution(request);return executeDeleteAccessControlRule(request);}\n"
        ],
        [
            "public Arc<Long> getFirstArc(FST.Arc<Long> arc) {return fst.getFirstArc(arc);}\n"
        ],
        [
            "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16) {values[valuesOffset++] = (int) ((block >>> shift) & 65535);}}}\n"
        ],
        [
            "public long skip(long charCount) throws IOException {if (charCount < 0) {throw new IllegalArgumentException(\"charCount < 0: \" + charCount);}synchronized (lock) {checkNotClosed();if (charCount == 0) {return 0;}long inSkipped;int availableFromBuffer = buf.length - pos;if (availableFromBuffer > 0) {long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0) {pos += charCount;return charCount;}pos += availableFromBuffer;inSkipped = in.skip(requiredFromIn);} else {inSkipped = in.skip(charCount);}return inSkipped + availableFromBuffer;}}\n"
        ],
        [
            "public Map<String, Ref> getRefsMap() {return advertisedRefs;}\n"
        ],
        [
            "public UpdateApiKeyResult updateApiKey(UpdateApiKeyRequest request) {request = beforeClientExecution(request);return executeUpdateApiKey(request);}\n"
        ],
        [
            "public ObjectStream openStream() throws MissingObjectException, IOException {PackInputStream packIn;@SuppressWarnings(\"resource\")DfsReader ctx = db.newReader();try {try {packIn = new PackInputStream(pack, objectOffset + headerLength, ctx);ctx = null; } catch (IOException packGone) {ObjectId obj = pack.getReverseIdx(ctx).findObject(objectOffset);return ctx.open(obj, type).openStream();}} finally {if (ctx != null) {ctx.close();}}int bufsz = 8192;InputStream in = new BufferedInputStream(new InflaterInputStream(packIn, packIn.ctx.inflater(), bufsz),bufsz);return new ObjectStream.Filter(type, size, in);}\n"
        ],
        [
            "public ArrayList() {array = EmptyArray.OBJECT;}\n"
        ],
        [
            "public UpdateDetectorVersionResult updateDetectorVersion(UpdateDetectorVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDetectorVersion(request);}\n"
        ],
        [
            "public void resize(){resize(Double.MAX_VALUE);}\n"
        ],
        [
            "public RevFlagSet(Collection<RevFlag> s) {this();addAll(s);}\n"
        ],
        [
            "public int size() {return size;}\n"
        ],
        [
            "public final long getLong() {int newPosition = position + SizeOf.LONG;if (newPosition > limit) {throw new BufferUnderflowException();}long result = Memory.peekLong(backingArray, offset + position, order);position = newPosition;return result;}\n"
        ],
        [
            "public StringBuilder insert(int offset, long l) {insert0(offset, Long.toString(l));return this;}\n"
        ],
        [
            "public TurkishLowerCaseFilter(TokenStream in) {super(in);}\n"
        ],
        [
            "public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}\n"
        ],
        [
            "public void addIfNoOverlap( WeightedPhraseInfo wpi ){for( WeightedPhraseInfo existWpi : getPhraseList() ){if( existWpi.isOffsetOverlap( wpi ) ) {existWpi.getTermsInfos().addAll( wpi.getTermsInfos() );return;}}getPhraseList().add( wpi );}\n"
        ],
        [
            "public ThreeWayMerger newMerger(Repository db) {return new InCoreMerger(db);}\n"
        ],
        [
            "public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;}\n"
        ],
        [
            "public Collection<ParseTree> evaluate(ParseTree t) {return Trees.findAllRuleNodes(t, ruleIndex);}\n"
        ],
        [
            "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[CFRULE]\\n\");buffer.append(\"    .condition_type   =\").append(getConditionType()).append(\"\\n\");buffer.append(\"    OPTION FLAGS=0x\").append(Integer.toHexString(getOptions())).append(\"\\n\");if (containsFontFormattingBlock()) {buffer.append(_fontFormatting).append(\"\\n\");}if (containsBorderFormattingBlock()) {buffer.append(_borderFormatting).append(\"\\n\");}if (containsPatternFormattingBlock()) {buffer.append(_patternFormatting).append(\"\\n\");}buffer.append(\"    Formula 1 =\").append(Arrays.toString(getFormula1().getTokens())).append(\"\\n\");buffer.append(\"    Formula 2 =\").append(Arrays.toString(getFormula2().getTokens())).append(\"\\n\");buffer.append(\"[/CFRULE]\\n\");return buffer.toString();}\n"
        ],
        [
            "public DescribeServiceUpdatesResult describeServiceUpdates(DescribeServiceUpdatesRequest request) {request = beforeClientExecution(request);return executeDescribeServiceUpdates(request);}\n"
        ],
        [
            "public String getNameName(int index){return getNameAt(index).getNameName();}\n"
        ],
        [
            "public DescribeLocationsResult describeLocations() {return describeLocations(new DescribeLocationsRequest());}\n"
        ],
        [
            "public String toString() {return \"<phraseslop value='\" + getValueString() + \"'>\" + \"\\n\"+ getChild().toString() + \"\\n</phraseslop>\";}\n"
        ],
        [
            "public DirCacheEntry getDirCacheEntry() {return currentSubtree == null ? currentEntry : null;}\n"
        ],
        [
            "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n"
        ],
        [
            "public void trimToSize() {int s = size;if (s == array.length) {return;}if (s == 0) {array = EmptyArray.OBJECT;} else {Object[] newArray = new Object[s];System.arraycopy(array, 0, newArray, 0, s);array = newArray;}modCount++;}\n"
        ],
        [
            "public DescribeLocalGatewayVirtualInterfacesResult describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayVirtualInterfaces(request);}\n"
        ],
        [
            "public TokenStream create(TokenStream input) {return new RussianLightStemFilter(input);}\n"
        ],
        [
            "public int [] toArray(final int [] a){int[] rval;if (a.length == _limit){System.arraycopy(_array, 0, a, 0, _limit);rval = a;}else{rval = toArray();}return rval;}\n"
        ],
        [
            "public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken,long roleSessionDurationSeconds) {if (accessKeyId == null) {throw new IllegalArgumentException(\"Access key ID cannot be null.\");}if (accessKeySecret == null) {throw new IllegalArgumentException(\"Access key secret cannot be null.\");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;this.sessionStartedTimeInMilliSeconds = System.currentTimeMillis();}\n"
        ],
        [
            "public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) {if (shortCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, shortCount);position += shortCount;return this;}\n"
        ],
        [
            "public ActivateEventSourceResult activateEventSource(ActivateEventSourceRequest request) {request = beforeClientExecution(request);return executeActivateEventSource(request);}\n"
        ],
        [
            "public DescribeReceiptRuleSetResult describeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeDescribeReceiptRuleSet(request);}\n"
        ],
        [
            "public Filter(String name) {setName(name);}\n"
        ],
        [
            "public DoubleBuffer put(double c) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public CreateTrafficPolicyInstanceResult createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicyInstance(request);}\n"
        ],
        [
            "public JapaneseIterationMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKana) {super(input);this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.reset(input);}\n"
        ],
        [
            "public void writeLong(long v) {writeInt((int)(v >>  0));writeInt((int)(v >> 32));}\n"
        ],
        [
            "public FileResolver() {exports = new ConcurrentHashMap<>();exportBase = new CopyOnWriteArrayList<>();}\n"
        ],
        [
            "public ValueEval getRef3DEval(Ref3DPxg rptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}\n"
        ],
        [
            "public DeleteDatasetResult deleteDataset(DeleteDatasetRequest request) {request = beforeClientExecution(request);return executeDeleteDataset(request);}\n"
        ],
        [
            "public StartRelationalDatabaseResult startRelationalDatabase(StartRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeStartRelationalDatabase(request);}\n"
        ],
        [
            "public DescribeReservedCacheNodesOfferingsResult describeReservedCacheNodesOfferings() {return describeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());}\n"
        ],
        [
            "static public double pmt(double r, int nper, double pv, double fv, int type) {return -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + r*type) * (Math.pow(1 + r, nper) - 1));}\n"
        ],
        [
            "public DescribeDocumentVersionsResult describeDocumentVersions(DescribeDocumentVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeDocumentVersions(request);}\n"
        ],
        [
            "public ListPublishingDestinationsResult listPublishingDestinations(ListPublishingDestinationsRequest request) {request = beforeClientExecution(request);return executeListPublishingDestinations(request);}\n"
        ],
        [
            "public DeleteAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}\n"
        ],
        [
            "public static long[] grow(long[] array) {return grow(array, 1 + array.length);}\n"
        ],
        [
            "public String outputToString(Object output) {if (!(output instanceof List)) {return outputs.outputToString((T) output);} else {List<T> outputList = (List<T>) output;StringBuilder b = new StringBuilder();b.append('[');for(int i=0;i<outputList.size();i++) {if (i > 0) {b.append(\", \");}b.append(outputs.outputToString(outputList.get(i)));}b.append(']');return b.toString();}}\n"
        ],
        [
            "public void notifyDeleteCell(Cell cell) {_bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell));}\n"
        ],
        [
            "public StringBuilder replace(int start, int end, String str) {replace0(start, end, str);return this;}\n"
        ],
        [
            "public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolConfiguration(request);}\n"
        ],
        [
            "public static double kthSmallest(double[] v, int k) {double r = Double.NaN;int index = k-1; if (v!=null && v.length > index && index >= 0) {Arrays.sort(v);r = v[index];}return r;}\n"
        ],
        [
            "public void set(int index, long value) {final int o = index >>> 5;final int b = index & 31;final int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}\n"
        ],
        [
            "public String toString() {if (getChildren() == null || getChildren().size() == 0)return \"<boolean operation='and'/>\";StringBuilder sb = new StringBuilder();sb.append(\"<boolean operation='and'>\");for (QueryNode child : getChildren()) {sb.append(\"\\n\");sb.append(child.toString());}sb.append(\"\\n</boolean>\");return sb.toString();}\n"
        ],
        [
            "public int sumTokenSizes(int fromIx, int toIx) {int result = 0;for (int i=fromIx; i<toIx; i++) {result += _ptgs[i].getSize();}return result;}\n"
        ],
        [
            "public void setReadonly(boolean readonly) {if ( this.readonly && !readonly ) throw new IllegalStateException(\"can't alter readonly IntervalSet\");this.readonly = readonly;}\n"
        ],
        [
            "public final void clearConsumingCell(FormulaCellCacheEntry cce) {if(!_consumingCells.remove(cce)) {throw new IllegalStateException(\"Specified formula cell is not consumed by this cell\");}}\n"
        ],
        [
            "@Override public List<E> subList(int start, int end) {synchronized (mutex) {return new SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);}}\n"
        ],
        [
            "public FileHeader getFileHeader() {return file;}\n"
        ],
        [
            "public AttachLoadBalancersResult attachLoadBalancers(AttachLoadBalancersRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancers(request);}\n"
        ],
        [
            "public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {setAccountId(accountId);setVaultName(vaultName);setJobParameters(jobParameters);}\n"
        ],
        [
            "public String toString() {return \"SPL\";}\n"
        ],
        [
            "public ReplaceableAttribute(String name, String value, Boolean replace) {setName(name);setValue(value);setReplace(replace);}\n"
        ],
        [
            "public final void add(IndexableField field) {fields.add(field);}\n"
        ],
        [
            "public DeleteStackSetResult deleteStackSet(DeleteStackSetRequest request) {request = beforeClientExecution(request);return executeDeleteStackSet(request);}\n"
        ],
        [
            "public GetRepoBuildRuleListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoBuildRuleList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");setMethod(MethodType.GET);}\n"
        ],
        [
            "public SparseArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new Object[initialCapacity];mSize = 0;}\n"
        ],
        [
            "public InvokeServiceRequest() {super(\"industry-brain\", \"2018-07-12\", \"InvokeService\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public ListAlbumPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ListAlbumPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public boolean hasPrevious() {return link != list.voidLink;}\n"
        ],
        [
            "public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteHsmConfiguration(request);}\n"
        ],
        [
            "public CreateLoadBalancerRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}\n"
        ],
        [
            "public String getUserInfo() {return decode(userInfo);}\n"
        ],
        [
            "public TagAttendeeResult tagAttendee(TagAttendeeRequest request) {request = beforeClientExecution(request);return executeTagAttendee(request);}\n"
        ],
        [
            "public String getRefName() {return name;}\n"
        ],
        [
            "public SpanNearQuery build() {return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]), slop, ordered);}\n"
        ],
        [
            "public boolean isSubTotal(int rowIndex, int columnIndex) {return false;}\n"
        ],
        [
            "public DescribeDBProxiesResult describeDBProxies(DescribeDBProxiesRequest request) {request = beforeClientExecution(request);return executeDescribeDBProxies(request);}\n"
        ],
        [
            "public GetVoiceConnectorProxyResult getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorProxy(request);}\n"
        ],
        [
            "public WindowCacheConfig fromConfig(Config rc) {setPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CORE_SECTION,CONFIG_KEY_PACKED_GIT_USE_STRONGREFS,isPackedGitUseStrongRefs()));setPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_OPENFILES, getPackedGitOpenFiles()));setPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_LIMIT, getPackedGitLimit()));setPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_WINDOWSIZE, getPackedGitWindowSize()));setPackedGitMMAP(rc.getBoolean(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_MMAP, isPackedGitMMAP()));setDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit()));long maxMem = Runtime.getRuntime().maxMemory();long sft = rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_STREAM_FILE_TRESHOLD, getStreamFileThreshold());sft = Math.min(sft, maxMem / 4); sft = Math.min(sft, Integer.MAX_VALUE); setStreamFileThreshold((int) sft);return this;}\n"
        ],
        [
            "public static Date getJavaDate(double date) {return getJavaDate(date, false, null, false);}\n"
        ],
        [
            "public StartPersonTrackingResult startPersonTracking(StartPersonTrackingRequest request) {request = beforeClientExecution(request);return executeStartPersonTracking(request);}\n"
        ],
        [
            "@Override public int size() {return totalSize;}\n"
        ],
        [
            "public GetRouteResult getRoute(GetRouteRequest request) {request = beforeClientExecution(request);return executeGetRoute(request);}\n"
        ],
        [
            "public DeleteClusterResult deleteCluster(DeleteClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCluster(request);}\n"
        ],
        [
            "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[MMS]\\n\");buffer.append(\"    .addMenu        = \").append(Integer.toHexString(getAddMenuCount())).append(\"\\n\");buffer.append(\"    .delMenu        = \").append(Integer.toHexString(getDelMenuCount())).append(\"\\n\");buffer.append(\"[/MMS]\\n\");return buffer.toString();}\n"
        ],
        [
            "public FileBasedConfig(Config base, File cfgLocation, FS fs) {super(base);configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}\n"
        ],
        [
            "public int following(int pos) {if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {throw new IllegalArgumentException(\"offset out of bounds\");} else if (0 == sentenceStarts.length) {text.setIndex(text.getBeginIndex());return DONE;} else if (pos >= sentenceStarts[sentenceStarts.length - 1]) {text.setIndex(text.getEndIndex());currentSentence = sentenceStarts.length - 1;return DONE;} else { currentSentence = (sentenceStarts.length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2);text.setIndex(sentenceStarts[++currentSentence]);return current();}}\n"
        ],
        [
            "public UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request) {request = beforeClientExecution(request);return executeUpdateParameterGroup(request);}\n"
        ],
        [
            "public SeriesChartGroupIndexRecord clone() {return copy();}\n"
        ],
        [
            "public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {if (distErrPct < 0 || distErrPct > 0.5) {throw new IllegalArgumentException(\"distErrPct \" + distErrPct + \" must be between [0 to 0.5]\");}if (distErrPct == 0 || shape instanceof Point) {return 0;}Rectangle bbox = shape.getBoundingBox();Point ctr = bbox.getCenter();double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY());double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y);return diagonalDist * distErrPct;}\n"
        ],
        [
            "public int codePointAt(int index) {if (index < 0 || index >= count) {throw indexAndLength(index);}return Character.codePointAt(value, index, count);}\n"
        ],
        [
            "public void setPasswordVerifier(int passwordVerifier) {this.passwordVerifier = passwordVerifier;}\n"
        ],
        [
            "public ListVaultsRequest(String accountId) {setAccountId(accountId);}\n"
        ],
        [
            "public SquashMessageFormatter() {dateFormatter = new GitDateFormatter(Format.DEFAULT);}\n"
        ],
        [
            "public GetVideoCoverRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetVideoCover\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public int lastIndexOf(Object object) {int pos = size;Link<E> link = voidLink.previous;if (object != null) {while (link != voidLink) {pos--;if (object.equals(link.data)) {return pos;}link = link.previous;}} else {while (link != voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}}return -1;}\n"
        ],
        [
            "public DescribeSpotFleetRequestsResult describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeDescribeSpotFleetRequests(request);}\n"
        ],
        [
            "public IndexFacesResult indexFaces(IndexFacesRequest request) {request = beforeClientExecution(request);return executeIndexFaces(request);}\n"
        ],
        [
            "public RuleBasedBreakIterator getBreakIterator(int script) {switch(script) {case UScript.JAPANESE: return (RuleBasedBreakIterator)cjkBreakIterator.clone();case UScript.MYANMAR:if (myanmarAsWords) {return (RuleBasedBreakIterator)defaultBreakIterator.clone();} else {return (RuleBasedBreakIterator)myanmarSyllableIterator.clone();}default: return (RuleBasedBreakIterator)defaultBreakIterator.clone();}}\n"
        ],
        [
            "public String toString(){StringBuilder b = new StringBuilder();b.append(\"[DCONREF]\\n\");b.append(\"    .ref\\n\");b.append(\"        .firstrow   = \").append(firstRow).append(\"\\n\");b.append(\"        .lastrow    = \").append(lastRow).append(\"\\n\");b.append(\"        .firstcol   = \").append(firstCol).append(\"\\n\");b.append(\"        .lastcol    = \").append(lastCol).append(\"\\n\");b.append(\"    .cch            = \").append(charCount).append(\"\\n\");b.append(\"    .stFile\\n\");b.append(\"        .h          = \").append(charType).append(\"\\n\");b.append(\"        .rgb        = \").append(getReadablePath()).append(\"\\n\");b.append(\"[/DCONREF]\\n\");return b.toString();}\n"
        ],
        [
            "public int getPackedGitOpenFiles() {return packedGitOpenFiles;}\n"
        ],
        [
            "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FEATURE HEADER]\\n\");buffer.append(\"[/FEATURE HEADER]\\n\");return buffer.toString();}\n"
        ],
        [
            "public static byte[] getToUnicodeLE(String string) {return string.getBytes(UTF16LE);}\n"
        ],
        [
            "public final List<String> getFooterLines(String keyName) {return getFooterLines(new FooterKey(keyName));}\n"
        ],
        [
            "public void refresh() {super.refresh();clearReferences();}\n"
        ],
        [
            "public float get(int index) {checkIndex(index);return byteBuffer.getFloat(index * SizeOf.FLOAT);}\n"
        ],
        [
            "public DeleteDetectorResult deleteDetector(DeleteDetectorRequest request) {request = beforeClientExecution(request);return executeDeleteDetector(request);}\n"
        ],
        [
            "public int[] grow() {assert bytesStart != null;return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);}\n"
        ],
        [
            "public ListExclusionsResult listExclusions(ListExclusionsRequest request) {request = beforeClientExecution(request);return executeListExclusions(request);}\n"
        ],
        [
            "public static SpatialStrategy getSpatialStrategy(int roundNumber) {SpatialStrategy result = spatialStrategyCache.get(roundNumber);if (result == null) {throw new IllegalStateException(\"Strategy should have been init'ed by SpatialDocMaker by now\");}return result;}\n"
        ],
        [
            "public DBCluster restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {request = beforeClientExecution(request);return executeRestoreDBClusterToPointInTime(request);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_categoryDataType);out.writeShort(field_2_valuesDataType);out.writeShort(field_3_numCategories);out.writeShort(field_4_numValues);out.writeShort(field_5_bubbleSeriesType);out.writeShort(field_6_numBubbleValues);}\n"
        ],
        [
            "public PostAgentProfileResult postAgentProfile(PostAgentProfileRequest request) {request = beforeClientExecution(request);return executePostAgentProfile(request);}\n"
        ],
        [
            "public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {if ( getTokenStream()!=null ) {TokenSource tokenSource = getTokenStream().getTokenSource();if ( tokenSource instanceof Lexer ) {Lexer lexer = (Lexer)tokenSource;return compileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new UnsupportedOperationException(\"Parser can't discover a lexer to use\");}\n"
        ],
        [
            "public BacktrackDBClusterResult backtrackDBCluster(BacktrackDBClusterRequest request) {request = beforeClientExecution(request);return executeBacktrackDBCluster(request);}\n"
        ],
        [
            "public String getName() {return strategyName;}\n"
        ],
        [
            "public void copyTo(byte[] b, int o) {formatHexByte(b, o + 0, w1);formatHexByte(b, o + 8, w2);formatHexByte(b, o + 16, w3);formatHexByte(b, o + 24, w4);formatHexByte(b, o + 32, w5);}\n"
        ],
        [
            "public static final IntList lineMap(byte[] buf, int ptr, int end) {IntList map = new IntList((end - ptr) / 36);map.fillTo(1, Integer.MIN_VALUE);for (; ptr < end; ptr = nextLF(buf, ptr)) {map.add(ptr);}map.add(end);return map;}\n"
        ],
        [
            "public Set<ObjectId> getAdditionalHaves() {return Collections.emptySet();}\n"
        ],
        [
            "public synchronized long ramBytesUsed() {long sizeInBytes = BASE_RAM_BYTES_USED + fields.size() * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;for(SimpleTextTerms simpleTextTerms : termsCache.values()) {sizeInBytes += (simpleTextTerms!=null) ? simpleTextTerms.ramBytesUsed() : 0;}return sizeInBytes;}\n"
        ],
        [
            "public String toXml(String tab) {StringBuilder builder = new StringBuilder();builder.append(tab).append(\"<\").append(getRecordName()).append(\">\\n\");for (EscherRecord escherRecord : getEscherRecords()) {builder.append(escherRecord.toXml(tab + \"\\t\"));}builder.append(tab).append(\"</\").append(getRecordName()).append(\">\\n\");return builder.toString();}\n"
        ],
        [
            "public TokenStream create(TokenStream input) {return new GalicianMinimalStemFilter(input);}\n"
        ],
        [
            "public String toString() {StringBuilder r = new StringBuilder();r.append(\"Commit\");r.append(\"={\\n\");r.append(\"tree \");r.append(treeId != null ? treeId.name() : \"NOT_SET\");r.append(\"\\n\");for (ObjectId p : parentIds) {r.append(\"parent \");r.append(p.name());r.append(\"\\n\");}r.append(\"author \");r.append(author != null ? author.toString() : \"NOT_SET\");r.append(\"\\n\");r.append(\"committer \");r.append(committer != null ? committer.toString() : \"NOT_SET\");r.append(\"\\n\");r.append(\"gpgSignature \");r.append(gpgSignature != null ? gpgSignature.toString() : \"NOT_SET\");r.append(\"\\n\");if (encoding != null && !References.isSameObject(encoding, UTF_8)) {r.append(\"encoding \");r.append(encoding.name());r.append(\"\\n\");}r.append(\"\\n\");r.append(message != null ? message : \"\");r.append(\"}\");return r.toString();}\n"
        ],
        [
            "public IndicNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public OptionGroup createOptionGroup(CreateOptionGroupRequest request) {request = beforeClientExecution(request);return executeCreateOptionGroup(request);}\n"
        ],
        [
            "public AssociateMemberAccountResult associateMemberAccount(AssociateMemberAccountRequest request) {request = beforeClientExecution(request);return executeAssociateMemberAccount(request);}\n"
        ],
        [
            "public void run() {doRefreshProgress(mId, mProgress, mFromUser, true);mRefreshProgressRunnable = this;}\n"
        ],
        [
            "public SetTerminationProtectionResult setTerminationProtection(SetTerminationProtectionRequest request) {request = beforeClientExecution(request);return executeSetTerminationProtection(request);}\n"
        ],
        [
            "public String getErrorHeader(RecognitionException e) {int line = e.getOffendingToken().getLine();int charPositionInLine = e.getOffendingToken().getCharPositionInLine();return \"line \"+line+\":\"+charPositionInLine;}\n"
        ],
        [
            "public CharBuffer asReadOnlyBuffer() {CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}\n"
        ],
        [
            "public StopSentimentDetectionJobResult stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopSentimentDetectionJob(request);}\n"
        ],
        [
            "public ObjectIdSubclassMap<ObjectId> getNewObjectIds() {if (newObjectIds != null)return newObjectIds;return new ObjectIdSubclassMap<>();}\n"
        ],
        [
            "public void clear() {hash = hash(new byte[0]);super.clear();}\n"
        ],
        [
            "public void reset() throws IOException {synchronized (lock) {checkNotClosed();if (mark == -1) {throw new IOException(\"Invalid mark\");}pos = mark;}}\n"
        ],
        [
            "public RefErrorPtg(LittleEndianInput in)  {field_1_reserved = in.readInt();}\n"
        ],
        [
            "public SuspendGameServerGroupResult suspendGameServerGroup(SuspendGameServerGroupRequest request) {request = beforeClientExecution(request);return executeSuspendGameServerGroup(request);}\n"
        ],
        [
            "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}\n"
        ],
        [
            "public GetRepoRequest() {super(\"cr\", \"2016-06-07\", \"GetRepo\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]\");setMethod(MethodType.GET);}\n"
        ],
        [
            "public void setDate(Date date) {if (date != null) {setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND));} else {this.date = null;}}\n"
        ],
        [
            "public TokenStream create(TokenStream input) {return new GermanMinimalStemFilter(input);}\n"
        ],
        [
            "public Object[] toArray() {return a.clone();}\n"
        ],
        [
            "public void write(char[] buffer, int offset, int len) {Arrays.checkOffsetAndCount(buffer.length, offset, len);synchronized (lock) {expand(len);System.arraycopy(buffer, offset, this.buf, this.count, len);this.count += len;}}\n"
        ],
        [
            "public static final RevFilter after(Date ts) {return after(ts.getTime());}\n"
        ],
        [
            "public DeleteGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}\n"
        ],
        [
            "public DeregisterTransitGatewayMulticastGroupMembersResult deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeDeregisterTransitGatewayMulticastGroupMembers(request);}\n"
        ],
        [
            "public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {request = beforeClientExecution(request);return executeBatchDeleteScheduledAction(request);}\n"
        ],
        [
            "public CreateAlgorithmResult createAlgorithm(CreateAlgorithmRequest request) {request = beforeClientExecution(request);return executeCreateAlgorithm(request);}\n"
        ],
        [
            "public int readUByte() {return readByte() & 0x00FF;}\n"
        ],
        [
            "public void setLength(int sz) {NB.encodeInt32(info, infoOffset + P_SIZE, sz);}\n"
        ],
        [
            "public DescribeScalingProcessTypesResult describeScalingProcessTypes() {return describeScalingProcessTypes(new DescribeScalingProcessTypesRequest());}\n"
        ],
        [
            "public ListResourceRecordSetsResult listResourceRecordSets(ListResourceRecordSetsRequest request) {request = beforeClientExecution(request);return executeListResourceRecordSets(request);}\n"
        ],
        [
            "public Token recoverInline(Parser recognizer)throws RecognitionException{InputMismatchException e = new InputMismatchException(recognizer);for (ParserRuleContext context = recognizer.getContext(); context != null; context = context.getParent()) {context.exception = e;}throw new ParseCancellationException(e);}\n"
        ],
        [
            "public SetTagsForResourceResult setTagsForResource(SetTagsForResourceRequest request) {request = beforeClientExecution(request);return executeSetTagsForResource(request);}\n"
        ],
        [
            "public ModifyStrategyRequest() {super(\"CloudCallCenter\", \"2017-07-05\", \"ModifyStrategy\", \"CloudCallCenter\", \"innerAPI\");}\n"
        ],
        [
            "public DescribeVpcEndpointServicesResult describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServices(request);}\n"
        ],
        [
            "public EnableLoggingResult enableLogging(EnableLoggingRequest request) {request = beforeClientExecution(request);return executeEnableLogging(request);}\n"
        ],
        [
            "public boolean contains(Object o) {return ConcurrentHashMap.this.containsValue(o);}\n"
        ],
        [
            "public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {super(bookName, firstSheetIdentifier);_lastSheetIdentifier = lastSheetIdentifier;}\n"
        ],
        [
            "public DomainMetadataRequest(String domainName) {setDomainName(domainName);}\n"
        ],
        [
            "public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) {super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));this.currentToken = currentTokenVal;this.expectedTokenSequences = expectedTokenSequencesVal;this.tokenImage = tokenImageVal;}\n"
        ],
        [
            "public FetchPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public PrintWriter writer() {return writer;}\n"
        ],
        [
            "public NGramTokenizerFactory(Map<String, String> args) {super(args);minGramSize = getInt(args, \"minGramSize\", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = getInt(args, \"maxGramSize\", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public boolean isDirectoryFileConflict() {return dfConflict != null;}\n"
        ],
        [
            "public IndonesianStemFilter(TokenStream input, boolean stemDerivational) {super(input);this.stemDerivational = stemDerivational;}\n"
        ],
        [
            "public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicy(request);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeInt(fSD);out.writeInt(passwordVerifier);StringUtil.writeUnicodeString(out, title);out.write(securityDescriptor);}\n"
        ],
        [
            "public static double floor(double n, double s) {if (s==0 && n!=0) {return Double.NaN;} else {return (n==0 || s==0) ? 0 : Math.floor(n/s) * s;}}\n"
        ],
        [
            "public ByteArrayDataOutput(byte[] bytes, int offset, int len) {reset(bytes, offset, len);}\n"
        ],
        [
            "public static List<Tree> getChildren(Tree t) {List<Tree> kids = new ArrayList<Tree>();for (int i=0; i<t.getChildCount(); i++) {kids.add(t.getChild(i));}return kids;}\n"
        ],
        [
            "public void clear() {Hashtable.this.clear();}\n"
        ],
        [
            "public RefreshAllRecord(boolean refreshAll) {this(0);setRefreshAll(refreshAll);}\n"
        ],
        [
            "public DeleteNamedQueryResult deleteNamedQuery(DeleteNamedQueryRequest request) {request = beforeClientExecution(request);return executeDeleteNamedQuery(request);}\n"
        ],
        [
            "public GraphvizFormatter(ConnectionCosts costs) {this.costs = costs;this.bestPathMap = new HashMap<>();sb.append(formatHeader());sb.append(\"  init [style=invis]\\n\");sb.append(\"  init -> 0.0 [label=\\\"\" + BOS_LABEL + \"\\\"]\\n\");}\n"
        ],
        [
            "public CheckMultiagentRequest() {super(\"visionai-poc\", \"2020-04-08\", \"CheckMultiagent\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public ListUserProfilesResult listUserProfiles(ListUserProfilesRequest request) {request = beforeClientExecution(request);return executeListUserProfiles(request);}\n"
        ],
        [
            "public CreateRelationalDatabaseFromSnapshotResult createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseFromSnapshot(request);}\n"
        ],
        [
            "public StartTaskResult startTask(StartTaskRequest request) {request = beforeClientExecution(request);return executeStartTask(request);}\n"
        ],
        [
            "public Set<String> getIgnoredPaths() {return ignoredPaths;}\n"
        ],
        [
            "public FeatSmartTag(RecordInputStream in) {data = in.readRemainder();}\n"
        ],
        [
            "public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {setAction(action.toString());setResourceRecordSet(resourceRecordSet);}\n"
        ],
        [
            "public DeleteImageResult deleteImage(DeleteImageRequest request) {request = beforeClientExecution(request);return executeDeleteImage(request);}\n"
        ],
        [
            "public CreateConfigurationSetResult createConfigurationSet(CreateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSet(request);}\n"
        ],
        [
            "public Iterator<E> iterator() {Object[] snapshot = elements;return new CowIterator<E>(snapshot, 0, snapshot.length);}\n"
        ],
        [
            "public void visitContainedRecords(RecordVisitor rv) {if (_recs.isEmpty()) {return;}rv.visitRecord(_bofRec);for (int i = 0; i < _recs.size(); i++) {RecordBase rb = _recs.get(i);if (rb instanceof RecordAggregate) {((RecordAggregate) rb).visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) rb);}}rv.visitRecord(EOFRecord.instance);}\n"
        ],
        [
            "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[FtCbls ]\").append(\"\\n\");buffer.append(\"  size     = \").append(getDataSize()).append(\"\\n\");buffer.append(\"  reserved = \").append(HexDump.toHex(reserved)).append(\"\\n\");buffer.append(\"[/FtCbls ]\").append(\"\\n\");return buffer.toString();}\n"
        ],
        [
            "public static BATBlock createEmptyBATBlock(final POIFSBigBlockSize bigBlockSize, boolean isXBAT) {BATBlock block = new BATBlock(bigBlockSize);if(isXBAT) {final int _entries_per_xbat_block = bigBlockSize.getXBATEntriesPerBlock();block._values[ _entries_per_xbat_block ] = POIFSConstants.END_OF_CHAIN;}return block;}\n"
        ],
        [
            "public TagResourceResult tagResource(TagResourceRequest request) {request = beforeClientExecution(request);return executeTagResource(request);}\n"
        ],
        [
            "public DeleteMailboxPermissionsResult deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executeDeleteMailboxPermissions(request);}\n"
        ],
        [
            "public ListDatasetGroupsResult listDatasetGroups(ListDatasetGroupsRequest request) {request = beforeClientExecution(request);return executeListDatasetGroups(request);}\n"
        ],
        [
            "public ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request) {request = beforeClientExecution(request);return executeResumeProcesses(request);}\n"
        ],
        [
            "public GetPersonTrackingResult getPersonTracking(GetPersonTrackingRequest request) {request = beforeClientExecution(request);return executeGetPersonTracking(request);}\n"
        ],
        [
            "public String toFormulaString(String[] operands) {if(space.isSet(_options)) {return operands[ 0 ];} else if (optiIf.isSet(_options)) {return toFormulaString() + \"(\" + operands[0] + \")\";} else if (optiSkip.isSet(_options)) {return toFormulaString() + operands[0];   } else {return toFormulaString() + \"(\" + operands[0] + \")\";}}\n"
        ],
        [
            "public T merge(T first, T second) {throw new UnsupportedOperationException();}\n"
        ],
        [
            "public String toString() {return this.message.getKey() + \": \" + getLocalizedMessage();}\n"
        ],
        [
            "public XPath(Parser parser, String path) {this.parser = parser;this.path = path;elements = split(path);}\n"
        ],
        [
            "public CreateAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}\n"
        ],
        [
            "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}\n"
        ],
        [
            "public PushConnection openPush() throws TransportException {return new TcpPushConnection();}\n"
        ],
        [
            "public static void strcpy(char[] dst, int di, char[] src, int si) {while (src[si] != 0) {dst[di++] = src[si++];}dst[di] = 0;}\n"
        ],
        [
            "@Override public K getKey() {return mapEntry.getKey();}\n"
        ],
        [
            "public static int numNonnull(Object[] data) {int n = 0;if ( data == null ) return n;for (Object o : data) {if ( o!=null ) n++;}return n;}\n"
        ],
        [
            "public void add(int location, E object) {if (location >= 0 && location <= size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}Link<E> previous = link.previous;Link<E> newLink = new Link<E>(object, previous, link);previous.next = newLink;link.previous = newLink;size++;modCount++;} else {throw new IndexOutOfBoundsException();}}\n"
        ],
        [
            "public DescribeDomainResult describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}\n"
        ],
        [
            "public void flush() throws IOException {super.flush();}\n"
        ],
        [
            "public PersianCharFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public boolean incrementToken() {if (used) {return false;}clearAttributes();termAttribute.append(value);offsetAttribute.setOffset(0, length);used = true;return true;}\n"
        ],
        [
            "public static FloatBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteFloatArrayBuffer(capacity);}\n"
        ],
        [
            "public final Edit after(Edit cut) {return new Edit(cut.endA, endA, cut.endB, endB);}\n"
        ],
        [
            "public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request) {request = beforeClientExecution(request);return executeUpdateRuleVersion(request);}\n"
        ],
        [
            "public ListVoiceConnectorTerminationCredentialsResult listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectorTerminationCredentials(request);}\n"
        ],
        [
            "public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {request = beforeClientExecution(request);return executeGetDeploymentTarget(request);}\n"
        ],
        [
            "public void setNoChildReport() {letChildReport  = false;for (final PerfTask task : tasks) {if (task instanceof TaskSequence) {((TaskSequence)task).setNoChildReport();}}}\n"
        ],
        [
            "public E get(int location) {try {return a[location];} catch (ArrayIndexOutOfBoundsException e) {throw java.util.ArrayList.throwIndexOutOfBoundsException(location, a.length);}}\n"
        ],
        [
            "public DescribeDataSetResult describeDataSet(DescribeDataSetRequest request) {request = beforeClientExecution(request);return executeDescribeDataSet(request);}\n"
        ],
        [
            "public SkipWorkTreeFilter(int treeIdx) {this.treeIdx = treeIdx;}\n"
        ],
        [
            "public DescribeNetworkInterfacesResult describeNetworkInterfaces() {return describeNetworkInterfaces(new DescribeNetworkInterfacesRequest());}\n"
        ],
        [
            "public final boolean contains(int row, int col) {return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col;}\n"
        ],
        [
            "public String toString() {return new String(this.chars);}\n"
        ],
        [
            "public PatchType getPatchType() {return patchType;}\n"
        ],
        [
            "public Iterator<K> iterator() {return new KeyIterator();}\n"
        ],
        [
            "public CreateScriptResult createScript(CreateScriptRequest request) {request = beforeClientExecution(request);return executeCreateScript(request);}\n"
        ],
        [
            "public BytesRef next() {termUpto++;if (termUpto >= info.terms.size()) {return null;} else {info.terms.get(info.sortedTerms[termUpto], br);return br;}}\n"
        ],
        [
            "public String outputToString(CharsRef output) {return output.toString();}\n"
        ],
        [
            "public AssociateWebsiteAuthorizationProviderResult associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {request = beforeClientExecution(request);return executeAssociateWebsiteAuthorizationProvider(request);}\n"
        ],
        [
            "public void unpop(RevCommit c) {Block b = head;if (b == null) {b = free.newBlock();b.resetToMiddle();b.add(c);head = b;tail = b;return;} else if (b.canUnpop()) {b.unpop(c);return;}b = free.newBlock();b.resetToEnd();b.unpop(c);b.next = head;head = b;}\n"
        ],
        [
            "public EdgeNGramTokenizerFactory(Map<String, String> args) {super(args);minGramSize = getInt(args, \"minGramSize\", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);maxGramSize = getInt(args, \"maxGramSize\", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public ModifyDBParameterGroupRequest(String dBParameterGroupName, java.util.List<Parameter> parameters) {setDBParameterGroupName(dBParameterGroupName);setParameters(parameters);}\n"
        ],
        [
            "public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) {request = beforeClientExecution(request);return executeGetHostedZoneLimit(request);}\n"
        ],
        [
            "public void set(int index, long value) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}\n"
        ],
        [
            "public RevFilter clone() {return new PatternSearch(pattern());}\n"
        ],
        [
            "public String toString() {return \"spans(\" + term.toString() + \")@\" +(doc == -1 ? \"START\" : (doc == NO_MORE_DOCS) ? \"ENDDOC\": doc + \" - \" + (position == NO_MORE_POSITIONS ? \"ENDPOS\" : position));}\n"
        ],
        [
            "public boolean canAppendMatch() {for (Head head : heads) {if (head != LastHead.INSTANCE) {return true;}}return false;}\n"
        ],
        [
            "public synchronized int lastIndexOf(String subString, int start) {return super.lastIndexOf(subString, start);}\n"
        ],
        [
            "public DeleteNetworkAclEntryResult deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkAclEntry(request);}\n"
        ],
        [
            "public AssociateMemberToGroupResult associateMemberToGroup(AssociateMemberToGroupRequest request) {request = beforeClientExecution(request);return executeAssociateMemberToGroup(request);}\n"
        ],
        [
            "public static final int committer(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; if (ptr < sz && b[ptr] == 'a')ptr = nextLF(b, ptr);return match(b, ptr, committer);}\n"
        ],
        [
            "public int getLineNumber() { return row; }\n"
        ],
        [
            "public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}\n"
        ],
        [
            "public GetPushTemplateResult getPushTemplate(GetPushTemplateRequest request) {request = beforeClientExecution(request);return executeGetPushTemplate(request);}\n"
        ],
        [
            "public DescribeVaultResult describeVault(DescribeVaultRequest request) {request = beforeClientExecution(request);return executeDescribeVault(request);}\n"
        ],
        [
            "public DescribeVpcPeeringConnectionsResult describeVpcPeeringConnections() {return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());}\n"
        ],
        [
            "public ByteBuffer putLong(int index, long value) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) {request = beforeClientExecution(request);return executeRegisterDevice(request);}\n"
        ],
        [
            "public static Format byId(int id) {for (Format format : Format.values()) {if (format.getId() == id) {return format;}}throw new IllegalArgumentException(\"Unknown format id: \" + id);}\n"
        ],
        [
            "public DeleteAppResult deleteApp(DeleteAppRequest request) {request = beforeClientExecution(request);return executeDeleteApp(request);}\n"
        ],
        [
            "public GetBaiduChannelResult getBaiduChannel(GetBaiduChannelRequest request) {request = beforeClientExecution(request);return executeGetBaiduChannel(request);}\n"
        ],
        [
            "public FST.BytesReader getBytesReader() {return fst.getBytesReader();}\n"
        ],
        [
            "public static boolean isValidSchemeChar(int index, char c) {if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {return true;}if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {return true;}return false;}\n"
        ],
        [
            "public ListAppliedSchemaArnsResult listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListAppliedSchemaArns(request);}\n"
        ],
        [
            "public String name() {return this.name;}\n"
        ],
        [
            "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length < 1) {return ErrorEval.VALUE_INVALID;}boolean isA1style;String text;try {ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());text = OperandResolver.coerceValueToString(ve);switch (args.length) {case 1:isA1style = true;break;case 2:isA1style = evaluateBooleanArg(args[1], ec);break;default:return ErrorEval.VALUE_INVALID;}} catch (EvaluationException e) {return e.getErrorEval();}return evaluateIndirect(ec, text, isA1style);}\n"
        ],
        [
            "public final int compareTo(int[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, bs[p]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, bs[p + 1]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, bs[p + 2]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, bs[p + 3]);if (cmp != 0)return cmp;return NB.compareUInt32(w5, bs[p + 4]);}\n"
        ],
        [
            "public void removeName(int index){names.remove(index);workbook.removeName(index);}\n"
        ],
        [
            "public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {setQueueUrl(queueUrl);setAttributeNames(attributeNames);}\n"
        ],
        [
            "public static boolean[] copyOf(boolean[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}\n"
        ],
        [
            "public static void setEnabled(boolean enabled) {ENABLED = enabled;}\n"
        ],
        [
            "public DeleteLogPatternResult deleteLogPattern(DeleteLogPatternRequest request) {request = beforeClientExecution(request);return executeDeleteLogPattern(request);}\n"
        ],
        [
            "public boolean contains(char[] text, int off, int len) {return map.containsKey(text, off, len);}\n"
        ],
        [
            "public int getFirstSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber);}\n"
        ],
        [
            "public boolean handles(String commandLine) {return command.length() + 1 < commandLine.length()&& commandLine.charAt(command.length()) == ' '&& commandLine.startsWith(command);}\n"
        ],
        [
            "public static void register(MergeStrategy imp) {register(imp.getName(), imp);}\n"
        ],
        [
            "public long ramBytesUsed() {return BASE_RAM_BYTES_USED + ((index!=null)? index.ramBytesUsed() : 0);}\n"
        ],
        [
            "public HostedZone(String id, String name, String callerReference) {setId(id);setName(name);setCallerReference(callerReference);}\n"
        ],
        [
            "public GetFindingsResult getFindings(GetFindingsRequest request) {request = beforeClientExecution(request);return executeGetFindings(request);}\n"
        ],
        [
            "public DescribeTopicsDetectionJobResult describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeTopicsDetectionJob(request);}\n"
        ],
        [
            "public boolean processMatch(ValueEval eval) {if(eval instanceof NumericValueEval) {if(minimumValue == null) { minimumValue = eval;} else { double currentValue = ((NumericValueEval)eval).getNumberValue();double oldValue = ((NumericValueEval)minimumValue).getNumberValue();if(currentValue < oldValue) {minimumValue = eval;}}}return true;}\n"
        ],
        [
            "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_len_ref_subexpression);}\n"
        ],
        [
            "public static void main(String[] args) throws IOException {boolean printTree = false;String path = null;for(int i=0;i<args.length;i++) {if (args[i].equals(\"-printTree\")) {printTree = true;} else {path = args[i];}}if (args.length != (printTree ? 2 : 1)) {System.out.println(\"\\nUsage: java -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxononmy/index\\n\");System.exit(1);}Directory dir = FSDirectory.open(Paths.get(path));TaxonomyReader r = new DirectoryTaxonomyReader(dir);printStats(r, System.out, printTree);r.close();dir.close();}\n"
        ],
        [
            "public void setByteValue(byte value) {if (!(fieldsData instanceof Byte)) {throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to Byte\");}fieldsData = Byte.valueOf(value);}\n"
        ],
        [
            "public static int initialize() {return initialize(DEFAULT_SEED);}\n"
        ],
        [
            "public CachingDoubleValueSource(DoubleValuesSource source) {this.source = source;cache = new HashMap<>();}\n"
        ],
        [
            "public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {setAttributeName(attributeName);setAttributeType(attributeType.toString());}\n"
        ],
        [
            "public static String join(Collection<String> parts, String separator) {return StringUtils.join(parts, separator, separator);}\n"
        ],
        [
            "public ListTaskDefinitionFamiliesResult listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {request = beforeClientExecution(request);return executeListTaskDefinitionFamilies(request);}\n"
        ],
        [
            "public ListComponentsResult listComponents(ListComponentsRequest request) {request = beforeClientExecution(request);return executeListComponents(request);}\n"
        ],
        [
            "public ActivatePhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ActivatePhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public CreateMatchmakingRuleSetResult createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {request = beforeClientExecution(request);return executeCreateMatchmakingRuleSet(request);}\n"
        ],
        [
            "public ListAvailableManagementCidrRangesResult listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {request = beforeClientExecution(request);return executeListAvailableManagementCidrRanges(request);}\n"
        ],
        [
            "public ObjectIdSubclassMap<ObjectId> getBaseObjectIds() {if (baseObjectIds != null)return baseObjectIds;return new ObjectIdSubclassMap<>();}\n"
        ],
        [
            "public DeletePushTemplateResult deletePushTemplate(DeletePushTemplateRequest request) {request = beforeClientExecution(request);return executeDeletePushTemplate(request);}\n"
        ],
        [
            "public CreateDomainEntryResult createDomainEntry(CreateDomainEntryRequest request) {request = beforeClientExecution(request);return executeCreateDomainEntry(request);}\n"
        ],
        [
            "public static int getEncodedSize(Object[] values) {int result = values.length * 1;for (Object value : values) {result += getEncodedSize(value);}return result;}\n"
        ],
        [
            "public OpenNLPTokenizerFactory(Map<String,String> args) {super(args);sentenceModelFile = require(args, SENTENCE_MODEL);tokenizerModelFile = require(args, TOKENIZER_MODEL);if ( ! args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public final int getInt(int index) {checkIndex(index, SizeOf.INT);return Memory.peekInt(backingArray, offset + index, order);}\n"
        ],
        [
            "public List<Head> getNextHeads(char c) {if (matches(c)) {return newHeads;}return FileNameMatcher.EMPTY_HEAD_LIST;}\n"
        ],
        [
            "public ByteBuffer putShort(short value) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public void writeUnshared(Object object) throws IOException {writeObject(object, true);}\n"
        ],
        [
            "public int offsetByCodePoints(int index, int codePointOffset) {return Character.offsetByCodePoints(value, 0, count, index,codePointOffset);}\n"
        ],
        [
            "public static int getUniqueAlt(Collection<BitSet> altsets) {BitSet all = getAlts(altsets);if ( all.cardinality()==1 ) return all.nextSetBit(0);return ATN.INVALID_ALT_NUMBER;}\n"
        ],
        [
            "public Date getWhen() {return new Date(when);}\n"
        ],
        [
            "public RuleTagToken(String ruleName, int bypassTokenType, String label) {if (ruleName == null || ruleName.isEmpty()) {throw new IllegalArgumentException(\"ruleName cannot be null or empty.\");}this.ruleName = ruleName;this.bypassTokenType = bypassTokenType;this.label = label;}\n"
        ],
        [
            "public DisableOrganizationAdminAccountResult disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {request = beforeClientExecution(request);return executeDisableOrganizationAdminAccount(request);}\n"
        ],
        [
            "public CreateRoomResult createRoom(CreateRoomRequest request) {request = beforeClientExecution(request);return executeCreateRoom(request);}\n"
        ],
        [
            "public ReplicationGroup deleteReplicationGroup(DeleteReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDeleteReplicationGroup(request);}\n"
        ],
        [
            "public final CharBuffer decode(ByteBuffer buffer) {try {return newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).decode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}\n"
        ],
        [
            "public Distribution(String id, String status, String domainName) {setId(id);setStatus(status);setDomainName(domainName);}\n"
        ],
        [
            "public final double[] array() {return protectedArray();}\n"
        ],
        [
            "public DateWindow1904Record(RecordInputStream in) {field_1_window = in.readShort();}\n"
        ],
        [
            "public DeleteDBSnapshotRequest(String dBSnapshotIdentifier) {setDBSnapshotIdentifier(dBSnapshotIdentifier);}\n"
        ],
        [
            "public final ParserExtension getExtension(String key) {return this.extensions.get(key);}\n"
        ],
        [
            "public void inform(ResourceLoader loader) {try {if (chunkerModelFile != null) {OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader);}} catch (IOException e) {throw new IllegalArgumentException(e);}}\n"
        ],
        [
            "public CompleteVaultLockResult completeVaultLock(CompleteVaultLockRequest request) {request = beforeClientExecution(request);return executeCompleteVaultLock(request);}\n"
        ],
        [
            "public final int[] getCharIntervals() {return points.clone();}\n"
        ],
        [
            "public long ramBytesUsed() {return values.ramBytesUsed()+ super.ramBytesUsed()+ Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}\n"
        ],
        [
            "public RegisterInstancesWithLoadBalancerResult registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {request = beforeClientExecution(request);return executeRegisterInstancesWithLoadBalancer(request);}\n"
        ],
        [
            "public DescribeClusterUserKubeconfigRequest() {super(\"CS\", \"2015-12-15\", \"DescribeClusterUserKubeconfig\", \"csk\");setUriPattern(\"/k8s/[ClusterId]/user_config\");setMethod(MethodType.GET);}\n"
        ],
        [
            "public PrecisionRecord(RecordInputStream in) {field_1_precision = in.readShort();}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(getLeftRowGutter());out.writeShort(getTopColGutter());out.writeShort(getRowLevelMax());out.writeShort(getColLevelMax());}\n"
        ],
        [
            "public DeleteVirtualInterfaceResult deleteVirtualInterface(DeleteVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeDeleteVirtualInterface(request);}\n"
        ],
        [
            "public Entry getEntry(String name) throws FileNotFoundException {if (excludes.contains(name)) {throw new FileNotFoundException(name);}Entry entry = directory.getEntry(name);return wrapEntry(entry);}\n"
        ],
        [
            "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[BACKUP]\\n\");buffer.append(\"    .backup          = \").append(Integer.toHexString(getBackup())).append(\"\\n\");buffer.append(\"[/BACKUP]\\n\");return buffer.toString();}\n"
        ],
        [
            "public DeleteVoiceConnectorOriginationResult deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorOrigination(request);}\n"
        ],
        [
            "public Appendable append(char c) {write(c);return this;}\n"
        ],
        [
            "public static long generationFromSegmentsFileName(String fileName) {if (fileName.equals(OLD_SEGMENTS_GEN)) {throw new IllegalArgumentException(\"\\\"\" + OLD_SEGMENTS_GEN + \"\\\" is not a valid segment file name since 4.0\");} else if (fileName.equals(IndexFileNames.SEGMENTS)) {return 0;} else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {return Long.parseLong(fileName.substring(1+IndexFileNames.SEGMENTS.length()),Character.MAX_RADIX);} else {throw new IllegalArgumentException(\"fileName \\\"\" + fileName + \"\\\" is not a segments file\");}}\n"
        ],
        [
            "public static TagOpt fromOption(String o) {if (o == null || o.length() == 0)return AUTO_FOLLOW;for (TagOpt tagopt : values()) {if (tagopt.option().equals(o))return tagopt;}throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTagOption, o));}\n"
        ],
        [
            "public StartContentModerationResult startContentModeration(StartContentModerationRequest request) {request = beforeClientExecution(request);return executeStartContentModeration(request);}\n"
        ],
        [
            "public static String quoteReplacement(String s) {StringBuilder result = new StringBuilder(s.length());for (int i = 0; i < s.length(); i++) {char c = s.charAt(i);if (c == '\\\\' || c == '$') {result.append('\\\\');}result.append(c);}return result.toString();}\n"
        ],
        [
            "public final void set(V newValue) {value = newValue;}\n"
        ],
        [
            "public QueryParserTokenManager(CharStream stream){input_stream = stream;}\n"
        ],
        [
            "public long valueFor(double elapsed) {double val;if (modBy == 0)val = elapsed / factor;elseval = elapsed / factor % modBy;if (type == '0')return Math.round(val);elsereturn (long) val;}\n"
        ],
        [
            "public LongBuffer get(long[] dst, int dstOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount);}this.position += longCount;return this;}\n"
        ],
        [
            "public void removeErrorListeners() {_listeners.clear();}\n"
        ],
        [
            "public CommonTokenStream(TokenSource tokenSource, int channel) {this(tokenSource);this.channel = channel;}\n"
        ],
        [
            "public ListObjectPoliciesResult listObjectPolicies(ListObjectPoliciesRequest request) {request = beforeClientExecution(request);return executeListObjectPolicies(request);}\n"
        ],
        [
            "public ObjectToPack(AnyObjectId src, int type) {super(src);flags = type << TYPE_SHIFT;}\n"
        ],
        [
            "public int stem(char s[], int len) {int numVowels = numVowels(s, len);for (int i = 0; i < affixes.length; i++) {Affix affix = affixes[i];if (numVowels > affix.vc && len >= affix.affix.length + 3 && endsWith(s, len, affix.affix)) {len -= affix.affix.length;return affix.palatalizes ? unpalatalize(s, len) : len;}}return len;}\n"
        ],
        [
            "public void recover(Parser recognizer, RecognitionException e) {if ( lastErrorIndex==recognizer.getInputStream().index() &&lastErrorStates != null &&lastErrorStates.contains(recognizer.getState()) ) {recognizer.consume();}lastErrorIndex = recognizer.getInputStream().index();if ( lastErrorStates==null ) lastErrorStates = new IntervalSet();lastErrorStates.add(recognizer.getState());IntervalSet followSet = getErrorRecoverySet(recognizer);consumeUntil(recognizer, followSet);}\n"
        ],
        [
            "public String toFormulaString() {String value = field_3_string;int len = value.length();StringBuilder sb = new StringBuilder(len + 4);sb.append(FORMULA_DELIMITER);for (int i = 0; i < len; i++) {char c = value.charAt(i);if (c == FORMULA_DELIMITER) {sb.append(FORMULA_DELIMITER);}sb.append(c);}sb.append(FORMULA_DELIMITER);return sb.toString();}\n"
        ],
        [
            "public UnlinkFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"UnlinkFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}\n"
        ],
        [
            "public ConfigurationOptionSetting(String namespace, String optionName, String value) {setNamespace(namespace);setOptionName(optionName);setValue(value);}\n"
        ],
        [
            "public CharSequence getFully(CharSequence key) {StringBuilder result = new StringBuilder(tries.size() * 2);for (int i = 0; i < tries.size(); i++) {CharSequence r = tries.get(i).getFully(key);if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) {return result;}result.append(r);}return result;}\n"
        ],
        [
            "public DescribeMountTargetSecurityGroupsResult describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeMountTargetSecurityGroups(request);}\n"
        ],
        [
            "public GetApiMappingResult getApiMapping(GetApiMappingRequest request) {request = beforeClientExecution(request);return executeGetApiMapping(request);}\n"
        ],
        [
            "public HttpRequest(String strUrl) {super(strUrl);}\n"
        ],
        [
            "public MemFuncPtg(int subExprLen) {field_1_len_ref_subexpression = subExprLen;}\n"
        ],
        [
            "public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {TermStatsQueue tiq = null;if (field != null) {Terms terms = MultiTerms.getTerms(reader, field);if (terms == null) {throw new RuntimeException(\"field \" + field + \" not found\");}TermsEnum termsEnum = terms.iterator();tiq = new TermStatsQueue(numTerms, comparator);tiq.fill(field, termsEnum);} else {Collection<String> fields = FieldInfos.getIndexedFields(reader);if (fields.size() == 0) {throw new RuntimeException(\"no fields found for this index\");}tiq = new TermStatsQueue(numTerms, comparator);for (String fieldName : fields) {Terms terms = MultiTerms.getTerms(reader, fieldName);if (terms != null) {tiq.fill(fieldName, terms.iterator());}}}TermStats[] result = new TermStats[tiq.size()];int count = tiq.size() - 1;while (tiq.size() != 0) {result[count] = tiq.pop();count--;}return result;}\n"
        ],
        [
            "public DeleteApnsVoipChannelResult deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsVoipChannel(request);}\n"
        ],
        [
            "public ListFacesResult listFaces(ListFacesRequest request) {request = beforeClientExecution(request);return executeListFaces(request);}\n"
        ],
        [
            "public ShapeFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {this.ctx = ctx;this.from = from;this.provider = provider;this.multiplier = multiplier;}\n"
        ],
        [
            "public char get(int index) {checkIndex(index);return sequence.charAt(index);}\n"
        ],
        [
            "public UpdateConfigurationProfileResult updateConfigurationProfile(UpdateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationProfile(request);}\n"
        ],
        [
            "public DescribeLifecycleHooksResult describeLifecycleHooks(DescribeLifecycleHooksRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleHooks(request);}\n"
        ],
        [
            "public DescribeHostReservationsResult describeHostReservations(DescribeHostReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeHostReservations(request);}\n"
        ],
        [
            "public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {if ( outerContext==null ) outerContext = RuleContext.EMPTY;if ( outerContext.parent==null || outerContext==RuleContext.EMPTY ) {return PredictionContext.EMPTY;}PredictionContext parent = EMPTY;parent = PredictionContext.fromRuleContext(atn, outerContext.parent);ATNState state = atn.states.get(outerContext.invokingState);RuleTransition transition = (RuleTransition)state.transition(0);return SingletonPredictionContext.create(parent, transition.followState.stateNumber);}\n"
        ],
        [
            "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SXVDEX]\\n\");buffer.append(\"    .grbit1 =\").append(HexDump.intToHex(_grbit1)).append(\"\\n\");buffer.append(\"    .grbit2 =\").append(HexDump.byteToHex(_grbit2)).append(\"\\n\");buffer.append(\"    .citmShow =\").append(HexDump.byteToHex(_citmShow)).append(\"\\n\");buffer.append(\"    .isxdiSort =\").append(HexDump.shortToHex(_isxdiSort)).append(\"\\n\");buffer.append(\"    .isxdiShow =\").append(HexDump.shortToHex(_isxdiShow)).append(\"\\n\");buffer.append(\"    .subtotalName =\").append(_subtotalName).append(\"\\n\");buffer.append(\"[/SXVDEX]\\n\");return buffer.toString();}\n"
        ],
        [
            "public String toString() {StringBuilder r = new StringBuilder();r.append(\"BlameResult: \"); r.append(getResultPath());return r.toString();}\n"
        ],
        [
            "public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request) {request = beforeClientExecution(request);return executeListChangeSets(request);}\n"
        ],
        [
            "public boolean isAllowNonFastForwards() {return allowNonFastForwards;}\n"
        ],
        [
            "public FeatRecord() {futureHeader = new FtrHeader();futureHeader.setRecordType(sid);}\n"
        ],
        [
            "public ShortBuffer put(short c) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public void setQuery(CharSequence query) {this.query = query;this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, \"\");}\n"
        ],
        [
            "public StashApplyCommand stashApply() {return new StashApplyCommand(repo);}\n"
        ],
        [
            "public Set<String> nameSet() {return Collections.unmodifiableSet(dictionary.values());}\n"
        ],
        [
            "public static int getEffectivePort(String scheme, int specifiedPort) {if (specifiedPort != -1) {return specifiedPort;}if (\"http\".equalsIgnoreCase(scheme)) {return 80;} else if (\"https\".equalsIgnoreCase(scheme)) {return 443;} else {return -1;}}\n"
        ],
        [
            "public ListAssessmentTemplatesResult listAssessmentTemplates(ListAssessmentTemplatesRequest request) {request = beforeClientExecution(request);return executeListAssessmentTemplates(request);}\n"
        ],
        [
            "public Cluster restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreFromClusterSnapshot(request);}\n"
        ],
        [
            "public void addShape(HSSFShape shape) {shape.setPatriarch(this.getPatriarch());shape.setParent(this);shapes.add(shape);}\n"
        ],
        [
            "public boolean equals(Object o) {if (this == o) return true;if (o == null || getClass() != o.getClass()) return false;FacetEntry that = (FacetEntry) o;if (count != that.count) return false;if (!value.equals(that.value)) return false;return true;}\n"
        ],
        [
            "public static final int prev(byte[] b, int ptr, char chrA) {if (ptr == b.length)--ptr;while (ptr >= 0) {if (b[ptr--] == chrA)return ptr;}return ptr;}\n"
        ],
        [
            "public final boolean isDeltaRepresentation() {return deltaBase != null;}\n"
        ],
        [
            "public Token emitEOF() {int cpos = getCharPositionInLine();int line = getLine();Token eof = _factory.create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _input.index()-1,line, cpos);emit(eof);return eof;}\n"
        ],
        [
            "public UpdateUserRequest(String userName) {setUserName(userName);}\n"
        ],
        [
            "public RevFilter negate() {return NotRevFilter.create(this);}\n"
        ],
        [
            "public void setTagger(PersonIdent taggerIdent) {tagger = taggerIdent;}\n"
        ],
        [
            "public static BufferSize automatic() {Runtime rt = Runtime.getRuntime();final long max = rt.maxMemory(); final long total = rt.totalMemory(); final long free = rt.freeMemory(); final long totalAvailableBytes = max - total + free;long sortBufferByteSize = free/2;final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;if (sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailableBytes/2; } else {sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));}\n"
        ],
        [
            "public static int trimTrailingWhitespace(byte[] raw, int start, int end) {int ptr = end - 1;while (start <= ptr && isWhitespace(raw[ptr]))ptr--;return ptr + 1;}\n"
        ],
        [
            "public TopMarginRecord( RecordInputStream in ) {field_1_margin = in.readDouble();}\n"
        ],
        [
            "public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) {setInfoType(infoType.toString());}\n"
        ],
        [
            "public CreatePlayerSessionsResult createPlayerSessions(CreatePlayerSessionsRequest request) {request = beforeClientExecution(request);return executeCreatePlayerSessions(request);}\n"
        ],
        [
            "public CreateProxySessionResult createProxySession(CreateProxySessionRequest request) {request = beforeClientExecution(request);return executeCreateProxySession(request);}\n"
        ],
        [
            "public int getObjectType() {return type;}\n"
        ],
        [
            "public String getScheme() {return scheme;}\n"
        ],
        [
            "public void characters(char[] ch, int start, int length) {contents.append(ch, start, length);}\n"
        ],
        [
            "public FetchAlbumTagPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchAlbumTagPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public DeleteMembersResult deleteMembers(DeleteMembersRequest request) {request = beforeClientExecution(request);return executeDeleteMembers(request);}\n"
        ],
        [
            "public GetContactReachabilityStatusResult getContactReachabilityStatus(GetContactReachabilityStatusRequest request) {request = beforeClientExecution(request);return executeGetContactReachabilityStatus(request);}\n"
        ],
        [
            "@Override public boolean remove(Object o) {return Impl.this.remove(o) != null;}\n"
        ],
        [
            "public E last() {return backingMap.lastKey();}\n"
        ],
        [
            "public CreateStreamingDistributionResult createStreamingDistribution(CreateStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeCreateStreamingDistribution(request);}\n"
        ],
        [
            "public boolean isAbsolute() {return absolute;}\n"
        ],
        [
            "public DisableAddOnResult disableAddOn(DisableAddOnRequest request) {request = beforeClientExecution(request);return executeDisableAddOn(request);}\n"
        ],
        [
            "public DescribeAliasResult describeAlias(DescribeAliasRequest request) {request = beforeClientExecution(request);return executeDescribeAlias(request);}\n"
        ],
        [
            "public void next(int delta) {while (--delta >= 0) {if (currentSubtree != null)ptr += currentSubtree.getEntrySpan();elseptr++;if (eof())break;parseEntry();}}\n"
        ],
        [
            "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n"
        ],
        [
            "public Reader create(Reader input) {return new PersianCharFilter(input);}\n"
        ],
        [
            "public String option() {return option;}\n"
        ],
        [
            "public String toString() {final StringBuilder sb = new StringBuilder(\"[\");for (Object item : this) {if (sb.length()>1) sb.append(\", \");if (item instanceof char[]) {sb.append((char[]) item);} else {sb.append(item);}}return sb.append(']').toString();}\n"
        ],
        [
            "public DescribeSignalingChannelResult describeSignalingChannel(DescribeSignalingChannelRequest request) {request = beforeClientExecution(request);return executeDescribeSignalingChannel(request);}\n"
        ],
        [
            "public AttachStaticIpResult attachStaticIp(AttachStaticIpRequest request) {request = beforeClientExecution(request);return executeAttachStaticIp(request);}\n"
        ],
        [
            "public String toString() {StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.append(getClass().getName());sb.append(\" [\").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append(\"]\");return sb.toString();}\n"
        ],
        [
            "public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) {super(BLOOM_CODEC_NAME);this.delegatePostingsFormat = delegatePostingsFormat;this.bloomFilterFactory = bloomFilterFactory;}\n"
        ],
        [
            "public ListTemplatesResult listTemplates(ListTemplatesRequest request) {request = beforeClientExecution(request);return executeListTemplates(request);}\n"
        ],
        [
            "public TimerThread(long resolution, Counter counter) {super(THREAD_NAME);this.resolution = resolution;this.counter = counter;this.setDaemon(true);}\n"
        ],
        [
            "public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}\n"
        ],
        [
            "public ListDirectoriesResult listDirectories(ListDirectoriesRequest request) {request = beforeClientExecution(request);return executeListDirectories(request);}\n"
        ],
        [
            "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}\n"
        ],
        [
            "public GroupingSearch disableCaching() {this.maxCacheRAMMB = null;this.maxDocsToCache = null;return this;}\n"
        ],
        [
            "public static int idealByteArraySize(int need) {for (int i = 4; i < 32; i++)if (need <= (1 << i) - 12)return (1 << i) - 12;return need;}\n"
        ],
        [
            "public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeUpdateAssessmentTarget(request);}\n"
        ],
        [
            "public ModifyVolumeResult modifyVolume(ModifyVolumeRequest request) {request = beforeClientExecution(request);return executeModifyVolume(request);}\n"
        ],
        [
            "public Cell merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {Cell c = new Cell(m);c.cnt += e.cnt;return c;} else {return null;}}\n"
        ],
        [
            "public ByteBuffer read(int length, long position) throws IOException {if(position >= size()) {throw new IndexOutOfBoundsException(\"Position \" + position + \" past the end of the file\");}ByteBuffer dst;if (writable) {dst = channel.map(FileChannel.MapMode.READ_WRITE, position, length);buffersToClean.add(dst);} else {channel.position(position);dst = ByteBuffer.allocate(length);int worked = IOUtils.readFully(channel, dst);if(worked == -1) {throw new IndexOutOfBoundsException(\"Position \" + position + \" past the end of the file\");}}dst.position(0);return dst;}\n"
        ],
        [
            "public void respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {request = beforeClientExecution(request);executeRespondActivityTaskCompleted(request);}\n"
        ],
        [
            "public synchronized final void incrementProgressBy(int diff) {setProgress(mProgress + diff);}\n"
        ],
        [
            "public MetadataDiff compareMetadata(DirCacheEntry entry) {if (entry.isAssumeValid())return MetadataDiff.EQUAL;if (entry.isUpdateNeeded())return MetadataDiff.DIFFER_BY_METADATA;if (isModeDifferent(entry.getRawMode()))return MetadataDiff.DIFFER_BY_METADATA;int type = mode & FileMode.TYPE_MASK;if (type == FileMode.TYPE_TREE || type == FileMode.TYPE_GITLINK)return MetadataDiff.EQUAL;if (!entry.isSmudged() && entry.getLength() != (int) getEntryLength())return MetadataDiff.DIFFER_BY_METADATA;Instant cacheLastModified = entry.getLastModifiedInstant();Instant fileLastModified = getEntryLastModifiedInstant();if (timestampComparator.compare(cacheLastModified, fileLastModified,getOptions().getCheckStat() == CheckStat.MINIMAL) != 0) {return MetadataDiff.DIFFER_BY_TIMESTAMP;}if (entry.isSmudged()) {return MetadataDiff.SMUDGED;}return MetadataDiff.EQUAL;}\n"
        ],
        [
            "public static NumberRecord convertToNumberRecord(RKRecord rk) {NumberRecord num = new NumberRecord();num.setColumn(rk.getColumn());num.setRow(rk.getRow());num.setXFIndex(rk.getXFIndex());num.setValue(rk.getRKNumber());return num;}\n"
        ],
        [
            "public CharBuffer put(char[] src, int srcOffset, int charCount) {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount);}this.position += charCount;return this;}\n"
        ],
        [
            "public int getCells() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0 || e.ref >= 0) {size++;}}return size;}\n"
        ],
        [
            "public BeiderMorseFilterFactory(Map<String,String> args) {super(args);NameType nameType = NameType.valueOf(get(args, \"nameType\", NameType.GENERIC.toString()));RuleType ruleType = RuleType.valueOf(get(args, \"ruleType\", RuleType.APPROX.toString()));boolean concat = getBoolean(args, \"concat\", true);engine = new PhoneticEngine(nameType, ruleType, concat);Set<String> langs = getSet(args, \"languageSet\");languageSet = (null == langs || (1 == langs.size() && langs.contains(\"auto\"))) ? null : LanguageSet.from(langs);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public static double varp(double[] v) {double r = Double.NaN;if (v!=null && v.length > 1) {r = devsq(v) /v.length;}return r;}\n"
        ],
        [
            "public PersianNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n"
        ],
        [
            "public static WeightedTerm[] getTerms(Query query, boolean prohibited, String fieldName) {HashSet<WeightedTerm> terms = new HashSet<>();Predicate<String> fieldSelector = fieldName == null ? f -> true : fieldName::equals;query.visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector));return terms.toArray(new WeightedTerm[0]);}\n"
        ],
        [
            "public DeleteDocumentationPartResult deleteDocumentationPart(DeleteDocumentationPartRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationPart(request);}\n"
        ],
        [
            "public String toString() {StringBuilder sb = new StringBuilder();sb.append(\"[CHART]\\n\");sb.append(\"    .x     = \").append(getX()).append('\\n');sb.append(\"    .y     = \").append(getY()).append('\\n');sb.append(\"    .width = \").append(getWidth()).append('\\n');sb.append(\"    .height= \").append(getHeight()).append('\\n');sb.append(\"[/CHART]\\n\");return sb.toString();}\n"
        ],
        [
            "public final short get(int index) {checkIndex(index);return backingArray[offset + index];}\n"
        ],
        [
            "public String toString(){return image;}\n"
        ],
        [
            "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {AreaEval reA = evaluateRef(arg0);AreaEval reB = evaluateRef(arg1);AreaEval result = resolveRange(reA, reB);if (result == null) {return ErrorEval.NULL_INTERSECTION;}return result;} catch (EvaluationException e) {return e.getErrorEval();}}\n"
        ],
        [
            "public void clear() {weightBySpanQuery.clear();}\n"
        ],
        [
            "public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;bi.setText(buffer.substring(start));return bi.next() + start;}\n"
        ],
        [
            "final public SrndQuery PrimaryQuery() throws ParseException {SrndQuery q;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case LPAREN:jj_consume_token(LPAREN);q = FieldsQuery();jj_consume_token(RPAREN);break;case OR:case AND:case W:case N:q = PrefixOperatorQuery();break;case TRUNCQUOTED:case QUOTED:case SUFFIXTERM:case TRUNCTERM:case TERM:q = SimpleTerm();break;default:jj_la1[5] = jj_gen;jj_consume_token(-1);throw new ParseException();}OptionalWeights(q);{if (true) return q;}throw new Error(\"Missing return statement in function\");}\n"
        ],
        [
            "public DeleteApiKeyResult deleteApiKey(DeleteApiKeyRequest request) {request = beforeClientExecution(request);return executeDeleteApiKey(request);}\n"
        ],
        [
            "public InsertTagsRequest() {super(\"Ots\", \"2016-06-20\", \"InsertTags\", \"ots\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public DeleteUserByPrincipalIdResult deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {request = beforeClientExecution(request);return executeDeleteUserByPrincipalId(request);}\n"
        ],
        [
            "public DescribeNetworkInterfacesResult describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkInterfaces(request);}\n"
        ],
        [
            "public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, 8 );LittleEndian.putInt( data, offset + 8, field_1_numShapes );LittleEndian.putInt( data, offset + 12, field_2_lastMSOSPID );listener.afterRecordSerialize( offset + 16, getRecordId(), getRecordSize(), this );return getRecordSize();}\n"
        ],
        [
            "public CreateSecurityConfigurationResult createSecurityConfiguration(CreateSecurityConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateSecurityConfiguration(request);}\n"
        ],
        [
            "public DescribeClientVpnConnectionsResult describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnConnections(request);}\n"
        ],
        [
            "public static void fill(double[] array, double value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}\n"
        ],
        [
            "public boolean hasNext() {return nextId < cells.length;}\n"
        ],
        [
            "public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -2;freq = 0;return this;}\n"
        ],
        [
            "public final boolean hasAll(RevFlagSet set) {return (flags & set.mask) == set.mask;}\n"
        ],
        [
            "public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {request = beforeClientExecution(request);return executeModifyAccount(request);}\n"
        ],
        [
            "public Token LT(int k) {lazyInit();if ( k==0 ) return null;if ( k < 0 ) return LB(-k);int i = p + k - 1;sync(i);if ( i >= tokens.size() ) { return tokens.get(tokens.size()-1);}return tokens.get(i);}\n"
        ],
        [
            "public void removeSheet(int sheetIndex) {if (boundsheets.size() > sheetIndex) {records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex);boundsheets.remove(sheetIndex);fixTabIdRecord();}int sheetNum1Based = sheetIndex + 1;for(int i=0; i<getNumNames(); i++) {NameRecord nr = getNameRecord(i);if(nr.getSheetNumber() == sheetNum1Based) {nr.setSheetNumber(0);} else if(nr.getSheetNumber() > sheetNum1Based) {nr.setSheetNumber(nr.getSheetNumber()-1);}}if (linkTable != null) {linkTable.removeSheet(sheetIndex);}}\n"
        ],
        [
            "public void removeName(String name) {int index = getNameIndex(name);removeName(index);}\n"
        ],
        [
            "public boolean equals(final Object o) {if (!(o instanceof Property)) {return false;}final Property p = (Property) o;final Object pValue = p.getValue();final long pId = p.getID();if (id != pId || (id != 0 && !typesAreEqual(type, p.getType()))) {return false;}if (value == null && pValue == null) {return true;}if (value == null || pValue == null) {return false;}final Class<?> valueClass = value.getClass();final Class<?> pValueClass = pValue.getClass();if (!(valueClass.isAssignableFrom(pValueClass)) &&!(pValueClass.isAssignableFrom(valueClass))) {return false;}if (value instanceof byte[]) {byte[] thisVal = (byte[]) value, otherVal = (byte[]) pValue;int len = unpaddedLength(thisVal);if (len != unpaddedLength(otherVal)) {return false;}for (int i=0; i<len; i++) {if (thisVal[i] != otherVal[i]) {return false;}}return true;}return value.equals(pValue);}\n"
        ],
        [
            "public GetRepoBuildListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoBuildList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/build\");setMethod(MethodType.GET);}\n"
        ],
        [
            "public MessageWriter() {buf = new ByteArrayOutputStream();enc = new OutputStreamWriter(getRawStream(), UTF_8);}\n"
        ],
        [
            "public void append(RecordBase r){_recs.add(r);}\n"
        ],
        [
            "public void close() throws IOException {if (read(skipBuffer) != -1 || actualSize != expectedSize) {throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().wrongDecompressedLength));}int used = bAvail - inf.getRemaining();if (0 < used) {onObjectData(src, buf, p, used);use(used);}inf.reset();}\n"
        ],
        [
            "public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {request = beforeClientExecution(request);return executeDescribeModelPackage(request);}\n"
        ],
        [
            "public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {if (rec instanceof FormulaRecord) {FormulaRecord formulaRec = (FormulaRecord)rec;StringRecord cachedText;Class<? extends Record> nextClass = rs.peekNextClass();if (nextClass == StringRecord.class) {cachedText = (StringRecord) rs.getNext();} else {cachedText = null;}insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));} else {insertCell(rec);}}\n"
        ],
        [
            "public Decompressor clone() {return new DeflateDecompressor();}\n"
        ],
        [
            "public UpdateS3ResourcesResult updateS3Resources(UpdateS3ResourcesRequest request) {request = beforeClientExecution(request);return executeUpdateS3Resources(request);}\n"
        ],
        [
            "public GroupQueryNode(QueryNode query) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"query\", \"null\"));}allocate();setLeaf(false);add(query);}\n"
        ],
        [
            "public CharSequence toQueryString(EscapeQuerySyntax escaper) {StringBuilder path = new StringBuilder();path.append(\"/\").append(getFirstPathElement());for (QueryText pathelement : getPathElements(1)) {CharSequence value = escaper.escape(pathelement.value, Locale.getDefault(), Type.STRING);path.append(\"/\\\"\").append(value).append(\"\\\"\");}return path.toString();}\n"
        ],
        [
            "public void removeCellComment() {HSSFComment comment = _sheet.findCellComment(_record.getRow(), _record.getColumn());_comment = null;if (null == comment){return;}_sheet.getDrawingPatriarch().removeShape(comment);}\n"
        ],
        [
            "public void reset() {arriving = -1;leaving = -1;}\n"
        ],
        [
            "public ActivateUserResult activateUser(ActivateUserRequest request) {request = beforeClientExecution(request);return executeActivateUser(request);}\n"
        ],
        [
            "public boolean isCharsetDetected() {throw new UnsupportedOperationException();}\n"
        ],
        [
            "public Cluster modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {request = beforeClientExecution(request);return executeModifySnapshotCopyRetentionPeriod(request);}\n"
        ],
        [
            "public DeleteClusterSubnetGroupResult deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSubnetGroup(request);}\n"
        ],
        [
            "public static String decode(byte[] buffer) {return decode(buffer, 0, buffer.length);}\n"
        ],
        [
            "public int getDefaultPort() {return -1;}\n"
        ],
        [
            "public StopTaskResult stopTask(StopTaskRequest request) {request = beforeClientExecution(request);return executeStopTask(request);}\n"
        ],
        [
            "public void seekExact(BytesRef target, TermState otherState) {assert otherState != null && otherState instanceof BlockTermState;assert !doOrd || ((BlockTermState) otherState).ord < numTerms;state.copyFrom(otherState);seekPending = true;indexIsCurrent = false;term.copyBytes(target);}\n"
        ],
        [
            "public SeriesToChartGroupRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}\n"
        ],
        [
            "public static void writeUnicodeStringFlagAndData(LittleEndianOutput out, String value) {boolean is16Bit = hasMultibyte(value);out.writeByte(is16Bit ? 0x01 : 0x00);if (is16Bit) {putUnicodeLE(value, out);} else {putCompressedUnicode(value, out);}}\n"
        ],
        [
            "public AuthorizeSecurityGroupIngressResult authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroupIngress(request);}\n"
        ],
        [
            "public void addFile(String file) {checkFileNames(Collections.singleton(file));setFiles.add(namedForThisSegment(file));}\n"
        ],
        [
            "public void setSize(int width, int height) {mWidth = width;mHeight = height;}\n"
        ],
        [
            "public final void setPrecedenceFilterSuppressed(boolean value) {if (value) {this.reachesIntoOuterContext |= 0x40000000;}else {this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;}}\n"
        ],
        [
            "public IntervalSet LOOK(ATNState s, RuleContext ctx) {return LOOK(s, null, ctx);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(getOptionFlags());out.writeShort(getRowHeight());}\n"
        ],
        [
            "public Builder(boolean dedup) {this.dedup = dedup;}\n"
        ],
        [
            "public Hashtable(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n"
        ],
        [
            "public Object get(CharSequence key) {final int bucket = normalCompletion.getBucket(key);return bucket == -1 ? null : Long.valueOf(bucket);}\n"
        ],
        [
            "public ListHyperParameterTuningJobsResult listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {request = beforeClientExecution(request);return executeListHyperParameterTuningJobs(request);}\n"
        ],
        [
            "public DeleteTableResult deleteTable(String tableName) {return deleteTable(new DeleteTableRequest().withTableName(tableName));}\n"
        ],
        [
            "public final boolean lessThan(TextFragment fragA, TextFragment fragB){if (fragA.getScore() == fragB.getScore())return fragA.fragNum > fragB.fragNum;elsereturn fragA.getScore() < fragB.getScore();}\n"
        ],
        [
            "public void freeBefore(int pos) {assert pos >= 0;assert pos <= nextPos;final int newCount = nextPos - pos;assert newCount <= count: \"newCount=\" + newCount + \" count=\" + count;assert newCount <= buffer.length: \"newCount=\" + newCount + \" buf.length=\" + buffer.length;count = newCount;}\n"
        ],
        [
            "public UpdateHITTypeOfHITResult updateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {request = beforeClientExecution(request);return executeUpdateHITTypeOfHIT(request);}\n"
        ],
        [
            "public UpdateRecommenderConfigurationResult updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateRecommenderConfiguration(request);}\n"
        ],
        [
            "public int compareTo(BytesRef other) {return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length,other.bytes, other.offset, other.offset + other.length);}\n"
        ],
        [
            "public int stem(char s[], int len) {if (len > 4 && s[len-1] == 's')len--;if (len > 5 &&(endsWith(s, len, \"ene\") ||  (endsWith(s, len, \"ane\") &&useNynorsk                 )))return len - 3;if (len > 4 &&(endsWith(s, len, \"er\") ||   endsWith(s, len, \"en\") ||   endsWith(s, len, \"et\") ||   (endsWith(s, len, \"ar\") &&useNynorsk                 )))return len - 2;if (len > 3)switch(s[len-1]) {case 'a':     case 'e':     return len - 1;}return len;}\n"
        ],
        [
            "public DescribeDBSnapshotsResult describeDBSnapshots(DescribeDBSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeDBSnapshots(request);}\n"
        ],
        [
            "public SortedSetDocValuesFacetField(String dim, String label) {super(\"dummy\", TYPE);FacetField.verifyLabel(label);FacetField.verifyLabel(dim);this.dim = dim;this.label = label;}\n"
        ],
        [
            "public CreateDocumentationPartResult createDocumentationPart(CreateDocumentationPartRequest request) {request = beforeClientExecution(request);return executeCreateDocumentationPart(request);}\n"
        ],
        [
            "public String getValue() {return value;}\n"
        ],
        [
            "public ShortBuffer asReadOnlyBuffer() {return duplicate();}\n"
        ],
        [
            "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}\n"
        ],
        [
            "public static org.apache.poi.hssf.record.Record createSingleRecord(RecordInputStream in) {I_RecordCreator constructor = _recordCreatorsById.get(Integer.valueOf(in.getSid()));if (constructor == null) {return new UnknownRecord(in);}return constructor.create(in);}\n"
        ],
        [
            "public int getCount() {return mTabs.size();}\n"
        ],
        [
            "public DeleteApplicationReferenceDataSourceResult deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationReferenceDataSource(request);}\n"
        ],
        [
            "public CreateProjectVersionResult createProjectVersion(CreateProjectVersionRequest request) {request = beforeClientExecution(request);return executeCreateProjectVersion(request);}\n"
        ],
        [
            "public IntBuffer slice() {return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position);}\n"
        ],
        [
            "public final byte get() {if (position == limit) {throw new BufferUnderflowException();}return this.block.peekByte(offset + position++);}\n"
        ],
        [
            "public LongBuffer put(int index, long c) {checkIndex(index);backingArray[offset + index] = c;return this;}\n"
        ],
        [
            "public StoredField(String name, float value) {super(name, TYPE);fieldsData = value;}\n"
        ],
        [
            "public IntervalSet getExpectedTokensWithinCurrentRule() {ATN atn = getInterpreter().atn;ATNState s = atn.states.get(getState());return atn.nextTokens(s);}\n"
        ],
        [
            "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FILESHARING]\\n\");buffer.append(\"    .readonly       = \").append(getReadOnly() == 1 ? \"true\" : \"false\").append(\"\\n\");buffer.append(\"    .password       = \").append(Integer.toHexString(getPassword())).append(\"\\n\");buffer.append(\"    .username       = \").append(getUsername()).append(\"\\n\");buffer.append(\"[/FILESHARING]\\n\");return buffer.toString();}\n"
        ],
        [
            "public SubmoduleInitCommand(Repository repo) {super(repo);paths = new ArrayList<>();}\n"
        ],
        [
            "public void include(String name, AnyObjectId id) {boolean validRefName = Repository.isValidRefName(name) || Constants.HEAD.equals(name);if (!validRefName)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidRefName, name));if (include.containsKey(name))throw new IllegalStateException(JGitText.get().duplicateRef + name);include.put(name, id.toObjectId());}\n"
        ],
        [
            "public Cluster enableSnapshotCopy(EnableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeEnableSnapshotCopy(request);}\n"
        ],
        [
            "public ValueFiller getValueFiller() {return new ValueFiller() {private final MutableValueFloat mval = new MutableValueFloat();@Override\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeByte(getPane());out.writeShort(getActiveCellRow());out.writeShort(getActiveCellCol());out.writeShort(getActiveCellRef());int nRefs = field_6_refs.length;out.writeShort(nRefs);for (CellRangeAddress8Bit field_6_ref : field_6_refs) {field_6_ref.serialize(out);}}\n"
        ],
        [
            "public static Counter newCounter() {return newCounter(false);}\n"
        ],
        [
            "public boolean get(String name, boolean dflt) {boolean vals[] = (boolean[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, \"\" + dflt);if (sval.indexOf(\":\") < 0) {return Boolean.valueOf(sval).booleanValue();}int k = sval.indexOf(\":\");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToBooleanArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}\n"
        ],
        [
            "public void preSerialize(){if(records.getTabpos() > 0) {TabIdRecord tir = ( TabIdRecord ) records.get(records.getTabpos());if(tir._tabids.length < boundsheets.size()) {fixTabIdRecord();}}}\n"
        ],
        [
            "public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) {super(delegate.getReuseStrategy());this.delegate = delegate;this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}\n"
        ],
        [
            "public ExternalBookBlock(int numberOfSheets) {_externalBookRecord = SupBookRecord.createInternalReferences((short) numberOfSheets);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}\n"
        ],
        [
            "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[SCENARIOPROTECT]\\n\");buffer.append(\"    .protect         = \").append(getProtect()).append(\"\\n\");buffer.append(\"[/SCENARIOPROTECT]\\n\");return buffer.toString();}\n"
        ],
        [
            "public PushCommand setThin(boolean thin) {checkCallable();this.thin = thin;return this;}\n"
        ],
        [
            "public int compareTo(SearcherTracker other) {return Double.compare(other.recordTimeSec, recordTimeSec);}\n"
        ],
        [
            "public ReverseStringFilter create(TokenStream in) {return new ReverseStringFilter(in);}\n"
        ],
        [
            "public BlockList() {directory = BlockList.<T> newDirectory(256);directory[0] = BlockList.<T> newBlock();tailBlock = directory[0];}\n"
        ],
        [
            "public QueryScorer(WeightedSpanTerm[] weightedTerms) {this.fieldWeightedSpanTerms = new HashMap<>(weightedTerms.length);for (int i = 0; i < weightedTerms.length; i++) {WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);if ((existingTerm == null) ||(existingTerm.weight < weightedTerms[i].weight)) {fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());}}skipInitExtractor = true;}\n"
        ],
        [
            "public boolean equals(Object _other) {assert neverEquals(_other);if (_other instanceof MergedGroup) {MergedGroup<?> other = (MergedGroup<?>) _other;if (groupValue == null) {return other == null;} else {return groupValue.equals(other);}} else {return false;}}\n"
        ],
        [
            "public final Charset charset() {return cs;}\n"
        ],
        [
            "public DescribeExperimentResult describeExperiment(DescribeExperimentRequest request) {request = beforeClientExecution(request);return executeDescribeExperiment(request);}\n"
        ],
        [
            "public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel ){this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;this.font = new Font(\"Arial\", 0, 10);this.foreground = forecolor;}\n"
        ],
        [
            "public String pattern() {return patternText;}\n"
        ],
        [
            "public DeleteRouteTableResult deleteRouteTable(DeleteRouteTableRequest request) {request = beforeClientExecution(request);return executeDeleteRouteTable(request);}\n"
        ],
        [
            "public AssociateVPCWithHostedZoneResult associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {request = beforeClientExecution(request);return executeAssociateVPCWithHostedZone(request);}\n"
        ],
        [
            "public PutIntegrationResult putIntegration(PutIntegrationRequest request) {request = beforeClientExecution(request);return executePutIntegration(request);}\n"
        ],
        [
            "public SimpleEntry(K theKey, V theValue) {key = theKey;value = theValue;}\n"
        ],
        [
            "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}\n"
        ],
        [
            "public DisassociateConnectionFromLagResult disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {request = beforeClientExecution(request);return executeDisassociateConnectionFromLag(request);}\n"
        ],
        [
            "public FileMode getOldMode() {return oldMode;}\n"
        ],
        [
            "@Override public String toString() {return m.toString();}\n"
        ],
        [
            "public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}\n"
        ],
        [
            "public String toString() {return \"[Array Formula or Shared Formula]\\n\" + \"row = \" + getRow() + \"\\n\" + \"col = \" + getColumn() + \"\\n\";}\n"
        ],
        [
            "public ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListDominantLanguageDetectionJobs(request);}\n"
        ],
        [
            "public String toString() {return \"slice start=\" + start + \" length=\" + length + \" readerIndex=\" + readerIndex;}\n"
        ],
        [
            "public static final int parseHexInt4(final byte digit) {final byte r = digits16[digit];if (r < 0)throw new ArrayIndexOutOfBoundsException();return r;}\n"
        ],
        [
            "public Attribute(String name, String value) {setName(name);setValue(value);}\n"
        ],
        [
            "public DescribeStackSetOperationResult describeStackSetOperation(DescribeStackSetOperationRequest request) {request = beforeClientExecution(request);return executeDescribeStackSetOperation(request);}\n"
        ],
        [
            "public HSSFCell getCell(int cellnum) {return getCell(cellnum, book.getMissingCellPolicy());}\n"
        ],
        [
            "public void write(byte[] b) {writeContinueIfRequired(b.length);_ulrOutput.write(b);}\n"
        ],
        [
            "public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute) {setImageId(imageId);setAttribute(attribute.toString());}\n"
        ],
        [
            "public void discardResultContents() {resultContents = null;}\n"
        ],
        [
            "public ObjectId getPeeledObjectId() {return getLeaf().getPeeledObjectId();}\n"
        ],
        [
            "public void undeprecateDomain(UndeprecateDomainRequest request) {request = beforeClientExecution(request);executeUndeprecateDomain(request);}\n"
        ],
        [
            "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(field_3_string.length()); out.writeByte(_is16bitUnicode ? 0x01 : 0x00);if (_is16bitUnicode) {StringUtil.putUnicodeLE(field_3_string, out);} else {StringUtil.putCompressedUnicode(field_3_string, out);}}\n"
        ],
        [
            "public DeleteQueueResult deleteQueue(String queueUrl) {return deleteQueue(new DeleteQueueRequest().withQueueUrl(queueUrl));}\n"
        ],
        [
            "public void setCheckEofAfterPackFooter(boolean b) {checkEofAfterPackFooter = b;}\n"
        ],
        [
            "public void swap() {final int sBegin = beginA;final int sEnd = endA;beginA = beginB;endA = endB;beginB = sBegin;endB = sEnd;}\n"
        ],
        [
            "public int getPackedGitWindowSize() {return packedGitWindowSize;}\n"
        ],
        [
            "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}\n"
        ],
        [
            "public GetCelebrityRecognitionResult getCelebrityRecognition(GetCelebrityRecognitionRequest request) {request = beforeClientExecution(request);return executeGetCelebrityRecognition(request);}\n"
        ],
        [
            "public CreateQueueRequest(String queueName) {setQueueName(queueName);}\n"
        ],
        [
            "public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) {super(arearef);this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.getSheetIdentifier().getName();if (sheetName instanceof SheetRangeIdentifier) {this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName();} else {this.lastSheetName = null;}}\n"
        ],
        [
            "public void setBaseline(long clockTime) {t0 = clockTime;timeout = t0 + ticksAllowed;}\n"
        ],
        [
            "public MoveAddressToVpcResult moveAddressToVpc(MoveAddressToVpcRequest request) {request = beforeClientExecution(request);return executeMoveAddressToVpc(request);}\n"
        ],
        [
            "public String toString() {String coll = collectionModel.getName();if (coll != null) {return String.format(Locale.ROOT, \"LM %s - %s\", getName(), coll);} else {return String.format(Locale.ROOT, \"LM %s\", getName());}}\n"
        ],
        [
            "public DescribeLagsResult describeLags(DescribeLagsRequest request) {request = beforeClientExecution(request);return executeDescribeLags(request);}\n"
        ],
        [
            "public AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) {if (_refEval == null) {return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}\n"
        ],
        [
            "public ShortBuffer put(short[] src, int srcOffset, int shortCount) {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount);}this.position += shortCount;return this;}\n"
        ],
        [
            "public void initialize(final String cat) {this._cat=cat;}\n"
        ],
        [
            "public void write(int oneByte) throws IOException {out.write(oneByte);written++;}\n"
        ],
        [
            "public DescribeImportImageTasksResult describeImportImageTasks(DescribeImportImageTasksRequest request) {request = beforeClientExecution(request);return executeDescribeImportImageTasks(request);}\n"
        ],
        [
            "public ColumnInfoRecord(RecordInputStream in) {_firstCol = in.readUShort();_lastCol  = in.readUShort();_colWidth = in.readUShort();_xfIndex  = in.readUShort();_options   = in.readUShort();switch(in.remaining()) {case 2: field_6_reserved  = in.readUShort();break;case 1:field_6_reserved  = in.readByte();break;case 0:field_6_reserved  = 0;break;default:throw new RuntimeException(\"Unusual record size remaining=(\" + in.remaining() + \")\");}}\n"
        ],
        [
            "public Status(IndexDiff diff) {super();this.diff = diff;hasUncommittedChanges = !diff.getAdded().isEmpty() || !diff.getChanged().isEmpty() || !diff.getRemoved().isEmpty() || !diff.getMissing().isEmpty() || !diff.getModified().isEmpty() || !diff.getConflicting().isEmpty();clean = !hasUncommittedChanges && diff.getUntracked().isEmpty();}\n"
        ],
        [
            "public CreateExperimentResult createExperiment(CreateExperimentRequest request) {request = beforeClientExecution(request);return executeCreateExperiment(request);}\n"
        ],
        [
            "public UnknownRecord clone() {return copy();}\n"
        ],
        [
            "public FloatBuffer slice() {byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());FloatBuffer result = new FloatToByteBufferAdapter(bb);byteBuffer.clear();return result;}\n"
        ],
        [
            "public DescribeSnapshotSchedulesResult describeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotSchedules(request);}\n"
        ],
        [
            "public ListImagesResult listImages(ListImagesRequest request) {request = beforeClientExecution(request);return executeListImages(request);}\n"
        ],
        [
            "public Diff(int ins, int del, int rep, int noop) {INSERT = ins;DELETE = del;REPLACE = rep;NOOP = noop;}\n"
        ],
        [
            "public String toFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(\",\");buffer.append(operands[ 1 ]);return buffer.toString();}\n"
        ],
        [
            "public static void setupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) {WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length];for (int i = 0; i < wbEvals.length; i++) {wbEvals[i] = evaluators[i]._evaluator;}CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);}\n"
        ],
        [
            "public ListPhotoTagsRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ListPhotoTags\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public RandomSamplingFacetsCollector(int sampleSize, long seed) {super(false);this.sampleSize = sampleSize;this.random = new XORShift64Random(seed);this.sampledDocs = null;}\n"
        ],
        [
            "public AllocateStaticIpResult allocateStaticIp(AllocateStaticIpRequest request) {request = beforeClientExecution(request);return executeAllocateStaticIp(request);}\n"
        ],
        [
            "public FeatRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved1 = in.readByte();reserved2 = in.readInt();int cref = in.readUShort();cbFeatData = in.readInt();reserved3 = in.readShort();cellRefs = new CellRangeAddress[cref];for(int i=0; i<cellRefs.length; i++) {cellRefs[i] = new CellRangeAddress(in);}switch(isf_sharedFeatureType) {case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:sharedFeature = new FeatProtection(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:sharedFeature = new FeatFormulaErr2(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:sharedFeature = new FeatSmartTag(in);break;default:logger.log( POILogger.ERROR, \"Unknown Shared Feature \" + isf_sharedFeatureType + \" found!\");}}\n"
        ],
        [
            "public RevCommit tryFastForward(RevCommit newCommit) throws IOException,GitAPIException {Ref head = getHead();ObjectId headId = head.getObjectId();if (headId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));RevCommit headCommit = walk.lookupCommit(headId);if (walk.isMergedInto(newCommit, headCommit))return newCommit;String headName = getHeadName(head);return tryFastForward(headName, headCommit, newCommit);}\n"
        ],
        [
            "public CreateSnapshotScheduleResult createSnapshotSchedule(CreateSnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeCreateSnapshotSchedule(request);}\n"
        ],
        [
            "public Record getNext() {if(!hasNext()) {throw new RuntimeException(\"Attempt to read past end of record stream\");}_countRead ++;return _list.get(_nextIndex++);}\n"
        ],
        [
            "public String toString() {return RawParseUtils.decode(buf.toByteArray());}\n"
        ],
        [
            "public ListTablesRequest(String exclusiveStartTableName) {setExclusiveStartTableName(exclusiveStartTableName);}\n"
        ],
        [
            "public EnableAlarmActionsResult enableAlarmActions(EnableAlarmActionsRequest request) {request = beforeClientExecution(request);return executeEnableAlarmActions(request);}\n"
        ],
        [
            "public Builder() {this(true);}\n"
        ],
        [
            "public boolean equals(Object obj) {final State other = (State) obj;return is_final == other.is_final&& Arrays.equals(this.labels, other.labels)&& referenceEquals(this.states, other.states);}\n"
        ],
        [
            "public TokenStream create(TokenStream input) {return new EnglishPossessiveFilter(input);}\n"
        ],
        [
            "public void clearFormatting() {_string = cloneStringIfRequired();_string.clearFormatting();addToSSTIfRequired();}\n"
        ],
        [
            "public int get(int index, long[] arr, int off, int len) {assert len > 0 : \"len must be > 0 (got \" + len + \")\";assert index >= 0 && index < valueCount;len = Math.min(len, valueCount - index);Arrays.fill(arr, off, off + len, 0);return len;}\n"
        ],
        [
            "public DeleteRouteResponseResult deleteRouteResponse(DeleteRouteResponseRequest request) {request = beforeClientExecution(request);return executeDeleteRouteResponse(request);}\n"
        ],
        [
            "public String toPrivateString() {return format(true, false);}\n"
        ],
        [
            "public CreatePresignedDomainUrlResult createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) {request = beforeClientExecution(request);return executeCreatePresignedDomainUrl(request);}\n"
        ],
        [
            "public void write(int oneChar) {doWrite(new char[] { (char) oneChar }, 0, 1);}\n"
        ],
        [
            "public SSTRecord getSSTRecord() {return sstRecord;}\n"
        ],
        [
            "public String toString() {return \"term=\" + term + \",field=\" + field + \",value=\" + valueToString() + \",docIDUpto=\" + docIDUpto;}\n"
        ],
        [
            "public boolean isSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) {return bloomFilter.getSaturation() > 0.9f;}\n"
        ],
        [
            "public Builder(boolean ignoreCase) {this.ignoreCase = ignoreCase;}\n"
        ],
        [
            "public String toString() {return getClass().getName()+ \"(maxBasicQueries: \" + maxBasicQueries+ \", queriesMade: \" + queriesMade+ \")\";}\n"
        ],
        [
            "public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteDataSource(request);}\n"
        ],
        [
            "public RebootNodeResult rebootNode(RebootNodeRequest request) {request = beforeClientExecution(request);return executeRebootNode(request);}\n"
        ],
        [
            "public void processChildRecords() {convertRawBytesToEscherRecords();}\n"
        ],
        [
            "public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) {request = beforeClientExecution(request);return executeCreateOrUpdateTags(request);}\n"
        ],
        [
            "public FileSnapshot getSnapShot() {return snapShot;}\n"
        ],
        [
            "public InputStream openResource(String resource) throws IOException {final InputStream stream = (clazz != null) ?clazz.getResourceAsStream(resource) :loader.getResourceAsStream(resource);if (stream == null)throw new IOException(\"Resource not found: \" + resource);return stream;}\n"
        ],
        [
            "public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(\" [\");sb.append(\"sid=\").append(HexDump.shortToHex(_sid));sb.append(\" size=\").append(_data.length);sb.append(\" : \").append(HexDump.toHex(_data));sb.append(\"]\\n\");return sb.toString();}\n"
        ],
        [
            "public int nextIndex() {return index;}\n"
        ],
        [
            "public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";} else {return this.field + \":\" + \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";}}\n"
        ],
        [
            "public CalcModeRecord clone() {return copy();}\n"
        ],
        [
            "public boolean isOutput() {return output;}\n"
        ],
        [
            "public CreateNetworkInterfaceResult createNetworkInterface(CreateNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeCreateNetworkInterface(request);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_password);}\n"
        ],
        [
            "public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopDominantLanguageDetectionJob(request);}\n"
        ],
        [
            "public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int milliseconds) {this.connectionTimeoutInMilliseconds = milliseconds;return this;}\n"
        ],
        [
            "public GetGatewayGroupResult getGatewayGroup(GetGatewayGroupRequest request) {request = beforeClientExecution(request);return executeGetGatewayGroup(request);}\n"
        ],
        [
            "public FloatBuffer slice() {return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position);}\n"
        ],
        [
            "public static String join(Collection<String> parts, String separator,String lastSeparator) {StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.size() - 1;for (String part : parts) {sb.append(part);if (i == lastIndex - 1) {sb.append(lastSeparator);} else if (i != lastIndex) {sb.append(separator);}i++;}return sb.toString();}\n"
        ],
        [
            "public String toString() {return \"(\" + a.toString() + \" AND \" + b.toString() + \")\"; }\n"
        ],
        [
            "public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {setTopicArn(topicArn);setNextToken(nextToken);}\n"
        ],
        [
            "public byte readByte() {return bytes[pos--];}\n"
        ],
        [
            "public TerminateClientVpnConnectionsResult terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeTerminateClientVpnConnections(request);}\n"
        ],
        [
            "public ReceiveMessageRequest(String queueUrl) {setQueueUrl(queueUrl);}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_barSpace);out.writeShort(field_2_categorySpace);out.writeShort(field_3_formatFlags);}\n"
        ],
        [
            "public Object common(Object output1, Object output2) {return outputs.common((T) output1, (T) output2);}\n"
        ],
        [
            "public CreateVariableResult createVariable(CreateVariableRequest request) {request = beforeClientExecution(request);return executeCreateVariable(request);}\n"
        ],
        [
            "public static final int match(byte[] b, int ptr, byte[] src) {if (ptr + src.length > b.length)return -1;for (int i = 0; i < src.length; i++, ptr++)if (b[ptr] != src[i])return -1;return ptr;}\n"
        ],
        [
            "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_rectX1 =  LittleEndian.getInt( data, pos + size );size+=4;field_2_rectY1 =  LittleEndian.getInt( data, pos + size );size+=4;field_3_rectX2 =  LittleEndian.getInt( data, pos + size );size+=4;field_4_rectY2 =  LittleEndian.getInt( data, pos + size );size+=4;bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException(\"Expected no remaining bytes but got \" + bytesRemaining);}return 8 + size + bytesRemaining;}\n"
        ],
        [
            "public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeCreateCloudFrontOriginAccessIdentity(request);}\n"
        ],
        [
            "public boolean isNamespaceAware() {return getFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES);}\n"
        ],
        [
            "public void setOverridable(boolean on) {overridable = on;}\n"
        ],
        [
            "public String getClassName() {return className;}\n"
        ],
        [
            "public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}\n"
        ],
        [
            "public int indexOfKey(int key) {return binarySearch(mKeys, 0, mSize, key);}\n"
        ],
        [
            "public BlankRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_col = in.readShort();field_3_xf  = in.readShort();}\n"
        ],
        [
            "public long length() {return length;}\n"
        ],
        [
            "public PasswordRecord(RecordInputStream in) {field_1_password = in.readShort();}\n"
        ],
        [
            "public HashMap(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n"
        ],
        [
            "public void run() {long lastReopenStartNS = System.nanoTime();while (!finish) {while (!finish) {reopenLock.lock();try {boolean hasWaiting = waitingGen > searchingGen;final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);final long sleepNS = nextReopenStartNS - System.nanoTime();if (sleepNS > 0) {reopenCond.awaitNanos(sleepNS);} else {break;}} catch (InterruptedException ie) {Thread.currentThread().interrupt();return;} finally {reopenLock.unlock();}}if (finish) {break;}lastReopenStartNS = System.nanoTime();refreshStartGen = writer.getMaxCompletedSequenceNumber();try {manager.maybeRefreshBlocking();} catch (IOException ioe) {throw new RuntimeException(ioe);}}}\n"
        ],
        [
            "public DeleteLoginProfileRequest(String userName) {setUserName(userName);}\n"
        ],
        [
            "public E pollFirst() {return (size == 0) ? null : removeFirstImpl();}\n"
        ],
        [
            "public CreatePhotoRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"CreatePhoto\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public String getName() {return \"resolve\"; }\n"
        ],
        [
            "public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;int offset, count = maxScan;for( offset = start; offset < buffer.length() && count > 0; count-- ){if( boundaryChars.contains( buffer.charAt( offset ) ) ) return offset;offset++;}return start;}\n"
        ],
        [
            "public void setObjectChecker(ObjectChecker oc) {objCheck = oc;}\n"
        ],
        [
            "public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}\n"
        ],
        [
            "public CreateVpcEndpointResult createVpcEndpoint(CreateVpcEndpointRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpoint(request);}\n"
        ],
        [
            "public DeregisterWorkspaceDirectoryResult deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeDeregisterWorkspaceDirectory(request);}\n"
        ],
        [
            "public ChartFRTInfoRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();verOriginator = in.readByte();verWriter = in.readByte();int cCFRTID = in.readShort();rgCFRTID = new CFRTID[cCFRTID];for (int i = 0; i < cCFRTID; i++) {rgCFRTID[i] = new CFRTID(in);}}\n"
        ],
        [
            "public Merger newMerger(Repository db) {return new OneSide(db, treeIndex);}\n"
        ],
        [
            "public CreateDataSourceFromRedshiftResult createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRedshift(request);}\n"
        ],
        [
            "public void clearDFA() {for (int d = 0; d < decisionToDFA.length; d++) {decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);}}\n"
        ],
        [
            "public void removeName(String name) {int index = getNameIndex(name);removeName(index);}\n"
        ],
        [
            "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( \"[RightMargin]\\n\" );buffer.append( \"    .margin               = \" ).append( \" (\" ).append( getMargin() ).append( \" )\\n\" );buffer.append( \"[/RightMargin]\\n\" );return buffer.toString();}\n"
        ],
        [
            "public RefreshAllRecord clone() {return copy();}\n"
        ],
        [
            "public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {super(queryConfig);add(new WildcardQueryNodeProcessor());add(new MultiFieldQueryNodeProcessor());add(new FuzzyQueryNodeProcessor());add(new RegexpQueryNodeProcessor());add(new MatchAllDocsQueryNodeProcessor());add(new OpenRangeQueryNodeProcessor());add(new PointQueryNodeProcessor());add(new PointRangeQueryNodeProcessor());add(new TermRangeQueryNodeProcessor());add(new AllowLeadingWildcardProcessor());add(new AnalyzerQueryNodeProcessor());add(new PhraseSlopQueryNodeProcessor());add(new BooleanQuery2ModifierNodeProcessor());add(new NoChildOptimizationQueryNodeProcessor());add(new RemoveDeletedQueryNodesProcessor());add(new RemoveEmptyNonLeafQueryNodeProcessor());add(new BooleanSingleChildOptimizationQueryNodeProcessor());add(new DefaultPhraseSlopQueryNodeProcessor());add(new BoostQueryNodeProcessor());add(new MultiTermRewriteMethodProcessor());}\n"
        ],
        [
            "public String formatAsString(String sheetName, boolean useAbsoluteAddress) {StringBuilder sb = new StringBuilder();if (sheetName != null) {sb.append(SheetNameFormatter.format(sheetName));sb.append(\"!\");}CellReference cellRefFrom = new CellReference(getFirstRow(), getFirstColumn(),useAbsoluteAddress, useAbsoluteAddress);CellReference cellRefTo = new CellReference(getLastRow(), getLastColumn(),useAbsoluteAddress, useAbsoluteAddress);sb.append(cellRefFrom.formatAsString());if(!cellRefFrom.equals(cellRefTo)|| isFullColumnRange() || isFullRowRange()){sb.append(':');sb.append(cellRefTo.formatAsString());}return sb.toString();}\n"
        ],
        [
            "public ByteBuffer put(int index, byte value) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public void mode(int m) {_mode = m;}\n"
        ],
        [
            "public ShortBuffer slice() {return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);}\n"
        ],
        [
            "public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}\n"
        ],
        [
            "public ByteBuffer putFloat(float value) {throw new ReadOnlyBufferException();}\n"
        ],
        [
            "public static double max(double[] values) {double max = Double.NEGATIVE_INFINITY;for (double value : values) {max = Math.max(max, value);}return max;}\n"
        ],
        [
            "public UpdateRepoWebhookRequest() {super(\"cr\", \"2016-06-07\", \"UpdateRepoWebhook\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]\");setMethod(MethodType.POST);}\n"
        ],
        [
            "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}\n"
        ],
        [
            "public String toString() {StringBuilder sb = new StringBuilder();sb.append(\"[SXPI]\\n\");for (int i = 0; i < _fieldInfos.length; i++) {sb.append(\"    item[\").append(i).append(\"]=\");_fieldInfos[i].appendDebugInfo(sb);sb.append('\\n');}sb.append(\"[/SXPI]\\n\");return sb.toString();}\n"
        ],
        [
            "public boolean isSuccessful() {if (mergeResult != null)return mergeResult.getMergeStatus().isSuccessful();else if (rebaseResult != null)return rebaseResult.getStatus().isSuccessful();return true;}\n"
        ],
        [
            "public void setBytesValue(byte[] value) {setBytesValue(new BytesRef(value));}\n"
        ],
        [
            "public DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeConnections(request);}\n"
        ],
        [
            "public DeletePhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"DeletePhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n"
        ],
        [
            "public void add(E object) {iterator.add(object);subList.sizeChanged(true);end++;}\n"
        ],
        [
            "public static ByteBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteHeapByteBuffer(capacity);}\n"
        ],
        [
            "public SrndQuery getSubQuery(int qn) {return queries.get(qn);}\n"
        ],
        [
            "public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.min(currentPayloadScore, currentScore);}}\n"
        ],
        [
            "public String toString(){StringBuilder sb = new StringBuilder();sb.append(\"[BLANK]\\n\");sb.append(\"    row= \").append(HexDump.shortToHex(getRow())).append(\"\\n\");sb.append(\"    col= \").append(HexDump.shortToHex(getColumn())).append(\"\\n\");sb.append(\"    xf = \").append(HexDump.shortToHex(getXFIndex())).append(\"\\n\");sb.append(\"[/BLANK]\\n\");return sb.toString();}\n"
        ],
        [
            "public DescribeLogPatternResult describeLogPattern(DescribeLogPatternRequest request) {request = beforeClientExecution(request);return executeDescribeLogPattern(request);}\n"
        ],
        [
            "public RegisterTransitGatewayMulticastGroupMembersResult registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeRegisterTransitGatewayMulticastGroupMembers(request);}\n"
        ],
        [
            "public GetPhoneNumberSettingsResult getPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberSettings(request);}\n"
        ],
        [
            "public ObjectId getData() {return data;}\n"
        ],
        [
            "public boolean isDirect() {return false;}\n"
        ],
        [
            "public DeleteServerCertificateRequest(String serverCertificateName) {setServerCertificateName(serverCertificateName);}\n"
        ],
        [
            "public StringBuffer append(double d) {RealToString.getInstance().appendDouble(this, d);return this;}\n"
        ],
        [
            "public GetEvaluationResult getEvaluation(GetEvaluationRequest request) {request = beforeClientExecution(request);return executeGetEvaluation(request);}\n"
        ],
        [
            "public LinkedDataRecord getDataName(){return dataName;}\n"
        ],
        [
            "public boolean find(int start) {findPos = start;if (findPos < regionStart) {findPos = regionStart;} else if (findPos >= regionEnd) {matchFound = false;return false;}matchFound = findImpl(address, input, findPos, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}\n"
        ],
        [
            "public GetLifecyclePolicyPreviewResult getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {request = beforeClientExecution(request);return executeGetLifecyclePolicyPreview(request);}\n"
        ],
        [
            "public SinglePositionTokenStream(String word) {termAtt = addAttribute(CharTermAttribute.class);posIncrAtt = addAttribute(PositionIncrementAttribute.class);this.word = word;returned = true;}\n"
        ],
        [
            "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_print_gridlines);}\n"
        ],
        [
            "public String toString() {final StringBuilder s = new StringBuilder();s.append(Constants.typeString(getType()));s.append(' ');s.append(name());s.append(' ');s.append(commitTime);s.append(' ');appendCoreFlags(s);return s.toString();}\n"
        ],
        [
            "public LsRemoteCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}\n"
        ],
        [
            "public void collapseRow(int rowNumber) {int startRow = findStartOfRowOutlineGroup(rowNumber);RowRecord rowRecord = getRow(startRow);int nextRowIx = writeHidden(rowRecord, startRow);RowRecord row = getRow(nextRowIx);if (row == null) {row = createRow(nextRowIx);insertRow(row);}row.setColapsed(true);}\n"
        ],
        [
            "public AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {request = beforeClientExecution(request);return executeAssociateSkillGroupWithRoom(request);}\n"
        ],
        [
            "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SERIESLIST]\\n\");buffer.append(\"    .seriesNumbers= \").append(\" (\").append( Arrays.toString(getSeriesNumbers()) ).append(\" )\");buffer.append(\"\\n\");buffer.append(\"[/SERIESLIST]\\n\");return buffer.toString();}\n"
        ],
        [
            "public QueryConfigHandler getQueryConfigHandler() {return this.queryConfig;}\n"
        ],
        [
            "public String getClassArg() {if (null != originalArgs) {String className = originalArgs.get(CLASS_NAME);if (null != className) {return className;}}return getClass().getName();}\n"
        ]
    ]
}