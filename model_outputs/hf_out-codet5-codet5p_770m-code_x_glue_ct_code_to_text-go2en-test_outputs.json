{
    "accuracy": 0,
    "bleu": {
        "bleu": 0.14509539204026203,
        "precisions": [
            0.5407853375246418,
            0.29236014794267223,
            0.16876065408169708,
            0.07659663280923891
        ],
        "brevity_penalty": 0.6824135324785141,
        "length_ratio": 0.7235264638988473,
        "translation_length": 18769,
        "reference_length": 25941
    },
    "codebleu": 0,
    "preds": [
        "// DeleteWorksheet deletes a worksheet by its CID.",
        "// DeleteWorksheetByCID deletes a worksheet by its CID.",
        "// FetchContactGroup returns a contact group by CID.",
        "// FetchContactGroups returns a list of all contact groups",
        "// UpdateContactGroup updates a contact group",
        "// CreateContactGroup creates a new contact group.",
        "// DeleteContactGroup deletes a contact group",
        "// FetchBroker returns a broker by CID.",
        "// FetchBrokers returns a list of all brokers",
        "// ActivateMetric returns true if the metric is activated.",
        "// AddMetricTags adds a metric tag to the check manager.\n// Returns true if the tag was added, false if the tag was updated.",
        "// addNewMetrics adds new metrics to the check bundle.",
        "// inventoryMetrics updates the availableMetrics map with the metrics\n// available to the check manager.",
        "// countNewTags returns the number of new tags in the given slice of tags.",
        "//Pluralize returns the plural form of a word.",
        "// Singularize returns the word with all singular rules.",
        "//Capitalize returns a string with the first character capitalized.",
        "//Camelize returns a camelized version of the word",
        "// getSuitableAlgFromCurve returns the appropriate algorithm for the given\n// elliptic curve.",
        "// getAlgFromKeyData returns the algorithm used to verify the key in the\n// given pemstore.",
        "// buildEncArgs builds the JSON encoding of the given args.",
        "// doDec decodes the token from the given byte slice and returns the decoded\n// JSON-encoded token.",
        "// doEnc is the internal function to do the actual encoding of a JWT.",
        "// Transport sets the transport used by the GServiceAccount.",
        "// Proxy sets the proxy to use for requests to the GServiceAccount.",
        "// Expiration is the time after which the service account will expire.",
        "// Encode encodes the given object to a base64 encoded string.",
        "// PeekHeaderField returns the next header field from buf without advancing the\n// cursor. It returns an error if the field is not found.",
        "// PeekAlgorithm returns the algorithm from the buffer.",
        "// PeekAlgorithmAndIssuer returns the algorithm and issuer from the given\n// buffer.",
        "// NewEllipticSigner creates a new elliptic signer.",
        "// NewTokenSource creates a new Bearer token source.",
        "// Client returns an http.Client that uses the bearer token.",
        "// Sign implements crypto.Signer, using the RSA method.",
        "// Verify verifies the signature of hashed with the public key pub.",
        "// NewRSASigner creates a new Signer that uses the given algorithm and\n// RSASignerVerifier to verify the given key.",
        "// getFieldWithTag returns the field with the given tag.",
        "// decodeToObjOrFieldWithTag decodes json to obj, if obj is not a struct,\n// it will try to find a field with specified tag, if not found,\n// it will use defaultObj as the value.",
        "// grabEncodeTargets returns the header and payload objects for the given object.",
        "// encodeTargets returns the header and payload for the given object.",
        "// peekField returns the value of the field at the given position in the given buffer.",
        "// ExpiresIn sets the time.Duration for the token expiration.\n// If the duration is 0, the token will expire immediately.",
        "// Claim adds a claim to the token.",
        "// Transport sets the http.RoundTripper used to perform the HTTP request.",
        "// NewHMACSigner creates a new HMAC signer.",
        "// FromJSON creates a new GServiceAccount from JSON.",
        "// FromReader creates a new GServiceAccount from a reader.",
        "// FromFile reads the service account from a file.",
        "// Signer returns a new jwt.Signer for the GServiceAccount.",
        "// Encode encodes the given object using the given algorithm.",
        "// UnmarshalText unmarshals the algorithm from a string.",
        "// DecodeUnverifiedToken decodes the given buffer into the given UnverifiedToken.",
        "// PublicKey returns the public key for the keystore.",
        "// PrivateKey returns the private key.",
        "// RegisterLocation registers a location with the transport.",
        "// NewArena returns a new Arena with the given size.",
        "// NewSkiplist creates a new Skiplist.",
        "// Init initializes the iterator.",
        "// Value returns the current value of the iterator.",
        "// Set sets the value at the current position.",
        "// SetMeta sets the meta field of the iterator.",
        "// Delete removes the next element from the iterator.",
        "// isSameArray returns true if the two arrays are the same.",
        "// New creates a new client.",
        "// WriteIndentedN writes the given string to the given writer, with the given\n// number of spaces.",
        "// WriteIndented writes the given bytes to the given writer, indented by 4 spaces.",
        "// NewReporter returns a new Reporter.",
        "// PostCount is a convenience wrapper for DefaultReporter.PostCount",
        "// PostCountTime is a convenience wrapper for DefaultReporter.PostCountTime",
        "// PostValue is a convenience wrapper for DefaultReporter.PostValue",
        "// PostValueTime is a convenience wrapper for DefaultReporter.PostValueTime",
        "// PostEZCount posts a count to the default reporter.",
        "// PostEZCountTime posts a count-time metric to the default reporter.",
        "// PostEZValue implements Reporter.PostEZValue",
        "// PostEZValueTime posts a value to the default reporter.",
        "// PostCount implements Reporter.PostCount.",
        "// PostCountTime is a convenience method for adding a new statistic with a\n// timestamp.",
        "// PostCountOne is a convenience method for PostCount.",
        "// PostValue implements Reporter.PostValue",
        "// PostValueTime is a convenience method for adding a value to the reporter.",
        "// PostEZCountOne posts a single ezcount metric.",
        "// PostEZCount implements Reporter.PostEZCount",
        "// PostEZCountTime records a count metric with a timestamp.",
        "// PostEZValue implements Reporter.PostEZValue",
        "// PostEZValueTime adds a new EZ value to the reporter.",
        "// NewBatchReporter returns a new BatchReporter.",
        "// cleanHost returns a Host with all fields cleaned.",
        "// GetHost returns the host with the given name.",
        "// Rescan returns a scan that can be used to scan the host.",
        "// Diff returns the ports that are not in the host but in the altHost.",
        "// ToString returns a string representation of a Host.",
        "// Init initializes a Scan struct.",
        "// AddHosts adds hosts to the scan.",
        "// SetHosts sets the hosts to scan.",
        "// AddPorts adds a port to the scan.",
        "// SetPorts sets the ports to scan.",
        "// SetTCPPorts sets the TCP ports to use for the scan.",
        "// SetUDPPorts sets the UDP ports to use for the scan.",
        "// AddFlags adds flags to the scan.",
        "// IntenseAllTCPPorts sets all TCP ports to 1 and 65535.",
        "// ToString returns a string representation of the scan.",
        "// CreateNmapArgs creates the arguments for the Nmap command",
        "// uint16ListToStringList converts a slice of uint16s to a slice of strings.",
        "// ToString returns a string representation of a port.",
        "// Counter returns the HOTP counter.",
        "// Increment increments the HOTP counter.",
        "// NewHOTP creates a new HOTP instance.",
        "// URL returns the URL to use for the given label.",
        "// QR returns a QR code for the given label.",
        "// truncate returns the last 4 bytes of the given byte slice.",
        "// FromURL parses a URL and returns a HOTP instance.",
        "// GenerateHOTP generates a new HOTP token.",
        "// YubiKey returns the code and public key from the given string.",
        "// IntegrityCheck returns the HOTP's Integrity Check string and the\n// counter value.",
        "// Check returns true if the given code is valid.",
        "// Marshal returns the ASN.1 encoding of the given HOTP.",
        "// Unmarshal decodes a HOTP from the given byte slice.",
        "// NewWriterPool creates a new WriterPool.",
        "// Get returns a writer that can be used to write to the given writer pool.\n//\n// The returned writer will be closed when the given release function is called.",
        "// Len returns the number of writers in the pool.",
        "// NewReaderPool creates a new ReaderPool.",
        "// Get returns a reader that can be used to read from r.\n//\n// The returned reader will be closed when the release function is called.",
        "// SetRate sets the maximum rate of the pool.",
        "// Len returns the number of readers in the pool.",
        "// NewMeasuredWriter returns a new MeasuredWriter.",
        "// BytesPerSec returns the number of bytes per second",
        "// NewMeasuredReader returns a new MeasuredReader.",
        "// BytesPer returns the number of bytes per second of the measured reader.",
        "// BytesPerSec returns the number of bytes per second.",
        "// ThrottledReader wraps r and returns a ThrottlerReader that limits the number of\n// bytes read per second.",
        "// ThrottledWriter returns a ThrottlerWriter that writes to w\n// the bytes written to w every bytesPerSec bytes per second.\n//\n// The rate limits the number of bytes written to w.\n//\n// The max burst is the duration that the writer will burst the write.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to w.\n//\n// The rate limits the number of bytes written to",
        "// NewDNSServer returns a new DNSServer.",
        "// qualifySrv returns a string that can be used to identify a service.",
        "// qualifySrvHosts returns a slice of SRVRecord with the host and port\n// qualified.",
        "// GetA returns the A record for the given fqdn.",
        "// SetA sets the A record for the given host.",
        "// DeleteA removes an A record from the DNS server.",
        "// SetSRV sets the SRV record for the given service and protocol.",
        "// DeleteSRV deletes a SRV record.",
        "// Json returns a Typed from a JSON string.",
        "// Must returns a Typed from a JSON string.",
        "// JsonReader reads the JSON from the given reader.",
        "// JsonFile reads the JSON file at the given path and returns the\n// Typed object.",
        "// JsonArray unmarshals a JSON array into a Typed array.",
        "// JsonFileArray returns a list of Typed objects from a JSON file.",
        "// Bool returns the value of a key as a bool.",
        "// BoolOr returns the value associated with the key if it exists, or d otherwise.",
        "// BoolMust returns the value associated with key as a bool.\n// If the key does not exist, it panics.",
        "// BoolIf returns the value associated with key as a bool.\n// If the key does not exist, it returns false and false.",
        "// IntOr returns the value associated with key or d if it exists.",
        "// IntMust returns the value associated with key as an int.\n// It panics if the key does not exist.",
        "// IntIf returns the value associated with the key as an int.\n// It returns false if the key does not exist or if the value does not implement\n// the int interface.",
        "// FloatOr returns the float64 value associated with the key or d if it exists.",
        "// FloatMust returns the float value for key.\n// It panics if the key does not exist.",
        "// FloatIf returns the float value associated with the key, or false if the key does not exist.",
        "// StringOr returns the value associated with the key if it exists, or d otherwise.",
        "// StringMust returns the value associated with the key as a string.\n// If the key does not exist, it panics.",
        "// TimeOr returns the value associated with key or d if it exists.",
        "// TimeMust returns the value for key as a time.Time.\n// It panics if the key does not exist.",
        "// TimeIf returns the value associated with key as a time.Time, or returns false.",
        "// ObjectMust returns a Typed object if the key exists.\n// Otherwise, it panics.",
        "// InterfaceOr returns the value associated with the key if it exists, or d otherwise.",
        "// InterfaceMust returns the value associated with the key as an interface.\n// If the key is not found, it panics.",
        "// InterfaceIf returns the value associated with the key, or returns false if the key does not exist.",
        "// Bools returns the value at key as a slice of bools.\n// If key is not found, it returns nil.",
        "// BoolsOr returns the value of a bool key or d if it is present.",
        "// Ints returns the value at key as a slice of int.\n// It returns nil if key does not exist.",
        "// Ints64 gets the int64 array from a key.",
        "// Floats returns the float64 value for key.",
        "// Strings returns the value at key as a slice of strings.",
        "// Objects returns the value of a key as a slice of Typed.",
        "// ObjectsIf returns the value at key if it exists and a boolean indicating if it exists.",
        "// GetSessions returns all sessions for a given channel.",
        "// ObjectChange sends a notification to the notifier that a change of the\n// given object type has occurred.",
        "// AutoOfferingPopUp will pop up offerings that are not already\n// offered by the user.",
        "// MarshalJSON implements the json.Marshaler interface for Base64BigInt.",
        "// Scan implements the sql.Scanner interface.",
        "// NewWorker creates a new worker instance.",
        "// NewLoggerBase creates a new LoggerBase.",
        "// Log logs a message to the logger.",
        "// PreAccountAddBalanceApprove adds a new balance to the given job.",
        "// PreAccountAddBalance adds the balance to the given job.",
        "// AfterAccountAddBalance is called after an account add balance job.",
        "// AfterAccountReturnBalance is called after an account has been returned to the\n// account manager.",
        "// AccountUpdateBalances updates the account balances for the given account.",
        "// PreAccountReturnBalance returns the balance of the given job to the\n// given account.",
        "// GetOfferingUsage returns the number of units used by the given offering.",
        "// GetProductUsage returns the number of units used by the given product.",
        "// AddMapping adds a port mapping to the UPnP service.",
        "// DeleteMapping deletes the port mapping for the given protocol and port.",
        "// PostCheque posts a cheque message to the given channel.",
        "// NewHTTPClient returns a new http.Client that uses the given sock\n// to connect to Tor.",
        "// NewServer creates a new instance of the RPC server.",
        "// AddHandler registers a new RPC handler for the given namespace.",
        "// ListenAndServe starts the server.",
        "// Recover will recover all the service statuses from the database.",
        "// ConnStr returns the connection string for the database.",
        "// NewDBFromConnStr creates a new database from a string.",
        "// NewDB creates a new database connection.",
        "// GetCountry returns the country associated with the given field.",
        "// Endpoint returns the endpoint for the given channel key.",
        "// NewServer returns a new pay.Server.",
        "// NewMonitor creates a new Monitor instance.",
        "// initLastProcessedBlock initializes the last processed block.",
        "// Start starts the monitor.",
        "// newClient creates a new client.",
        "// Loop runs the function f in a loop until ctx is canceled.",
        "// Offering returns the offering for the given hash.",
        "// Endpoint returns the endpoint for the given channel key.",
        "// Ping checks if the server is alive.",
        "// GetEthTransactions returns all transactions that are related to the\n// given account. If the account is an accountAggregated, then the\n// transactions are returned as an array of Ethereum addresses.",
        "// AgentSeal encrypts the given message with the given client public key and\n// returns the encrypted message.",
        "// ClientOpen returns the client's public key.",
        "// PackWithSignature packs a message with a signature.",
        "// UnpackSignature unpacks the signature from the given message.",
        "// VerifySignature verifies the signature of a message.",
        "// signature returns the signature of the given message.",
        "// GetObject returns the object with the given id.",
        "// GetObjectByHash returns the object with the given hash.",
        "// ToError converts an error into a Error.",
        "// SetPassword sets the password for the user.",
        "// UpdatePassword updates the password for the user.",
        "// GetToken returns a new access token for the given password.",
        "// NewProcessor creates a new processor.",
        "// NewConfig returns a new Config with default values.",
        "// NewQueue creates a new queue.",
        "// AddWithDataAndDelay adds a job with the given data and delay to the queue.",
        "// AddWithData adds a job to the queue with the given data.",
        "// AddSimple adds a job to the queue with a simple data structure.",
        "// AddWithDelay adds a job to the queue with a delay.",
        "// Subscribe adds a subscription to the queue.",
        "// Unsubscribe removes the given subscription from the queue.",
        "// TopUpChannel top-up a channel.",
        "// ChangeChannelStatus changes the status of a channel.",
        "// GetAgentChannels returns a list of all the channels that are associated with\n// the given service.",
        "// GetChannelsUsage returns the usage information for the specified channels.",
        "// GetClientChannels returns a list of client channels for the given channel\n// status, service status, and offset and limit.",
        "// ReadSetting returns the value of a setting.",
        "// ReadUintSetting reads the value of a setting as a uint.",
        "// ReadBoolSetting reads a bool setting from the database.",
        "// SuspendChannel suspends a service.",
        "// ActivateChannel activates a channel.",
        "// TerminateChannel is used to terminate a channel.",
        "// ExportPrivateKey exports the private key for the given account.",
        "// GetAccounts returns all accounts for the given token.",
        "// GenerateAccount generates a new account.",
        "// ImportAccountFromHex imports an account from a hex-encoded key.",
        "// ImportAccountFromJSON imports an account from a JSON blob.",
        "// TransferTokens transfers the given amount of gas from the given account to the\n// given destination.",
        "// UpdateBalance updates the balance for an account.",
        "// UpdateAccount updates an account.",
        "// GetLastBlockNumber returns the last block number of the last block in the chain.",
        "// GetEndpoint returns the endpoint for the given product and client key.",
        "// SetProductConfig updates the product config.",
        "// NewWriterLogger creates a new writer logger.",
        "// NewFileLogger creates a new file logger with the given configuration.",
        "// NewClient creates a new client for the given SOMC type and data.",
        "// Parse returns a new Interface based on the given config.",
        "// Map adds a port mapping to the given interface.",
        "// AddMapping adds a mapping to the discovery process.",
        "// DeleteMapping implements discovery.Discovery.DeleteMapping.",
        "// ReadFile reads the file from disk.",
        "// GetUserRole returns the user role associated with the given token.",
        "// NewHandler creates a new handler",
        "// NewBackend creates a new instance of the backend.",
        "// addTimeout returns a context with a timeout set to the given timeout.",
        "// PendingNonceAt returns the nonce for the given account.",
        "// SuggestGasPrice returns the suggested gas price for the given context.",
        "// EstimateGas returns the estimated gas for the given call.",
        "// CooperativeClose is used to close a transaction with a cooperative\n// balance.",
        "// GetTransactionByHash returns the transaction with the given hash.",
        "// RegisterServiceOffering registers a service offering with the backend.",
        "// PTCBalanceOf returns the balance of the given owner.",
        "// PTCIncreaseApproval increases the PTC approval for the given spender.",
        "// PSCBalanceOf returns the PSC balance of the given owner.",
        "// PSCAddBalanceERC20 adds a new balance to the PSC.",
        "// PSCGetOfferingInfo returns the offering information for the given hash.",
        "// PSCGetChannelInfo implements the PSC interface for backendInstance.",
        "// EthBalanceAt returns the balance of the given owner.",
        "// PSCSettle sets the PSC channel to the given block hash.",
        "// PSCRemoveServiceOffering removes the service offering from the PSC.",
        "// PSCPopupServiceOffering is used to pop up a service offering.",
        "// FilterLogs implements the FilterLogs method of the interface `Backend`.",
        "// HeaderByNumber returns the header for the given block number.",
        "// PTCAddress returns the PTC address of the backend.",
        "// PSCAddress returns the PSC address of the backend.",
        "// NewHandler returns a new Handler.",
        "// keyFromChannelData returns the key for the given channel.",
        "// AgentAfterChannelCreate is called after a channel is created.",
        "// AgentAfterChannelTopUp is called after a channel is opened.",
        "// AgentAfterUncooperativeCloseRequest is called after a channel is closed.",
        "// AgentAfterUncooperativeClose is called after a channel is closed, and the agent\n// is no longer responsible for any further processing.",
        "// AgentAfterCooperativeClose is called after a cooperative close.",
        "// AgentPreServiceSuspend is used to suspend a service.",
        "// AgentPreServiceUnsuspend is used to resume a service.",
        "// AgentPreServiceTerminate is used to terminate a service that has been suspended.",
        "// AgentAfterOfferingMsgBCPublish updates the offering status to\n// offering.Status.",
        "// AgentAfterOfferingDelete deletes the offering and updates the account\n// balance.",
        "// AgentPreOfferingDelete deletes the offering for the given job.",
        "// checkInPeriod checks if the given offering is in the given period.",
        "// AgentPreOfferingPopUp pops up the offering for the given job.",
        "// AgentAfterOfferingPopUp is called after an offering has been popped up.",
        "// Print prints the commit and version information.",
        "// Error returns the error message.",
        "// Message returns the message for the given error.",
        "// RespondResult is used to respond to a request with a JSON-encoded result.",
        "// RespondError writes the error response to the client.",
        "// handlePay handles a request to pay a payment.",
        "// getOpenBlockNumber returns the block number of the given service channel.",
        "// Offering returns the offering for the given hash.",
        "// HandlersMap returns a map of all the handlers for the given worker.",
        "// Version returns the database version.",
        "// Migrate runs the migrations for the given database.",
        "// NewMonitor creates a new Monitor.",
        "// Run starts the monitor.",
        "// VerifyBillingLags verifies that all billing lags are valid.",
        "// VerifySuspendedChannelsAndTryToUnsuspend verifies that all suspended channels\n// are unsuspended, and tries to unsuspend them.",
        "// VerifyChannelsForInactivity verifies that all channels are in use.",
        "// VerifySuspendedChannelsAndTryToTerminate verifies that all suspended channels are\n// still in use and that they are not in use by the service.",
        "// NewLogger creates a new logger.",
        "// BalanceClosingHash returns a Keccak256 signature for the given block and offering\n// hash.",
        "// Run starts the traversal NAT service.",
        "// RecoverPubKey returns the public key of the transaction.",
        "// GetTemplates returns all templates for the given user.",
        "// CreateTemplate creates a new template.",
        "// CreateProduct creates a new Querier product.",
        "// UpdateProduct updates a product.",
        "// GetProducts returns a list of all products.",
        "// NewHandler creates a new session handler.",
        "// EncryptedKey returns a Base64String containing the encrypted key\n// for the given private key.",
        "// ExecuteCommand executes the given command.",
        "// AddMapping adds a port mapping to the Nomad network.",
        "// DeleteMapping removes a port mapping from the NMP server.",
        "// NewMonitor creates a new Monitor.",
        "// GetOfferingIncome returns the amount of income for the given offering.",
        "// GetProductIncome returns the total amount of the given product.",
        "// GetTotalIncome returns the total income for the given channel.",
        "// Up00001 updates the schema to match the schema version 0001.",
        "// GetSettings returns all settings for the user.",
        "// UpdateSettings updates the settings for the given user",
        "// IsIPv4 returns true if the string is an IPv4 address.",
        "// IsHostname returns true if the string is a valid hostname.",
        "// IsNetPort returns true if the string is a valid net port.",
        "// IsTLSCert returns true if the given PEM-encoded block is a valid TLS certificate.",
        "// ValidateJSON validates the JSON data against the schema.",
        "// NewConfig returns a new Config with default values.",
        "// ReadJSONFile reads a JSON file into the given struct.",
        "// WriteJSONFile writes the given data to the given file.",
        "// IsUUID returns true if the string is a valid UUID.",
        "// ExeDirJoin returns the path to the executable file.",
        "// RootPath returns the path of the file that contains the function that\n// was called.",
        "// Caller returns the file and line number of the caller of the function.",
        "// CheckConnection checks if a connection to the given IP is available.",
        "// ClientAfterChannelCreate is called after a channel is created. It will\n// restore the channel's endpoint from the SOMC client.",
        "// ClientEndpointCreate creates a new client endpoint.",
        "// ClientAfterUncooperativeClose is called after a client closes the channel.",
        "// ClientAfterCooperativeClose is called after a cooperative close.",
        "// ClientPreServiceTerminate is called when a service is terminated by a client.",
        "// ClientPreServiceSuspend is called when a service is suspended.",
        "// ClientPreServiceUnsuspend is used to resume a service that was previously suspended.",
        "// ClientPreUncooperativeClose is called when a client is about to be closed.\n// It will create a cooperative close job for the client and the associated\n// channel.",
        "// ClientPreChannelTopUp is used to pre-channel top up for a client.",
        "// ClientAfterChannelTopUp is called after a client has been created to\n// initiate a channel top-up.",
        "// ClientPreUncooperativeCloseRequest sends a client pre-uncooperative close request\n// to the server.",
        "// ClientAfterUncooperativeCloseRequest is called after a client has received a\n// request to close the channel.",
        "// ClientAfterOfferingMsgBCPublish is called after a new offering message is\n// received from the client.",
        "// ClientAfterOfferingPopUp is called after a offering has been popped up.",
        "// ClientAfterOfferingDelete is called after a client has removed an offer.",
        "// DecrementCurrentSupply decrements the current supply for the given job.",
        "// GetEndpoints returns all endpoints for a given channel and template.",
        "// GetGUISettings returns the GUI settings for the current user.",
        "// SetGUISettings sets the GUI settings for the server.",
        "// HandleFunc registers a new HandlerFunc for the given pattern.",
        "// RequireHTTPMethods returns a HandlerFunc that will respond with a 405\n// if the request method is not one of the provided methods.",
        "// RequireBasicAuth returns a HandlerFunc that requires basic authentication.",
        "// New creates a new service.",
        "// EndpointMessage returns a message from the given channel.",
        "// ConnChange returns a subscription that will notify the notifier when\n// a connection change occurs.",
        "// FromBase64ToHex converts Base64String to hex string.",
        "// HexToBytes converts a hex string to a byte slice.",
        "// ToBytes decodes the Base64String to a byte slice.",
        "// ToHash parses a base64 encoded string and returns the hash.",
        "// HexToHash parses a hex string and returns a common.Hash.",
        "// HexToAddress converts a hex string to an address.",
        "// BytesToUint32 converts a byte slice to a uint32",
        "// Uint32ToBytes converts x to a 4 byte slice.",
        "// Uint64ToBytes converts x to a byte slice.",
        "// Uint192ToBytes converts x to a byte slice.",
        "// HashPassword hashes the given password with the given salt and returns the\n// Base64String representation of the password.",
        "// ValidatePassword validates the given password against the given salt.",
        "// GetUint64Setting returns the value of the given key.",
        "// ChannelKey returns the key used to encrypt and decrypt a channel.",
        "// MinDeposit returns the minimum deposit price for the given offering.",
        "// AcceptOffering accepts an offering.",
        "// ChangeOfferingStatus changes the status of an offering.",
        "// GetClientOfferings returns a list of offerings for the given agent,\n// with the given min and max unit price.",
        "// GetAgentOfferings returns the offerings for the given product and statuses.",
        "// setOfferingHash sets the hash of the offering.",
        "// fillOffering fills the offering with the given data.",
        "// UpdateOffering updates the offering.",
        "// CreateOffering creates a new offering.",
        "// GetClientOfferingsFilterParams returns the parameters for the GetClientOfferings\n// API call.",
        "// PingOfferings is used to ping all the offerings",
        "// NewServer returns a new instance of the server.",
        "// Mux returns the http.ServeMux for the server.",
        "// NewLogger returns a new report logger.",
        "// Printf implements the Report interface.",
        "// GetURL returns the URL for the given path.",
        "// NewHTTPRequest creates a new http.Request with the given\n// configuration.",
        "// NewHTTPRequestWithURL creates a new http.Request with the given parameters.",
        "// Send sends an HTTP request and returns the response.",
        "// Check returns true if the token is equal to the given string.",
        "// Make returns a new token.",
        "// GetLogs returns a list of logs for the given search text.",
        "// AuthClient authenticates a client with a given product and client key.",
        "// StartSession starts a new session for a given product and client key.",
        "// UpdateSession updates the current session for the given product, product password,\n// client key, and units.",
        "// OfferingMessage creates a new Message from the given offering.",
        "// ValidMsg returns true if the given schema is valid.",
        "// NewClient creates a new client",
        "// PanicHunter is a panic hunter.",
        "// ParseRequest parses the request and returns true if the request was successful.",
        "// Save saves the ipvs configuration to disk.",
        "// NewClient returns a new Sling client.",
        "// ParseRate parses the rate header from the given http.Response.",
        "// SetOutputPath is a no-op implementation for BTTracer.",
        "// UpdateConfig updates the global configuration.",
        "// SetTracerPath sets the path to the tracer binary.",
        "// SetOutputPath sets the output directory for the BTTracer.",
        "// SetPipes sets the stdin and stderr pipes for the BTTracer.",
        "// AppendOptionWithPrefix appends an option to the list with the given prefix.",
        "// MarshalRaw writes the given byte slice to the underlying buffer.",
        "// MarshalString writes the string to the wire format.",
        "// MarshalBytes writes the bytes to the buffer.",
        "// MarshalBool marshals a bool value",
        "// MarshalUint32 marshals uint32 to the wire format.",
        "// MarshalUint64 marshals uint64 to the wire format.",
        "// ElementSizeExceeded is used to indicate that the field's size exceeds the limit.",
        "// nextSpecialChar returns the position of the next non-printable character in p.",
        "// nextSpecialChar returns the position of the next special character in p.",
        "// NewDecoder returns a new io.Reader that reads from r.\n//\n// The returned io.Reader implements io.ByteReader.",
        "// Register registers a function to be called when the dependency injector is created.",
        "// MustRegister registers a constructor function with the dependency injector.\n// It panics if the constructor function is not registered.",
        "// Create creates a new instance of the given type.",
        "// cachedCreateFromType returns the cached value for the given type.",
        "// NewDependencyInjector returns a new dependency injector.",
        "// NewServiceContainer returns a new ServiceContainer.",
        "// AssetUrl implements AssetPipeline.AssetUrl",
        "// Prefix returns a new AssetPipeline that prepends the given prefix to the\n// asset pipeline.",
        "// ServeHTTP implements the http.Handler interface.",
        "// getResponse returns the response from the controller.",
        "// isValid returns true if the controller handler is valid.",
        "// NewHandler creates a new ControllerHandler.",
        "// Handler returns a http.HandlerFunc that calls the given GoannaHandlerFunc\n// to handle the request.",
        "// SetRequest sets the request for the controller.",
        "// Session returns the current session.",
        "// RenderView renders a view with the given template.",
        "// RenderTemplate renders the template with the given variables.",
        "// RedirectRoute returns a RedirectResponse with the given route name and args.",
        "// UrlFor returns a url for the given route name and args.",
        "// CookieValue returns the value of the cookie with the given name.",
        "// BodyData returns the request body data.",
        "// QueryValue returns the value of the given query key.",
        "// FormValueOrDefault returns the form value for the given key, or the default value if the key is not found.",
        "// UrlValue returns the value of the given key from the URL query.",
        "// Contains checks if a string contains a given substring.",
        "// RemoveStringsFromString removes the given strings from the given string.",
        "// Map takes a slice of strings and a callback function and returns a slice of strings\n// that are the result of calling the callback function on each string in the slice.",
        "// Equal returns true if the two arrays are equal.",
        "// Uniq returns a slice of strings with unique elements.",
        "// NewCookieSigner returns a new CookieSigner.",
        "// EncodeCookie encodes the cookie value.",
        "// DecodeCookie decodes the cookie value.",
        "// DecodeValue decodes the encoded value from the cookie.",
        "// EncodeValue encodes the given value to the cookie.",
        "// ServeHTTP implements the http.Handler interface.",
        "// NewSprocketsServer creates a new SprocketsServer.",
        "// normaliseKey normalizes the key to be safe for use in the query string.",
        "// StopAndLog stops the monitor and logs the result.",
        "// MonitorFunc is like Monitor but takes a function.",
        "// MonitorReflectedFunc calls the function with the given arguments and returns the result.",
        "// LogRequest logs the request to the logger.",
        "// CommonLogHandler returns a new http.Handler that logs to the standard logger.\n// The logger is optional. If nil, the standard logger is used.\n// The templ is optional. If empty, the default template is used.",
        "// ServeHTTP implements the http.Handler interface",
        "// UrlUsername returns the username of the logged in user.",
        "// UrlFor returns a url for the given name and args.",
        "// AbsoluteUrlFor returns a new url.URL with the host and scheme set to the\n// UrlBase.",
        "// Parse json data to struct",
        "// LoadFromEnv loads the environment variables from the given struct.",
        "// RegexPath returns a handler that matches the given regular expression.",
        "// CacheControl returns a new http.Handler that caches the response\n// with the given maxage.",
        "// transform converts a map or slice to a map or slice.",
        "// DiscoverWalk walks the app tree and calls discoverFn for each endpoint.\n//\n// If discoverFn returns an error, the walk stops and the error is returned.",
        "// DiscoverEndpoints returns the endpoints for the given app.",
        "// JSONFieldsFromStruct returns the json fields of the struct.",
        "// StructFieldFromJSONName returns the value of the field named by name from the struct v.\n// If the struct is not a struct, it returns \"\".",
        "// Enumerate returns an Enumerator that iterates over all the keys in the\n// dictionary.",
        "// Release releases the message from the pool.",
        "// Wrap wraps an error with a given text.",
        "// causer returns an Error that indicates that the caller should not\n// attempt to perform any action.",
        "// From returns a Context from the given context.",
        "// With implements context.Context.",
        "// Format implements fmt.Formatter.",
        "// NewWriter returns a new Writer.",
        "// Levels returns the set of levels that are enabled for the writer.",
        "// SetLevel sets the log level for the writer.",
        "// Suppress sets the suppress level for the writer.",
        "// IsSuppressed returns true if the given log level is suppressed.",
        "// Handle adds a handler to the writer.",
        "// SetOutput sets the output writer for the writer.",
        "// Enumerate returns an Enumerator that can be used to iterate over all\n// files in the directory.",
        "// All returns true if all elements of the given enumerable satisfy the predicate.",
        "// All returns true if all elements of the Enumerator satisfy the Predicate.",
        "// Any returns true if any element of the given Enumerable is true.",
        "// Anyp iterates over an Enumerable and returns true if the predicate returns true.",
        "// AsEnumerable returns an Enumerable from a slice of values.",
        "// First returns the first element of the given enumerable.",
        "// Merge returns an Enumerator that contains all the elements of the given\n// Enumerator and all the elements of the given Enumerator.",
        "// ParallelSelect returns an Enumerable that is the result of applying the\n// operation on each element of the original Enumerable.",
        "// ParallelSelect performs the given operation on each element of the iterator,\n// splitting the result into parallel elements.",
        "// Reverse returns an Enumerator that reverses the order of the elements in the\n// Enumerator.",
        "// Select returns an Enumerable that contains elements from the original\n// Enumerable that match the given Transform.",
        "// Select returns an Enumerator that contains all elements that match the\n// given transform function.",
        "// SelectMany returns an Enumerable that contains all elements in subject that\n// are in toMany.",
        "// SelectMany iterates over all the elements of the Enumerator, calling the\n// given Unfolder function on each element.",
        "// Single returns the first element of the given Enumerable.",
        "// Singlep returns the first element of the given enumerable that satisfies the given predicate.",
        "// Skip returns an Enumerable that skips n elements from the original Enumerable.",
        "// splitN returns a slice of Enumerator that contains n elements.",
        "// Take returns an Enumerable that contains n elements from subject.",
        "// Take returns an Enumerator that contains n elements from the Enumerator.",
        "// TakeWhile returns an Enumerable that contains elements from the given\n// source that satisfy the given criteria.",
        "// TakeWhile returns an Enumerator that contains all elements from the Enumerator\n// that satisfy the given criteria.",
        "// Tee returns a new Enumerator that contains all the elements of the\n// receiver and the other Enumerator.",
        "// ToSlice returns the values of the Enumerator as a slice.",
        "// Where returns an Enumerable that contains elements that satisfy the predicate p.",
        "// Where returns an Enumerator that contains all elements that satisfy the predicate.",
        "// ReleaseBuffer releases the buffer.",
        "// NewStack creates a new stack with the given entries.",
        "// Enumerate returns an Enumerator that iterates over all elements in the stack.\n// The returned Enumerator will stop when cancel is closed.",
        "// IsEmpty returns true if the stack is empty.",
        "// Push adds an element to the stack.",
        "// Pop removes the first element on top of the stack.",
        "// Peek returns the first element on the stack without removing it.",
        "// Size returns the size of the stack.",
        "// NewLinkedList returns a new linked list with the given entries.",
        "// AddBack adds an element to the end of the list.",
        "// Enumerate returns an Enumerator that can be used to iterate over the list.\n// The returned Enumerator will block until the cancel channel is closed.",
        "// Get returns the value at the given position.",
        "// IsEmpty returns true if the list is empty.",
        "// Length returns the number of elements in the list.",
        "// PeekBack returns the last element of the list without removing it.",
        "// PeekFront returns the first element of the list without removing it.",
        "// RemoveFront removes the first element from the list and returns the value\n// of the element and true if the element was removed.",
        "// RemoveBack removes the last element from the list and returns the value of the last element.\n// It returns false if the list is empty.",
        "// Sort sorts the list by the given comparator.",
        "// Sorta sorts the list by string value.",
        "// Sorti sorts the list by integer value.",
        "// String returns a string representation of the list.",
        "// Swap swaps the elements at the given indices.",
        "// merge merges two lists of elements.",
        "// split returns the left and right nodes of the given head.",
        "// Add adds an element to the queue.",
        "// Enumerate returns an Enumerator that iterates over all elements in the queue.\n// The returned Enumerator will stop when cancel is closed.",
        "// IsEmpty returns true if the queue is empty.",
        "// Length returns the number of elements in the queue.",
        "// Next returns the next element from the queue.",
        "// Peek returns the first element of the queue without removing it.",
        "// ToSlice returns the contents of the queue as a slice.",
        "// EnableVirtualTerminalProcessing enables virtual terminal processing.",
        "// unquote returns the unescaped version of the input.",
        "// countScalars returns the number of scalar types in input.",
        "// IsTerminal returns true if the given writer is a terminal.",
        "// Add adds the given entries to the list.",
        "// AddAt adds the given entries to the list at the given position.",
        "// Enumerate returns an Enumerator that iterates over all the elements in the\n// List.",
        "// Get returns the value at the given position.",
        "// IsEmpty returns true if the list is empty.",
        "// Length returns the number of elements in the list.",
        "// Remove removes the element at the given position.",
        "// Set sets the value at the given position.",
        "// String returns a string representation of the list.",
        "// Swap swaps the elements at the given positions.",
        "// MarshalText implements the encoding.TextMarshaler interface for List.",
        "// UnmarshalText unmarshals text into a List.",
        "// repl returns the string representation of a match.",
        "// Format returns a string with all occurrences of the format string\n// replaced with the given time.Time.",
        "// logName returns the name of the log file for the given logger and tag.",
        "// Monotonic returns the time.Duration since the Unix epoch.",
        "// set sets the severity.",
        "// Set sets the severity from a string.",
        "// set sets the level to the given value.",
        "// match returns true if the given file matches the pattern.",
        "// match returns true if the regexp matches the given path.",
        "// match returns true if the file and line match.",
        "// NewLogger creates a new logger with the given name and skip.",
        "// SetLogDir sets the log directory.",
        "// SetLogToStderr sets the log to stderr mode.",
        "// SetAlsoLogToStderr sets the log to stderr if the log is already\n// set to stderr.",
        "// setVState sets the verbosity and filter state.",
        "// getBuffer returns a buffer for the current log.",
        "// putBuffer adds a buffer to the free list.",
        "// output writes the given buffer to the log.",
        "// timeoutFlush flushes all logs after the given timeout.",
        "// stacks returns a slice of stack traces.",
        "// exit is used to handle an error.",
        "// rotateFile creates a new log file and writes the log lines to it.",
        "// createFiles creates all the files needed to log the given severity.",
        "// flushDaemon is a goroutine that periodically flushes all logs.",
        "// lockAndFlushAll locks the log and flushes all log messages.",
        "// flushAll flushes all the log files.",
        "// Add adds a function to the bundle.",
        "// Join waits for all resources to be closed and returns the first error.",
        "// NewBundle creates a new Bundle.",
        "// Expand expands the tokens to a list of tokens.",
        "// CacheFunc wraps a http.HandlerFunc and caches the response.",
        "// CacheFasthttp creates a new fasthttp.Handler that caches the given request body\n// handler.",
        "// CacheFasthttpFunc wraps the given request handler and caches the given request\n// body in the cache.",
        "// ContentType returns the content type of the response.",
        "// ServeHTTP handles the HTTP request",
        "// New creates a new http.Server with the given address and store.",
        "// AcquireResponseRecorder returns a ResponseRecorder.",
        "// ReleaseResponseRecorder releases the response recorder.",
        "// Claim returns true if the request is valid.",
        "// Rule sets the rule that will be used when checking the request.\n// If nil is passed then the default rule will be used.",
        "// Reset resets the entry's state.",
        "// NoCache set the NoCache header to true",
        "// clientOAuth creates a new clientOAuthAuthentication object.",
        "// authenticate sets the Authorization header to the OAuth token.",
        "// apiKeyAuth returns an apiKeyAuthentication struct.",
        "// authenticate sets the appropriate headers for the request",
        "// serviceOAuth creates a new service OAuth Authentication object.",
        "// authenticate is a no-op implementation for service OAuth authentication.",
        "// OAuthService returns an OAuth object that can be used to access the Coinbase\n// service.",
        "// CreateAuthorizeUrl returns the URL to which the user can authorize the\n// application.",
        "// RefreshTokens will get the new tokens from the old map and return them.",
        "// NewTokens returns a new oauthTokens object.",
        "// NewTokensFromRequest returns a new oauthTokens object from an http.Request.",
        "// Request executes a request to the given endpoint, and unmarshals the response into the given holder.",
        "// createRequest creates a new request for the given method and endpoint.",
        "// executeRequest executes the given request and returns the response body.",
        "// simulateRequest is used to simulate a request to the given endpoint and method.",
        "// ApiKeyClient returns a new client that uses the given key and secret\n// to authenticate with the API.",
        "// OAuthClient returns a new Client that uses the given OAuth tokens.",
        "// Get sends a GET request to the server with the given path and params.\n// The holder interface is used to store the result.",
        "// GetBalance returns the balance of the account.",
        "// GetAllAddresses returns all addresses for the account.",
        "// GenerateReceiveAddress generates a new receive address for the account.",
        "// SendMoney sends a new money transaction to the bitcoin network.",
        "// RequestMoney requests a transaction confirmation for a new amount.",
        "// ResendRequest sends a request to the server to re-send the request.",
        "// CancelRequest cancels a request for a transaction.",
        "// CompleteRequest is used to complete a previously initiated request.",
        "// CreateButton creates a new button.",
        "// CreateOrderFromButtonCode creates an order from a button code.",
        "// CreateUser creates a new user with the given email and password.",
        "// Buy creates a new transfer from the given amount and agrees with the\n// given agree_btc_amount_varies flag.",
        "// GetContacts returns a list of all contacts.",
        "// GetCurrencies returns the list of currencies available for the account.",
        "// GetExchangeRates returns the exchange rates for all currencies.",
        "// GetExchangeRate returns the exchange rate for the currency pair.",
        "// GetTransactions returns a list of transactions for the given page.",
        "// GetOrders returns a list of orders for the given page.",
        "// GetTransfers returns a list of transfers for the given page.",
        "// GetBuyPrice returns the price for the given quantity.",
        "// GetSellPrice returns the price for the sell transaction.",
        "// GetTransaction returns the details of a transaction.",
        "// GetOrder returns the details of an order.",
        "// GetUser returns the user information for the authenticated user.",
        "// NewSerialDispatcher creates a new Dispatcher that will dispatch events to the\n// handlers.",
        "// AppendHandlers appends a new handler to the end of the list of handlers to be called\n// when the dispatcher is started.",
        "// DispatchOptional is like Dispatch but it returns an error if the command\n// could not be executed.",
        "// NewParallelDispatcher creates a new ParallelDispatcher.",
        "// ReleaseMsg releases the message from the connection.",
        "// ReleaseBuffer releases the buffer.",
        "// Close closes the underlying connection.",
        "// Write implements the io.Writer interface.",
        "// Accept returns a connection from the listener.",
        "// AddDialer adds a new dialer to the list of dialers to use.",
        "// subDialerForAddr returns the sub-dialer for the given address.",
        "// rawConnDial dials to the given address using the given context.",
        "// MultiaddrProtocolsMatch returns true if the two multiaddr protocols match.",
        "// MultiaddrNetMatch returns the first multiaddr that matches the given\n// target and all of the given sources.",
        "// get returns the value associated with the given key.",
        "// getArray returns the value associated with the given key as a slice.",
        "// buildParams builds the command line arguments for wkhtmltoimage",
        "// unsetenvGPGAgentInfo unsets the GPG_AGENT_INFO environment variable.",
        "// AssuanSend sends a command to the Assuan device.",
        "// NewData creates a new data structure.",
        "// NewDataFile creates a new data structure from a file descriptor.",
        "// NewDataBytes creates a new data structure from a byte slice.",
        "// NewDataReader creates a new data reader.",
        "// NewDataWriter creates a new data writer.",
        "// NewDataReadWriter creates a new data structure with the given io.ReadWriter.",
        "// NewDataReadWriteSeeker creates a new data structure with the given io.ReadWriteSeeker.",
        "// Close releases the data handle.",
        "// Name returns the name of the data file.",
        "// NewCommand creates a new command.",
        "// Arg adds an argument to the command.",
        "// String returns a string representation of the command.",
        "// Columns returns the columns of the record.",
        "// Get returns the value of the given column.",
        "// GetBool returns the value of the given column as a bool.",
        "// GetInt returns the value at the given column as an int64.",
        "// GetSlice returns the value of a column as a slice.",
        "// GetString returns the value of the given column as a string.",
        "// GetTime returns the value at the given column as a time.Time.",
        "// ChangeContactModattr changes the contact's modattr value.",
        "// ChangeContactModhattr changes the contact's modhattr.",
        "// ChangeContactModsattr changes the contact's modsattr.",
        "// ChangeCustomContactVar changes the value of a custom contact variable.",
        "// ChangeCustomHostVar changes the value of a custom host variable.",
        "// ChangeCustomSvcVar changes the custom service variable",
        "// ChangeHostCheckTimeperiod changes the time period for a host check.",
        "// ChangeHostModattr changes the host's modattr value.",
        "// ChangeSvcModattr changes the service modattr value",
        "// DelAllSvcComments deletes all comments for a service.",
        "// DisablePassiveSvcChecks disables passive service checks.",
        "// DisableServiceFlapDetection disables flap detection for a service.",
        "// DisableSvcCheck disables the service check for the given host name.",
        "// DisableSvcEventHandler disables the service event handler.",
        "// DisableSvcFlapDetection disables flap detection for a service.",
        "// DisableSvcNotifications disables service notifications for the given\n// service.",
        "// EnablePassiveSvcChecks enables passive service checks on the given host.",
        "// EnableSvcCheck enables service check on the given host.",
        "// EnableSvcEventHandler enables the event handler for a service.",
        "// EnableSvcFlapDetection enables flap detection on the given service.",
        "// EnableSvcNotifications enables service notifications for the given\n// service.",
        "// RemoveSvcAcknowledgement removes the service acknowledgement from the\n// service list.",
        "// StartObsessingOverSvc starts the service with the given host name and\n// description.",
        "// StopObsessingOverSvc stops the service with the given host name.",
        "// NewQuery creates a new Query.",
        "// Columns sets the columns to be used for the query.",
        "// Filter adds a filter rule to the query.",
        "// And adds an AND clause to the query.",
        "// Negate adds a Negate clause to the query.",
        "// WaitObject waits for the specified object to be returned.",
        "// WaitCondition adds a condition to the query.",
        "// WaitConditionNegate sets the condition to be negated.",
        "// WaitTrigger sets the event to wait for.",
        "// WaitTimeout sets the timeout for the query.",
        "// KeepAlive sets the KeepAlive header to true.",
        "// ReadTimeout sets the timeout for reading from the database.",
        "// String returns the string representation of the query.",
        "// NewClient creates a new client with the given network and address.",
        "// NewClientWithDialer creates a new client with a custom net.Dialer.",
        "// Exec executes the given Request and returns the Response.",
        "// xtoi2 returns the byte value of the first 2 bytes of s.",
        "// Mask returns the bits of the given address that are not in the given mask.",
        "// New create a new OuiDb instance",
        "// Lookup returns the block with the given address.",
        "// VendorLookup returns the organization of the given MAC address.",
        "// Contains returns true if the given address is contained in the block.",
        "// ThrottledReader wraps r and throttles its read.",
        "// NewThrottledBucket wraps a wrapped bucket with a throttle.",
        "// NewCmdWithRunner creates a new CmdWithRunner.",
        "// MustNewCmdWithRunner creates a new command with the given runner.\n// If the runner returns an error, the command will panic.",
        "// importBreakPaths returns the import paths that were found in the file.",
        "// SelfProxyCmderSupplier returns a CmderSupplier that returns a\n// Cmder that is the same as the self-proxy Cmder.",
        "// SupplierWithPrependedArgs returns a CmderSupplier that calls the supplied\n// CmderSupplier with the supplied arguments.",
        "// selfCmder returns the path to the executable of the process that\n// contains the package.",
        "// CmderWithPrependedArgs wraps a Cmder with additional arguments.",
        "// NewSeeforRouter creates a new Seefor router.",
        "// ServeHTTP implements http.Handler interface.",
        "// Before registers middleware to be executed before any request.",
        "// After add middleware to the Seefor instance.",
        "// UseTimer sets the timer to use for the timer.",
        "// NewRouter creates a new router.",
        "// ServeHTTP dispatches the request to the appropriate handler.",
        "// Group registers a new group router for the given path.",
        "// findChild returns the routeNode that contains the given node.",
        "// insertChild inserts a new child node into the route tree.",
        "// Get returns a counter by name.",
        "// ServeHTTP returns the JSON representation of the timer.",
        "// main is the entry point for the application.",
        "// NewGroupRouter creates a new GroupRouter",
        "// RouteMiddleware returns a middleware that sets the \"say\" app value to \"Hello\"",
        "// RouteHandlerFunc returns a handler that can be used to route a request to a\n// route handler.",
        "// RectFromSphere creates a rectangle from a sphere.",
        "// CopyRect returns a copy of the rectangle.",
        "// Size returns the size of the rectangle.",
        "// Overlaps returns true if the rectangle overlaps with the given rectangle.",
        "// String returns a string representation of the Rectangle.",
        "// Dx returns the distance from the center of the rectangle.",
        "// Dy returns the distance between the min and max y-axis.",
        "// In returns true if the rectangle contains the given rectangle.",
        "// Approx returns true if the given point is closer than the given point.",
        "// ApproxEpsilon returns true if x-y is less than eps.",
        "// SetXYZ sets the 3d vector to the given values.",
        "// Vec3Dist2DSqr returns the square distance between v1 and v2.",
        "// Copy copies the vector into the destination vector.",
        "// Assign assigns v to v1.",
        "// Dist2D returns the distance between two vectors.",
        "// Dist2DSqr returns the square distance between v and v1.",
        "// Cross returns the vector v cross v1.",
        "// Dot2D returns the dot product of two vectors.",
        "// NewRay returns a new Ray.",
        "// IntersectRect returns true if the ray intersects the given rectangle.",
        "// SupportedFunc returns a function that can be used to check if the given\n// request is supported by the given server.",
        "// NewSigner creates a new Signer from a key file or PEM-encoded private key.",
        "// NewVerifier returns a new Verifier instance.",
        "// Request sends a request to the OpenGDL API.",
        "// Status returns the status of the request with the given id.",
        "// Cancel cancels the request with the given id.",
        "// Discovery returns the discovery information for the current environment.",
        "// NewClient creates a new client.",
        "// Push adds a new value to the stack.",
        "// Pop removes the top-most element from the stack.",
        "// PopLast removes the last element from the stack and returns it.",
        "// Peek returns the top element of the stack without removing it.",
        "// PeekN returns the first n elements of the stack without removing them.",
        "// Vecf32 creates a new vector from a float32.",
        "// Veci returns a Vec with the given x and y coordinates.",
        "// Add returns the sum of v and v2.",
        "// Sub returns the vector v minus v2.",
        "// In returns true if the vector is in the given rectangle.",
        "// Len returns the length of the vector.",
        "// ApproxFuncEqual returns true if the two vectors are equal, using the given function.",
        "// Merge merges the given handler map into the current handler map.",
        "// respCode returns the status code for a request.",
        "// NewServer creates a new server instance.",
        "// Callback makes a callback to the OpenGDPR API.",
        "// ErrNotFound returns an error indicating the request with the given id was not found.",
        "// ErrUnsupportedRequestType is returned when the request type is not supported.",
        "// ErrUnsupportedIdentity returns an error indicating that the identity is not supported.",
        "// ErrMissingRequiredField is returned when a required field is not provided.",
        "// ErrInvalidRequestSignature is used to indicate that the request signature is invalid.",
        "// DatabaseServers returns a list of all the available database servers.",
        "// SnapshotDatabaseServer returns a snapshot of the database server identified by the given identifier.",
        "// ResetPasswordForDatabaseServer resets the password for a database server.",
        "// Servers returns a list of all servers available on the cluster.",
        "// Server returns the details of a server.",
        "// DestroyServer destroys a server",
        "// LockServer locks the server identified by identifier.",
        "// UnlockServer unlocks a server",
        "// SnapshotServer returns the snapshot of the specified server.",
        "// FullConsoleUrl returns the full URL to the console.",
        "// FirewallRule returns the firewall rule with the specified identifier.",
        "// ServerGroups returns a list of all available server groups",
        "// ServerGroup returns the details of a server group.",
        "// AddServersToServerGroup adds servers to a server group",
        "// MoveServersToServerGroup moves the specified servers to the specified server group.",
        "// LoadBalancers returns a list of all load balancers.",
        "// LoadBalancer returns the details of a load balancer.",
        "// AddNodesToLoadBalancer adds nodes to the specified load balancer.",
        "// RemoveListenersFromLoadBalancer removes the specified listeners from the specified load balancer.",
        "// LockResource locks the resource.",
        "// FirewallPolicies returns the list of firewall policies for the current environment.",
        "// FirewallPolicy returns the firewall policy with the specified identifier.",
        "// ApplyFirewallPolicy applies the specified firewall policy to the specified\n// server group.",
        "// Extract returns the AuthResult from the GetAuthResult.",
        "// ApiClients returns a list of all the available API clients.",
        "// ApiClient returns an instance of the ApiClient with the given identifier.",
        "// ResetSecretForApiClient resets the secret for an api client",
        "// Images returns a list of all images available on the Vultr account.",
        "// Image returns the image with the given identifier.",
        "// Accounts returns a list of all accounts.",
        "// Account returns the details of an account.",
        "// CloudIPs returns a list of all cloud IPs available on the Vultr account.",
        "// CloudIP returns the cloud IP associated with the given identifier.",
        "// MapCloudIPtoServer maps cloud ip to a server",
        "// setAuthHeader sets the X-Auth-Token header on the request.",
        "// Auth returns the credentials for the given provider.",
        "// Collaborations returns a list of collaborations for the authenticated user.",
        "// Collaboration returns the collaboration with the given identifier.",
        "// DatabaseSnapshots returns a list of all the snapshots available to the cluster.",
        "// DatabaseSnapshot returns the details of a database snapshot.",
        "// Scan returns a list of all alive IPs in the given CIDR.",
        "// ToFile downloads the file from the given URL and writes it to the given destination.",
        "// ToWriter writes the contents of src to w.",
        "// FromURL downloads the given file from the given URL and writes the contents to the given writer.",
        "// ForPeriod returns the TOTP code for the given period.",
        "// QRCodeData returns the QR code data for the given label.",
        "// RandomSecret returns a base32 encoded string of the given length.",
        "// DefaultPeerConfig returns a default PeerConfig for use with the\n// default peer.",
        "// PubKey returns the public key of the remote peer.",
        "// OnStart implements Service.OnStart",
        "// Send sends a message to the peer.",
        "// WriteTo implements io.WriterTo interface. It serializes the peer's\n// key into the wire format.",
        "// Equals returns true if the peer is equal to the given peer.",
        "// FuzzConnAfter returns a new net.Conn that will be used to fuzz the given\n// net.Conn after the given duration.",
        "// NewMConnectionWithConfig creates a new MConnection with the given net.Conn.\n//\n// The config is used to configure the connection.",
        "// _recover is used to recover from panics.",
        "// Send sends a message to the given channel.",
        "// TrySend attempts to send the given message to the given channel.\n//\n// It returns true if the message was sent, false if the message was not sent.",
        "// CanSend returns true if the given channel can be sent to the server.",
        "// sendRoutine is the main loop of the connection.",
        "// sendSomeMsgPackets sends some msgPackets.\n// It returns true if we should continue sending.",
        "// sendMsgPacket sends a msgPacket to all channels.\n// Returns true if the msgPacket was sent.",
        "// nextMsgPacket returns a msgPacket with the next message to be sent.",
        "// writeMsgPacketTo writes the next message packet to the given writer.",
        "// recvMsgPacket receives a message from the server.",
        "// hash24 returns the 24-byte hash of the input.",
        "// incrNonce increments the nonce counter.",
        "// List returns a list of all peers in the peer set.",
        "// listenRoutine is the main loop of the listener.",
        "// NewAddrBook creates a new address book.",
        "// OnStart implements Service.OnStart",
        "// RemoveAddress removes the given address from the address book.",
        "// loadFromFile loads the address book from a file.\n// Returns true if the file was successfully loaded.",
        "// Save saves the address book to the given file.",
        "// addToOldBucket adds the given address to the old bucket.\n// Returns true if the address was added to the old bucket.",
        "// expireNew removes the bad entries from the new bucket.",
        "// DialSeeds dials the given seeds.",
        "// NewNetAddressStrings creates a new NetAddress from a slice of strings.",
        "// NewNetAddressIPPort returns a new NetAddress with the given IP and port.",
        "// Equals returns true if the receiver and the given address are equal.",
        "// Dial returns a net.Conn to the given address.",
        "// Valid returns true if the address is valid.",
        "// ReachabilityTo returns the reachability of the receiver to the given address.",
        "// NewPEXReactor returns a new PEX reactor.",
        "// OnStart implements Reactor.OnStart",
        "// Receive receives a message from a peer.",
        "// RequestPEX sends a request to the peer to request the peer's PEX.",
        "// SendAddrs sends a list of addresses to the peer.",
        "// IncrementMsgCountForPeer increments the message count for a given peer address.",
        "// DecodeMessage decodes the given byte slice into a PexMessage.",
        "// NewReader returns a new Reader.",
        "// LogOnPanic logs the panic message and stacktrace",
        "// Wrap wraps the given http.Handler with a panic handler.",
        "// Start starts the logging handler.",
        "// New returns a new Service.",
        "// Wrap wraps the given http.Handler with the X509NameVerifier.",
        "// GetString returns the value associated with the given key as a string.\n// If the key is not found, it returns the given defval.",
        "// GetInt returns the value associated with the key as an int.\n// If the key is not found or is not an int, it returns defval.",
        "// RegisterDriver registers a new pubsub driver.",
        "// Open creates a new PubSub hub.",
        "// SendEvents sends events to the client",
        "// Unmarshal unmarshals the given JSON data into a map.",
        "// Publish sends a message to all channels.",
        "// Subscribe creates a subscription for the given channels.",
        "// getChannel returns a channel by name.",
        "// remove removes the channel from the hub.",
        "// Open opens a new nats hub.",
        "// Publish sends a message to the hub.",
        "// Subscribe to the given channels.",
        "// MakeHub creates a new instance of the specified driver.",
        "// Fib returns a function that returns the next time.Duration in the range [0, 10)",
        "// roundIndex returns a slice of int values with the given start and max index.",
        "// Dir returns the home directory of the user.",
        "// Ask asks the Cleverbot API to answer the given question.",
        "// InteractionCount returns the number of interactions in the session.",
        "// TimeElapsed returns the time elapsed since the last session.",
        "// History returns the history of the session.",
        "// Bool returns the value of a flag as bool.",
        "// String returns the value of a flag as a string.",
        "// Fail marks the test as failed.",
        "// Failed returns true if the T was created with a failed function.",
        "// Logf logs a formatted string.",
        "// Error prints an error message to stderr.",
        "// Errorf prints to stderr with a format string and fails the test.",
        "// Init initializes the client with the given root and auth.",
        "// Value returns the current value of the client.",
        "// Child returns a Client object that can be used to access the\n// specified path.",
        "// Push sends a new value to the API.",
        "// Update updates the given path with the given value.",
        "// Remove removes a file from the repository",
        "// Rules returns the rules for the current user.",
        "// SetRules sets the rules for the current user",
        "// Call makes a request to Firebase and returns the response.\n//\n// The response is returned as a byte slice.\n//\n// If the response is not 200, an error is returned.",
        "// SetTraceInfo implements the Trace interface.",
        "// Finish implements the Trace interface.",
        "// ServeMetrics serves prometheus metrics on the given listener.",
        "// DumpMetrics returns a string representation of the metrics for the given task.",
        "// NewEventLog creates a new event log.",
        "// Printf implements the fmt.Printer interface.",
        "// Errorf logs an error message",
        "// SetLogger sets the logger to the given writer.",
        "// ServeHTTP implements the http.Handler interface",
        "// TitleFromContext returns the trace id from the context.",
        "// NewContext returns a new context with the given family and title.",
        "// New creates a new client with the given API key.",
        "// NewWithClient creates a new client with an http.Client.",
        "// Devices returns a list of all devices on the system.",
        "// Device returns a device by nickname.",
        "// PushNote push a note to the device",
        "// PushLink push a link to the device",
        "// PushSMS sends a SMS message to the device.",
        "// Me returns the current user.",
        "// Push sends a message to the given endpoint.",
        "// PushNote pushes a note to the Slack API.",
        "// PushNoteToChannel pushes a note to a channel.",
        "// PushLink pushes a link to the Slack API.",
        "// PushLinkToChannel pushes a link to a channel.",
        "// PushSMS sends a message to the user's phone number.",
        "// Subscription returns a subscription for the given channel tag.",
        "// PushNote pushes a note to the channel.",
        "// PushLink pushes a link to the channel.",
        "// NewCachedLoader returns a new instance of the cached loader.",
        "// Import implements the Loader interface.",
        "// Initialize loads the config from consul",
        "// Get returns the value for the given key.",
        "// MustGetString returns the value for the given key.\n// If the key does not exist, it panics.",
        "// MustGetBool returns the value for the given key.\n// If the key does not exist, it panics.",
        "// MustGetInt returns the value for the given key.\n// If the key does not exist, it will panic.",
        "// MustGetDuration returns the value for the given key as a time.Duration.\n// If the key does not exist, it panics.",
        "// NewRandomDNSBalancer returns a new random DNS balancer.",
        "//writeServiceToCache is used to write a service to the cache",
        "// StringToLabels converts a string to a list of labels.",
        "// SetClockSequence sets the clock sequence.\n// If seq is -1, a random sequence is generated.",
        "// Trace implements Logger.",
        "// Debug logs a debug message",
        "// Info implements Logger.",
        "// Warn calls the underlying Logger Warn function",
        "// Error logs a message with params",
        "// Critical implements Logger.",
        "// SendPaste posts a paste to the pastebin API.",
        "// GetPasteTextById returns the paste text for the given paste id.",
        "// ExecAndWait executes the command and waits for it to complete.",
        "// ExecutorName sets the executor name",
        "// Exe sets the executable to use for the streamer.",
        "// Args sets the arguments to the execStreamer.",
        "// Dir sets the directory to use for the exec streamer.",
        "// Env sets the environment variables to be used when executing the command.",
        "// Writers sets the writer for stdout and stderr.",
        "// StdoutWriter sets the writer to write stdout to.",
        "// StdoutPrefix sets the prefix to use for stdout output.",
        "// StderrWriter sets the writer to write to stderr when the stream is closed.",
        "// StderrPrefix sets the prefix to use for stderr output.",
        "// Build returns a new ExecStreamer instance.",
        "// MakeWidget returns a Widget with the given window and position.",
        "// SetText sets the text of the label.",
        "// AddLabel adds a label to the window.",
        "// printf prints a formatted string to the window.",
        "// setCell sets the cell at the given position.",
        "// resize sets the size of the window.",
        "// render renders the window",
        "// focusWidget sets the cursor to the first widget that can be focused.",
        "// focusPrevious focuses the previous widget",
        "// keyHandler handles key events.",
        "// Color returns a string representation of the color.",
        "// EscapedLen returns the number of escaped characters in s.",
        "// Unescape returns the unescaped string s.",
        "// init initializes the window manager",
        "// initKeyHandler is the main loop of the key handler",
        "// Init initializes the terminal.",
        "// Deinit closes all windows and frees all resources.",
        "// NewWindow creates a new window with the given manager.",
        "// flush flushes the screen.",
        "// focusWindow sets the window to the focused window.",
        "// resizeAndRender is used to resize the window and render the window",
        "// Panic prints a formatted message and exits.",
        "// Exit exits with a formatted string",
        "// AddList adds a list widget to the window.",
        "// Append appends a string to the list.",
        "// Focus moves the cursor to the beginning of the text.",
        "// SetText sets the text to be displayed in the edit.",
        "// AddEdit adds a widget to the window, with the given position, size, and text.\n// The widget will be resized to fit the given width.",
        "// makeAuthorizationHeaders returns the authorization header for the session",
        "// Start starts the session.",
        "// FetchEntity fetches the given entity from the Bambou server.",
        "// SaveEntity saves the given object to the database.",
        "// DeleteEntity deletes the given entity from the database",
        "// FetchChildren fetches the children of the given parent and populates the given dest with the results.",
        "// CreateChild creates a new child with the given parent",
        "// AssignChildren assigns the given children to the given parent",
        "// NextEvent returns the next event from the channel",
        "// String returns a string representation of the identity",
        "// NewPushCenter creates a new PushCenter",
        "// RegisterHandlerForIdentity registers a handler for the given identity.",
        "// UnregisterHandlerForIdentity removes the handler for the given identity.",
        "// HasHandlerForIdentity returns true if the PushCenter has a handler for the given identity",
        "// Start starts the push center.",
        "// Stop stops the push center.",
        "// Logger returns the default logger.",
        "// String returns a string representation of FetchingInfo",
        "// NewClient returns a new client with the given apiKey.",
        "// Post sends a series to the FETC API.",
        "// MetricID returns a metric ID for a metric name and a list of tags.",
        "// SplitMetricID splits a metricID into its name and tags.",
        "// NewRateScale returns a new Rate with the given duration.",
        "// Snapshot returns the snapshot rate.",
        "// NewDeriveScale returns a new derive with the given value and duration.",
        "// Update updates the Derive's value.",
        "// Snapshot returns a copy of the reservoir.",
        "// Update updates the value of the gauge.",
        "// Snapshot returns the current value of the gauge.",
        "// NewUnstarted returns a new Registry with the given prefix and tags.",
        "// Subscribe adds a Reporter to the Registry.",
        "// Get returns the value for the given name and tags.",
        "// Register registers a metric with the registry.",
        "// Fetch returns the value of the metric with the given name and tags.\n// If the metric is not registered, it will be registered with the given factory.",
        "// Size returns the size of the registry.",
        "// Tags returns the tags of the registry.",
        "// SetTags sets the tags for the registry.",
        "// AddTags adds tags to the registry.",
        "// Close closes the registry.",
        "// New creates a new Reporter with the given apiKey.",
        "// Metric adds a metric to the reporter.",
        "// FilterBefore returns a list of objects that match the given filter and the given\n// count, skip, and store.",
        "// Set sets the value for the given key.",
        "// SetStr sets the value of the environment variable with the given key value.",
        "// Get returns the value of the given key from the environment.",
        "// String returns the string representation of the EnvVar.",
        "// Add adds a value to the set.",
        "// AddAll adds all the elements in the given arguments to the set.",
        "// Remove removes the given value from the set.",
        "// RemoveAll removes all elements from the set.",
        "// Contains returns true if the set contains the given value.",
        "// ContainsAll returns true if the set contains all the elements in the given arguments.",
        "// ContainsFunc returns true if the set contains the given element.",
        "// Clear removes all elements from the set.",
        "// Iterator returns an iterator over the set.",
        "// Items returns the items in the set.",
        "// ItemsFunc returns a slice of all elements in the set that satisfy the function f.",
        "// fixWeekend returns the time after the weekend.",
        "// GetHolidays returns a list of holidays for the given country and year.",
        "// GetInt returns the value at key as int.",
        "// GetFloat returns the float value for a given key.",
        "// GetBool returns the value of a bool key.",
        "// Exists returns true if the given key exists in the config.",
        "// getValue returns the value for the given key.",
        "// Load loads the configuration from the given path.",
        "// loadPath returns the path to the configuration file.",
        "// New returns a new Reader.",
        "// readMimetypes reads the mimetype file and returns a hash map of extension\n// and mimetypes.",
        "// Get returns the mime type for the given extension.",
        "// SetHeader sets the Content-Type header for the given extension.",
        "// GetFileSize returns the size of the given file.",
        "// ListenAndServe starts the server.",
        "// SendRequest sends a request to the given connection.",
        "// SendRequestArr is like SendRequest but accepts an array of parameters.",
        "// Close closes the server and all active connections.",
        "// wsConnHandler handles a single websocket connection.",
        "// SafeCreateS3Bucket creates a new S3Bucket with the given parameters.",
        "// NewWriter returns an io.WriteCloser that writes to the S3 bucket.",
        "// NewReader returns an io.ReadCloser that can be used to read from an S3 bucket.",
        "// Delete deletes a file from the bucket.",
        "// CertAtuh is the handler for the client certificate authentication.",
        "// Params unmarshals the request parameters into the given struct.",
        "// Next calls the next middleware in the stack, if any.",
        "// Result unmarshals the response data into the given value.",
        "// ErrorData unmarshals the error data from the response.",
        "// MiddlewareList returns a new Middleware instance with the given list of middlewares.",
        "// LogFactory creates a new Logger instance.",
        "// NewRouter creates a new router.",
        "// Request registers a handler for the given route.",
        "// Middleware is the middleware function for the router.",
        "// NotFound writes a 404 response.",
        "// NewMysqlDump creates a new MysqlDump object.",
        "// NewRemoteMysqlDump creates a new MysqlDump object.",
        "// Import reads the file and uploads it to the remote server.",
        "// Dump executes the mysqldump command.",
        "// NewRemoteExecutor creates a new remote executor",
        "// Execute executes a command on the remote host.",
        "// World is the handler for the \"Hello World\" request.",
        "// Name returns the name of the user",
        "// NewPgDump creates a new PgDump object.",
        "// NewPgRemoteDump creates a new PgDump object.",
        "// Import a file into the pgdump",
        "// New creates a new IrcText struct.",
        "// SetFg sets the foreground color of the text.",
        "// SetBg sets the background color of the text.",
        "// HandlerBuilder creates a new handler from the given interface.",
        "// LoggerWithPrefix returns a middleware function that logs the request\n// parameters and response data.",
        "// NewEncoder returns a new Encoder.",
        "// Parser returns the Parser for the given request.",
        "// Responder returns a Responder for the given request.",
        "// NewErrorStatus returns an error with the given status and error message.",
        "// ConvertErrorStatus converts an error status to a status string.",
        "// Read reads the data from the file.",
        "// EntrySize returns the size of the entry in bytes",
        "// NewLager creates a new logger with a lager.",
        "// URLParts returns a context with the URL parts of the request.",
        "// URLPart returns the context and the URL part of the request.",
        "// StoreParam stores a value in the context.",
        "// GetParam returns the value of the given parameter name from the given context.\n// If the parameter is not found, it returns an empty string.",
        "// Int32 returns the parameter as int32.",
        "// UInt returns the parameter as uint.",
        "// UInt32 returns the parameter as a uint32.",
        "// Float32 returns the float value of the parameter.",
        "// UploadFile uploads a file to the remote server",
        "// RemoveRemoteFile removes the remote file",
        "// GetRemoteFile returns a file handle to the remote file system",
        "// NewConn returns a new Conn.",
        "// RemoteAddr returns the remote address of the connection.",
        "// SendRequest sends a request to the server and returns the request ID.",
        "// SendRequestArr is like SendRequest but accepts an array of parameters.",
        "// Close closes the connection.",
        "// sendResponse sends a response to the client.",
        "// send sends a message to the websocket connection.",
        "// receive receives a message from the websocket connection.",
        "// setConn sets the websocket connection.",
        "// startReceive is the main loop of the connection. It receives messages from the\n// connection and dispatches them to the appropriate handler.",
        "// NewPbo creates a new PBO from a file path.",
        "// NewReadWriteCloser returns a new MockReadWriteCloser",
        "// Read implements io.Reader interface",
        "// Write implements io.Writer interface",
        "// SafeRemoveSSH removes the given file from the SFTP server.",
        "// SafeCreateSSH creates a file on the remote host using the SFTPClient.\n// SafeCreateSSH will create the file if it does not already exist.",
        "// SafeCreate creates a file with the given name.",
        "// HMAC returns a middleware that authenticates the client with the given\n// password.",
        "// Scaffold creates a new handler that will serve the given platform.",
        "// Route adds a new route to the router.",
        "// Group adds a new group to the router.",
        "// Platform adds a new platform to the router.",
        "// Handle registers a handler for the given pattern.",
        "// Options registers a new OPTIONS route for a path with matching handler in the router.",
        "// Use adds middleware to the router.",
        "// NotFound registers a handler for a route that does not match any of the\n// routes in the router.",
        "// AddHandlerBuilder adds a function to be called when a new handler is created.",
        "// ServeErrorPage implements the ErrorHandler interface for ErrorHandlerFunc.",
        "// GetErrorHandler returns the ErrorHandler associated with the given status.",
        "// SetErrorHandler sets the error handler for the given status.",
        "// SetErrorHandlerFunc is a convenience function for setting the error handler\n// function for a given status code.",
        "// Echo is the handler for echo requests.",
        "// UnmarshalBinary unmarshals the given byte slice into the ConfigArg.",
        "// ataIdentify is used to identify an ATA device",
        "// ataRead reads from the given io.ReadSeeker.",
        "// ataWrite writes data to the specified io.ReadSeeker.",
        "// calculateLBA calculates the LBA value for the given RLBA.",
        "// MarshalBinary allocates a byte slice containing the data from a\n// ReserveReleaseArg.",
        "// UnmarshalBinary unmarshals the reserve release argument from binary.",
        "// MarshalBinary allocates a byte slice containing the data from the ATAArg.",
        "// New creates a new Fixture.",
        "// FromYAML creates a new fixture from a YAML file.",
        "// FromJSON creates a new fixture from a JSON-encoded string.",
        "// MarshalBinary allocates a byte slice containing the data from a Directive.",
        "// MarshalBinary returns the binary representation of the MACMaskArg",
        "// NewSendToLogger returns a new instance of SendToLogger.",
        "// NewMulti creates a new MultiLog instance.",
        "// OuterLog returns an io.Writer that writes to the underlying\n// logger.",
        "// PublishPort sets the container port to use for the container.",
        "// Name sets the name of the container.",
        "// AddArgs adds args to the run config.",
        "// NewCORSHandler returns a new CORSHandler.",
        "// CreatePreflight creates a CORS preflight handler from a list of routes.",
        "// ServeHTTP implements the http.Handler interface.",
        "// Handle returns a new http.Handler which adds CORS headers to the request.",
        "// NewRandomSourceListSecure returns a new RandomSourceList with a\n// secure source.",
        "// Handle writes the record to the syslog server.",
        "// Close closes the syslog handler.",
        "// hasDatePrefix returns true if the string contains a date prefix.",
        "// Match returns the offset and the match string of the rune in the string.",
        "// Match returns the offset of the last match, or -1 if no match was found.",
        "// MatchRune implements Matcher.",
        "// Match returns the offset and the match string.",
        "// Alloc returns a new DB instance.",
        "// Free decrements the reference count by one and closes the database.",
        "// Infof implements GRPCLogger interface",
        "// Warningf implements GRPCLogger interface",
        "// Errorf implements GRPCLogger interface",
        "// Fatalf implements grpclog.LoggerV2",
        "// ToPhone returns a phone number from a string.",
        "// ToURL returns a URL from the given string.",
        "// ToSSN converts the string to a Social Security Number",
        "// ToMorseCode returns the string in Morse Code format.",
        "// ToPirateSpeak converts the string to pirate speak.",
        "// ToIRSA converts the string to its IRSA format.",
        "// newDefaultLogger returns a new Logger with the default configuration.",
        "// Logf logs a formatted string with a given level.",
        "// Sections returns the names of all the sections in the config.",
        "// Options returns the options for the given section.",
        "// OptionMap returns a map of options for the given section.",
        "// Comments returns the comments for the given section.",
        "// AddComment adds a comment to the section.",
        "// Parse parses the given stream and returns a Config.",
        "// Write writes the config to the given writer.",
        "// Get returns the value of the option with the given key in the given section.",
        "// Set sets the value for the given key in the given section.",
        "// Delete removes an option from the given section.",
        "// Convert a value to a given type.",
        "// Postpone sets the expiration time of the item to the current time plus the\n// lifetime.",
        "// Filter returns a LogBackend that filters the given LogBackend\n// based on the given Ruler.",
        "// Op creates a new Ruler.",
        "// ApplyRuleIf returns a new Ruler with the given condition and rule applied.",
        "// ApplyRuleIfElse applies the given condition to the given rule and returns the result.",
        "//AuthHandler returns a http.Handler that will attempt to authenticate\n//the request using the HTTP Basic Authentication scheme.",
        "// HasBin returns true if the docker binary is installed",
        "// Run executes the given command and returns the output.",
        "// GetReader reads the header from the given http.Header.",
        "// SetName sets the name of the header.",
        "// SetValue sets the value of the header.",
        "// SetWriter sets the header's value to the given http.Header.",
        "// encryptionKey returns the key that should be used for encryption.",
        "// NewContentNegotiator creates a new ContentNegotiator.",
        "// NewJsonXmlContentNegotiator creates a new ContentNegotiator that supports JSON and XML content.",
        "// Negotiate returns the content negotiated from the request.",
        "// AddEncoder adds an encoder to the ContentNegotiator.",
        "// getEncoder returns the encoder for the given request.",
        "// CanSign returns true if the public key algorithm can be used to sign\n// messages.",
        "// ByWinnings sorts the PlayerStandings by winning score.",
        "// WaitFunc waits until the function returns true or the timeout expires.",
        "// FormatDialAddress returns the IP address and port of the node",
        "// SetFromDocker sets the network node from a docker port string",
        "// Read reads from the underlying io.Reader.",
        "// readByte returns a random byte from the source.",
        "// RecoverHandlerJson returns a http.Handler that will recover from panics\n// and return a JSON-encoded error.",
        "// DefaultServiceConfig returns a default service config.",
        "// NewService creates a new instance of the service.",
        "// RunLight runs the image with the given config and returns the container.",
        "// initConfig initializes the config file.",
        "// HasExposedPorts returns true if the container has any exposed ports.",
        "// Inspect returns the information about the container.",
        "// Kill kills the container.",
        "// NetworkNodes returns the network nodes of the container.",
        "// Remove removes the container from the docker host.",
        "// WaitStartup waits for the container to start up.",
        "// NewHandler returns a new Handler.",
        "// Handle implements the logging.Handler interface.",
        "// NewCounter returns a new Counter.",
        "// Metrics returns the metrics for the Counter.",
        "// Retrieve retrieves the files from the given sources and returns them as a\n// http.FileSystem.",
        "// Compile generates a new file system package from a list of sources.",
        "// readBlockAt reads the block at the given offset from the given reader.",
        "// writeTo writes the block to the given writer.",
        "// Push adds a block to the stack.",
        "// Pop removes the last block from the stack and returns the header and data.",
        "// Peak returns the header and data of the current block.",
        "// PeakHeader returns the header of the current block.",
        "// IterateBackward iterates backwards through the stack and invokes the given handler\n// function on each block in the stack.",
        "// IterateForward iterates through all blocks in the file, calling the given handler\n// function for each block.",
        "// Close closes the stack file.",
        "// OpenStack opens a stack file and returns a pointer to it.",
        "// NewStack creates a new stack from a file.",
        "// NewSessionCache creates a new SessionCache.",
        "// getInvalidTokenError returns an error indicating that the token is invalid or\n// expired.",
        "// Get returns the value for the given token.",
        "// Add adds a new session to the session cache.",
        "// Delete removes the session from the session cache.",
        "// Set sets the value for the given token.",
        "// NewClient returns a new client.",
        "// connect connects to the server.",
        "// writeMessage writes the given message to the client.",
        "// readMessage reads a single message from the connection.",
        "// Stop stops the client.",
        "// GetChannels returns the list of channels that are currently connected to.",
        "// JsonWrite writes the JSON-encoded content to the response.",
        "// JsonRead reads the JSON from the given body and unmarshals the result into the given object.\n// Returns true if the body was closed, or if the unmarshaling failed.",
        "// VerifyKeySignature verifies the signature of the given key using the given\n// signed public key.",
        "// NewUser creates a new user with the given player UUID and user data.",
        "// Next calls the next handler in the chain.",
        "// ServeHTTP implements the http.Handler interface.",
        "// UseHandler sets the handler for the route.",
        "// HandleMethod adds a new handler for the given pattern and method.",
        "// Handle adds a new handler for the given pattern.",
        "// Get registers a GET route for a path with matching handler in the router.",
        "// Post registers a POST route.",
        "// Put registers a PUT route.",
        "// Patch registers a PATCH route.",
        "// Delete registers a DELETE route for a path with matching handler in the router.",
        "// Options registers a handler for OPTIONS method.",
        "// NewSalter returns a new Salter instance.",
        "//BToken returns a random byte slice of the given size",
        "// Token returns a base64 encoded string of the given size.",
        "// getRandomBytes returns a random byte slice of length n.",
        "// NewNewsItem creates a new NewsItem",
        "// Write implements the io.Writer interface.",
        "// Write implements the io.Writer interface.",
        "// Write implements io.Writer interface.",
        "// Write implements io.Writer interface.",
        "// GetLogger returns a logger by name.",
        "// RemoveLogger removes a logger from the global logger map.",
        "// WaitForAllUnprocessedRecords waits for all loggers to finish processing records.",
        "// run runs the logger.",
        "// WaitForUnprocessedRecords waits for all records to be processed.",
        "// SetBufferLength sets the buffer length.",
        "// AddHandler adds a handler to the logger.",
        "// ClearHandlers clears all handlers.",
        "// SetLevel sets the logger's level.",
        "// log records a message with a given level.",
        "// Logf logs a formatted string",
        "// Log logs a message at the given level.",
        "// Log a message with Emergency level",
        "// Alertf logs with a format string.",
        "// Criticalf logs with a format string. Arguments are handled in the manner of fmt.Printf.",
        "// Errorf logs with the ERROR severity.",
        "// Warningf logs with a format string. Arguments are handled in the manner of fmt.Printf.",
        "// Noticef logs with a notice level.",
        "// Infof logs with the INFO severity.",
        "// Debugf logs with the DEBUG severity.",
        "// SetHandler sets the handler for the entry.",
        "// SetMethodHandler sets the handler for the given method.",
        "// GetHandler returns the handler for the given method.",
        "// getChildEntry returns the entry with the given pattern.",
        "// MergePatterns merges the patterns in patterns into the current entry.",
        "// AddEntry adds a new entry to the Entry.",
        "// addPatterns adds patterns to the current entry.",
        "// execPrefix executes the route matching the given method and URL.",
        "// traverse returns the route for the given method and URL.",
        "// getExecMatch returns an ExecFunc that can be used to execute a route matching\n// the given name and matcher.",
        "// MergeRoutes returns a new Routes object with the given routes.",
        "// Debugln logs a formatted string with a DEBUG prefix.",
        "// Debugf logs a formatted string at DEBUG level.",
        "// Verbosef logs a formatted string with values",
        "// Infoln logs a formatted string with a given value.",
        "// Infof logs a formatted string at INFO level.",
        "// Okln logs a formatted string with a newline.",
        "// Okf logs a formatted string with values.",
        "// Fatalln logs a formatted string and exits with code 1.",
        "// Fatalf logs a formatted string at the Fatal level.",
        "// ShouldDebug returns true if the given facility should be logged.",
        "// SetDebug sets the debug flag for the given facility.",
        "// Facilities returns the enabled and disabled facilities.",
        "// NewFacility returns a new Logger that logs to the given facility.",
        "// removeNonDigits removes any non-digit characters from the string.",
        "// removeNonWordChars removes any non-word characters from the string.",
        "// urlEncodeSpaces replaces spaces with %20.",
        "// randomSelect returns a random value from a slice of int.",
        "// NewStdFormatter returns a new formatter for the standard format.",
        "// Get returns a new http.Handler which calls the last handler in the chain.",
        "// parseMatcher parses a matcher pattern and returns the matcher and the\n// name of the matcher.",
        "// isMatchPattern returns true if the string matches the pattern.",
        "// routeSplitFunc splits the route into its path and query parameters.",
        "// SplitPath splits a path into routes.",
        "// isNextSuffixPattern returns true if the pattern is a match pattern\n// that matches the next suffix.",
        "// PeekNextPattern returns the next pattern in the given pattern slice.",
        "// NewPlayer returns a new Player with the given nick and profile.",
        "// Push adds a new io.Reader to the list of readers to be read.",
        "// NewCatering creates a new catering object.",
        "// GroupByMonths returns a map of month to tournaments for a given season.",
        "// validateTournamentInfo returns an error if the given info is not valid.",
        "// NewTournament creates a new tournament from the given info.",
        "// IndexOf returns the index of the first occurrence of a string in the string slice.",
        "// IndexOfIgnoreCase returns the index of the first occurrence of str in s or -1 if str is not found.",
        "// NewCache creates a new cache with the given lifetime.",
        "// Count returns the number of values in the cache.",
        "// Flush removes all cached data.",
        "// removeExpired removes expired values from the cache.",
        "// NewImage creates a new image with the given name.",
        "// Exists returns true if the image exists.",
        "// Pull pulls the image from the docker host.",
        "// Run runs the given configuration on the image.",
        "// Setup creates the image if it does not already exist.",
        "// NewLocation creates a new location with the given host and profile.",
        "// PortAt returns the port and the host publish for the given index.",
        "// SplitPort returns the port and the protocol from the given index.",
        "// Priority returns the priority for the facility.",
        "// OK returns true if the facility is supported by the system.",
        "// Format returns the JSON representation of the given record.",
        "// Open opens a bolt database at the given path, with the given mode and options.",
        "// Begin starts a transaction.",
        "// View executes the function f on the database.",
        "// CopyFile copies the contents of the given file to the given path.",
        "// CreateBucketIfNotExists creates a new bucket if it does not already exist.",
        "// Delete deletes the value associated with the key.",
        "// ForEach iterates over all the keys in the given folders, calling the given function\n// for each key in the folder.",
        "// ForEachGob iterates over a collection of bytes, decoding them as gob.",
        "// Put stores a value in the bucket named k.",
        "// Value executes the function f on the value of the key k.",
        "// Update updates the value of the given key.",
        "// OpenBucket opens the bucket with the given folders.",
        "// CreateBucketIfNotExists creates a new bucket if it does not already exist.",
        "// Delete removes the value at key k from the bucket.",
        "// GobValue loads the value from the bucket using gob.",
        "// NextSequence returns the next sequence number in the bucket.",
        "// Put stores a value in the bucket.",
        "// PutGob encodes the given value into a gob-encoded byte slice.",
        "// Drop drop database",
        "// HandleError is a noop",
        "// Handle writes the record to the writer.",
        "// Handle implements Handler.",
        "// WaitPeerListening waits for a peer to be listening on the given network address.\n// Returns true if the peer was successfully listening.",
        "// NewEvent returns a new event with the given name and body.",
        "// Subscribe adds a handler to the bus.\n// Returns true if the handler was added.",
        "// Unsubscribe removes the given handler from the bus.",
        "// Publish publishes an event to all registered handlers.",
        "// HandleOnly returns a Handler that calls h on every event with the given names.",
        "// ContextWithPublisher returns a new context with the given publisher.",
        "// PublisherContext returns the publisher associated with the given context.",
        "// PublishNamedEvent publishes an event with a name.",
        "// PublishEventContext publishes an event with a context",
        "// PublishNamedEventContext publishes an event with a custom context",
        "// String returns the string representation of the level.",
        "// UnmarshalJSON implements the json.Unmarshaler interface for Level."
    ],
    "references": [
        [
            "// DeleteWorksheet deletes passed worksheet."
        ],
        [
            "// DeleteWorksheetByCID deletes worksheet with passed cid."
        ],
        [
            "// FetchContactGroup retrieves contact group with passed cid."
        ],
        [
            "// FetchContactGroups retrieves all contact groups available to the API Token."
        ],
        [
            "// UpdateContactGroup updates passed contact group."
        ],
        [
            "// CreateContactGroup creates a new contact group."
        ],
        [
            "// DeleteContactGroup deletes passed contact group."
        ],
        [
            "// FetchBroker retrieves broker with passed cid."
        ],
        [
            "// FetchBrokers returns all brokers available to the API Token."
        ],
        [
            "// ActivateMetric determines if a given metric should be activated"
        ],
        [
            "// AddMetricTags updates check bundle metrics with tags"
        ],
        [
            "// addNewMetrics updates a check bundle with new metrics"
        ],
        [
            "// inventoryMetrics creates list of active metrics in check bundle"
        ],
        [
            "// countNewTags returns a count of new tags which do not exist in the current list of tags"
        ],
        [
            "// returns the plural form of a singular word"
        ],
        [
            "// returns the singular form of a plural word"
        ],
        [
            "// uppercase first character"
        ],
        [
            "// \"dino_party\" -> \"DinoParty\""
        ],
        [
            "// getSuitableAlgFromCurve inspects the key length in curve, and determines the\n// corresponding jwt.Algorithm."
        ],
        [
            "// getAlgFromKeyData determines the best jwt.Algorithm suitable based on the\n// set of given crypto primitives in pem."
        ],
        [
            "// buildEncArgs builds and encodes passed argument strings in the form of\n// name=val as a json object."
        ],
        [
            "// doDec decodes in as a JWT."
        ],
        [
            "// doEnc encodes in as the payload in a JWT."
        ],
        [
            "// Transport is a GServiceAccount option to set the client transport used by\n// the token source."
        ],
        [
            "// Proxy is a GServiceAccount option to set a HTTP proxy used for by the token\n// source."
        ],
        [
            "// Expiration is a GServiceAccount option to set a expiration limit for tokens\n// generated from the token source."
        ],
        [
            "// Encode encodes a JWT using the Algorithm and Signer, returning the URL-safe\n// encoded token or any errors encountered during encoding."
        ],
        [
            "// PeekHeaderField extracts the specified field from the serialized JWT buf's\n// header. An error will be returned if the field is not present in the decoded\n// header."
        ],
        [
            "// PeekAlgorithm extracts the signing algorithm listed in the \"alg\" field of\n// the serialized JWT buf's header and attempts to unmarshal it into an\n// Algorithm. An error will be returned if the alg field is not specified in\n// the JWT header, or is otherwise invalid."
        ],
        [
            "// PeekAlgorithmAndIssuer extracts the signing algorithm listed in the \"alg\"\n// field and the issuer from the \"iss\" field of the serialized JWT buf's header\n// and payload, attempting to unmarshal alg to Algorithm and iss to a string.\n// An error will be returned if the Algorithm or Issuer fields are not\n// specified in the JWT header and payload, or are otherwise invalid."
        ],
        [
            "// NewEllipticSigner creates an Elliptic Curve Signer for the specified curve."
        ],
        [
            "// NewTokenSource creates a oauth2.TokenSource that generates auth tokens\n// redeemed using the JWT Bearer Grant assertion auth flow using the supplied\n// jwt.Signer. A token redemption will be invoked at the tokenURL using the\n// supplied context.\n//\n// Use the Claim option to pass additional claims to the token source."
        ],
        [
            "// Client returns a HTTP client using the bearer token."
        ],
        [
            "// Sign signs the data in buf using rand, priv and hash."
        ],
        [
            "// Verify verifies the signature sig against using pub, hash, and the hashed\n// data."
        ],
        [
            "// NewRSASigner creates an RSA Signer for the specified Algorithm and provided\n// low level RSA implementation."
        ],
        [
            "// getFieldWithTag lookups jwt tag, with specified tagName on obj, returning\n// its reflected value."
        ],
        [
            "// decodeToObjOrFieldWithTag decodes the buf into obj's field having the\n// specified jwt tagName. If the provided obj's has the same type as\n// defaultObj, then the obj is set to the defaultObj, otherwise an attempt is\n// made to json.Decode the buf into obj."
        ],
        [
            "// grabEncodeTargets grabs the fields for the obj."
        ],
        [
            "// encodeTargets determines what to encode."
        ],
        [
            "// peekField looks at an undecoded JWT, JSON decoding the data at pos, and\n// returning the specified field's value as string.\n//\n// If the fieldName is not present, then an error will be returned."
        ],
        [
            "// ExpiresIn is an option that will set the expiration duration generated for\n// tokens to the specified duration."
        ],
        [
            "// Claim is an option that adds an additional claim that is generated with the\n// token."
        ],
        [
            "// Transport is an option that sets an underlying client transport to the\n// exchange process."
        ],
        [
            "// NewHMACSigner creates a HMAC Signer for the specified Algorithm."
        ],
        [
            "// FromJSON loads service account credentials from the JSON encoded buf."
        ],
        [
            "// FromReader loads Google service account credentials from a reader."
        ],
        [
            "// FromFile loads Google service account credentials from a reader."
        ],
        [
            "// Signer returns a jwt.Signer for use when signing tokens."
        ],
        [
            "// Encode serializes a JWT using the Algorithm and Signer."
        ],
        [
            "// UnmarshalText attempts to unmarshal buf into an Algorithm."
        ],
        [
            "// DecodeUnverifiedToken decodes a token into the provided UnverifiedToken."
        ],
        [
            "// PublicKey returns the stored public key for the keystore, alternately\n// generating the public key from the private key if the public key was not\n// supplied and the private key was."
        ],
        [
            "// PrivateKey returns the stored private key for the keystore."
        ],
        [
            "// RegisterLocation registers an URL location and maps it to the given\n// file system path.\n//\n// Calling RegisterLocation twice for the same location is a\n// programmer error, and causes a panic."
        ],
        [
            "// NewArena allocates a new arena of the specified size and returns it."
        ],
        [
            "// NewSkiplist constructs and initializes a new, empty skiplist. All nodes, keys,\n// and values in the skiplist will be allocated from the given arena."
        ],
        [
            "// Init associates the iterator with a skiplist and resets all state."
        ],
        [
            "// Value returns the value at the current position."
        ],
        [
            "// Set updates the value of the current iteration record if it has not been\n// updated or deleted since iterating or seeking to it. If the record has been\n// updated, then Set positions the iterator on the most current value and\n// returns ErrRecordUpdated. If the record has been deleted, then Set keeps\n// the iterator positioned on the current record with the current value and\n// returns ErrRecordDeleted."
        ],
        [
            "// SetMeta updates the meta value of the current iteration record if it has not\n// been updated or deleted since iterating or seeking to it. If the record has\n// been updated, then SetMeta positions the iterator on the most current value\n// and returns ErrRecordUpdated. If the record has been deleted, then SetMeta\n// keeps the iterator positioned on the current record with the current value\n// and returns ErrRecordDeleted."
        ],
        [
            "// Delete marks the current iterator record as deleted from the store if it\n// has not been updated since iterating or seeking to it. If the record has\n// been updated, then Delete positions the iterator on the most current value\n// and returns ErrRecordUpdated. If the record is deleted, then Delete positions\n// the iterator on the next record."
        ],
        [
            "// IsSameArray returns true if the slices are the same length and the array\n// underlying the two slices is the same. Always returns false for empty arrays."
        ],
        [
            "// New returns a new API client."
        ],
        [
            "// WriteIndentedN indents all lines n spaces."
        ],
        [
            "// WriteIndented indents all lines four spaces."
        ],
        [
            "// NewReporter returns a new Reporter.  You must specify the channel bufferSize and the\n// goroutine poolSize.  You can pass in nil for the transport and it will create an\n// http transport with MaxIdleConnsPerHost set to the goroutine poolSize.  Note if you\n// pass in your own transport, it's a good idea to have its MaxIdleConnsPerHost be set\n// to at least the poolSize to allow for effective connection reuse."
        ],
        [
            "// Using the classic API, posts a count to a stat using DefaultReporter."
        ],
        [
            "// Using the classic API, posts a count to a stat using DefaultReporter at a specific\n// time."
        ],
        [
            "// Using the classic API, posts a value to a stat using DefaultReporter."
        ],
        [
            "// Using the classic API, posts a value to a stat at a specific time using DefaultReporter."
        ],
        [
            "// Using the EZ API, posts a count to a stat using DefaultReporter."
        ],
        [
            "// Using the EZ API, posts a count to a stat at a specific time using DefaultReporter."
        ],
        [
            "// Using the EZ API, posts a value to a stat using DefaultReporter."
        ],
        [
            "// Using the EZ API, posts a value to a stat at a specific time using DefaultReporter."
        ],
        [
            "// Using the classic API, posts a count to a stat."
        ],
        [
            "// Using the classic API, posts a count to a stat at a specific time."
        ],
        [
            "// Using the classic API, posts a count of 1 to a stat."
        ],
        [
            "// Using the classic API, posts a value to a stat."
        ],
        [
            "// Using the classic API, posts a value to a stat at a specific time."
        ],
        [
            "// Using the EZ API, posts a count of 1 to a stat."
        ],
        [
            "// Using the EZ API, posts a count to a stat."
        ],
        [
            "// Using the EZ API, posts a count to a stat at a specific time."
        ],
        [
            "// Using the EZ API, posts a value to a stat."
        ],
        [
            "// Using the EZ API, posts a value to a stat at a specific time."
        ],
        [
            "// NewBatchReporter creates a batching stat reporter. The interval parameter\n// specifies how often stats should be posted to the StatHat server."
        ],
        [
            "// cleanHost is used to conver from the rawHost format to a more usable format"
        ],
        [
            "// GetHost will get a specified host by either hostname or ip. The first\n// return value is the host, if it was found. The second return value is the\n// wether the host was found or not"
        ],
        [
            "// Rescan the target. Normally used for finding differences between scans\n// at two points in time."
        ],
        [
            "// Diff gets the difference between the the target host and the argument host.\n//The first returned value is the added ports and the second returned value is\n// the removed ports."
        ],
        [
            "// ToString converts the host into a nicely formatted string"
        ],
        [
            "// Init initializes a scan object. This is the easiest way to create a Scan\n// object. If you are trying to create a Scan object by hand, make sure to\n// instantiate the Hosts map"
        ],
        [
            "// AddHosts adds a list of hosts to the list of hosts to be scanned"
        ],
        [
            "// SetHosts sets the hosts that will be scanned"
        ],
        [
            "// AddPorts appends a list of ports to the list of ports to be scanned"
        ],
        [
            "// SetPorts sets the ports that wil be used"
        ],
        [
            "// SetTCPPorts sets which TCP-only ports are used to scan"
        ],
        [
            "// SetUDPPort sets which TCP-only ports are used to scan"
        ],
        [
            "// AddFlags adds a list of flags to be used by nmap. Seperate flags by new\n// arguments. The order of the flag is kept, so when using flags that require\n// file names, seperate it by using multiple arguments.\n//\n// Use the DisallowedFlags variable to guide you on which flags are not allowed\n// to be used."
        ],
        [
            "// IntenseAllTCPPorts does an intense scan, but adds all TCP ports"
        ],
        [
            "// ToString returns the list of hosts into a pretty-printed format"
        ],
        [
            "// CreateNmapArgs takes a Scan object and returns a list of strings that map to\n// arguments for an nmap scan."
        ],
        [
            "// uint16ListToStringList is used to reduce lines for joining strings in\n// the CreateNmapArgs function"
        ],
        [
            "// ToString returns port information in a pretty-printed format"
        ],
        [
            "// Counter returns the HOTP's 8-byte counter as an unsigned 64-bit\n// integer."
        ],
        [
            "// Increment will increment an HOTP source's counter. This is useful\n// for providers like the Google Authenticator app, which immediately\n// increments the counter and uses the 0 counter value as an integrity\n// check."
        ],
        [
            "// NewHOTP intialises a new HOTP instance with the key and counter\n// values. No check is done on the digits, but typical values are 6\n// and 8."
        ],
        [
            "// URL returns a suitable URL, such as for the Google Authenticator\n// app. The label is used by these apps to identify the service to\n// which this OTP belongs. The digits value is ignored by the Google\n// authenticator app, and is therefore elided in the resulting URL."
        ],
        [
            "// QR generates a byte slice containing the a QR code encoded as a\n// PNG with level Q error correction."
        ],
        [
            "// truncate contains the DT function from the RFC; this is used to\n// deterministically select a sequence of 4 bytes from the HMAC\n// counter hash."
        ],
        [
            "// FromURL parses a new HOTP from a URL string. It returns the OTP,\n// the label associated with the OTP, and any errors that occurred."
        ],
        [
            "// GenerateHOTP will generate a randomised HOTP source; if the\n// randCounter parameter is true, the counter will be randomised."
        ],
        [
            "// YubiKey reads an OATH-HOTP string as returned by a YubiKey, and\n// returns three values. The first value contains the actual OTP, the\n// second value contains the YubiKey's token identifier, and the final\n// value indicates whether the input string was a valid YubiKey\n// OTP. This does not check whether the code is correct or not, it\n// only ensures that it is well-formed output from a token and\n// splits the output into the code and the public identity."
        ],
        [
            "// IntegrityCheck returns two values, the base OTP and the current\n// counter. This is used, for example, with the Google Authenticator\n// app's \"Check key value\" function and can be used to verify that\n// the application and the provider are in sync."
        ],
        [
            "// Check takes an input code and verifies it against the OTP. If\n// successful, the counter is incremented."
        ],
        [
            "// Marshal serialises an HOTP key value as a DER-encoded byte slice."
        ],
        [
            "// Unmarshal parses a DER-encoded serialised HOTP key value."
        ],
        [
            "// NewWriterPool creates a pool that ensures the writers it wraps will\n// respect an overall maxRate, with maxBurst resolution. The semantics\n// of the wrapped writers are the same as those of using a plain\n// ThrottledWriter."
        ],
        [
            "// Get a throttled writer that wraps w."
        ],
        [
            "// Len is the number of currently given out throttled writers."
        ],
        [
            "// NewReaderPool creates a pool that ensures the writers it wraps will\n// respect an overall maxRate, with maxBurst resolution. The semantics\n// of the wrapped writers are the same as those of using a plain\n// ThrottledReader."
        ],
        [
            "// Get a throttled reader that wraps r."
        ],
        [
            "// SetRate of the pool, updating each given out reader to respect the\n// newly set rate. Returns the old rate."
        ],
        [
            "// Len is the number of currently given out throttled readers."
        ],
        [
            "// NewMeasuredWriter wraps a writer."
        ],
        [
            "// BytesPerSec tells the rate per second at which bytes were written since last\n// measurement."
        ],
        [
            "// NewMeasuredReader wraps a reader."
        ],
        [
            "// BytesPer tells the rate per period at which bytes were read since last\n// measurement."
        ],
        [
            "// BytesPerSec tells the rate per second at which bytes were read since last\n// measurement."
        ],
        [
            "// ThrottledReader ensures that reads to `r` never exceeds a specified rate of\n// bytes per second. The `maxBurst` duration changes how often the verification is\n// done. The smaller the value, the less bursty, but also the more overhead there\n// is to the throttling."
        ],
        [
            "// ThrottledWriter ensures that writes to `w` never exceeds a specified rate of\n// bytes per second. The `maxBurst` duration changes how often the verification is\n// done. The smaller the value, the less bursty, but also the more overhead there\n// is to the throttling."
        ],
        [
            "// Create a new DNS server. Domain is an unqualified domain that will be used\n// as the TLD."
        ],
        [
            "// Convenience function to ensure that SRV names are well-formed."
        ],
        [
            "// rewrites supplied host entries to use the domain this dns server manages"
        ],
        [
            "// Receives a FQDN; looks up and supplies the A record."
        ],
        [
            "// Sets a host to an IP. Note that this is not the FQDN, but a hostname."
        ],
        [
            "// Deletes a host. Note that this is not the FQDN, but a hostname."
        ],
        [
            "// Sets a SRV with a service and protocol. See SRVRecord for more information\n// on what that requires."
        ],
        [
            "// Deletes a SRV record based on the service and protocol."
        ],
        [
            "// Create a Typed helper from the given JSON bytes"
        ],
        [
            "// Create a Typed helper from the given JSON bytes, panics on error"
        ],
        [
            "// Create a Typed helper from the given JSON stream"
        ],
        [
            "// Create a Typed helper from the JSON within a file"
        ],
        [
            "// Create an array of Typed helpers\n// Used for when the root is an array which contains objects"
        ],
        [
            "// Create an array of Typed helpers from a file\n// Used for when the root is an array which contains objects"
        ],
        [
            "// Returns a boolean at the key, or false if it\n// doesn't exist, or if it isn't a bool"
        ],
        [
            "// Returns a boolean at the key, or the specified\n// value if it doesn't exist or isn't a bool"
        ],
        [
            "// Returns a bool or panics"
        ],
        [
            "// Returns a boolean at the key and whether\n// or not the key existed and the value was a bolean"
        ],
        [
            "// Returns a int at the key, or the specified\n// value if it doesn't exist or isn't a int"
        ],
        [
            "// Returns an int or panics"
        ],
        [
            "// Returns an int at the key and whether\n// or not the key existed and the value was an int"
        ],
        [
            "// Returns a float at the key, or the specified\n// value if it doesn't exist or isn't a float"
        ],
        [
            "// Returns an float or panics"
        ],
        [
            "// Returns an float at the key and whether\n// or not the key existed and the value was an float"
        ],
        [
            "// Returns a string at the key, or the specified\n// value if it doesn't exist or isn't a string"
        ],
        [
            "// Returns an string or panics"
        ],
        [
            "// Returns a time at the key, or the specified\n// value if it doesn't exist or isn't a time"
        ],
        [
            "// Returns a time.Time or panics"
        ],
        [
            "// Returns an time.time at the key and whether\n// or not the key existed and the value was a time.Time"
        ],
        [
            "// Returns an typed object or panics"
        ],
        [
            "// Returns a string at the key, or the specified\n// value if it doesn't exist or isn't a strin"
        ],
        [
            "// Returns an interface or panics"
        ],
        [
            "// Returns an string at the key and whether\n// or not the key existed and the value was an string"
        ],
        [
            "// Returns an slice of boolean, or an nil slice"
        ],
        [
            "// Returns an slice of boolean, or the specified slice"
        ],
        [
            "// Returns an slice of ints, or the specified slice\n// Some conversion is done to handle the fact that JSON ints\n// are represented as floats."
        ],
        [
            "// Returns an slice of ints64, or the specified slice\n// Some conversion is done to handle the fact that JSON ints\n// are represented as floats."
        ],
        [
            "// Returns an slice of floats, or a nil slice"
        ],
        [
            "// Returns an slice of strings, or a nil slice"
        ],
        [
            "// Returns an slice of Typed helpers, or a nil slice"
        ],
        [
            "// Returns a slice of Typed helpers and true if exists, otherwise; nil and false."
        ],
        [
            "// GetSessions returns sessions."
        ],
        [
            "// ObjectChange subscribes to changes for objects of a given type."
        ],
        [
            "// AutoOfferingPopUp creates AgentPreOfferingPopUp jobs for active offerings.\n// Taken into account a current balance of agent ETH. If ETH is not enough to\n// pop up all offerings, then no one of them is popped up. Function calculates\n// the pop up time."
        ],
        [
            "// MarshalJSON marshals itself."
        ],
        [
            "// Scan deserializes the log topics."
        ],
        [
            "// NewWorker returns new instance of worker."
        ],
        [
            "// NewLoggerBase creates a new LoggerBase."
        ],
        [
            "// Log adds a new log message with a given severity level."
        ],
        [
            "// PreAccountAddBalanceApprove approve balance if amount exists."
        ],
        [
            "// PreAccountAddBalance adds balance to psc."
        ],
        [
            "// AfterAccountAddBalance updates psc and ptc balance of an account."
        ],
        [
            "// AfterAccountReturnBalance updates psc and ptc balance of an account."
        ],
        [
            "// AccountUpdateBalances updates ptc, psc and eth balance values."
        ],
        [
            "// PreAccountReturnBalance returns from psc to ptc."
        ],
        [
            "// GetOfferingUsage returns total units used for all channels\n// with a given offering."
        ],
        [
            "// GetProductUsage returns total units used in all channel\n// of all offerings with given product."
        ],
        [
            "// AddMapping maps an external port to a local port for a specific\n// service to UPnP interface."
        ],
        [
            "// DeleteMapping removes the port mapping to UPnP interface."
        ],
        [
            "// PostCheque sends a payment cheque to a payment server."
        ],
        [
            "// NewHTTPClient returns a client that speaks to tor open sock."
        ],
        [
            "// NewServer creates a new UI server."
        ],
        [
            "// AddHandler registers a new RPC handler in a given namespace."
        ],
        [
            "// ListenAndServe starts to listen and to serve requests."
        ],
        [
            "// Recover ensures data consistency after unexpected controller's exit."
        ],
        [
            "// ConnStr composes a data connection string."
        ],
        [
            "// NewDBFromConnStr connects to db and returns db instance."
        ],
        [
            "// NewDB creates a new data connection handle."
        ],
        [
            "// GetCountry returns country code by ip.\n// Parses response in JSON format and returns a value of the field."
        ],
        [
            "// Endpoint returns endpoint msg for a channel with given key."
        ],
        [
            "// NewServer creates a new pay server."
        ],
        [
            "// NewMonitor creates new blockchain monitor."
        ],
        [
            "// initLastProcessedBlock calculates last processed block. If user role is\n// client and value of \"eth.event.lastProcessedBlock\" setting is 0, then value\n// of \"eth.event.lastProcessedBlock\" setting is equal the difference between\n// the last Ethereum block and a InitialBlocks value. If InitialBlocks\n// value is 0, then this parameter is ignored."
        ],
        [
            "// Start starts scanning blockchain for events."
        ],
        [
            "// newClient creates client for connection to the Ethereum."
        ],
        [
            "// Loop performs a function that creates new jobs with a certain frequency.\n// If at the moment there is already a similar active job, then such job is\n// ignored. The function works correctly only with jobs for which duplicates\n// are allowed."
        ],
        [
            "// Offering gets offering message through tor net."
        ],
        [
            "// Endpoint gets endpoint message through tor net."
        ],
        [
            "// Ping returns an error if remote enpoint cannot be reached."
        ],
        [
            "// GetEthTransactions returns transactions by related object."
        ],
        [
            "// AgentSeal encrypts message using client's public key and packs with\n// agent signature."
        ],
        [
            "// ClientOpen decrypts message using client's key and verifies using agent's key."
        ],
        [
            "// PackWithSignature packs message with signature."
        ],
        [
            "// UnpackSignature unpacks msg from signature."
        ],
        [
            "// VerifySignature returns true if signature is correct."
        ],
        [
            "// signature computes and returns signature."
        ],
        [
            "// GetObject finds object in a database by id,\n// then returns an object on raw JSON format."
        ],
        [
            "// GetObjectByHash finds object in a database by hash,\n// then returns an object on raw JSON format."
        ],
        [
            "// ToError converts error into Error pointer."
        ],
        [
            "// SetPassword sets the password only on the first call.\n// Returns error if password already exists."
        ],
        [
            "// UpdatePassword updates the password."
        ],
        [
            "// GetToken returns token if password is correct."
        ],
        [
            "// NewProcessor creates a new processor."
        ],
        [
            "// NewConfig creates a default job queue configuration."
        ],
        [
            "// NewQueue creates a new job queue."
        ],
        [
            "// AddWithDataAndDelay is convenience method to add a job with given data\n// and delay."
        ],
        [
            "// AddWithData is convenience method to add a job with given data."
        ],
        [
            "// AddSimple is convenience method to add a job."
        ],
        [
            "// AddWithDelay is convenience method to add a job with given data delay."
        ],
        [
            "// Subscribe adds a subscription to job result notifications for given keys.\n// Each subscription key can be be a job type or a job related id. SubID is\n// used to distinguish between different subscriptions."
        ],
        [
            "// Unsubscribe removes a subscription from job result notifications for given\n// ids of related objects. SubID is used to distinguish between different\n// subscriptions to a same related object."
        ],
        [
            "// TopUpChannel initiates JobClientPreChannelTopUp job."
        ],
        [
            "// ChangeChannelStatus updates channel state."
        ],
        [
            "// GetAgentChannels gets channels for agent."
        ],
        [
            "// GetChannelsUsage returns detailed usage on channels."
        ],
        [
            "// GetClientChannels gets client channel information."
        ],
        [
            "// ReadSetting reads value of a given setting."
        ],
        [
            "// ReadUintSetting reads value of a given uint setting."
        ],
        [
            "// ReadBoolSetting reads value of a given bool setting."
        ],
        [
            "// SuspendChannel tries to suspend a given channel."
        ],
        [
            "// ActivateChannel tries to activate a given channel."
        ],
        [
            "// TerminateChannel tries to terminate a given channel."
        ],
        [
            "// ExportPrivateKey returns a private key in base64 encoding by account id."
        ],
        [
            "// GetAccounts returns accounts."
        ],
        [
            "// GenerateAccount generates new private key and creates new account."
        ],
        [
            "// ImportAccountFromHex imports private key from hex, creates account\n// and initiates JobAccountUpdateBalances job."
        ],
        [
            "// ImportAccountFromJSON imports private key from JSON blob with password,\n// creates account and initiates JobAccountUpdateBalances job."
        ],
        [
            "// TransferTokens initiates JobPreAccountAddBalanceApprove\n// or JobPreAccountReturnBalance job depending on the direction of the transfer."
        ],
        [
            "// UpdateBalance initiates JobAccountUpdateBalances job."
        ],
        [
            "// UpdateAccount updates an account."
        ],
        [
            "// GetLastBlockNumber returns last known block number."
        ],
        [
            "// GetEndpoint returns an endpoint for a given client key."
        ],
        [
            "// SetProductConfig sets product configuration."
        ],
        [
            "// NewWriterLogger creates a new io.Writer based logger."
        ],
        [
            "// NewFileLogger creates a new file logger."
        ],
        [
            "// NewClient returns new client instance based given somc type and data."
        ],
        [
            "// Parse parses a NAT interface description."
        ],
        [
            "// Map adds a port mapping on NAT interface and keeps it alive until interface\n// is closed."
        ],
        [
            "// AddMapping maps an external port to a local port for a specific\n// service."
        ],
        [
            "// DeleteMapping removes the port mapping."
        ],
        [
            "// ReadFile reads a file content from the embedded filesystem."
        ],
        [
            "// GetUserRole returns user role."
        ],
        [
            "// NewHandler creates a new handler."
        ],
        [
            "// NewBackend returns eth back implementation."
        ],
        [
            "// addTimeout adds timeout to context."
        ],
        [
            "// PendingNonceAt returns the account nonce of the given account in the pending state.\n// This is the nonce that should be used for the next transaction."
        ],
        [
            "// SuggestGasPrice retrieves the currently suggested gas price to allow a timely\n// execution of a transaction."
        ],
        [
            "// EstimateGas tries to estimate the gas needed to execute a specific\n// transaction based on the current pending state of the backend blockchain."
        ],
        [
            "// CooperativeClose calls cooperativeClose method of Privatix service contract."
        ],
        [
            "// TransactionByHash returns the transaction with the given hash."
        ],
        [
            "// RegisterServiceOffering calls registerServiceOffering method of Privatix\n// service contract."
        ],
        [
            "// PTCBalanceOf calls balanceOf method of Privatix token contract."
        ],
        [
            "// PTCIncreaseApproval calls increaseApproval method of Privatix token contract."
        ],
        [
            "// PSCBalanceOf calls balanceOf method of Privatix service contract."
        ],
        [
            "// PSCAddBalanceERC20 calls addBalanceERC20 of Privatix service contract."
        ],
        [
            "// PSCGetOfferingInfo calls getOfferingInfo of Privatix service contract."
        ],
        [
            "// PSCGetChannelInfo calls getChannelInfo method of Privatix service contract."
        ],
        [
            "// EthBalanceAt returns the wei balance of the given account."
        ],
        [
            "// PSCSettle calls settle method of Privatix service contract."
        ],
        [
            "// PSCRemoveServiceOffering calls removeServiceOffering method of Privatix\n// service contract."
        ],
        [
            "// PSCPopupServiceOffering calls popupServiceOffering method of  Privatix\n// service contract."
        ],
        [
            "// FilterLogs executes a Ethereum filter query."
        ],
        [
            "// HeaderByNumber returns a Ethereum block header from the current canonical\n// chain. If number is nil, the latest known header is returned."
        ],
        [
            "// PTCAddress returns Privatix token contract address."
        ],
        [
            "// PSCAddress returns Privatix service contract address."
        ],
        [
            "// NewHandler creates a new RPC handler."
        ],
        [
            "// keyFromChannelData returns the unique channel identifier\n// used in a Privatix Service Contract."
        ],
        [
            "// AgentAfterChannelCreate registers client and creates pre service create job."
        ],
        [
            "// AgentAfterChannelTopUp updates deposit of a channel."
        ],
        [
            "// AgentAfterUncooperativeCloseRequest sets channel's status to challenge period."
        ],
        [
            "// AgentAfterUncooperativeClose marks channel closed uncoop."
        ],
        [
            "// AgentAfterCooperativeClose marks channel as closed coop."
        ],
        [
            "// AgentPreServiceSuspend marks service as suspended."
        ],
        [
            "// AgentPreServiceUnsuspend marks service as active."
        ],
        [
            "// AgentPreServiceTerminate terminates the service."
        ],
        [
            "// AgentAfterOfferingMsgBCPublish updates offering status and creates\n// somc publish job."
        ],
        [
            "// AgentAfterOfferingDelete set offering status to `remove`"
        ],
        [
            "// AgentPreOfferingDelete calls psc remove an offering."
        ],
        [
            "// checkInPeriod checks an offering being in period specified by periodKey."
        ],
        [
            "// AgentPreOfferingPopUp pop ups an offering."
        ],
        [
            "// AgentAfterOfferingPopUp updates the block number\n// when the offering was updated."
        ],
        [
            "// Print prints version and completes the program."
        ],
        [
            "// Error returns an error message of a given error."
        ],
        [
            "// Message returns an error message from a given error code."
        ],
        [
            "// RespondResult sends a response with a given result."
        ],
        [
            "// RespondError sends a response with a given error."
        ],
        [
            "// handlePay handles clients balance proof informations."
        ],
        [
            "// getOpenBlockNumber extracts the Open_block_number field of a given\n// channel-related EthLog. Returns false in case it failed, i.e.\n// the event has no such field."
        ],
        [
            "// Offering returns offerings raw msg with given hash."
        ],
        [
            "// HandlersMap returns handlers map needed to construct job queue."
        ],
        [
            "// Version returns the version of the database schema."
        ],
        [
            "// Migrate executes migration scripts."
        ],
        [
            "// NewMonitor creates new instance of billing monitor.\n// 'interval' specifies how often channels checks must be performed."
        ],
        [
            "// Run begins monitoring of channels.\n// In case of error - doesn't restarts automatically."
        ],
        [
            "// VerifyBillingLags checks all active channels for billing lags,\n// and schedules suspending of those, who are suffering from billing lags."
        ],
        [
            "// VerifySuspendedChannelsAndTryToUnsuspend scans all supsended channels,\n// and checks if all conditions are met to unsuspend them.\n// Is so - schedules task for appropriate channel unsuspending."
        ],
        [
            "// VerifyChannelsForInactivity scans all channels, that are not terminated,\n// and terminates those of them, who are staying inactive too long."
        ],
        [
            "// VerifySuspendedChannelsAndTryToTerminate scans all suspended channels,\n// and terminates those of them, who are staying suspended too long."
        ],
        [
            "// NewLogger creates a new database logger."
        ],
        [
            "// BalanceClosingHash computes balance message hash."
        ],
        [
            "// Run matches and opens external network ports."
        ],
        [
            "// RecoverPubKey recover public key from signature values."
        ],
        [
            "// GetTemplates returns templates."
        ],
        [
            "// CreateTemplate creates template."
        ],
        [
            "// CreateProduct creates new product."
        ],
        [
            "// UpdateProduct updates a product."
        ],
        [
            "// GetProducts returns all products available to the agent."
        ],
        [
            "// NewHandler creates a new session handler."
        ],
        [
            "// EncryptedKey returns encrypted keystore.Key in base64."
        ],
        [
            "// ExecuteCommand executes commands to manage database\n// db-create - command to create database\n// db-migrate - command to execute migration scripts\n// db-init-data - command to initialize database by default values\n// db-version - command to print the version of the database schema."
        ],
        [
            "// AddMapping maps an external port to a local port for a specific\n// service to NAT-PMP interface."
        ],
        [
            "// DeleteMapping removes the port mapping to NAT-PMP interface."
        ],
        [
            "// NewMonitor creates a new client billing monitor."
        ],
        [
            "// GetOfferingIncome returns total receipt balance from all channels of\n// offering with given id."
        ],
        [
            "// GetProductIncome returns total receipt balance from all channels of all\n// offerings with given product id."
        ],
        [
            "// GetTotalIncome returns total receipt balance from all channels."
        ],
        [
            "// Up00001 will be executed as part of a forward migration."
        ],
        [
            "// GetSettings returns settings."
        ],
        [
            "// UpdateSettings updates settings."
        ],
        [
            "// IsIPv4 checks if this is a valid IPv4"
        ],
        [
            "// IsHostname checks if this is a hostname"
        ],
        [
            "// IsNetPort checks if this is a valid net port"
        ],
        [
            "// IsTLSCert if block is one or more\n// TLS certificates then function returns true"
        ],
        [
            "// ValidateJSON validates a given JSON against a given schema."
        ],
        [
            "// NewConfig creates a default Ethereum client configuration."
        ],
        [
            "// ReadJSONFile reads and parses a JSON file filling a given data instance."
        ],
        [
            "// WriteJSONFile converts a given data instance to JSON and writes it to file."
        ],
        [
            "// IsUUID checks if a given string is a UUID."
        ],
        [
            "// ExeDirJoin composes a file name relative to a running executable."
        ],
        [
            "// RootPath returns a path of the root package."
        ],
        [
            "// Caller returns a caller's call location. If F1 calls F2 which in its turn\n// calls Caller, then this function will return a location within F1 where it\n// calls F2."
        ],
        [
            "// CheckConnection connects to the specified host on the specified port.\n// If the connection is successful then return true."
        ],
        [
            "// ClientAfterChannelCreate activates channel and triggers endpoint retrieval."
        ],
        [
            "// ClientEndpointCreate decodes endpoint message, saves it in the DB and\n// triggers product configuration."
        ],
        [
            "// ClientAfterUncooperativeClose changed channel status\n// to closed uncooperative."
        ],
        [
            "// ClientAfterCooperativeClose changed channel status\n// to closed cooperative and launches of terminate service procedure."
        ],
        [
            "// ClientPreServiceTerminate terminates service."
        ],
        [
            "// ClientPreServiceSuspend suspends service."
        ],
        [
            "// ClientPreServiceUnsuspend activates service."
        ],
        [
            "// ClientPreUncooperativeClose waiting for until the challenge\n// period is over. Then deletes the channel and settles\n// by transferring the balance to the Agent and the rest\n// of the deposit back to the Client."
        ],
        [
            "// ClientPreChannelTopUp checks client balance and creates transaction\n// for increase the channel deposit."
        ],
        [
            "// ClientAfterChannelTopUp updates deposit of a channel."
        ],
        [
            "// ClientPreUncooperativeCloseRequest requests the closing of the channel\n// and starts the challenge period."
        ],
        [
            "// ClientAfterUncooperativeCloseRequest waits for the channel\n// to uncooperative close, starts the service termination process."
        ],
        [
            "// ClientAfterOfferingMsgBCPublish creates offering."
        ],
        [
            "// ClientAfterOfferingPopUp updates offering in db or retrieves from somc\n// if new."
        ],
        [
            "// ClientAfterOfferingDelete sets offer status to `remove`;"
        ],
        [
            "// DecrementCurrentSupply finds offering and decrements its current supply."
        ],
        [
            "// GetEndpoints returns endpoints."
        ],
        [
            "// GetGUISettings returns gui settings."
        ],
        [
            "// SetGUISettings sets gui settings."
        ],
        [
            "// HandleFunc registers a handler function for a given pattern."
        ],
        [
            "// RequireHTTPMethods wraps a given handler function inside an HTTP method\n// validating handler."
        ],
        [
            "// RequireBasicAuth wraps a given handler function inside a handler with basic\n// access authentication."
        ],
        [
            "// New function for initialize the service for generating\n// the Endpoint Message."
        ],
        [
            "// EndpointMessage returns the endpoint message object."
        ],
        [
            "// ConnChange subscribes to changes for adapter connection changes."
        ],
        [
            "// FromBase64ToHex return hex of base 64 encoded."
        ],
        [
            "// HexToBytes reutrns the bytes represented by the hex of string s."
        ],
        [
            "// ToBytes returns the bytes represented by the base64 string s."
        ],
        [
            "// ToHash returns the ethereum's hash represented by the base64 string s."
        ],
        [
            "// HexToHash returns the ethereum's hash represented by the hex of string s."
        ],
        [
            "// HexToAddress returns ethereum's address from base 64 encoded string."
        ],
        [
            "// BytesToUint32 using big endian."
        ],
        [
            "// Uint32ToBytes using big endian."
        ],
        [
            "// Uint64ToBytes using big endian."
        ],
        [
            "// Uint192ToBytes using big endian with leading zeros."
        ],
        [
            "// HashPassword computes encoded hash of the password."
        ],
        [
            "// ValidatePassword checks if a given password, hash and salt are matching."
        ],
        [
            "// GetUint64Setting finds the key value in table Setting.\n// Checks that the value in the format of uint64"
        ],
        [
            "// ChannelKey returns the unique channel identifier\n// used in a Privatix Service Contract."
        ],
        [
            "// MinDeposit calculates minimal deposit required to accept the offering."
        ],
        [
            "// AcceptOffering initiates JobClientPreChannelCreate job."
        ],
        [
            "// ChangeOfferingStatus initiates JobAgentPreOfferingMsgBCPublish,\n// JobAgentPreOfferingPopUp or JobAgentPreOfferingDelete job,\n// depending on a selected action."
        ],
        [
            "// GetClientOfferings returns active offerings available for a client."
        ],
        [
            "// GetAgentOfferings returns active offerings available for a agent."
        ],
        [
            "// setOfferingHash computes and sets values for raw msg and hash fields."
        ],
        [
            "// fillOffering fills offerings nonce, status, hash and signature."
        ],
        [
            "// UpdateOffering updates an offering."
        ],
        [
            "// CreateOffering creates an offering."
        ],
        [
            "// GetClientOfferingsFilterParams returns offerings filter parameters for client."
        ],
        [
            "// PingOfferings given offerings ids pings each of them and returns result of the test."
        ],
        [
            "// NewServer creates a new HTTP server."
        ],
        [
            "// Mux is an associated http.ServeMux instance."
        ],
        [
            "// NewLogger creates a new reporter logger."
        ],
        [
            "// Printf logs internal messages from a reporter."
        ],
        [
            "// GetURL returns a server URL for a given path."
        ],
        [
            "// NewHTTPRequest creates a new HTTP request from a given server request."
        ],
        [
            "// NewHTTPRequestWithURL creates a new HTTP request for a given url."
        ],
        [
            "// Send sends an HTTP request and returns a server response."
        ],
        [
            "// Check returns true if given string matches stored."
        ],
        [
            "// Make makes new random token."
        ],
        [
            "// GetLogs returns back end log, paginated."
        ],
        [
            "// AuthClient verifies password for a given client key."
        ],
        [
            "// StartSession creates a new client session."
        ],
        [
            "// UpdateSession updates and optionally stops the current client session."
        ],
        [
            "// OfferingMessage returns new Offering message"
        ],
        [
            "// ValidMsg if is true then offering message corresponds\n// to an offer template scheme."
        ],
        [
            "// NewClient initializing Bugsnag client.\n// Bugsnag client that automatic error sender to remote server.\n// We use this service to collect anonymous information\n// about the error and panic.\n// Service is activated if exist entry key = \"error.sendremote\"\n// and value = true in the database settings table."
        ],
        [
            "// PanicHunter catches panic, in case of an enabled reporter."
        ],
        [
            "// ParseRequest parses request handling possible errors."
        ],
        [
            "// save reads the applied ipvsadm rules from the host and saves them as i.Services"
        ],
        [
            "// NewClient returns a new Client."
        ],
        [
            "// ParseRate is a helper function to get all the Rate info"
        ],
        [
            "// Sets the output path for generated snapshots."
        ],
        [
            "// Update global Tracer configuration."
        ],
        [
            "// Sets the executable path for the tracer."
        ],
        [
            "// Sets the output path for generated snapshots. The directory will be\n// created with the specified permission bits if it does not already\n// exist.\n//\n// If perm is 0, a default of 0755 will be used."
        ],
        [
            "// Sets the input and output pipes for the tracer.\n// Stdout is not redirected; it is instead passed to the\n// tracer's Put command."
        ],
        [
            "// Append to an option with given prefix"
        ],
        [
            "// MarshalRaw copies the raw bytes to the buffer, without a size prefix or\n// padding. This is suitable for appending data already in XDR format from\n// another source."
        ],
        [
            "// MarshalString appends the string to the buffer, with a size prefix and\n// correct padding."
        ],
        [
            "// MarshalString appends the bytes to the buffer, with a size prefix and\n// correct padding."
        ],
        [
            "// MarshalString appends the bool to the buffer, as an uint32."
        ],
        [
            "// MarshalString appends the uint32 to the buffer."
        ],
        [
            "// MarshalString appends the uint64 to the buffer."
        ],
        [
            "// ElementSizeExceeded returns an error describing the violated size\n// constraint. This function is used by the generated marshalling code."
        ],
        [
            "// Return first character position where the character has to be escaped"
        ],
        [
            "// Return first character position where the character has to be decoded"
        ],
        [
            "// Returns a new decoder. Data will be read from r, and decoded\n// according to enc."
        ],
        [
            "// Register registers a constructor function\n// with the DI container"
        ],
        [
            "// MustRegister is a helper that calls Register and panics if it returns an error"
        ],
        [
            "// Create creates an instance of the type of the given parameter"
        ],
        [
            "// cachedCreateFromType creates an instance of the given type"
        ],
        [
            "// NewDependencyInjector returns a new DependencyInjector"
        ],
        [
            "// NewServiceContainer returns a new ServiceContainer"
        ],
        [
            "// add the prefix when providing urls"
        ],
        [
            "// Prefix returns an AssetPipeline that prefixes URLs with the\n// given string"
        ],
        [
            "// ServeHTTP handles a http request"
        ],
        [
            "// getResponse executes the specified controller's method using reflection\n// and returns the response object"
        ],
        [
            "// isValid checks that the controller and method specifies\n// will sucessfully execute if getResponse is called on it"
        ],
        [
            "// NewHandler creates a ControllerHandler from the factory and methodName"
        ],
        [
            "// Handler handles functions of type GoannaHandlerFunc"
        ],
        [
            "// SetRequest injects a request into the controller"
        ],
        [
            "// Session returns the session for the current request"
        ],
        [
            "// RenderView renders a template string using the provided template and vars struct\n// and returns the rendered tamplate"
        ],
        [
            "// RenderView renders a template using the provided template and vars struct\n// and returns the rendered tamplate"
        ],
        [
            "// RedirectRoute returns a RedirectResponse to the route"
        ],
        [
            "// UrlFor is helper function for controllers"
        ],
        [
            "// CookieValue returns the value of the named cookie"
        ],
        [
            "// BodyData returns the full request body"
        ],
        [
            "// QueryValue returns the value in the GET query string"
        ],
        [
            "// FormValueOrDefault returns the result of Request.FormValue,\n// and if the result is empty returns the default string"
        ],
        [
            "// UrlValue returns whether the request is PATCH"
        ],
        [
            "// Contains returns true if any string in substrs is within s"
        ],
        [
            "// RemoveStringsFromString removes any string in substrs from s"
        ],
        [
            "// Map returns a slice containing all the elements of ss\n// after applying the callback function to each one"
        ],
        [
            "// Equal returns a boolean reporting whether a == b"
        ],
        [
            "// Uniq returns a slice containing the unique strings\n// found in items"
        ],
        [
            "// NewCookieSigner returns a new CookieSigner using the given key"
        ],
        [
            "// EncodeCookie signs and encodes the cookie"
        ],
        [
            "// DecodeCookie verifies the signature and decodes the value into the cookie"
        ],
        [
            "// DecodeValue validates and decodes a cookie value"
        ],
        [
            "// EncodeValue signs and encodes a cookie value"
        ],
        [
            "// ServeHTTP records the time for a request and sends the result to statsd"
        ],
        [
            "// NewSprocketsServer creates a Sprockets asset pipeline"
        ],
        [
            "// Keys must be at maximum 250 bytes long, ASCII, and not\n// contain whitespace or control characters."
        ],
        [
            "// stop the stopwatch"
        ],
        [
            "// Function decorator to monitor the execution of an anonymous function\n// returns an array of the returned Values"
        ],
        [
            "// Function decorator\n// to monitor a reflected function"
        ],
        [
            "// LogRequest logs a goanna request"
        ],
        [
            "// CommonLogHandler returns a handler that serves HTTP requests\n// If a logger is not provided, stdout will be used"
        ],
        [
            "// ServeHTTP logs the request and response data to Common Log Format"
        ],
        [
            "// Extract username from the request url"
        ],
        [
            "// UrlFor returns the relative URL for the route name"
        ],
        [
            "// UrlFor returns the avsolute URL for the route name.\n// UrlBase is used for the URL Host and Scheme"
        ],
        [
            "// Parse parses the JSON-encoded data and stores the result\n// into the value pointed at by c.\n// Panics if unsuccessful"
        ],
        [
            "// LoadFromEnv iterates through a\n// struct's fields and tries to find matching\n// environment variables.\n// Returns a map of environment key and values that were\n// successfully set into the struct"
        ],
        [
            "// RegexPath returns a handler that serves HTTP requests\n// with the first match of the the given regex from the request URL's Path\n// and invoking the handler h. RegexPath handles a\n// request for a path that doesn't match by\n// replying with an HTTP 404 not found error."
        ],
        [
            "// CacheControl decorates a handler and adds Cache-Control headers"
        ],
        [
            "// transform YAML to JSON"
        ],
        [
            "// DiscoverWalk will make HTTPS requests to find discovery meta tags and\n// optionally will use HTTP if insecure is set. Based on the response of the\n// discoverFn it will continue to recurse up the tree."
        ],
        [
            "// DiscoverEndpoints will make HTTPS requests to find the ac-discovery meta\n// tags and optionally will use HTTP if insecure is set. It will not give up\n// until it has exhausted the path or found an image discovery."
        ],
        [
            "// JSONFieldsFromStruct returns the names of JSON fields associated\n// with the given struct. Returns nil if v is not a struct"
        ],
        [
            "// StructFieldFromJSONName returns the struct field name on the\n// given struct value. Empty value means the field is either not\n// public, or does not exist.\n//\n// This can be used to map JSON field names to actual struct fields."
        ],
        [
            "// Enumerate lists each word in the Dictionary alphabetically."
        ],
        [
            "// Release returns the message to the pool for re-use."
        ],
        [
            "// Wrap returns an error that wraps err, optionally annotating\n// with the message text."
        ],
        [
            "// causer detects whether e wraps another error, and if so\n// returns an Error that also implements the Causer interface."
        ],
        [
            "// From creates a new context based on ctx. See the Context example."
        ],
        [
            "// With returns a context.Context with the keyvals attached."
        ],
        [
            "// Format implements the fmt.Formatter interface. If\n// the context is printed with \"%+v\", then it prints\n// using the String method of the wrapped context."
        ],
        [
            "// NewWriter creates writer that logs messages to out. If the output writer is a terminal\n// device, the output will be formatted for improved readability."
        ],
        [
            "// Levels returns a list of levels and their associated actions."
        ],
        [
            "// SetLevel sets an individual level and its associated display effect."
        ],
        [
            "// Suppress instructs the writer to suppress any message with the specified level."
        ],
        [
            "// IsSuppressed reports true if level should be suppressed."
        ],
        [
            "// Handle registers a handler that will be called for every logging\n// event. The function receives a message, which is a structured\n// representation of the log message text.\n//\n// This function is useful for registering handlers that send log\n// information to external sources."
        ],
        [
            "// SetOutput sets the output destination for log messages."
        ],
        [
            "// Enumerate lists the items in a `Directory`"
        ],
        [
            "// All tests whether or not all items present in an Enumerable meet a criteria."
        ],
        [
            "// All tests whether or not all items present meet a criteria."
        ],
        [
            "// Any tests an Enumerable to see if there are any elements present."
        ],
        [
            "// Anyp tests an Enumerable to see if there are any elements present that meet a criteria."
        ],
        [
            "// AsEnumerable allows for easy conversion of a slice to a re-usable Enumerable object."
        ],
        [
            "// First retrieves just the first item in the list, or returns an error if there are no elements in the array."
        ],
        [
            "// Merge takes the results of this Enumerator and others, and funnels them into\n// a single Enumerator. The order of in which they will be combined is non-deterministic."
        ],
        [
            "// ParallelSelect creates an Enumerable which will use all logically available CPUs to\n// execute a Transform."
        ],
        [
            "// ParallelSelect will execute a Transform across all logical CPUs available to the current process."
        ],
        [
            "// Reverse returns items in the opposite order it encountered them in."
        ],
        [
            "// Select creates a reusable stream of transformed values."
        ],
        [
            "// Select iterates over a list and returns a transformed item."
        ],
        [
            "// SelectMany allows for unfolding of values."
        ],
        [
            "// SelectMany allows for flattening of data structures."
        ],
        [
            "// Single retreives the only element from a list, or returns nil and an error."
        ],
        [
            "// Singlep retrieces the only element from a list that matches a criteria. If\n// no match is found, or two or more are found, `Singlep` returns nil and an\n// error."
        ],
        [
            "// Skip creates a reusable stream which will skip the first `n` elements before iterating\n// over the rest of the elements in an Enumerable."
        ],
        [
            "// splitN creates N Enumerators, each will be a subset of the original Enumerator and will have\n// distinct populations from one another."
        ],
        [
            "// Take retreives just the first `n` elements from an Enumerable."
        ],
        [
            "// Take retreives just the first 'n' elements from an Enumerator."
        ],
        [
            "// TakeWhile creates a reusable stream which will halt once some criteria is no longer met."
        ],
        [
            "// TakeWhile continues returning items as long as 'criteria' holds true."
        ],
        [
            "// Tee creates two Enumerators which will have identical contents as one another."
        ],
        [
            "// ToSlice places all iterated over values in a Slice for easy consumption."
        ],
        [
            "// Where creates a reusable means of filtering a stream."
        ],
        [
            "// Where iterates over a list and returns only the elements that satisfy a\n// predicate."
        ],
        [
            "// ReleaseBuffer returns a buffer to the pool to be re-used."
        ],
        [
            "// NewStack instantiates a new FILO structure."
        ],
        [
            "// Enumerate peeks at each element in the stack without mutating it."
        ],
        [
            "// IsEmpty tests the Stack to determine if it is populate or not."
        ],
        [
            "// Push adds an entry to the top of the Stack."
        ],
        [
            "// Pop returns the entry at the top of the Stack then removes it."
        ],
        [
            "// Peek returns the entry at the top of the Stack without removing it."
        ],
        [
            "// Size returns the number of entries populating the Stack."
        ],
        [
            "// NewLinkedList instantiates a new LinkedList with the entries provided."
        ],
        [
            "// AddBack creates an entry in the LinkedList that is logically at the back of the list."
        ],
        [
            "// Enumerate creates a new instance of Enumerable which can be executed on."
        ],
        [
            "// Get finds the value from the LinkedList.\n// pos is expressed as a zero-based index begining from the 'front' of the list."
        ],
        [
            "// IsEmpty tests the list to determine if it is populate or not."
        ],
        [
            "// Length returns the number of elements present in the LinkedList."
        ],
        [
            "// PeekBack returns the entry logicall stored at the back of the list without removing it."
        ],
        [
            "// PeekFront returns the entry logically stored at the front of this list without removing it."
        ],
        [
            "// RemoveFront returns the entry logically stored at the front of this list and removes it."
        ],
        [
            "// RemoveBack returns the entry logically stored at the back of this list and removes it."
        ],
        [
            "// Sort rearranges the positions of the entries in this list so that they are\n// ascending."
        ],
        [
            "// Sorta rearranges the position of string entries in this list so that they\n// are ascending."
        ],
        [
            "// Sorti rearranges the position of integer entries in this list so that they\n// are ascending."
        ],
        [
            "// String prints upto the first fifteen elements of the list in string format."
        ],
        [
            "// Swap switches the positions in which two values are stored in this list.\n// x and y represent the indexes of the items that should be swapped."
        ],
        [
            "// merge takes two sorted lists and merges them into one sorted list.\n// Behavior is undefined when you pass a non-sorted list as `left` or `right`"
        ],
        [
            "// split breaks a list in half."
        ],
        [
            "// Add places an item at the back of the Queue."
        ],
        [
            "// Enumerate peeks at each element of this queue without mutating it."
        ],
        [
            "// IsEmpty tests the Queue to determine if it is populate or not."
        ],
        [
            "// Length returns the number of items in the Queue."
        ],
        [
            "// Next removes and returns the next item in the Queue."
        ],
        [
            "// Peek returns the next item in the Queue without removing it."
        ],
        [
            "// ToSlice converts a Queue into a slice."
        ],
        [
            "// EnableVirtualTerminalProcessing configures the terminal to accept ANSI\n// sequences. This is a no-op for all operating systems other than Windows."
        ],
        [
            "// unquote the input. If possible the unquoted value points to the same\n// backing array as input. Otherwise it points to buf. The remainder is\n// the unused portion of buf."
        ],
        [
            "// countScalars returns the count of items in input up to but\n// not including the first non-scalar item. A scalar is a single\n// value item, ie not a keyvalser."
        ],
        [
            "// IsTerminal returns true if the writer is a terminal."
        ],
        [
            "// Add appends an entry to the logical end of the List."
        ],
        [
            "// AddAt injects values beginning at `pos`. If multiple values\n// are provided in `entries` they are placed in the same order\n// they are provided."
        ],
        [
            "// Enumerate lists each element present in the collection"
        ],
        [
            "// Get retreives the value stored in a particular position of the list.\n// If no item exists at the given position, the second parameter will be\n// returned as false."
        ],
        [
            "// IsEmpty tests to see if this List has any elements present."
        ],
        [
            "// Length returns the number of elements in the List."
        ],
        [
            "// Remove retreives a value from this List and shifts all other values."
        ],
        [
            "// Set updates the value stored at a given position in the List."
        ],
        [
            "// String generates a textual representation of the List for the sake of debugging."
        ],
        [
            "// Swap switches the values that are stored at positions `x` and `y`"
        ],
        [
            "// MarshalText implements the TextMarshaler interface."
        ],
        [
            "// UnmarshalText implements the TextUnmarshaler interface."
        ],
        [
            "// repl replaces % directives with right time"
        ],
        [
            "// Format return string with % directives expanded.\n// Will return error on unknown directive."
        ],
        [
            "// logName returns a new log file name containing tag, with start time t, and\n// the name for the symlink for tag."
        ],
        [
            "// Monotonic returns a time duration from some fixed point in the past."
        ],
        [
            "// set sets the value of the severity."
        ],
        [
            "// Set is part of the flag.Value interface."
        ],
        [
            "// set sets the value of the Level."
        ],
        [
            "// match reports whether the file matches the pattern. It uses a string\n// comparison if the pattern contains no metacharacters."
        ],
        [
            "// match reports whether the file path matches the regexp."
        ],
        [
            "// match reports whether the specified file and line matches the trace location.\n// The argument file name is the full path, not the basename specified in the flag."
        ],
        [
            "// NewLogger creates a new logger.\n// name is a non-empty string that appears in the names of log files\n// to distinguish between separate instances of the logger writing to the\n// same directory.\n// skip is the number of stack frames to skip in order to reach the\n// call point to be logged. 0 will log the caller of the logging methods,\n// 1 their caller etc."
        ],
        [
            "// logDir if non-empty, write log files to this directory."
        ],
        [
            "// SetLogToStderr sets the flag that, if true, logs to standard error instead of files"
        ],
        [
            "// SetAlsoLogToStderr sets the flag that, if true, logs to standard error as well as files"
        ],
        [
            "// setVState sets a consistent state for V logging. A nil value for\n// modules or filepaths will result in that filter not being changed.\n// l.mu is held."
        ],
        [
            "// getBuffer returns a new, ready-to-use buffer."
        ],
        [
            "// putBuffer returns a buffer to the free list."
        ],
        [
            "// output writes the data to the log files and releases the buffer."
        ],
        [
            "// timeoutFlush calls Flush and returns when it completes or after timeout\n// elapses, whichever happens first.  This is needed because the hooks invoked\n// by Flush may deadlock when glog.Fatal is called from a hook that holds\n// a lock."
        ],
        [
            "// stacks is a wrapper for runtime.Stack that attempts to recover the data for all goroutines."
        ],
        [
            "// exit is called if there is trouble creating or writing log files.\n// It flushes the logs and exits the program; there's no point in hanging around.\n// l.mu is held."
        ],
        [
            "// rotateFile closes the syncBuffer's file and starts a new one."
        ],
        [
            "// createFiles creates all the log files for severity from sev down to infoLog.\n// l.mu is held."
        ],
        [
            "// flushDaemon periodically flushes the log file buffers."
        ],
        [
            "// lockAndFlushAll is like flushAll but locks l.mu first."
        ],
        [
            "// flushAll flushes all the logs and attempts to \"sync\" their data to disk.\n// l.mu is held."
        ],
        [
            "// Add a new operation to the bundle. The operation will be invoked with a\n// context that will be cancelled if any other operation fails or has already\n// failed."
        ],
        [
            "// Wait for all previously-added operations to complete. Return nil if all\n// operations succeeded. Otherwise return the first error.\n//\n// Add must not be called concurrently with or after Join."
        ],
        [
            "// Create a bundle whose operations are fed a context inheriting from the given\n// parent context, which must be non-nil. The bundle must eventually be joined\n// with Join."
        ],
        [
            "// Expand until there are no more expansions to do"
        ],
        [
            "// CacheFunc accepts two parameters\n// first is the http.HandlerFunc which you want to cache its result\n// the second is, optional, the cache Entry's expiration duration\n// if the expiration <=2 seconds then expiration is taken by the \"cache-control's maxage\" header\n// returns an http.HandlerFunc, which you can use as your default router or per-route handler\n//\n// All type of responses are cached, templates, json, text, anything.\n//\n// You CAN NOT add validators with this function"
        ],
        [
            "// CacheFasthttp accepts two parameters\n// first is the fasthttp.RequestHandler which you want to cache its result\n// the second is, optional, the cache Entry's expiration duration\n// if the expiration <=2 seconds then expiration is taken by the \"cache-control's maxage\" header\n// returns a fhttp.Handler with a ServeHTTP which is the fasthttp.RequestHandler,\n// which you can use as your default router or per-route handler\n//\n// All type of responses are cached, templates, json, text, anything.\n//\n// You can add validators with this function"
        ],
        [
            "// CacheFasthttpFunc accepts two parameters\n// first is the fasthttp.RequestHandler which you want to cache its result\n// the second is, optional, the cache Entry's expiration duration\n// if the expiration <=2 seconds then expiration is taken by the \"cache-control's maxage\" header\n// returns a fasthttp.RequestHandler, which you can use as your default router or per-route handler\n//\n// All type of responses are cached, templates, json, text, anything.\n//\n// You CAN NOT add validators with this function"
        ],
        [
            "// ContentType returns a valid content type"
        ],
        [
            "// ServeHTTP serves the cache Service to the outside world,\n// it is used only when you want to achieve something like horizontal scaling\n// it parses the request and tries to return the response with the cached body of the requested cache key\n// server-side function"
        ],
        [
            "// the actual work is done on the handler.go\n// here we just provide a helper for the main package to create\n// an http.Server and serve a cache remote service, without any user touches\n// New returns a http.Server which hosts\n// the server-side handler for the remote cache service.\n//\n// it doesn't listens to the server"
        ],
        [
            "// AcquireResponseRecorder returns a ResponseRecorder"
        ],
        [
            "// ReleaseResponseRecorder releases a ResponseRecorder which has been previously received by AcquireResponseRecorder"
        ],
        [
            "// Claim returns true if incoming request can claim for a cached handler\n// the original handler should run as it is and exit"
        ],
        [
            "// Rule sets the ruleset for this handler.\n//\n// returns itself."
        ],
        [
            "// Reset called each time the entry is expired\n// and the handler calls this after the original handler executed\n// to re-set the response with the new handler's content result"
        ],
        [
            "// NoCache called when a particular handler is not valid for cache.\n// If this function called inside a handler then the handler is not cached."
        ],
        [
            "// ClientOAuth instantiates ClientOAuthAuthentication with the client OAuth tokens"
        ],
        [
            "// Client OAuth authentication requires us to attach an unexpired OAuth token to\n// the request header"
        ],
        [
            "// ApiKeyAuth instantiates ApiKeyAuthentication with the API key & secret"
        ],
        [
            "// API Key + Secret authentication requires a request header of the HMAC SHA-256\n// signature of the \"message\" as well as an incrementing nonce and the API key"
        ],
        [
            "// ServiceOAuth instantiates ServiceOAuthAuthentication with the coinbase certificate file"
        ],
        [
            "// Service OAuth authentication requires no additional headers to be sent. The\n// Coinbase Public Certificate is set as a TLS config in the http.Client"
        ],
        [
            "// OAuthService Instantiates OAuth Struct in order to send service related OAuth requests"
        ],
        [
            "// CreateAuthorizeUrl create the Authorize Url used to redirect users for\n// coinbase app authorization. The scope parameter includes the specific\n// permissions one wants to ask from the user"
        ],
        [
            "// RefreshTokens refreshes a users existing OAuth tokens"
        ],
        [
            "// NewTokens generates new tokens for an OAuth user"
        ],
        [
            "// NewTokensRequest generates new tokens for OAuth user given an http request\n// containing the query parameter 'code'"
        ],
        [
            "// Request sends a request with params marshaled into a JSON payload in the body\n// The response value is marshaled from JSON into the specified holder struct"
        ],
        [
            "// CreateRequest formats a request with all the necessary headers"
        ],
        [
            "// executeRequest takes a prepared http.Request and returns the body of the response\n// If the response is not of HTTP Code 200, an error is returned"
        ],
        [
            "// simulateRequest simulates a request by returning a sample JSON from file"
        ],
        [
            "// ApiKeyClient instantiates the client with ApiKey Authentication"
        ],
        [
            "// OAuthClient instantiates the client with OAuth Authentication"
        ],
        [
            "// Get sends a GET request and marshals response data into holder"
        ],
        [
            "// GetBalance returns current balance in BTC"
        ],
        [
            "// GetAllAddresses returns bitcoin addresses associated with client account"
        ],
        [
            "// GenerateReceiveAddress generates and returns a new bitcoin receive address"
        ],
        [
            "// SendMoney to either a bitcoin or email address"
        ],
        [
            "// RequestMoney from either a bitcoin or email address"
        ],
        [
            "// ResendRequest resends a transaction request referenced by id"
        ],
        [
            "// CancelRequest cancels a transaction request referenced by id"
        ],
        [
            "// CompleteRequest completes a money request referenced by id"
        ],
        [
            "// CreateButton gets a new payment button including EmbedHtml as a field on button struct"
        ],
        [
            "// CreateOrderFromButtonCode creates an order for a given button code"
        ],
        [
            "// CreateUser creates a new user given an email and password"
        ],
        [
            "// Buy an amount of BTC and bypass rate limits by setting agreeBtcAmountVaries to true"
        ],
        [
            "// GetContacts gets a users contacts"
        ],
        [
            "// GetCurrencies gets all currency names and ISO's"
        ],
        [
            "// GetExchangeRates gets the current exchange rates"
        ],
        [
            "// GetExchangeRate gets the exchange rate between two specified currencies"
        ],
        [
            "// GetTransactions gets transactions associated with an account"
        ],
        [
            "// GetOrders gets orders associated with an account"
        ],
        [
            "// GetTransfers get transfers associated with an account"
        ],
        [
            "// GetBuyPrice gets the current BTC buy price"
        ],
        [
            "// GetSellPrice gets the current BTC sell price"
        ],
        [
            "// GetTransaction gets a particular transaction referenced by id"
        ],
        [
            "// GetOrder gets a particular order referenced by id"
        ],
        [
            "// GetUser gets the user associated with the authentication"
        ],
        [
            "// NewSerialDispatcher creates a new PrallelDispatcher with the given handlers"
        ],
        [
            "// AppendHandlers implements `Dispatcher.AppendHandlers`"
        ],
        [
            "// DispatchOptional implements `Dispatcher.DispatchOptional`"
        ],
        [
            "// NewParallelDispatcher creates a new PrallelDispatcher with the given handlers"
        ],
        [
            "// ReleaseMsg releases a buffer"
        ],
        [
            "// ReleaseBuffer puts the given byte array back into the appropriate\n// global buffer pool based on its capacity."
        ],
        [
            "// close is the internal close function, called by ContextCloser.Close"
        ],
        [
            "// Write writes data, net.Conn style"
        ],
        [
            "// Accept waits for and returns the next connection to the listener."
        ],
        [
            "// AddDialer adds a sub-dialer usable by this dialer.\n// Dialers added first will be selected first, based on the address."
        ],
        [
            "// returns dialer that can dial the given address"
        ],
        [
            "// rawConnDial dials the underlying net.Conn + manet.Conns"
        ],
        [
            "// MultiaddrProtocolsMatch returns whether two multiaddrs match in protocol stacks."
        ],
        [
            "// MultiaddrNetMatch returns the first Multiaddr found to match  network."
        ],
        [
            "//Return non-array values"
        ],
        [
            "//Return array values"
        ],
        [
            "// buildParams takes the image options set by the user and turns them into command flags for wkhtmltoimage\n// It returns an array of command flags."
        ],
        [
            "// unsetenv is not available in mingw"
        ],
        [
            "// AssuanSend sends a raw Assuan command to gpg-agent"
        ],
        [
            "// NewData returns a new memory based data buffer"
        ],
        [
            "// NewDataFile returns a new file based data buffer"
        ],
        [
            "// NewDataBytes returns a new memory based data buffer that contains `b` bytes"
        ],
        [
            "// NewDataReader returns a new callback based data buffer"
        ],
        [
            "// NewDataWriter returns a new callback based data buffer"
        ],
        [
            "// NewDataReadWriter returns a new callback based data buffer"
        ],
        [
            "// NewDataReadWriteSeeker returns a new callback based data buffer"
        ],
        [
            "// Close releases any resources associated with the data buffer"
        ],
        [
            "// Name returns the associated filename if any"
        ],
        [
            "// NewCommand creates a new Livestatus command instance."
        ],
        [
            "// Arg appends a new argument to the command."
        ],
        [
            "// String returns a string representation of the Livestatus command."
        ],
        [
            "// Columns returns the list of the record columns."
        ],
        [
            "// Get returns an interface value for a specific column."
        ],
        [
            "// GetBool returns a boolean value for a specific column."
        ],
        [
            "// GetInt returns an integer value for a specific column."
        ],
        [
            "// GetSlice returns a slice of interface value for a specific column."
        ],
        [
            "// GetString returns a string value for a specific column."
        ],
        [
            "// GetTime returns a time struct value for a specific column."
        ],
        [
            "// ChangeContactModattr creates a new \"CHANGE_CONTACT_MODATTR\" Nagios command.\n//\n// This command changes the modified attributes value for the specified contact.\n//\n// Modified attributes values are used by Nagios to determine which object properties should be retained across program\n// restarts.\n//\n// Thus, modifying the value of the attributes can affect data retention.\n//\n// This is an advanced option and should only be used by people who are intimately familiar with the data retention\n// logic in Nagios."
        ],
        [
            "// ChangeContactModhattr creates a new \"CHANGE_CONTACT_MODHATTR\" Nagios command.\n//\n// This command changes the modified host attributes value for the specified contact.\n//\n// Modified attributes values are used by Nagios to determine which object properties should be retained across program\n// restarts.\n//\n// Thus, modifying the value of the attributes can affect data retention.\n//\n// This is an advanced option and should only be used by people who are intimately familiar with the data retention\n// logic in Nagios."
        ],
        [
            "// ChangeContactModsattr creates a new \"CHANGE_CONTACT_MODSATTR\" Nagios command.\n//\n// This command changes the modified service attributes value for the specified contact.\n//\n// Modified attributes values are used by Nagios to determine which object properties should be retained across program\n// restarts.\n//\n// Thus, modifying the value of the attributes can affect data retention.\n//\n// This is an advanced option and should only be used by people who are intimately familiar with the data retention\n// logic in Nagios."
        ],
        [
            "// ChangeCustomContactVar creates a new \"CHANGE_CUSTOM_CONTACT_VAR\" Nagios command.\n//\n// Changes the value of a custom contact variable."
        ],
        [
            "// ChangeCustomHostVar creates a new \"CHANGE_CUSTOM_HOST_VAR\" Nagios command.\n//\n// Changes the value of a custom host variable."
        ],
        [
            "// ChangeCustomSvcVar creates a new \"CHANGE_CUSTOM_SVC_VAR\" Nagios command.\n//\n// Changes the value of a custom service variable."
        ],
        [
            "// ChangeHostCheckTimeperiod creates a new \"CHANGE_HOST_CHECK_TIMEPERIOD\" Nagios command.\n//\n// Changes the valid check period for the specified host."
        ],
        [
            "// ChangeHostModattr creates a new \"CHANGE_HOST_MODATTR\" Nagios command.\n//\n// This command changes the modified attributes value for the specified host.\n//\n// Modified attributes values are used by Nagios to determine which object properties should be retained across program\n// restarts.\n//\n// Thus, modifying the value of the attributes can affect data retention.\n//\n// This is an advanced option and should only be used by people who are intimately familiar with the data retention\n// logic in Nagios."
        ],
        [
            "// ChangeSvcModattr creates a new \"CHANGE_SVC_MODATTR\" Nagios command.\n//\n// This command changes the modified attributes value for the specified service.\n//\n// Modified attributes values are used by Nagios to determine which object properties should be retained across program\n// restarts.\n//\n// Thus, modifying the value of the attributes can affect data retention.\n//\n// This is an advanced option and should only be used by people who are intimately familiar with the data retention\n// logic in Nagios."
        ],
        [
            "// DelAllSvcComments creates a new \"DEL_ALL_SVC_COMMENTS\" Nagios command.\n//\n// Deletes all comments associated with a particular service."
        ],
        [
            "// DisablePassiveSvcChecks creates a new \"DISABLE_PASSIVE_SVC_CHECKS\" Nagios command.\n//\n// Disables passive checks for the specified service."
        ],
        [
            "// DisableServiceFlapDetection creates a new \"DISABLE_SERVICE_FLAP_DETECTION\" Nagios command.\n//\n// Disables flap detection for the specified service."
        ],
        [
            "// DisableSvcCheck creates a new \"DISABLE_SVC_CHECK\" Nagios command.\n//\n// Disables active checks for a particular service."
        ],
        [
            "// DisableSvcEventHandler creates a new \"DISABLE_SVC_EVENT_HANDLER\" Nagios command.\n//\n// Disables the event handler for the specified service."
        ],
        [
            "// DisableSvcFlapDetection creates a new \"DISABLE_SVC_FLAP_DETECTION\" Nagios command.\n//\n// Disables flap detection for the specified service."
        ],
        [
            "// DisableSvcNotifications creates a new \"DISABLE_SVC_NOTIFICATIONS\" Nagios command.\n//\n// Disables notifications for a particular service."
        ],
        [
            "// EnablePassiveSvcChecks creates a new \"ENABLE_PASSIVE_SVC_CHECKS\" Nagios command.\n//\n// Enables passive checks for the specified service."
        ],
        [
            "// EnableSvcCheck creates a new \"ENABLE_SVC_CHECK\" Nagios command.\n//\n// Enables active checks for a particular service."
        ],
        [
            "// EnableSvcEventHandler creates a new \"ENABLE_SVC_EVENT_HANDLER\" Nagios command.\n//\n// Enables the event handler for the specified service."
        ],
        [
            "// EnableSvcFlapDetection creates a new \"ENABLE_SVC_FLAP_DETECTION\" Nagios command.\n//\n// Enables flap detection for the specified service.\n//\n// In order for the flap detection algorithms to be run for the service, flap detection must be enabled on a\n// program-wide basis as well."
        ],
        [
            "// EnableSvcNotifications creates a new \"ENABLE_SVC_NOTIFICATIONS\" Nagios command.\n//\n// Enables notifications for a particular service.\n//\n// Notifications will be sent out for the service only if notifications are enabled on a program-wide basis as well."
        ],
        [
            "// RemoveSvcAcknowledgement creates a new \"REMOVE_SVC_ACKNOWLEDGEMENT\" Nagios command.\n//\n// This removes the problem acknowledgement for a particular service.\n//\n// Once the acknowledgement has been removed, notifications can once again be sent out for the given service."
        ],
        [
            "// StartObsessingOverSvc creates a new \"START_OBSESSING_OVER_SVC\" Nagios command.\n//\n// Enables processing of service checks via the OCSP command for the specified service."
        ],
        [
            "// StopObsessingOverSvc creates a new \"STOP_OBSESSING_OVER_SVC\" Nagios command.\n//\n// Disables processing of service checks via the OCSP command for the specified service."
        ],
        [
            "// NewQuery creates a new Livestatus query instance."
        ],
        [
            "// Columns selects which columns to retrieve."
        ],
        [
            "// Filter appends a new filter to the query."
        ],
        [
            "// And combines the n last filters into a new filter using a `And` operation."
        ],
        [
            "// Negate negates the most recent filter."
        ],
        [
            "// WaitObject specifies an object from the table to wait on.\n//\n// For `hosts`, `hostgroups`, `servicegroups`, `contacts` and `contactgroups` tables this is simply the name of\n// the object. For the `services` table it is the `hostname` and the service `description` separated by a space."
        ],
        [
            "// WaitCondition appends a new wait condition to the query."
        ],
        [
            "// WaitConditionNegate negates the most recent wait condition."
        ],
        [
            "// WaitTrigger appends a new wait trigger to the query, waiting for a specific event broker message to recheck\n// condition."
        ],
        [
            "// WaitTimeout sets the upper limit on the time to wait before executing the query."
        ],
        [
            "// KeepAlive keeps the connection open to reuse for additional requests."
        ],
        [
            "// ReadTimeout sets the connection timeout for read operations.\n// Be careful when using a read timeout in conjunction with wait conditions.\n// A value of 0 disables the timeout."
        ],
        [
            "// String returns a string representation of the Livestatus query."
        ],
        [
            "// NewClient creates a new Livestatus client instance."
        ],
        [
            "// NewClientWithDialer creates a new Livestatus client instance using a provided network dialer."
        ],
        [
            "// Exec executes a given Livestatus query."
        ],
        [
            "// xtoi2 converts the next two hex digits of s into a byte.\n// If s is longer than 2 bytes then the third byte must be e.\n// If the first two bytes of s are not hex digits or the third byte\n// does not match e, false is returned."
        ],
        [
            "// Mask returns the result of masking the address with mask."
        ],
        [
            "// New returns a new OUI database loaded from the specified file."
        ],
        [
            "// Lookup finds the OUI the address belongs to"
        ],
        [
            "// VendorLookup obtains the vendor organization name from the MAC address s."
        ],
        [
            "// Contains reports whether the mac address belongs to the OUI"
        ],
        [
            "// Create a reader that limits the bandwidth of reads made from r according to\n// the supplied throttler. Reads are assumed to be made under the supplied\n// context."
        ],
        [
            "// Create a bucket that limits the rate at which it calls the wrapped bucket\n// using opThrottle, and limits the bandwidth with which it reads from the\n// wrapped bucket using egressThrottle."
        ],
        [
            "// NewCmdWithRunner creates a new CmdWithRunner for the provided name and runner. Returns an error if the provided name\n// is not a legal command name."
        ],
        [
            "// MustNewCmdWithRunner returns the result of NewCmdWithRunner and panics in cases where the function returns an error."
        ],
        [
            "// importBreakPaths returns a slice that contains the import paths before which a line breaks should be inserted."
        ],
        [
            "// SelfProxyCmderSupplier returns a supplier that, given a command, re-invokes the current executable with a proxy\n// version of the provided command."
        ],
        [
            "// SupplierWithPrependedArgs returns a new Supplier that invokes the provided supplier and returns the result of calling\n// RunnerWithPrependedArgs on the returned runner with the result of applying the provided \"argsFunc\" function to the\n// provided command."
        ],
        [
            "// selfCmder returns a Cmder that creates a command that re-invokes the currently running executable."
        ],
        [
            "// CmderWithPrependedArgs returns a new Cmder that invokes the provided Cmder, but always adds the provided\n// \"prependedArgs\" before any user-supplied arguments. Note that if the runner being wrapped has a notion of\n// \"prependedArgs\" itself, those arguments will precede the \"prependedArgs\" provided in this method."
        ],
        [
            "// NewSeeforRouter for creating a new instance of Seefor router"
        ],
        [
            "// Implementing http handler interface.\n// This is a override of Router.ServeHTTP for handling middlewares"
        ],
        [
            "// Before is for adding middleware for running before routing"
        ],
        [
            "// After is for adding middleware for running after routing"
        ],
        [
            "// UseTimer set timer for meaturing endpoint performance.\n// If timer is nil and no timer exists\n// then a new timer will be created \n// else existing timer will be returned.\n// You can serve statistics internal using Timer as handler"
        ],
        [
            "// NewRouter return a new Router"
        ],
        [
            "// http Handler Interface"
        ],
        [
            "// Group takes a path which typically a prefix for an endpoint\n// It will call callback function with a group router which\n// you can add handler for different request methods"
        ],
        [
            "// findChild finds a child node that matches the given node\n// It returns nil if no node found. This is to see if\n// we already have a similar node registered"
        ],
        [
            "// insertChild registers given node in the route node tree\n// If there is already a similar node it will not insert new node\n// The returned node is always the registered one ie either\n// newly registered or the old one"
        ],
        [
            "// Get returns a Counter for a route.\n// If there is no entry it will create a new one.\n// It will lock during creation"
        ],
        [
            "// For serving statistics"
        ],
        [
            "// Example how to use basic auth together with r2router"
        ],
        [
            "// NewGroupRouter return GroupRouter which is a helper\n// to construct a group of endpoints, such example could\n// be API-version or different methods for an endpoint\n// You should always use router.Group instead of using this directly"
        ],
        [
            "// Your own route middle wrapper"
        ],
        [
            "// Wrapper for http.HandlerFunc"
        ],
        [
            "// RectFromSphere returns the minimum rectangle that contains the circle of\n// center c and radius r."
        ],
        [
            "// CopyRect allocates and returns a new Rectangle that is the copy of r."
        ],
        [
            "// Size returns r's width, height and depth."
        ],
        [
            "// Overlaps reports whether r and s have a non-empty intersection."
        ],
        [
            "// String returns a string representation of r."
        ],
        [
            "// Dx returns r's width."
        ],
        [
            "// Dy returns r's height."
        ],
        [
            "// In reports whether Rectangle r is contained in s."
        ],
        [
            "// Approx returns true if x ~= y"
        ],
        [
            "// ApproxEpsilon returns true if x ~= y, using provided epsilon value."
        ],
        [
            "// SetXYZ sets the 3 components at once."
        ],
        [
            "// Vec3Dist2DSqr derives the square of the distance between v1 and v2 on the\n// xz-plane.\n//\n// The vectors are projected onto the xz-plane, so the y-values are ignored."
        ],
        [
            "// Vec3 methods\n// Copy copies the 3 vector components into dst."
        ],
        [
            "// Assign assign the component of v1 to v. v = v1"
        ],
        [
            "// Dist2D derives the distance between v and v2 on the xz-plane.\n//\n// The vectors are projected onto the xz-plane, so the y-values are ignored."
        ],
        [
            "// Dist2DSqr derives the square of the distance between v and v2 on the\n// xz-plane.\n//\n// The vectors are projected onto the xz-plane, so the y-values are ignored."
        ],
        [
            "// Cross returns the cross product of two vectors. v x v1"
        ],
        [
            "// Dot2D derives the dot product of two vectors on the xz-plane. u . v\n//\n// The vectors are projected onto the xz-plane, so the y-values are ignored."
        ],
        [
            "// NewRay creates a new Ray having the o as origin and v as direction of the\n// line."
        ],
        [
            "// IntersectRect indicates wether the ray intersects with the rectangle b."
        ],
        [
            "// SupportedFunc returns a function that checks if the server can\n// support a specific request."
        ],
        [
            "// NewSigner creates a new RSA backed Signer"
        ],
        [
            "// NewVerifier creates a new RSA backed Verifier"
        ],
        [
            "// Request makes a performs a new GDPR request."
        ],
        [
            "// Status checks the status of an existing GDPR request."
        ],
        [
            "// Cancel cancels an existing GDPR request."
        ],
        [
            "// Discovery describes the remote OpenGDPR speciication."
        ],
        [
            "// NewClient returns a new OpenGDPR client."
        ],
        [
            "// Push pushes a new item on top of the stack."
        ],
        [
            "// Pop removes the topmost item from the stack and return its value.\n//\n// If the stack is empty, Pop returns nil."
        ],
        [
            "// PopLast removes the bottommost item.\n//\n// PopLast does nothing if the stack does not contain at least 2 items."
        ],
        [
            "// Peek returns the topmost item without removing it from the stack."
        ],
        [
            "// PeekN returns at max the N topmost item without removing them from the stack."
        ],
        [
            "// Vecf32 creates a Vec from float32 values."
        ],
        [
            "// Veci creates a Vec from int values."
        ],
        [
            "// Add returns the vector v+v2."
        ],
        [
            "// Sub returns the vector v-v2."
        ],
        [
            "// In reports whether p is in r."
        ],
        [
            "// Len returns the vector's length."
        ],
        [
            "// ApproxFuncEqual takes in a func that compares two floats, and uses it to do\n// an element-wise comparison of the vector to another.\n//\n// This is intended to be used with FloatEqualFunc"
        ],
        [
            "// Merge merges another HandlerMap into itself."
        ],
        [
            "// respCode maps any successful request with a\n// specific status code or returns 200."
        ],
        [
            "// NewServer returns a server type that statisfies the\n// http.Handler interface."
        ],
        [
            "// Callback sends the CallbackRequest type to the configured\n// StatusCallbackUrl. If it fails to deliver in n attempts or\n// the request is invalid it will return an error."
        ],
        [
            "// ErrNotFound indicates a request could\n// not be found by the processor."
        ],
        [
            "// ErrUnsupportedRequestType indicates the processor\n// cannot fullfil a request for the given RequestType."
        ],
        [
            "// ErrUnsupportedIdentity indicates the processor\n// does not support the given identity type."
        ],
        [
            "// ErrMissingRequiredField indicates the request\n// is missing a required field."
        ],
        [
            "// ErrInvalidRequestSignature indicates the payload could not\n// be verified with the given signature."
        ],
        [
            "// DatabaseServers retrieves a list of all database servers"
        ],
        [
            "// SnapshotDatabaseServer requests a snapshot of an existing database server."
        ],
        [
            "// ResetPasswordForDatabaseServer requests a snapshot of an existing database server."
        ],
        [
            "// Servers retrieves a list of all servers"
        ],
        [
            "// Server retrieves a detailed view of one server"
        ],
        [
            "// DestroyServer issues a request to destroy the server"
        ],
        [
            "// LockServer locks an existing server, preventing it's destruction without\n// first unlocking. Deprecated, use LockResource instead."
        ],
        [
            "// UnlockServer unlocks a previously locked existing server, allowing\n// destruction again. Deprecated, use UnLockResource instead."
        ],
        [
            "// SnapshotServer issues a request to snapshot the disk of an existing\n// server. The snapshot is allocated an Image Id which is returned within an\n// instance of Image."
        ],
        [
            "// FullConsoleUrl returns the console url for the server with the token in the\n// query string.  Server needs a ConsoleUrl and ConsoleToken, retrieved using\n// ActivateConsoleForServer"
        ],
        [
            "// FirewallRule retrieves a detailed view of one firewall rule"
        ],
        [
            "// ServerGroups retrieves a list of all server groups"
        ],
        [
            "// ServerGroup retrieves a detailed view on one server group"
        ],
        [
            "// AddServersToServerGroup adds servers to an existing server group.\n//\n// The identifier parameter specifies the destination group.\n//\n// The serverIds paramater specifies the identifiers of the servers you want to add."
        ],
        [
            "// MoveServersToServerGroup atomically moves servers from one group to another.\n//\n// The src parameter specifies the group to which the servers currently belong\n//\n// The dst parameter specifies the group to which you want to move the servers.\n//\n// The serverIds parameter specifies the identifiers of the servers you want to move."
        ],
        [
            "// LoadBalancers retrieves a list of all load balancers"
        ],
        [
            "// LoadBalancer retrieves a detailed view of one load balancer"
        ],
        [
            "// AddNodesToLoadBalancer adds nodes to an existing load balancer."
        ],
        [
            "// RemoveListenersFromLoadBalancer removes listeners to an existing load balancer."
        ],
        [
            "// LockResource locks a resource against destroy requests. Support brightbox.CloudIP, brightbox.Server, brightbox.Image and brightbox.LoadBalancer"
        ],
        [
            "// FirewallPolicies retrieves a list of all firewall policies"
        ],
        [
            "// FirewallPolicy retrieves a detailed view of one firewall policy"
        ],
        [
            "// ApplyFirewallPolicy issues a request to apply the given firewall policy to\n// the given server group.\n//"
        ],
        [
            "// Extract is a method that attempts to interpret any Swauth authentication\n// response as a AuthResult struct."
        ],
        [
            "// ApiClients retrieves a list of all API clients"
        ],
        [
            "// ApiClient retrieves a detailed view of one API client"
        ],
        [
            "// ResetSecretForApiClient requests a snapshot of an existing api client"
        ],
        [
            "// Images retrieves a list of all images"
        ],
        [
            "// Image retrieves a detailed view of one image"
        ],
        [
            "// Accounts retrieves a list of all accounts associated with the client.\n//\n// API Clients are only ever associated with one single account. User clients\n// can have multiple accounts, through collaborations."
        ],
        [
            "// Account retrieves a detailed view of one account"
        ],
        [
            "// CloudIPs retrieves a list of all cloud ips"
        ],
        [
            "// CloudIP retrieves a detailed view of one cloud ip"
        ],
        [
            "// MapCloudIPtoServer is a convenience method to map a Cloud IP to a\n// server. First looks up the server to get the network interface id. Uses the\n// first interface found."
        ],
        [
            "// setAuthHeader sets the Swift Authorization header to r using the access\n// token in t.\n//"
        ],
        [
            "// Auth performs an authentication request for a Swauth-based user."
        ],
        [
            "// Collaborations retrieves a list of all the current user's collaborations"
        ],
        [
            "// Collaboration retrieves a detailed view of one of the current user's\n// collaborations"
        ],
        [
            "// DatabaseSnapshots retrieves a list of all database snapshot"
        ],
        [
            "// DatabaseSnapshot retrieves a detailed view of one database snapshot"
        ],
        [
            "// Scan ping to hosts in CIDR range."
        ],
        [
            "// ToFile downloads the specified `src` URL to `dest` file using\n// the specified `FileOptions`."
        ],
        [
            "// ToWriter downloads the specified `src` URL to `w` writer using\n// the specified `Options`."
        ],
        [
            "// FromURL downloads the specified `src` URL to `w` writer using\n// the specified `Options`."
        ],
        [
            "// Return the time-based OTP for the given period."
        ],
        [
            "// Return the data to be contained in a QR Code for this TOTP with the given label."
        ],
        [
            "// Generate a Random secret encoded as a b32 string\n// If the length is <= 0, a default length of 10 bytes will\n// be used, which will generate a secret of length 16."
        ],
        [
            "// DefaultPeerConfig returns the default config."
        ],
        [
            "// PubKey returns peer's public key."
        ],
        [
            "// OnStart implements BaseService."
        ],
        [
            "// Send msg to the channel identified by chID byte. Returns false if the send\n// queue is full after timeout, specified by MConnection."
        ],
        [
            "// WriteTo writes the peer's public key to w."
        ],
        [
            "// Equals reports whenever 2 peers are actually represent the same node."
        ],
        [
            "// FuzzConnAfter creates a new FuzzedConnection. Fuzzing starts when the\n// duration elapses."
        ],
        [
            "// NewMConnectionWithConfig wraps net.Conn and creates multiplex connection with a config"
        ],
        [
            "// Catch panics, usually caused by remote disconnects."
        ],
        [
            "// Queues a message to be sent to channel."
        ],
        [
            "// Queues a message to be sent to channel.\n// Nonblocking, returns true if successful."
        ],
        [
            "// CanSend returns true if you can send more data onto the chID, false\n// otherwise. Use only as a heuristic."
        ],
        [
            "// sendRoutine polls for packets to send from channels."
        ],
        [
            "// Returns true if messages from channels were exhausted.\n// Blocks in accordance to .sendMonitor throttling."
        ],
        [
            "// Returns true if messages from channels were exhausted."
        ],
        [
            "// Creates a new msgPacket to send.\n// Not goroutine-safe"
        ],
        [
            "// Writes next msgPacket to w.\n// Not goroutine-safe"
        ],
        [
            "// Handles incoming msgPackets. Returns a msg bytes if msg is complete.\n// Not goroutine-safe"
        ],
        [
            "// We only fill in the first 20 bytes with ripemd160"
        ],
        [
            "// increment nonce big-endian by 1 with wraparound."
        ],
        [
            "// threadsafe list of peers."
        ],
        [
            "// Accept connections and pass on the channel"
        ],
        [
            "// NewAddrBook creates a new address book.\n// Use Start to begin processing asynchronous address updates."
        ],
        [
            "// OnStart implements Service."
        ],
        [
            "// RemoveAddress removes the address from the book."
        ],
        [
            "// Returns false if file does not exist.\n// Panics if file is corrupt."
        ],
        [
            "// Save saves the book."
        ],
        [
            "// Adds ka to old bucket. Returns false if it couldn't do it cuz buckets full."
        ],
        [
            "// Make space in the new buckets by expiring the really bad entries.\n// If no bad entries are available we remove the oldest."
        ],
        [
            "// Dial a list of seeds asynchronously in random order"
        ],
        [
            "// NewNetAddressStrings returns an array of NetAddress'es build using\n// the provided strings."
        ],
        [
            "// NewNetAddressIPPort returns a new NetAddress using the provided IP\n// and port number."
        ],
        [
            "// Equals reports whether na and other are the same addresses."
        ],
        [
            "// Dial calls net.Dial on the address."
        ],
        [
            "// For IPv4 these are either a 0 or all bits set address. For IPv6 a zero\n// address or one that matches the RFC3849 documentation address format."
        ],
        [
            "// ReachabilityTo checks whenever o can be reached from na."
        ],
        [
            "// NewPEXReactor creates new PEX reactor."
        ],
        [
            "// OnStart implements BaseService"
        ],
        [
            "// Receive implements Reactor by handling incoming PEX messages."
        ],
        [
            "// RequestPEX asks peer for more addresses."
        ],
        [
            "// SendAddrs sends addrs to the peer."
        ],
        [
            "// Increment or initialize the msg count for the peer in the CMap"
        ],
        [
            "// DecodeMessage implements interface registered above."
        ],
        [
            "// NewReader returns a new Reader that reads from r."
        ],
        [
            "// LogOnPanic logs the given panic and its stacktrace, prefixing each line with\n// the panic ID."
        ],
        [
            "// Wrap returns an handler which proxies requests to the given handler, but\n// handles panics by logging the stack trace and returning a 500 Internal Server\n// Error to the client, if possible."
        ],
        [
            "// Start creates a goroutine to handle the logging IO."
        ],
        [
            "// New returns a new service-ready handler given an application handler.\n//\n// This stack application-level metrics, debug endpoints, panic recovery, and\n// request logging, in that order."
        ],
        [
            "// Wrap wraps an HTTP handler to check the contents of client certificates.\n// If CheckCertificate returns true, the request will be passed to the wrapped\n// handler. If CheckCertificate returns false, it will be passed to the\n// InvalidHandler or, if no InvalidHandler is specified, will return an\n// empty 403 response and log the rejected DN."
        ],
        [
            "// GetString property."
        ],
        [
            "// GetInt property."
        ],
        [
            "// RegisterDriver registers driver with given names."
        ],
        [
            "// Open creates pubsub hub connected to redis server."
        ],
        [
            "// SendEvents streams events from specified channels as Server Sent Events packets"
        ],
        [
            "// Unmarshal message from byte array."
        ],
        [
            "// Publish data to given channel."
        ],
        [
            "// Subscribe adds new receiver of events for given channel."
        ],
        [
            "// GetChannel gets or creates new pubsub channel."
        ],
        [
            "// Removes given channel, called by Channel.Close."
        ],
        [
            "// Open creates pubsub hub connected to nats server."
        ],
        [
            "// Publish message to given channels."
        ],
        [
            "// Subscribe on given channels."
        ],
        [
            "// IMPLEMENTATION\n// MakeHub returns new instance of the pubsub hub."
        ],
        [
            "// successive Fibonacci numbers."
        ],
        [
            "// generates round robin indexes for a slice of length max\n// starting from index start"
        ],
        [
            "// Dir returns the home directory for the executing user.\n// An error is returned if a home directory cannot be detected."
        ],
        [
            "// Ask asks cleverbot a question."
        ],
        [
            "// InteractionCount gets the count of interactions that have happened between the bot and user.\n// Returns -1 if interactions_count is missing or parsing failed."
        ],
        [
            "// TimeElapsed returns approximate duration since conversation started.\n// Returns -1 seconds if time_elapsed is not found or parsing failed."
        ],
        [
            "// History returns an array of QApair of upto 100 interactions that have happened in Session."
        ],
        [
            "// Bool looks up the value of a bool flag, returns false if no bool flag exists"
        ],
        [
            "// String looks up the value of a string flag, returns \"\" if no string flag exists"
        ],
        [
            "// Fail marks the task as having failed but continues execution."
        ],
        [
            "// Failed checks if the task has failed"
        ],
        [
            "// Logf formats its arguments according to the format, analogous to Printf."
        ],
        [
            "// Error is equivalent to Log followed by Fail."
        ],
        [
            "// Errorf is equivalent to Logf followed by Fail."
        ],
        [
            "// Init initializes the Firebase client with a given root url and optional auth token.\n// The initialization can also pass a mock api for testing purposes."
        ],
        [
            "// Value returns the value of of the current Url."
        ],
        [
            "// Child returns a populated pointer for a given path.\n// If the path cannot be found, a null pointer is returned."
        ],
        [
            "// Push creates a new value under the current root url.\n// A populated pointer with that value is also returned."
        ],
        [
            "// Update performs a partial update with the given value at the specified path."
        ],
        [
            "// Remove deletes the data at the given path."
        ],
        [
            "// Rules returns the security rules for the database."
        ],
        [
            "// SetRules overwrites the existing security rules with the new rules given."
        ],
        [
            "// Call invokes the appropriate HTTP method on a given Firebase URL."
        ],
        [
            "// SetTraceInfo sets the trace info for the trace.\n// This is currently unused."
        ],
        [
            "// Finish declares that this trace is complete.\n// The trace should not be used after calling this method."
        ],
        [
            "// ServeMetrics serves Prometheus metrics endpoint on the\n// provided net.Listener\n// Use for long-running services.  For cli tools, use PushMetrics instead."
        ],
        [
            "// DumpMetrics returns the metrics prometheus would return when collected\n// as a string, for fun and testing"
        ],
        [
            "// NewEventLog returns an initialized EventLog with the given family and title."
        ],
        [
            "// Printf formats its arguments with fmt.Sprintf and adds the\n// result to the event log."
        ],
        [
            "// Errorf is like Printf, but it marks this event as an error."
        ],
        [
            "// SetLogger replaces the default logger with a new\n// one that writes to 'out', has 'prefix', and flags 'flag'"
        ],
        [
            "// Inside the handler, use traces to capture request specific events and timings\n// and the el member to log service specific events - like failures"
        ],
        [
            "// TitleFromContext is a convenience function that returns the Trace's title from a context\n// or an empty string if none exists"
        ],
        [
            "// NewContext returns a new context.Context and Trace with the given family and title.  The trace will\n// be stored in the context."
        ],
        [
            "// New creates a new client with your personal API key."
        ],
        [
            "// NewWithClient creates a new client with your personal API key and the given http Client"
        ],
        [
            "// Devices fetches a list of devices from PushBullet."
        ],
        [
            "// Device fetches an device with a given nickname from PushBullet."
        ],
        [
            "// PushNote sends a note to the specific device with the given title and body"
        ],
        [
            "// PushLink sends a link to the specific device with the given title and url"
        ],
        [
            "// PushSMS sends an SMS to the specific user from the device with the given title and url"
        ],
        [
            "// Me returns the user object for the pushbullet user"
        ],
        [
            "// Push pushes the data to a specific device registered with PushBullet.  The\n// 'data' parameter is marshaled to JSON and sent as the request body.  Most\n// users should call one of PusNote, PushLink, PushAddress, or PushList."
        ],
        [
            "// PushNote pushes a note with title and body to a specific PushBullet device."
        ],
        [
            "// PushNoteToChannel pushes a note with title and body to a specific PushBullet channel."
        ],
        [
            "// PushLink pushes a link with a title and url to a specific PushBullet device."
        ],
        [
            "// PushLinkToChannel pushes a link with a title and url to a specific PushBullet device."
        ],
        [
            "// PushSMS sends an SMS message with pushbullet"
        ],
        [
            "// Subscription fetches an subscription with a given channel tag from PushBullet."
        ],
        [
            "// PushNote sends a note to the specific Channel with the given title and body"
        ],
        [
            "// PushNote sends a link to the specific Channel with the given title, url and body"
        ],
        [
            "// NewCachedLoader creates a Loader that will cache the provided namespace on initialization\n// and return data from that cache on Get"
        ],
        [
            "// Import takes a json byte array and inserts the key value pairs into consul prefixed by the namespace"
        ],
        [
            "// Initialize loads the consul KV's from the namespace into cache for later retrieval"
        ],
        [
            "// Get fetches the raw config from cache"
        ],
        [
            "// MustGetString fetches the config and parses it into a string.  Panics on failure."
        ],
        [
            "// MustGetBool fetches the config and parses it into a bool.  Panics on failure."
        ],
        [
            "// MustGetInt fetches the config and parses it into an int.  Panics on failure."
        ],
        [
            "// MustGetDuration fetches the config and parses it into a duration.  Panics on failure."
        ],
        [
            "// NewRandomDNSBalancer will return a random balancer.DNS that looks up dns in consul."
        ],
        [
            "// writeServiceToCache locks specifically to alleviate load on consul some additional lock time\n// is preferable to extra consul calls"
        ],
        [
            "// Convert param string like \"param1=value1;param2=value2\" to mesos.Labels"
        ],
        [
            "// SetClockSeq sets the clock sequence to the lower 14 bits of seq.  Setting to\n// -1 causes a new sequence to be generated."
        ],
        [
            "// Trace formats a given message according to given params to log with level Trace."
        ],
        [
            "// Debug formats a given message according to given params to log with level Debug."
        ],
        [
            "// Info formats a given message according to given params to log with level Info."
        ],
        [
            "// Warn formats a given message according to given params to log with level Warn."
        ],
        [
            "// Error formats a given message according to given params to log with level Error."
        ],
        [
            "// Critical formats a given message according to given params to log with level Critical."
        ],
        [
            "//Returns paste link string and nil if everything is ok"
        ],
        [
            "//Returns raw paste text"
        ],
        [
            "//ExecAndWait will execute the command using the given executor and wait until completion"
        ],
        [
            "//ExecutorName sets the ExecutorName"
        ],
        [
            "//Exe sets the Exe"
        ],
        [
            "//Args sets the Args"
        ],
        [
            "//Dir sets the Dir"
        ],
        [
            "//Env sets the Env"
        ],
        [
            "//Writers sets the Writers"
        ],
        [
            "//StdoutWriter sets the StdoutWriter"
        ],
        [
            "//StdoutPrefix sets the StdoutPrefix"
        ],
        [
            "//StderrWriter sets the StderrWriter"
        ],
        [
            "//StderrPrefix sets the StderrPrefix"
        ],
        [
            "//Build will validate the set properties and return a ExecStreamer"
        ],
        [
            "// MakeWidget creates a generic Widget structure."
        ],
        [
            "// SetText sets the label caption.  This will not be displayed immediately.\n// SetText shall be called from queue context."
        ],
        [
            "// AddLabel is a convenience function to add a new label to a window.  It wraps\n// the AddWidget call.  AddLabel must be called from queue."
        ],
        [
            "// printf prints into the backend buffer.\n// This will not show immediately.\n// printf shall be called from queue context."
        ],
        [
            "// setCell sets the content of the window cell at the x and y coordinate.\n// setCell shall be called from queue context."
        ],
        [
            "// resize sets new x and y maxima.\n// resize shall be called from queue context."
        ],
        [
            "// render calls the user provided Render and than renders the widgets in the\n// window."
        ],
        [
            "// focusWidget focuses on the current widget.  If focus is -1 it'll focus on\n// the first available widget.\n// focusWidget shall be called from queue context."
        ],
        [
            "// focusPrevious focuses on the previous available widget.\n// focusPrevious shall be called from queue context."
        ],
        [
            "// keyHandler routes event to proper widget.  This is called from queue context\n// so be careful to not use blocking calls."
        ],
        [
            "// Color creates an ANSI compatible escape sequence that encodes colors and\n// attributes."
        ],
        [
            "// EscapedLen returns total length of all escape sequences in a given string."
        ],
        [
            "// Unescape returns the unescaped string."
        ],
        [
            "// init sets up all global variables and prepares ttk for use."
        ],
        [
            "// initKeyHandler starts the internal key handler.\n// Must be called with mutex held and as a go routine."
        ],
        [
            "// Init switches the terminal to raw mode and commences managed window mode.\n// This function shall be called prior to any ttk calls."
        ],
        [
            "// Deinit switches the terminal back to cooked mode and it terminates managed\n// window mode.  Init must be called again if a switch is required again.\n// Deinit shall be called on application exit; failing to do so may leave the\n// terminal corrupted.  If that does happen typing \"reset\" on the shell usually\n// fixes this problem."
        ],
        [
            "// NewWindow creates a new window type."
        ],
        [
            "// flush copies focused window backing store onto the physical screen.\n// flush shall be called from queue context."
        ],
        [
            "// focus on provided window. This will implicitly focus on a window widget\n// that can have focus.  Render and flush it onto the terminal.\n// focus shall be called from queue context."
        ],
        [
            "// resizeAndRender resizes a window and renders it."
        ],
        [
            "// Panic application but deinit first so that the terminal will not be corrupt."
        ],
        [
            "// Exit application but deinit first so that the terminal will not be corrupt."
        ],
        [
            "// AddList is a convenience function to add a new list to a window.  It wraps\n// the AddWidget call.  AddList must be called from queue."
        ],
        [
            "// Append adds a line of text to the list.  Append must be called from queue."
        ],
        [
            "// Focus implements the interface.  This is called from queue context\n// so be careful to not use blocking calls."
        ],
        [
            "// SetText sets the edit text.  if end is set to true the cursor and text will\n// be set to the end of the string.  This will not be displayed immediately.\n// SetText shall be called from queue context."
        ],
        [
            "// AddEdit is a convenience function to add a new edit to a window.  Capacity\n// and width determine the maxima of the returned value.  It wraps the\n// AddWidget call.  AddEdit must be called from queue."
        ],
        [
            "// Used for user & password based authentication"
        ],
        [
            "// Start starts the session.\n// At that point the authentication will be done."
        ],
        [
            "// FetchEntity fetchs the given Identifiable from the server."
        ],
        [
            "// SaveEntity saves the given Identifiable into the server."
        ],
        [
            "// DeleteEntity deletes the given Identifiable from the server."
        ],
        [
            "// FetchChildren fetches the children with of given parent identified by the given Identity."
        ],
        [
            "// CreateChild creates a new child Identifiable under the given parent Identifiable in the server."
        ],
        [
            "// AssignChildren assigns the list of given child Identifiables to the given Identifiable parent in the server."
        ],
        [
            "// NextEvent will return the next notification from the backend as it occurs and will\n// send it to the correct channel."
        ],
        [
            "// String returns the string representation of the identity."
        ],
        [
            "// NewPushCenter creates a new PushCenter."
        ],
        [
            "// RegisterHandlerForIdentity registers the given EventHandler for the given Entity Identity.\n// You can pass the bambou.AllIdentity as identity to register the handler\n// for all events. If you pass a handler for an Identity that is already registered\n// the previous handler will be silently overwriten."
        ],
        [
            "// UnregisterHandlerForIdentity unegisters the given EventHandler for the given Entity Identity."
        ],
        [
            "// HasHandlerForIdentity verifies if the given identity has a registered handler."
        ],
        [
            "// Start starts the Push Center."
        ],
        [
            "// Stop stops a running PushCenter."
        ],
        [
            "// Logger returns the defaut Bambou logger."
        ],
        [
            "// String returns the string representation of the FetchingInfo."
        ],
        [
            "// NewClient creates a new API client."
        ],
        [
            "// Post delivers a metrics snapshot to datadog"
        ],
        [
            "// MetricID takes a name and tags and generates a consistent\n// metric identifier"
        ],
        [
            "// SplitMetricID takes a metric ID ans splits it into\n// name and tags"
        ],
        [
            "// NewRateScale creates a new rate instruments with the given unit."
        ],
        [
            "// Snapshot returns the number of values per second since the last snapshot,\n// and reset the count to zero."
        ],
        [
            "// NewDeriveScale creates a new derive instruments with the given unit."
        ],
        [
            "// Update update rate value based on the stored previous value."
        ],
        [
            "// Snapshot returns a Distribution"
        ],
        [
            "// Update updates the current stored value."
        ],
        [
            "// Snapshot returns the current value."
        ],
        [
            "// New creates a new Registry without a background flush thread."
        ],
        [
            "// Subscribe attaches a reporter to the Registry."
        ],
        [
            "// Get returns an instrument from the Registry."
        ],
        [
            "// Register registers a new instrument."
        ],
        [
            "// Fetch returns an instrument from the Registry or creates a new one\n// using the provided factory."
        ],
        [
            "// Size returns the numbers of instruments in the registry."
        ],
        [
            "// Tags returns global registry tags"
        ],
        [
            "// SetTags allows to set tags"
        ],
        [
            "// AddTags allows to add tags"
        ],
        [
            "// Close flushes all pending data to reporters\n// and releases resources."
        ],
        [
            "// New creates a new reporter."
        ],
        [
            "// Metric appends a new metric to the reporter. The value v must be either an\n// int64 or float64, otherwise an error is returned"
        ],
        [
            "//FilterBefore returns rows created before a provided key. It accepts a filter and result shaping arguments"
        ],
        [
            "// Set sets the environment key to value."
        ],
        [
            "// SetStr sets environment variable from key=val string format."
        ],
        [
            "// Get retrieves the environment variable key"
        ],
        [
            "// String returns key=val format of the environment variables.\n// Each on a line."
        ],
        [
            "// Add adds a value to the set."
        ],
        [
            "// AddAll adds all values to the set distinctly."
        ],
        [
            "// Remove removes value from the set if it exists in the set."
        ],
        [
            "// RemoveAll removes all values from the set if they exist in the set."
        ],
        [
            "// Contains check if value exists in the set."
        ],
        [
            "// ContainsAll checks if all values exist in the set."
        ],
        [
            "// ContainsFunc iterates all the items in the set and passes\n// each to f. It returns true the first time a call to f returns\n// true and false if no call to f returns true."
        ],
        [
            "// Clear empties the set."
        ],
        [
            "// Iterator returns a new Iterator to iterate through values in the set.\n// Each call to this method creates a new Iterator. Therefore, the\n// returned Iterator should be assigned to a variable before usage.\n//\n// It is safe to create and use multiple Iterators in multiple goroutines."
        ],
        [
            "// Items returns a slice of all items in the set.\n// Modification to the returned slice does not affect the structure of\n// the set. However, any item in the set that is a pointer will be affected\n// if modified."
        ],
        [
            "// ItemsFunc returns slice of all items that when passed to f, f returns true.\n// Modification to the returned slice does not affect the structure of\n// the set. However, any item in the set that is a pointer will be affected\n// if modified."
        ],
        [
            "// If a holiday falls on a Saturday it is celebrated the preceding Friday;\n// if a holiday falls on a Sunday it is celebrated the following Monday."
        ],
        [
            "// GetHolidays returns the holidays for the given ISO 3166-2 countryCode and year"
        ],
        [
            "// GetInt returns int value for the given key"
        ],
        [
            "// GetFloat returns float value for the given key"
        ],
        [
            "// GetBool returns bool value for the given key"
        ],
        [
            "// Exists checks if key exists"
        ],
        [
            "// getValue gets the raw value for a given key"
        ],
        [
            "// Load reads all the properties and creates GConfig representation. It loads\n// config data based on passed in flags or environment variables. If none is\n// defined it uses default values."
        ],
        [
            "//Check if location of config or properties file is set in the env variable\n//if no path is specified it will use the current directory"
        ],
        [
            "// New creates a new Reader. The filename is a list of mimetypes and extensions.\n// If utf8 is true, \"; charset=utf-8\" will be added when setting http headers."
        ],
        [
            "// Read a mimetype text file. Return a hash map from ext to mimetype."
        ],
        [
            "// Get returns the mimetype, or an empty string if no mimetype or mimetype source is found"
        ],
        [
            "// SetHeader sets the Content-Type for a given ResponseWriter and filename extension"
        ],
        [
            "//GetFileSize - gets the filesize of a given path"
        ],
        [
            "// ListenAndServe starts the Neptulon server. This function blocks until server is closed."
        ],
        [
            "// SendRequest sends a JSON-RPC request through the connection denoted by the connection ID with an auto generated request ID.\n// resHandler is called when a response is returned."
        ],
        [
            "// SendRequestArr sends a JSON-RPC request through the connection denoted by the connection ID, with array params and auto generated request ID.\n// resHandler is called when a response is returned."
        ],
        [
            "// Close closes the network listener and the active connections."
        ],
        [
            "// wsHandler handles incoming websocket connections."
        ],
        [
            "//SafeCreateS3Bucket creates an s3 bucket for storing files to an s3-compatible blobstore"
        ],
        [
            "//NewWriter - get a new s3 writer"
        ],
        [
            "//NewReader - get a new s3 reader"
        ],
        [
            "//Delete - delete an s3 bucket"
        ],
        [
            "// CertAtuh is TLS client-certificate authentication.\n// If successful, certificate common name will stored with the key \"userid\" in session.\n// If unsuccessful, connection will be closed right away."
        ],
        [
            "// Params reads request parameters into given object.\n// Object should be passed by reference."
        ],
        [
            "// Next executes the next middleware in the middleware stack."
        ],
        [
            "// Result reads response result data into given object.\n// Object should be passed by reference."
        ],
        [
            "// ErrorData reads the error response data into given object.\n// Object should be passed by reference."
        ],
        [
            "// MiddlewareList list creates a single middlware callback from an array"
        ],
        [
            "//LogFactory - a log creator"
        ],
        [
            "// NewRouter creates a new router instance."
        ],
        [
            "// Request adds a new request route registry."
        ],
        [
            "// Middleware is the Neptulon middleware method."
        ],
        [
            "// NotFound wraps http.NotFound"
        ],
        [
            "//NewMysqlDump - will initialize a mysqldump for local execution"
        ],
        [
            "//NewRemoteMysqlDump - will initialize a mysqldmp for remote execution"
        ],
        [
            "//Import - will import to mysql from the given reader"
        ],
        [
            "//Dump - will dump a mysql to the given writer"
        ],
        [
            "//NewRemoteExecutor - This method creates executor based on ssh, it has concrete ssh reference"
        ],
        [
            "//Execute - Copy the output from a command to the specified io.Writer"
        ],
        [
            "// World is a handler"
        ],
        [
            "// Name is a handler"
        ],
        [
            "//NewPgDump - a pgdump object initialized for local fs"
        ],
        [
            "//NewPgRemoteDump - a pgdump initialized for remote fs"
        ],
        [
            "//Import - allows us to import a pgdmp file in the form of a reader"
        ],
        [
            "// New creates IrcText object and take your text as argument."
        ],
        [
            "// SetFg sets foreground color"
        ],
        [
            "// SetBg sets background color"
        ],
        [
            "// HandlerBuilder can be used to create a scaffold.Handler based on a Handler"
        ],
        [
            "// LoggerWithPrefix appends given prefix to log strings."
        ],
        [
            "// NewEncoder creates encoder"
        ],
        [
            "// Parser returns a parser based on the mime, if none can be matched the\n// default is returned"
        ],
        [
            "// Responder returns a responder based on the mime, if none can be matched the\n// default is returned"
        ],
        [
            "// NewErrorStatus creates an error that implements ErrorStatus based off a\n// string"
        ],
        [
            "// ConvertErrorStatus creates an error that implements ErrorStatus based off an\n// error"
        ],
        [
            "// Implement the io.Reader interface"
        ],
        [
            "// Gets the length of the entry block"
        ],
        [
            "//NewLager - constructor for a Logger object"
        ],
        [
            "// URLParts spliths a path into parts and caches it in the context"
        ],
        [
            "// URLPart returns a part of the url and caches it in the context"
        ],
        [
            "//StoreParam stores a variable in a context"
        ],
        [
            "// GetParam retrieves a param from a context"
        ],
        [
            "// Int32 returns param as int32"
        ],
        [
            "// UInt returns param as uint"
        ],
        [
            "// UInt32 returns param as uint32"
        ],
        [
            "// Float32 returns param as float32"
        ],
        [
            "//UploadFile - allows us to upload the contents of the given reader"
        ],
        [
            "//RemoveRemoteFile - get a file from a remote system and return a writecloser to it"
        ],
        [
            "//GetRemoteFile - get a file from a remote system and return a writecloser to it"
        ],
        [
            "// NewConn creates a new Conn object."
        ],
        [
            "// RemoteAddr returns the remote network address."
        ],
        [
            "// SendRequest sends a JSON-RPC request through the connection with an auto generated request ID.\n// resHandler is called when a response is returned."
        ],
        [
            "// SendRequestArr sends a JSON-RPC request through the connection, with array params and auto generated request ID.\n// resHandler is called when a response is returned."
        ],
        [
            "// Close closes the connection."
        ],
        [
            "// SendResponse sends a JSON-RPC response message through the connection."
        ],
        [
            "// Send sends the given message through the connection."
        ],
        [
            "// Receive receives message from the connection."
        ],
        [
            "// Reuse an established websocket.Conn."
        ],
        [
            "// startReceive starts receiving messages. This method blocks and does not return until the connection is closed."
        ],
        [
            "// Reads the file given by path and returns\n// a Pbo pointer and err != nil if no errors occurred"
        ],
        [
            "//NewReadWriteCloser - a fake readwritecloser constructor"
        ],
        [
            "//Read - satisfies reader interface"
        ],
        [
            "//Write - satisfies writer interface"
        ],
        [
            "// SafeRemoveSSH removes a file on a remote machine via an ssh client"
        ],
        [
            "// SafeCreateSSH creates a file, creating parent directories if needed on a remote machine via an ssh client"
        ],
        [
            "// SafeCreate creates a file, creating parent directories if needed"
        ],
        [
            "// HMAC is JSON Web Token authentication using HMAC.\n// If successful, token context will be store with the key \"userid\" in session.\n// If unsuccessful, connection will be closed right away."
        ],
        [
            "// Scaffold creates a router and passes it to a platorm"
        ],
        [
            "// Route returns the subrouter for a pettern"
        ],
        [
            "// Group calls the specified function with the subrouter for the given pattern"
        ],
        [
            "// Platform routes the platform object to the given pattern"
        ],
        [
            "// Handle all methods with a given pattern"
        ],
        [
            "// Options handles OPTIONS methods with a given pattern"
        ],
        [
            "// Use attaches middleware to a route"
        ],
        [
            "// NotFound specifys a not found handler for a route"
        ],
        [
            "// AddHandlerBuilder adds a builder to construct handlers"
        ],
        [
            "// ServeErrorPage Implements ErrorHandler.ServeErrorPage"
        ],
        [
            "// GetErrorHandler gets the error handler from the context or returns the default"
        ],
        [
            "// SetErrorHandler returns Middleware that can be used to set the error handler"
        ],
        [
            "// SetErrorHandlerFunc returns Middleware that can be used to set the error handler"
        ],
        [
            "// Echo sends incoming messages back as is."
        ],
        [
            "// UnmarshalBinary unmarshals a byte slice into a ConfigArg.\n//\n// If the byte slice does not contain enough data to form a valid ConfigArg,\n// or config string length is greater than the number of remaining bytes in b,\n// io.ErrUnexpectedEOF is returned.\n//\n// If config string length is greater than 1024, ErrorBadArgumentParameter is\n// returned."
        ],
        [
            "// ataIdentify performs an ATA identify request on rs using the argument\n// values in r."
        ],
        [
            "// ataRead performs an ATA 28-bit or 48-bit read request on rs using the\n// argument values in r."
        ],
        [
            "// ataWrite performs an ATA 28-bit or 48-bit write request on rs using the\n// argument values in r."
        ],
        [
            "// calculateLBA calculates a logical block address from the LBA array\n// and 48-bit flags from an ATAArg."
        ],
        [
            "// MarshalBinary allocates a byte slice containing the data from a\n// ReserveReleaseArg.\n//\n// If r.NMACs does not indicate the actual length of r.MACs, or one or more\n// hardware addresses are not exactly 6 bytes in length,\n// ErrorBadArgumentParameter is returned."
        ],
        [
            "// UnmarshalBinary unmarshals a byte slice into a ReserveReleaseArg.\n//\n// If the byte slice does not contain enough bytes to form a valid\n// ReserveReleaseArg, or a hardware address is malformed, io.ErrUnexpectedEOF\n// is returned."
        ],
        [
            "// MarshalBinary allocates a byte slice containing the data from an ATAArg.\n//\n// MarshalBinary never returns an error."
        ],
        [
            "// New fixture instance that will work with the database"
        ],
        [
            "// FromYAML allows a fixture to be created from yaml input"
        ],
        [
            "// FromJSON allows a fixture to be created from json input"
        ],
        [
            "// MarshalBinary allocates a byte slice containing the data from a Directive.\n//\n// If d.MAC is not 6 bytes in length, ErrorBadArgumentParameter is returned."
        ],
        [
            "// MarshalBinary allocates a byte slice containing the data from a MACMaskArg.\n//\n// If m.DirCount does not indicate the actual length of m.Directives, or\n// a Directive is malformed, ErrorBadArgumentParameter is returned."
        ],
        [
            "// NewSendToLogger creates a logger from a go log."
        ],
        [
            "//NewMulti creates a MultiLog"
        ],
        [
            "// outerLog is like outers outerLogs but the nem entry is\n// created from the first BackLog in the list."
        ],
        [
            "// PublishPort publish a container's port to the host."
        ],
        [
            "// Name assign a name to the container."
        ],
        [
            "// AddArgs appends arguments to Docker container."
        ],
        [
            "// NewCORSHandler creates a new CORSHandler with default values."
        ],
        [
            "// CreatePreflight creates HTTP routes that handles pre-flight requests."
        ],
        [
            "// ServeHTTP handle a pre-flight request."
        ],
        [
            "// Handle is a HTTP handler for CORS-able API."
        ],
        [
            "// NewRandomSourceListSecure returns system provided source of random data\n// besides of Raiqub Random source."
        ],
        [
            "// Handle sends a record message to syslog Writer."
        ],
        [
            "// Close closes an associated syslog Writer."
        ],
        [
            "// date formant YYYY-MM-DD\n// mininum date 0000-01-01\n// maximum date 9999-12-31"
        ],
        [
            "// Match processes the given string until it encounters a rune that doesn't\n// match."
        ],
        [
            "// Match processes the given string until it has its suffix in the next or\n// encounters a rune that doesn't match."
        ],
        [
            "// MatchRune simply calls mather.MatchRune"
        ],
        [
            "// Match against fixed length pattern."
        ],
        [
            "// Alloc opens a DB if not openned yet. It adds a reference if already openned."
        ],
        [
            "// Free decreases the reference count. It close the DB if the count reaches\n// zero."
        ],
        [
            "// Infof calls Logger.Infof method with provided arguments."
        ],
        [
            "// Warningf calls Logger.Warningf method with provided arguments."
        ],
        [
            "// Errorf calls Logger.Errorf method with provided arguments."
        ],
        [
            "// Fatalf calls Logger.Criticalf method with provided arguments."
        ],
        [
            "// ToPhone will format the provided string as a Phone Number.  Only supports\n// US numbers currently."
        ],
        [
            "// ToURL will format the provided string as a URL.  HTTP and HTTPS\n// are the only supported protocols at this time."
        ],
        [
            "// ToSSN will format the provided string as a SSN."
        ],
        [
            "// ToMorseCode will format the provided string in Morse Code."
        ],
        [
            "// ToPirateSpeak will format the provided string in Pirate Speak."
        ],
        [
            "// ToIRSA will format the provided string in IRSA.\n// International Radio-Telephony Spelling Alphabet"
        ],
        [
            "// newDefaultLogger creates new logger that writes log messages to\n// standard output in DEBUG level. This logger is automatically created and\n// this function needs to be called only if all loggers were removed\n// and default logger needs recreating."
        ],
        [
            "// Logf logs provided message with formatting with default logger."
        ],
        [
            "// Sections returns the list of sections in the file."
        ],
        [
            "// Options returns the list of options in a given section."
        ],
        [
            "// OptionMap returns the map option => value for a given section."
        ],
        [
            "// Comments returns the list of comments in a given section.\n// For the empty string, returns the file comments."
        ],
        [
            "// AddComments appends the comment to the list of comments for the section."
        ],
        [
            "// Parse reads the given io.Reader and returns a parsed Config object."
        ],
        [
            "// Write writes the sections and options to the io.Writer in INI format."
        ],
        [
            "// Get gets the value from the specified section and key name, or the empty\n// string if either the section or the key is missing."
        ],
        [
            "// Set sets a value for an option in a section. If the option exists, it's\n// value will be overwritten. If the option does not exist, it will be added.\n// If the section does not exist, it will be added and the option added to it."
        ],
        [
            "// Delete removes the option from the specified section."
        ],
        [
            "// try to convert value to target type, panic if fail"
        ],
        [
            "// Postpone value expiration time to current time added to its lifetime\n// duration."
        ],
        [
            "// Filter creates a new filter with rules r for l backend."
        ],
        [
            "// Op is an operation in some field and with some value."
        ],
        [
            "// ApplyRuleIf test if condition is true than apply rule. If condition is false\n// do nothing, return true."
        ],
        [
            "// ApplyRuleIfElse test if condition is true than apply rule. If condition is false\n// run else rule."
        ],
        [
            "// AuthHandler is a HTTP request middleware that enforces authentication."
        ],
        [
            "// HasBin check whether Docker binary is available."
        ],
        [
            "// Run executes especified command on Docker.\n//\n// Returns ExternalCmdError on error."
        ],
        [
            "// GetReader gets HTTP header value, as defined by current instance, from\n// Request Header and sets to current instance."
        ],
        [
            "// SetName sets header name of current instance."
        ],
        [
            "// SetValue sets header value of current instance."
        ],
        [
            "// SetWriter sets HTTP header, as defined by current instance, to ResponseWriter\n// Header."
        ],
        [
            "// encryptionKey returns the best candidate Key for encrypting a message to the\n// given Entity."
        ],
        [
            "// NewContentNegotiator creates a basic ContentNegotiator with out any attached\n// encoders"
        ],
        [
            "// NewJsonXmlContentNegotiator creates a basic ContentNegotiator and attaches\n// a JSON and an XML encoder to it."
        ],
        [
            "// Negotiate inspects the request for the accept header and\n// encodes the response appropriately."
        ],
        [
            "// AddEncoder registers a mimetype and its encoder to be used if a client\n// requests that mimetype"
        ],
        [
            "// getEncoder parses the Accept header an returns the appropriate encoder to use"
        ],
        [
            "// CanSign returns true if it's possible for a public key of the given type to\n// sign a message."
        ],
        [
            "// Various ways to sort the player standings using helper structs that\n// implement different comparison methods."
        ],
        [
            "// WaitFunc waits until specified function returns true."
        ],
        [
            "// FormatDialAddress returns an address as expected by net.Dial."
        ],
        [
            "// SetFromDocker parses port as provided by Docker and extract protocol and port\n// number."
        ],
        [
            "// Read fills specified byte array with random data.\n// Always return parameter array length and no errors."
        ],
        [
            "// readByte creates a single random byte."
        ],
        [
            "// RecoverHandlerJson is a HTTP request middleware that captures panic errors\n// and returns it as HTTP JSON response."
        ],
        [
            "// DefaultServiceConfig provides a default configuration to create a new random\n// service by best effort."
        ],
        [
            "// NewService creates a new configured random service."
        ],
        [
            "// RunLight creates a light instance of MongoDB image."
        ],
        [
            "// initConfig reads in config file and ENV variables if set."
        ],
        [
            "// HasExposedPorts returns whether current container has exposed ports."
        ],
        [
            "// Inspect returns container configuration."
        ],
        [
            "// Kill terminates current container process."
        ],
        [
            "// NetworkNodes returns the network addresses and exposed ports of current\n// container."
        ],
        [
            "// Remove erases current container from Docker."
        ],
        [
            "// WaitStartup blocks current thread until current container begins to listen\n// exposed port."
        ],
        [
            "// NewHandler returns new Handler instance."
        ],
        [
            "// Handle increments Prometheus counter metrics based on\n// record log level."
        ],
        [
            "// NewCounter creates new Counter instance.\n// Options value can be nil."
        ],
        [
            "// Metrics retuns all Prometheus metrics that\n// should be registered."
        ],
        [
            "// Retrieve retrieves and processes the specified asset sources, and returns\n// them using a http.FileSystem interface."
        ],
        [
            "// Compile retrieves and processes the specified asset sources, and\n// compiles them to the specified variable in the source file."
        ],
        [
            "// Read meta-info at specified place"
        ],
        [
            "// Write meta-info to specified place"
        ],
        [
            "// Push header and body to stack. Returns new value of stack depth"
        ],
        [
            "// Pop one segment from tail of stack. Returns nil,nil,nil if depth is 0"
        ],
        [
            "// Peak of stack - get one segment from stack but not remove"
        ],
        [
            "// PeakHeader get only header part from tail segment from stack without remove"
        ],
        [
            "// IterateBackward - iterate over hole stack segment-by-segment from end to begining"
        ],
        [
            "// IterateForward - iterate over hole stack segment-by-segment from begining to end. If all segments\n// iterated stack may be repaired"
        ],
        [
            "// Close backend stack file. If access is requried, file will automatically reopened"
        ],
        [
            "// OpenStack - open or create stack"
        ],
        [
            "// NewStack - create new stack based on file"
        ],
        [
            "// NewSessionCache creates a new instance of SessionCache and defines a lifetime\n// for sessions and a initial salt for random input."
        ],
        [
            "// getInvalidTokenError gets the default error when an invalid or expired token\n// is requested."
        ],
        [
            "// Get gets the value stored by specified token."
        ],
        [
            "// Add creates a new unique token and stores it into current SessionCache\n// instance.\n//\n// The token creation will take at least 200 microseconds, but could normally\n// take 2.5 milliseconds. The token generation function it is built with\n// security over performance."
        ],
        [
            "// Delete deletes specified token from current SessionCache instance."
        ],
        [
            "// Set store a value to specified token."
        ],
        [
            "// NewClient creates a Client."
        ],
        [
            "// connect opens a new connection to the server."
        ],
        [
            "// writeMessage writes an IRC message to the connection."
        ],
        [
            "// readMessage reads a line from the connection and parses it as an IRC message."
        ],
        [
            "// Stop shuts down the client and cleans up.\n//\n// You must not send any messages on the send channel after calling this\n// function."
        ],
        [
            "// GetChannels retrieves the IRC channels the client is on."
        ],
        [
            "// JsonWrite sets response content type to JSON, sets HTTP status and serializes\n// defined content to JSON format."
        ],
        [
            "// JsonRead tries to read client sent content using JSON deserialization and\n// writes it to defined object."
        ],
        [
            "// VerifyKeySignature returns nil iff sig is a valid signature, made by this\n// public key, of signed."
        ],
        [
            "// Create a user"
        ],
        [
            "// Next invoke next route with the given ResponseWriter and Request"
        ],
        [
            "// ServeHTTP implement http.Handler interface"
        ],
        [
            "// UseHandler appends a Handler to the route."
        ],
        [
            "// HandleMethod registers handler funcs with the given pattern and method."
        ],
        [
            "// Handle registers handler funcs with the given pattern."
        ],
        [
            "// Get registers handlers with the given pattern for GET and HEAD method"
        ],
        [
            "// Post registers handlers with the given pattern for POST method"
        ],
        [
            "// Put registers handlers with the given pattern for PUT method"
        ],
        [
            "// Patch registers handlers with the given pattern for PATCH method"
        ],
        [
            "// Delete registers handlers with the given pattern for DELETE method"
        ],
        [
            "// Options registers handlers with the given pattern for OPTIONS method"
        ],
        [
            "// NewSalter creates a new instance of Salter. It requires a list of sources of\n// random data and optionally an input to salt next token."
        ],
        [
            "// BToken generates an array of random bytes with length as specified by size\n// parameter."
        ],
        [
            "// Token generates a base-64 string of random bytes with length as specified by\n// size parameter."
        ],
        [
            "// getRandomBytes gets secure random bytes."
        ],
        [
            "//\n// NewsItem related functions and methods\n//\n// Create a NewsItem"
        ],
        [
            "// Write logs an Debug message to a logger."
        ],
        [
            "// Write logs an Info message to a logger."
        ],
        [
            "// Write logs an Warning message to a logger."
        ],
        [
            "// Write logs an Error message to a logger."
        ],
        [
            "// GetLogger returns logger instance based on provided name.\n// If logger does not exist, error will be returned."
        ],
        [
            "// RemoveLogger deletes logger from global logger registry."
        ],
        [
            "// WaitForAllUnprocessedRecords blocks execution until all unprocessed\n// log records are processed.\n// Since this library implements async logging, it is possible to have\n// unprocessed logs at the moment when application is terminating.\n// In that case, log messages can be lost. This mehtods blocks execution\n// until all log records are processed, to ensure that all log messages\n// are handled."
        ],
        [
            "// run starts async log records processing."
        ],
        [
            "// WaitForUnprocessedRecords block execution until all unprocessed log records\n// for this logger are processed.\n// In order to wait for processing in all loggers, logging.WaitForAllUnprocessedRecords\n// can be used."
        ],
        [
            "// SetBufferLength sets length of buffer for accepting log records."
        ],
        [
            "// AddHandler add new handler to current logger."
        ],
        [
            "// ClearHandlers removes all handlers from current logger."
        ],
        [
            "// SetLevel sets lower level that current logger will process."
        ],
        [
            "// log creates log record and submits it for processing."
        ],
        [
            "// Logf logs provided message with formatting."
        ],
        [
            "// Log logs provided message."
        ],
        [
            "// Emergencyf logs provided message with formatting in EMERGENCY level."
        ],
        [
            "// Alertf logs provided message with formatting in ALERT level."
        ],
        [
            "// Criticalf logs provided message with formatting in CRITICAL level."
        ],
        [
            "// Errorf logs provided message with formatting in ERROR level."
        ],
        [
            "// Warningf logs provided message with formatting in WARNING level."
        ],
        [
            "// Noticef logs provided message with formatting in NOTICE level."
        ],
        [
            "// Infof logs provided message with formatting in INFO level."
        ],
        [
            "// Debugf logs provided message with formatting in DEBUG level."
        ],
        [
            "// SetHandler reigsters the given handler that matches with any method."
        ],
        [
            "// SetMethodHandler reigsters the given handler for the method."
        ],
        [
            "// GetHandler returns a handler with given method."
        ],
        [
            "// getChildEntry returns a child Entry that matches the given pattern string."
        ],
        [
            "// MergePattern add entry patterns with given pattern strings. If a pattern\n// already exists on the entry, it adds remaining patterns to the existing entry."
        ],
        [
            "// AddEntry add new child entry. Child entries are sorted irrespective of order\n// they are added. Static patterns would be indexed ahead of match patterns."
        ],
        [
            "// addPatterns adds entry children with the pattern strings."
        ],
        [
            "// execPrefix simply see if the given urlStr has a leading pattern."
        ],
        [
            "// traverse tries matches to child entries."
        ],
        [
            "// getExecMatch returns ExecFunc with the given name and mather."
        ],
        [
            "// MergeRoutes returns a slice with all routes returned by Routable objects."
        ],
        [
            "// Debugln logs a line with a DEBUG prefix."
        ],
        [
            "// Debugf logs a formatted line with a DEBUG prefix."
        ],
        [
            "// Infof logs a formatted line with a VERBOSE prefix."
        ],
        [
            "// Infoln logs a line with an INFO prefix."
        ],
        [
            "// Infof logs a formatted line with an INFO prefix."
        ],
        [
            "// Okln logs a line with an OK prefix."
        ],
        [
            "// Okf logs a formatted line with an OK prefix."
        ],
        [
            "// Fatalln logs a line with a FATAL prefix and exits the process with exit\n// code 1."
        ],
        [
            "// Fatalf logs a formatted line with a FATAL prefix and exits the process with\n// exit code 1."
        ],
        [
            "// ShouldDebug returns true if the given facility has debugging enabled."
        ],
        [
            "// SetDebug enabled or disables debugging for the given facility name."
        ],
        [
            "// Facilities returns the currently known set of facilities, both those for\n// which debug is enabled and those for which it is disabled."
        ],
        [
            "// NewFacility returns a new logger bound to the named facility."
        ],
        [
            "// removeNonDigits removes any non digit characters from the string."
        ],
        [
            "// removeNonWordChars removes all non word characters."
        ],
        [
            "// urlEncodeSpaces will replace spaces with \"%20\"'s"
        ],
        [
            "// random select will return a random selection from an int slice"
        ],
        [
            "// NewStdFormatter crete a new formatter."
        ],
        [
            "// Get returns a HTTP handler which is a chain of middlewares and then the\n// specified handler."
        ],
        [
            "// parseMatcher returns matcher and name from the given pattern string."
        ],
        [
            "// isMatchPattern see if given string is match pattern."
        ],
        [
            "// routeSplitFunc is the SplitFunc to scan url pattern."
        ],
        [
            "// SplitPath splits the url pattern."
        ],
        [
            "// isNextSuffixPattern see next 2 patterns can be suffix matcher. If following\n// two cases are both true, it could possibly become a suffix matcher.\n//   1. the first pattern is a Matcher.\n//   2. the next pattern is a static pattern.\n// If the first matcher can't match the first rune of the second static pattern,\n// next pattern should be a suffix matcher combined the two patterns."
        ],
        [
            "// PeekNextPattern returns next entry pattern with offset size"
        ],
        [
            "//\n// Player related functions and methods\n//\n// Create a player"
        ],
        [
            "// Push causes the Reader to start reading from a new io.Reader. When an EOF\n// error is seen from the new io.Reader, it is popped and the Reader continues\n// to read from the next most recent io.Reader."
        ],
        [
            "//\n// Catering related functions and methods\n//\n// Create a Catering"
        ],
        [
            "//\n// Tournaments related functions and methods\n//"
        ],
        [
            "//\n// Tournament related functions and methods\n//\n// Helpers"
        ],
        [
            "// Create a Tournament"
        ],
        [
            "// IndexOf looks for specified string into current slice."
        ],
        [
            "// IndexOfIgnoreCase looks for specified string, disregarding letter casing,\n// into current slice."
        ],
        [
            "// NewCache creates a new instance of Cache and defines the default lifetime for\n// new cached items."
        ],
        [
            "// Count gets the number of cached values by current instance."
        ],
        [
            "// Flush deletes any cached value into current instance."
        ],
        [
            "// removeExpired remove all expired values from current Cache instance list.\n// Returns the locking status of current instance."
        ],
        [
            "// NewImage creates a new instance of Image."
        ],
        [
            "// Exists check whether current Docker image is available."
        ],
        [
            "// Pull retrieves current Docker image from Docker repository.\n//\n// Returns ExternalCmdError on error."
        ],
        [
            "// Run creates a new Docker container as defined by current image and container\n// template.\n//\n// Returns ExternalCmdError or UnexpectedOutputError on error."
        ],
        [
            "// Setup check if Docker binary is available and pull current image from Docker\n// repository in case it is not already available."
        ],
        [
            "//\n// Location related functions and methods\n//\n// Create a Location"
        ],
        [
            "// PortAt returns expose and publish port information at especified index."
        ],
        [
            "// SplitPort splits port number and protocol name from Ports string."
        ],
        [
            "// Priority returns a syslog.Priority representation of SyslogFacility."
        ],
        [
            "// OK checks if SyslogFacility is valid."
        ],
        [
            "// Format creates JSON struct from provided record and returns it."
        ],
        [
            "// Open creates and opens a database at the given path. If the file does\n// not exist then it will be created automatically. Passing in nil options\n// will cause Bolt to open the database with the default options."
        ],
        [
            "// Begin wraps bolt.DB.Begin."
        ],
        [
            "// View wraps bolt.DB.View."
        ],
        [
            "// CopyFile copies the entire database to file at the given path. A reader\n// transaction is maintained during the copy so it is safe to continue\n// using the database while a copy is in progress."
        ],
        [
            "// CreateBucketIfNotExists creates a new bucket if it doesn't already\n// exist. Returns an error if the bucket name is blank, or if the bucket\n// name is too long. The bucket instance is only valid for the lifetime of\n// the transaction."
        ],
        [
            "// Delete deletes a key."
        ],
        [
            "// ForEach iterates over all key values of a folder."
        ],
        [
            "// ForEach iterates over all key values of a folder, decode non-nil values using gob."
        ],
        [
            "// Put sets the value for a key in the transaction.\n// If the key exist then its previous value will be overwritten.\n// Supplied value must remain valid for the life of the transaction.\n// Returns an error if the bucket was created from a read-only transaction,\n// if the key is blank, if the key is too large, or if the value is too\n// large."
        ],
        [
            "// Value tries to get a value from the transaction. If the key does not\n// exist, the f is not called and nil is return."
        ],
        [
            "// Updates fetches the current value and updates to a new value. If a nil\n// value is returned by f, the item is deleted."
        ],
        [
            "// Bucket retrieves a nested bucket by name. Returns nil if the bucket\n// does not exist. The bucket instance is only valid for the lifetime of\n// the transaction. folders can be empty, in which case the b itself is\n// sent to f."
        ],
        [
            "// CreateBucketIfNotExists creates a new bucket if it doesn't already\n// exist and returns a reference to it. Returns an error if the bucket\n// name is blank, or if the bucket name is too long. The bucket instance\n// is only valid for the lifetime of the transaction."
        ],
        [
            "// Delete removes a key from the bucket. If the key does not exist then\n// nothing is done and a nil error is returned. Returns an error if the\n// bucket was created from a read-only transaction."
        ],
        [
            "// GobValue retrieves a value written by PutGob and decode it."
        ],
        [
            "// NextSequence returns an autoincrementing integer for the bucket."
        ],
        [
            "// Put sets the value for a key in the bucket. If the key exist then its\n// previous value will be overwritten. Supplied value must remain valid\n// for the life of the transaction. Returns an error if the bucket was\n// created from a read-only transaction, if the key is blank, if the key\n// is too large, or if the value is too large."
        ],
        [
            "// PutGob serialize v using gob and put it into the key."
        ],
        [
            "// Drop clears the database"
        ],
        [
            "// HandleError prints provided error to stderr."
        ],
        [
            "// Handle writes all provided log records to writer provided during creation."
        ],
        [
            "// Handle appends message to Messages array."
        ],
        [
            "// WaitPeerListening wait for specified peer be ready for new connections."
        ],
        [
            "// NewEvent construct new event."
        ],
        [
            "// Subscribe to events.\n// It will return true if successfully subscribed, means the handler haven't subscribed before."
        ],
        [
            "// Unsubscribe handler from the bus.\n// It will return false if the handler not subscribed."
        ],
        [
            "// Publish an event."
        ],
        [
            "// HandleOnly specific type of event."
        ],
        [
            "// ContextWithPublisher constructs new context with bus."
        ],
        [
            "// PublisherContext return the publisher."
        ],
        [
            "// PublishNamedEvent which name infered from eventBody interface name."
        ],
        [
            "// PublishEventContext publish event for given ctx."
        ],
        [
            "// PublishNamedEventContext publish named event for given ctx. The name infered from eventBody interface name."
        ],
        [
            "// String returns stirng representation of log level."
        ],
        [
            "// UnmarshalJSON implements json.Unamrshaler interface."
        ]
    ]
}