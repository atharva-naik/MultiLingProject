{"source": "python", "target": "java", "source_program": " def maximumChars ( str ) :\n    n = len ( str )\n    res = - 1\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if ( str [ i ] == str [ j ] ) :\n                res = max ( res , abs ( j - i - 1 ) )\n    return res", "target_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumChars ( str ) :\n    n = len ( str )\n    res = - 1\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if ( str [ i ] == str [ j ] ) :\n                res = max ( res , abs ( j - i - 1 ) )\n    return res", "target_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( str [ i ] == str [ j ] ) res = max ( res, abs ( j - i - 1 ) );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ;\n  return res ;\n}", "target_program": " def maximumChars ( str ) :\n    n = len ( str )\n    res = - 1\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if ( str [ i ] == str [ j ] ) :\n                res = max ( res , abs ( j - i - 1 ) )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ;\n  return res ;\n}", "target_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( str [ i ] == str [ j ] ) res = max ( res, abs ( j - i - 1 ) );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( str [ i ] == str [ j ] ) res = max ( res, abs ( j - i - 1 ) );\n  return res;\n}", "target_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( str . charAt ( i ) == str . charAt ( j ) ) res = Math . max ( res , Math . abs ( j - i - 1 ) ) ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( str [ i ] == str [ j ] ) res = max ( res, abs ( j - i - 1 ) );\n  return res;\n}", "target_program": " def maximumChars ( str ) :\n    n = len ( str )\n    res = - 1\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if ( str [ i ] == str [ j ] ) :\n                res = max ( res , abs ( j - i - 1 ) )\n    return res"}
{"source": "python", "target": "java", "source_program": " def mirrorImage ( a , b , c , x1 , y1 ) :\n    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )\n    x = temp * a + x1\n    y = temp * b + y1\n    return ( x , y )", "target_program": " static pair mirrorImage ( double a , double b , double c , double x1 , double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ;\n  double x = temp * a + x1 ;\n  double y = temp * b + y1 ;\n  return new pair ( x , y ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def mirrorImage ( a , b , c , x1 , y1 ) :\n    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )\n    x = temp * a + x1\n    y = temp * b + y1\n    return ( x , y )", "target_program": " pair < double, double > mirrorImage ( double a, double b, double c, double x1, double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b );\n  double x = temp * a + x1;\n  double y = temp * b + y1;\n  return make_pair ( x, y );\n}"}
{"source": "java", "target": "python", "source_program": " static pair mirrorImage ( double a , double b , double c , double x1 , double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ;\n  double x = temp * a + x1 ;\n  double y = temp * b + y1 ;\n  return new pair ( x , y ) ;\n}", "target_program": " def mirrorImage ( a , b , c , x1 , y1 ) :\n    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )\n    x = temp * a + x1\n    y = temp * b + y1\n    return ( x , y )"}
{"source": "java", "target": "cpp", "source_program": " static pair mirrorImage ( double a , double b , double c , double x1 , double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ;\n  double x = temp * a + x1 ;\n  double y = temp * b + y1 ;\n  return new pair ( x , y ) ;\n}", "target_program": " pair < double, double > mirrorImage ( double a, double b, double c, double x1, double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b );\n  double x = temp * a + x1;\n  double y = temp * b + y1;\n  return make_pair ( x, y );\n}"}
{"source": "cpp", "target": "java", "source_program": " pair < double, double > mirrorImage ( double a, double b, double c, double x1, double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b );\n  double x = temp * a + x1;\n  double y = temp * b + y1;\n  return make_pair ( x, y );\n}", "target_program": " static pair mirrorImage ( double a , double b , double c , double x1 , double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b ) ;\n  double x = temp * a + x1 ;\n  double y = temp * b + y1 ;\n  return new pair ( x , y ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " pair < double, double > mirrorImage ( double a, double b, double c, double x1, double y1 ) {\n  double temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b );\n  double x = temp * a + x1;\n  double y = temp * b + y1;\n  return make_pair ( x, y );\n}", "target_program": " def mirrorImage ( a , b , c , x1 , y1 ) :\n    temp = - 2 * ( a * x1 + b * y1 + c ) / ( a * a + b * b )\n    x = temp * a + x1\n    y = temp * b + y1\n    return ( x , y )"}
{"source": "python", "target": "java", "source_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                principal += mat [ i ] [ j ]\n            if ( ( i + j ) == ( n - 1 ) ) :\n                secondary += mat [ i ] [ j ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )", "target_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ] ;\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ] ;\n    }\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                principal += mat [ i ] [ j ]\n            if ( ( i + j ) == ( n - 1 ) ) :\n                secondary += mat [ i ] [ j ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )", "target_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ];\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ];\n    }\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ] ;\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ] ;\n    }\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}", "target_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                principal += mat [ i ] [ j ]\n            if ( ( i + j ) == ( n - 1 ) ) :\n                secondary += mat [ i ] [ j ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )"}
{"source": "java", "target": "cpp", "source_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ] ;\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ] ;\n    }\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}", "target_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ];\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ];\n    }\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ];\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ];\n    }\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}", "target_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ] ;\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ] ;\n    }\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) principal += mat [ i ] [ j ];\n      if ( ( i + j ) == ( n - 1 ) ) secondary += mat [ i ] [ j ];\n    }\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}", "target_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                principal += mat [ i ] [ j ]\n            if ( ( i + j ) == ( n - 1 ) ) :\n                secondary += mat [ i ] [ j ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )"}
{"source": "python", "target": "java", "source_program": " def find3Numbers ( A , arr_size , sum ) :\n    A.sort ( )\n    for i in range ( 0 , arr_size - 2 ) :\n        l = i + 1\n        r = arr_size - 1\n        while ( l < r ) :\n            if ( A [ i ] + A [ l ] + A [ r ] == sum ) :\n                print ( \"Triplet is\" , A [ i ] , ', ' , A [ l ] , ', ' , A [ r ] ) ;\n                return True\n            elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :\n                l += 1\n            else :\n                r -= 1\n    return False", "target_program": " boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  int l , r ;\n  quickSort ( A , 0 , arr_size - 1 ) ;\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    l = i + 1 ;\n    r = arr_size - 1 ;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        System . out . print ( \"Triplet is \" + A [ i ] + \", \" + A [ l ] + \", \" + A [ r ] ) ;\n        return true ;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++ ;\n      else r -- ;\n    }\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def find3Numbers ( A , arr_size , sum ) :\n    A.sort ( )\n    for i in range ( 0 , arr_size - 2 ) :\n        l = i + 1\n        r = arr_size - 1\n        while ( l < r ) :\n            if ( A [ i ] + A [ l ] + A [ r ] == sum ) :\n                print ( \"Triplet is\" , A [ i ] , ', ' , A [ l ] , ', ' , A [ r ] ) ;\n                return True\n            elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :\n                l += 1\n            else :\n                r -= 1\n    return False", "target_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  int l, r;\n  sort ( A, A + arr_size );\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    l = i + 1;\n    r = arr_size - 1;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ l ], A [ r ] );\n        return true;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++;\n      else r --;\n    }\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  int l , r ;\n  quickSort ( A , 0 , arr_size - 1 ) ;\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    l = i + 1 ;\n    r = arr_size - 1 ;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        System . out . print ( \"Triplet is \" + A [ i ] + \", \" + A [ l ] + \", \" + A [ r ] ) ;\n        return true ;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++ ;\n      else r -- ;\n    }\n  }\n  return false ;\n}", "target_program": " def find3Numbers ( A , arr_size , sum ) :\n    A.sort ( )\n    for i in range ( 0 , arr_size - 2 ) :\n        l = i + 1\n        r = arr_size - 1\n        while ( l < r ) :\n            if ( A [ i ] + A [ l ] + A [ r ] == sum ) :\n                print ( \"Triplet is\" , A [ i ] , ', ' , A [ l ] , ', ' , A [ r ] ) ;\n                return True\n            elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :\n                l += 1\n            else :\n                r -= 1\n    return False"}
{"source": "java", "target": "cpp", "source_program": " boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  int l , r ;\n  quickSort ( A , 0 , arr_size - 1 ) ;\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    l = i + 1 ;\n    r = arr_size - 1 ;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        System . out . print ( \"Triplet is \" + A [ i ] + \", \" + A [ l ] + \", \" + A [ r ] ) ;\n        return true ;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++ ;\n      else r -- ;\n    }\n  }\n  return false ;\n}", "target_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  int l, r;\n  sort ( A, A + arr_size );\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    l = i + 1;\n    r = arr_size - 1;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ l ], A [ r ] );\n        return true;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++;\n      else r --;\n    }\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  int l, r;\n  sort ( A, A + arr_size );\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    l = i + 1;\n    r = arr_size - 1;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ l ], A [ r ] );\n        return true;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++;\n      else r --;\n    }\n  }\n  return false;\n}", "target_program": " boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  int l , r ;\n  quickSort ( A , 0 , arr_size - 1 ) ;\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    l = i + 1 ;\n    r = arr_size - 1 ;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        System . out . print ( \"Triplet is \" + A [ i ] + \", \" + A [ l ] + \", \" + A [ r ] ) ;\n        return true ;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++ ;\n      else r -- ;\n    }\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  int l, r;\n  sort ( A, A + arr_size );\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    l = i + 1;\n    r = arr_size - 1;\n    while ( l < r ) {\n      if ( A [ i ] + A [ l ] + A [ r ] == sum ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ l ], A [ r ] );\n        return true;\n      }\n      else if ( A [ i ] + A [ l ] + A [ r ] < sum ) l ++;\n      else r --;\n    }\n  }\n  return false;\n}", "target_program": " def find3Numbers ( A , arr_size , sum ) :\n    A.sort ( )\n    for i in range ( 0 , arr_size - 2 ) :\n        l = i + 1\n        r = arr_size - 1\n        while ( l < r ) :\n            if ( A [ i ] + A [ l ] + A [ r ] == sum ) :\n                print ( \"Triplet is\" , A [ i ] , ', ' , A [ l ] , ', ' , A [ r ] ) ;\n                return True\n            elif ( A [ i ] + A [ l ] + A [ r ] < sum ) :\n                l += 1\n            else :\n                r -= 1\n    return False"}
{"source": "python", "target": "java", "source_program": " def isMagicSquare ( mat ) :\n    s = 0\n    for i in range ( 0 , N ) :\n        s = s + mat [ i ] [ i ]\n    s2 = 0\n    for i in range ( 0 , N ) :\n        s2 = s2 + mat [ i ] [ N - i - 1 ]\n    if ( s != s2 ) :\n        return False\n    for i in range ( 0 , N ) :\n        rowSum = 0 ;\n        for j in range ( 0 , N ) :\n            rowSum += mat [ i ] [ j ]\n        if ( rowSum != s ) :\n            return False\n    for i in range ( 0 , N ) :\n        colSum = 0\n        for j in range ( 0 , N ) :\n            colSum += mat [ j ] [ i ]\n        if ( s != colSum ) :\n            return False\n    return True", "target_program": " static boolean isMagicSquare ( int mat [ ] [ ] ) {\n  int sum = 0 , sum2 = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum = sum + mat [ i ] [ i ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;\n  if ( sum != sum2 ) return false ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int rowSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) rowSum += mat [ i ] [ j ] ;\n    if ( rowSum != sum ) return false ;\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int colSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) colSum += mat [ j ] [ i ] ;\n    if ( sum != colSum ) return false ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isMagicSquare ( mat ) :\n    s = 0\n    for i in range ( 0 , N ) :\n        s = s + mat [ i ] [ i ]\n    s2 = 0\n    for i in range ( 0 , N ) :\n        s2 = s2 + mat [ i ] [ N - i - 1 ]\n    if ( s != s2 ) :\n        return False\n    for i in range ( 0 , N ) :\n        rowSum = 0 ;\n        for j in range ( 0 , N ) :\n            rowSum += mat [ i ] [ j ]\n        if ( rowSum != s ) :\n            return False\n    for i in range ( 0 , N ) :\n        colSum = 0\n        for j in range ( 0 , N ) :\n            colSum += mat [ j ] [ i ]\n        if ( s != colSum ) :\n            return False\n    return True", "target_program": " bool isMagicSquare ( int mat [ ] [ N ] ) {\n  int sum = 0, sum2 = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum = sum + mat [ i ] [ i ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ];\n  if ( sum != sum2 ) return false;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int rowSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) rowSum += mat [ i ] [ j ];\n    if ( rowSum != sum ) return false;\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int colSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) colSum += mat [ j ] [ i ];\n    if ( sum != colSum ) return false;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isMagicSquare ( int mat [ ] [ ] ) {\n  int sum = 0 , sum2 = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum = sum + mat [ i ] [ i ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;\n  if ( sum != sum2 ) return false ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int rowSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) rowSum += mat [ i ] [ j ] ;\n    if ( rowSum != sum ) return false ;\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int colSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) colSum += mat [ j ] [ i ] ;\n    if ( sum != colSum ) return false ;\n  }\n  return true ;\n}", "target_program": " def isMagicSquare ( mat ) :\n    s = 0\n    for i in range ( 0 , N ) :\n        s = s + mat [ i ] [ i ]\n    s2 = 0\n    for i in range ( 0 , N ) :\n        s2 = s2 + mat [ i ] [ N - i - 1 ]\n    if ( s != s2 ) :\n        return False\n    for i in range ( 0 , N ) :\n        rowSum = 0 ;\n        for j in range ( 0 , N ) :\n            rowSum += mat [ i ] [ j ]\n        if ( rowSum != s ) :\n            return False\n    for i in range ( 0 , N ) :\n        colSum = 0\n        for j in range ( 0 , N ) :\n            colSum += mat [ j ] [ i ]\n        if ( s != colSum ) :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isMagicSquare ( int mat [ ] [ ] ) {\n  int sum = 0 , sum2 = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum = sum + mat [ i ] [ i ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;\n  if ( sum != sum2 ) return false ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int rowSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) rowSum += mat [ i ] [ j ] ;\n    if ( rowSum != sum ) return false ;\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int colSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) colSum += mat [ j ] [ i ] ;\n    if ( sum != colSum ) return false ;\n  }\n  return true ;\n}", "target_program": " bool isMagicSquare ( int mat [ ] [ N ] ) {\n  int sum = 0, sum2 = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum = sum + mat [ i ] [ i ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ];\n  if ( sum != sum2 ) return false;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int rowSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) rowSum += mat [ i ] [ j ];\n    if ( rowSum != sum ) return false;\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int colSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) colSum += mat [ j ] [ i ];\n    if ( sum != colSum ) return false;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isMagicSquare ( int mat [ ] [ N ] ) {\n  int sum = 0, sum2 = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum = sum + mat [ i ] [ i ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ];\n  if ( sum != sum2 ) return false;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int rowSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) rowSum += mat [ i ] [ j ];\n    if ( rowSum != sum ) return false;\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int colSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) colSum += mat [ j ] [ i ];\n    if ( sum != colSum ) return false;\n  }\n  return true;\n}", "target_program": " static boolean isMagicSquare ( int mat [ ] [ ] ) {\n  int sum = 0 , sum2 = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum = sum + mat [ i ] [ i ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ] ;\n  if ( sum != sum2 ) return false ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int rowSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) rowSum += mat [ i ] [ j ] ;\n    if ( rowSum != sum ) return false ;\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int colSum = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) colSum += mat [ j ] [ i ] ;\n    if ( sum != colSum ) return false ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isMagicSquare ( int mat [ ] [ N ] ) {\n  int sum = 0, sum2 = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum = sum + mat [ i ] [ i ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) sum2 = sum2 + mat [ i ] [ N - 1 - i ];\n  if ( sum != sum2 ) return false;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int rowSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) rowSum += mat [ i ] [ j ];\n    if ( rowSum != sum ) return false;\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    int colSum = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) colSum += mat [ j ] [ i ];\n    if ( sum != colSum ) return false;\n  }\n  return true;\n}", "target_program": " def isMagicSquare ( mat ) :\n    s = 0\n    for i in range ( 0 , N ) :\n        s = s + mat [ i ] [ i ]\n    s2 = 0\n    for i in range ( 0 , N ) :\n        s2 = s2 + mat [ i ] [ N - i - 1 ]\n    if ( s != s2 ) :\n        return False\n    for i in range ( 0 , N ) :\n        rowSum = 0 ;\n        for j in range ( 0 , N ) :\n            rowSum += mat [ i ] [ j ]\n        if ( rowSum != s ) :\n            return False\n    for i in range ( 0 , N ) :\n        colSum = 0\n        for j in range ( 0 , N ) :\n            colSum += mat [ j ] [ i ]\n        if ( s != colSum ) :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        d1 = d1 + arr [ i ] [ i ]\n        d2 = d2 + arr [ i ] [ n - i - 1 ]\n    return abs ( d1 - d2 )", "target_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    d1 += arr [ i ] [ i ] ;\n    d2 += arr [ i ] [ n - i - 1 ] ;\n  }\n  return Math . abs ( d1 - d2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        d1 = d1 + arr [ i ] [ i ]\n        d2 = d2 + arr [ i ] [ n - i - 1 ]\n    return abs ( d1 - d2 )", "target_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    d1 += arr [ i ] [ i ];\n    d2 += arr [ i ] [ n - i - 1 ];\n  }\n  return abs ( d1 - d2 );\n}"}
{"source": "java", "target": "python", "source_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    d1 += arr [ i ] [ i ] ;\n    d2 += arr [ i ] [ n - i - 1 ] ;\n  }\n  return Math . abs ( d1 - d2 ) ;\n}", "target_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        d1 = d1 + arr [ i ] [ i ]\n        d2 = d2 + arr [ i ] [ n - i - 1 ]\n    return abs ( d1 - d2 )"}
{"source": "java", "target": "cpp", "source_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    d1 += arr [ i ] [ i ] ;\n    d2 += arr [ i ] [ n - i - 1 ] ;\n  }\n  return Math . abs ( d1 - d2 ) ;\n}", "target_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    d1 += arr [ i ] [ i ];\n    d2 += arr [ i ] [ n - i - 1 ];\n  }\n  return abs ( d1 - d2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    d1 += arr [ i ] [ i ];\n    d2 += arr [ i ] [ n - i - 1 ];\n  }\n  return abs ( d1 - d2 );\n}", "target_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    d1 += arr [ i ] [ i ] ;\n    d2 += arr [ i ] [ n - i - 1 ] ;\n  }\n  return Math . abs ( d1 - d2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    d1 += arr [ i ] [ i ];\n    d2 += arr [ i ] [ n - i - 1 ];\n  }\n  return abs ( d1 - d2 );\n}", "target_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        d1 = d1 + arr [ i ] [ i ]\n        d2 = d2 + arr [ i ] [ n - i - 1 ]\n    return abs ( d1 - d2 )"}
{"source": "python", "target": "java", "source_program": " def subset ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res", "target_program": " public static int subset ( int ar [ ] , int n ) {\n  int res = 0 ;\n  Arrays . sort ( ar ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int count = 1 ;\n    for ( ;\n    i < n - 1 ;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;\n      else break ;\n    }\n    res = Math . max ( res , count ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def subset ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res", "target_program": " int subset ( int ar [ ], int n ) {\n  int res = 0;\n  sort ( ar, ar + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int count = 1;\n    for (;\n    i < n - 1;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++;\n      else break;\n    }\n    res = max ( res, count );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " public static int subset ( int ar [ ] , int n ) {\n  int res = 0 ;\n  Arrays . sort ( ar ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int count = 1 ;\n    for ( ;\n    i < n - 1 ;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;\n      else break ;\n    }\n    res = Math . max ( res , count ) ;\n  }\n  return res ;\n}", "target_program": " def subset ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " public static int subset ( int ar [ ] , int n ) {\n  int res = 0 ;\n  Arrays . sort ( ar ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int count = 1 ;\n    for ( ;\n    i < n - 1 ;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;\n      else break ;\n    }\n    res = Math . max ( res , count ) ;\n  }\n  return res ;\n}", "target_program": " int subset ( int ar [ ], int n ) {\n  int res = 0;\n  sort ( ar, ar + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int count = 1;\n    for (;\n    i < n - 1;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++;\n      else break;\n    }\n    res = max ( res, count );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int subset ( int ar [ ], int n ) {\n  int res = 0;\n  sort ( ar, ar + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int count = 1;\n    for (;\n    i < n - 1;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++;\n      else break;\n    }\n    res = max ( res, count );\n  }\n  return res;\n}", "target_program": " public static int subset ( int ar [ ] , int n ) {\n  int res = 0 ;\n  Arrays . sort ( ar ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int count = 1 ;\n    for ( ;\n    i < n - 1 ;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++ ;\n      else break ;\n    }\n    res = Math . max ( res , count ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int subset ( int ar [ ], int n ) {\n  int res = 0;\n  sort ( ar, ar + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int count = 1;\n    for (;\n    i < n - 1;\n    i ++ ) {\n      if ( ar [ i ] == ar [ i + 1 ] ) count ++;\n      else break;\n    }\n    res = max ( res, count );\n  }\n  return res;\n}", "target_program": " def subset ( ar , n ) :\n    res = 0\n    ar.sort ( )\n    for i in range ( 0 , n ) :\n        count = 1\n        for i in range ( n - 1 ) :\n            if ar [ i ] == ar [ i + 1 ] :\n                count += 1\n            else :\n                break\n        res = max ( res , count )\n    return res"}
{"source": "python", "target": "java", "source_program": " def decToBin ( n ) :\n    if ( n == 0 ) :\n        return \"0\" ;\n    bin = \"\" ;\n    while ( n > 0 ) :\n        if ( n & 1 == 0 ) :\n            bin = '0' + bin ;\n        else :\n            bin = '1' + bin ;\n        n = n >> 1 ;\n    return bin ;", "target_program": " static String decToBin ( int n ) {\n  if ( n == 0 ) return \"0\" ;\n  String bin = \"\" ;\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;\n    n >>= 1 ;\n  }\n  return bin ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def decToBin ( n ) :\n    if ( n == 0 ) :\n        return \"0\" ;\n    bin = \"\" ;\n    while ( n > 0 ) :\n        if ( n & 1 == 0 ) :\n            bin = '0' + bin ;\n        else :\n            bin = '1' + bin ;\n        n = n >> 1 ;\n    return bin ;", "target_program": " string decToBin ( int n ) {\n  if ( n == 0 ) return \"0\";\n  string bin = \"\";\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin;\n    n >>= 1;\n  }\n  return bin;\n}"}
{"source": "java", "target": "python", "source_program": " static String decToBin ( int n ) {\n  if ( n == 0 ) return \"0\" ;\n  String bin = \"\" ;\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;\n    n >>= 1 ;\n  }\n  return bin ;\n}", "target_program": " def decToBin ( n ) :\n    if ( n == 0 ) :\n        return \"0\" ;\n    bin = \"\" ;\n    while ( n > 0 ) :\n        if ( n & 1 == 0 ) :\n            bin = '0' + bin ;\n        else :\n            bin = '1' + bin ;\n        n = n >> 1 ;\n    return bin ;"}
{"source": "java", "target": "cpp", "source_program": " static String decToBin ( int n ) {\n  if ( n == 0 ) return \"0\" ;\n  String bin = \"\" ;\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;\n    n >>= 1 ;\n  }\n  return bin ;\n}", "target_program": " string decToBin ( int n ) {\n  if ( n == 0 ) return \"0\";\n  string bin = \"\";\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin;\n    n >>= 1;\n  }\n  return bin;\n}"}
{"source": "cpp", "target": "java", "source_program": " string decToBin ( int n ) {\n  if ( n == 0 ) return \"0\";\n  string bin = \"\";\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin;\n    n >>= 1;\n  }\n  return bin;\n}", "target_program": " static String decToBin ( int n ) {\n  if ( n == 0 ) return \"0\" ;\n  String bin = \"\" ;\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin ;\n    n >>= 1 ;\n  }\n  return bin ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string decToBin ( int n ) {\n  if ( n == 0 ) return \"0\";\n  string bin = \"\";\n  while ( n > 0 ) {\n    bin = ( ( n & 1 ) == 0 ? '0' : '1' ) + bin;\n    n >>= 1;\n  }\n  return bin;\n}", "target_program": " def decToBin ( n ) :\n    if ( n == 0 ) :\n        return \"0\" ;\n    bin = \"\" ;\n    while ( n > 0 ) :\n        if ( n & 1 == 0 ) :\n            bin = '0' + bin ;\n        else :\n            bin = '1' + bin ;\n        n = n >> 1 ;\n    return bin ;"}
{"source": "python", "target": "java", "source_program": " def Dragon_Curve_Sequence ( n ) :\n    s = \"1\"\n    for i in range ( 2 , n + 1 ) :\n        temp = \"1\"\n        prev = '1'\n        zero = '0'\n        one = '1'\n        for j in range ( len ( s ) ) :\n            temp += s [ j ]\n            if ( prev == '0' ) :\n                temp += one\n                prev = one\n            else :\n                temp += zero\n                prev = zero\n        s = temp\n    return s", "target_program": " static String Dragon_Curve_Sequence ( int n ) {\n  String s = \"1\" ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    String temp = \"1\" ;\n    char prev = '1' , zero = '0' , one = '1' ;\n    for ( int j = 0 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      temp += s . charAt ( j ) ;\n      if ( prev == '0' ) {\n        temp += one ;\n        prev = one ;\n      }\n      else {\n        temp += zero ;\n        prev = zero ;\n      }\n    }\n    s = temp ;\n  }\n  return s ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def Dragon_Curve_Sequence ( n ) :\n    s = \"1\"\n    for i in range ( 2 , n + 1 ) :\n        temp = \"1\"\n        prev = '1'\n        zero = '0'\n        one = '1'\n        for j in range ( len ( s ) ) :\n            temp += s [ j ]\n            if ( prev == '0' ) :\n                temp += one\n                prev = one\n            else :\n                temp += zero\n                prev = zero\n        s = temp\n    return s", "target_program": " string Dragon_Curve_Sequence ( int n ) {\n  string s = \"1\";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    string temp = \"1\";\n    char prev = '1', zero = '0', one = '1';\n    for ( int j = 0;\n    j < s . length ( );\n    j ++ ) {\n      temp += s [ j ];\n      if ( prev == '0' ) {\n        temp += one;\n        prev = one;\n      }\n      else {\n        temp += zero;\n        prev = zero;\n      }\n    }\n    s = temp;\n  }\n  return s;\n}"}
{"source": "java", "target": "python", "source_program": " static String Dragon_Curve_Sequence ( int n ) {\n  String s = \"1\" ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    String temp = \"1\" ;\n    char prev = '1' , zero = '0' , one = '1' ;\n    for ( int j = 0 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      temp += s . charAt ( j ) ;\n      if ( prev == '0' ) {\n        temp += one ;\n        prev = one ;\n      }\n      else {\n        temp += zero ;\n        prev = zero ;\n      }\n    }\n    s = temp ;\n  }\n  return s ;\n}", "target_program": " def Dragon_Curve_Sequence ( n ) :\n    s = \"1\"\n    for i in range ( 2 , n + 1 ) :\n        temp = \"1\"\n        prev = '1'\n        zero = '0'\n        one = '1'\n        for j in range ( len ( s ) ) :\n            temp += s [ j ]\n            if ( prev == '0' ) :\n                temp += one\n                prev = one\n            else :\n                temp += zero\n                prev = zero\n        s = temp\n    return s"}
{"source": "java", "target": "cpp", "source_program": " static String Dragon_Curve_Sequence ( int n ) {\n  String s = \"1\" ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    String temp = \"1\" ;\n    char prev = '1' , zero = '0' , one = '1' ;\n    for ( int j = 0 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      temp += s . charAt ( j ) ;\n      if ( prev == '0' ) {\n        temp += one ;\n        prev = one ;\n      }\n      else {\n        temp += zero ;\n        prev = zero ;\n      }\n    }\n    s = temp ;\n  }\n  return s ;\n}", "target_program": " string Dragon_Curve_Sequence ( int n ) {\n  string s = \"1\";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    string temp = \"1\";\n    char prev = '1', zero = '0', one = '1';\n    for ( int j = 0;\n    j < s . length ( );\n    j ++ ) {\n      temp += s [ j ];\n      if ( prev == '0' ) {\n        temp += one;\n        prev = one;\n      }\n      else {\n        temp += zero;\n        prev = zero;\n      }\n    }\n    s = temp;\n  }\n  return s;\n}"}
{"source": "cpp", "target": "java", "source_program": " string Dragon_Curve_Sequence ( int n ) {\n  string s = \"1\";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    string temp = \"1\";\n    char prev = '1', zero = '0', one = '1';\n    for ( int j = 0;\n    j < s . length ( );\n    j ++ ) {\n      temp += s [ j ];\n      if ( prev == '0' ) {\n        temp += one;\n        prev = one;\n      }\n      else {\n        temp += zero;\n        prev = zero;\n      }\n    }\n    s = temp;\n  }\n  return s;\n}", "target_program": " static String Dragon_Curve_Sequence ( int n ) {\n  String s = \"1\" ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    String temp = \"1\" ;\n    char prev = '1' , zero = '0' , one = '1' ;\n    for ( int j = 0 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      temp += s . charAt ( j ) ;\n      if ( prev == '0' ) {\n        temp += one ;\n        prev = one ;\n      }\n      else {\n        temp += zero ;\n        prev = zero ;\n      }\n    }\n    s = temp ;\n  }\n  return s ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string Dragon_Curve_Sequence ( int n ) {\n  string s = \"1\";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    string temp = \"1\";\n    char prev = '1', zero = '0', one = '1';\n    for ( int j = 0;\n    j < s . length ( );\n    j ++ ) {\n      temp += s [ j ];\n      if ( prev == '0' ) {\n        temp += one;\n        prev = one;\n      }\n      else {\n        temp += zero;\n        prev = zero;\n      }\n    }\n    s = temp;\n  }\n  return s;\n}", "target_program": " def Dragon_Curve_Sequence ( n ) :\n    s = \"1\"\n    for i in range ( 2 , n + 1 ) :\n        temp = \"1\"\n        prev = '1'\n        zero = '0'\n        one = '1'\n        for j in range ( len ( s ) ) :\n            temp += s [ j ]\n            if ( prev == '0' ) :\n                temp += one\n                prev = one\n            else :\n                temp += zero\n                prev = zero\n        s = temp\n    return s"}
{"source": "python", "target": "java", "source_program": " def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string", "target_program": " static void reverse ( char str [ ] ) {\n  int n = str . length , i ;\n  for ( i = 0 ;\n  i < n / 2 ;\n  i ++ ) {\n    swap ( str , i , n - i - 1 ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string", "target_program": " void reverse ( char str [ ] ) {\n  int n = strlen ( str ), i;\n  for ( i = 0;\n  i < n / 2;\n  i ++ ) swap ( & str [ i ], & str [ n - i - 1 ] );\n}"}
{"source": "java", "target": "python", "source_program": " static void reverse ( char str [ ] ) {\n  int n = str . length , i ;\n  for ( i = 0 ;\n  i < n / 2 ;\n  i ++ ) {\n    swap ( str , i , n - i - 1 ) ;\n  }\n}", "target_program": " def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string"}
{"source": "java", "target": "cpp", "source_program": " static void reverse ( char str [ ] ) {\n  int n = str . length , i ;\n  for ( i = 0 ;\n  i < n / 2 ;\n  i ++ ) {\n    swap ( str , i , n - i - 1 ) ;\n  }\n}", "target_program": " void reverse ( char str [ ] ) {\n  int n = strlen ( str ), i;\n  for ( i = 0;\n  i < n / 2;\n  i ++ ) swap ( & str [ i ], & str [ n - i - 1 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void reverse ( char str [ ] ) {\n  int n = strlen ( str ), i;\n  for ( i = 0;\n  i < n / 2;\n  i ++ ) swap ( & str [ i ], & str [ n - i - 1 ] );\n}", "target_program": " static void reverse ( char str [ ] ) {\n  int n = str . length , i ;\n  for ( i = 0 ;\n  i < n / 2 ;\n  i ++ ) {\n    swap ( str , i , n - i - 1 ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void reverse ( char str [ ] ) {\n  int n = strlen ( str ), i;\n  for ( i = 0;\n  i < n / 2;\n  i ++ ) swap ( & str [ i ], & str [ n - i - 1 ] );\n}", "target_program": " def reverse ( string ) :\n    string = string [ : : - 1 ]\n    return string"}
{"source": "python", "target": "java", "source_program": " def bitonicGenerator ( arr , n ) :\n    i = 1\n    j = n - 1\n    if ( j % 2 != 0 ) :\n        j = j - 1\n    while ( i < j ) :\n        arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]\n        i = i + 2\n        j = j - 2\n    arr_f = [ ]\n    arr_s = [ ]\n    for i in range ( int ( ( n + 1 ) / 2 ) ) :\n        arr_f.append ( arr [ i ] )\n    i = int ( ( n + 1 ) / 2 )\n    while ( i < n ) :\n        arr_s.append ( arr [ i ] )\n        i = i + 1\n    arr_f.sort ( )\n    arr_s.sort ( reverse = True )\n    for i in arr_s :\n        arr_f.append ( i )\n    return arr_f", "target_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  int i = 1 ;\n  int j = n - 1 ;\n  if ( j % 2 != 0 ) j -- ;\n  while ( i < j ) {\n    arr = swap ( arr , i , j ) ;\n    i += 2 ;\n    j -= 2 ;\n  }\n  Arrays . sort ( arr , 0 , ( n + 1 ) / 2 ) ;\n  Arrays . sort ( arr , ( n + 1 ) / 2 , n ) ;\n  int low = ( n + 1 ) / 2 , high = n - 1 ;\n  while ( low < high ) {\n    Integer temp = arr [ low ] ;\n    arr [ low ] = arr [ high ] ;\n    arr [ high ] = temp ;\n    low ++ ;\n    high -- ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def bitonicGenerator ( arr , n ) :\n    i = 1\n    j = n - 1\n    if ( j % 2 != 0 ) :\n        j = j - 1\n    while ( i < j ) :\n        arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]\n        i = i + 2\n        j = j - 2\n    arr_f = [ ]\n    arr_s = [ ]\n    for i in range ( int ( ( n + 1 ) / 2 ) ) :\n        arr_f.append ( arr [ i ] )\n    i = int ( ( n + 1 ) / 2 )\n    while ( i < n ) :\n        arr_s.append ( arr [ i ] )\n        i = i + 1\n    arr_f.sort ( )\n    arr_s.sort ( reverse = True )\n    for i in arr_s :\n        arr_f.append ( i )\n    return arr_f", "target_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  int i = 1;\n  int j = n - 1;\n  if ( j % 2 != 0 ) j --;\n  while ( i < j ) {\n    swap ( arr [ i ], arr [ j ] );\n    i += 2;\n    j -= 2;\n  }\n  sort ( arr, arr + ( n + 1 ) / 2 );\n  sort ( arr + ( n + 1 ) / 2, arr + n, greater < int > ( ) );\n}"}
{"source": "java", "target": "python", "source_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  int i = 1 ;\n  int j = n - 1 ;\n  if ( j % 2 != 0 ) j -- ;\n  while ( i < j ) {\n    arr = swap ( arr , i , j ) ;\n    i += 2 ;\n    j -= 2 ;\n  }\n  Arrays . sort ( arr , 0 , ( n + 1 ) / 2 ) ;\n  Arrays . sort ( arr , ( n + 1 ) / 2 , n ) ;\n  int low = ( n + 1 ) / 2 , high = n - 1 ;\n  while ( low < high ) {\n    Integer temp = arr [ low ] ;\n    arr [ low ] = arr [ high ] ;\n    arr [ high ] = temp ;\n    low ++ ;\n    high -- ;\n  }\n}", "target_program": " def bitonicGenerator ( arr , n ) :\n    i = 1\n    j = n - 1\n    if ( j % 2 != 0 ) :\n        j = j - 1\n    while ( i < j ) :\n        arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]\n        i = i + 2\n        j = j - 2\n    arr_f = [ ]\n    arr_s = [ ]\n    for i in range ( int ( ( n + 1 ) / 2 ) ) :\n        arr_f.append ( arr [ i ] )\n    i = int ( ( n + 1 ) / 2 )\n    while ( i < n ) :\n        arr_s.append ( arr [ i ] )\n        i = i + 1\n    arr_f.sort ( )\n    arr_s.sort ( reverse = True )\n    for i in arr_s :\n        arr_f.append ( i )\n    return arr_f"}
{"source": "java", "target": "cpp", "source_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  int i = 1 ;\n  int j = n - 1 ;\n  if ( j % 2 != 0 ) j -- ;\n  while ( i < j ) {\n    arr = swap ( arr , i , j ) ;\n    i += 2 ;\n    j -= 2 ;\n  }\n  Arrays . sort ( arr , 0 , ( n + 1 ) / 2 ) ;\n  Arrays . sort ( arr , ( n + 1 ) / 2 , n ) ;\n  int low = ( n + 1 ) / 2 , high = n - 1 ;\n  while ( low < high ) {\n    Integer temp = arr [ low ] ;\n    arr [ low ] = arr [ high ] ;\n    arr [ high ] = temp ;\n    low ++ ;\n    high -- ;\n  }\n}", "target_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  int i = 1;\n  int j = n - 1;\n  if ( j % 2 != 0 ) j --;\n  while ( i < j ) {\n    swap ( arr [ i ], arr [ j ] );\n    i += 2;\n    j -= 2;\n  }\n  sort ( arr, arr + ( n + 1 ) / 2 );\n  sort ( arr + ( n + 1 ) / 2, arr + n, greater < int > ( ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  int i = 1;\n  int j = n - 1;\n  if ( j % 2 != 0 ) j --;\n  while ( i < j ) {\n    swap ( arr [ i ], arr [ j ] );\n    i += 2;\n    j -= 2;\n  }\n  sort ( arr, arr + ( n + 1 ) / 2 );\n  sort ( arr + ( n + 1 ) / 2, arr + n, greater < int > ( ) );\n}", "target_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  int i = 1 ;\n  int j = n - 1 ;\n  if ( j % 2 != 0 ) j -- ;\n  while ( i < j ) {\n    arr = swap ( arr , i , j ) ;\n    i += 2 ;\n    j -= 2 ;\n  }\n  Arrays . sort ( arr , 0 , ( n + 1 ) / 2 ) ;\n  Arrays . sort ( arr , ( n + 1 ) / 2 , n ) ;\n  int low = ( n + 1 ) / 2 , high = n - 1 ;\n  while ( low < high ) {\n    Integer temp = arr [ low ] ;\n    arr [ low ] = arr [ high ] ;\n    arr [ high ] = temp ;\n    low ++ ;\n    high -- ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  int i = 1;\n  int j = n - 1;\n  if ( j % 2 != 0 ) j --;\n  while ( i < j ) {\n    swap ( arr [ i ], arr [ j ] );\n    i += 2;\n    j -= 2;\n  }\n  sort ( arr, arr + ( n + 1 ) / 2 );\n  sort ( arr + ( n + 1 ) / 2, arr + n, greater < int > ( ) );\n}", "target_program": " def bitonicGenerator ( arr , n ) :\n    i = 1\n    j = n - 1\n    if ( j % 2 != 0 ) :\n        j = j - 1\n    while ( i < j ) :\n        arr [ j ] , arr [ i ] = arr [ i ] , arr [ j ]\n        i = i + 2\n        j = j - 2\n    arr_f = [ ]\n    arr_s = [ ]\n    for i in range ( int ( ( n + 1 ) / 2 ) ) :\n        arr_f.append ( arr [ i ] )\n    i = int ( ( n + 1 ) / 2 )\n    while ( i < n ) :\n        arr_s.append ( arr [ i ] )\n        i = i + 1\n    arr_f.sort ( )\n    arr_s.sort ( reverse = True )\n    for i in arr_s :\n        arr_f.append ( i )\n    return arr_f"}
{"source": "python", "target": "java", "source_program": " def modularEquation ( a , b ) :\n    if ( a < b ) :\n        print ( \"No solution possible \" )\n        return\n    if ( a == b ) :\n        print ( \"Infinite Solution possible \" )\n        return\n    count = 0\n    n = a - b\n    y = ( int ) ( math.sqrt ( a - b ) )\n    for i in range ( 1 , y + 1 ) :\n        if ( n % i == 0 ) :\n            if ( n / i > b ) :\n                count = count + 1\n            if ( i > b ) :\n                count = count + 1\n    if ( y * y == n and y > b ) :\n        count = count - 1\n    print ( count )", "target_program": " static void modularEquation ( int a , int b ) {\n  if ( a < b ) {\n    System . out . println ( \"No solution possible \" ) ;\n    return ;\n  }\n  if ( a == b ) {\n    System . out . println ( \"Infinite Solution possible \" ) ;\n    return ;\n  }\n  int count = 0 ;\n  int n = a - b ;\n  int y = ( int ) Math . sqrt ( a - b ) ;\n  for ( int i = 1 ;\n  i <= y ;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++ ;\n      if ( i > b ) count ++ ;\n    }\n  }\n  if ( y * y == n && y > b ) count -- ;\n  System . out . println ( count ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def modularEquation ( a , b ) :\n    if ( a < b ) :\n        print ( \"No solution possible \" )\n        return\n    if ( a == b ) :\n        print ( \"Infinite Solution possible \" )\n        return\n    count = 0\n    n = a - b\n    y = ( int ) ( math.sqrt ( a - b ) )\n    for i in range ( 1 , y + 1 ) :\n        if ( n % i == 0 ) :\n            if ( n / i > b ) :\n                count = count + 1\n            if ( i > b ) :\n                count = count + 1\n    if ( y * y == n and y > b ) :\n        count = count - 1\n    print ( count )", "target_program": " void modularEquation ( int a, int b ) {\n  if ( a < b ) {\n    cout << \"No solution possible \" << endl;\n    return;\n  }\n  if ( a == b ) {\n    cout << \"Infinite Solution possible \" << endl;\n    return;\n  }\n  int count = 0;\n  int n = a - b;\n  int y = sqrt ( a - b );\n  for ( int i = 1;\n  i <= y;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++;\n      if ( i > b ) count ++;\n    }\n  }\n  if ( y * y == n && y > b ) count --;\n  cout << count << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void modularEquation ( int a , int b ) {\n  if ( a < b ) {\n    System . out . println ( \"No solution possible \" ) ;\n    return ;\n  }\n  if ( a == b ) {\n    System . out . println ( \"Infinite Solution possible \" ) ;\n    return ;\n  }\n  int count = 0 ;\n  int n = a - b ;\n  int y = ( int ) Math . sqrt ( a - b ) ;\n  for ( int i = 1 ;\n  i <= y ;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++ ;\n      if ( i > b ) count ++ ;\n    }\n  }\n  if ( y * y == n && y > b ) count -- ;\n  System . out . println ( count ) ;\n}", "target_program": " def modularEquation ( a , b ) :\n    if ( a < b ) :\n        print ( \"No solution possible \" )\n        return\n    if ( a == b ) :\n        print ( \"Infinite Solution possible \" )\n        return\n    count = 0\n    n = a - b\n    y = ( int ) ( math.sqrt ( a - b ) )\n    for i in range ( 1 , y + 1 ) :\n        if ( n % i == 0 ) :\n            if ( n / i > b ) :\n                count = count + 1\n            if ( i > b ) :\n                count = count + 1\n    if ( y * y == n and y > b ) :\n        count = count - 1\n    print ( count )"}
{"source": "java", "target": "cpp", "source_program": " static void modularEquation ( int a , int b ) {\n  if ( a < b ) {\n    System . out . println ( \"No solution possible \" ) ;\n    return ;\n  }\n  if ( a == b ) {\n    System . out . println ( \"Infinite Solution possible \" ) ;\n    return ;\n  }\n  int count = 0 ;\n  int n = a - b ;\n  int y = ( int ) Math . sqrt ( a - b ) ;\n  for ( int i = 1 ;\n  i <= y ;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++ ;\n      if ( i > b ) count ++ ;\n    }\n  }\n  if ( y * y == n && y > b ) count -- ;\n  System . out . println ( count ) ;\n}", "target_program": " void modularEquation ( int a, int b ) {\n  if ( a < b ) {\n    cout << \"No solution possible \" << endl;\n    return;\n  }\n  if ( a == b ) {\n    cout << \"Infinite Solution possible \" << endl;\n    return;\n  }\n  int count = 0;\n  int n = a - b;\n  int y = sqrt ( a - b );\n  for ( int i = 1;\n  i <= y;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++;\n      if ( i > b ) count ++;\n    }\n  }\n  if ( y * y == n && y > b ) count --;\n  cout << count << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void modularEquation ( int a, int b ) {\n  if ( a < b ) {\n    cout << \"No solution possible \" << endl;\n    return;\n  }\n  if ( a == b ) {\n    cout << \"Infinite Solution possible \" << endl;\n    return;\n  }\n  int count = 0;\n  int n = a - b;\n  int y = sqrt ( a - b );\n  for ( int i = 1;\n  i <= y;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++;\n      if ( i > b ) count ++;\n    }\n  }\n  if ( y * y == n && y > b ) count --;\n  cout << count << endl;\n}", "target_program": " static void modularEquation ( int a , int b ) {\n  if ( a < b ) {\n    System . out . println ( \"No solution possible \" ) ;\n    return ;\n  }\n  if ( a == b ) {\n    System . out . println ( \"Infinite Solution possible \" ) ;\n    return ;\n  }\n  int count = 0 ;\n  int n = a - b ;\n  int y = ( int ) Math . sqrt ( a - b ) ;\n  for ( int i = 1 ;\n  i <= y ;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++ ;\n      if ( i > b ) count ++ ;\n    }\n  }\n  if ( y * y == n && y > b ) count -- ;\n  System . out . println ( count ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void modularEquation ( int a, int b ) {\n  if ( a < b ) {\n    cout << \"No solution possible \" << endl;\n    return;\n  }\n  if ( a == b ) {\n    cout << \"Infinite Solution possible \" << endl;\n    return;\n  }\n  int count = 0;\n  int n = a - b;\n  int y = sqrt ( a - b );\n  for ( int i = 1;\n  i <= y;\n  ++ i ) {\n    if ( n % i == 0 ) {\n      if ( n / i > b ) count ++;\n      if ( i > b ) count ++;\n    }\n  }\n  if ( y * y == n && y > b ) count --;\n  cout << count << endl;\n}", "target_program": " def modularEquation ( a , b ) :\n    if ( a < b ) :\n        print ( \"No solution possible \" )\n        return\n    if ( a == b ) :\n        print ( \"Infinite Solution possible \" )\n        return\n    count = 0\n    n = a - b\n    y = ( int ) ( math.sqrt ( a - b ) )\n    for i in range ( 1 , y + 1 ) :\n        if ( n % i == 0 ) :\n            if ( n / i > b ) :\n                count = count + 1\n            if ( i > b ) :\n                count = count + 1\n    if ( y * y == n and y > b ) :\n        count = count - 1\n    print ( count )"}
{"source": "python", "target": "java", "source_program": " def binaryMedian ( m , r , d ) :\n    mi = m [ 0 ] [ 0 ]\n    mx = 0\n    for i in range ( r ) :\n        if m [ i ] [ 0 ] < mi :\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ d - 1 ] > mx :\n            mx = m [ i ] [ d - 1 ]\n    desired = ( r * d + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ] ;\n        for i in range ( r ) :\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n        if place [ 0 ] < desired :\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return", "target_program": " static int binaryMedian ( int m [ ] [ ] , int r , int c ) {\n  int max = Integer . MIN_VALUE ;\n  int min = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < r ;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;\n  }\n  int desired = ( r * c + 1 ) / 2 ;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2 ;\n    int place = 0 ;\n    int get = 0 ;\n    for ( int i = 0 ;\n    i < r ;\n    ++ i ) {\n      get = Arrays . binarySearch ( m [ i ] , mid ) ;\n      if ( get < 0 ) get = Math . abs ( get ) - 1 ;\n      else {\n        while ( get < m [ i ] . length && m [ i ] [ get ] == mid ) get += 1 ;\n      }\n      place = place + get ;\n    }\n    if ( place < desired ) min = mid + 1 ;\n    else max = mid ;\n  }\n  return min ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def binaryMedian ( m , r , d ) :\n    mi = m [ 0 ] [ 0 ]\n    mx = 0\n    for i in range ( r ) :\n        if m [ i ] [ 0 ] < mi :\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ d - 1 ] > mx :\n            mx = m [ i ] [ d - 1 ]\n    desired = ( r * d + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ] ;\n        for i in range ( r ) :\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n        if place [ 0 ] < desired :\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return", "target_program": " int binaryMedian ( int m [ ] [ MAX ], int r, int c ) {\n  int min = INT_MAX, max = INT_MIN;\n  for ( int i = 0;\n  i < r;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ];\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ];\n  }\n  int desired = ( r * c + 1 ) / 2;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2;\n    int place = 0;\n    for ( int i = 0;\n    i < r;\n    ++ i ) place += upper_bound ( m [ i ], m [ i ] + c, mid ) - m [ i ];\n    if ( place < desired ) min = mid + 1;\n    else max = mid;\n  }\n  return min;\n}"}
{"source": "java", "target": "python", "source_program": " static int binaryMedian ( int m [ ] [ ] , int r , int c ) {\n  int max = Integer . MIN_VALUE ;\n  int min = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < r ;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;\n  }\n  int desired = ( r * c + 1 ) / 2 ;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2 ;\n    int place = 0 ;\n    int get = 0 ;\n    for ( int i = 0 ;\n    i < r ;\n    ++ i ) {\n      get = Arrays . binarySearch ( m [ i ] , mid ) ;\n      if ( get < 0 ) get = Math . abs ( get ) - 1 ;\n      else {\n        while ( get < m [ i ] . length && m [ i ] [ get ] == mid ) get += 1 ;\n      }\n      place = place + get ;\n    }\n    if ( place < desired ) min = mid + 1 ;\n    else max = mid ;\n  }\n  return min ;\n}", "target_program": " def binaryMedian ( m , r , d ) :\n    mi = m [ 0 ] [ 0 ]\n    mx = 0\n    for i in range ( r ) :\n        if m [ i ] [ 0 ] < mi :\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ d - 1 ] > mx :\n            mx = m [ i ] [ d - 1 ]\n    desired = ( r * d + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ] ;\n        for i in range ( r ) :\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n        if place [ 0 ] < desired :\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return"}
{"source": "java", "target": "cpp", "source_program": " static int binaryMedian ( int m [ ] [ ] , int r , int c ) {\n  int max = Integer . MIN_VALUE ;\n  int min = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < r ;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;\n  }\n  int desired = ( r * c + 1 ) / 2 ;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2 ;\n    int place = 0 ;\n    int get = 0 ;\n    for ( int i = 0 ;\n    i < r ;\n    ++ i ) {\n      get = Arrays . binarySearch ( m [ i ] , mid ) ;\n      if ( get < 0 ) get = Math . abs ( get ) - 1 ;\n      else {\n        while ( get < m [ i ] . length && m [ i ] [ get ] == mid ) get += 1 ;\n      }\n      place = place + get ;\n    }\n    if ( place < desired ) min = mid + 1 ;\n    else max = mid ;\n  }\n  return min ;\n}", "target_program": " int binaryMedian ( int m [ ] [ MAX ], int r, int c ) {\n  int min = INT_MAX, max = INT_MIN;\n  for ( int i = 0;\n  i < r;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ];\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ];\n  }\n  int desired = ( r * c + 1 ) / 2;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2;\n    int place = 0;\n    for ( int i = 0;\n    i < r;\n    ++ i ) place += upper_bound ( m [ i ], m [ i ] + c, mid ) - m [ i ];\n    if ( place < desired ) min = mid + 1;\n    else max = mid;\n  }\n  return min;\n}"}
{"source": "cpp", "target": "java", "source_program": " int binaryMedian ( int m [ ] [ MAX ], int r, int c ) {\n  int min = INT_MAX, max = INT_MIN;\n  for ( int i = 0;\n  i < r;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ];\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ];\n  }\n  int desired = ( r * c + 1 ) / 2;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2;\n    int place = 0;\n    for ( int i = 0;\n    i < r;\n    ++ i ) place += upper_bound ( m [ i ], m [ i ] + c, mid ) - m [ i ];\n    if ( place < desired ) min = mid + 1;\n    else max = mid;\n  }\n  return min;\n}", "target_program": " static int binaryMedian ( int m [ ] [ ] , int r , int c ) {\n  int max = Integer . MIN_VALUE ;\n  int min = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < r ;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ] ;\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ] ;\n  }\n  int desired = ( r * c + 1 ) / 2 ;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2 ;\n    int place = 0 ;\n    int get = 0 ;\n    for ( int i = 0 ;\n    i < r ;\n    ++ i ) {\n      get = Arrays . binarySearch ( m [ i ] , mid ) ;\n      if ( get < 0 ) get = Math . abs ( get ) - 1 ;\n      else {\n        while ( get < m [ i ] . length && m [ i ] [ get ] == mid ) get += 1 ;\n      }\n      place = place + get ;\n    }\n    if ( place < desired ) min = mid + 1 ;\n    else max = mid ;\n  }\n  return min ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int binaryMedian ( int m [ ] [ MAX ], int r, int c ) {\n  int min = INT_MAX, max = INT_MIN;\n  for ( int i = 0;\n  i < r;\n  i ++ ) {\n    if ( m [ i ] [ 0 ] < min ) min = m [ i ] [ 0 ];\n    if ( m [ i ] [ c - 1 ] > max ) max = m [ i ] [ c - 1 ];\n  }\n  int desired = ( r * c + 1 ) / 2;\n  while ( min < max ) {\n    int mid = min + ( max - min ) / 2;\n    int place = 0;\n    for ( int i = 0;\n    i < r;\n    ++ i ) place += upper_bound ( m [ i ], m [ i ] + c, mid ) - m [ i ];\n    if ( place < desired ) min = mid + 1;\n    else max = mid;\n  }\n  return min;\n}", "target_program": " def binaryMedian ( m , r , d ) :\n    mi = m [ 0 ] [ 0 ]\n    mx = 0\n    for i in range ( r ) :\n        if m [ i ] [ 0 ] < mi :\n            mi = m [ i ] [ 0 ]\n        if m [ i ] [ d - 1 ] > mx :\n            mx = m [ i ] [ d - 1 ]\n    desired = ( r * d + 1 ) // 2\n    while ( mi < mx ) :\n        mid = mi + ( mx - mi ) // 2\n        place = [ 0 ] ;\n        for i in range ( r ) :\n            j = upper_bound ( m [ i ] , mid )\n            place [ 0 ] = place [ 0 ] + j\n        if place [ 0 ] < desired :\n            mi = mid + 1\n        else :\n            mx = mid\n    print ( \"Median is\" , mi )\n    return"}
{"source": "python", "target": "java", "source_program": " def findHeight ( parent , n ) :\n    res = 0\n    for i in range ( n ) :\n        p = i\n        current = 1\n        while ( parent [ p ] != - 1 ) :\n            current += 1\n            p = parent [ p ]\n        res = max ( res , current )\n    return res", "target_program": " static int findHeight ( int [ ] parent , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int p = i , current = 1 ;\n    while ( parent [ p ] != - 1 ) {\n      current ++ ;\n      p = parent [ p ] ;\n    }\n    res = Math . max ( res , current ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findHeight ( parent , n ) :\n    res = 0\n    for i in range ( n ) :\n        p = i\n        current = 1\n        while ( parent [ p ] != - 1 ) :\n            current += 1\n            p = parent [ p ]\n        res = max ( res , current )\n    return res", "target_program": " int findHeight ( int * parent, int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int p = i, current = 1;\n    while ( parent [ p ] != - 1 ) {\n      current ++;\n      p = parent [ p ];\n    }\n    res = max ( res, current );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findHeight ( int [ ] parent , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int p = i , current = 1 ;\n    while ( parent [ p ] != - 1 ) {\n      current ++ ;\n      p = parent [ p ] ;\n    }\n    res = Math . max ( res , current ) ;\n  }\n  return res ;\n}", "target_program": " def findHeight ( parent , n ) :\n    res = 0\n    for i in range ( n ) :\n        p = i\n        current = 1\n        while ( parent [ p ] != - 1 ) :\n            current += 1\n            p = parent [ p ]\n        res = max ( res , current )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findHeight ( int [ ] parent , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int p = i , current = 1 ;\n    while ( parent [ p ] != - 1 ) {\n      current ++ ;\n      p = parent [ p ] ;\n    }\n    res = Math . max ( res , current ) ;\n  }\n  return res ;\n}", "target_program": " int findHeight ( int * parent, int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int p = i, current = 1;\n    while ( parent [ p ] != - 1 ) {\n      current ++;\n      p = parent [ p ];\n    }\n    res = max ( res, current );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findHeight ( int * parent, int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int p = i, current = 1;\n    while ( parent [ p ] != - 1 ) {\n      current ++;\n      p = parent [ p ];\n    }\n    res = max ( res, current );\n  }\n  return res;\n}", "target_program": " static int findHeight ( int [ ] parent , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int p = i , current = 1 ;\n    while ( parent [ p ] != - 1 ) {\n      current ++ ;\n      p = parent [ p ] ;\n    }\n    res = Math . max ( res , current ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findHeight ( int * parent, int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int p = i, current = 1;\n    while ( parent [ p ] != - 1 ) {\n      current ++;\n      p = parent [ p ];\n    }\n    res = max ( res, current );\n  }\n  return res;\n}", "target_program": " def findHeight ( parent , n ) :\n    res = 0\n    for i in range ( n ) :\n        p = i\n        current = 1\n        while ( parent [ p ] != - 1 ) :\n            current += 1\n            p = parent [ p ]\n        res = max ( res , current )\n    return res"}
{"source": "python", "target": "java", "source_program": " def divisibleBy20 ( num ) :\n    lastTwoDigits = int ( num [ - 2 : ] )\n    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 == 0 ) )", "target_program": " static Boolean divisibleBy20 ( String num ) {\n  int lastTwoDigits = Integer . parseInt ( num . substring ( num . length ( ) - 2 , num . length ( ) ) ) ;\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def divisibleBy20 ( num ) :\n    lastTwoDigits = int ( num [ - 2 : ] )\n    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 == 0 ) )", "target_program": " bool divisibleBy20 ( string num ) {\n  int lastTwoDigits = stoi ( num . substr ( num . length ( ) - 2, num . length ( ) - 1 ) );\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static Boolean divisibleBy20 ( String num ) {\n  int lastTwoDigits = Integer . parseInt ( num . substring ( num . length ( ) - 2 , num . length ( ) ) ) ;\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) ) ;\n}", "target_program": " def divisibleBy20 ( num ) :\n    lastTwoDigits = int ( num [ - 2 : ] )\n    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 == 0 ) )"}
{"source": "java", "target": "cpp", "source_program": " static Boolean divisibleBy20 ( String num ) {\n  int lastTwoDigits = Integer . parseInt ( num . substring ( num . length ( ) - 2 , num . length ( ) ) ) ;\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) ) ;\n}", "target_program": " bool divisibleBy20 ( string num ) {\n  int lastTwoDigits = stoi ( num . substr ( num . length ( ) - 2, num . length ( ) - 1 ) );\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool divisibleBy20 ( string num ) {\n  int lastTwoDigits = stoi ( num . substr ( num . length ( ) - 2, num . length ( ) - 1 ) );\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) );\n}", "target_program": " static Boolean divisibleBy20 ( String num ) {\n  int lastTwoDigits = Integer . parseInt ( num . substring ( num . length ( ) - 2 , num . length ( ) ) ) ;\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool divisibleBy20 ( string num ) {\n  int lastTwoDigits = stoi ( num . substr ( num . length ( ) - 2, num . length ( ) - 1 ) );\n  return ( ( lastTwoDigits % 5 == 0 ) && ( lastTwoDigits % 4 == 0 ) );\n}", "target_program": " def divisibleBy20 ( num ) :\n    lastTwoDigits = int ( num [ - 2 : ] )\n    return ( ( lastTwoDigits % 5 == 0 and lastTwoDigits % 4 == 0 ) )"}
{"source": "python", "target": "java", "source_program": " def maxDP ( n ) :\n    res = list ( )\n    res.append ( 0 )\n    res.append ( 1 )\n    i = 2\n    while i < n + 1 :\n        res.append ( max ( i , ( res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ) )\n        i = i + 1\n    return res [ n ]", "target_program": " static int maxDP ( int n ) {\n  int res [ ] = new int [ n + 1 ] ;\n  res [ 0 ] = 0 ;\n  res [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) ) ;\n  return res [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxDP ( n ) :\n    res = list ( )\n    res.append ( 0 )\n    res.append ( 1 )\n    i = 2\n    while i < n + 1 :\n        res.append ( max ( i , ( res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ) )\n        i = i + 1\n    return res [ n ]", "target_program": " int maxDP ( int n ) {\n  int res [ n + 1 ];\n  res [ 0 ] = 0;\n  res [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) res [ i ] = max ( i, ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) );\n  return res [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxDP ( int n ) {\n  int res [ ] = new int [ n + 1 ] ;\n  res [ 0 ] = 0 ;\n  res [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) ) ;\n  return res [ n ] ;\n}", "target_program": " def maxDP ( n ) :\n    res = list ( )\n    res.append ( 0 )\n    res.append ( 1 )\n    i = 2\n    while i < n + 1 :\n        res.append ( max ( i , ( res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ) )\n        i = i + 1\n    return res [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxDP ( int n ) {\n  int res [ ] = new int [ n + 1 ] ;\n  res [ 0 ] = 0 ;\n  res [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) ) ;\n  return res [ n ] ;\n}", "target_program": " int maxDP ( int n ) {\n  int res [ n + 1 ];\n  res [ 0 ] = 0;\n  res [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) res [ i ] = max ( i, ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) );\n  return res [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxDP ( int n ) {\n  int res [ n + 1 ];\n  res [ 0 ] = 0;\n  res [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) res [ i ] = max ( i, ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) );\n  return res [ n ];\n}", "target_program": " static int maxDP ( int n ) {\n  int res [ ] = new int [ n + 1 ] ;\n  res [ 0 ] = 0 ;\n  res [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) res [ i ] = Math . max ( i , ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) ) ;\n  return res [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxDP ( int n ) {\n  int res [ n + 1 ];\n  res [ 0 ] = 0;\n  res [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) res [ i ] = max ( i, ( res [ i / 2 ] + res [ i / 3 ] + res [ i / 4 ] + res [ i / 5 ] ) );\n  return res [ n ];\n}", "target_program": " def maxDP ( n ) :\n    res = list ( )\n    res.append ( 0 )\n    res.append ( 1 )\n    i = 2\n    while i < n + 1 :\n        res.append ( max ( i , ( res [ int ( i / 2 ) ] + res [ int ( i / 3 ) ] + res [ int ( i / 4 ) ] + res [ int ( i / 5 ) ] ) ) )\n        i = i + 1\n    return res [ n ]"}
{"source": "python", "target": "java", "source_program": " def PerformQueries ( a , vec ) :\n    ans = [ ] ;\n    n = len ( a ) - 1 ;\n    q = len ( vec ) ;\n    for i in range ( q ) :\n        t = vec [ i ] [ 0 ] ;\n        m = vec [ i ] [ 1 ] ;\n        if ( m > n ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        turn = t // n ;\n        rem = t % n ;\n        if ( rem == 0 and turn % 2 == 1 ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        if ( rem == 0 and turn % 2 == 0 ) :\n            ans.append ( a [ m ] ) ;\n            continue ;\n        if ( turn % 2 == 0 ) :\n            cursize = n - rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m + rem ] ) ;\n        else :\n            cursize = rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m ] ) ;\n    for i in ans :\n        print ( i ) ;", "target_program": " static void PerformQueries ( int [ ] a , int [ ] [ ] vec ) {\n  Vector < Integer > ans = new Vector < > ( ) ;\n  int n = ( int ) a . length - 1 ;\n  int q = ( int ) vec . length ;\n  for ( int i = 0 ;\n  i < q ;\n  ++ i ) {\n    long t = vec [ i ] [ 0 ] ;\n    int m = vec [ i ] [ 1 ] ;\n    if ( m > n ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    int turn = ( int ) ( t / n ) ;\n    int rem = ( int ) ( t % n ) ;\n    if ( rem == 0 && turn % 2 == 1 ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    if ( rem == 0 && turn % 2 == 0 ) {\n      ans . add ( a [ m ] ) ;\n      continue ;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m + rem ] ) ;\n    }\n    else {\n      int cursize = rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m ] ) ;\n    }\n  }\n  for ( int i : ans ) System . out . print ( i + \"\\n\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def PerformQueries ( a , vec ) :\n    ans = [ ] ;\n    n = len ( a ) - 1 ;\n    q = len ( vec ) ;\n    for i in range ( q ) :\n        t = vec [ i ] [ 0 ] ;\n        m = vec [ i ] [ 1 ] ;\n        if ( m > n ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        turn = t // n ;\n        rem = t % n ;\n        if ( rem == 0 and turn % 2 == 1 ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        if ( rem == 0 and turn % 2 == 0 ) :\n            ans.append ( a [ m ] ) ;\n            continue ;\n        if ( turn % 2 == 0 ) :\n            cursize = n - rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m + rem ] ) ;\n        else :\n            cursize = rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m ] ) ;\n    for i in ans :\n        print ( i ) ;", "target_program": " void PerformQueries ( vector < int > & a, vector < pair < long long, int > > & vec ) {\n  vector < int > ans;\n  int n = ( int ) a . size ( ) - 1;\n  int q = ( int ) vec . size ( );\n  for ( int i = 0;\n  i < q;\n  ++ i ) {\n    long long t = vec [ i ] . first;\n    int m = vec [ i ] . second;\n    if ( m > n ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    int turn = t / n;\n    int rem = t % n;\n    if ( rem == 0 and turn % 2 == 1 ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    if ( rem == 0 and turn % 2 == 0 ) {\n      ans . push_back ( a [ m ] );\n      continue;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m + rem ] );\n    }\n    else {\n      int cursize = rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m ] );\n    }\n  }\n  for ( int i : ans ) cout << i << \"\\n\";\n}"}
{"source": "java", "target": "python", "source_program": " static void PerformQueries ( int [ ] a , int [ ] [ ] vec ) {\n  Vector < Integer > ans = new Vector < > ( ) ;\n  int n = ( int ) a . length - 1 ;\n  int q = ( int ) vec . length ;\n  for ( int i = 0 ;\n  i < q ;\n  ++ i ) {\n    long t = vec [ i ] [ 0 ] ;\n    int m = vec [ i ] [ 1 ] ;\n    if ( m > n ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    int turn = ( int ) ( t / n ) ;\n    int rem = ( int ) ( t % n ) ;\n    if ( rem == 0 && turn % 2 == 1 ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    if ( rem == 0 && turn % 2 == 0 ) {\n      ans . add ( a [ m ] ) ;\n      continue ;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m + rem ] ) ;\n    }\n    else {\n      int cursize = rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m ] ) ;\n    }\n  }\n  for ( int i : ans ) System . out . print ( i + \"\\n\" ) ;\n}", "target_program": " def PerformQueries ( a , vec ) :\n    ans = [ ] ;\n    n = len ( a ) - 1 ;\n    q = len ( vec ) ;\n    for i in range ( q ) :\n        t = vec [ i ] [ 0 ] ;\n        m = vec [ i ] [ 1 ] ;\n        if ( m > n ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        turn = t // n ;\n        rem = t % n ;\n        if ( rem == 0 and turn % 2 == 1 ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        if ( rem == 0 and turn % 2 == 0 ) :\n            ans.append ( a [ m ] ) ;\n            continue ;\n        if ( turn % 2 == 0 ) :\n            cursize = n - rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m + rem ] ) ;\n        else :\n            cursize = rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m ] ) ;\n    for i in ans :\n        print ( i ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void PerformQueries ( int [ ] a , int [ ] [ ] vec ) {\n  Vector < Integer > ans = new Vector < > ( ) ;\n  int n = ( int ) a . length - 1 ;\n  int q = ( int ) vec . length ;\n  for ( int i = 0 ;\n  i < q ;\n  ++ i ) {\n    long t = vec [ i ] [ 0 ] ;\n    int m = vec [ i ] [ 1 ] ;\n    if ( m > n ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    int turn = ( int ) ( t / n ) ;\n    int rem = ( int ) ( t % n ) ;\n    if ( rem == 0 && turn % 2 == 1 ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    if ( rem == 0 && turn % 2 == 0 ) {\n      ans . add ( a [ m ] ) ;\n      continue ;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m + rem ] ) ;\n    }\n    else {\n      int cursize = rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m ] ) ;\n    }\n  }\n  for ( int i : ans ) System . out . print ( i + \"\\n\" ) ;\n}", "target_program": " void PerformQueries ( vector < int > & a, vector < pair < long long, int > > & vec ) {\n  vector < int > ans;\n  int n = ( int ) a . size ( ) - 1;\n  int q = ( int ) vec . size ( );\n  for ( int i = 0;\n  i < q;\n  ++ i ) {\n    long long t = vec [ i ] . first;\n    int m = vec [ i ] . second;\n    if ( m > n ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    int turn = t / n;\n    int rem = t % n;\n    if ( rem == 0 and turn % 2 == 1 ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    if ( rem == 0 and turn % 2 == 0 ) {\n      ans . push_back ( a [ m ] );\n      continue;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m + rem ] );\n    }\n    else {\n      int cursize = rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m ] );\n    }\n  }\n  for ( int i : ans ) cout << i << \"\\n\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void PerformQueries ( vector < int > & a, vector < pair < long long, int > > & vec ) {\n  vector < int > ans;\n  int n = ( int ) a . size ( ) - 1;\n  int q = ( int ) vec . size ( );\n  for ( int i = 0;\n  i < q;\n  ++ i ) {\n    long long t = vec [ i ] . first;\n    int m = vec [ i ] . second;\n    if ( m > n ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    int turn = t / n;\n    int rem = t % n;\n    if ( rem == 0 and turn % 2 == 1 ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    if ( rem == 0 and turn % 2 == 0 ) {\n      ans . push_back ( a [ m ] );\n      continue;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m + rem ] );\n    }\n    else {\n      int cursize = rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m ] );\n    }\n  }\n  for ( int i : ans ) cout << i << \"\\n\";\n}", "target_program": " static void PerformQueries ( int [ ] a , int [ ] [ ] vec ) {\n  Vector < Integer > ans = new Vector < > ( ) ;\n  int n = ( int ) a . length - 1 ;\n  int q = ( int ) vec . length ;\n  for ( int i = 0 ;\n  i < q ;\n  ++ i ) {\n    long t = vec [ i ] [ 0 ] ;\n    int m = vec [ i ] [ 1 ] ;\n    if ( m > n ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    int turn = ( int ) ( t / n ) ;\n    int rem = ( int ) ( t % n ) ;\n    if ( rem == 0 && turn % 2 == 1 ) {\n      ans . add ( - 1 ) ;\n      continue ;\n    }\n    if ( rem == 0 && turn % 2 == 0 ) {\n      ans . add ( a [ m ] ) ;\n      continue ;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m + rem ] ) ;\n    }\n    else {\n      int cursize = rem ;\n      if ( cursize < m ) {\n        ans . add ( - 1 ) ;\n        continue ;\n      }\n      ans . add ( a [ m ] ) ;\n    }\n  }\n  for ( int i : ans ) System . out . print ( i + \"\\n\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void PerformQueries ( vector < int > & a, vector < pair < long long, int > > & vec ) {\n  vector < int > ans;\n  int n = ( int ) a . size ( ) - 1;\n  int q = ( int ) vec . size ( );\n  for ( int i = 0;\n  i < q;\n  ++ i ) {\n    long long t = vec [ i ] . first;\n    int m = vec [ i ] . second;\n    if ( m > n ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    int turn = t / n;\n    int rem = t % n;\n    if ( rem == 0 and turn % 2 == 1 ) {\n      ans . push_back ( - 1 );\n      continue;\n    }\n    if ( rem == 0 and turn % 2 == 0 ) {\n      ans . push_back ( a [ m ] );\n      continue;\n    }\n    if ( turn % 2 == 0 ) {\n      int cursize = n - rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m + rem ] );\n    }\n    else {\n      int cursize = rem;\n      if ( cursize < m ) {\n        ans . push_back ( - 1 );\n        continue;\n      }\n      ans . push_back ( a [ m ] );\n    }\n  }\n  for ( int i : ans ) cout << i << \"\\n\";\n}", "target_program": " def PerformQueries ( a , vec ) :\n    ans = [ ] ;\n    n = len ( a ) - 1 ;\n    q = len ( vec ) ;\n    for i in range ( q ) :\n        t = vec [ i ] [ 0 ] ;\n        m = vec [ i ] [ 1 ] ;\n        if ( m > n ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        turn = t // n ;\n        rem = t % n ;\n        if ( rem == 0 and turn % 2 == 1 ) :\n            ans.append ( - 1 ) ;\n            continue ;\n        if ( rem == 0 and turn % 2 == 0 ) :\n            ans.append ( a [ m ] ) ;\n            continue ;\n        if ( turn % 2 == 0 ) :\n            cursize = n - rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m + rem ] ) ;\n        else :\n            cursize = rem ;\n            if ( cursize < m ) :\n                ans.append ( - 1 ) ;\n                continue ;\n            ans.append ( a [ m ] ) ;\n    for i in ans :\n        print ( i ) ;"}
{"source": "python", "target": "java", "source_program": " def printUnion ( arr1 , arr2 , m , n ) :\n    i , j = 0 , 0\n    while i < m and j < n :\n        if arr1 [ i ] < arr2 [ j ] :\n            print ( arr1 [ i ] )\n            i += 1\n        elif arr2 [ j ] < arr1 [ i ] :\n            print ( arr2 [ j ] )\n            j += 1\n        else :\n            print ( arr2 [ j ] )\n            j += 1\n            i += 1\n    while i < m :\n        print ( arr1 [ i ] )\n        i += 1\n    while j < n :\n        print ( arr2 [ j ] )\n        j += 1", "target_program": " static int printUnion ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n    else if ( arr2 [ j ] < arr1 [ i ] ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n    else {\n      System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n      i ++ ;\n    }\n  }\n  while ( i < m ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n  while ( j < n ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n  return 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printUnion ( arr1 , arr2 , m , n ) :\n    i , j = 0 , 0\n    while i < m and j < n :\n        if arr1 [ i ] < arr2 [ j ] :\n            print ( arr1 [ i ] )\n            i += 1\n        elif arr2 [ j ] < arr1 [ i ] :\n            print ( arr2 [ j ] )\n            j += 1\n        else :\n            print ( arr2 [ j ] )\n            j += 1\n            i += 1\n    while i < m :\n        print ( arr1 [ i ] )\n        i += 1\n    while j < n :\n        print ( arr2 [ j ] )\n        j += 1", "target_program": " int printUnion ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) cout << arr1 [ i ++ ] << \" \";\n    else if ( arr2 [ j ] < arr1 [ i ] ) cout << arr2 [ j ++ ] << \" \";\n    else {\n      cout << arr2 [ j ++ ] << \" \";\n      i ++;\n    }\n  }\n  while ( i < m ) cout << arr1 [ i ++ ] << \" \";\n  while ( j < n ) cout << arr2 [ j ++ ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static int printUnion ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n    else if ( arr2 [ j ] < arr1 [ i ] ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n    else {\n      System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n      i ++ ;\n    }\n  }\n  while ( i < m ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n  while ( j < n ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n  return 0 ;\n}", "target_program": " def printUnion ( arr1 , arr2 , m , n ) :\n    i , j = 0 , 0\n    while i < m and j < n :\n        if arr1 [ i ] < arr2 [ j ] :\n            print ( arr1 [ i ] )\n            i += 1\n        elif arr2 [ j ] < arr1 [ i ] :\n            print ( arr2 [ j ] )\n            j += 1\n        else :\n            print ( arr2 [ j ] )\n            j += 1\n            i += 1\n    while i < m :\n        print ( arr1 [ i ] )\n        i += 1\n    while j < n :\n        print ( arr2 [ j ] )\n        j += 1"}
{"source": "java", "target": "cpp", "source_program": " static int printUnion ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n    else if ( arr2 [ j ] < arr1 [ i ] ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n    else {\n      System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n      i ++ ;\n    }\n  }\n  while ( i < m ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n  while ( j < n ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n  return 0 ;\n}", "target_program": " int printUnion ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) cout << arr1 [ i ++ ] << \" \";\n    else if ( arr2 [ j ] < arr1 [ i ] ) cout << arr2 [ j ++ ] << \" \";\n    else {\n      cout << arr2 [ j ++ ] << \" \";\n      i ++;\n    }\n  }\n  while ( i < m ) cout << arr1 [ i ++ ] << \" \";\n  while ( j < n ) cout << arr2 [ j ++ ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " int printUnion ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) cout << arr1 [ i ++ ] << \" \";\n    else if ( arr2 [ j ] < arr1 [ i ] ) cout << arr2 [ j ++ ] << \" \";\n    else {\n      cout << arr2 [ j ++ ] << \" \";\n      i ++;\n    }\n  }\n  while ( i < m ) cout << arr1 [ i ++ ] << \" \";\n  while ( j < n ) cout << arr2 [ j ++ ] << \" \";\n}", "target_program": " static int printUnion ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n    else if ( arr2 [ j ] < arr1 [ i ] ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n    else {\n      System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n      i ++ ;\n    }\n  }\n  while ( i < m ) System . out . print ( arr1 [ i ++ ] + \" \" ) ;\n  while ( j < n ) System . out . print ( arr2 [ j ++ ] + \" \" ) ;\n  return 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int printUnion ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( arr1 [ i ] < arr2 [ j ] ) cout << arr1 [ i ++ ] << \" \";\n    else if ( arr2 [ j ] < arr1 [ i ] ) cout << arr2 [ j ++ ] << \" \";\n    else {\n      cout << arr2 [ j ++ ] << \" \";\n      i ++;\n    }\n  }\n  while ( i < m ) cout << arr1 [ i ++ ] << \" \";\n  while ( j < n ) cout << arr2 [ j ++ ] << \" \";\n}", "target_program": " def printUnion ( arr1 , arr2 , m , n ) :\n    i , j = 0 , 0\n    while i < m and j < n :\n        if arr1 [ i ] < arr2 [ j ] :\n            print ( arr1 [ i ] )\n            i += 1\n        elif arr2 [ j ] < arr1 [ i ] :\n            print ( arr2 [ j ] )\n            j += 1\n        else :\n            print ( arr2 [ j ] )\n            j += 1\n            i += 1\n    while i < m :\n        print ( arr1 [ i ] )\n        i += 1\n    while j < n :\n        print ( arr2 [ j ] )\n        j += 1"}
{"source": "python", "target": "java", "source_program": " def solveWordWrap ( arr , n , k ) :\n    dp = [ 0 ] * n\n    ans = [ 0 ] * n\n    dp [ n - 1 ] = 0\n    ans [ n - 1 ] = n - 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        currlen = - 1\n        dp [ i ] = sys.maxsize\n        for j in range ( i , n ) :\n            currlen += ( arr [ j ] + 1 )\n            if ( currlen > k ) :\n                break\n            if ( j == n - 1 ) :\n                cost = 0\n            else :\n                cost = ( ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] )\n            if ( cost < dp [ i ] ) :\n                dp [ i ] = cost\n                ans [ i ] = j\n    i = 0\n    while ( i < n ) :\n        print ( i + 1 , ans [ i ] + 1 , end = \" \" )\n        i = ans [ i ] + 1", "target_program": " static void solveWordWrap ( int arr [ ] , int n , int k ) {\n  int i , j ;\n  int currlen ;\n  int cost ;\n  int dp [ ] = new int [ n ] ;\n  int ans [ ] = new int [ n ] ;\n  dp [ n - 1 ] = 0 ;\n  ans [ n - 1 ] = n - 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    currlen = - 1 ;\n    dp [ i ] = Integer . MAX_VALUE ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 ) ;\n      if ( currlen > k ) break ;\n      if ( j == n - 1 ) cost = 0 ;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] ;\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost ;\n        ans [ i ] = j ;\n      }\n    }\n  }\n  i = 0 ;\n  while ( i < n ) {\n    System . out . print ( ( i + 1 ) + \" \" + ( ans [ i ] + 1 ) + \" \" ) ;\n    i = ans [ i ] + 1 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def solveWordWrap ( arr , n , k ) :\n    dp = [ 0 ] * n\n    ans = [ 0 ] * n\n    dp [ n - 1 ] = 0\n    ans [ n - 1 ] = n - 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        currlen = - 1\n        dp [ i ] = sys.maxsize\n        for j in range ( i , n ) :\n            currlen += ( arr [ j ] + 1 )\n            if ( currlen > k ) :\n                break\n            if ( j == n - 1 ) :\n                cost = 0\n            else :\n                cost = ( ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] )\n            if ( cost < dp [ i ] ) :\n                dp [ i ] = cost\n                ans [ i ] = j\n    i = 0\n    while ( i < n ) :\n        print ( i + 1 , ans [ i ] + 1 , end = \" \" )\n        i = ans [ i ] + 1", "target_program": " void solveWordWrap ( int arr [ ], int n, int k ) {\n  int i, j;\n  int currlen;\n  int cost;\n  int dp [ n ];\n  int ans [ n ];\n  dp [ n - 1 ] = 0;\n  ans [ n - 1 ] = n - 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    currlen = - 1;\n    dp [ i ] = INT_MAX;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 );\n      if ( currlen > k ) break;\n      if ( j == n - 1 ) cost = 0;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ];\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost;\n        ans [ i ] = j;\n      }\n    }\n  }\n  i = 0;\n  while ( i < n ) {\n    cout << i + 1 << \" \" << ans [ i ] + 1 << \" \";\n    i = ans [ i ] + 1;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void solveWordWrap ( int arr [ ] , int n , int k ) {\n  int i , j ;\n  int currlen ;\n  int cost ;\n  int dp [ ] = new int [ n ] ;\n  int ans [ ] = new int [ n ] ;\n  dp [ n - 1 ] = 0 ;\n  ans [ n - 1 ] = n - 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    currlen = - 1 ;\n    dp [ i ] = Integer . MAX_VALUE ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 ) ;\n      if ( currlen > k ) break ;\n      if ( j == n - 1 ) cost = 0 ;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] ;\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost ;\n        ans [ i ] = j ;\n      }\n    }\n  }\n  i = 0 ;\n  while ( i < n ) {\n    System . out . print ( ( i + 1 ) + \" \" + ( ans [ i ] + 1 ) + \" \" ) ;\n    i = ans [ i ] + 1 ;\n  }\n}", "target_program": " def solveWordWrap ( arr , n , k ) :\n    dp = [ 0 ] * n\n    ans = [ 0 ] * n\n    dp [ n - 1 ] = 0\n    ans [ n - 1 ] = n - 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        currlen = - 1\n        dp [ i ] = sys.maxsize\n        for j in range ( i , n ) :\n            currlen += ( arr [ j ] + 1 )\n            if ( currlen > k ) :\n                break\n            if ( j == n - 1 ) :\n                cost = 0\n            else :\n                cost = ( ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] )\n            if ( cost < dp [ i ] ) :\n                dp [ i ] = cost\n                ans [ i ] = j\n    i = 0\n    while ( i < n ) :\n        print ( i + 1 , ans [ i ] + 1 , end = \" \" )\n        i = ans [ i ] + 1"}
{"source": "java", "target": "cpp", "source_program": " static void solveWordWrap ( int arr [ ] , int n , int k ) {\n  int i , j ;\n  int currlen ;\n  int cost ;\n  int dp [ ] = new int [ n ] ;\n  int ans [ ] = new int [ n ] ;\n  dp [ n - 1 ] = 0 ;\n  ans [ n - 1 ] = n - 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    currlen = - 1 ;\n    dp [ i ] = Integer . MAX_VALUE ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 ) ;\n      if ( currlen > k ) break ;\n      if ( j == n - 1 ) cost = 0 ;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] ;\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost ;\n        ans [ i ] = j ;\n      }\n    }\n  }\n  i = 0 ;\n  while ( i < n ) {\n    System . out . print ( ( i + 1 ) + \" \" + ( ans [ i ] + 1 ) + \" \" ) ;\n    i = ans [ i ] + 1 ;\n  }\n}", "target_program": " void solveWordWrap ( int arr [ ], int n, int k ) {\n  int i, j;\n  int currlen;\n  int cost;\n  int dp [ n ];\n  int ans [ n ];\n  dp [ n - 1 ] = 0;\n  ans [ n - 1 ] = n - 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    currlen = - 1;\n    dp [ i ] = INT_MAX;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 );\n      if ( currlen > k ) break;\n      if ( j == n - 1 ) cost = 0;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ];\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost;\n        ans [ i ] = j;\n      }\n    }\n  }\n  i = 0;\n  while ( i < n ) {\n    cout << i + 1 << \" \" << ans [ i ] + 1 << \" \";\n    i = ans [ i ] + 1;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void solveWordWrap ( int arr [ ], int n, int k ) {\n  int i, j;\n  int currlen;\n  int cost;\n  int dp [ n ];\n  int ans [ n ];\n  dp [ n - 1 ] = 0;\n  ans [ n - 1 ] = n - 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    currlen = - 1;\n    dp [ i ] = INT_MAX;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 );\n      if ( currlen > k ) break;\n      if ( j == n - 1 ) cost = 0;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ];\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost;\n        ans [ i ] = j;\n      }\n    }\n  }\n  i = 0;\n  while ( i < n ) {\n    cout << i + 1 << \" \" << ans [ i ] + 1 << \" \";\n    i = ans [ i ] + 1;\n  }\n}", "target_program": " static void solveWordWrap ( int arr [ ] , int n , int k ) {\n  int i , j ;\n  int currlen ;\n  int cost ;\n  int dp [ ] = new int [ n ] ;\n  int ans [ ] = new int [ n ] ;\n  dp [ n - 1 ] = 0 ;\n  ans [ n - 1 ] = n - 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    currlen = - 1 ;\n    dp [ i ] = Integer . MAX_VALUE ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 ) ;\n      if ( currlen > k ) break ;\n      if ( j == n - 1 ) cost = 0 ;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] ;\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost ;\n        ans [ i ] = j ;\n      }\n    }\n  }\n  i = 0 ;\n  while ( i < n ) {\n    System . out . print ( ( i + 1 ) + \" \" + ( ans [ i ] + 1 ) + \" \" ) ;\n    i = ans [ i ] + 1 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void solveWordWrap ( int arr [ ], int n, int k ) {\n  int i, j;\n  int currlen;\n  int cost;\n  int dp [ n ];\n  int ans [ n ];\n  dp [ n - 1 ] = 0;\n  ans [ n - 1 ] = n - 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    currlen = - 1;\n    dp [ i ] = INT_MAX;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      currlen += ( arr [ j ] + 1 );\n      if ( currlen > k ) break;\n      if ( j == n - 1 ) cost = 0;\n      else cost = ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ];\n      if ( cost < dp [ i ] ) {\n        dp [ i ] = cost;\n        ans [ i ] = j;\n      }\n    }\n  }\n  i = 0;\n  while ( i < n ) {\n    cout << i + 1 << \" \" << ans [ i ] + 1 << \" \";\n    i = ans [ i ] + 1;\n  }\n}", "target_program": " def solveWordWrap ( arr , n , k ) :\n    dp = [ 0 ] * n\n    ans = [ 0 ] * n\n    dp [ n - 1 ] = 0\n    ans [ n - 1 ] = n - 1\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        currlen = - 1\n        dp [ i ] = sys.maxsize\n        for j in range ( i , n ) :\n            currlen += ( arr [ j ] + 1 )\n            if ( currlen > k ) :\n                break\n            if ( j == n - 1 ) :\n                cost = 0\n            else :\n                cost = ( ( k - currlen ) * ( k - currlen ) + dp [ j + 1 ] )\n            if ( cost < dp [ i ] ) :\n                dp [ i ] = cost\n                ans [ i ] = j\n    i = 0\n    while ( i < n ) :\n        print ( i + 1 , ans [ i ] + 1 , end = \" \" )\n        i = ans [ i ] + 1"}
{"source": "python", "target": "java", "source_program": " def countSub ( ss ) :\n    last = [ - 1 for i in range ( MAX_CHAR + 1 ) ]\n    n = len ( ss )\n    dp = [ - 2 for i in range ( n + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] = 2 * dp [ i - 1 ]\n        if last [ ord ( ss [ i - 1 ] ) ] != - 1 :\n            dp [ i ] = dp [ i ] - dp [ last [ ord ( ss [ i - 1 ] ) ] ]\n        last [ ord ( ss [ i - 1 ] ) ] = i - 1\n    return dp [ n ]", "target_program": " static int countSub ( String str ) {\n  int [ ] last = new int [ MAX_CHAR ] ;\n  Arrays . fill ( last , - 1 ) ;\n  int n = str . length ( ) ;\n  int [ ] dp = new int [ n + 1 ] ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ] ;\n    if ( last [ ( int ) str . charAt ( i - 1 ) ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ ( int ) str . charAt ( i - 1 ) ] ] ;\n    last [ ( int ) str . charAt ( i - 1 ) ] = ( i - 1 ) ;\n  }\n  return dp [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSub ( ss ) :\n    last = [ - 1 for i in range ( MAX_CHAR + 1 ) ]\n    n = len ( ss )\n    dp = [ - 2 for i in range ( n + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] = 2 * dp [ i - 1 ]\n        if last [ ord ( ss [ i - 1 ] ) ] != - 1 :\n            dp [ i ] = dp [ i ] - dp [ last [ ord ( ss [ i - 1 ] ) ] ]\n        last [ ord ( ss [ i - 1 ] ) ] = i - 1\n    return dp [ n ]", "target_program": " int countSub ( string str ) {\n  vector < int > last ( MAX_CHAR, - 1 );\n  int n = str . length ( );\n  int dp [ n + 1 ];\n  dp [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ];\n    if ( last [ str [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ str [ i - 1 ] ] ];\n    last [ str [ i - 1 ] ] = ( i - 1 );\n  }\n  return dp [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countSub ( String str ) {\n  int [ ] last = new int [ MAX_CHAR ] ;\n  Arrays . fill ( last , - 1 ) ;\n  int n = str . length ( ) ;\n  int [ ] dp = new int [ n + 1 ] ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ] ;\n    if ( last [ ( int ) str . charAt ( i - 1 ) ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ ( int ) str . charAt ( i - 1 ) ] ] ;\n    last [ ( int ) str . charAt ( i - 1 ) ] = ( i - 1 ) ;\n  }\n  return dp [ n ] ;\n}", "target_program": " def countSub ( ss ) :\n    last = [ - 1 for i in range ( MAX_CHAR + 1 ) ]\n    n = len ( ss )\n    dp = [ - 2 for i in range ( n + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] = 2 * dp [ i - 1 ]\n        if last [ ord ( ss [ i - 1 ] ) ] != - 1 :\n            dp [ i ] = dp [ i ] - dp [ last [ ord ( ss [ i - 1 ] ) ] ]\n        last [ ord ( ss [ i - 1 ] ) ] = i - 1\n    return dp [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countSub ( String str ) {\n  int [ ] last = new int [ MAX_CHAR ] ;\n  Arrays . fill ( last , - 1 ) ;\n  int n = str . length ( ) ;\n  int [ ] dp = new int [ n + 1 ] ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ] ;\n    if ( last [ ( int ) str . charAt ( i - 1 ) ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ ( int ) str . charAt ( i - 1 ) ] ] ;\n    last [ ( int ) str . charAt ( i - 1 ) ] = ( i - 1 ) ;\n  }\n  return dp [ n ] ;\n}", "target_program": " int countSub ( string str ) {\n  vector < int > last ( MAX_CHAR, - 1 );\n  int n = str . length ( );\n  int dp [ n + 1 ];\n  dp [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ];\n    if ( last [ str [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ str [ i - 1 ] ] ];\n    last [ str [ i - 1 ] ] = ( i - 1 );\n  }\n  return dp [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSub ( string str ) {\n  vector < int > last ( MAX_CHAR, - 1 );\n  int n = str . length ( );\n  int dp [ n + 1 ];\n  dp [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ];\n    if ( last [ str [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ str [ i - 1 ] ] ];\n    last [ str [ i - 1 ] ] = ( i - 1 );\n  }\n  return dp [ n ];\n}", "target_program": " static int countSub ( String str ) {\n  int [ ] last = new int [ MAX_CHAR ] ;\n  Arrays . fill ( last , - 1 ) ;\n  int n = str . length ( ) ;\n  int [ ] dp = new int [ n + 1 ] ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ] ;\n    if ( last [ ( int ) str . charAt ( i - 1 ) ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ ( int ) str . charAt ( i - 1 ) ] ] ;\n    last [ ( int ) str . charAt ( i - 1 ) ] = ( i - 1 ) ;\n  }\n  return dp [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSub ( string str ) {\n  vector < int > last ( MAX_CHAR, - 1 );\n  int n = str . length ( );\n  int dp [ n + 1 ];\n  dp [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = 2 * dp [ i - 1 ];\n    if ( last [ str [ i - 1 ] ] != - 1 ) dp [ i ] = dp [ i ] - dp [ last [ str [ i - 1 ] ] ];\n    last [ str [ i - 1 ] ] = ( i - 1 );\n  }\n  return dp [ n ];\n}", "target_program": " def countSub ( ss ) :\n    last = [ - 1 for i in range ( MAX_CHAR + 1 ) ]\n    n = len ( ss )\n    dp = [ - 2 for i in range ( n + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] = 2 * dp [ i - 1 ]\n        if last [ ord ( ss [ i - 1 ] ) ] != - 1 :\n            dp [ i ] = dp [ i ] - dp [ last [ ord ( ss [ i - 1 ] ) ] ]\n        last [ ord ( ss [ i - 1 ] ) ] = i - 1\n    return dp [ n ]"}
{"source": "python", "target": "java", "source_program": " def findLength ( st , n ) :\n    total = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ] ) - int ( '0' ) )\n    ans = 0\n    l = 2\n    while ( l <= n ) :\n        for i in range ( n - l + 1 ) :\n            j = i + l - 1\n            if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + int ( l / 2 ) ] ) :\n                ans = max ( ans , l )\n        l = l + 2\n    return ans", "target_program": " static int findLength ( String str , int n ) {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= n - 2 ;\n  i ++ ) {\n    int l = i , r = i + 1 ;\n    int lsum = 0 , rsum = 0 ;\n    while ( r < n && l >= 0 ) {\n      lsum += str . charAt ( l ) - '0' ;\n      rsum += str . charAt ( r ) - '0' ;\n      if ( lsum == rsum ) {\n        ans = Math . max ( ans , r - l + 1 ) ;\n      }\n      l -- ;\n      r ++ ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLength ( st , n ) :\n    total = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ] ) - int ( '0' ) )\n    ans = 0\n    l = 2\n    while ( l <= n ) :\n        for i in range ( n - l + 1 ) :\n            j = i + l - 1\n            if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + int ( l / 2 ) ] ) :\n                ans = max ( ans , l )\n        l = l + 2\n    return ans", "target_program": " int findLength ( string str, int n ) {\n  int ans = 0;\n  for ( int i = 0;\n  i <= n - 2;\n  i ++ ) {\n    int l = i, r = i + 1;\n    int lsum = 0, rsum = 0;\n    while ( r < n && l >= 0 ) {\n      lsum += str [ l ] - '0';\n      rsum += str [ r ] - '0';\n      if ( lsum == rsum ) ans = max ( ans, r - l + 1 );\n      l --;\n      r ++;\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLength ( String str , int n ) {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= n - 2 ;\n  i ++ ) {\n    int l = i , r = i + 1 ;\n    int lsum = 0 , rsum = 0 ;\n    while ( r < n && l >= 0 ) {\n      lsum += str . charAt ( l ) - '0' ;\n      rsum += str . charAt ( r ) - '0' ;\n      if ( lsum == rsum ) {\n        ans = Math . max ( ans , r - l + 1 ) ;\n      }\n      l -- ;\n      r ++ ;\n    }\n  }\n  return ans ;\n}", "target_program": " def findLength ( st , n ) :\n    total = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ] ) - int ( '0' ) )\n    ans = 0\n    l = 2\n    while ( l <= n ) :\n        for i in range ( n - l + 1 ) :\n            j = i + l - 1\n            if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + int ( l / 2 ) ] ) :\n                ans = max ( ans , l )\n        l = l + 2\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findLength ( String str , int n ) {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= n - 2 ;\n  i ++ ) {\n    int l = i , r = i + 1 ;\n    int lsum = 0 , rsum = 0 ;\n    while ( r < n && l >= 0 ) {\n      lsum += str . charAt ( l ) - '0' ;\n      rsum += str . charAt ( r ) - '0' ;\n      if ( lsum == rsum ) {\n        ans = Math . max ( ans , r - l + 1 ) ;\n      }\n      l -- ;\n      r ++ ;\n    }\n  }\n  return ans ;\n}", "target_program": " int findLength ( string str, int n ) {\n  int ans = 0;\n  for ( int i = 0;\n  i <= n - 2;\n  i ++ ) {\n    int l = i, r = i + 1;\n    int lsum = 0, rsum = 0;\n    while ( r < n && l >= 0 ) {\n      lsum += str [ l ] - '0';\n      rsum += str [ r ] - '0';\n      if ( lsum == rsum ) ans = max ( ans, r - l + 1 );\n      l --;\n      r ++;\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLength ( string str, int n ) {\n  int ans = 0;\n  for ( int i = 0;\n  i <= n - 2;\n  i ++ ) {\n    int l = i, r = i + 1;\n    int lsum = 0, rsum = 0;\n    while ( r < n && l >= 0 ) {\n      lsum += str [ l ] - '0';\n      rsum += str [ r ] - '0';\n      if ( lsum == rsum ) ans = max ( ans, r - l + 1 );\n      l --;\n      r ++;\n    }\n  }\n  return ans;\n}", "target_program": " static int findLength ( String str , int n ) {\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= n - 2 ;\n  i ++ ) {\n    int l = i , r = i + 1 ;\n    int lsum = 0 , rsum = 0 ;\n    while ( r < n && l >= 0 ) {\n      lsum += str . charAt ( l ) - '0' ;\n      rsum += str . charAt ( r ) - '0' ;\n      if ( lsum == rsum ) {\n        ans = Math . max ( ans , r - l + 1 ) ;\n      }\n      l -- ;\n      r ++ ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLength ( string str, int n ) {\n  int ans = 0;\n  for ( int i = 0;\n  i <= n - 2;\n  i ++ ) {\n    int l = i, r = i + 1;\n    int lsum = 0, rsum = 0;\n    while ( r < n && l >= 0 ) {\n      lsum += str [ l ] - '0';\n      rsum += str [ r ] - '0';\n      if ( lsum == rsum ) ans = max ( ans, r - l + 1 );\n      l --;\n      r ++;\n    }\n  }\n  return ans;\n}", "target_program": " def findLength ( st , n ) :\n    total = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        total [ i ] = ( total [ i - 1 ] + int ( st [ i - 1 ] ) - int ( '0' ) )\n    ans = 0\n    l = 2\n    while ( l <= n ) :\n        for i in range ( n - l + 1 ) :\n            j = i + l - 1\n            if ( total [ i + int ( l / 2 ) ] - total [ i ] == total [ i + l ] - total [ i + int ( l / 2 ) ] ) :\n                ans = max ( ans , l )\n        l = l + 2\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findMaxPath ( mat ) :\n    res = - 1\n    for i in range ( M ) :\n        res = max ( res , mat [ 0 ] [ i ] )\n    for i in range ( 1 , N ) :\n        res = - 1\n        for j in range ( M ) :\n            if ( j > 0 and j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) )\n            elif ( j > 0 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] )\n            elif ( j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] )\n            res = max ( mat [ i ] [ j ] , res )\n    return res", "target_program": " static int findMaxPath ( int mat [ ] [ ] ) {\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    res = - 1 ;\n    for ( int j = 0 ;\n    j < M ;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ;\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) ;\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ;\n      res = max ( mat [ i ] [ j ] , res ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxPath ( mat ) :\n    res = - 1\n    for i in range ( M ) :\n        res = max ( res , mat [ 0 ] [ i ] )\n    for i in range ( 1 , N ) :\n        res = - 1\n        for j in range ( M ) :\n            if ( j > 0 and j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) )\n            elif ( j > 0 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] )\n            elif ( j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] )\n            res = max ( mat [ i ] [ j ] , res )\n    return res", "target_program": " int findMaxPath ( int mat [ ] [ M ] ) {\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    for ( int j = 0;\n    j < M;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], max ( mat [ i - 1 ] [ j - 1 ], mat [ i - 1 ] [ j + 1 ] ) );\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j - 1 ] );\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j + 1 ] );\n    }\n  }\n  int res = 0;\n  for ( int j = 0;\n  j < M;\n  j ++ ) res = max ( mat [ N - 1 ] [ j ], res );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxPath ( int mat [ ] [ ] ) {\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    res = - 1 ;\n    for ( int j = 0 ;\n    j < M ;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ;\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) ;\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ;\n      res = max ( mat [ i ] [ j ] , res ) ;\n    }\n  }\n  return res ;\n}", "target_program": " def findMaxPath ( mat ) :\n    res = - 1\n    for i in range ( M ) :\n        res = max ( res , mat [ 0 ] [ i ] )\n    for i in range ( 1 , N ) :\n        res = - 1\n        for j in range ( M ) :\n            if ( j > 0 and j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) )\n            elif ( j > 0 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] )\n            elif ( j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] )\n            res = max ( mat [ i ] [ j ] , res )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxPath ( int mat [ ] [ ] ) {\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    res = - 1 ;\n    for ( int j = 0 ;\n    j < M ;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ;\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) ;\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ;\n      res = max ( mat [ i ] [ j ] , res ) ;\n    }\n  }\n  return res ;\n}", "target_program": " int findMaxPath ( int mat [ ] [ M ] ) {\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    for ( int j = 0;\n    j < M;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], max ( mat [ i - 1 ] [ j - 1 ], mat [ i - 1 ] [ j + 1 ] ) );\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j - 1 ] );\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j + 1 ] );\n    }\n  }\n  int res = 0;\n  for ( int j = 0;\n  j < M;\n  j ++ ) res = max ( mat [ N - 1 ] [ j ], res );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxPath ( int mat [ ] [ M ] ) {\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    for ( int j = 0;\n    j < M;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], max ( mat [ i - 1 ] [ j - 1 ], mat [ i - 1 ] [ j + 1 ] ) );\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j - 1 ] );\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j + 1 ] );\n    }\n  }\n  int res = 0;\n  for ( int j = 0;\n  j < M;\n  j ++ ) res = max ( mat [ N - 1 ] [ j ], res );\n  return res;\n}", "target_program": " static int findMaxPath ( int mat [ ] [ ] ) {\n  int res = - 1 ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) res = max ( res , mat [ 0 ] [ i ] ) ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    res = - 1 ;\n    for ( int j = 0 ;\n    j < M ;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) ) ;\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] ) ;\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] ) ;\n      res = max ( mat [ i ] [ j ] , res ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxPath ( int mat [ ] [ M ] ) {\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    for ( int j = 0;\n    j < M;\n    j ++ ) {\n      if ( j > 0 && j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], max ( mat [ i - 1 ] [ j - 1 ], mat [ i - 1 ] [ j + 1 ] ) );\n      else if ( j > 0 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j - 1 ] );\n      else if ( j < M - 1 ) mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ], mat [ i - 1 ] [ j + 1 ] );\n    }\n  }\n  int res = 0;\n  for ( int j = 0;\n  j < M;\n  j ++ ) res = max ( mat [ N - 1 ] [ j ], res );\n  return res;\n}", "target_program": " def findMaxPath ( mat ) :\n    res = - 1\n    for i in range ( M ) :\n        res = max ( res , mat [ 0 ] [ i ] )\n    for i in range ( 1 , N ) :\n        res = - 1\n        for j in range ( M ) :\n            if ( j > 0 and j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , max ( mat [ i - 1 ] [ j - 1 ] , mat [ i - 1 ] [ j + 1 ] ) )\n            elif ( j > 0 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j - 1 ] )\n            elif ( j < M - 1 ) :\n                mat [ i ] [ j ] += max ( mat [ i - 1 ] [ j ] , mat [ i - 1 ] [ j + 1 ] )\n            res = max ( mat [ i ] [ j ] , res )\n    return res"}
{"source": "python", "target": "java", "source_program": " def maxRepeating ( str ) :\n    l = len ( str )\n    count = 0\n    res = str [ 0 ]\n    for i in range ( l ) :\n        cur_count = 1\n        for j in range ( i + 1 , l ) :\n            if ( str [ i ] != str [ j ] ) :\n                break\n            cur_count += 1\n        if cur_count > count :\n            count = cur_count\n            res = str [ i ]\n    return res", "target_program": " static char maxRepeating ( String str ) {\n  int len = str . length ( ) ;\n  int count = 0 ;\n  char res = str . charAt ( 0 ) ;\n  for ( int i = 0 ;\n  i < len ;\n  i ++ ) {\n    int cur_count = 1 ;\n    for ( int j = i + 1 ;\n    j < len ;\n    j ++ ) {\n      if ( str . charAt ( i ) != str . charAt ( j ) ) break ;\n      cur_count ++ ;\n    }\n    if ( cur_count > count ) {\n      count = cur_count ;\n      res = str . charAt ( i ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxRepeating ( str ) :\n    l = len ( str )\n    count = 0\n    res = str [ 0 ]\n    for i in range ( l ) :\n        cur_count = 1\n        for j in range ( i + 1 , l ) :\n            if ( str [ i ] != str [ j ] ) :\n                break\n            cur_count += 1\n        if cur_count > count :\n            count = cur_count\n            res = str [ i ]\n    return res", "target_program": " char maxRepeating ( string str ) {\n  int len = str . length ( );\n  int count = 0;\n  char res = str [ 0 ];\n  for ( int i = 0;\n  i < len;\n  i ++ ) {\n    int cur_count = 1;\n    for ( int j = i + 1;\n    j < len;\n    j ++ ) {\n      if ( str [ i ] != str [ j ] ) break;\n      cur_count ++;\n    }\n    if ( cur_count > count ) {\n      count = cur_count;\n      res = str [ i ];\n    }\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static char maxRepeating ( String str ) {\n  int len = str . length ( ) ;\n  int count = 0 ;\n  char res = str . charAt ( 0 ) ;\n  for ( int i = 0 ;\n  i < len ;\n  i ++ ) {\n    int cur_count = 1 ;\n    for ( int j = i + 1 ;\n    j < len ;\n    j ++ ) {\n      if ( str . charAt ( i ) != str . charAt ( j ) ) break ;\n      cur_count ++ ;\n    }\n    if ( cur_count > count ) {\n      count = cur_count ;\n      res = str . charAt ( i ) ;\n    }\n  }\n  return res ;\n}", "target_program": " def maxRepeating ( str ) :\n    l = len ( str )\n    count = 0\n    res = str [ 0 ]\n    for i in range ( l ) :\n        cur_count = 1\n        for j in range ( i + 1 , l ) :\n            if ( str [ i ] != str [ j ] ) :\n                break\n            cur_count += 1\n        if cur_count > count :\n            count = cur_count\n            res = str [ i ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static char maxRepeating ( String str ) {\n  int len = str . length ( ) ;\n  int count = 0 ;\n  char res = str . charAt ( 0 ) ;\n  for ( int i = 0 ;\n  i < len ;\n  i ++ ) {\n    int cur_count = 1 ;\n    for ( int j = i + 1 ;\n    j < len ;\n    j ++ ) {\n      if ( str . charAt ( i ) != str . charAt ( j ) ) break ;\n      cur_count ++ ;\n    }\n    if ( cur_count > count ) {\n      count = cur_count ;\n      res = str . charAt ( i ) ;\n    }\n  }\n  return res ;\n}", "target_program": " char maxRepeating ( string str ) {\n  int len = str . length ( );\n  int count = 0;\n  char res = str [ 0 ];\n  for ( int i = 0;\n  i < len;\n  i ++ ) {\n    int cur_count = 1;\n    for ( int j = i + 1;\n    j < len;\n    j ++ ) {\n      if ( str [ i ] != str [ j ] ) break;\n      cur_count ++;\n    }\n    if ( cur_count > count ) {\n      count = cur_count;\n      res = str [ i ];\n    }\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " char maxRepeating ( string str ) {\n  int len = str . length ( );\n  int count = 0;\n  char res = str [ 0 ];\n  for ( int i = 0;\n  i < len;\n  i ++ ) {\n    int cur_count = 1;\n    for ( int j = i + 1;\n    j < len;\n    j ++ ) {\n      if ( str [ i ] != str [ j ] ) break;\n      cur_count ++;\n    }\n    if ( cur_count > count ) {\n      count = cur_count;\n      res = str [ i ];\n    }\n  }\n  return res;\n}", "target_program": " static char maxRepeating ( String str ) {\n  int len = str . length ( ) ;\n  int count = 0 ;\n  char res = str . charAt ( 0 ) ;\n  for ( int i = 0 ;\n  i < len ;\n  i ++ ) {\n    int cur_count = 1 ;\n    for ( int j = i + 1 ;\n    j < len ;\n    j ++ ) {\n      if ( str . charAt ( i ) != str . charAt ( j ) ) break ;\n      cur_count ++ ;\n    }\n    if ( cur_count > count ) {\n      count = cur_count ;\n      res = str . charAt ( i ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " char maxRepeating ( string str ) {\n  int len = str . length ( );\n  int count = 0;\n  char res = str [ 0 ];\n  for ( int i = 0;\n  i < len;\n  i ++ ) {\n    int cur_count = 1;\n    for ( int j = i + 1;\n    j < len;\n    j ++ ) {\n      if ( str [ i ] != str [ j ] ) break;\n      cur_count ++;\n    }\n    if ( cur_count > count ) {\n      count = cur_count;\n      res = str [ i ];\n    }\n  }\n  return res;\n}", "target_program": " def maxRepeating ( str ) :\n    l = len ( str )\n    count = 0\n    res = str [ 0 ]\n    for i in range ( l ) :\n        cur_count = 1\n        for j in range ( i + 1 , l ) :\n            if ( str [ i ] != str [ j ] ) :\n                break\n            cur_count += 1\n        if cur_count > count :\n            count = cur_count\n            res = str [ i ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    for i in range ( n ) :\n        mls.append ( 1 )\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) :\n                mls [ i ] = mls [ j ] + 1\n    for i in range ( n ) :\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n    return max", "target_program": " public static int maxLenSub ( int arr [ ] , int n ) {\n  int mls [ ] = new int [ n ] , max = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) mls [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;\n  return max ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    for i in range ( n ) :\n        mls.append ( 1 )\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) :\n                mls [ i ] = mls [ j ] + 1\n    for i in range ( n ) :\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n    return max", "target_program": " int maxLenSub ( int arr [ ], int n ) {\n  int mls [ n ], max = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mls [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ];\n  return max;\n}"}
{"source": "java", "target": "python", "source_program": " public static int maxLenSub ( int arr [ ] , int n ) {\n  int mls [ ] = new int [ n ] , max = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) mls [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;\n  return max ;\n}", "target_program": " def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    for i in range ( n ) :\n        mls.append ( 1 )\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) :\n                mls [ i ] = mls [ j ] + 1\n    for i in range ( n ) :\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n    return max"}
{"source": "java", "target": "cpp", "source_program": " public static int maxLenSub ( int arr [ ] , int n ) {\n  int mls [ ] = new int [ n ] , max = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) mls [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;\n  return max ;\n}", "target_program": " int maxLenSub ( int arr [ ], int n ) {\n  int mls [ n ], max = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mls [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ];\n  return max;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxLenSub ( int arr [ ], int n ) {\n  int mls [ n ], max = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mls [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ];\n  return max;\n}", "target_program": " public static int maxLenSub ( int arr [ ] , int n ) {\n  int mls [ ] = new int [ n ] , max = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) mls [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( Math . abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ] ;\n  return max ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxLenSub ( int arr [ ], int n ) {\n  int mls [ n ], max = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mls [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) <= 1 && mls [ i ] < mls [ j ] + 1 ) mls [ i ] = mls [ j ] + 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max < mls [ i ] ) max = mls [ i ];\n  return max;\n}", "target_program": " def maxLenSub ( arr , n ) :\n    mls = [ ]\n    max = 0\n    for i in range ( n ) :\n        mls.append ( 1 )\n    for i in range ( n ) :\n        for j in range ( i ) :\n            if ( abs ( arr [ i ] - arr [ j ] ) <= 1 and mls [ i ] < mls [ j ] + 1 ) :\n                mls [ i ] = mls [ j ] + 1\n    for i in range ( n ) :\n        if ( max < mls [ i ] ) :\n            max = mls [ i ]\n    return max"}
{"source": "python", "target": "java", "source_program": " def binaryToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 2 ;\n    return dec_value ;", "target_program": " static int binaryToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 2 ;\n  }\n  return dec_value ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def binaryToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 2 ;\n    return dec_value ;", "target_program": " int binaryToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 2;\n  }\n  return dec_value;\n}"}
{"source": "java", "target": "python", "source_program": " static int binaryToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 2 ;\n  }\n  return dec_value ;\n}", "target_program": " def binaryToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 2 ;\n    return dec_value ;"}
{"source": "java", "target": "cpp", "source_program": " static int binaryToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 2 ;\n  }\n  return dec_value ;\n}", "target_program": " int binaryToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 2;\n  }\n  return dec_value;\n}"}
{"source": "cpp", "target": "java", "source_program": " int binaryToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 2;\n  }\n  return dec_value;\n}", "target_program": " static int binaryToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 2 ;\n  }\n  return dec_value ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int binaryToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 2;\n  }\n  return dec_value;\n}", "target_program": " def binaryToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 2 ;\n    return dec_value ;"}
{"source": "python", "target": "java", "source_program": " def getSum ( n ) :\n    sum = 0\n    while ( n != 0 ) :\n        sum = sum + int ( n % 10 )\n        n = int ( n / 10 )\n    return sum", "target_program": " static int getSum ( int n ) {\n  int sum = 0 ;\n  while ( n != 0 ) {\n    sum = sum + n % 10 ;\n    n = n / 10 ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getSum ( n ) :\n    sum = 0\n    while ( n != 0 ) :\n        sum = sum + int ( n % 10 )\n        n = int ( n / 10 )\n    return sum", "target_program": " public : int getSum ( int n ) {\n  int sum = 0;\n  while ( n != 0 ) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int getSum ( int n ) {\n  int sum = 0 ;\n  while ( n != 0 ) {\n    sum = sum + n % 10 ;\n    n = n / 10 ;\n  }\n  return sum ;\n}", "target_program": " def getSum ( n ) :\n    sum = 0\n    while ( n != 0 ) :\n        sum = sum + int ( n % 10 )\n        n = int ( n / 10 )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int getSum ( int n ) {\n  int sum = 0 ;\n  while ( n != 0 ) {\n    sum = sum + n % 10 ;\n    n = n / 10 ;\n  }\n  return sum ;\n}", "target_program": " public : int getSum ( int n ) {\n  int sum = 0;\n  while ( n != 0 ) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " public : int getSum ( int n ) {\n  int sum = 0;\n  while ( n != 0 ) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}", "target_program": " static int getSum ( int n ) {\n  int sum = 0 ;\n  while ( n != 0 ) {\n    sum = sum + n % 10 ;\n    n = n / 10 ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : int getSum ( int n ) {\n  int sum = 0;\n  while ( n != 0 ) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}", "target_program": " def getSum ( n ) :\n    sum = 0\n    while ( n != 0 ) :\n        sum = sum + int ( n % 10 )\n        n = int ( n / 10 )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n    return DP [ n ]", "target_program": " static int findSDSFunc ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = 0 ;\n  DP [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ] ;\n  }\n  return DP [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n    return DP [ n ]", "target_program": " int findSDSFunc ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = 0;\n  DP [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ];\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ];\n  }\n  return DP [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int findSDSFunc ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = 0 ;\n  DP [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ] ;\n  }\n  return DP [ n ] ;\n}", "target_program": " def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n    return DP [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int findSDSFunc ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = 0 ;\n  DP [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ] ;\n  }\n  return DP [ n ] ;\n}", "target_program": " int findSDSFunc ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = 0;\n  DP [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ];\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ];\n  }\n  return DP [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSDSFunc ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = 0;\n  DP [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ];\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ];\n  }\n  return DP [ n ];\n}", "target_program": " static int findSDSFunc ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = 0 ;\n  DP [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ] ;\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ] ;\n  }\n  return DP [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSDSFunc ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = 0;\n  DP [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i % 2 == 0 ) DP [ i ] = DP [ i / 2 ];\n    else DP [ i ] = DP [ ( i - 1 ) / 2 ] + DP [ ( i + 1 ) / 2 ];\n  }\n  return DP [ n ];\n}", "target_program": " def findSDSFunc ( n ) :\n    DP = [ 0 ] * ( n + 1 )\n    DP [ 0 ] = 0\n    DP [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        if ( int ( i % 2 ) == 0 ) :\n            DP [ i ] = DP [ int ( i / 2 ) ]\n        else :\n            DP [ i ] = ( DP [ int ( ( i - 1 ) / 2 ) ] + DP [ int ( ( i + 1 ) / 2 ) ] )\n    return DP [ n ]"}
{"source": "python", "target": "java", "source_program": " def countSink ( n , m , edgeFrom , edgeTo ) :\n    mark = [ 0 ] * ( n + 1 )\n    for i in range ( m ) :\n        mark [ edgeFrom [ i ] ] = 1\n    count = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( not mark [ i ] ) :\n            count += 1\n    return count", "target_program": " static int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo [ ] ) {\n  int [ ] mark = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1 ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) if ( mark [ i ] == 0 ) count ++ ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSink ( n , m , edgeFrom , edgeTo ) :\n    mark = [ 0 ] * ( n + 1 )\n    for i in range ( m ) :\n        mark [ edgeFrom [ i ] ] = 1\n    count = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( not mark [ i ] ) :\n            count += 1\n    return count", "target_program": " int countSink ( int n, int m, int edgeFrom [ ], int edgeTo [ ] ) {\n  int mark [ n ];\n  memset ( mark, 0, sizeof mark );\n  for ( int i = 0;\n  i < m;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1;\n  int count = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) if ( ! mark [ i ] ) count ++;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo [ ] ) {\n  int [ ] mark = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1 ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) if ( mark [ i ] == 0 ) count ++ ;\n  return count ;\n}", "target_program": " def countSink ( n , m , edgeFrom , edgeTo ) :\n    mark = [ 0 ] * ( n + 1 )\n    for i in range ( m ) :\n        mark [ edgeFrom [ i ] ] = 1\n    count = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( not mark [ i ] ) :\n            count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo [ ] ) {\n  int [ ] mark = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1 ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) if ( mark [ i ] == 0 ) count ++ ;\n  return count ;\n}", "target_program": " int countSink ( int n, int m, int edgeFrom [ ], int edgeTo [ ] ) {\n  int mark [ n ];\n  memset ( mark, 0, sizeof mark );\n  for ( int i = 0;\n  i < m;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1;\n  int count = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) if ( ! mark [ i ] ) count ++;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSink ( int n, int m, int edgeFrom [ ], int edgeTo [ ] ) {\n  int mark [ n ];\n  memset ( mark, 0, sizeof mark );\n  for ( int i = 0;\n  i < m;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1;\n  int count = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) if ( ! mark [ i ] ) count ++;\n  return count;\n}", "target_program": " static int countSink ( int n , int m , int edgeFrom [ ] , int edgeTo [ ] ) {\n  int [ ] mark = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1 ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) if ( mark [ i ] == 0 ) count ++ ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSink ( int n, int m, int edgeFrom [ ], int edgeTo [ ] ) {\n  int mark [ n ];\n  memset ( mark, 0, sizeof mark );\n  for ( int i = 0;\n  i < m;\n  i ++ ) mark [ edgeFrom [ i ] ] = 1;\n  int count = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) if ( ! mark [ i ] ) count ++;\n  return count;\n}", "target_program": " def countSink ( n , m , edgeFrom , edgeTo ) :\n    mark = [ 0 ] * ( n + 1 )\n    for i in range ( m ) :\n        mark [ edgeFrom [ i ] ] = 1\n    count = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( not mark [ i ] ) :\n            count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def count_of_ways ( n ) :\n    count = 0\n    for i in range ( 0 , n + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            for k in range ( 0 , n + 1 ) :\n                if ( i + j + k == n ) :\n                    count = count + 1\n    return count", "target_program": " static long count_of_ways ( long n ) {\n  long count = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) for ( int k = 0 ;\n  k <= n ;\n  k ++ ) if ( i + j + k == n ) count ++ ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def count_of_ways ( n ) :\n    count = 0\n    for i in range ( 0 , n + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            for k in range ( 0 , n + 1 ) :\n                if ( i + j + k == n ) :\n                    count = count + 1\n    return count", "target_program": " ll count_of_ways ( ll n ) {\n  ll count = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) for ( int k = 0;\n  k <= n;\n  k ++ ) if ( i + j + k == n ) count ++;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static long count_of_ways ( long n ) {\n  long count = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) for ( int k = 0 ;\n  k <= n ;\n  k ++ ) if ( i + j + k == n ) count ++ ;\n  return count ;\n}", "target_program": " def count_of_ways ( n ) :\n    count = 0\n    for i in range ( 0 , n + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            for k in range ( 0 , n + 1 ) :\n                if ( i + j + k == n ) :\n                    count = count + 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static long count_of_ways ( long n ) {\n  long count = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) for ( int k = 0 ;\n  k <= n ;\n  k ++ ) if ( i + j + k == n ) count ++ ;\n  return count ;\n}", "target_program": " ll count_of_ways ( ll n ) {\n  ll count = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) for ( int k = 0;\n  k <= n;\n  k ++ ) if ( i + j + k == n ) count ++;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " ll count_of_ways ( ll n ) {\n  ll count = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) for ( int k = 0;\n  k <= n;\n  k ++ ) if ( i + j + k == n ) count ++;\n  return count;\n}", "target_program": " static long count_of_ways ( long n ) {\n  long count = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) for ( int k = 0 ;\n  k <= n ;\n  k ++ ) if ( i + j + k == n ) count ++ ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " ll count_of_ways ( ll n ) {\n  ll count = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) for ( int k = 0;\n  k <= n;\n  k ++ ) if ( i + j + k == n ) count ++;\n  return count;\n}", "target_program": " def count_of_ways ( n ) :\n    count = 0\n    for i in range ( 0 , n + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            for k in range ( 0 , n + 1 ) :\n                if ( i + j + k == n ) :\n                    count = count + 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def printDistinct ( arr , n ) :\n    for i in range ( 0 , n ) :\n        d = 0\n        for j in range ( 0 , i ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                d = 1\n                break\n        if ( d == 0 ) :\n            print ( arr [ i ] )", "target_program": " static void printDistinct ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < i ;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;\n    if ( i == j ) System . out . print ( arr [ i ] + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDistinct ( arr , n ) :\n    for i in range ( 0 , n ) :\n        d = 0\n        for j in range ( 0 , i ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                d = 1\n                break\n        if ( d == 0 ) :\n            print ( arr [ i ] )", "target_program": " void printDistinct ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break;\n    if ( i == j ) cout << arr [ i ] << \" \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printDistinct ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < i ;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;\n    if ( i == j ) System . out . print ( arr [ i ] + \" \" ) ;\n  }\n}", "target_program": " def printDistinct ( arr , n ) :\n    for i in range ( 0 , n ) :\n        d = 0\n        for j in range ( 0 , i ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                d = 1\n                break\n        if ( d == 0 ) :\n            print ( arr [ i ] )"}
{"source": "java", "target": "cpp", "source_program": " static void printDistinct ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < i ;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;\n    if ( i == j ) System . out . print ( arr [ i ] + \" \" ) ;\n  }\n}", "target_program": " void printDistinct ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break;\n    if ( i == j ) cout << arr [ i ] << \" \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDistinct ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break;\n    if ( i == j ) cout << arr [ i ] << \" \";\n  }\n}", "target_program": " static void printDistinct ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < i ;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break ;\n    if ( i == j ) System . out . print ( arr [ i ] + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDistinct ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] == arr [ j ] ) break;\n    if ( i == j ) cout << arr [ i ] << \" \";\n  }\n}", "target_program": " def printDistinct ( arr , n ) :\n    for i in range ( 0 , n ) :\n        d = 0\n        for j in range ( 0 , i ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                d = 1\n                break\n        if ( d == 0 ) :\n            print ( arr [ i ] )"}
{"source": "python", "target": "java", "source_program": " def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    for i in range ( 0 , n ) :\n        if ( dp [ i ] != - 1 ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n    return dp [ n ]", "target_program": " static int maximumSegments ( int n , int a , int b , int c ) {\n  int dp [ ] = new int [ n + 10 ] ;\n  Arrays . fill ( dp , - 1 ) ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = Math . max ( dp [ i ] + 1 , dp [ i + a ] ) ;\n      if ( i + b <= n ) dp [ i + b ] = Math . max ( dp [ i ] + 1 , dp [ i + b ] ) ;\n      if ( i + c <= n ) dp [ i + c ] = Math . max ( dp [ i ] + 1 , dp [ i + c ] ) ;\n    }\n  }\n  return dp [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    for i in range ( 0 , n ) :\n        if ( dp [ i ] != - 1 ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n    return dp [ n ]", "target_program": " int maximumSegments ( int n, int a, int b, int c ) {\n  int dp [ n + 1 ];\n  memset ( dp, - 1, sizeof ( dp ) );\n  dp [ 0 ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1, dp [ i + a ] );\n      if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1, dp [ i + b ] );\n      if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1, dp [ i + c ] );\n    }\n  }\n  return dp [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumSegments ( int n , int a , int b , int c ) {\n  int dp [ ] = new int [ n + 10 ] ;\n  Arrays . fill ( dp , - 1 ) ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = Math . max ( dp [ i ] + 1 , dp [ i + a ] ) ;\n      if ( i + b <= n ) dp [ i + b ] = Math . max ( dp [ i ] + 1 , dp [ i + b ] ) ;\n      if ( i + c <= n ) dp [ i + c ] = Math . max ( dp [ i ] + 1 , dp [ i + c ] ) ;\n    }\n  }\n  return dp [ n ] ;\n}", "target_program": " def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    for i in range ( 0 , n ) :\n        if ( dp [ i ] != - 1 ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n    return dp [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int maximumSegments ( int n , int a , int b , int c ) {\n  int dp [ ] = new int [ n + 10 ] ;\n  Arrays . fill ( dp , - 1 ) ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = Math . max ( dp [ i ] + 1 , dp [ i + a ] ) ;\n      if ( i + b <= n ) dp [ i + b ] = Math . max ( dp [ i ] + 1 , dp [ i + b ] ) ;\n      if ( i + c <= n ) dp [ i + c ] = Math . max ( dp [ i ] + 1 , dp [ i + c ] ) ;\n    }\n  }\n  return dp [ n ] ;\n}", "target_program": " int maximumSegments ( int n, int a, int b, int c ) {\n  int dp [ n + 1 ];\n  memset ( dp, - 1, sizeof ( dp ) );\n  dp [ 0 ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1, dp [ i + a ] );\n      if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1, dp [ i + b ] );\n      if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1, dp [ i + c ] );\n    }\n  }\n  return dp [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumSegments ( int n, int a, int b, int c ) {\n  int dp [ n + 1 ];\n  memset ( dp, - 1, sizeof ( dp ) );\n  dp [ 0 ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1, dp [ i + a ] );\n      if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1, dp [ i + b ] );\n      if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1, dp [ i + c ] );\n    }\n  }\n  return dp [ n ];\n}", "target_program": " static int maximumSegments ( int n , int a , int b , int c ) {\n  int dp [ ] = new int [ n + 10 ] ;\n  Arrays . fill ( dp , - 1 ) ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = Math . max ( dp [ i ] + 1 , dp [ i + a ] ) ;\n      if ( i + b <= n ) dp [ i + b ] = Math . max ( dp [ i ] + 1 , dp [ i + b ] ) ;\n      if ( i + c <= n ) dp [ i + c ] = Math . max ( dp [ i ] + 1 , dp [ i + c ] ) ;\n    }\n  }\n  return dp [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumSegments ( int n, int a, int b, int c ) {\n  int dp [ n + 1 ];\n  memset ( dp, - 1, sizeof ( dp ) );\n  dp [ 0 ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( dp [ i ] != - 1 ) {\n      if ( i + a <= n ) dp [ i + a ] = max ( dp [ i ] + 1, dp [ i + a ] );\n      if ( i + b <= n ) dp [ i + b ] = max ( dp [ i ] + 1, dp [ i + b ] );\n      if ( i + c <= n ) dp [ i + c ] = max ( dp [ i ] + 1, dp [ i + c ] );\n    }\n  }\n  return dp [ n ];\n}", "target_program": " def maximumSegments ( n , a , b , c ) :\n    dp = [ - 1 ] * ( n + 10 )\n    dp [ 0 ] = 0\n    for i in range ( 0 , n ) :\n        if ( dp [ i ] != - 1 ) :\n            if ( i + a <= n ) :\n                dp [ i + a ] = max ( dp [ i ] + 1 , dp [ i + a ] )\n            if ( i + b <= n ) :\n                dp [ i + b ] = max ( dp [ i ] + 1 , dp [ i + b ] )\n            if ( i + c <= n ) :\n                dp [ i + c ] = max ( dp [ i ] + 1 , dp [ i + c ] )\n    return dp [ n ]"}
{"source": "python", "target": "java", "source_program": " def findGreatest ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result", "target_program": " static int findGreatest ( int [ ] arr , int n ) {\n  int result = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = Math . max ( result , arr [ i ] ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findGreatest ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result", "target_program": " int findGreatest ( int arr [ ], int n ) {\n  int result = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = max ( result, arr [ i ] );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int findGreatest ( int [ ] arr , int n ) {\n  int result = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = Math . max ( result , arr [ i ] ) ;\n  return result ;\n}", "target_program": " def findGreatest ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int findGreatest ( int [ ] arr , int n ) {\n  int result = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = Math . max ( result , arr [ i ] ) ;\n  return result ;\n}", "target_program": " int findGreatest ( int arr [ ], int n ) {\n  int result = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = max ( result, arr [ i ] );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findGreatest ( int arr [ ], int n ) {\n  int result = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = max ( result, arr [ i ] );\n  return result;\n}", "target_program": " static int findGreatest ( int [ ] arr , int n ) {\n  int result = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = Math . max ( result , arr [ i ] ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findGreatest ( int arr [ ], int n ) {\n  int result = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( arr [ j ] * arr [ k ] == arr [ i ] ) result = max ( result, arr [ i ] );\n  return result;\n}", "target_program": " def findGreatest ( arr , n ) :\n    result = - 1\n    for i in range ( n ) :\n        for j in range ( n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ j ] * arr [ k ] == arr [ i ] ) :\n                    result = max ( result , arr [ i ] )\n    return result"}
{"source": "python", "target": "java", "source_program": " def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    for i in range ( n * k ) :\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) :\n            max_ending_here = 0\n    return max_so_far", "target_program": " static int maxSubArraySumRepeated ( int a [ ] , int n , int k ) {\n  int max_so_far = 0 ;\n  int INT_MIN , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < n * k ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    for i in range ( n * k ) :\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) :\n            max_ending_here = 0\n    return max_so_far", "target_program": " int maxSubArraySumRepeated ( int a [ ], int n, int k ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < n * k;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSubArraySumRepeated ( int a [ ] , int n , int k ) {\n  int max_so_far = 0 ;\n  int INT_MIN , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < n * k ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}", "target_program": " def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    for i in range ( n * k ) :\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) :\n            max_ending_here = 0\n    return max_so_far"}
{"source": "java", "target": "cpp", "source_program": " static int maxSubArraySumRepeated ( int a [ ] , int n , int k ) {\n  int max_so_far = 0 ;\n  int INT_MIN , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < n * k ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}", "target_program": " int maxSubArraySumRepeated ( int a [ ], int n, int k ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < n * k;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSubArraySumRepeated ( int a [ ], int n, int k ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < n * k;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}", "target_program": " static int maxSubArraySumRepeated ( int a [ ] , int n , int k ) {\n  int max_so_far = 0 ;\n  int INT_MIN , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < n * k ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSubArraySumRepeated ( int a [ ], int n, int k ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < n * k;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i % n ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}", "target_program": " def maxSubArraySumRepeated ( a , n , k ) :\n    max_so_far = - 2147483648\n    max_ending_here = 0\n    for i in range ( n * k ) :\n        max_ending_here = max_ending_here + a [ i % n ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if ( max_ending_here < 0 ) :\n            max_ending_here = 0\n    return max_so_far"}
{"source": "python", "target": "java", "source_program": " def leonardo ( n ) :\n    dp = [ ] ;\n    dp.append ( 1 ) ;\n    dp.append ( 1 ) ;\n    for i in range ( 2 , n + 1 ) :\n        dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;\n    return dp [ n ] ;", "target_program": " static int leonardo ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;\n  return dp [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def leonardo ( n ) :\n    dp = [ ] ;\n    dp.append ( 1 ) ;\n    dp.append ( 1 ) ;\n    for i in range ( 2 , n + 1 ) :\n        dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;\n    return dp [ n ] ;", "target_program": " int leonardo ( int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1;\n  return dp [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int leonardo ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;\n  return dp [ n ] ;\n}", "target_program": " def leonardo ( n ) :\n    dp = [ ] ;\n    dp.append ( 1 ) ;\n    dp.append ( 1 ) ;\n    for i in range ( 2 , n + 1 ) :\n        dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;\n    return dp [ n ] ;"}
{"source": "java", "target": "cpp", "source_program": " static int leonardo ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;\n  return dp [ n ] ;\n}", "target_program": " int leonardo ( int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1;\n  return dp [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int leonardo ( int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1;\n  return dp [ n ];\n}", "target_program": " static int leonardo ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1 ;\n  return dp [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int leonardo ( int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + dp [ i - 2 ] + 1;\n  return dp [ n ];\n}", "target_program": " def leonardo ( n ) :\n    dp = [ ] ;\n    dp.append ( 1 ) ;\n    dp.append ( 1 ) ;\n    for i in range ( 2 , n + 1 ) :\n        dp.append ( dp [ i - 1 ] + dp [ i - 2 ] + 1 ) ;\n    return dp [ n ] ;"}
{"source": "python", "target": "java", "source_program": " def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( int ( num [ 0 ] ) )\n    res = sumofdigit [ 0 ]\n    for i in range ( 1 , n ) :\n        numi = int ( num [ i ] )\n        sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] )\n        res += sumofdigit [ i ]\n    return res", "target_program": " public static int sumOfSubstrings ( String num ) {\n  int n = num . length ( ) ;\n  int sumofdigit [ ] = new int [ n ] ;\n  sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ;\n  int res = sumofdigit [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int numi = num . charAt ( i ) - '0' ;\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ;\n    res += sumofdigit [ i ] ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( int ( num [ 0 ] ) )\n    res = sumofdigit [ 0 ]\n    for i in range ( 1 , n ) :\n        numi = int ( num [ i ] )\n        sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] )\n        res += sumofdigit [ i ]\n    return res", "target_program": " int sumOfSubstrings ( string num ) {\n  int n = num . length ( );\n  int sumofdigit [ n ];\n  sumofdigit [ 0 ] = toDigit ( num [ 0 ] );\n  int res = sumofdigit [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int numi = toDigit ( num [ i ] );\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ];\n    res += sumofdigit [ i ];\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " public static int sumOfSubstrings ( String num ) {\n  int n = num . length ( ) ;\n  int sumofdigit [ ] = new int [ n ] ;\n  sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ;\n  int res = sumofdigit [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int numi = num . charAt ( i ) - '0' ;\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ;\n    res += sumofdigit [ i ] ;\n  }\n  return res ;\n}", "target_program": " def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( int ( num [ 0 ] ) )\n    res = sumofdigit [ 0 ]\n    for i in range ( 1 , n ) :\n        numi = int ( num [ i ] )\n        sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] )\n        res += sumofdigit [ i ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " public static int sumOfSubstrings ( String num ) {\n  int n = num . length ( ) ;\n  int sumofdigit [ ] = new int [ n ] ;\n  sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ;\n  int res = sumofdigit [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int numi = num . charAt ( i ) - '0' ;\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ;\n    res += sumofdigit [ i ] ;\n  }\n  return res ;\n}", "target_program": " int sumOfSubstrings ( string num ) {\n  int n = num . length ( );\n  int sumofdigit [ n ];\n  sumofdigit [ 0 ] = toDigit ( num [ 0 ] );\n  int res = sumofdigit [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int numi = toDigit ( num [ i ] );\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ];\n    res += sumofdigit [ i ];\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumOfSubstrings ( string num ) {\n  int n = num . length ( );\n  int sumofdigit [ n ];\n  sumofdigit [ 0 ] = toDigit ( num [ 0 ] );\n  int res = sumofdigit [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int numi = toDigit ( num [ i ] );\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ];\n    res += sumofdigit [ i ];\n  }\n  return res;\n}", "target_program": " public static int sumOfSubstrings ( String num ) {\n  int n = num . length ( ) ;\n  int sumofdigit [ ] = new int [ n ] ;\n  sumofdigit [ 0 ] = num . charAt ( 0 ) - '0' ;\n  int res = sumofdigit [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int numi = num . charAt ( i ) - '0' ;\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] ;\n    res += sumofdigit [ i ] ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumOfSubstrings ( string num ) {\n  int n = num . length ( );\n  int sumofdigit [ n ];\n  sumofdigit [ 0 ] = toDigit ( num [ 0 ] );\n  int res = sumofdigit [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int numi = toDigit ( num [ i ] );\n    sumofdigit [ i ] = ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ];\n    res += sumofdigit [ i ];\n  }\n  return res;\n}", "target_program": " def sumOfSubstrings ( num ) :\n    n = len ( num )\n    sumofdigit = [ ]\n    sumofdigit.append ( int ( num [ 0 ] ) )\n    res = sumofdigit [ 0 ]\n    for i in range ( 1 , n ) :\n        numi = int ( num [ i ] )\n        sumofdigit.append ( ( i + 1 ) * numi + 10 * sumofdigit [ i - 1 ] )\n        res += sumofdigit [ i ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def printTreeEdges ( prufer , m ) :\n    vertices = m + 2\n    vertex_set = [ 0 ] * vertices\n    for i in range ( vertices - 2 ) :\n        vertex_set [ prufer [ i ] - 1 ] += 1\n    print ( \"The edge set E(G) is :\" )\n    j = 0\n    for i in range ( vertices - 2 ) :\n        for j in range ( vertices ) :\n            if ( vertex_set [ j ] == 0 ) :\n                vertex_set [ j ] = - 1\n                print ( \"(\" , ( j + 1 ) , \", \" , prufer [ i ] , \") \" , sep = \"\" , end = \"\" )\n                vertex_set [ prufer [ i ] - 1 ] -= 1\n                break\n    j = 0\n    for i in range ( vertices ) :\n        if ( vertex_set [ i ] == 0 and j == 0 ) :\n            print ( \"(\" , ( i + 1 ) , \", \" , sep = \"\" , end = \"\" )\n            j += 1\n        elif ( vertex_set [ i ] == 0 and j == 1 ) :\n            print ( ( i + 1 ) , \")\" )", "target_program": " static void printTreeEdges ( int prufer [ ] , int m ) {\n  int vertices = m + 2 ;\n  int vertex_set [ ] = new int [ vertices ] ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) vertex_set [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;\n  System . out . print ( \"\\nThe edge set E(G) is :\\n\" ) ;\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < vertices ;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1 ;\n        System . out . print ( \"(\" + ( j + 1 ) + \", \" + prufer [ i ] + \") \" ) ;\n        vertex_set [ prufer [ i ] - 1 ] -- ;\n        break ;\n      }\n    }\n  }\n  j = 0 ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      System . out . print ( \"(\" + ( i + 1 ) + \", \" ) ;\n      j ++ ;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) System . out . print ( ( i + 1 ) + \")\\n\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printTreeEdges ( prufer , m ) :\n    vertices = m + 2\n    vertex_set = [ 0 ] * vertices\n    for i in range ( vertices - 2 ) :\n        vertex_set [ prufer [ i ] - 1 ] += 1\n    print ( \"The edge set E(G) is :\" )\n    j = 0\n    for i in range ( vertices - 2 ) :\n        for j in range ( vertices ) :\n            if ( vertex_set [ j ] == 0 ) :\n                vertex_set [ j ] = - 1\n                print ( \"(\" , ( j + 1 ) , \", \" , prufer [ i ] , \") \" , sep = \"\" , end = \"\" )\n                vertex_set [ prufer [ i ] - 1 ] -= 1\n                break\n    j = 0\n    for i in range ( vertices ) :\n        if ( vertex_set [ i ] == 0 and j == 0 ) :\n            print ( \"(\" , ( i + 1 ) , \", \" , sep = \"\" , end = \"\" )\n            j += 1\n        elif ( vertex_set [ i ] == 0 and j == 1 ) :\n            print ( ( i + 1 ) , \")\" )", "target_program": " void printTreeEdges ( int prufer [ ], int m ) {\n  int vertices = m + 2;\n  int vertex_set [ vertices ];\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) vertex_set [ i ] = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1;\n  cout << \"\\nThe edge set E(G) is :\\n\";\n  int j = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) {\n    for ( j = 0;\n    j < vertices;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1;\n        cout << \"(\" << ( j + 1 ) << \", \" << prufer [ i ] << \")  \";\n        vertex_set [ prufer [ i ] - 1 ] --;\n        break;\n      }\n    }\n  }\n  j = 0;\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      cout << \"(\" << ( i + 1 ) << \", \";\n      j ++;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) cout << ( i + 1 ) << \")\\n\";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printTreeEdges ( int prufer [ ] , int m ) {\n  int vertices = m + 2 ;\n  int vertex_set [ ] = new int [ vertices ] ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) vertex_set [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;\n  System . out . print ( \"\\nThe edge set E(G) is :\\n\" ) ;\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < vertices ;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1 ;\n        System . out . print ( \"(\" + ( j + 1 ) + \", \" + prufer [ i ] + \") \" ) ;\n        vertex_set [ prufer [ i ] - 1 ] -- ;\n        break ;\n      }\n    }\n  }\n  j = 0 ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      System . out . print ( \"(\" + ( i + 1 ) + \", \" ) ;\n      j ++ ;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) System . out . print ( ( i + 1 ) + \")\\n\" ) ;\n  }\n}", "target_program": " def printTreeEdges ( prufer , m ) :\n    vertices = m + 2\n    vertex_set = [ 0 ] * vertices\n    for i in range ( vertices - 2 ) :\n        vertex_set [ prufer [ i ] - 1 ] += 1\n    print ( \"The edge set E(G) is :\" )\n    j = 0\n    for i in range ( vertices - 2 ) :\n        for j in range ( vertices ) :\n            if ( vertex_set [ j ] == 0 ) :\n                vertex_set [ j ] = - 1\n                print ( \"(\" , ( j + 1 ) , \", \" , prufer [ i ] , \") \" , sep = \"\" , end = \"\" )\n                vertex_set [ prufer [ i ] - 1 ] -= 1\n                break\n    j = 0\n    for i in range ( vertices ) :\n        if ( vertex_set [ i ] == 0 and j == 0 ) :\n            print ( \"(\" , ( i + 1 ) , \", \" , sep = \"\" , end = \"\" )\n            j += 1\n        elif ( vertex_set [ i ] == 0 and j == 1 ) :\n            print ( ( i + 1 ) , \")\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printTreeEdges ( int prufer [ ] , int m ) {\n  int vertices = m + 2 ;\n  int vertex_set [ ] = new int [ vertices ] ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) vertex_set [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;\n  System . out . print ( \"\\nThe edge set E(G) is :\\n\" ) ;\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < vertices ;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1 ;\n        System . out . print ( \"(\" + ( j + 1 ) + \", \" + prufer [ i ] + \") \" ) ;\n        vertex_set [ prufer [ i ] - 1 ] -- ;\n        break ;\n      }\n    }\n  }\n  j = 0 ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      System . out . print ( \"(\" + ( i + 1 ) + \", \" ) ;\n      j ++ ;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) System . out . print ( ( i + 1 ) + \")\\n\" ) ;\n  }\n}", "target_program": " void printTreeEdges ( int prufer [ ], int m ) {\n  int vertices = m + 2;\n  int vertex_set [ vertices ];\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) vertex_set [ i ] = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1;\n  cout << \"\\nThe edge set E(G) is :\\n\";\n  int j = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) {\n    for ( j = 0;\n    j < vertices;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1;\n        cout << \"(\" << ( j + 1 ) << \", \" << prufer [ i ] << \")  \";\n        vertex_set [ prufer [ i ] - 1 ] --;\n        break;\n      }\n    }\n  }\n  j = 0;\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      cout << \"(\" << ( i + 1 ) << \", \";\n      j ++;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) cout << ( i + 1 ) << \")\\n\";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printTreeEdges ( int prufer [ ], int m ) {\n  int vertices = m + 2;\n  int vertex_set [ vertices ];\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) vertex_set [ i ] = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1;\n  cout << \"\\nThe edge set E(G) is :\\n\";\n  int j = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) {\n    for ( j = 0;\n    j < vertices;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1;\n        cout << \"(\" << ( j + 1 ) << \", \" << prufer [ i ] << \")  \";\n        vertex_set [ prufer [ i ] - 1 ] --;\n        break;\n      }\n    }\n  }\n  j = 0;\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      cout << \"(\" << ( i + 1 ) << \", \";\n      j ++;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) cout << ( i + 1 ) << \")\\n\";\n  }\n}", "target_program": " static void printTreeEdges ( int prufer [ ] , int m ) {\n  int vertices = m + 2 ;\n  int vertex_set [ ] = new int [ vertices ] ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) vertex_set [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1 ;\n  System . out . print ( \"\\nThe edge set E(G) is :\\n\" ) ;\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < vertices - 2 ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < vertices ;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1 ;\n        System . out . print ( \"(\" + ( j + 1 ) + \", \" + prufer [ i ] + \") \" ) ;\n        vertex_set [ prufer [ i ] - 1 ] -- ;\n        break ;\n      }\n    }\n  }\n  j = 0 ;\n  for ( int i = 0 ;\n  i < vertices ;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      System . out . print ( \"(\" + ( i + 1 ) + \", \" ) ;\n      j ++ ;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) System . out . print ( ( i + 1 ) + \")\\n\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printTreeEdges ( int prufer [ ], int m ) {\n  int vertices = m + 2;\n  int vertex_set [ vertices ];\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) vertex_set [ i ] = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) vertex_set [ prufer [ i ] - 1 ] += 1;\n  cout << \"\\nThe edge set E(G) is :\\n\";\n  int j = 0;\n  for ( int i = 0;\n  i < vertices - 2;\n  i ++ ) {\n    for ( j = 0;\n    j < vertices;\n    j ++ ) {\n      if ( vertex_set [ j ] == 0 ) {\n        vertex_set [ j ] = - 1;\n        cout << \"(\" << ( j + 1 ) << \", \" << prufer [ i ] << \")  \";\n        vertex_set [ prufer [ i ] - 1 ] --;\n        break;\n      }\n    }\n  }\n  j = 0;\n  for ( int i = 0;\n  i < vertices;\n  i ++ ) {\n    if ( vertex_set [ i ] == 0 && j == 0 ) {\n      cout << \"(\" << ( i + 1 ) << \", \";\n      j ++;\n    }\n    else if ( vertex_set [ i ] == 0 && j == 1 ) cout << ( i + 1 ) << \")\\n\";\n  }\n}", "target_program": " def printTreeEdges ( prufer , m ) :\n    vertices = m + 2\n    vertex_set = [ 0 ] * vertices\n    for i in range ( vertices - 2 ) :\n        vertex_set [ prufer [ i ] - 1 ] += 1\n    print ( \"The edge set E(G) is :\" )\n    j = 0\n    for i in range ( vertices - 2 ) :\n        for j in range ( vertices ) :\n            if ( vertex_set [ j ] == 0 ) :\n                vertex_set [ j ] = - 1\n                print ( \"(\" , ( j + 1 ) , \", \" , prufer [ i ] , \") \" , sep = \"\" , end = \"\" )\n                vertex_set [ prufer [ i ] - 1 ] -= 1\n                break\n    j = 0\n    for i in range ( vertices ) :\n        if ( vertex_set [ i ] == 0 and j == 0 ) :\n            print ( \"(\" , ( i + 1 ) , \", \" , sep = \"\" , end = \"\" )\n            j += 1\n        elif ( vertex_set [ i ] == 0 and j == 1 ) :\n            print ( ( i + 1 ) , \")\" )"}
{"source": "python", "target": "java", "source_program": " def findMinimumAngle ( arr , n ) :\n    l = 0\n    _sum = 0\n    ans = 360\n    for i in range ( n ) :\n        _sum += arr [ i ]\n        while _sum >= 180 :\n            ans = min ( ans , 2 * abs ( 180 - _sum ) )\n            _sum -= arr [ l ]\n            l += 1\n        ans = min ( ans , 2 * abs ( 180 - _sum ) )\n    return ans", "target_program": " public static int findMinimumAngle ( int arr [ ] , int n ) {\n  int l = 0 , sum = 0 , ans = 360 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    while ( sum >= 180 ) {\n      ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n      sum -= arr [ l ] ;\n      l ++ ;\n    }\n    ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinimumAngle ( arr , n ) :\n    l = 0\n    _sum = 0\n    ans = 360\n    for i in range ( n ) :\n        _sum += arr [ i ]\n        while _sum >= 180 :\n            ans = min ( ans , 2 * abs ( 180 - _sum ) )\n            _sum -= arr [ l ]\n            l += 1\n        ans = min ( ans , 2 * abs ( 180 - _sum ) )\n    return ans", "target_program": " int findMinimumAngle ( int arr [ ], int n ) {\n  int l = 0, sum = 0, ans = 360;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    while ( sum >= 180 ) {\n      ans = min ( ans, 2 * abs ( 180 - sum ) );\n      sum -= arr [ l ];\n      l ++;\n    }\n    ans = min ( ans, 2 * abs ( 180 - sum ) );\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " public static int findMinimumAngle ( int arr [ ] , int n ) {\n  int l = 0 , sum = 0 , ans = 360 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    while ( sum >= 180 ) {\n      ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n      sum -= arr [ l ] ;\n      l ++ ;\n    }\n    ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n  }\n  return ans ;\n}", "target_program": " def findMinimumAngle ( arr , n ) :\n    l = 0\n    _sum = 0\n    ans = 360\n    for i in range ( n ) :\n        _sum += arr [ i ]\n        while _sum >= 180 :\n            ans = min ( ans , 2 * abs ( 180 - _sum ) )\n            _sum -= arr [ l ]\n            l += 1\n        ans = min ( ans , 2 * abs ( 180 - _sum ) )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " public static int findMinimumAngle ( int arr [ ] , int n ) {\n  int l = 0 , sum = 0 , ans = 360 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    while ( sum >= 180 ) {\n      ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n      sum -= arr [ l ] ;\n      l ++ ;\n    }\n    ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n  }\n  return ans ;\n}", "target_program": " int findMinimumAngle ( int arr [ ], int n ) {\n  int l = 0, sum = 0, ans = 360;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    while ( sum >= 180 ) {\n      ans = min ( ans, 2 * abs ( 180 - sum ) );\n      sum -= arr [ l ];\n      l ++;\n    }\n    ans = min ( ans, 2 * abs ( 180 - sum ) );\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMinimumAngle ( int arr [ ], int n ) {\n  int l = 0, sum = 0, ans = 360;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    while ( sum >= 180 ) {\n      ans = min ( ans, 2 * abs ( 180 - sum ) );\n      sum -= arr [ l ];\n      l ++;\n    }\n    ans = min ( ans, 2 * abs ( 180 - sum ) );\n  }\n  return ans;\n}", "target_program": " public static int findMinimumAngle ( int arr [ ] , int n ) {\n  int l = 0 , sum = 0 , ans = 360 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    while ( sum >= 180 ) {\n      ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n      sum -= arr [ l ] ;\n      l ++ ;\n    }\n    ans = Math . min ( ans , 2 * Math . abs ( 180 - sum ) ) ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMinimumAngle ( int arr [ ], int n ) {\n  int l = 0, sum = 0, ans = 360;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    while ( sum >= 180 ) {\n      ans = min ( ans, 2 * abs ( 180 - sum ) );\n      sum -= arr [ l ];\n      l ++;\n    }\n    ans = min ( ans, 2 * abs ( 180 - sum ) );\n  }\n  return ans;\n}", "target_program": " def findMinimumAngle ( arr , n ) :\n    l = 0\n    _sum = 0\n    ans = 360\n    for i in range ( n ) :\n        _sum += arr [ i ]\n        while _sum >= 180 :\n            ans = min ( ans , 2 * abs ( 180 - _sum ) )\n            _sum -= arr [ l ]\n            l += 1\n        ans = min ( ans , 2 * abs ( 180 - _sum ) )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - 1\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    for i in range ( k , n ) :\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n    return max_end - k + 1", "target_program": " static int findMaxAverage ( int [ ] arr , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int [ ] csum = new int [ n ] ;\n  csum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n  int max_sum = csum [ k - 1 ] , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ] ;\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - 1\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    for i in range ( k , n ) :\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n    return max_end - k + 1", "target_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int * csum = new int [ n ];\n  csum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ];\n  int max_sum = csum [ k - 1 ], max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ];\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum;\n      max_end = i;\n    }\n  }\n  delete [ ] csum;\n  return max_end - k + 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxAverage ( int [ ] arr , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int [ ] csum = new int [ n ] ;\n  csum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n  int max_sum = csum [ k - 1 ] , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ] ;\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}", "target_program": " def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - 1\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    for i in range ( k , n ) :\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n    return max_end - k + 1"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxAverage ( int [ ] arr , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int [ ] csum = new int [ n ] ;\n  csum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n  int max_sum = csum [ k - 1 ] , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ] ;\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}", "target_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int * csum = new int [ n ];\n  csum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ];\n  int max_sum = csum [ k - 1 ], max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ];\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum;\n      max_end = i;\n    }\n  }\n  delete [ ] csum;\n  return max_end - k + 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int * csum = new int [ n ];\n  csum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ];\n  int max_sum = csum [ k - 1 ], max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ];\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum;\n      max_end = i;\n    }\n  }\n  delete [ ] csum;\n  return max_end - k + 1;\n}", "target_program": " static int findMaxAverage ( int [ ] arr , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int [ ] csum = new int [ n ] ;\n  csum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n  int max_sum = csum [ k - 1 ] , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ] ;\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int * csum = new int [ n ];\n  csum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) csum [ i ] = csum [ i - 1 ] + arr [ i ];\n  int max_sum = csum [ k - 1 ], max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int curr_sum = csum [ i ] - csum [ i - k ];\n    if ( curr_sum > max_sum ) {\n      max_sum = curr_sum;\n      max_end = i;\n    }\n  }\n  delete [ ] csum;\n  return max_end - k + 1;\n}", "target_program": " def findMaxAverage ( arr , n , k ) :\n    if k > n :\n        return - 1\n    csum = [ 0 ] * n\n    csum [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        csum [ i ] = csum [ i - 1 ] + arr [ i ] ;\n    max_sum = csum [ k - 1 ]\n    max_end = k - 1\n    for i in range ( k , n ) :\n        curr_sum = csum [ i ] - csum [ i - k ]\n        if curr_sum > max_sum :\n            max_sum = curr_sum\n            max_end = i\n    return max_end - k + 1"}
{"source": "python", "target": "java", "source_program": " def findS ( s ) :\n    _sum = 0\n    n = 1\n    while ( _sum < s ) :\n        _sum += n * n\n        n += 1\n    n -= 1\n    if _sum == s :\n        return n\n    return - 1", "target_program": " static int findS ( int s ) {\n  int sum = 0 ;\n  for ( int n = 1 ;\n  sum < s ;\n  n ++ ) {\n    sum += n * n ;\n    if ( sum == s ) return n ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findS ( s ) :\n    _sum = 0\n    n = 1\n    while ( _sum < s ) :\n        _sum += n * n\n        n += 1\n    n -= 1\n    if _sum == s :\n        return n\n    return - 1", "target_program": " int findS ( int s ) {\n  int sum = 0;\n  for ( int n = 1;\n  sum < s;\n  n ++ ) {\n    sum += n * n;\n    if ( sum == s ) return n;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findS ( int s ) {\n  int sum = 0 ;\n  for ( int n = 1 ;\n  sum < s ;\n  n ++ ) {\n    sum += n * n ;\n    if ( sum == s ) return n ;\n  }\n  return - 1 ;\n}", "target_program": " def findS ( s ) :\n    _sum = 0\n    n = 1\n    while ( _sum < s ) :\n        _sum += n * n\n        n += 1\n    n -= 1\n    if _sum == s :\n        return n\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findS ( int s ) {\n  int sum = 0 ;\n  for ( int n = 1 ;\n  sum < s ;\n  n ++ ) {\n    sum += n * n ;\n    if ( sum == s ) return n ;\n  }\n  return - 1 ;\n}", "target_program": " int findS ( int s ) {\n  int sum = 0;\n  for ( int n = 1;\n  sum < s;\n  n ++ ) {\n    sum += n * n;\n    if ( sum == s ) return n;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findS ( int s ) {\n  int sum = 0;\n  for ( int n = 1;\n  sum < s;\n  n ++ ) {\n    sum += n * n;\n    if ( sum == s ) return n;\n  }\n  return - 1;\n}", "target_program": " static int findS ( int s ) {\n  int sum = 0 ;\n  for ( int n = 1 ;\n  sum < s ;\n  n ++ ) {\n    sum += n * n ;\n    if ( sum == s ) return n ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findS ( int s ) {\n  int sum = 0;\n  for ( int n = 1;\n  sum < s;\n  n ++ ) {\n    sum += n * n;\n    if ( sum == s ) return n;\n  }\n  return - 1;\n}", "target_program": " def findS ( s ) :\n    _sum = 0\n    n = 1\n    while ( _sum < s ) :\n        _sum += n * n\n        n += 1\n    n -= 1\n    if _sum == s :\n        return n\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def areaOfInscribedCircle ( a ) :\n    return ( PI / 4 ) * a * a", "target_program": " static double areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def areaOfInscribedCircle ( a ) :\n    return ( PI / 4 ) * a * a", "target_program": " float areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a;\n}"}
{"source": "java", "target": "python", "source_program": " static double areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a ;\n}", "target_program": " def areaOfInscribedCircle ( a ) :\n    return ( PI / 4 ) * a * a"}
{"source": "java", "target": "cpp", "source_program": " static double areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a ;\n}", "target_program": " float areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a;\n}"}
{"source": "cpp", "target": "java", "source_program": " float areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a;\n}", "target_program": " static double areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float areaOfInscribedCircle ( float a ) {\n  return ( PI / 4 ) * a * a;\n}", "target_program": " def areaOfInscribedCircle ( a ) :\n    return ( PI / 4 ) * a * a"}
{"source": "python", "target": "java", "source_program": " def countToMake0lternate ( s ) :\n    result = 0\n    for i in range ( len ( s ) - 1 ) :\n        if ( s [ i ] == s [ i + 1 ] ) :\n            result += 1\n    return result", "target_program": " static int countToMake0lternate ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < ( s . length ( ) - 1 ) ;\n  i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) result ++ ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countToMake0lternate ( s ) :\n    result = 0\n    for i in range ( len ( s ) - 1 ) :\n        if ( s [ i ] == s [ i + 1 ] ) :\n            result += 1\n    return result", "target_program": " void countToMake0lternate ( const string & s ) {\n  int result = 0;\n  for ( int i = 0;\n  i < ( s . length ( ) - 1 );\n  i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++;\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countToMake0lternate ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < ( s . length ( ) - 1 ) ;\n  i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) result ++ ;\n  return result ;\n}", "target_program": " def countToMake0lternate ( s ) :\n    result = 0\n    for i in range ( len ( s ) - 1 ) :\n        if ( s [ i ] == s [ i + 1 ] ) :\n            result += 1\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countToMake0lternate ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < ( s . length ( ) - 1 ) ;\n  i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) result ++ ;\n  return result ;\n}", "target_program": " void countToMake0lternate ( const string & s ) {\n  int result = 0;\n  for ( int i = 0;\n  i < ( s . length ( ) - 1 );\n  i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++;\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " void countToMake0lternate ( const string & s ) {\n  int result = 0;\n  for ( int i = 0;\n  i < ( s . length ( ) - 1 );\n  i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++;\n  return result;\n}", "target_program": " static int countToMake0lternate ( String s ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < ( s . length ( ) - 1 ) ;\n  i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) result ++ ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void countToMake0lternate ( const string & s ) {\n  int result = 0;\n  for ( int i = 0;\n  i < ( s . length ( ) - 1 );\n  i ++ ) if ( s [ i ] == s [ i + 1 ] ) result ++;\n  return result;\n}", "target_program": " def countToMake0lternate ( s ) :\n    result = 0\n    for i in range ( len ( s ) - 1 ) :\n        if ( s [ i ] == s [ i + 1 ] ) :\n            result += 1\n    return result"}
{"source": "python", "target": "java", "source_program": " def findMissing ( a , b , n , m ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( a [ i ] == b [ j ] ) :\n                break\n        if ( j == m - 1 ) :\n            print ( a [ i ] , end = \" \" )", "target_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( a [ i ] == b [ j ] ) break ;\n    if ( j == m ) System . out . print ( a [ i ] + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMissing ( a , b , n , m ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( a [ i ] == b [ j ] ) :\n                break\n        if ( j == m - 1 ) :\n            print ( a [ i ] , end = \" \" )", "target_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < m;\n    j ++ ) if ( a [ i ] == b [ j ] ) break;\n    if ( j == m ) cout << a [ i ] << \" \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( a [ i ] == b [ j ] ) break ;\n    if ( j == m ) System . out . print ( a [ i ] + \" \" ) ;\n  }\n}", "target_program": " def findMissing ( a , b , n , m ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( a [ i ] == b [ j ] ) :\n                break\n        if ( j == m - 1 ) :\n            print ( a [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( a [ i ] == b [ j ] ) break ;\n    if ( j == m ) System . out . print ( a [ i ] + \" \" ) ;\n  }\n}", "target_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < m;\n    j ++ ) if ( a [ i ] == b [ j ] ) break;\n    if ( j == m ) cout << a [ i ] << \" \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < m;\n    j ++ ) if ( a [ i ] == b [ j ] ) break;\n    if ( j == m ) cout << a [ i ] << \" \";\n  }\n}", "target_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( a [ i ] == b [ j ] ) break ;\n    if ( j == m ) System . out . print ( a [ i ] + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < m;\n    j ++ ) if ( a [ i ] == b [ j ] ) break;\n    if ( j == m ) cout << a [ i ] << \" \";\n  }\n}", "target_program": " def findMissing ( a , b , n , m ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( a [ i ] == b [ j ] ) :\n                break\n        if ( j == m - 1 ) :\n            print ( a [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr", "target_program": " static void rearrange ( int [ ] arr , int n ) {\n  int temp [ ] = new int [ n ] ;\n  int small = 0 , large = n - 1 ;\n  boolean flag = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ] ;\n    else temp [ i ] = arr [ small ++ ] ;\n    flag = ! flag ;\n  }\n  arr = temp . clone ( ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr", "target_program": " void rearrange ( int arr [ ], int n ) {\n  int temp [ n ];\n  int small = 0, large = n - 1;\n  int flag = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ];\n    else temp [ i ] = arr [ small ++ ];\n    flag = ! flag;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}"}
{"source": "java", "target": "python", "source_program": " static void rearrange ( int [ ] arr , int n ) {\n  int temp [ ] = new int [ n ] ;\n  int small = 0 , large = n - 1 ;\n  boolean flag = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ] ;\n    else temp [ i ] = arr [ small ++ ] ;\n    flag = ! flag ;\n  }\n  arr = temp . clone ( ) ;\n}", "target_program": " def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr"}
{"source": "java", "target": "cpp", "source_program": " static void rearrange ( int [ ] arr , int n ) {\n  int temp [ ] = new int [ n ] ;\n  int small = 0 , large = n - 1 ;\n  boolean flag = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ] ;\n    else temp [ i ] = arr [ small ++ ] ;\n    flag = ! flag ;\n  }\n  arr = temp . clone ( ) ;\n}", "target_program": " void rearrange ( int arr [ ], int n ) {\n  int temp [ n ];\n  int small = 0, large = n - 1;\n  int flag = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ];\n    else temp [ i ] = arr [ small ++ ];\n    flag = ! flag;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void rearrange ( int arr [ ], int n ) {\n  int temp [ n ];\n  int small = 0, large = n - 1;\n  int flag = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ];\n    else temp [ i ] = arr [ small ++ ];\n    flag = ! flag;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}", "target_program": " static void rearrange ( int [ ] arr , int n ) {\n  int temp [ ] = new int [ n ] ;\n  int small = 0 , large = n - 1 ;\n  boolean flag = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ] ;\n    else temp [ i ] = arr [ small ++ ] ;\n    flag = ! flag ;\n  }\n  arr = temp . clone ( ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void rearrange ( int arr [ ], int n ) {\n  int temp [ n ];\n  int small = 0, large = n - 1;\n  int flag = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( flag ) temp [ i ] = arr [ large -- ];\n    else temp [ i ] = arr [ small ++ ];\n    flag = ! flag;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}", "target_program": " def rearrange ( arr , n ) :\n    temp = n * [ None ]\n    small , large = 0 , n - 1\n    flag = True\n    for i in range ( n ) :\n        if flag is True :\n            temp [ i ] = arr [ large ]\n            large -= 1\n        else :\n            temp [ i ] = arr [ small ]\n            small += 1\n        flag = bool ( 1 - flag )\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]\n    return arr"}
{"source": "python", "target": "java", "source_program": " def lbs ( arr ) :\n    n = len ( arr )\n    lis = [ 1 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) :\n                lis [ i ] = lis [ j ] + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    for i in reversed ( range ( n - 1 ) ) :\n        for j in reversed ( range ( i - 1 , n ) ) :\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) :\n                lds [ i ] = lds [ j ] + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    for i in range ( 1 , n ) :\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n    return maximum", "target_program": " static int lbs ( int arr [ ] , int n ) {\n  int i , j ;\n  int [ ] lis = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int [ ] lds = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lds [ i ] = 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) for ( j = n - 1 ;\n  j > i ;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1 ;\n  int max = lis [ 0 ] + lds [ 0 ] - 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1 ;\n  return max ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lbs ( arr ) :\n    n = len ( arr )\n    lis = [ 1 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) :\n                lis [ i ] = lis [ j ] + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    for i in reversed ( range ( n - 1 ) ) :\n        for j in reversed ( range ( i - 1 , n ) ) :\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) :\n                lds [ i ] = lds [ j ] + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    for i in range ( 1 , n ) :\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n    return maximum", "target_program": " int lbs ( int arr [ ], int n ) {\n  int i, j;\n  int * lis = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lis [ i ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) for ( j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int * lds = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lds [ i ] = 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) for ( j = n - 1;\n  j > i;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1;\n  int max = lis [ 0 ] + lds [ 0 ] - 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1;\n  return max;\n}"}
{"source": "java", "target": "python", "source_program": " static int lbs ( int arr [ ] , int n ) {\n  int i , j ;\n  int [ ] lis = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int [ ] lds = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lds [ i ] = 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) for ( j = n - 1 ;\n  j > i ;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1 ;\n  int max = lis [ 0 ] + lds [ 0 ] - 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1 ;\n  return max ;\n}", "target_program": " def lbs ( arr ) :\n    n = len ( arr )\n    lis = [ 1 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) :\n                lis [ i ] = lis [ j ] + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    for i in reversed ( range ( n - 1 ) ) :\n        for j in reversed ( range ( i - 1 , n ) ) :\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) :\n                lds [ i ] = lds [ j ] + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    for i in range ( 1 , n ) :\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n    return maximum"}
{"source": "java", "target": "cpp", "source_program": " static int lbs ( int arr [ ] , int n ) {\n  int i , j ;\n  int [ ] lis = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int [ ] lds = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lds [ i ] = 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) for ( j = n - 1 ;\n  j > i ;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1 ;\n  int max = lis [ 0 ] + lds [ 0 ] - 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1 ;\n  return max ;\n}", "target_program": " int lbs ( int arr [ ], int n ) {\n  int i, j;\n  int * lis = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lis [ i ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) for ( j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int * lds = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lds [ i ] = 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) for ( j = n - 1;\n  j > i;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1;\n  int max = lis [ 0 ] + lds [ 0 ] - 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1;\n  return max;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lbs ( int arr [ ], int n ) {\n  int i, j;\n  int * lis = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lis [ i ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) for ( j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int * lds = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lds [ i ] = 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) for ( j = n - 1;\n  j > i;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1;\n  int max = lis [ 0 ] + lds [ 0 ] - 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1;\n  return max;\n}", "target_program": " static int lbs ( int arr [ ] , int n ) {\n  int i , j ;\n  int [ ] lis = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int [ ] lds = new int [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lds [ i ] = 1 ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) for ( j = n - 1 ;\n  j > i ;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1 ;\n  int max = lis [ 0 ] + lds [ 0 ] - 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1 ;\n  return max ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lbs ( int arr [ ], int n ) {\n  int i, j;\n  int * lis = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lis [ i ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) for ( j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int * lds = new int [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) lds [ i ] = 1;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) for ( j = n - 1;\n  j > i;\n  j -- ) if ( arr [ i ] > arr [ j ] && lds [ i ] < lds [ j ] + 1 ) lds [ i ] = lds [ j ] + 1;\n  int max = lis [ 0 ] + lds [ 0 ] - 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( lis [ i ] + lds [ i ] - 1 > max ) max = lis [ i ] + lds [ i ] - 1;\n  return max;\n}", "target_program": " def lbs ( arr ) :\n    n = len ( arr )\n    lis = [ 1 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if ( ( arr [ i ] > arr [ j ] ) and ( lis [ i ] < lis [ j ] + 1 ) ) :\n                lis [ i ] = lis [ j ] + 1\n    lds = [ 1 for i in range ( n + 1 ) ]\n    for i in reversed ( range ( n - 1 ) ) :\n        for j in reversed ( range ( i - 1 , n ) ) :\n            if ( arr [ i ] > arr [ j ] and lds [ i ] < lds [ j ] + 1 ) :\n                lds [ i ] = lds [ j ] + 1\n    maximum = lis [ 0 ] + lds [ 0 ] - 1\n    for i in range ( 1 , n ) :\n        maximum = max ( ( lis [ i ] + lds [ i ] - 1 ) , maximum )\n    return maximum"}
{"source": "python", "target": "java", "source_program": " def countPairs ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( 0 , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n    return result ;", "target_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      for ( int k = 0 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairs ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( 0 , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n    return result ;", "target_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      for ( int k = 0;\n      k < n;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++;\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      for ( int k = 0 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return result ;\n}", "target_program": " def countPairs ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( 0 , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n    return result ;"}
{"source": "java", "target": "cpp", "source_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      for ( int k = 0 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return result ;\n}", "target_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      for ( int k = 0;\n      k < n;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++;\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      for ( int k = 0;\n      k < n;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++;\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}", "target_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      for ( int k = 0 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      for ( int k = 0;\n      k < n;\n      k ++ ) {\n        if ( arr [ k ] == product ) {\n          result ++;\n          break;\n        }\n      }\n    }\n  }\n  return result;\n}", "target_program": " def countPairs ( arr , n ) :\n    result = 0 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ] ;\n            for k in range ( 0 , n ) :\n                if ( arr [ k ] == product ) :\n                    result = result + 1 ;\n                    break ;\n    return result ;"}
{"source": "python", "target": "java", "source_program": " def compute ( graph , N ) :\n    count = 0\n    for i in range ( 1 , N + 1 ) :\n        if ( len ( graph [ i ] ) == 0 ) :\n            count += 1\n    return count", "target_program": " static int compute ( int [ ] graph , int N ) {\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < 7 ;\n  i ++ ) {\n    if ( graph [ i ] == 0 ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def compute ( graph , N ) :\n    count = 0\n    for i in range ( 1 , N + 1 ) :\n        if ( len ( graph [ i ] ) == 0 ) :\n            count += 1\n    return count", "target_program": " int compute ( vector < int > graph [ ], int N ) {\n  int count = 0;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int compute ( int [ ] graph , int N ) {\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < 7 ;\n  i ++ ) {\n    if ( graph [ i ] == 0 ) count ++ ;\n  }\n  return count ;\n}", "target_program": " def compute ( graph , N ) :\n    count = 0\n    for i in range ( 1 , N + 1 ) :\n        if ( len ( graph [ i ] ) == 0 ) :\n            count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int compute ( int [ ] graph , int N ) {\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < 7 ;\n  i ++ ) {\n    if ( graph [ i ] == 0 ) count ++ ;\n  }\n  return count ;\n}", "target_program": " int compute ( vector < int > graph [ ], int N ) {\n  int count = 0;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int compute ( vector < int > graph [ ], int N ) {\n  int count = 0;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++;\n  return count;\n}", "target_program": " static int compute ( int [ ] graph , int N ) {\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < 7 ;\n  i ++ ) {\n    if ( graph [ i ] == 0 ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int compute ( vector < int > graph [ ], int N ) {\n  int count = 0;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) if ( graph [ i ] . size ( ) == 0 ) count ++;\n  return count;\n}", "target_program": " def compute ( graph , N ) :\n    count = 0\n    for i in range ( 1 , N + 1 ) :\n        if ( len ( graph [ i ] ) == 0 ) :\n            count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def exactPrimeFactorCount ( n ) :\n    count = 0\n    if ( n % 2 == 0 ) :\n        count = count + 1\n        while ( n % 2 == 0 ) :\n            n = int ( n / 2 )\n    i = 3\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == 0 ) :\n            count = count + 1\n            while ( n % i == 0 ) :\n                n = int ( n / i )\n        i = i + 2\n    if ( n > 2 ) :\n        count = count + 1\n    return count", "target_program": " static int exactPrimeFactorCount ( int n ) {\n  int count = 0 ;\n  if ( n % 2 == 0 ) {\n    count ++ ;\n    while ( n % 2 == 0 ) n = n / 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++ ;\n      while ( n % i == 0 ) n = n / i ;\n    }\n  }\n  if ( n > 2 ) count ++ ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def exactPrimeFactorCount ( n ) :\n    count = 0\n    if ( n % 2 == 0 ) :\n        count = count + 1\n        while ( n % 2 == 0 ) :\n            n = int ( n / 2 )\n    i = 3\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == 0 ) :\n            count = count + 1\n            while ( n % i == 0 ) :\n                n = int ( n / i )\n        i = i + 2\n    if ( n > 2 ) :\n        count = count + 1\n    return count", "target_program": " int exactPrimeFactorCount ( int n ) {\n  int count = 0;\n  if ( n % 2 == 0 ) {\n    count ++;\n    while ( n % 2 == 0 ) n = n / 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++;\n      while ( n % i == 0 ) n = n / i;\n    }\n  }\n  if ( n > 2 ) count ++;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int exactPrimeFactorCount ( int n ) {\n  int count = 0 ;\n  if ( n % 2 == 0 ) {\n    count ++ ;\n    while ( n % 2 == 0 ) n = n / 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++ ;\n      while ( n % i == 0 ) n = n / i ;\n    }\n  }\n  if ( n > 2 ) count ++ ;\n  return count ;\n}", "target_program": " def exactPrimeFactorCount ( n ) :\n    count = 0\n    if ( n % 2 == 0 ) :\n        count = count + 1\n        while ( n % 2 == 0 ) :\n            n = int ( n / 2 )\n    i = 3\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == 0 ) :\n            count = count + 1\n            while ( n % i == 0 ) :\n                n = int ( n / i )\n        i = i + 2\n    if ( n > 2 ) :\n        count = count + 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int exactPrimeFactorCount ( int n ) {\n  int count = 0 ;\n  if ( n % 2 == 0 ) {\n    count ++ ;\n    while ( n % 2 == 0 ) n = n / 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++ ;\n      while ( n % i == 0 ) n = n / i ;\n    }\n  }\n  if ( n > 2 ) count ++ ;\n  return count ;\n}", "target_program": " int exactPrimeFactorCount ( int n ) {\n  int count = 0;\n  if ( n % 2 == 0 ) {\n    count ++;\n    while ( n % 2 == 0 ) n = n / 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++;\n      while ( n % i == 0 ) n = n / i;\n    }\n  }\n  if ( n > 2 ) count ++;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int exactPrimeFactorCount ( int n ) {\n  int count = 0;\n  if ( n % 2 == 0 ) {\n    count ++;\n    while ( n % 2 == 0 ) n = n / 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++;\n      while ( n % i == 0 ) n = n / i;\n    }\n  }\n  if ( n > 2 ) count ++;\n  return count;\n}", "target_program": " static int exactPrimeFactorCount ( int n ) {\n  int count = 0 ;\n  if ( n % 2 == 0 ) {\n    count ++ ;\n    while ( n % 2 == 0 ) n = n / 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++ ;\n      while ( n % i == 0 ) n = n / i ;\n    }\n  }\n  if ( n > 2 ) count ++ ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int exactPrimeFactorCount ( int n ) {\n  int count = 0;\n  if ( n % 2 == 0 ) {\n    count ++;\n    while ( n % 2 == 0 ) n = n / 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    if ( n % i == 0 ) {\n      count ++;\n      while ( n % i == 0 ) n = n / i;\n    }\n  }\n  if ( n > 2 ) count ++;\n  return count;\n}", "target_program": " def exactPrimeFactorCount ( n ) :\n    count = 0\n    if ( n % 2 == 0 ) :\n        count = count + 1\n        while ( n % 2 == 0 ) :\n            n = int ( n / 2 )\n    i = 3\n    while ( i <= int ( math.sqrt ( n ) ) ) :\n        if ( n % i == 0 ) :\n            count = count + 1\n            while ( n % i == 0 ) :\n                n = int ( n / i )\n        i = i + 2\n    if ( n > 2 ) :\n        count = count + 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def superSeq ( X , Y , m , n ) :\n    dp = [ [ 0 ] * ( n + 2 ) for i in range ( m + 2 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if ( not i ) : dp [ i ] [ j ] = j\n            elif ( not j ) : dp [ i ] [ j ] = i\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else : dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] )\n    return dp [ m ] [ n ]", "target_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def superSeq ( X , Y , m , n ) :\n    dp = [ [ 0 ] * ( n + 2 ) for i in range ( m + 2 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if ( not i ) : dp [ i ] [ j ] = j\n            elif ( not j ) : dp [ i ] [ j ] = i\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else : dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] )\n    return dp [ m ] [ n ]", "target_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}", "target_program": " def superSeq ( X , Y , m , n ) :\n    dp = [ [ 0 ] * ( n + 2 ) for i in range ( m + 2 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if ( not i ) : dp [ i ] [ j ] = j\n            elif ( not j ) : dp [ i ] [ j ] = i\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else : dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] )\n    return dp [ m ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}", "target_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}", "target_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( X . charAt ( i - 1 ) == Y . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( X [ i - 1 ] == Y [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}", "target_program": " def superSeq ( X , Y , m , n ) :\n    dp = [ [ 0 ] * ( n + 2 ) for i in range ( m + 2 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if ( not i ) : dp [ i ] [ j ] = j\n            elif ( not j ) : dp [ i ] [ j ] = i\n            elif ( X [ i - 1 ] == Y [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else : dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] )\n    return dp [ m ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def printPowerSet ( set , set_size ) :\n    pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;\n    counter = 0 ;\n    j = 0 ;\n    for counter in range ( 0 , pow_set_size ) :\n        for j in range ( 0 , set_size ) :\n            if ( ( counter & ( 1 << j ) ) > 0 ) :\n                print ( set [ j ] , end = \"\" ) ;\n        print ( \"\" ) ;", "target_program": " static void printPowerSet ( char [ ] set , int set_size ) {\n  long pow_set_size = ( long ) Math . pow ( 2 , set_size ) ;\n  int counter , j ;\n  for ( counter = 0 ;\n  counter < pow_set_size ;\n  counter ++ ) {\n    for ( j = 0 ;\n    j < set_size ;\n    j ++ ) {\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( set [ j ] ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printPowerSet ( set , set_size ) :\n    pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;\n    counter = 0 ;\n    j = 0 ;\n    for counter in range ( 0 , pow_set_size ) :\n        for j in range ( 0 , set_size ) :\n            if ( ( counter & ( 1 << j ) ) > 0 ) :\n                print ( set [ j ] , end = \"\" ) ;\n        print ( \"\" ) ;", "target_program": " public : void printPowerSet ( char * set, int set_size ) {\n  unsigned int pow_set_size = pow ( 2, set_size );\n  int counter, j;\n  for ( counter = 0;\n  counter < pow_set_size;\n  counter ++ ) {\n    for ( j = 0;\n    j < set_size;\n    j ++ ) {\n      if ( counter & ( 1 << j ) ) cout << set [ j ];\n    }\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printPowerSet ( char [ ] set , int set_size ) {\n  long pow_set_size = ( long ) Math . pow ( 2 , set_size ) ;\n  int counter , j ;\n  for ( counter = 0 ;\n  counter < pow_set_size ;\n  counter ++ ) {\n    for ( j = 0 ;\n    j < set_size ;\n    j ++ ) {\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( set [ j ] ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " def printPowerSet ( set , set_size ) :\n    pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;\n    counter = 0 ;\n    j = 0 ;\n    for counter in range ( 0 , pow_set_size ) :\n        for j in range ( 0 , set_size ) :\n            if ( ( counter & ( 1 << j ) ) > 0 ) :\n                print ( set [ j ] , end = \"\" ) ;\n        print ( \"\" ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void printPowerSet ( char [ ] set , int set_size ) {\n  long pow_set_size = ( long ) Math . pow ( 2 , set_size ) ;\n  int counter , j ;\n  for ( counter = 0 ;\n  counter < pow_set_size ;\n  counter ++ ) {\n    for ( j = 0 ;\n    j < set_size ;\n    j ++ ) {\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( set [ j ] ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " public : void printPowerSet ( char * set, int set_size ) {\n  unsigned int pow_set_size = pow ( 2, set_size );\n  int counter, j;\n  for ( counter = 0;\n  counter < pow_set_size;\n  counter ++ ) {\n    for ( j = 0;\n    j < set_size;\n    j ++ ) {\n      if ( counter & ( 1 << j ) ) cout << set [ j ];\n    }\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " public : void printPowerSet ( char * set, int set_size ) {\n  unsigned int pow_set_size = pow ( 2, set_size );\n  int counter, j;\n  for ( counter = 0;\n  counter < pow_set_size;\n  counter ++ ) {\n    for ( j = 0;\n    j < set_size;\n    j ++ ) {\n      if ( counter & ( 1 << j ) ) cout << set [ j ];\n    }\n    cout << endl;\n  }\n}", "target_program": " static void printPowerSet ( char [ ] set , int set_size ) {\n  long pow_set_size = ( long ) Math . pow ( 2 , set_size ) ;\n  int counter , j ;\n  for ( counter = 0 ;\n  counter < pow_set_size ;\n  counter ++ ) {\n    for ( j = 0 ;\n    j < set_size ;\n    j ++ ) {\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( set [ j ] ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " public : void printPowerSet ( char * set, int set_size ) {\n  unsigned int pow_set_size = pow ( 2, set_size );\n  int counter, j;\n  for ( counter = 0;\n  counter < pow_set_size;\n  counter ++ ) {\n    for ( j = 0;\n    j < set_size;\n    j ++ ) {\n      if ( counter & ( 1 << j ) ) cout << set [ j ];\n    }\n    cout << endl;\n  }\n}", "target_program": " def printPowerSet ( set , set_size ) :\n    pow_set_size = ( int ) ( math.pow ( 2 , set_size ) ) ;\n    counter = 0 ;\n    j = 0 ;\n    for counter in range ( 0 , pow_set_size ) :\n        for j in range ( 0 , set_size ) :\n            if ( ( counter & ( 1 << j ) ) > 0 ) :\n                print ( set [ j ] , end = \"\" ) ;\n        print ( \"\" ) ;"}
{"source": "python", "target": "java", "source_program": " def isMajority ( a ) :\n    mp = { }\n    for i in a :\n        if i in mp : mp [ i ] += 1\n        else : mp [ i ] = 1\n    for x in mp :\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n    return False", "target_program": " static boolean isMajority ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ;\n  else mp . put ( a [ i ] , 1 ) ;\n  for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) if ( x . getValue ( ) >= n / 2 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isMajority ( a ) :\n    mp = { }\n    for i in a :\n        if i in mp : mp [ i ] += 1\n        else : mp [ i ] = 1\n    for x in mp :\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n    return False", "target_program": " bool isMajority ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mp [ a [ i ] ] ++;\n  for ( auto x : mp ) if ( x . second >= n / 2 ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isMajority ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ;\n  else mp . put ( a [ i ] , 1 ) ;\n  for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) if ( x . getValue ( ) >= n / 2 ) return true ;\n  return false ;\n}", "target_program": " def isMajority ( a ) :\n    mp = { }\n    for i in a :\n        if i in mp : mp [ i ] += 1\n        else : mp [ i ] = 1\n    for x in mp :\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isMajority ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ;\n  else mp . put ( a [ i ] , 1 ) ;\n  for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) if ( x . getValue ( ) >= n / 2 ) return true ;\n  return false ;\n}", "target_program": " bool isMajority ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mp [ a [ i ] ] ++;\n  for ( auto x : mp ) if ( x . second >= n / 2 ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isMajority ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mp [ a [ i ] ] ++;\n  for ( auto x : mp ) if ( x . second >= n / 2 ) return true;\n  return false;\n}", "target_program": " static boolean isMajority ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( a [ i ] ) ) mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ;\n  else mp . put ( a [ i ] , 1 ) ;\n  for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) if ( x . getValue ( ) >= n / 2 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isMajority ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) mp [ a [ i ] ] ++;\n  for ( auto x : mp ) if ( x . second >= n / 2 ) return true;\n  return false;\n}", "target_program": " def isMajority ( a ) :\n    mp = { }\n    for i in a :\n        if i in mp : mp [ i ] += 1\n        else : mp [ i ] = 1\n    for x in mp :\n        if mp [ x ] >= len ( a ) // 2 :\n            return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def counterClockspiralPrint ( m , n , arr ) :\n    k = 0 ; l = 0\n    cnt = 0\n    total = m * n\n    while ( k < m and l < n ) :\n        if ( cnt == total ) :\n            break\n        for i in range ( k , m ) :\n            print ( arr [ i ] [ l ] , end = \" \" )\n            cnt += 1\n        l += 1\n        if ( cnt == total ) :\n            break\n        for i in range ( l , n ) :\n            print ( arr [ m - 1 ] [ i ] , end = \" \" )\n            cnt += 1\n        m -= 1\n        if ( cnt == total ) :\n            break\n        if ( k < m ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( arr [ i ] [ n - 1 ] , end = \" \" )\n                cnt += 1\n            n -= 1\n        if ( cnt == total ) :\n            break\n        if ( l < n ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                print ( arr [ k ] [ i ] , end = \" \" )\n                cnt += 1\n            k += 1", "target_program": " static void counterClockspiralPrint ( int m , int n , int arr [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  int cnt = 0 ;\n  int total = m * n ;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( arr [ i ] [ l ] + \" \" ) ;\n      cnt ++ ;\n    }\n    l ++ ;\n    if ( cnt == total ) break ;\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( arr [ m - 1 ] [ i ] + \" \" ) ;\n      cnt ++ ;\n    }\n    m -- ;\n    if ( cnt == total ) break ;\n    if ( k < m ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( arr [ i ] [ n - 1 ] + \" \" ) ;\n        cnt ++ ;\n      }\n      n -- ;\n    }\n    if ( cnt == total ) break ;\n    if ( l < n ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( arr [ k ] [ i ] + \" \" ) ;\n        cnt ++ ;\n      }\n      k ++ ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def counterClockspiralPrint ( m , n , arr ) :\n    k = 0 ; l = 0\n    cnt = 0\n    total = m * n\n    while ( k < m and l < n ) :\n        if ( cnt == total ) :\n            break\n        for i in range ( k , m ) :\n            print ( arr [ i ] [ l ] , end = \" \" )\n            cnt += 1\n        l += 1\n        if ( cnt == total ) :\n            break\n        for i in range ( l , n ) :\n            print ( arr [ m - 1 ] [ i ] , end = \" \" )\n            cnt += 1\n        m -= 1\n        if ( cnt == total ) :\n            break\n        if ( k < m ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( arr [ i ] [ n - 1 ] , end = \" \" )\n                cnt += 1\n            n -= 1\n        if ( cnt == total ) :\n            break\n        if ( l < n ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                print ( arr [ k ] [ i ] , end = \" \" )\n                cnt += 1\n            k += 1", "target_program": " void counterClockspiralPrint ( int m, int n, int arr [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  int cnt = 0;\n  int total = m * n;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << arr [ i ] [ l ] << \" \";\n      cnt ++;\n    }\n    l ++;\n    if ( cnt == total ) break;\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << arr [ m - 1 ] [ i ] << \" \";\n      cnt ++;\n    }\n    m --;\n    if ( cnt == total ) break;\n    if ( k < m ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << arr [ i ] [ n - 1 ] << \" \";\n        cnt ++;\n      }\n      n --;\n    }\n    if ( cnt == total ) break;\n    if ( l < n ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << arr [ k ] [ i ] << \" \";\n        cnt ++;\n      }\n      k ++;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void counterClockspiralPrint ( int m , int n , int arr [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  int cnt = 0 ;\n  int total = m * n ;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( arr [ i ] [ l ] + \" \" ) ;\n      cnt ++ ;\n    }\n    l ++ ;\n    if ( cnt == total ) break ;\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( arr [ m - 1 ] [ i ] + \" \" ) ;\n      cnt ++ ;\n    }\n    m -- ;\n    if ( cnt == total ) break ;\n    if ( k < m ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( arr [ i ] [ n - 1 ] + \" \" ) ;\n        cnt ++ ;\n      }\n      n -- ;\n    }\n    if ( cnt == total ) break ;\n    if ( l < n ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( arr [ k ] [ i ] + \" \" ) ;\n        cnt ++ ;\n      }\n      k ++ ;\n    }\n  }\n}", "target_program": " def counterClockspiralPrint ( m , n , arr ) :\n    k = 0 ; l = 0\n    cnt = 0\n    total = m * n\n    while ( k < m and l < n ) :\n        if ( cnt == total ) :\n            break\n        for i in range ( k , m ) :\n            print ( arr [ i ] [ l ] , end = \" \" )\n            cnt += 1\n        l += 1\n        if ( cnt == total ) :\n            break\n        for i in range ( l , n ) :\n            print ( arr [ m - 1 ] [ i ] , end = \" \" )\n            cnt += 1\n        m -= 1\n        if ( cnt == total ) :\n            break\n        if ( k < m ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( arr [ i ] [ n - 1 ] , end = \" \" )\n                cnt += 1\n            n -= 1\n        if ( cnt == total ) :\n            break\n        if ( l < n ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                print ( arr [ k ] [ i ] , end = \" \" )\n                cnt += 1\n            k += 1"}
{"source": "java", "target": "cpp", "source_program": " static void counterClockspiralPrint ( int m , int n , int arr [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  int cnt = 0 ;\n  int total = m * n ;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( arr [ i ] [ l ] + \" \" ) ;\n      cnt ++ ;\n    }\n    l ++ ;\n    if ( cnt == total ) break ;\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( arr [ m - 1 ] [ i ] + \" \" ) ;\n      cnt ++ ;\n    }\n    m -- ;\n    if ( cnt == total ) break ;\n    if ( k < m ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( arr [ i ] [ n - 1 ] + \" \" ) ;\n        cnt ++ ;\n      }\n      n -- ;\n    }\n    if ( cnt == total ) break ;\n    if ( l < n ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( arr [ k ] [ i ] + \" \" ) ;\n        cnt ++ ;\n      }\n      k ++ ;\n    }\n  }\n}", "target_program": " void counterClockspiralPrint ( int m, int n, int arr [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  int cnt = 0;\n  int total = m * n;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << arr [ i ] [ l ] << \" \";\n      cnt ++;\n    }\n    l ++;\n    if ( cnt == total ) break;\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << arr [ m - 1 ] [ i ] << \" \";\n      cnt ++;\n    }\n    m --;\n    if ( cnt == total ) break;\n    if ( k < m ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << arr [ i ] [ n - 1 ] << \" \";\n        cnt ++;\n      }\n      n --;\n    }\n    if ( cnt == total ) break;\n    if ( l < n ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << arr [ k ] [ i ] << \" \";\n        cnt ++;\n      }\n      k ++;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void counterClockspiralPrint ( int m, int n, int arr [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  int cnt = 0;\n  int total = m * n;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << arr [ i ] [ l ] << \" \";\n      cnt ++;\n    }\n    l ++;\n    if ( cnt == total ) break;\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << arr [ m - 1 ] [ i ] << \" \";\n      cnt ++;\n    }\n    m --;\n    if ( cnt == total ) break;\n    if ( k < m ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << arr [ i ] [ n - 1 ] << \" \";\n        cnt ++;\n      }\n      n --;\n    }\n    if ( cnt == total ) break;\n    if ( l < n ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << arr [ k ] [ i ] << \" \";\n        cnt ++;\n      }\n      k ++;\n    }\n  }\n}", "target_program": " static void counterClockspiralPrint ( int m , int n , int arr [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  int cnt = 0 ;\n  int total = m * n ;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( arr [ i ] [ l ] + \" \" ) ;\n      cnt ++ ;\n    }\n    l ++ ;\n    if ( cnt == total ) break ;\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( arr [ m - 1 ] [ i ] + \" \" ) ;\n      cnt ++ ;\n    }\n    m -- ;\n    if ( cnt == total ) break ;\n    if ( k < m ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( arr [ i ] [ n - 1 ] + \" \" ) ;\n        cnt ++ ;\n      }\n      n -- ;\n    }\n    if ( cnt == total ) break ;\n    if ( l < n ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( arr [ k ] [ i ] + \" \" ) ;\n        cnt ++ ;\n      }\n      k ++ ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void counterClockspiralPrint ( int m, int n, int arr [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  int cnt = 0;\n  int total = m * n;\n  while ( k < m && l < n ) {\n    if ( cnt == total ) break;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << arr [ i ] [ l ] << \" \";\n      cnt ++;\n    }\n    l ++;\n    if ( cnt == total ) break;\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << arr [ m - 1 ] [ i ] << \" \";\n      cnt ++;\n    }\n    m --;\n    if ( cnt == total ) break;\n    if ( k < m ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << arr [ i ] [ n - 1 ] << \" \";\n        cnt ++;\n      }\n      n --;\n    }\n    if ( cnt == total ) break;\n    if ( l < n ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << arr [ k ] [ i ] << \" \";\n        cnt ++;\n      }\n      k ++;\n    }\n  }\n}", "target_program": " def counterClockspiralPrint ( m , n , arr ) :\n    k = 0 ; l = 0\n    cnt = 0\n    total = m * n\n    while ( k < m and l < n ) :\n        if ( cnt == total ) :\n            break\n        for i in range ( k , m ) :\n            print ( arr [ i ] [ l ] , end = \" \" )\n            cnt += 1\n        l += 1\n        if ( cnt == total ) :\n            break\n        for i in range ( l , n ) :\n            print ( arr [ m - 1 ] [ i ] , end = \" \" )\n            cnt += 1\n        m -= 1\n        if ( cnt == total ) :\n            break\n        if ( k < m ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( arr [ i ] [ n - 1 ] , end = \" \" )\n                cnt += 1\n            n -= 1\n        if ( cnt == total ) :\n            break\n        if ( l < n ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                print ( arr [ k ] [ i ] , end = \" \" )\n                cnt += 1\n            k += 1"}
{"source": "python", "target": "java", "source_program": " def isPrime ( n ) :\n    if n <= 1 :\n        return False\n    for i in range ( 2 , n ) :\n        if n % i == 0 :\n            return False ;\n    return True", "target_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPrime ( n ) :\n    if n <= 1 :\n        return False\n    for i in range ( 2 , n ) :\n        if n % i == 0 :\n            return False ;\n    return True", "target_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}", "target_program": " def isPrime ( n ) :\n    if n <= 1 :\n        return False\n    for i in range ( 2 , n ) :\n        if n % i == 0 :\n            return False ;\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}", "target_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}", "target_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}", "target_program": " def isPrime ( n ) :\n    if n <= 1 :\n        return False\n    for i in range ( 2 , n ) :\n        if n % i == 0 :\n            return False ;\n    return True"}
{"source": "python", "target": "java", "source_program": " def printMinIndexChar ( Str , patt ) :\n    minIndex = 10 ** 9\n    m = len ( Str )\n    n = len ( patt )\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( patt [ i ] == Str [ j ] and j < minIndex ) :\n                minIndex = j\n                break\n    if ( minIndex != 10 ** 9 ) :\n        print ( \"Minimum Index Character = \" , Str [ minIndex ] )\n    else :\n        print ( \"No character present\" )", "target_program": " static void printMinIndexChar ( String str , String patt ) {\n  int minIndex = Integer . MAX_VALUE ;\n  int m = str . length ( ) ;\n  int n = patt . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) {\n        minIndex = j ;\n        break ;\n      }\n    }\n  }\n  if ( minIndex != Integer . MAX_VALUE ) System . out . println ( \"Minimum Index Character = \" + str . charAt ( minIndex ) ) ;\n  else System . out . println ( \"No character present\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printMinIndexChar ( Str , patt ) :\n    minIndex = 10 ** 9\n    m = len ( Str )\n    n = len ( patt )\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( patt [ i ] == Str [ j ] and j < minIndex ) :\n                minIndex = j\n                break\n    if ( minIndex != 10 ** 9 ) :\n        print ( \"Minimum Index Character = \" , Str [ minIndex ] )\n    else :\n        print ( \"No character present\" )", "target_program": " void printMinIndexChar ( string str, string patt ) {\n  int minIndex = INT_MAX;\n  int m = str . size ( );\n  int n = patt . size ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( patt [ i ] == str [ j ] && j < minIndex ) {\n        minIndex = j;\n        break;\n      }\n    }\n  }\n  if ( minIndex != INT_MAX ) cout << \"Minimum Index Character = \" << str [ minIndex ];\n  else cout << \"No character present\";\n}"}
{"source": "java", "target": "python", "source_program": " static void printMinIndexChar ( String str , String patt ) {\n  int minIndex = Integer . MAX_VALUE ;\n  int m = str . length ( ) ;\n  int n = patt . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) {\n        minIndex = j ;\n        break ;\n      }\n    }\n  }\n  if ( minIndex != Integer . MAX_VALUE ) System . out . println ( \"Minimum Index Character = \" + str . charAt ( minIndex ) ) ;\n  else System . out . println ( \"No character present\" ) ;\n}", "target_program": " def printMinIndexChar ( Str , patt ) :\n    minIndex = 10 ** 9\n    m = len ( Str )\n    n = len ( patt )\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( patt [ i ] == Str [ j ] and j < minIndex ) :\n                minIndex = j\n                break\n    if ( minIndex != 10 ** 9 ) :\n        print ( \"Minimum Index Character = \" , Str [ minIndex ] )\n    else :\n        print ( \"No character present\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printMinIndexChar ( String str , String patt ) {\n  int minIndex = Integer . MAX_VALUE ;\n  int m = str . length ( ) ;\n  int n = patt . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) {\n        minIndex = j ;\n        break ;\n      }\n    }\n  }\n  if ( minIndex != Integer . MAX_VALUE ) System . out . println ( \"Minimum Index Character = \" + str . charAt ( minIndex ) ) ;\n  else System . out . println ( \"No character present\" ) ;\n}", "target_program": " void printMinIndexChar ( string str, string patt ) {\n  int minIndex = INT_MAX;\n  int m = str . size ( );\n  int n = patt . size ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( patt [ i ] == str [ j ] && j < minIndex ) {\n        minIndex = j;\n        break;\n      }\n    }\n  }\n  if ( minIndex != INT_MAX ) cout << \"Minimum Index Character = \" << str [ minIndex ];\n  else cout << \"No character present\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printMinIndexChar ( string str, string patt ) {\n  int minIndex = INT_MAX;\n  int m = str . size ( );\n  int n = patt . size ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( patt [ i ] == str [ j ] && j < minIndex ) {\n        minIndex = j;\n        break;\n      }\n    }\n  }\n  if ( minIndex != INT_MAX ) cout << \"Minimum Index Character = \" << str [ minIndex ];\n  else cout << \"No character present\";\n}", "target_program": " static void printMinIndexChar ( String str , String patt ) {\n  int minIndex = Integer . MAX_VALUE ;\n  int m = str . length ( ) ;\n  int n = patt . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( patt . charAt ( i ) == str . charAt ( j ) && j < minIndex ) {\n        minIndex = j ;\n        break ;\n      }\n    }\n  }\n  if ( minIndex != Integer . MAX_VALUE ) System . out . println ( \"Minimum Index Character = \" + str . charAt ( minIndex ) ) ;\n  else System . out . println ( \"No character present\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printMinIndexChar ( string str, string patt ) {\n  int minIndex = INT_MAX;\n  int m = str . size ( );\n  int n = patt . size ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( patt [ i ] == str [ j ] && j < minIndex ) {\n        minIndex = j;\n        break;\n      }\n    }\n  }\n  if ( minIndex != INT_MAX ) cout << \"Minimum Index Character = \" << str [ minIndex ];\n  else cout << \"No character present\";\n}", "target_program": " def printMinIndexChar ( Str , patt ) :\n    minIndex = 10 ** 9\n    m = len ( Str )\n    n = len ( patt )\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( patt [ i ] == Str [ j ] and j < minIndex ) :\n                minIndex = j\n                break\n    if ( minIndex != 10 ** 9 ) :\n        print ( \"Minimum Index Character = \" , Str [ minIndex ] )\n    else :\n        print ( \"No character present\" )"}
{"source": "python", "target": "java", "source_program": " def transpose ( A , B ) :\n    for i in range ( N ) :\n        for j in range ( M ) :\n            B [ i ] [ j ] = A [ j ] [ i ]", "target_program": " static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < M ;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def transpose ( A , B ) :\n    for i in range ( N ) :\n        for j in range ( M ) :\n            B [ i ] [ j ] = A [ j ] [ i ]", "target_program": " void transpose ( int A [ ] [ N ], int B [ ] [ M ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < M;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ];\n}"}
{"source": "java", "target": "python", "source_program": " static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < M ;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;\n}", "target_program": " def transpose ( A , B ) :\n    for i in range ( N ) :\n        for j in range ( M ) :\n            B [ i ] [ j ] = A [ j ] [ i ]"}
{"source": "java", "target": "cpp", "source_program": " static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < M ;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;\n}", "target_program": " void transpose ( int A [ ] [ N ], int B [ ] [ M ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < M;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void transpose ( int A [ ] [ N ], int B [ ] [ M ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < M;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ];\n}", "target_program": " static void transpose ( int A [ ] [ ] , int B [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < M ;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void transpose ( int A [ ] [ N ], int B [ ] [ M ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < M;\n  j ++ ) B [ i ] [ j ] = A [ j ] [ i ];\n}", "target_program": " def transpose ( A , B ) :\n    for i in range ( N ) :\n        for j in range ( M ) :\n            B [ i ] [ j ] = A [ j ] [ i ]"}
{"source": "python", "target": "java", "source_program": " def countNumber ( n ) :\n    result = 0\n    for i in range ( 1 , 10 ) :\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            for j in range ( tp % 10 , 10 ) :\n                x = tp * 10 + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += 1\n    return result", "target_program": " static int countNumber ( int n ) {\n  int result = 0 ;\n  for ( int i = 1 ;\n  i <= 9 ;\n  i ++ ) {\n    Stack < Integer > s = new Stack < > ( ) ;\n    if ( i <= n ) {\n      s . push ( i ) ;\n      result ++ ;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . peek ( ) ;\n      s . pop ( ) ;\n      for ( int j = tp % 10 ;\n      j <= 9 ;\n      j ++ ) {\n        int x = tp * 10 + j ;\n        if ( x <= n ) {\n          s . push ( x ) ;\n          result ++ ;\n        }\n      }\n    }\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNumber ( n ) :\n    result = 0\n    for i in range ( 1 , 10 ) :\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            for j in range ( tp % 10 , 10 ) :\n                x = tp * 10 + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += 1\n    return result", "target_program": " int countNumber ( int n ) {\n  int result = 0;\n  for ( int i = 1;\n  i <= 9;\n  i ++ ) {\n    stack < int > s;\n    if ( i <= n ) {\n      s . push ( i );\n      result ++;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . top ( );\n      s . pop ( );\n      for ( int j = tp % 10;\n      j <= 9;\n      j ++ ) {\n        int x = tp * 10 + j;\n        if ( x <= n ) {\n          s . push ( x );\n          result ++;\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNumber ( int n ) {\n  int result = 0 ;\n  for ( int i = 1 ;\n  i <= 9 ;\n  i ++ ) {\n    Stack < Integer > s = new Stack < > ( ) ;\n    if ( i <= n ) {\n      s . push ( i ) ;\n      result ++ ;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . peek ( ) ;\n      s . pop ( ) ;\n      for ( int j = tp % 10 ;\n      j <= 9 ;\n      j ++ ) {\n        int x = tp * 10 + j ;\n        if ( x <= n ) {\n          s . push ( x ) ;\n          result ++ ;\n        }\n      }\n    }\n  }\n  return result ;\n}", "target_program": " def countNumber ( n ) :\n    result = 0\n    for i in range ( 1 , 10 ) :\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            for j in range ( tp % 10 , 10 ) :\n                x = tp * 10 + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += 1\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countNumber ( int n ) {\n  int result = 0 ;\n  for ( int i = 1 ;\n  i <= 9 ;\n  i ++ ) {\n    Stack < Integer > s = new Stack < > ( ) ;\n    if ( i <= n ) {\n      s . push ( i ) ;\n      result ++ ;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . peek ( ) ;\n      s . pop ( ) ;\n      for ( int j = tp % 10 ;\n      j <= 9 ;\n      j ++ ) {\n        int x = tp * 10 + j ;\n        if ( x <= n ) {\n          s . push ( x ) ;\n          result ++ ;\n        }\n      }\n    }\n  }\n  return result ;\n}", "target_program": " int countNumber ( int n ) {\n  int result = 0;\n  for ( int i = 1;\n  i <= 9;\n  i ++ ) {\n    stack < int > s;\n    if ( i <= n ) {\n      s . push ( i );\n      result ++;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . top ( );\n      s . pop ( );\n      for ( int j = tp % 10;\n      j <= 9;\n      j ++ ) {\n        int x = tp * 10 + j;\n        if ( x <= n ) {\n          s . push ( x );\n          result ++;\n        }\n      }\n    }\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countNumber ( int n ) {\n  int result = 0;\n  for ( int i = 1;\n  i <= 9;\n  i ++ ) {\n    stack < int > s;\n    if ( i <= n ) {\n      s . push ( i );\n      result ++;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . top ( );\n      s . pop ( );\n      for ( int j = tp % 10;\n      j <= 9;\n      j ++ ) {\n        int x = tp * 10 + j;\n        if ( x <= n ) {\n          s . push ( x );\n          result ++;\n        }\n      }\n    }\n  }\n  return result;\n}", "target_program": " static int countNumber ( int n ) {\n  int result = 0 ;\n  for ( int i = 1 ;\n  i <= 9 ;\n  i ++ ) {\n    Stack < Integer > s = new Stack < > ( ) ;\n    if ( i <= n ) {\n      s . push ( i ) ;\n      result ++ ;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . peek ( ) ;\n      s . pop ( ) ;\n      for ( int j = tp % 10 ;\n      j <= 9 ;\n      j ++ ) {\n        int x = tp * 10 + j ;\n        if ( x <= n ) {\n          s . push ( x ) ;\n          result ++ ;\n        }\n      }\n    }\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countNumber ( int n ) {\n  int result = 0;\n  for ( int i = 1;\n  i <= 9;\n  i ++ ) {\n    stack < int > s;\n    if ( i <= n ) {\n      s . push ( i );\n      result ++;\n    }\n    while ( ! s . empty ( ) ) {\n      int tp = s . top ( );\n      s . pop ( );\n      for ( int j = tp % 10;\n      j <= 9;\n      j ++ ) {\n        int x = tp * 10 + j;\n        if ( x <= n ) {\n          s . push ( x );\n          result ++;\n        }\n      }\n    }\n  }\n  return result;\n}", "target_program": " def countNumber ( n ) :\n    result = 0\n    for i in range ( 1 , 10 ) :\n        s = [ ]\n        if ( i <= n ) :\n            s.append ( i )\n            result += 1\n        while len ( s ) != 0 :\n            tp = s [ - 1 ]\n            s.pop ( )\n            for j in range ( tp % 10 , 10 ) :\n                x = tp * 10 + j\n                if ( x <= n ) :\n                    s.append ( x )\n                    result += 1\n    return result"}
{"source": "python", "target": "java", "source_program": " def firstFactorialDivisibleNumber ( x ) :\n    i = 1 ;\n    fact = 1 ;\n    for i in range ( 1 , x ) :\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n    return i", "target_program": " static int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1 ;\n  int fact = 1 ;\n  for ( i = 1 ;\n  i < x ;\n  i ++ ) {\n    fact = fact * i ;\n    if ( fact % x == 0 ) break ;\n  }\n  return i ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def firstFactorialDivisibleNumber ( x ) :\n    i = 1 ;\n    fact = 1 ;\n    for i in range ( 1 , x ) :\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n    return i", "target_program": " int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1;\n  int fact = 1;\n  for ( i = 1;\n  i < x;\n  i ++ ) {\n    fact = fact * i;\n    if ( fact % x == 0 ) break;\n  }\n  return i;\n}"}
{"source": "java", "target": "python", "source_program": " static int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1 ;\n  int fact = 1 ;\n  for ( i = 1 ;\n  i < x ;\n  i ++ ) {\n    fact = fact * i ;\n    if ( fact % x == 0 ) break ;\n  }\n  return i ;\n}", "target_program": " def firstFactorialDivisibleNumber ( x ) :\n    i = 1 ;\n    fact = 1 ;\n    for i in range ( 1 , x ) :\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n    return i"}
{"source": "java", "target": "cpp", "source_program": " static int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1 ;\n  int fact = 1 ;\n  for ( i = 1 ;\n  i < x ;\n  i ++ ) {\n    fact = fact * i ;\n    if ( fact % x == 0 ) break ;\n  }\n  return i ;\n}", "target_program": " int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1;\n  int fact = 1;\n  for ( i = 1;\n  i < x;\n  i ++ ) {\n    fact = fact * i;\n    if ( fact % x == 0 ) break;\n  }\n  return i;\n}"}
{"source": "cpp", "target": "java", "source_program": " int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1;\n  int fact = 1;\n  for ( i = 1;\n  i < x;\n  i ++ ) {\n    fact = fact * i;\n    if ( fact % x == 0 ) break;\n  }\n  return i;\n}", "target_program": " static int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1 ;\n  int fact = 1 ;\n  for ( i = 1 ;\n  i < x ;\n  i ++ ) {\n    fact = fact * i ;\n    if ( fact % x == 0 ) break ;\n  }\n  return i ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int firstFactorialDivisibleNumber ( int x ) {\n  int i = 1;\n  int fact = 1;\n  for ( i = 1;\n  i < x;\n  i ++ ) {\n    fact = fact * i;\n    if ( fact % x == 0 ) break;\n  }\n  return i;\n}", "target_program": " def firstFactorialDivisibleNumber ( x ) :\n    i = 1 ;\n    fact = 1 ;\n    for i in range ( 1 , x ) :\n        fact = fact * i\n        if ( fact % x == 0 ) :\n            break\n    return i"}
{"source": "python", "target": "java", "source_program": " def numberOfWays ( x ) :\n    if x == 0 or x == 1 :\n        return 1\n    else :\n        return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) )", "target_program": " static int numberOfWays ( int x ) {\n  int dp [ ] = new int [ x + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= x ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  return dp [ x ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numberOfWays ( x ) :\n    if x == 0 or x == 1 :\n        return 1\n    else :\n        return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) )", "target_program": " int numberOfWays ( int x ) {\n  int dp [ x + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= x;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  return dp [ x ];\n}"}
{"source": "java", "target": "python", "source_program": " static int numberOfWays ( int x ) {\n  int dp [ ] = new int [ x + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= x ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  return dp [ x ] ;\n}", "target_program": " def numberOfWays ( x ) :\n    if x == 0 or x == 1 :\n        return 1\n    else :\n        return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int numberOfWays ( int x ) {\n  int dp [ ] = new int [ x + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= x ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  return dp [ x ] ;\n}", "target_program": " int numberOfWays ( int x ) {\n  int dp [ x + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= x;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  return dp [ x ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int numberOfWays ( int x ) {\n  int dp [ x + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= x;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  return dp [ x ];\n}", "target_program": " static int numberOfWays ( int x ) {\n  int dp [ ] = new int [ x + 1 ] ;\n  dp [ 0 ] = dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= x ;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  return dp [ x ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numberOfWays ( int x ) {\n  int dp [ x + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= x;\n  i ++ ) dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  return dp [ x ];\n}", "target_program": " def numberOfWays ( x ) :\n    if x == 0 or x == 1 :\n        return 1\n    else :\n        return ( numberOfWays ( x - 1 ) + ( x - 1 ) * numberOfWays ( x - 2 ) )"}
{"source": "python", "target": "java", "source_program": " def countNegative ( M , n , m ) :\n    count = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if M [ i ] [ j ] < 0 :\n                count += 1\n            else :\n                break\n    return count", "target_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1 ;\n      else break ;\n    }\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNegative ( M , n , m ) :\n    count = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if M [ i ] [ j ] < 0 :\n                count += 1\n            else :\n                break\n    return count", "target_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1;\n      else break;\n    }\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1 ;\n      else break ;\n    }\n  }\n  return count ;\n}", "target_program": " def countNegative ( M , n , m ) :\n    count = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if M [ i ] [ j ] < 0 :\n                count += 1\n            else :\n                break\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1 ;\n      else break ;\n    }\n  }\n  return count ;\n}", "target_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1;\n      else break;\n    }\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1;\n      else break;\n    }\n  }\n  return count;\n}", "target_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1 ;\n      else break ;\n    }\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( M [ i ] [ j ] < 0 ) count += 1;\n      else break;\n    }\n  }\n  return count;\n}", "target_program": " def countNegative ( M , n , m ) :\n    count = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if M [ i ] [ j ] < 0 :\n                count += 1\n            else :\n                break\n    return count"}
{"source": "python", "target": "java", "source_program": " def countSetBits ( n ) :\n    count = 0\n    while ( n ) :\n        count += n & 1\n        n >>= 1\n    return count", "target_program": " static int countSetBits ( int n ) {\n  int count = 0 ;\n  while ( n > 0 ) {\n    count += n & 1 ;\n    n >>= 1 ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSetBits ( n ) :\n    count = 0\n    while ( n ) :\n        count += n & 1\n        n >>= 1\n    return count", "target_program": " unsigned int countSetBits ( unsigned int n ) {\n  unsigned int count = 0;\n  while ( n ) {\n    count += n & 1;\n    n >>= 1;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSetBits ( int n ) {\n  int count = 0 ;\n  while ( n > 0 ) {\n    count += n & 1 ;\n    n >>= 1 ;\n  }\n  return count ;\n}", "target_program": " def countSetBits ( n ) :\n    count = 0\n    while ( n ) :\n        count += n & 1\n        n >>= 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countSetBits ( int n ) {\n  int count = 0 ;\n  while ( n > 0 ) {\n    count += n & 1 ;\n    n >>= 1 ;\n  }\n  return count ;\n}", "target_program": " unsigned int countSetBits ( unsigned int n ) {\n  unsigned int count = 0;\n  while ( n ) {\n    count += n & 1;\n    n >>= 1;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int countSetBits ( unsigned int n ) {\n  unsigned int count = 0;\n  while ( n ) {\n    count += n & 1;\n    n >>= 1;\n  }\n  return count;\n}", "target_program": " static int countSetBits ( int n ) {\n  int count = 0 ;\n  while ( n > 0 ) {\n    count += n & 1 ;\n    n >>= 1 ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int countSetBits ( unsigned int n ) {\n  unsigned int count = 0;\n  while ( n ) {\n    count += n & 1;\n    n >>= 1;\n  }\n  return count;\n}", "target_program": " def countSetBits ( n ) :\n    count = 0\n    while ( n ) :\n        count += n & 1\n        n >>= 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def findMod ( a , b ) :\n    if ( a < 0 ) :\n        a = - a\n    if ( b < 0 ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < 0 ) :\n        return - mod\n    return mod", "target_program": " static double findMod ( double a , double b ) {\n  if ( a < 0 ) a = - a ;\n  if ( b < 0 ) b = - b ;\n  double mod = a ;\n  while ( mod >= b ) mod = mod - b ;\n  if ( a < 0 ) return - mod ;\n  return mod ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMod ( a , b ) :\n    if ( a < 0 ) :\n        a = - a\n    if ( b < 0 ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < 0 ) :\n        return - mod\n    return mod", "target_program": " double findMod ( double a, double b ) {\n  double mod;\n  if ( a < 0 ) mod = - a;\n  else mod = a;\n  if ( b < 0 ) b = - b;\n  while ( mod >= b ) mod = mod - b;\n  if ( a < 0 ) return - mod;\n  return mod;\n}"}
{"source": "java", "target": "python", "source_program": " static double findMod ( double a , double b ) {\n  if ( a < 0 ) a = - a ;\n  if ( b < 0 ) b = - b ;\n  double mod = a ;\n  while ( mod >= b ) mod = mod - b ;\n  if ( a < 0 ) return - mod ;\n  return mod ;\n}", "target_program": " def findMod ( a , b ) :\n    if ( a < 0 ) :\n        a = - a\n    if ( b < 0 ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < 0 ) :\n        return - mod\n    return mod"}
{"source": "java", "target": "cpp", "source_program": " static double findMod ( double a , double b ) {\n  if ( a < 0 ) a = - a ;\n  if ( b < 0 ) b = - b ;\n  double mod = a ;\n  while ( mod >= b ) mod = mod - b ;\n  if ( a < 0 ) return - mod ;\n  return mod ;\n}", "target_program": " double findMod ( double a, double b ) {\n  double mod;\n  if ( a < 0 ) mod = - a;\n  else mod = a;\n  if ( b < 0 ) b = - b;\n  while ( mod >= b ) mod = mod - b;\n  if ( a < 0 ) return - mod;\n  return mod;\n}"}
{"source": "cpp", "target": "java", "source_program": " double findMod ( double a, double b ) {\n  double mod;\n  if ( a < 0 ) mod = - a;\n  else mod = a;\n  if ( b < 0 ) b = - b;\n  while ( mod >= b ) mod = mod - b;\n  if ( a < 0 ) return - mod;\n  return mod;\n}", "target_program": " static double findMod ( double a , double b ) {\n  if ( a < 0 ) a = - a ;\n  if ( b < 0 ) b = - b ;\n  double mod = a ;\n  while ( mod >= b ) mod = mod - b ;\n  if ( a < 0 ) return - mod ;\n  return mod ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double findMod ( double a, double b ) {\n  double mod;\n  if ( a < 0 ) mod = - a;\n  else mod = a;\n  if ( b < 0 ) b = - b;\n  while ( mod >= b ) mod = mod - b;\n  if ( a < 0 ) return - mod;\n  return mod;\n}", "target_program": " def findMod ( a , b ) :\n    if ( a < 0 ) :\n        a = - a\n    if ( b < 0 ) :\n        b = - b\n    mod = a\n    while ( mod >= b ) :\n        mod = mod - b\n    if ( a < 0 ) :\n        return - mod\n    return mod"}
{"source": "python", "target": "java", "source_program": " def findMaxValue ( mat ) :\n    maxValue = - sys.maxsize - 1\n    maxArr = [ [ 0 for x in range ( N ) ] for y in range ( N ) ]\n    maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ]\n    maxv = mat [ N - 1 ] [ N - 1 ] ;\n    for j in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ N - 1 ] [ j ] > maxv ) :\n            maxv = mat [ N - 1 ] [ j ]\n        maxArr [ N - 1 ] [ j ] = maxv\n    maxv = mat [ N - 1 ] [ N - 1 ]\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ i ] [ N - 1 ] > maxv ) :\n            maxv = mat [ i ] [ N - 1 ]\n        maxArr [ i ] [ N - 1 ] = maxv\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        for j in range ( N - 2 , - 1 , - 1 ) :\n            if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) :\n                maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] )\n            maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) )\n    return maxValue", "target_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  int maxArr [ ] [ ] = new int [ N ] [ N ] ;\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;\n  int maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int j = N - 2 ;\n  j >= 0 ;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ;\n    maxArr [ N - 1 ] [ j ] = maxv ;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ] ;\n    maxArr [ i ] [ N - 1 ] = maxv ;\n  }\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ;\n      maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Math . max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) ) ;\n    }\n  }\n  return maxValue ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxValue ( mat ) :\n    maxValue = - sys.maxsize - 1\n    maxArr = [ [ 0 for x in range ( N ) ] for y in range ( N ) ]\n    maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ]\n    maxv = mat [ N - 1 ] [ N - 1 ] ;\n    for j in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ N - 1 ] [ j ] > maxv ) :\n            maxv = mat [ N - 1 ] [ j ]\n        maxArr [ N - 1 ] [ j ] = maxv\n    maxv = mat [ N - 1 ] [ N - 1 ]\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ i ] [ N - 1 ] > maxv ) :\n            maxv = mat [ i ] [ N - 1 ]\n        maxArr [ i ] [ N - 1 ] = maxv\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        for j in range ( N - 2 , - 1 , - 1 ) :\n            if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) :\n                maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] )\n            maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) )\n    return maxValue", "target_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  int maxArr [ N ] [ N ];\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ];\n  int maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int j = N - 2;\n  j >= 0;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ];\n    maxArr [ N - 1 ] [ j ] = maxv;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ];\n    maxArr [ i ] [ N - 1 ] = maxv;\n  }\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 2;\n    j >= 0;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ];\n      maxArr [ i ] [ j ] = max ( mat [ i ] [ j ], max ( maxArr [ i ] [ j + 1 ], maxArr [ i + 1 ] [ j ] ) );\n    }\n  }\n  return maxValue;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  int maxArr [ ] [ ] = new int [ N ] [ N ] ;\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;\n  int maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int j = N - 2 ;\n  j >= 0 ;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ;\n    maxArr [ N - 1 ] [ j ] = maxv ;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ] ;\n    maxArr [ i ] [ N - 1 ] = maxv ;\n  }\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ;\n      maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Math . max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) ) ;\n    }\n  }\n  return maxValue ;\n}", "target_program": " def findMaxValue ( mat ) :\n    maxValue = - sys.maxsize - 1\n    maxArr = [ [ 0 for x in range ( N ) ] for y in range ( N ) ]\n    maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ]\n    maxv = mat [ N - 1 ] [ N - 1 ] ;\n    for j in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ N - 1 ] [ j ] > maxv ) :\n            maxv = mat [ N - 1 ] [ j ]\n        maxArr [ N - 1 ] [ j ] = maxv\n    maxv = mat [ N - 1 ] [ N - 1 ]\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ i ] [ N - 1 ] > maxv ) :\n            maxv = mat [ i ] [ N - 1 ]\n        maxArr [ i ] [ N - 1 ] = maxv\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        for j in range ( N - 2 , - 1 , - 1 ) :\n            if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) :\n                maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] )\n            maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) )\n    return maxValue"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  int maxArr [ ] [ ] = new int [ N ] [ N ] ;\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;\n  int maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int j = N - 2 ;\n  j >= 0 ;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ;\n    maxArr [ N - 1 ] [ j ] = maxv ;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ] ;\n    maxArr [ i ] [ N - 1 ] = maxv ;\n  }\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ;\n      maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Math . max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) ) ;\n    }\n  }\n  return maxValue ;\n}", "target_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  int maxArr [ N ] [ N ];\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ];\n  int maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int j = N - 2;\n  j >= 0;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ];\n    maxArr [ N - 1 ] [ j ] = maxv;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ];\n    maxArr [ i ] [ N - 1 ] = maxv;\n  }\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 2;\n    j >= 0;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ];\n      maxArr [ i ] [ j ] = max ( mat [ i ] [ j ], max ( maxArr [ i ] [ j + 1 ], maxArr [ i + 1 ] [ j ] ) );\n    }\n  }\n  return maxValue;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  int maxArr [ N ] [ N ];\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ];\n  int maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int j = N - 2;\n  j >= 0;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ];\n    maxArr [ N - 1 ] [ j ] = maxv;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ];\n    maxArr [ i ] [ N - 1 ] = maxv;\n  }\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 2;\n    j >= 0;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ];\n      maxArr [ i ] [ j ] = max ( mat [ i ] [ j ], max ( maxArr [ i ] [ j + 1 ], maxArr [ i + 1 ] [ j ] ) );\n    }\n  }\n  return maxValue;\n}", "target_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  int maxArr [ ] [ ] = new int [ N ] [ N ] ;\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ] ;\n  int maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int j = N - 2 ;\n  j >= 0 ;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ] ;\n    maxArr [ N - 1 ] [ j ] = maxv ;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ] ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ] ;\n    maxArr [ i ] [ N - 1 ] = maxv ;\n  }\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] ;\n      maxArr [ i ] [ j ] = Math . max ( mat [ i ] [ j ] , Math . max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) ) ;\n    }\n  }\n  return maxValue ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  int maxArr [ N ] [ N ];\n  maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ];\n  int maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int j = N - 2;\n  j >= 0;\n  j -- ) {\n    if ( mat [ N - 1 ] [ j ] > maxv ) maxv = mat [ N - 1 ] [ j ];\n    maxArr [ N - 1 ] [ j ] = maxv;\n  }\n  maxv = mat [ N - 1 ] [ N - 1 ];\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    if ( mat [ i ] [ N - 1 ] > maxv ) maxv = mat [ i ] [ N - 1 ];\n    maxArr [ i ] [ N - 1 ] = maxv;\n  }\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 2;\n    j >= 0;\n    j -- ) {\n      if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) maxValue = maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ];\n      maxArr [ i ] [ j ] = max ( mat [ i ] [ j ], max ( maxArr [ i ] [ j + 1 ], maxArr [ i + 1 ] [ j ] ) );\n    }\n  }\n  return maxValue;\n}", "target_program": " def findMaxValue ( mat ) :\n    maxValue = - sys.maxsize - 1\n    maxArr = [ [ 0 for x in range ( N ) ] for y in range ( N ) ]\n    maxArr [ N - 1 ] [ N - 1 ] = mat [ N - 1 ] [ N - 1 ]\n    maxv = mat [ N - 1 ] [ N - 1 ] ;\n    for j in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ N - 1 ] [ j ] > maxv ) :\n            maxv = mat [ N - 1 ] [ j ]\n        maxArr [ N - 1 ] [ j ] = maxv\n    maxv = mat [ N - 1 ] [ N - 1 ]\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        if ( mat [ i ] [ N - 1 ] > maxv ) :\n            maxv = mat [ i ] [ N - 1 ]\n        maxArr [ i ] [ N - 1 ] = maxv\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        for j in range ( N - 2 , - 1 , - 1 ) :\n            if ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] > maxValue ) :\n                maxValue = ( maxArr [ i + 1 ] [ j + 1 ] - mat [ i ] [ j ] )\n            maxArr [ i ] [ j ] = max ( mat [ i ] [ j ] , max ( maxArr [ i ] [ j + 1 ] , maxArr [ i + 1 ] [ j ] ) )\n    return maxValue"}
{"source": "python", "target": "java", "source_program": " def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0 ; b = 0\n    for i in range ( n ) :\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n    return a + b", "target_program": " static int solve ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int a = 0 , b = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;\n    else b = b * 10 + arr [ i ] ;\n  }\n  return a + b ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0 ; b = 0\n    for i in range ( n ) :\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n    return a + b", "target_program": " int solve ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int a = 0, b = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i & 1 ) a = a * 10 + arr [ i ];\n    else b = b * 10 + arr [ i ];\n  }\n  return a + b;\n}"}
{"source": "java", "target": "python", "source_program": " static int solve ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int a = 0 , b = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;\n    else b = b * 10 + arr [ i ] ;\n  }\n  return a + b ;\n}", "target_program": " def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0 ; b = 0\n    for i in range ( n ) :\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n    return a + b"}
{"source": "java", "target": "cpp", "source_program": " static int solve ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int a = 0 , b = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;\n    else b = b * 10 + arr [ i ] ;\n  }\n  return a + b ;\n}", "target_program": " int solve ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int a = 0, b = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i & 1 ) a = a * 10 + arr [ i ];\n    else b = b * 10 + arr [ i ];\n  }\n  return a + b;\n}"}
{"source": "cpp", "target": "java", "source_program": " int solve ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int a = 0, b = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i & 1 ) a = a * 10 + arr [ i ];\n    else b = b * 10 + arr [ i ];\n  }\n  return a + b;\n}", "target_program": " static int solve ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int a = 0 , b = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 0 ) a = a * 10 + arr [ i ] ;\n    else b = b * 10 + arr [ i ] ;\n  }\n  return a + b ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int solve ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int a = 0, b = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i & 1 ) a = a * 10 + arr [ i ];\n    else b = b * 10 + arr [ i ];\n  }\n  return a + b;\n}", "target_program": " def solve ( arr , n ) :\n    arr.sort ( )\n    a = 0 ; b = 0\n    for i in range ( n ) :\n        if ( i % 2 != 0 ) :\n            a = a * 10 + arr [ i ]\n        else :\n            b = b * 10 + arr [ i ]\n    return a + b"}
{"source": "python", "target": "java", "source_program": " def countSolutions ( n ) :\n    x = 0\n    res = 0\n    yCount = 0\n    while ( yCount * yCount < n ) :\n        yCount = yCount + 1\n    while ( yCount != 0 ) :\n        res = res + yCount\n        x = x + 1\n        while ( yCount != 0 and ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) :\n            yCount = yCount - 1\n    return res", "target_program": " static int countSolutions ( int n ) {\n  int x = 0 , yCount , res = 0 ;\n  for ( yCount = 0 ;\n  yCount * yCount < n ;\n  yCount ++ ) ;\n  while ( yCount != 0 ) {\n    res += yCount ;\n    x ++ ;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount -- ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSolutions ( n ) :\n    x = 0\n    res = 0\n    yCount = 0\n    while ( yCount * yCount < n ) :\n        yCount = yCount + 1\n    while ( yCount != 0 ) :\n        res = res + yCount\n        x = x + 1\n        while ( yCount != 0 and ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) :\n            yCount = yCount - 1\n    return res", "target_program": " int countSolutions ( int n ) {\n  int x = 0, yCount, res = 0;\n  for ( yCount = 0;\n  yCount * yCount < n;\n  yCount ++ );\n  while ( yCount != 0 ) {\n    res += yCount;\n    x ++;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount --;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSolutions ( int n ) {\n  int x = 0 , yCount , res = 0 ;\n  for ( yCount = 0 ;\n  yCount * yCount < n ;\n  yCount ++ ) ;\n  while ( yCount != 0 ) {\n    res += yCount ;\n    x ++ ;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount -- ;\n  }\n  return res ;\n}", "target_program": " def countSolutions ( n ) :\n    x = 0\n    res = 0\n    yCount = 0\n    while ( yCount * yCount < n ) :\n        yCount = yCount + 1\n    while ( yCount != 0 ) :\n        res = res + yCount\n        x = x + 1\n        while ( yCount != 0 and ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) :\n            yCount = yCount - 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countSolutions ( int n ) {\n  int x = 0 , yCount , res = 0 ;\n  for ( yCount = 0 ;\n  yCount * yCount < n ;\n  yCount ++ ) ;\n  while ( yCount != 0 ) {\n    res += yCount ;\n    x ++ ;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount -- ;\n  }\n  return res ;\n}", "target_program": " int countSolutions ( int n ) {\n  int x = 0, yCount, res = 0;\n  for ( yCount = 0;\n  yCount * yCount < n;\n  yCount ++ );\n  while ( yCount != 0 ) {\n    res += yCount;\n    x ++;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount --;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSolutions ( int n ) {\n  int x = 0, yCount, res = 0;\n  for ( yCount = 0;\n  yCount * yCount < n;\n  yCount ++ );\n  while ( yCount != 0 ) {\n    res += yCount;\n    x ++;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount --;\n  }\n  return res;\n}", "target_program": " static int countSolutions ( int n ) {\n  int x = 0 , yCount , res = 0 ;\n  for ( yCount = 0 ;\n  yCount * yCount < n ;\n  yCount ++ ) ;\n  while ( yCount != 0 ) {\n    res += yCount ;\n    x ++ ;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount -- ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSolutions ( int n ) {\n  int x = 0, yCount, res = 0;\n  for ( yCount = 0;\n  yCount * yCount < n;\n  yCount ++ );\n  while ( yCount != 0 ) {\n    res += yCount;\n    x ++;\n    while ( yCount != 0 && ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) yCount --;\n  }\n  return res;\n}", "target_program": " def countSolutions ( n ) :\n    x = 0\n    res = 0\n    yCount = 0\n    while ( yCount * yCount < n ) :\n        yCount = yCount + 1\n    while ( yCount != 0 ) :\n        res = res + yCount\n        x = x + 1\n        while ( yCount != 0 and ( x * x + ( yCount - 1 ) * ( yCount - 1 ) >= n ) ) :\n            yCount = yCount - 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def findIndex ( n ) :\n    if ( n <= 1 ) :\n        return n\n    a = 0\n    b = 1\n    c = 1\n    res = 1\n    while ( c < n ) :\n        c = a + b\n        res = res + 1\n        a = b\n        b = c\n    return res", "target_program": " static int findIndex ( int n ) {\n  if ( n <= 1 ) return n ;\n  int a = 0 , b = 1 , c = 1 ;\n  int res = 1 ;\n  while ( c < n ) {\n    c = a + b ;\n    res ++ ;\n    a = b ;\n    b = c ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findIndex ( n ) :\n    if ( n <= 1 ) :\n        return n\n    a = 0\n    b = 1\n    c = 1\n    res = 1\n    while ( c < n ) :\n        c = a + b\n        res = res + 1\n        a = b\n        b = c\n    return res", "target_program": " int findIndex ( int n ) {\n  if ( n <= 1 ) return n;\n  int a = 0, b = 1, c = 1;\n  int res = 1;\n  while ( c < n ) {\n    c = a + b;\n    res ++;\n    a = b;\n    b = c;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findIndex ( int n ) {\n  if ( n <= 1 ) return n ;\n  int a = 0 , b = 1 , c = 1 ;\n  int res = 1 ;\n  while ( c < n ) {\n    c = a + b ;\n    res ++ ;\n    a = b ;\n    b = c ;\n  }\n  return res ;\n}", "target_program": " def findIndex ( n ) :\n    if ( n <= 1 ) :\n        return n\n    a = 0\n    b = 1\n    c = 1\n    res = 1\n    while ( c < n ) :\n        c = a + b\n        res = res + 1\n        a = b\n        b = c\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findIndex ( int n ) {\n  if ( n <= 1 ) return n ;\n  int a = 0 , b = 1 , c = 1 ;\n  int res = 1 ;\n  while ( c < n ) {\n    c = a + b ;\n    res ++ ;\n    a = b ;\n    b = c ;\n  }\n  return res ;\n}", "target_program": " int findIndex ( int n ) {\n  if ( n <= 1 ) return n;\n  int a = 0, b = 1, c = 1;\n  int res = 1;\n  while ( c < n ) {\n    c = a + b;\n    res ++;\n    a = b;\n    b = c;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findIndex ( int n ) {\n  if ( n <= 1 ) return n;\n  int a = 0, b = 1, c = 1;\n  int res = 1;\n  while ( c < n ) {\n    c = a + b;\n    res ++;\n    a = b;\n    b = c;\n  }\n  return res;\n}", "target_program": " static int findIndex ( int n ) {\n  if ( n <= 1 ) return n ;\n  int a = 0 , b = 1 , c = 1 ;\n  int res = 1 ;\n  while ( c < n ) {\n    c = a + b ;\n    res ++ ;\n    a = b ;\n    b = c ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findIndex ( int n ) {\n  if ( n <= 1 ) return n;\n  int a = 0, b = 1, c = 1;\n  int res = 1;\n  while ( c < n ) {\n    c = a + b;\n    res ++;\n    a = b;\n    b = c;\n  }\n  return res;\n}", "target_program": " def findIndex ( n ) :\n    if ( n <= 1 ) :\n        return n\n    a = 0\n    b = 1\n    c = 1\n    res = 1\n    while ( c < n ) :\n        c = a + b\n        res = res + 1\n        a = b\n        b = c\n    return res"}
{"source": "python", "target": "java", "source_program": " def octalToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 8 ;\n    return dec_value ;", "target_program": " static int octalToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 8 ;\n  }\n  return dec_value ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def octalToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 8 ;\n    return dec_value ;", "target_program": " int octalToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 8;\n  }\n  return dec_value;\n}"}
{"source": "java", "target": "python", "source_program": " static int octalToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 8 ;\n  }\n  return dec_value ;\n}", "target_program": " def octalToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 8 ;\n    return dec_value ;"}
{"source": "java", "target": "cpp", "source_program": " static int octalToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 8 ;\n  }\n  return dec_value ;\n}", "target_program": " int octalToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 8;\n  }\n  return dec_value;\n}"}
{"source": "cpp", "target": "java", "source_program": " int octalToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 8;\n  }\n  return dec_value;\n}", "target_program": " static int octalToDecimal ( int n ) {\n  int num = n ;\n  int dec_value = 0 ;\n  int base = 1 ;\n  int temp = num ;\n  while ( temp > 0 ) {\n    int last_digit = temp % 10 ;\n    temp = temp / 10 ;\n    dec_value += last_digit * base ;\n    base = base * 8 ;\n  }\n  return dec_value ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int octalToDecimal ( int n ) {\n  int num = n;\n  int dec_value = 0;\n  int base = 1;\n  int temp = num;\n  while ( temp ) {\n    int last_digit = temp % 10;\n    temp = temp / 10;\n    dec_value += last_digit * base;\n    base = base * 8;\n  }\n  return dec_value;\n}", "target_program": " def octalToDecimal ( n ) :\n    num = n ;\n    dec_value = 0 ;\n    base = 1 ;\n    temp = num ;\n    while ( temp ) :\n        last_digit = temp % 10 ;\n        temp = int ( temp / 10 ) ;\n        dec_value += last_digit * base ;\n        base = base * 8 ;\n    return dec_value ;"}
{"source": "python", "target": "java", "source_program": " def permutatedRows ( mat , m , n , r ) :\n    s = set ( )\n    for j in range ( n ) :\n        s.add ( mat [ r ] [ j ] )\n    for i in range ( m ) :\n        if i == r :\n            continue\n        for j in range ( n ) :\n            if mat [ i ] [ j ] not in s :\n                j = j - 2\n                break ;\n        if j + 1 != n :\n            continue\n        print ( i )", "target_program": " static void permutatedRows ( int mat [ ] [ ] , int m , int n , int r ) {\n  LinkedHashSet < Integer > s = new LinkedHashSet < > ( ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) s . add ( mat [ r ] [ j ] ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    if ( i == r ) continue ;\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( ! s . contains ( mat [ i ] [ j ] ) ) break ;\n    if ( j != n ) continue ;\n    System . out . print ( i + \", \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def permutatedRows ( mat , m , n , r ) :\n    s = set ( )\n    for j in range ( n ) :\n        s.add ( mat [ r ] [ j ] )\n    for i in range ( m ) :\n        if i == r :\n            continue\n        for j in range ( n ) :\n            if mat [ i ] [ j ] not in s :\n                j = j - 2\n                break ;\n        if j + 1 != n :\n            continue\n        print ( i )", "target_program": " void permutatedRows ( int mat [ ] [ MAX ], int m, int n, int r ) {\n  unordered_set < int > s;\n  for ( int j = 0;\n  j < n;\n  j ++ ) s . insert ( mat [ r ] [ j ] );\n  for ( int i = 0;\n  i < m;\n  i ++ ) {\n    if ( i == r ) continue;\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( s . find ( mat [ i ] [ j ] ) == s . end ( ) ) break;\n    if ( j != n ) continue;\n    cout << i << \", \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void permutatedRows ( int mat [ ] [ ] , int m , int n , int r ) {\n  LinkedHashSet < Integer > s = new LinkedHashSet < > ( ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) s . add ( mat [ r ] [ j ] ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    if ( i == r ) continue ;\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( ! s . contains ( mat [ i ] [ j ] ) ) break ;\n    if ( j != n ) continue ;\n    System . out . print ( i + \", \" ) ;\n  }\n}", "target_program": " def permutatedRows ( mat , m , n , r ) :\n    s = set ( )\n    for j in range ( n ) :\n        s.add ( mat [ r ] [ j ] )\n    for i in range ( m ) :\n        if i == r :\n            continue\n        for j in range ( n ) :\n            if mat [ i ] [ j ] not in s :\n                j = j - 2\n                break ;\n        if j + 1 != n :\n            continue\n        print ( i )"}
{"source": "java", "target": "cpp", "source_program": " static void permutatedRows ( int mat [ ] [ ] , int m , int n , int r ) {\n  LinkedHashSet < Integer > s = new LinkedHashSet < > ( ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) s . add ( mat [ r ] [ j ] ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    if ( i == r ) continue ;\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( ! s . contains ( mat [ i ] [ j ] ) ) break ;\n    if ( j != n ) continue ;\n    System . out . print ( i + \", \" ) ;\n  }\n}", "target_program": " void permutatedRows ( int mat [ ] [ MAX ], int m, int n, int r ) {\n  unordered_set < int > s;\n  for ( int j = 0;\n  j < n;\n  j ++ ) s . insert ( mat [ r ] [ j ] );\n  for ( int i = 0;\n  i < m;\n  i ++ ) {\n    if ( i == r ) continue;\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( s . find ( mat [ i ] [ j ] ) == s . end ( ) ) break;\n    if ( j != n ) continue;\n    cout << i << \", \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void permutatedRows ( int mat [ ] [ MAX ], int m, int n, int r ) {\n  unordered_set < int > s;\n  for ( int j = 0;\n  j < n;\n  j ++ ) s . insert ( mat [ r ] [ j ] );\n  for ( int i = 0;\n  i < m;\n  i ++ ) {\n    if ( i == r ) continue;\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( s . find ( mat [ i ] [ j ] ) == s . end ( ) ) break;\n    if ( j != n ) continue;\n    cout << i << \", \";\n  }\n}", "target_program": " static void permutatedRows ( int mat [ ] [ ] , int m , int n , int r ) {\n  LinkedHashSet < Integer > s = new LinkedHashSet < > ( ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) s . add ( mat [ r ] [ j ] ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) {\n    if ( i == r ) continue ;\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( ! s . contains ( mat [ i ] [ j ] ) ) break ;\n    if ( j != n ) continue ;\n    System . out . print ( i + \", \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void permutatedRows ( int mat [ ] [ MAX ], int m, int n, int r ) {\n  unordered_set < int > s;\n  for ( int j = 0;\n  j < n;\n  j ++ ) s . insert ( mat [ r ] [ j ] );\n  for ( int i = 0;\n  i < m;\n  i ++ ) {\n    if ( i == r ) continue;\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( s . find ( mat [ i ] [ j ] ) == s . end ( ) ) break;\n    if ( j != n ) continue;\n    cout << i << \", \";\n  }\n}", "target_program": " def permutatedRows ( mat , m , n , r ) :\n    s = set ( )\n    for j in range ( n ) :\n        s.add ( mat [ r ] [ j ] )\n    for i in range ( m ) :\n        if i == r :\n            continue\n        for j in range ( n ) :\n            if mat [ i ] [ j ] not in s :\n                j = j - 2\n                break ;\n        if j + 1 != n :\n            continue\n        print ( i )"}
{"source": "python", "target": "java", "source_program": " def distancesum ( x , y , n ) :\n    sum = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n    return sum", "target_program": " static int distancesum ( int x [ ] , int y [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def distancesum ( x , y , n ) :\n    sum = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n    return sum", "target_program": " int distancesum ( int x [ ], int y [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) );\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int distancesum ( int x [ ] , int y [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ;\n  return sum ;\n}", "target_program": " def distancesum ( x , y , n ) :\n    sum = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int distancesum ( int x [ ] , int y [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ;\n  return sum ;\n}", "target_program": " int distancesum ( int x [ ], int y [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) );\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int distancesum ( int x [ ], int y [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) );\n  return sum;\n}", "target_program": " static int distancesum ( int x [ ] , int y [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) sum += ( Math . abs ( x [ i ] - x [ j ] ) + Math . abs ( y [ i ] - y [ j ] ) ) ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int distancesum ( int x [ ], int y [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) );\n  return sum;\n}", "target_program": " def distancesum ( x , y , n ) :\n    sum = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            sum += ( abs ( x [ i ] - x [ j ] ) + abs ( y [ i ] - y [ j ] ) )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def isCornerPresent ( str , corner ) :\n    n = len ( str )\n    cl = len ( corner )\n    if ( n < cl ) :\n        return False\n    return ( ( str [ : cl ] == corner ) and ( str [ n - cl : ] == corner ) )", "target_program": " static boolean isCornerPresent ( String str , String corner ) {\n  int n = str . length ( ) ;\n  int cl = corner . length ( ) ;\n  if ( n < cl ) return false ;\n  return ( str . substring ( 0 , cl ) . equals ( corner ) && str . substring ( n - cl , n ) . equals ( corner ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isCornerPresent ( str , corner ) :\n    n = len ( str )\n    cl = len ( corner )\n    if ( n < cl ) :\n        return False\n    return ( ( str [ : cl ] == corner ) and ( str [ n - cl : ] == corner ) )", "target_program": " bool isCornerPresent ( string str, string corner ) {\n  int n = str . length ( );\n  int cl = corner . length ( );\n  if ( n < cl ) return false;\n  return ( str . substr ( 0, cl ) . compare ( corner ) == 0 && str . substr ( n - cl, cl ) . compare ( corner ) == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isCornerPresent ( String str , String corner ) {\n  int n = str . length ( ) ;\n  int cl = corner . length ( ) ;\n  if ( n < cl ) return false ;\n  return ( str . substring ( 0 , cl ) . equals ( corner ) && str . substring ( n - cl , n ) . equals ( corner ) ) ;\n}", "target_program": " def isCornerPresent ( str , corner ) :\n    n = len ( str )\n    cl = len ( corner )\n    if ( n < cl ) :\n        return False\n    return ( ( str [ : cl ] == corner ) and ( str [ n - cl : ] == corner ) )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isCornerPresent ( String str , String corner ) {\n  int n = str . length ( ) ;\n  int cl = corner . length ( ) ;\n  if ( n < cl ) return false ;\n  return ( str . substring ( 0 , cl ) . equals ( corner ) && str . substring ( n - cl , n ) . equals ( corner ) ) ;\n}", "target_program": " bool isCornerPresent ( string str, string corner ) {\n  int n = str . length ( );\n  int cl = corner . length ( );\n  if ( n < cl ) return false;\n  return ( str . substr ( 0, cl ) . compare ( corner ) == 0 && str . substr ( n - cl, cl ) . compare ( corner ) == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isCornerPresent ( string str, string corner ) {\n  int n = str . length ( );\n  int cl = corner . length ( );\n  if ( n < cl ) return false;\n  return ( str . substr ( 0, cl ) . compare ( corner ) == 0 && str . substr ( n - cl, cl ) . compare ( corner ) == 0 );\n}", "target_program": " static boolean isCornerPresent ( String str , String corner ) {\n  int n = str . length ( ) ;\n  int cl = corner . length ( ) ;\n  if ( n < cl ) return false ;\n  return ( str . substring ( 0 , cl ) . equals ( corner ) && str . substring ( n - cl , n ) . equals ( corner ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isCornerPresent ( string str, string corner ) {\n  int n = str . length ( );\n  int cl = corner . length ( );\n  if ( n < cl ) return false;\n  return ( str . substr ( 0, cl ) . compare ( corner ) == 0 && str . substr ( n - cl, cl ) . compare ( corner ) == 0 );\n}", "target_program": " def isCornerPresent ( str , corner ) :\n    n = len ( str )\n    cl = len ( corner )\n    if ( n < cl ) :\n        return False\n    return ( ( str [ : cl ] == corner ) and ( str [ n - cl : ] == corner ) )"}
{"source": "python", "target": "java", "source_program": " def lenOfLongSubarr ( arr , n ) :\n    um = { i : 0 for i in range ( 10 ) }\n    sum = 0\n    maxLen = 0\n    for i in range ( n ) :\n        if arr [ i ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n    return maxLen", "target_program": " static int lenOfLongSubarr ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 , maxLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1 ;\n    if ( sum == 1 ) maxLen = i + 1 ;\n    else if ( ! um . containsKey ( sum ) ) um . put ( sum , i ) ;\n    if ( um . containsKey ( sum - 1 ) ) {\n      if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i - um . get ( sum - 1 ) ;\n    }\n  }\n  return maxLen ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lenOfLongSubarr ( arr , n ) :\n    um = { i : 0 for i in range ( 10 ) }\n    sum = 0\n    maxLen = 0\n    for i in range ( n ) :\n        if arr [ i ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n    return maxLen", "target_program": " int lenOfLongSubarr ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int sum = 0, maxLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1;\n    if ( sum == 1 ) maxLen = i + 1;\n    else if ( um . find ( sum ) == um . end ( ) ) um [ sum ] = i;\n    if ( um . find ( sum - 1 ) != um . end ( ) ) {\n      if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um [ sum - 1 ];\n    }\n  }\n  return maxLen;\n}"}
{"source": "java", "target": "python", "source_program": " static int lenOfLongSubarr ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 , maxLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1 ;\n    if ( sum == 1 ) maxLen = i + 1 ;\n    else if ( ! um . containsKey ( sum ) ) um . put ( sum , i ) ;\n    if ( um . containsKey ( sum - 1 ) ) {\n      if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i - um . get ( sum - 1 ) ;\n    }\n  }\n  return maxLen ;\n}", "target_program": " def lenOfLongSubarr ( arr , n ) :\n    um = { i : 0 for i in range ( 10 ) }\n    sum = 0\n    maxLen = 0\n    for i in range ( n ) :\n        if arr [ i ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n    return maxLen"}
{"source": "java", "target": "cpp", "source_program": " static int lenOfLongSubarr ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 , maxLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1 ;\n    if ( sum == 1 ) maxLen = i + 1 ;\n    else if ( ! um . containsKey ( sum ) ) um . put ( sum , i ) ;\n    if ( um . containsKey ( sum - 1 ) ) {\n      if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i - um . get ( sum - 1 ) ;\n    }\n  }\n  return maxLen ;\n}", "target_program": " int lenOfLongSubarr ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int sum = 0, maxLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1;\n    if ( sum == 1 ) maxLen = i + 1;\n    else if ( um . find ( sum ) == um . end ( ) ) um [ sum ] = i;\n    if ( um . find ( sum - 1 ) != um . end ( ) ) {\n      if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um [ sum - 1 ];\n    }\n  }\n  return maxLen;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lenOfLongSubarr ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int sum = 0, maxLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1;\n    if ( sum == 1 ) maxLen = i + 1;\n    else if ( um . find ( sum ) == um . end ( ) ) um [ sum ] = i;\n    if ( um . find ( sum - 1 ) != um . end ( ) ) {\n      if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um [ sum - 1 ];\n    }\n  }\n  return maxLen;\n}", "target_program": " static int lenOfLongSubarr ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 , maxLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1 ;\n    if ( sum == 1 ) maxLen = i + 1 ;\n    else if ( ! um . containsKey ( sum ) ) um . put ( sum , i ) ;\n    if ( um . containsKey ( sum - 1 ) ) {\n      if ( maxLen < ( i - um . get ( sum - 1 ) ) ) maxLen = i - um . get ( sum - 1 ) ;\n    }\n  }\n  return maxLen ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lenOfLongSubarr ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int sum = 0, maxLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ] == 0 ? - 1 : 1;\n    if ( sum == 1 ) maxLen = i + 1;\n    else if ( um . find ( sum ) == um . end ( ) ) um [ sum ] = i;\n    if ( um . find ( sum - 1 ) != um . end ( ) ) {\n      if ( maxLen < ( i - um [ sum - 1 ] ) ) maxLen = i - um [ sum - 1 ];\n    }\n  }\n  return maxLen;\n}", "target_program": " def lenOfLongSubarr ( arr , n ) :\n    um = { i : 0 for i in range ( 10 ) }\n    sum = 0\n    maxLen = 0\n    for i in range ( n ) :\n        if arr [ i ] == 0 :\n            sum += - 1\n        else :\n            sum += 1\n        if ( sum == 1 ) :\n            maxLen = i + 1\n        elif ( sum not in um ) :\n            um [ sum ] = i\n        if ( ( sum - 1 ) in um ) :\n            if ( maxLen < ( i - um [ sum - 1 ] ) ) :\n                maxLen = i - um [ sum - 1 ]\n    return maxLen"}
{"source": "python", "target": "java", "source_program": " def superSeq ( X , Y , m , n ) :\n    if ( not m ) : return n\n    if ( not n ) : return m\n    if ( X [ m - 1 ] == Y [ n - 1 ] ) :\n        return 1 + superSeq ( X , Y , m - 1 , n - 1 )\n    return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) )", "target_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  if ( m == 0 ) return n ;\n  if ( n == 0 ) return m ;\n  if ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) return 1 + superSeq ( X , Y , m - 1 , n - 1 ) ;\n  return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def superSeq ( X , Y , m , n ) :\n    if ( not m ) : return n\n    if ( not n ) : return m\n    if ( X [ m - 1 ] == Y [ n - 1 ] ) :\n        return 1 + superSeq ( X , Y , m - 1 , n - 1 )\n    return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) )", "target_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  if ( ! m ) return n;\n  if ( ! n ) return m;\n  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X, Y, m - 1, n - 1 );\n  return 1 + min ( superSeq ( X, Y, m - 1, n ), superSeq ( X, Y, m, n - 1 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  if ( m == 0 ) return n ;\n  if ( n == 0 ) return m ;\n  if ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) return 1 + superSeq ( X , Y , m - 1 , n - 1 ) ;\n  return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) ) ;\n}", "target_program": " def superSeq ( X , Y , m , n ) :\n    if ( not m ) : return n\n    if ( not n ) : return m\n    if ( X [ m - 1 ] == Y [ n - 1 ] ) :\n        return 1 + superSeq ( X , Y , m - 1 , n - 1 )\n    return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  if ( m == 0 ) return n ;\n  if ( n == 0 ) return m ;\n  if ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) return 1 + superSeq ( X , Y , m - 1 , n - 1 ) ;\n  return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) ) ;\n}", "target_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  if ( ! m ) return n;\n  if ( ! n ) return m;\n  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X, Y, m - 1, n - 1 );\n  return 1 + min ( superSeq ( X, Y, m - 1, n ), superSeq ( X, Y, m, n - 1 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  if ( ! m ) return n;\n  if ( ! n ) return m;\n  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X, Y, m - 1, n - 1 );\n  return 1 + min ( superSeq ( X, Y, m - 1, n ), superSeq ( X, Y, m, n - 1 ) );\n}", "target_program": " static int superSeq ( String X , String Y , int m , int n ) {\n  if ( m == 0 ) return n ;\n  if ( n == 0 ) return m ;\n  if ( X . charAt ( m - 1 ) == Y . charAt ( n - 1 ) ) return 1 + superSeq ( X , Y , m - 1 , n - 1 ) ;\n  return 1 + Math . min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int superSeq ( char * X, char * Y, int m, int n ) {\n  if ( ! m ) return n;\n  if ( ! n ) return m;\n  if ( X [ m - 1 ] == Y [ n - 1 ] ) return 1 + superSeq ( X, Y, m - 1, n - 1 );\n  return 1 + min ( superSeq ( X, Y, m - 1, n ), superSeq ( X, Y, m, n - 1 ) );\n}", "target_program": " def superSeq ( X , Y , m , n ) :\n    if ( not m ) : return n\n    if ( not n ) : return m\n    if ( X [ m - 1 ] == Y [ n - 1 ] ) :\n        return 1 + superSeq ( X , Y , m - 1 , n - 1 )\n    return 1 + min ( superSeq ( X , Y , m - 1 , n ) , superSeq ( X , Y , m , n - 1 ) )"}
{"source": "python", "target": "java", "source_program": " def replaceSpaces ( string ) :\n    string = string.strip ( )\n    i = len ( string )\n    space_count = string.count ( '' )\n    new_length = i + space_count * 2\n    if new_length > MAX :\n        return - 1\n    index = new_length - 1\n    string = list ( string )\n    for f in range ( i - 2 , new_length - 2 ) :\n        string.append ( '0' )\n    for j in range ( i - 1 , 0 , - 1 ) :\n        if string [ j ] == '' :\n            string [ index ] = '0'\n            string [ index - 1 ] = '2'\n            string [ index - 2 ] = '%'\n            index = index - 3\n        else :\n            string [ index ] = string [ j ]\n            index -= 1\n    return ''.join ( string )", "target_program": " static char [ ] replaceSpaces ( char [ ] str ) {\n  int space_count = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < str . length ;\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++ ;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count -- ;\n    i -- ;\n  }\n  int new_length = i + space_count * 2 ;\n  if ( new_length > MAX ) return str ;\n  int index = new_length - 1 ;\n  char [ ] new_str = str ;\n  str = new char [ new_length ] ;\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) {\n    if ( new_str [ j ] == ' ' ) {\n      str [ index ] = '0' ;\n      str [ index - 1 ] = '2' ;\n      str [ index - 2 ] = '%' ;\n      index = index - 3 ;\n    }\n    else {\n      str [ index ] = new_str [ j ] ;\n      index -- ;\n    }\n  }\n  return str ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def replaceSpaces ( string ) :\n    string = string.strip ( )\n    i = len ( string )\n    space_count = string.count ( '' )\n    new_length = i + space_count * 2\n    if new_length > MAX :\n        return - 1\n    index = new_length - 1\n    string = list ( string )\n    for f in range ( i - 2 , new_length - 2 ) :\n        string.append ( '0' )\n    for j in range ( i - 1 , 0 , - 1 ) :\n        if string [ j ] == '' :\n            string [ index ] = '0'\n            string [ index - 1 ] = '2'\n            string [ index - 2 ] = '%'\n            index = index - 3\n        else :\n            string [ index ] = string [ j ]\n            index -= 1\n    return ''.join ( string )", "target_program": " int replaceSpaces ( char str [ ] ) {\n  int space_count = 0, i;\n  for ( i = 0;\n  str [ i ];\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count --;\n    i --;\n  }\n  int new_length = i + space_count * 2 + 1;\n  if ( new_length > MAX ) return - 1;\n  int index = new_length - 1;\n  str [ index -- ] = '\\0';\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) {\n    if ( str [ j ] == ' ' ) {\n      str [ index ] = '0';\n      str [ index - 1 ] = '2';\n      str [ index - 2 ] = '%';\n      index = index - 3;\n    }\n    else {\n      str [ index ] = str [ j ];\n      index --;\n    }\n  }\n  return new_length;\n}"}
{"source": "java", "target": "python", "source_program": " static char [ ] replaceSpaces ( char [ ] str ) {\n  int space_count = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < str . length ;\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++ ;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count -- ;\n    i -- ;\n  }\n  int new_length = i + space_count * 2 ;\n  if ( new_length > MAX ) return str ;\n  int index = new_length - 1 ;\n  char [ ] new_str = str ;\n  str = new char [ new_length ] ;\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) {\n    if ( new_str [ j ] == ' ' ) {\n      str [ index ] = '0' ;\n      str [ index - 1 ] = '2' ;\n      str [ index - 2 ] = '%' ;\n      index = index - 3 ;\n    }\n    else {\n      str [ index ] = new_str [ j ] ;\n      index -- ;\n    }\n  }\n  return str ;\n}", "target_program": " def replaceSpaces ( string ) :\n    string = string.strip ( )\n    i = len ( string )\n    space_count = string.count ( '' )\n    new_length = i + space_count * 2\n    if new_length > MAX :\n        return - 1\n    index = new_length - 1\n    string = list ( string )\n    for f in range ( i - 2 , new_length - 2 ) :\n        string.append ( '0' )\n    for j in range ( i - 1 , 0 , - 1 ) :\n        if string [ j ] == '' :\n            string [ index ] = '0'\n            string [ index - 1 ] = '2'\n            string [ index - 2 ] = '%'\n            index = index - 3\n        else :\n            string [ index ] = string [ j ]\n            index -= 1\n    return ''.join ( string )"}
{"source": "java", "target": "cpp", "source_program": " static char [ ] replaceSpaces ( char [ ] str ) {\n  int space_count = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < str . length ;\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++ ;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count -- ;\n    i -- ;\n  }\n  int new_length = i + space_count * 2 ;\n  if ( new_length > MAX ) return str ;\n  int index = new_length - 1 ;\n  char [ ] new_str = str ;\n  str = new char [ new_length ] ;\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) {\n    if ( new_str [ j ] == ' ' ) {\n      str [ index ] = '0' ;\n      str [ index - 1 ] = '2' ;\n      str [ index - 2 ] = '%' ;\n      index = index - 3 ;\n    }\n    else {\n      str [ index ] = new_str [ j ] ;\n      index -- ;\n    }\n  }\n  return str ;\n}", "target_program": " int replaceSpaces ( char str [ ] ) {\n  int space_count = 0, i;\n  for ( i = 0;\n  str [ i ];\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count --;\n    i --;\n  }\n  int new_length = i + space_count * 2 + 1;\n  if ( new_length > MAX ) return - 1;\n  int index = new_length - 1;\n  str [ index -- ] = '\\0';\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) {\n    if ( str [ j ] == ' ' ) {\n      str [ index ] = '0';\n      str [ index - 1 ] = '2';\n      str [ index - 2 ] = '%';\n      index = index - 3;\n    }\n    else {\n      str [ index ] = str [ j ];\n      index --;\n    }\n  }\n  return new_length;\n}"}
{"source": "cpp", "target": "java", "source_program": " int replaceSpaces ( char str [ ] ) {\n  int space_count = 0, i;\n  for ( i = 0;\n  str [ i ];\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count --;\n    i --;\n  }\n  int new_length = i + space_count * 2 + 1;\n  if ( new_length > MAX ) return - 1;\n  int index = new_length - 1;\n  str [ index -- ] = '\\0';\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) {\n    if ( str [ j ] == ' ' ) {\n      str [ index ] = '0';\n      str [ index - 1 ] = '2';\n      str [ index - 2 ] = '%';\n      index = index - 3;\n    }\n    else {\n      str [ index ] = str [ j ];\n      index --;\n    }\n  }\n  return new_length;\n}", "target_program": " static char [ ] replaceSpaces ( char [ ] str ) {\n  int space_count = 0 , i = 0 ;\n  for ( i = 0 ;\n  i < str . length ;\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++ ;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count -- ;\n    i -- ;\n  }\n  int new_length = i + space_count * 2 ;\n  if ( new_length > MAX ) return str ;\n  int index = new_length - 1 ;\n  char [ ] new_str = str ;\n  str = new char [ new_length ] ;\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) {\n    if ( new_str [ j ] == ' ' ) {\n      str [ index ] = '0' ;\n      str [ index - 1 ] = '2' ;\n      str [ index - 2 ] = '%' ;\n      index = index - 3 ;\n    }\n    else {\n      str [ index ] = new_str [ j ] ;\n      index -- ;\n    }\n  }\n  return str ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int replaceSpaces ( char str [ ] ) {\n  int space_count = 0, i;\n  for ( i = 0;\n  str [ i ];\n  i ++ ) if ( str [ i ] == ' ' ) space_count ++;\n  while ( str [ i - 1 ] == ' ' ) {\n    space_count --;\n    i --;\n  }\n  int new_length = i + space_count * 2 + 1;\n  if ( new_length > MAX ) return - 1;\n  int index = new_length - 1;\n  str [ index -- ] = '\\0';\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) {\n    if ( str [ j ] == ' ' ) {\n      str [ index ] = '0';\n      str [ index - 1 ] = '2';\n      str [ index - 2 ] = '%';\n      index = index - 3;\n    }\n    else {\n      str [ index ] = str [ j ];\n      index --;\n    }\n  }\n  return new_length;\n}", "target_program": " def replaceSpaces ( string ) :\n    string = string.strip ( )\n    i = len ( string )\n    space_count = string.count ( '' )\n    new_length = i + space_count * 2\n    if new_length > MAX :\n        return - 1\n    index = new_length - 1\n    string = list ( string )\n    for f in range ( i - 2 , new_length - 2 ) :\n        string.append ( '0' )\n    for j in range ( i - 1 , 0 , - 1 ) :\n        if string [ j ] == '' :\n            string [ index ] = '0'\n            string [ index - 1 ] = '2'\n            string [ index - 2 ] = '%'\n            index = index - 3\n        else :\n            string [ index ] = string [ j ]\n            index -= 1\n    return ''.join ( string )"}
{"source": "python", "target": "java", "source_program": " def MaximumPath ( Mat ) :\n    result = 0\n    dp = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N ) ]\n    for i in range ( N ) :\n        for j in range ( 1 , N + 1 ) :\n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ] , max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + \\\n                Mat [ i ] [ j - 1 ]\n    for i in range ( N + 1 ) :\n        result = max ( result , dp [ N - 1 ] [ i ] )\n    return result", "target_program": " static int MaximumPath ( int Mat [ ] [ ] ) {\n  int result = 0 ;\n  int dp [ ] [ ] = new int [ N ] [ N + 2 ] ;\n  for ( int [ ] rows : dp ) Arrays . fill ( rows , 0 ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 1 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j - 1 ] , Math . max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) result = Math . max ( result , dp [ N - 1 ] [ i ] ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MaximumPath ( Mat ) :\n    result = 0\n    dp = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N ) ]\n    for i in range ( N ) :\n        for j in range ( 1 , N + 1 ) :\n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ] , max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + \\\n                Mat [ i ] [ j - 1 ]\n    for i in range ( N + 1 ) :\n        result = max ( result , dp [ N - 1 ] [ i ] )\n    return result", "target_program": " int MaximumPath ( int Mat [ ] [ N ] ) {\n  int result = 0;\n  int dp [ N ] [ N + 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ];\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 1;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ], max ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) result = max ( result, dp [ N - 1 ] [ i ] );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int MaximumPath ( int Mat [ ] [ ] ) {\n  int result = 0 ;\n  int dp [ ] [ ] = new int [ N ] [ N + 2 ] ;\n  for ( int [ ] rows : dp ) Arrays . fill ( rows , 0 ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 1 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j - 1 ] , Math . max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) result = Math . max ( result , dp [ N - 1 ] [ i ] ) ;\n  return result ;\n}", "target_program": " def MaximumPath ( Mat ) :\n    result = 0\n    dp = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N ) ]\n    for i in range ( N ) :\n        for j in range ( 1 , N + 1 ) :\n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ] , max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + \\\n                Mat [ i ] [ j - 1 ]\n    for i in range ( N + 1 ) :\n        result = max ( result , dp [ N - 1 ] [ i ] )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int MaximumPath ( int Mat [ ] [ ] ) {\n  int result = 0 ;\n  int dp [ ] [ ] = new int [ N ] [ N + 2 ] ;\n  for ( int [ ] rows : dp ) Arrays . fill ( rows , 0 ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 1 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j - 1 ] , Math . max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) result = Math . max ( result , dp [ N - 1 ] [ i ] ) ;\n  return result ;\n}", "target_program": " int MaximumPath ( int Mat [ ] [ N ] ) {\n  int result = 0;\n  int dp [ N ] [ N + 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ];\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 1;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ], max ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) result = max ( result, dp [ N - 1 ] [ i ] );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int MaximumPath ( int Mat [ ] [ N ] ) {\n  int result = 0;\n  int dp [ N ] [ N + 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ];\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 1;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ], max ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) result = max ( result, dp [ N - 1 ] [ i ] );\n  return result;\n}", "target_program": " static int MaximumPath ( int Mat [ ] [ ] ) {\n  int result = 0 ;\n  int dp [ ] [ ] = new int [ N ] [ N + 2 ] ;\n  for ( int [ ] rows : dp ) Arrays . fill ( rows , 0 ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 1 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( dp [ i - 1 ] [ j - 1 ] , Math . max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) result = Math . max ( result , dp [ N - 1 ] [ i ] ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int MaximumPath ( int Mat [ ] [ N ] ) {\n  int result = 0;\n  int dp [ N ] [ N + 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ 0 ] [ i + 1 ] = Mat [ 0 ] [ i ];\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 1;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ], max ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j + 1 ] ) ) + Mat [ i ] [ j - 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) result = max ( result, dp [ N - 1 ] [ i ] );\n  return result;\n}", "target_program": " def MaximumPath ( Mat ) :\n    result = 0\n    dp = [ [ 0 for i in range ( N + 2 ) ] for j in range ( N ) ]\n    for i in range ( N ) :\n        for j in range ( 1 , N + 1 ) :\n            dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j - 1 ] , max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j + 1 ] ) ) + \\\n                Mat [ i ] [ j - 1 ]\n    for i in range ( N + 1 ) :\n        result = max ( result , dp [ N - 1 ] [ i ] )\n    return result"}
{"source": "python", "target": "java", "source_program": " def getAbs ( n ) :\n    mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;\n    return ( ( n + mask ) ^ mask ) ;", "target_program": " static int getAbs ( int n ) {\n  int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;\n  return ( ( n + mask ) ^ mask ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getAbs ( n ) :\n    mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;\n    return ( ( n + mask ) ^ mask ) ;", "target_program": " unsigned int getAbs ( int n ) {\n  int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 );\n  return ( ( n + mask ) ^ mask );\n}"}
{"source": "java", "target": "python", "source_program": " static int getAbs ( int n ) {\n  int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;\n  return ( ( n + mask ) ^ mask ) ;\n}", "target_program": " def getAbs ( n ) :\n    mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;\n    return ( ( n + mask ) ^ mask ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int getAbs ( int n ) {\n  int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;\n  return ( ( n + mask ) ^ mask ) ;\n}", "target_program": " unsigned int getAbs ( int n ) {\n  int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 );\n  return ( ( n + mask ) ^ mask );\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int getAbs ( int n ) {\n  int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 );\n  return ( ( n + mask ) ^ mask );\n}", "target_program": " static int getAbs ( int n ) {\n  int mask = n >> ( SIZE_INT * CHAR_BIT - 1 ) ;\n  return ( ( n + mask ) ^ mask ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int getAbs ( int n ) {\n  int const mask = n >> ( sizeof ( int ) * CHARBIT - 1 );\n  return ( ( n + mask ) ^ mask );\n}", "target_program": " def getAbs ( n ) :\n    mask = n >> ( SIZE_INT * CHARBIT - 1 ) ;\n    return ( ( n + mask ) ^ mask ) ;"}
{"source": "python", "target": "java", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = a [ 0 ]\n    curr_max = a [ 0 ]\n    for i in range ( 1 , size ) :\n        curr_max = max ( a [ i ] , curr_max + a [ i ] )\n        max_so_far = max ( max_so_far , curr_max )\n    return max_so_far", "target_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = a [ 0 ] ;\n  int curr_max = a [ 0 ] ;\n  for ( int i = 1 ;\n  i < size ;\n  i ++ ) {\n    curr_max = Math . max ( a [ i ] , curr_max + a [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , curr_max ) ;\n  }\n  return max_so_far ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = a [ 0 ]\n    curr_max = a [ 0 ]\n    for i in range ( 1 , size ) :\n        curr_max = max ( a [ i ] , curr_max + a [ i ] )\n        max_so_far = max ( max_so_far , curr_max )\n    return max_so_far", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = a [ 0 ];\n  int curr_max = a [ 0 ];\n  for ( int i = 1;\n  i < size;\n  i ++ ) {\n    curr_max = max ( a [ i ], curr_max + a [ i ] );\n    max_so_far = max ( max_so_far, curr_max );\n  }\n  return max_so_far;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = a [ 0 ] ;\n  int curr_max = a [ 0 ] ;\n  for ( int i = 1 ;\n  i < size ;\n  i ++ ) {\n    curr_max = Math . max ( a [ i ] , curr_max + a [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , curr_max ) ;\n  }\n  return max_so_far ;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = a [ 0 ]\n    curr_max = a [ 0 ]\n    for i in range ( 1 , size ) :\n        curr_max = max ( a [ i ] , curr_max + a [ i ] )\n        max_so_far = max ( max_so_far , curr_max )\n    return max_so_far"}
{"source": "java", "target": "cpp", "source_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = a [ 0 ] ;\n  int curr_max = a [ 0 ] ;\n  for ( int i = 1 ;\n  i < size ;\n  i ++ ) {\n    curr_max = Math . max ( a [ i ] , curr_max + a [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , curr_max ) ;\n  }\n  return max_so_far ;\n}", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = a [ 0 ];\n  int curr_max = a [ 0 ];\n  for ( int i = 1;\n  i < size;\n  i ++ ) {\n    curr_max = max ( a [ i ], curr_max + a [ i ] );\n    max_so_far = max ( max_so_far, curr_max );\n  }\n  return max_so_far;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = a [ 0 ];\n  int curr_max = a [ 0 ];\n  for ( int i = 1;\n  i < size;\n  i ++ ) {\n    curr_max = max ( a [ i ], curr_max + a [ i ] );\n    max_so_far = max ( max_so_far, curr_max );\n  }\n  return max_so_far;\n}", "target_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = a [ 0 ] ;\n  int curr_max = a [ 0 ] ;\n  for ( int i = 1 ;\n  i < size ;\n  i ++ ) {\n    curr_max = Math . max ( a [ i ] , curr_max + a [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , curr_max ) ;\n  }\n  return max_so_far ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = a [ 0 ];\n  int curr_max = a [ 0 ];\n  for ( int i = 1;\n  i < size;\n  i ++ ) {\n    curr_max = max ( a [ i ], curr_max + a [ i ] );\n    max_so_far = max ( max_so_far, curr_max );\n  }\n  return max_so_far;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = a [ 0 ]\n    curr_max = a [ 0 ]\n    for i in range ( 1 , size ) :\n        curr_max = max ( a [ i ] , curr_max + a [ i ] )\n        max_so_far = max ( max_so_far , curr_max )\n    return max_so_far"}
{"source": "python", "target": "java", "source_program": " def countMinOperations ( target , n ) :\n    result = 0 ;\n    while ( True ) :\n        zero_count = 0 ;\n        i = 0 ;\n        while ( i < n ) :\n            if ( ( target [ i ] & 1 ) > 0 ) :\n                break ;\n            elif ( target [ i ] == 0 ) :\n                zero_count += 1 ;\n            i += 1 ;\n        if ( zero_count == n ) :\n            return result ;\n        if ( i == n ) :\n            for j in range ( n ) :\n                target [ j ] = target [ j ] // 2 ;\n            result += 1 ;\n        for j in range ( i , n ) :\n            if ( target [ j ] & 1 ) :\n                target [ j ] -= 1 ;\n                result += 1 ;", "target_program": " static int countMinOperations ( int n ) {\n  int result = 0 ;\n  while ( true ) {\n    int zero_count = 0 ;\n    int i ;\n    for ( i = 0 ;\n    i < n ;\n    i ++ ) {\n      if ( arr [ i ] % 2 == 1 ) break ;\n      else if ( arr [ i ] == 0 ) zero_count ++ ;\n    }\n    if ( zero_count == n ) return result ;\n    if ( i == n ) {\n      for ( int j = 0 ;\n      j < n ;\n      j ++ ) arr [ j ] = arr [ j ] / 2 ;\n      result ++ ;\n    }\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] % 2 == 1 ) {\n        arr [ j ] -- ;\n        result ++ ;\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def countMinOperations ( target , n ) :\n    result = 0 ;\n    while ( True ) :\n        zero_count = 0 ;\n        i = 0 ;\n        while ( i < n ) :\n            if ( ( target [ i ] & 1 ) > 0 ) :\n                break ;\n            elif ( target [ i ] == 0 ) :\n                zero_count += 1 ;\n            i += 1 ;\n        if ( zero_count == n ) :\n            return result ;\n        if ( i == n ) :\n            for j in range ( n ) :\n                target [ j ] = target [ j ] // 2 ;\n            result += 1 ;\n        for j in range ( i , n ) :\n            if ( target [ j ] & 1 ) :\n                target [ j ] -= 1 ;\n                result += 1 ;", "target_program": " int countMinOperations ( unsigned int target [ ], int n ) {\n  int result = 0;\n  while ( 1 ) {\n    int zero_count = 0;\n    int i;\n    for ( i = 0;\n    i < n;\n    i ++ ) {\n      if ( target [ i ] & 1 ) break;\n      else if ( target [ i ] == 0 ) zero_count ++;\n    }\n    if ( zero_count == n ) return result;\n    if ( i == n ) {\n      for ( int j = 0;\n      j < n;\n      j ++ ) target [ j ] = target [ j ] / 2;\n      result ++;\n    }\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      if ( target [ j ] & 1 ) {\n        target [ j ] --;\n        result ++;\n      }\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static int countMinOperations ( int n ) {\n  int result = 0 ;\n  while ( true ) {\n    int zero_count = 0 ;\n    int i ;\n    for ( i = 0 ;\n    i < n ;\n    i ++ ) {\n      if ( arr [ i ] % 2 == 1 ) break ;\n      else if ( arr [ i ] == 0 ) zero_count ++ ;\n    }\n    if ( zero_count == n ) return result ;\n    if ( i == n ) {\n      for ( int j = 0 ;\n      j < n ;\n      j ++ ) arr [ j ] = arr [ j ] / 2 ;\n      result ++ ;\n    }\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] % 2 == 1 ) {\n        arr [ j ] -- ;\n        result ++ ;\n      }\n    }\n  }\n}", "target_program": " def countMinOperations ( target , n ) :\n    result = 0 ;\n    while ( True ) :\n        zero_count = 0 ;\n        i = 0 ;\n        while ( i < n ) :\n            if ( ( target [ i ] & 1 ) > 0 ) :\n                break ;\n            elif ( target [ i ] == 0 ) :\n                zero_count += 1 ;\n            i += 1 ;\n        if ( zero_count == n ) :\n            return result ;\n        if ( i == n ) :\n            for j in range ( n ) :\n                target [ j ] = target [ j ] // 2 ;\n            result += 1 ;\n        for j in range ( i , n ) :\n            if ( target [ j ] & 1 ) :\n                target [ j ] -= 1 ;\n                result += 1 ;"}
{"source": "java", "target": "cpp", "source_program": " static int countMinOperations ( int n ) {\n  int result = 0 ;\n  while ( true ) {\n    int zero_count = 0 ;\n    int i ;\n    for ( i = 0 ;\n    i < n ;\n    i ++ ) {\n      if ( arr [ i ] % 2 == 1 ) break ;\n      else if ( arr [ i ] == 0 ) zero_count ++ ;\n    }\n    if ( zero_count == n ) return result ;\n    if ( i == n ) {\n      for ( int j = 0 ;\n      j < n ;\n      j ++ ) arr [ j ] = arr [ j ] / 2 ;\n      result ++ ;\n    }\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] % 2 == 1 ) {\n        arr [ j ] -- ;\n        result ++ ;\n      }\n    }\n  }\n}", "target_program": " int countMinOperations ( unsigned int target [ ], int n ) {\n  int result = 0;\n  while ( 1 ) {\n    int zero_count = 0;\n    int i;\n    for ( i = 0;\n    i < n;\n    i ++ ) {\n      if ( target [ i ] & 1 ) break;\n      else if ( target [ i ] == 0 ) zero_count ++;\n    }\n    if ( zero_count == n ) return result;\n    if ( i == n ) {\n      for ( int j = 0;\n      j < n;\n      j ++ ) target [ j ] = target [ j ] / 2;\n      result ++;\n    }\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      if ( target [ j ] & 1 ) {\n        target [ j ] --;\n        result ++;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int countMinOperations ( unsigned int target [ ], int n ) {\n  int result = 0;\n  while ( 1 ) {\n    int zero_count = 0;\n    int i;\n    for ( i = 0;\n    i < n;\n    i ++ ) {\n      if ( target [ i ] & 1 ) break;\n      else if ( target [ i ] == 0 ) zero_count ++;\n    }\n    if ( zero_count == n ) return result;\n    if ( i == n ) {\n      for ( int j = 0;\n      j < n;\n      j ++ ) target [ j ] = target [ j ] / 2;\n      result ++;\n    }\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      if ( target [ j ] & 1 ) {\n        target [ j ] --;\n        result ++;\n      }\n    }\n  }\n}", "target_program": " static int countMinOperations ( int n ) {\n  int result = 0 ;\n  while ( true ) {\n    int zero_count = 0 ;\n    int i ;\n    for ( i = 0 ;\n    i < n ;\n    i ++ ) {\n      if ( arr [ i ] % 2 == 1 ) break ;\n      else if ( arr [ i ] == 0 ) zero_count ++ ;\n    }\n    if ( zero_count == n ) return result ;\n    if ( i == n ) {\n      for ( int j = 0 ;\n      j < n ;\n      j ++ ) arr [ j ] = arr [ j ] / 2 ;\n      result ++ ;\n    }\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] % 2 == 1 ) {\n        arr [ j ] -- ;\n        result ++ ;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int countMinOperations ( unsigned int target [ ], int n ) {\n  int result = 0;\n  while ( 1 ) {\n    int zero_count = 0;\n    int i;\n    for ( i = 0;\n    i < n;\n    i ++ ) {\n      if ( target [ i ] & 1 ) break;\n      else if ( target [ i ] == 0 ) zero_count ++;\n    }\n    if ( zero_count == n ) return result;\n    if ( i == n ) {\n      for ( int j = 0;\n      j < n;\n      j ++ ) target [ j ] = target [ j ] / 2;\n      result ++;\n    }\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      if ( target [ j ] & 1 ) {\n        target [ j ] --;\n        result ++;\n      }\n    }\n  }\n}", "target_program": " def countMinOperations ( target , n ) :\n    result = 0 ;\n    while ( True ) :\n        zero_count = 0 ;\n        i = 0 ;\n        while ( i < n ) :\n            if ( ( target [ i ] & 1 ) > 0 ) :\n                break ;\n            elif ( target [ i ] == 0 ) :\n                zero_count += 1 ;\n            i += 1 ;\n        if ( zero_count == n ) :\n            return result ;\n        if ( i == n ) :\n            for j in range ( n ) :\n                target [ j ] = target [ j ] // 2 ;\n            result += 1 ;\n        for j in range ( i , n ) :\n            if ( target [ j ] & 1 ) :\n                target [ j ] -= 1 ;\n                result += 1 ;"}
{"source": "python", "target": "java", "source_program": " def fib ( n ) :\n    a = 0\n    b = 1\n    if ( n >= 0 ) :\n        print ( a , end = ' ' )\n    if ( n >= 1 ) :\n        print ( b , end = ' ' )\n    for i in range ( 2 , n + 1 ) :\n        print ( a + b , end = ' ' )\n        b = a + b\n        a = b - a", "target_program": " static void fib ( int n ) {\n  int a = 0 , b = 1 ;\n  if ( n >= 0 ) System . out . print ( a + \" \" ) ;\n  if ( n >= 1 ) System . out . print ( b + \" \" ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( a + b + \" \" ) ;\n    b = a + b ;\n    a = b - a ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def fib ( n ) :\n    a = 0\n    b = 1\n    if ( n >= 0 ) :\n        print ( a , end = ' ' )\n    if ( n >= 1 ) :\n        print ( b , end = ' ' )\n    for i in range ( 2 , n + 1 ) :\n        print ( a + b , end = ' ' )\n        b = a + b\n        a = b - a", "target_program": " void fib ( int n ) {\n  int a = 0, b = 1;\n  if ( n >= 0 ) cout << a << \" \";\n  if ( n >= 1 ) cout << b << \" \";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    cout << a + b << \" \";\n    b = a + b;\n    a = b - a;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void fib ( int n ) {\n  int a = 0 , b = 1 ;\n  if ( n >= 0 ) System . out . print ( a + \" \" ) ;\n  if ( n >= 1 ) System . out . print ( b + \" \" ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( a + b + \" \" ) ;\n    b = a + b ;\n    a = b - a ;\n  }\n}", "target_program": " def fib ( n ) :\n    a = 0\n    b = 1\n    if ( n >= 0 ) :\n        print ( a , end = ' ' )\n    if ( n >= 1 ) :\n        print ( b , end = ' ' )\n    for i in range ( 2 , n + 1 ) :\n        print ( a + b , end = ' ' )\n        b = a + b\n        a = b - a"}
{"source": "java", "target": "cpp", "source_program": " static void fib ( int n ) {\n  int a = 0 , b = 1 ;\n  if ( n >= 0 ) System . out . print ( a + \" \" ) ;\n  if ( n >= 1 ) System . out . print ( b + \" \" ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( a + b + \" \" ) ;\n    b = a + b ;\n    a = b - a ;\n  }\n}", "target_program": " void fib ( int n ) {\n  int a = 0, b = 1;\n  if ( n >= 0 ) cout << a << \" \";\n  if ( n >= 1 ) cout << b << \" \";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    cout << a + b << \" \";\n    b = a + b;\n    a = b - a;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void fib ( int n ) {\n  int a = 0, b = 1;\n  if ( n >= 0 ) cout << a << \" \";\n  if ( n >= 1 ) cout << b << \" \";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    cout << a + b << \" \";\n    b = a + b;\n    a = b - a;\n  }\n}", "target_program": " static void fib ( int n ) {\n  int a = 0 , b = 1 ;\n  if ( n >= 0 ) System . out . print ( a + \" \" ) ;\n  if ( n >= 1 ) System . out . print ( b + \" \" ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( a + b + \" \" ) ;\n    b = a + b ;\n    a = b - a ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void fib ( int n ) {\n  int a = 0, b = 1;\n  if ( n >= 0 ) cout << a << \" \";\n  if ( n >= 1 ) cout << b << \" \";\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    cout << a + b << \" \";\n    b = a + b;\n    a = b - a;\n  }\n}", "target_program": " def fib ( n ) :\n    a = 0\n    b = 1\n    if ( n >= 0 ) :\n        print ( a , end = ' ' )\n    if ( n >= 1 ) :\n        print ( b , end = ' ' )\n    for i in range ( 2 , n + 1 ) :\n        print ( a + b , end = ' ' )\n        b = a + b\n        a = b - a"}
{"source": "python", "target": "java", "source_program": " def isNumber ( s ) :\n    for i in range ( len ( s ) ) :\n        if s [ i ].isdigit ( ) != True :\n            return False\n    return True", "target_program": " static boolean isNumber ( String s ) {\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == false ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isNumber ( s ) :\n    for i in range ( len ( s ) ) :\n        if s [ i ].isdigit ( ) != True :\n            return False\n    return True", "target_program": " bool isNumber ( string s ) {\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) if ( isdigit ( s [ i ] ) == false ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isNumber ( String s ) {\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == false ) return false ;\n  return true ;\n}", "target_program": " def isNumber ( s ) :\n    for i in range ( len ( s ) ) :\n        if s [ i ].isdigit ( ) != True :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isNumber ( String s ) {\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == false ) return false ;\n  return true ;\n}", "target_program": " bool isNumber ( string s ) {\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) if ( isdigit ( s [ i ] ) == false ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isNumber ( string s ) {\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) if ( isdigit ( s [ i ] ) == false ) return false;\n  return true;\n}", "target_program": " static boolean isNumber ( String s ) {\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) if ( Character . isDigit ( s . charAt ( i ) ) == false ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isNumber ( string s ) {\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) if ( isdigit ( s [ i ] ) == false ) return false;\n  return true;\n}", "target_program": " def isNumber ( s ) :\n    for i in range ( len ( s ) ) :\n        if s [ i ].isdigit ( ) != True :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def minHeight ( area , base ) :\n    return math.ceil ( ( 2 * area ) / base )", "target_program": " static double minHeight ( double base , double area ) {\n  double d = ( 2 * area ) / base ;\n  return Math . ceil ( d ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minHeight ( area , base ) :\n    return math.ceil ( ( 2 * area ) / base )", "target_program": " int minHeight ( int base, int area ) {\n  return ceil ( ( float ) ( 2 * area ) / base );\n}"}
{"source": "java", "target": "python", "source_program": " static double minHeight ( double base , double area ) {\n  double d = ( 2 * area ) / base ;\n  return Math . ceil ( d ) ;\n}", "target_program": " def minHeight ( area , base ) :\n    return math.ceil ( ( 2 * area ) / base )"}
{"source": "java", "target": "cpp", "source_program": " static double minHeight ( double base , double area ) {\n  double d = ( 2 * area ) / base ;\n  return Math . ceil ( d ) ;\n}", "target_program": " int minHeight ( int base, int area ) {\n  return ceil ( ( float ) ( 2 * area ) / base );\n}"}
{"source": "cpp", "target": "java", "source_program": " int minHeight ( int base, int area ) {\n  return ceil ( ( float ) ( 2 * area ) / base );\n}", "target_program": " static double minHeight ( double base , double area ) {\n  double d = ( 2 * area ) / base ;\n  return Math . ceil ( d ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minHeight ( int base, int area ) {\n  return ceil ( ( float ) ( 2 * area ) / base );\n}", "target_program": " def minHeight ( area , base ) :\n    return math.ceil ( ( 2 * area ) / base )"}
{"source": "python", "target": "java", "source_program": " def findpos ( n ) :\n    i = 0\n    j = len ( n )\n    pos = 0\n    while ( i < j ) :\n        if ( n [ i ] == '4' ) :\n            pos = pos * 2 + 1\n        if ( n [ i ] == '7' ) :\n            pos = pos * 2 + 2\n        i = i + 1\n    return pos", "target_program": " static int findpos ( String n ) {\n  int k = 0 , pos = 0 , i = 0 ;\n  while ( k != n . length ( ) ) {\n    switch ( n . charAt ( i ) ) {\n      case '4' : pos = pos * 2 + 1 ;\n      break ;\n      case '7' : pos = pos * 2 + 2 ;\n      break ;\n    }\n    i ++ ;\n    k ++ ;\n  }\n  return pos ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findpos ( n ) :\n    i = 0\n    j = len ( n )\n    pos = 0\n    while ( i < j ) :\n        if ( n [ i ] == '4' ) :\n            pos = pos * 2 + 1\n        if ( n [ i ] == '7' ) :\n            pos = pos * 2 + 2\n        i = i + 1\n    return pos", "target_program": " int findpos ( string n ) {\n  int i = 0, pos = 0;\n  while ( n [ i ] != '\\0' ) {\n    switch ( n [ i ] ) {\n      case '4' : pos = pos * 2 + 1;\n      break;\n      case '7' : pos = pos * 2 + 2;\n      break;\n    }\n    i ++;\n  }\n  return pos;\n}"}
{"source": "java", "target": "python", "source_program": " static int findpos ( String n ) {\n  int k = 0 , pos = 0 , i = 0 ;\n  while ( k != n . length ( ) ) {\n    switch ( n . charAt ( i ) ) {\n      case '4' : pos = pos * 2 + 1 ;\n      break ;\n      case '7' : pos = pos * 2 + 2 ;\n      break ;\n    }\n    i ++ ;\n    k ++ ;\n  }\n  return pos ;\n}", "target_program": " def findpos ( n ) :\n    i = 0\n    j = len ( n )\n    pos = 0\n    while ( i < j ) :\n        if ( n [ i ] == '4' ) :\n            pos = pos * 2 + 1\n        if ( n [ i ] == '7' ) :\n            pos = pos * 2 + 2\n        i = i + 1\n    return pos"}
{"source": "java", "target": "cpp", "source_program": " static int findpos ( String n ) {\n  int k = 0 , pos = 0 , i = 0 ;\n  while ( k != n . length ( ) ) {\n    switch ( n . charAt ( i ) ) {\n      case '4' : pos = pos * 2 + 1 ;\n      break ;\n      case '7' : pos = pos * 2 + 2 ;\n      break ;\n    }\n    i ++ ;\n    k ++ ;\n  }\n  return pos ;\n}", "target_program": " int findpos ( string n ) {\n  int i = 0, pos = 0;\n  while ( n [ i ] != '\\0' ) {\n    switch ( n [ i ] ) {\n      case '4' : pos = pos * 2 + 1;\n      break;\n      case '7' : pos = pos * 2 + 2;\n      break;\n    }\n    i ++;\n  }\n  return pos;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findpos ( string n ) {\n  int i = 0, pos = 0;\n  while ( n [ i ] != '\\0' ) {\n    switch ( n [ i ] ) {\n      case '4' : pos = pos * 2 + 1;\n      break;\n      case '7' : pos = pos * 2 + 2;\n      break;\n    }\n    i ++;\n  }\n  return pos;\n}", "target_program": " static int findpos ( String n ) {\n  int k = 0 , pos = 0 , i = 0 ;\n  while ( k != n . length ( ) ) {\n    switch ( n . charAt ( i ) ) {\n      case '4' : pos = pos * 2 + 1 ;\n      break ;\n      case '7' : pos = pos * 2 + 2 ;\n      break ;\n    }\n    i ++ ;\n    k ++ ;\n  }\n  return pos ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findpos ( string n ) {\n  int i = 0, pos = 0;\n  while ( n [ i ] != '\\0' ) {\n    switch ( n [ i ] ) {\n      case '4' : pos = pos * 2 + 1;\n      break;\n      case '7' : pos = pos * 2 + 2;\n      break;\n    }\n    i ++;\n  }\n  return pos;\n}", "target_program": " def findpos ( n ) :\n    i = 0\n    j = len ( n )\n    pos = 0\n    while ( i < j ) :\n        if ( n [ i ] == '4' ) :\n            pos = pos * 2 + 1\n        if ( n [ i ] == '7' ) :\n            pos = pos * 2 + 2\n        i = i + 1\n    return pos"}
{"source": "python", "target": "java", "source_program": " def minOperation ( arr ) :\n    ans = 0\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] [ j ] == 0 ) :\n                ans += 1\n                for k in range ( i + 1 ) :\n                    for h in range ( j + 1 ) :\n                        if ( arr [ k ] [ h ] == 1 ) :\n                            arr [ k ] [ h ] = 0\n                        else :\n                            arr [ k ] [ h ] = 1\n    return ans", "target_program": " static int minOperation ( boolean arr [ ] [ ] ) {\n  int ans = 0 ;\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ i ] [ j ] == false ) {\n        ans ++ ;\n        for ( int k = 0 ;\n        k <= i ;\n        k ++ ) {\n          for ( int h = 0 ;\n          h <= j ;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == true ) {\n              arr [ k ] [ h ] = false ;\n            }\n            else {\n              arr [ k ] [ h ] = true ;\n            }\n          }\n        }\n      }\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minOperation ( arr ) :\n    ans = 0\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] [ j ] == 0 ) :\n                ans += 1\n                for k in range ( i + 1 ) :\n                    for h in range ( j + 1 ) :\n                        if ( arr [ k ] [ h ] == 1 ) :\n                            arr [ k ] [ h ] = 0\n                        else :\n                            arr [ k ] [ h ] = 1\n    return ans", "target_program": " int minOperation ( bool arr [ N ] [ M ] ) {\n  int ans = 0;\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( arr [ i ] [ j ] == 0 ) {\n        ans ++;\n        for ( int k = 0;\n        k <= i;\n        k ++ ) {\n          for ( int h = 0;\n          h <= j;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0;\n            else arr [ k ] [ h ] = 1;\n          }\n        }\n      }\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int minOperation ( boolean arr [ ] [ ] ) {\n  int ans = 0 ;\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ i ] [ j ] == false ) {\n        ans ++ ;\n        for ( int k = 0 ;\n        k <= i ;\n        k ++ ) {\n          for ( int h = 0 ;\n          h <= j ;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == true ) {\n              arr [ k ] [ h ] = false ;\n            }\n            else {\n              arr [ k ] [ h ] = true ;\n            }\n          }\n        }\n      }\n    }\n  }\n  return ans ;\n}", "target_program": " def minOperation ( arr ) :\n    ans = 0\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] [ j ] == 0 ) :\n                ans += 1\n                for k in range ( i + 1 ) :\n                    for h in range ( j + 1 ) :\n                        if ( arr [ k ] [ h ] == 1 ) :\n                            arr [ k ] [ h ] = 0\n                        else :\n                            arr [ k ] [ h ] = 1\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int minOperation ( boolean arr [ ] [ ] ) {\n  int ans = 0 ;\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ i ] [ j ] == false ) {\n        ans ++ ;\n        for ( int k = 0 ;\n        k <= i ;\n        k ++ ) {\n          for ( int h = 0 ;\n          h <= j ;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == true ) {\n              arr [ k ] [ h ] = false ;\n            }\n            else {\n              arr [ k ] [ h ] = true ;\n            }\n          }\n        }\n      }\n    }\n  }\n  return ans ;\n}", "target_program": " int minOperation ( bool arr [ N ] [ M ] ) {\n  int ans = 0;\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( arr [ i ] [ j ] == 0 ) {\n        ans ++;\n        for ( int k = 0;\n        k <= i;\n        k ++ ) {\n          for ( int h = 0;\n          h <= j;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0;\n            else arr [ k ] [ h ] = 1;\n          }\n        }\n      }\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minOperation ( bool arr [ N ] [ M ] ) {\n  int ans = 0;\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( arr [ i ] [ j ] == 0 ) {\n        ans ++;\n        for ( int k = 0;\n        k <= i;\n        k ++ ) {\n          for ( int h = 0;\n          h <= j;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0;\n            else arr [ k ] [ h ] = 1;\n          }\n        }\n      }\n    }\n  }\n  return ans;\n}", "target_program": " static int minOperation ( boolean arr [ ] [ ] ) {\n  int ans = 0 ;\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ i ] [ j ] == false ) {\n        ans ++ ;\n        for ( int k = 0 ;\n        k <= i ;\n        k ++ ) {\n          for ( int h = 0 ;\n          h <= j ;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == true ) {\n              arr [ k ] [ h ] = false ;\n            }\n            else {\n              arr [ k ] [ h ] = true ;\n            }\n          }\n        }\n      }\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minOperation ( bool arr [ N ] [ M ] ) {\n  int ans = 0;\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( arr [ i ] [ j ] == 0 ) {\n        ans ++;\n        for ( int k = 0;\n        k <= i;\n        k ++ ) {\n          for ( int h = 0;\n          h <= j;\n          h ++ ) {\n            if ( arr [ k ] [ h ] == 1 ) arr [ k ] [ h ] = 0;\n            else arr [ k ] [ h ] = 1;\n          }\n        }\n      }\n    }\n  }\n  return ans;\n}", "target_program": " def minOperation ( arr ) :\n    ans = 0\n    for i in range ( N - 1 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] [ j ] == 0 ) :\n                ans += 1\n                for k in range ( i + 1 ) :\n                    for h in range ( j + 1 ) :\n                        if ( arr [ k ] [ h ] == 1 ) :\n                            arr [ k ] [ h ] = 0\n                        else :\n                            arr [ k ] [ h ] = 1\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findLength ( string , n ) :\n    Sum = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        Sum [ i ] = ( Sum [ i - 1 ] + int ( string [ i - 1 ] ) )\n    ans = 0\n    for length in range ( 2 , n + 1 , 2 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            if ( Sum [ i + length // 2 ] - Sum [ i ] == Sum [ i + length ] - Sum [ i + length // 2 ] ) :\n                ans = max ( ans , length )\n    return ans", "target_program": " static int findLength ( String str , int n ) {\n  int sum [ ] = new int [ n + 1 ] ;\n  sum [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 ) - '0' ) ;\n  int ans = 0 ;\n  for ( int len = 2 ;\n  len <= n ;\n  len += 2 ) {\n    for ( int i = 0 ;\n    i <= n - len ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = Math . max ( ans , len ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLength ( string , n ) :\n    Sum = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        Sum [ i ] = ( Sum [ i - 1 ] + int ( string [ i - 1 ] ) )\n    ans = 0\n    for length in range ( 2 , n + 1 , 2 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            if ( Sum [ i + length // 2 ] - Sum [ i ] == Sum [ i + length ] - Sum [ i + length // 2 ] ) :\n                ans = max ( ans , length )\n    return ans", "target_program": " int findLength ( string str, int n ) {\n  int sum [ n + 1 ];\n  sum [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] - '0' );\n  int ans = 0;\n  for ( int len = 2;\n  len <= n;\n  len += 2 ) {\n    for ( int i = 0;\n    i <= n - len;\n    i ++ ) {\n      int j = i + len - 1;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = max ( ans, len );\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLength ( String str , int n ) {\n  int sum [ ] = new int [ n + 1 ] ;\n  sum [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 ) - '0' ) ;\n  int ans = 0 ;\n  for ( int len = 2 ;\n  len <= n ;\n  len += 2 ) {\n    for ( int i = 0 ;\n    i <= n - len ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = Math . max ( ans , len ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " def findLength ( string , n ) :\n    Sum = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        Sum [ i ] = ( Sum [ i - 1 ] + int ( string [ i - 1 ] ) )\n    ans = 0\n    for length in range ( 2 , n + 1 , 2 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            if ( Sum [ i + length // 2 ] - Sum [ i ] == Sum [ i + length ] - Sum [ i + length // 2 ] ) :\n                ans = max ( ans , length )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findLength ( String str , int n ) {\n  int sum [ ] = new int [ n + 1 ] ;\n  sum [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 ) - '0' ) ;\n  int ans = 0 ;\n  for ( int len = 2 ;\n  len <= n ;\n  len += 2 ) {\n    for ( int i = 0 ;\n    i <= n - len ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = Math . max ( ans , len ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " int findLength ( string str, int n ) {\n  int sum [ n + 1 ];\n  sum [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] - '0' );\n  int ans = 0;\n  for ( int len = 2;\n  len <= n;\n  len += 2 ) {\n    for ( int i = 0;\n    i <= n - len;\n    i ++ ) {\n      int j = i + len - 1;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = max ( ans, len );\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLength ( string str, int n ) {\n  int sum [ n + 1 ];\n  sum [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] - '0' );\n  int ans = 0;\n  for ( int len = 2;\n  len <= n;\n  len += 2 ) {\n    for ( int i = 0;\n    i <= n - len;\n    i ++ ) {\n      int j = i + len - 1;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = max ( ans, len );\n    }\n  }\n  return ans;\n}", "target_program": " static int findLength ( String str , int n ) {\n  int sum [ ] = new int [ n + 1 ] ;\n  sum [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str . charAt ( i - 1 ) - '0' ) ;\n  int ans = 0 ;\n  for ( int len = 2 ;\n  len <= n ;\n  len += 2 ) {\n    for ( int i = 0 ;\n    i <= n - len ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = Math . max ( ans , len ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLength ( string str, int n ) {\n  int sum [ n + 1 ];\n  sum [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) sum [ i ] = ( sum [ i - 1 ] + str [ i - 1 ] - '0' );\n  int ans = 0;\n  for ( int len = 2;\n  len <= n;\n  len += 2 ) {\n    for ( int i = 0;\n    i <= n - len;\n    i ++ ) {\n      int j = i + len - 1;\n      if ( sum [ i + len / 2 ] - sum [ i ] == sum [ i + len ] - sum [ i + len / 2 ] ) ans = max ( ans, len );\n    }\n  }\n  return ans;\n}", "target_program": " def findLength ( string , n ) :\n    Sum = [ 0 ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        Sum [ i ] = ( Sum [ i - 1 ] + int ( string [ i - 1 ] ) )\n    ans = 0\n    for length in range ( 2 , n + 1 , 2 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            if ( Sum [ i + length // 2 ] - Sum [ i ] == Sum [ i + length ] - Sum [ i + length // 2 ] ) :\n                ans = max ( ans , length )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findDivision ( str , a , b ) :\n    lenn = len ( str )\n    lr = [ 0 ] * ( lenn + 1 )\n    lr [ 0 ] = ( int ( str [ 0 ] ) ) % a\n    for i in range ( 1 , lenn ) :\n        lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + \\ int ( str [ i ] ) ) % a\n    rl = [ 0 ] * ( lenn + 1 )\n    rl [ lenn - 1 ] = int ( str [ lenn - 1 ] ) % b\n    power10 = 10\n    for i in range ( lenn - 2 , - 1 , - 1 ) :\n        rl [ i ] = ( rl [ i + 1 ] + int ( str [ i ] ) * power10 ) % b\n        power10 = ( power10 * 10 ) % b\n    for i in range ( 0 , lenn - 1 ) :\n        if ( lr [ i ] != 0 ) :\n            continue\n        if ( rl [ i + 1 ] == 0 ) :\n            print ( \"YES\" )\n            for k in range ( 0 , i + 1 ) :\n                print ( str [ k ] , end = \"\" )\n            print ( \",\" , end = \"\" )\n            for i in range ( i + 1 , lenn ) :\n                print ( str [ k ] , end = \"\" )\n                return\n    print ( \"NO\" )", "target_program": " static void findDivision ( String str , int a , int b ) {\n  int len = str . length ( ) ;\n  int [ ] lr = new int [ len + 1 ] ;\n  lr [ 0 ] = ( ( int ) str . charAt ( 0 ) - ( int ) '0' ) % a ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( ( int ) str . charAt ( i ) - ( int ) '0' ) ) % a ;\n  int [ ] rl = new int [ len + 1 ] ;\n  rl [ len - 1 ] = ( ( int ) str . charAt ( len - 1 ) - ( int ) '0' ) % b ;\n  int power10 = 10 ;\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( ( int ) str . charAt ( i ) - ( int ) '0' ) * power10 ) % b ;\n    power10 = ( power10 * 10 ) % b ;\n  }\n  for ( int i = 0 ;\n  i < len - 1 ;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue ;\n    if ( rl [ i + 1 ] == 0 ) {\n      System . out . println ( \"YES\" ) ;\n      for ( int k = 0 ;\n      k <= i ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      System . out . print ( \", \" ) ;\n      for ( int k = i + 1 ;\n      k < len ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"NO\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findDivision ( str , a , b ) :\n    lenn = len ( str )\n    lr = [ 0 ] * ( lenn + 1 )\n    lr [ 0 ] = ( int ( str [ 0 ] ) ) % a\n    for i in range ( 1 , lenn ) :\n        lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + \\ int ( str [ i ] ) ) % a\n    rl = [ 0 ] * ( lenn + 1 )\n    rl [ lenn - 1 ] = int ( str [ lenn - 1 ] ) % b\n    power10 = 10\n    for i in range ( lenn - 2 , - 1 , - 1 ) :\n        rl [ i ] = ( rl [ i + 1 ] + int ( str [ i ] ) * power10 ) % b\n        power10 = ( power10 * 10 ) % b\n    for i in range ( 0 , lenn - 1 ) :\n        if ( lr [ i ] != 0 ) :\n            continue\n        if ( rl [ i + 1 ] == 0 ) :\n            print ( \"YES\" )\n            for k in range ( 0 , i + 1 ) :\n                print ( str [ k ] , end = \"\" )\n            print ( \",\" , end = \"\" )\n            for i in range ( i + 1 , lenn ) :\n                print ( str [ k ] , end = \"\" )\n                return\n    print ( \"NO\" )", "target_program": " void findDivision ( string & str, int a, int b ) {\n  int len = str . length ( );\n  vector < int > lr ( len + 1, 0 );\n  lr [ 0 ] = ( str [ 0 ] - '0' ) % a;\n  for ( int i = 1;\n  i < len;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str [ i ] - '0' ) ) % a;\n  vector < int > rl ( len + 1, 0 );\n  rl [ len - 1 ] = ( str [ len - 1 ] - '0' ) % b;\n  int power10 = 10;\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( str [ i ] - '0' ) * power10 ) % b;\n    power10 = ( power10 * 10 ) % b;\n  }\n  for ( int i = 0;\n  i < len - 1;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue;\n    if ( rl [ i + 1 ] == 0 ) {\n      cout << \"YES\\n\";\n      for ( int k = 0;\n      k <= i;\n      k ++ ) cout << str [ k ];\n      cout << \", \";\n      for ( int k = i + 1;\n      k < len;\n      k ++ ) cout << str [ k ];\n      return;\n    }\n  }\n  cout << \"NO\\n\";\n}"}
{"source": "java", "target": "python", "source_program": " static void findDivision ( String str , int a , int b ) {\n  int len = str . length ( ) ;\n  int [ ] lr = new int [ len + 1 ] ;\n  lr [ 0 ] = ( ( int ) str . charAt ( 0 ) - ( int ) '0' ) % a ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( ( int ) str . charAt ( i ) - ( int ) '0' ) ) % a ;\n  int [ ] rl = new int [ len + 1 ] ;\n  rl [ len - 1 ] = ( ( int ) str . charAt ( len - 1 ) - ( int ) '0' ) % b ;\n  int power10 = 10 ;\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( ( int ) str . charAt ( i ) - ( int ) '0' ) * power10 ) % b ;\n    power10 = ( power10 * 10 ) % b ;\n  }\n  for ( int i = 0 ;\n  i < len - 1 ;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue ;\n    if ( rl [ i + 1 ] == 0 ) {\n      System . out . println ( \"YES\" ) ;\n      for ( int k = 0 ;\n      k <= i ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      System . out . print ( \", \" ) ;\n      for ( int k = i + 1 ;\n      k < len ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"NO\" ) ;\n}", "target_program": " def findDivision ( str , a , b ) :\n    lenn = len ( str )\n    lr = [ 0 ] * ( lenn + 1 )\n    lr [ 0 ] = ( int ( str [ 0 ] ) ) % a\n    for i in range ( 1 , lenn ) :\n        lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + \\ int ( str [ i ] ) ) % a\n    rl = [ 0 ] * ( lenn + 1 )\n    rl [ lenn - 1 ] = int ( str [ lenn - 1 ] ) % b\n    power10 = 10\n    for i in range ( lenn - 2 , - 1 , - 1 ) :\n        rl [ i ] = ( rl [ i + 1 ] + int ( str [ i ] ) * power10 ) % b\n        power10 = ( power10 * 10 ) % b\n    for i in range ( 0 , lenn - 1 ) :\n        if ( lr [ i ] != 0 ) :\n            continue\n        if ( rl [ i + 1 ] == 0 ) :\n            print ( \"YES\" )\n            for k in range ( 0 , i + 1 ) :\n                print ( str [ k ] , end = \"\" )\n            print ( \",\" , end = \"\" )\n            for i in range ( i + 1 , lenn ) :\n                print ( str [ k ] , end = \"\" )\n                return\n    print ( \"NO\" )"}
{"source": "java", "target": "cpp", "source_program": " static void findDivision ( String str , int a , int b ) {\n  int len = str . length ( ) ;\n  int [ ] lr = new int [ len + 1 ] ;\n  lr [ 0 ] = ( ( int ) str . charAt ( 0 ) - ( int ) '0' ) % a ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( ( int ) str . charAt ( i ) - ( int ) '0' ) ) % a ;\n  int [ ] rl = new int [ len + 1 ] ;\n  rl [ len - 1 ] = ( ( int ) str . charAt ( len - 1 ) - ( int ) '0' ) % b ;\n  int power10 = 10 ;\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( ( int ) str . charAt ( i ) - ( int ) '0' ) * power10 ) % b ;\n    power10 = ( power10 * 10 ) % b ;\n  }\n  for ( int i = 0 ;\n  i < len - 1 ;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue ;\n    if ( rl [ i + 1 ] == 0 ) {\n      System . out . println ( \"YES\" ) ;\n      for ( int k = 0 ;\n      k <= i ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      System . out . print ( \", \" ) ;\n      for ( int k = i + 1 ;\n      k < len ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"NO\" ) ;\n}", "target_program": " void findDivision ( string & str, int a, int b ) {\n  int len = str . length ( );\n  vector < int > lr ( len + 1, 0 );\n  lr [ 0 ] = ( str [ 0 ] - '0' ) % a;\n  for ( int i = 1;\n  i < len;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str [ i ] - '0' ) ) % a;\n  vector < int > rl ( len + 1, 0 );\n  rl [ len - 1 ] = ( str [ len - 1 ] - '0' ) % b;\n  int power10 = 10;\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( str [ i ] - '0' ) * power10 ) % b;\n    power10 = ( power10 * 10 ) % b;\n  }\n  for ( int i = 0;\n  i < len - 1;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue;\n    if ( rl [ i + 1 ] == 0 ) {\n      cout << \"YES\\n\";\n      for ( int k = 0;\n      k <= i;\n      k ++ ) cout << str [ k ];\n      cout << \", \";\n      for ( int k = i + 1;\n      k < len;\n      k ++ ) cout << str [ k ];\n      return;\n    }\n  }\n  cout << \"NO\\n\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void findDivision ( string & str, int a, int b ) {\n  int len = str . length ( );\n  vector < int > lr ( len + 1, 0 );\n  lr [ 0 ] = ( str [ 0 ] - '0' ) % a;\n  for ( int i = 1;\n  i < len;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str [ i ] - '0' ) ) % a;\n  vector < int > rl ( len + 1, 0 );\n  rl [ len - 1 ] = ( str [ len - 1 ] - '0' ) % b;\n  int power10 = 10;\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( str [ i ] - '0' ) * power10 ) % b;\n    power10 = ( power10 * 10 ) % b;\n  }\n  for ( int i = 0;\n  i < len - 1;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue;\n    if ( rl [ i + 1 ] == 0 ) {\n      cout << \"YES\\n\";\n      for ( int k = 0;\n      k <= i;\n      k ++ ) cout << str [ k ];\n      cout << \", \";\n      for ( int k = i + 1;\n      k < len;\n      k ++ ) cout << str [ k ];\n      return;\n    }\n  }\n  cout << \"NO\\n\";\n}", "target_program": " static void findDivision ( String str , int a , int b ) {\n  int len = str . length ( ) ;\n  int [ ] lr = new int [ len + 1 ] ;\n  lr [ 0 ] = ( ( int ) str . charAt ( 0 ) - ( int ) '0' ) % a ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( ( int ) str . charAt ( i ) - ( int ) '0' ) ) % a ;\n  int [ ] rl = new int [ len + 1 ] ;\n  rl [ len - 1 ] = ( ( int ) str . charAt ( len - 1 ) - ( int ) '0' ) % b ;\n  int power10 = 10 ;\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( ( int ) str . charAt ( i ) - ( int ) '0' ) * power10 ) % b ;\n    power10 = ( power10 * 10 ) % b ;\n  }\n  for ( int i = 0 ;\n  i < len - 1 ;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue ;\n    if ( rl [ i + 1 ] == 0 ) {\n      System . out . println ( \"YES\" ) ;\n      for ( int k = 0 ;\n      k <= i ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      System . out . print ( \", \" ) ;\n      for ( int k = i + 1 ;\n      k < len ;\n      k ++ ) System . out . print ( str . charAt ( k ) ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"NO\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findDivision ( string & str, int a, int b ) {\n  int len = str . length ( );\n  vector < int > lr ( len + 1, 0 );\n  lr [ 0 ] = ( str [ 0 ] - '0' ) % a;\n  for ( int i = 1;\n  i < len;\n  i ++ ) lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + ( str [ i ] - '0' ) ) % a;\n  vector < int > rl ( len + 1, 0 );\n  rl [ len - 1 ] = ( str [ len - 1 ] - '0' ) % b;\n  int power10 = 10;\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    rl [ i ] = ( rl [ i + 1 ] + ( str [ i ] - '0' ) * power10 ) % b;\n    power10 = ( power10 * 10 ) % b;\n  }\n  for ( int i = 0;\n  i < len - 1;\n  i ++ ) {\n    if ( lr [ i ] != 0 ) continue;\n    if ( rl [ i + 1 ] == 0 ) {\n      cout << \"YES\\n\";\n      for ( int k = 0;\n      k <= i;\n      k ++ ) cout << str [ k ];\n      cout << \", \";\n      for ( int k = i + 1;\n      k < len;\n      k ++ ) cout << str [ k ];\n      return;\n    }\n  }\n  cout << \"NO\\n\";\n}", "target_program": " def findDivision ( str , a , b ) :\n    lenn = len ( str )\n    lr = [ 0 ] * ( lenn + 1 )\n    lr [ 0 ] = ( int ( str [ 0 ] ) ) % a\n    for i in range ( 1 , lenn ) :\n        lr [ i ] = ( ( lr [ i - 1 ] * 10 ) % a + \\ int ( str [ i ] ) ) % a\n    rl = [ 0 ] * ( lenn + 1 )\n    rl [ lenn - 1 ] = int ( str [ lenn - 1 ] ) % b\n    power10 = 10\n    for i in range ( lenn - 2 , - 1 , - 1 ) :\n        rl [ i ] = ( rl [ i + 1 ] + int ( str [ i ] ) * power10 ) % b\n        power10 = ( power10 * 10 ) % b\n    for i in range ( 0 , lenn - 1 ) :\n        if ( lr [ i ] != 0 ) :\n            continue\n        if ( rl [ i + 1 ] == 0 ) :\n            print ( \"YES\" )\n            for k in range ( 0 , i + 1 ) :\n                print ( str [ k ] , end = \"\" )\n            print ( \",\" , end = \"\" )\n            for i in range ( i + 1 , lenn ) :\n                print ( str [ k ] , end = \"\" )\n                return\n    print ( \"NO\" )"}
{"source": "python", "target": "java", "source_program": " def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        bestIdx = - 1\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n        if bestIdx != - 1 :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )", "target_program": " static void bestFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int bestIdx = - 1 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j ;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j ;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx ;\n      blockSize [ bestIdx ] -= processSize [ i ] ;\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \"   \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        bestIdx = - 1\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n        if bestIdx != - 1 :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )", "target_program": " void bestFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int bestIdx = - 1;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx;\n      blockSize [ bestIdx ] -= processSize [ i ];\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \"   \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void bestFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int bestIdx = - 1 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j ;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j ;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx ;\n      blockSize [ bestIdx ] -= processSize [ i ] ;\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \"   \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        bestIdx = - 1\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n        if bestIdx != - 1 :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"source": "java", "target": "cpp", "source_program": " static void bestFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int bestIdx = - 1 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j ;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j ;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx ;\n      blockSize [ bestIdx ] -= processSize [ i ] ;\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \"   \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " void bestFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int bestIdx = - 1;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx;\n      blockSize [ bestIdx ] -= processSize [ i ];\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \"   \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void bestFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int bestIdx = - 1;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx;\n      blockSize [ bestIdx ] -= processSize [ i ];\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \"   \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}", "target_program": " static void bestFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int bestIdx = - 1 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j ;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j ;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx ;\n      blockSize [ bestIdx ] -= processSize [ i ] ;\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \"   \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void bestFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int bestIdx = - 1;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        if ( bestIdx == - 1 ) bestIdx = j;\n        else if ( blockSize [ bestIdx ] > blockSize [ j ] ) bestIdx = j;\n      }\n    }\n    if ( bestIdx != - 1 ) {\n      allocation [ i ] = bestIdx;\n      blockSize [ bestIdx ] -= processSize [ i ];\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \"   \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}", "target_program": " def bestFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        bestIdx = - 1\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                if bestIdx == - 1 :\n                    bestIdx = j\n                elif blockSize [ bestIdx ] > blockSize [ j ] :\n                    bestIdx = j\n        if bestIdx != - 1 :\n            allocation [ i ] = bestIdx\n            blockSize [ bestIdx ] -= processSize [ i ]\n    print ( \"Process No.Process Size     Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"         \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"source": "python", "target": "java", "source_program": " def countFriendsPairings ( n ) :\n    dp = [ - 1 ] * 100\n    if ( dp [ n ] != - 1 ) :\n        return dp [ n ]\n    if ( n > 2 ) :\n        dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) )\n        return dp [ n ]\n    else :\n        dp [ n ] = n\n        return dp [ n ]", "target_program": " static int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ] ;\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) ;\n  else return dp [ n ] = n ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countFriendsPairings ( n ) :\n    dp = [ - 1 ] * 100\n    if ( dp [ n ] != - 1 ) :\n        return dp [ n ]\n    if ( n > 2 ) :\n        dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) )\n        return dp [ n ]\n    else :\n        dp [ n ] = n\n        return dp [ n ]", "target_program": " int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ];\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 );\n  else return dp [ n ] = n;\n}"}
{"source": "java", "target": "python", "source_program": " static int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ] ;\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) ;\n  else return dp [ n ] = n ;\n}", "target_program": " def countFriendsPairings ( n ) :\n    dp = [ - 1 ] * 100\n    if ( dp [ n ] != - 1 ) :\n        return dp [ n ]\n    if ( n > 2 ) :\n        dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) )\n        return dp [ n ]\n    else :\n        dp [ n ] = n\n        return dp [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ] ;\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) ;\n  else return dp [ n ] = n ;\n}", "target_program": " int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ];\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 );\n  else return dp [ n ] = n;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ];\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 );\n  else return dp [ n ] = n;\n}", "target_program": " static int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ] ;\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) ;\n  else return dp [ n ] = n ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countFriendsPairings ( int n ) {\n  if ( dp [ n ] != - 1 ) return dp [ n ];\n  if ( n > 2 ) return dp [ n ] = countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 );\n  else return dp [ n ] = n;\n}", "target_program": " def countFriendsPairings ( n ) :\n    dp = [ - 1 ] * 100\n    if ( dp [ n ] != - 1 ) :\n        return dp [ n ]\n    if ( n > 2 ) :\n        dp [ n ] = ( countFriendsPairings ( n - 1 ) + ( n - 1 ) * countFriendsPairings ( n - 2 ) )\n        return dp [ n ]\n    else :\n        dp [ n ] = n\n        return dp [ n ]"}
{"source": "python", "target": "java", "source_program": " def firstElement ( arr , n , k ) :\n    count_map = { } ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n    for i in range ( 0 , n ) :\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n    return - 1", "target_program": " static int firstElement ( int arr [ ] , int n , int k ) {\n  HashMap < Integer , Integer > count_map = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int a = 0 ;\n    if ( count_map . get ( arr [ i ] ) != null ) {\n      a = count_map . get ( arr [ i ] ) ;\n    }\n    count_map . put ( arr [ i ] , a + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( count_map . get ( arr [ i ] ) == k ) {\n      return arr [ i ] ;\n    }\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def firstElement ( arr , n , k ) :\n    count_map = { } ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n    for i in range ( 0 , n ) :\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n    return - 1", "target_program": " int firstElement ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > count_map;\n  for ( int i = 0;\n  i < n;\n  i ++ ) count_map [ arr [ i ] ] ++;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( count_map [ arr [ i ] ] == k ) return arr [ i ];\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int firstElement ( int arr [ ] , int n , int k ) {\n  HashMap < Integer , Integer > count_map = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int a = 0 ;\n    if ( count_map . get ( arr [ i ] ) != null ) {\n      a = count_map . get ( arr [ i ] ) ;\n    }\n    count_map . put ( arr [ i ] , a + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( count_map . get ( arr [ i ] ) == k ) {\n      return arr [ i ] ;\n    }\n  }\n  return - 1 ;\n}", "target_program": " def firstElement ( arr , n , k ) :\n    count_map = { } ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n    for i in range ( 0 , n ) :\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int firstElement ( int arr [ ] , int n , int k ) {\n  HashMap < Integer , Integer > count_map = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int a = 0 ;\n    if ( count_map . get ( arr [ i ] ) != null ) {\n      a = count_map . get ( arr [ i ] ) ;\n    }\n    count_map . put ( arr [ i ] , a + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( count_map . get ( arr [ i ] ) == k ) {\n      return arr [ i ] ;\n    }\n  }\n  return - 1 ;\n}", "target_program": " int firstElement ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > count_map;\n  for ( int i = 0;\n  i < n;\n  i ++ ) count_map [ arr [ i ] ] ++;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( count_map [ arr [ i ] ] == k ) return arr [ i ];\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int firstElement ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > count_map;\n  for ( int i = 0;\n  i < n;\n  i ++ ) count_map [ arr [ i ] ] ++;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( count_map [ arr [ i ] ] == k ) return arr [ i ];\n  return - 1;\n}", "target_program": " static int firstElement ( int arr [ ] , int n , int k ) {\n  HashMap < Integer , Integer > count_map = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int a = 0 ;\n    if ( count_map . get ( arr [ i ] ) != null ) {\n      a = count_map . get ( arr [ i ] ) ;\n    }\n    count_map . put ( arr [ i ] , a + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( count_map . get ( arr [ i ] ) == k ) {\n      return arr [ i ] ;\n    }\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int firstElement ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > count_map;\n  for ( int i = 0;\n  i < n;\n  i ++ ) count_map [ arr [ i ] ] ++;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( count_map [ arr [ i ] ] == k ) return arr [ i ];\n  return - 1;\n}", "target_program": " def firstElement ( arr , n , k ) :\n    count_map = { } ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] in count_map.keys ( ) ) :\n            count_map [ arr [ i ] ] += 1\n        else :\n            count_map [ arr [ i ] ] = 1\n        i += 1\n    for i in range ( 0 , n ) :\n        if ( count_map [ arr [ i ] ] == k ) :\n            return arr [ i ]\n        i += 1\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def sumOfSeries ( n ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;", "target_program": " static double sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumOfSeries ( n ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;", "target_program": " float sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / pow ( 10, n ) );\n}"}
{"source": "java", "target": "python", "source_program": " static double sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;\n}", "target_program": " def sumOfSeries ( n ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;"}
{"source": "java", "target": "cpp", "source_program": " static double sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;\n}", "target_program": " float sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / pow ( 10, n ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " float sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / pow ( 10, n ) );\n}", "target_program": " static double sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / Math . pow ( 10 , n ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float sumOfSeries ( int n ) {\n  return ( 0.666 ) * ( 1 - 1 / pow ( 10, n ) );\n}", "target_program": " def sumOfSeries ( n ) :\n    return ( ( 0.666 ) * ( 1 - 1 / pow ( 10 , n ) ) ) ;"}
{"source": "python", "target": "java", "source_program": " def maxDifference ( arr , N , k ) :\n    S = 0\n    S1 = 0\n    max_difference = 0\n    for i in range ( N ) :\n        S += arr [ i ]\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    for i in range ( M ) :\n        S1 += arr [ i ]\n    max_difference = S1 - ( S - S1 )\n    return max_difference", "target_program": " static int maxDifference ( int arr [ ] , int N , int k ) {\n  int M , S = 0 , S1 = 0 , max_difference = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) S += arr [ i ] ;\n  int temp ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < N ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ j ] ;\n        arr [ j ] = temp ;\n      }\n    }\n  }\n  M = Math . max ( k , N - k ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) S1 += arr [ i ] ;\n  max_difference = S1 - ( S - S1 ) ;\n  return max_difference ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxDifference ( arr , N , k ) :\n    S = 0\n    S1 = 0\n    max_difference = 0\n    for i in range ( N ) :\n        S += arr [ i ]\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    for i in range ( M ) :\n        S1 += arr [ i ]\n    max_difference = S1 - ( S - S1 )\n    return max_difference", "target_program": " int maxDifference ( int arr [ ], int N, int k ) {\n  int M, S = 0, S1 = 0, max_difference = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) S += arr [ i ];\n  sort ( arr, arr + N, greater < int > ( ) );\n  M = max ( k, N - k );\n  for ( int i = 0;\n  i < M;\n  i ++ ) S1 += arr [ i ];\n  max_difference = S1 - ( S - S1 );\n  return max_difference;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxDifference ( int arr [ ] , int N , int k ) {\n  int M , S = 0 , S1 = 0 , max_difference = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) S += arr [ i ] ;\n  int temp ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < N ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ j ] ;\n        arr [ j ] = temp ;\n      }\n    }\n  }\n  M = Math . max ( k , N - k ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) S1 += arr [ i ] ;\n  max_difference = S1 - ( S - S1 ) ;\n  return max_difference ;\n}", "target_program": " def maxDifference ( arr , N , k ) :\n    S = 0\n    S1 = 0\n    max_difference = 0\n    for i in range ( N ) :\n        S += arr [ i ]\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    for i in range ( M ) :\n        S1 += arr [ i ]\n    max_difference = S1 - ( S - S1 )\n    return max_difference"}
{"source": "java", "target": "cpp", "source_program": " static int maxDifference ( int arr [ ] , int N , int k ) {\n  int M , S = 0 , S1 = 0 , max_difference = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) S += arr [ i ] ;\n  int temp ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < N ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ j ] ;\n        arr [ j ] = temp ;\n      }\n    }\n  }\n  M = Math . max ( k , N - k ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) S1 += arr [ i ] ;\n  max_difference = S1 - ( S - S1 ) ;\n  return max_difference ;\n}", "target_program": " int maxDifference ( int arr [ ], int N, int k ) {\n  int M, S = 0, S1 = 0, max_difference = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) S += arr [ i ];\n  sort ( arr, arr + N, greater < int > ( ) );\n  M = max ( k, N - k );\n  for ( int i = 0;\n  i < M;\n  i ++ ) S1 += arr [ i ];\n  max_difference = S1 - ( S - S1 );\n  return max_difference;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxDifference ( int arr [ ], int N, int k ) {\n  int M, S = 0, S1 = 0, max_difference = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) S += arr [ i ];\n  sort ( arr, arr + N, greater < int > ( ) );\n  M = max ( k, N - k );\n  for ( int i = 0;\n  i < M;\n  i ++ ) S1 += arr [ i ];\n  max_difference = S1 - ( S - S1 );\n  return max_difference;\n}", "target_program": " static int maxDifference ( int arr [ ] , int N , int k ) {\n  int M , S = 0 , S1 = 0 , max_difference = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) S += arr [ i ] ;\n  int temp ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < N ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ j ] ;\n        arr [ j ] = temp ;\n      }\n    }\n  }\n  M = Math . max ( k , N - k ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) S1 += arr [ i ] ;\n  max_difference = S1 - ( S - S1 ) ;\n  return max_difference ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxDifference ( int arr [ ], int N, int k ) {\n  int M, S = 0, S1 = 0, max_difference = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) S += arr [ i ];\n  sort ( arr, arr + N, greater < int > ( ) );\n  M = max ( k, N - k );\n  for ( int i = 0;\n  i < M;\n  i ++ ) S1 += arr [ i ];\n  max_difference = S1 - ( S - S1 );\n  return max_difference;\n}", "target_program": " def maxDifference ( arr , N , k ) :\n    S = 0\n    S1 = 0\n    max_difference = 0\n    for i in range ( N ) :\n        S += arr [ i ]\n    arr.sort ( reverse = True )\n    M = max ( k , N - k )\n    for i in range ( M ) :\n        S1 += arr [ i ]\n    max_difference = S1 - ( S - S1 )\n    return max_difference"}
{"source": "python", "target": "java", "source_program": " def printNos ( n ) :\n    if n > 0 :\n        printNos ( n - 1 )\n        print ( n , end = ' ' )", "target_program": " static void printNos ( int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 ) ;\n    System . out . print ( n + \" \" ) ;\n  }\n  return ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printNos ( n ) :\n    if n > 0 :\n        printNos ( n - 1 )\n        print ( n , end = ' ' )", "target_program": " public : void printNos ( unsigned int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 );\n    cout << n << \" \";\n  }\n  return;\n}"}
{"source": "java", "target": "python", "source_program": " static void printNos ( int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 ) ;\n    System . out . print ( n + \" \" ) ;\n  }\n  return ;\n}", "target_program": " def printNos ( n ) :\n    if n > 0 :\n        printNos ( n - 1 )\n        print ( n , end = ' ' )"}
{"source": "java", "target": "cpp", "source_program": " static void printNos ( int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 ) ;\n    System . out . print ( n + \" \" ) ;\n  }\n  return ;\n}", "target_program": " public : void printNos ( unsigned int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 );\n    cout << n << \" \";\n  }\n  return;\n}"}
{"source": "cpp", "target": "java", "source_program": " public : void printNos ( unsigned int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 );\n    cout << n << \" \";\n  }\n  return;\n}", "target_program": " static void printNos ( int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 ) ;\n    System . out . print ( n + \" \" ) ;\n  }\n  return ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : void printNos ( unsigned int n ) {\n  if ( n > 0 ) {\n    printNos ( n - 1 );\n    cout << n << \" \";\n  }\n  return;\n}", "target_program": " def printNos ( n ) :\n    if n > 0 :\n        printNos ( n - 1 )\n        print ( n , end = ' ' )"}
{"source": "python", "target": "java", "source_program": " def pairsInSortedRotated ( arr , n , x ) :\n    for i in range ( n ) :\n        if arr [ i ] > arr [ i + 1 ] :\n            break\n    l = ( i + 1 ) % n\n    r = i\n    cnt = 0\n    while ( l != r ) :\n        if arr [ l ] + arr [ r ] == x :\n            cnt += 1\n            if l == ( r - 1 + n ) % n :\n                return cnt\n            l = ( l + 1 ) % n\n            r = ( r - 1 + n ) % n\n        elif arr [ l ] + arr [ r ] < x :\n            l = ( l + 1 ) % n\n        else :\n            r = ( n + r - 1 ) % n\n    return cnt", "target_program": " static int pairsInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  int cnt = 0 ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++ ;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt ;\n      }\n      l = ( l + 1 ) % n ;\n      r = ( r - 1 + n ) % n ;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return cnt ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pairsInSortedRotated ( arr , n , x ) :\n    for i in range ( n ) :\n        if arr [ i ] > arr [ i + 1 ] :\n            break\n    l = ( i + 1 ) % n\n    r = i\n    cnt = 0\n    while ( l != r ) :\n        if arr [ l ] + arr [ r ] == x :\n            cnt += 1\n            if l == ( r - 1 + n ) % n :\n                return cnt\n            l = ( l + 1 ) % n\n            r = ( r - 1 + n ) % n\n        elif arr [ l ] + arr [ r ] < x :\n            l = ( l + 1 ) % n\n        else :\n            r = ( n + r - 1 ) % n\n    return cnt", "target_program": " int pairsInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  int cnt = 0;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt;\n      }\n      l = ( l + 1 ) % n;\n      r = ( r - 1 + n ) % n;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return cnt;\n}"}
{"source": "java", "target": "python", "source_program": " static int pairsInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  int cnt = 0 ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++ ;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt ;\n      }\n      l = ( l + 1 ) % n ;\n      r = ( r - 1 + n ) % n ;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return cnt ;\n}", "target_program": " def pairsInSortedRotated ( arr , n , x ) :\n    for i in range ( n ) :\n        if arr [ i ] > arr [ i + 1 ] :\n            break\n    l = ( i + 1 ) % n\n    r = i\n    cnt = 0\n    while ( l != r ) :\n        if arr [ l ] + arr [ r ] == x :\n            cnt += 1\n            if l == ( r - 1 + n ) % n :\n                return cnt\n            l = ( l + 1 ) % n\n            r = ( r - 1 + n ) % n\n        elif arr [ l ] + arr [ r ] < x :\n            l = ( l + 1 ) % n\n        else :\n            r = ( n + r - 1 ) % n\n    return cnt"}
{"source": "java", "target": "cpp", "source_program": " static int pairsInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  int cnt = 0 ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++ ;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt ;\n      }\n      l = ( l + 1 ) % n ;\n      r = ( r - 1 + n ) % n ;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return cnt ;\n}", "target_program": " int pairsInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  int cnt = 0;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt;\n      }\n      l = ( l + 1 ) % n;\n      r = ( r - 1 + n ) % n;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return cnt;\n}"}
{"source": "cpp", "target": "java", "source_program": " int pairsInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  int cnt = 0;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt;\n      }\n      l = ( l + 1 ) % n;\n      r = ( r - 1 + n ) % n;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return cnt;\n}", "target_program": " static int pairsInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  int cnt = 0 ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++ ;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt ;\n      }\n      l = ( l + 1 ) % n ;\n      r = ( r - 1 + n ) % n ;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return cnt ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int pairsInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  int cnt = 0;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) {\n      cnt ++;\n      if ( l == ( r - 1 + n ) % n ) {\n        return cnt;\n      }\n      l = ( l + 1 ) % n;\n      r = ( r - 1 + n ) % n;\n    }\n    else if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return cnt;\n}", "target_program": " def pairsInSortedRotated ( arr , n , x ) :\n    for i in range ( n ) :\n        if arr [ i ] > arr [ i + 1 ] :\n            break\n    l = ( i + 1 ) % n\n    r = i\n    cnt = 0\n    while ( l != r ) :\n        if arr [ l ] + arr [ r ] == x :\n            cnt += 1\n            if l == ( r - 1 + n ) % n :\n                return cnt\n            l = ( l + 1 ) % n\n            r = ( r - 1 + n ) % n\n        elif arr [ l ] + arr [ r ] < x :\n            l = ( l + 1 ) % n\n        else :\n            r = ( n + r - 1 ) % n\n    return cnt"}
{"source": "python", "target": "java", "source_program": " def cassini ( n ) :\n    return - 1 if ( n & 1 ) else 1", "target_program": " static int cassini ( int n ) {\n  return ( n & 1 ) != 0 ? - 1 : 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def cassini ( n ) :\n    return - 1 if ( n & 1 ) else 1", "target_program": " int cassini ( int n ) {\n  return ( n & 1 ) ? - 1 : 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int cassini ( int n ) {\n  return ( n & 1 ) != 0 ? - 1 : 1 ;\n}", "target_program": " def cassini ( n ) :\n    return - 1 if ( n & 1 ) else 1"}
{"source": "java", "target": "cpp", "source_program": " static int cassini ( int n ) {\n  return ( n & 1 ) != 0 ? - 1 : 1 ;\n}", "target_program": " int cassini ( int n ) {\n  return ( n & 1 ) ? - 1 : 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int cassini ( int n ) {\n  return ( n & 1 ) ? - 1 : 1;\n}", "target_program": " static int cassini ( int n ) {\n  return ( n & 1 ) != 0 ? - 1 : 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int cassini ( int n ) {\n  return ( n & 1 ) ? - 1 : 1;\n}", "target_program": " def cassini ( n ) :\n    return - 1 if ( n & 1 ) else 1"}
{"source": "python", "target": "java", "source_program": " def findMaxValue ( arr , n ) :\n    if n < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n    for i in range ( n - 3 , - 1 , - 1 ) :\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n    for i in range ( n - 4 , - 1 , - 1 ) :\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n    return table4 [ 0 ]", "target_program": " static int findMaxValue ( int [ ] arr , int n ) {\n  if ( n < 4 ) {\n    System . out . println ( \"The array should have\" + \" atleast 4 elements\" ) ;\n  }\n  int table1 [ ] = new int [ n + 1 ] ;\n  int table2 [ ] = new int [ n ] ;\n  int table3 [ ] = new int [ n - 1 ] ;\n  int table4 [ ] = new int [ n - 2 ] ;\n  Arrays . fill ( table1 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table2 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table3 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table4 , Integer . MIN_VALUE ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ;\n  }\n  for ( int i = n - 3 ;\n  i >= 0 ;\n  i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ;\n  for ( int i = n - 4 ;\n  i >= 0 ;\n  i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ;\n  return table4 [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxValue ( arr , n ) :\n    if n < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n    for i in range ( n - 3 , - 1 , - 1 ) :\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n    for i in range ( n - 4 , - 1 , - 1 ) :\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n    return table4 [ 0 ]", "target_program": " - 100000000 int findMaxValue ( int arr [ ], int n ) {\n  if ( n < 4 ) {\n    printf ( \"The array should have atlest 4 elements\\n\" );\n    return MIN;\n  }\n  int table1 [ n + 1 ], table2 [ n ], table3 [ n - 1 ], table4 [ n - 2 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) table1 [ i ] = table2 [ i ] = table3 [ i ] = table4 [ i ] = MIN;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) table1 [ i ] = max ( table1 [ i + 1 ], arr [ i ] );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) table2 [ i ] = max ( table2 [ i + 1 ], table1 [ i + 1 ] - arr [ i ] );\n  for ( int i = n - 3;\n  i >= 0;\n  i -- ) table3 [ i ] = max ( table3 [ i + 1 ], table2 [ i + 1 ] + arr [ i ] );\n  for ( int i = n - 4;\n  i >= 0;\n  i -- ) table4 [ i ] = max ( table4 [ i + 1 ], table3 [ i + 1 ] - arr [ i ] );\n  return table4 [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxValue ( int [ ] arr , int n ) {\n  if ( n < 4 ) {\n    System . out . println ( \"The array should have\" + \" atleast 4 elements\" ) ;\n  }\n  int table1 [ ] = new int [ n + 1 ] ;\n  int table2 [ ] = new int [ n ] ;\n  int table3 [ ] = new int [ n - 1 ] ;\n  int table4 [ ] = new int [ n - 2 ] ;\n  Arrays . fill ( table1 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table2 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table3 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table4 , Integer . MIN_VALUE ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ;\n  }\n  for ( int i = n - 3 ;\n  i >= 0 ;\n  i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ;\n  for ( int i = n - 4 ;\n  i >= 0 ;\n  i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ;\n  return table4 [ 0 ] ;\n}", "target_program": " def findMaxValue ( arr , n ) :\n    if n < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n    for i in range ( n - 3 , - 1 , - 1 ) :\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n    for i in range ( n - 4 , - 1 , - 1 ) :\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n    return table4 [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxValue ( int [ ] arr , int n ) {\n  if ( n < 4 ) {\n    System . out . println ( \"The array should have\" + \" atleast 4 elements\" ) ;\n  }\n  int table1 [ ] = new int [ n + 1 ] ;\n  int table2 [ ] = new int [ n ] ;\n  int table3 [ ] = new int [ n - 1 ] ;\n  int table4 [ ] = new int [ n - 2 ] ;\n  Arrays . fill ( table1 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table2 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table3 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table4 , Integer . MIN_VALUE ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ;\n  }\n  for ( int i = n - 3 ;\n  i >= 0 ;\n  i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ;\n  for ( int i = n - 4 ;\n  i >= 0 ;\n  i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ;\n  return table4 [ 0 ] ;\n}", "target_program": " - 100000000 int findMaxValue ( int arr [ ], int n ) {\n  if ( n < 4 ) {\n    printf ( \"The array should have atlest 4 elements\\n\" );\n    return MIN;\n  }\n  int table1 [ n + 1 ], table2 [ n ], table3 [ n - 1 ], table4 [ n - 2 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) table1 [ i ] = table2 [ i ] = table3 [ i ] = table4 [ i ] = MIN;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) table1 [ i ] = max ( table1 [ i + 1 ], arr [ i ] );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) table2 [ i ] = max ( table2 [ i + 1 ], table1 [ i + 1 ] - arr [ i ] );\n  for ( int i = n - 3;\n  i >= 0;\n  i -- ) table3 [ i ] = max ( table3 [ i + 1 ], table2 [ i + 1 ] + arr [ i ] );\n  for ( int i = n - 4;\n  i >= 0;\n  i -- ) table4 [ i ] = max ( table4 [ i + 1 ], table3 [ i + 1 ] - arr [ i ] );\n  return table4 [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " - 100000000 int findMaxValue ( int arr [ ], int n ) {\n  if ( n < 4 ) {\n    printf ( \"The array should have atlest 4 elements\\n\" );\n    return MIN;\n  }\n  int table1 [ n + 1 ], table2 [ n ], table3 [ n - 1 ], table4 [ n - 2 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) table1 [ i ] = table2 [ i ] = table3 [ i ] = table4 [ i ] = MIN;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) table1 [ i ] = max ( table1 [ i + 1 ], arr [ i ] );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) table2 [ i ] = max ( table2 [ i + 1 ], table1 [ i + 1 ] - arr [ i ] );\n  for ( int i = n - 3;\n  i >= 0;\n  i -- ) table3 [ i ] = max ( table3 [ i + 1 ], table2 [ i + 1 ] + arr [ i ] );\n  for ( int i = n - 4;\n  i >= 0;\n  i -- ) table4 [ i ] = max ( table4 [ i + 1 ], table3 [ i + 1 ] - arr [ i ] );\n  return table4 [ 0 ];\n}", "target_program": " static int findMaxValue ( int [ ] arr , int n ) {\n  if ( n < 4 ) {\n    System . out . println ( \"The array should have\" + \" atleast 4 elements\" ) ;\n  }\n  int table1 [ ] = new int [ n + 1 ] ;\n  int table2 [ ] = new int [ n ] ;\n  int table3 [ ] = new int [ n - 1 ] ;\n  int table4 [ ] = new int [ n - 2 ] ;\n  Arrays . fill ( table1 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table2 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table3 , Integer . MIN_VALUE ) ;\n  Arrays . fill ( table4 , Integer . MIN_VALUE ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    table1 [ i ] = Math . max ( table1 [ i + 1 ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    table2 [ i ] = Math . max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] ) ;\n  }\n  for ( int i = n - 3 ;\n  i >= 0 ;\n  i -- ) table3 [ i ] = Math . max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] ) ;\n  for ( int i = n - 4 ;\n  i >= 0 ;\n  i -- ) table4 [ i ] = Math . max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] ) ;\n  return table4 [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " - 100000000 int findMaxValue ( int arr [ ], int n ) {\n  if ( n < 4 ) {\n    printf ( \"The array should have atlest 4 elements\\n\" );\n    return MIN;\n  }\n  int table1 [ n + 1 ], table2 [ n ], table3 [ n - 1 ], table4 [ n - 2 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) table1 [ i ] = table2 [ i ] = table3 [ i ] = table4 [ i ] = MIN;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) table1 [ i ] = max ( table1 [ i + 1 ], arr [ i ] );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) table2 [ i ] = max ( table2 [ i + 1 ], table1 [ i + 1 ] - arr [ i ] );\n  for ( int i = n - 3;\n  i >= 0;\n  i -- ) table3 [ i ] = max ( table3 [ i + 1 ], table2 [ i + 1 ] + arr [ i ] );\n  for ( int i = n - 4;\n  i >= 0;\n  i -- ) table4 [ i ] = max ( table4 [ i + 1 ], table3 [ i + 1 ] - arr [ i ] );\n  return table4 [ 0 ];\n}", "target_program": " def findMaxValue ( arr , n ) :\n    if n < 4 :\n        print ( \"The array should have atlest 4 elements\" )\n        return MIN\n    table1 , table2 = [ MIN ] * ( n + 1 ) , [ MIN ] * n\n    table3 , table4 = [ MIN ] * ( n - 1 ) , [ MIN ] * ( n - 2 )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        table1 [ i ] = max ( table1 [ i + 1 ] , arr [ i ] )\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        table2 [ i ] = max ( table2 [ i + 1 ] , table1 [ i + 1 ] - arr [ i ] )\n    for i in range ( n - 3 , - 1 , - 1 ) :\n        table3 [ i ] = max ( table3 [ i + 1 ] , table2 [ i + 1 ] + arr [ i ] )\n    for i in range ( n - 4 , - 1 , - 1 ) :\n        table4 [ i ] = max ( table4 [ i + 1 ] , table3 [ i + 1 ] - arr [ i ] )\n    return table4 [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def countNegative ( M , n , m ) :\n    count = 0\n    i = 0\n    j = m - 1\n    while j >= 0 and i < n :\n        if M [ i ] [ j ] < 0 :\n            count += ( j + 1 )\n            i += 1\n        else :\n            j -= 1\n    return count", "target_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  int i = 0 ;\n  int j = m - 1 ;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1 ;\n      i += 1 ;\n    }\n    else j -= 1 ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNegative ( M , n , m ) :\n    count = 0\n    i = 0\n    j = m - 1\n    while j >= 0 and i < n :\n        if M [ i ] [ j ] < 0 :\n            count += ( j + 1 )\n            i += 1\n        else :\n            j -= 1\n    return count", "target_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  int i = 0;\n  int j = m - 1;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1;\n      i += 1;\n    }\n    else j -= 1;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  int i = 0 ;\n  int j = m - 1 ;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1 ;\n      i += 1 ;\n    }\n    else j -= 1 ;\n  }\n  return count ;\n}", "target_program": " def countNegative ( M , n , m ) :\n    count = 0\n    i = 0\n    j = m - 1\n    while j >= 0 and i < n :\n        if M [ i ] [ j ] < 0 :\n            count += ( j + 1 )\n            i += 1\n        else :\n            j -= 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  int i = 0 ;\n  int j = m - 1 ;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1 ;\n      i += 1 ;\n    }\n    else j -= 1 ;\n  }\n  return count ;\n}", "target_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  int i = 0;\n  int j = m - 1;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1;\n      i += 1;\n    }\n    else j -= 1;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  int i = 0;\n  int j = m - 1;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1;\n      i += 1;\n    }\n    else j -= 1;\n  }\n  return count;\n}", "target_program": " static int countNegative ( int M [ ] [ ] , int n , int m ) {\n  int count = 0 ;\n  int i = 0 ;\n  int j = m - 1 ;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1 ;\n      i += 1 ;\n    }\n    else j -= 1 ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countNegative ( int M [ ] [ 4 ], int n, int m ) {\n  int count = 0;\n  int i = 0;\n  int j = m - 1;\n  while ( j >= 0 && i < n ) {\n    if ( M [ i ] [ j ] < 0 ) {\n      count += j + 1;\n      i += 1;\n    }\n    else j -= 1;\n  }\n  return count;\n}", "target_program": " def countNegative ( M , n , m ) :\n    count = 0\n    i = 0\n    j = m - 1\n    while j >= 0 and i < n :\n        if M [ i ] [ j ] < 0 :\n            count += ( j + 1 )\n            i += 1\n        else :\n            j -= 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1", "target_program": " static void sort012 ( int a [ ] , int arr_size ) {\n  int lo = 0 ;\n  int hi = arr_size - 1 ;\n  int mid = 0 , temp = 0 ;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : {\n        temp = a [ lo ] ;\n        a [ lo ] = a [ mid ] ;\n        a [ mid ] = temp ;\n        lo ++ ;\n        mid ++ ;\n        break ;\n      }\n      case 1 : mid ++ ;\n      break ;\n      case 2 : {\n        temp = a [ mid ] ;\n        a [ mid ] = a [ hi ] ;\n        a [ hi ] = temp ;\n        hi -- ;\n        break ;\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1", "target_program": " void sort012 ( int a [ ], int arr_size ) {\n  int lo = 0;\n  int hi = arr_size - 1;\n  int mid = 0;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : swap ( a [ lo ++ ], a [ mid ++ ] );\n      break;\n      case 1 : mid ++;\n      break;\n      case 2 : swap ( a [ mid ], a [ hi -- ] );\n      break;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void sort012 ( int a [ ] , int arr_size ) {\n  int lo = 0 ;\n  int hi = arr_size - 1 ;\n  int mid = 0 , temp = 0 ;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : {\n        temp = a [ lo ] ;\n        a [ lo ] = a [ mid ] ;\n        a [ mid ] = temp ;\n        lo ++ ;\n        mid ++ ;\n        break ;\n      }\n      case 1 : mid ++ ;\n      break ;\n      case 2 : {\n        temp = a [ mid ] ;\n        a [ mid ] = a [ hi ] ;\n        a [ hi ] = temp ;\n        hi -- ;\n        break ;\n      }\n    }\n  }\n}", "target_program": " def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1"}
{"source": "java", "target": "cpp", "source_program": " static void sort012 ( int a [ ] , int arr_size ) {\n  int lo = 0 ;\n  int hi = arr_size - 1 ;\n  int mid = 0 , temp = 0 ;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : {\n        temp = a [ lo ] ;\n        a [ lo ] = a [ mid ] ;\n        a [ mid ] = temp ;\n        lo ++ ;\n        mid ++ ;\n        break ;\n      }\n      case 1 : mid ++ ;\n      break ;\n      case 2 : {\n        temp = a [ mid ] ;\n        a [ mid ] = a [ hi ] ;\n        a [ hi ] = temp ;\n        hi -- ;\n        break ;\n      }\n    }\n  }\n}", "target_program": " void sort012 ( int a [ ], int arr_size ) {\n  int lo = 0;\n  int hi = arr_size - 1;\n  int mid = 0;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : swap ( a [ lo ++ ], a [ mid ++ ] );\n      break;\n      case 1 : mid ++;\n      break;\n      case 2 : swap ( a [ mid ], a [ hi -- ] );\n      break;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void sort012 ( int a [ ], int arr_size ) {\n  int lo = 0;\n  int hi = arr_size - 1;\n  int mid = 0;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : swap ( a [ lo ++ ], a [ mid ++ ] );\n      break;\n      case 1 : mid ++;\n      break;\n      case 2 : swap ( a [ mid ], a [ hi -- ] );\n      break;\n    }\n  }\n}", "target_program": " static void sort012 ( int a [ ] , int arr_size ) {\n  int lo = 0 ;\n  int hi = arr_size - 1 ;\n  int mid = 0 , temp = 0 ;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : {\n        temp = a [ lo ] ;\n        a [ lo ] = a [ mid ] ;\n        a [ mid ] = temp ;\n        lo ++ ;\n        mid ++ ;\n        break ;\n      }\n      case 1 : mid ++ ;\n      break ;\n      case 2 : {\n        temp = a [ mid ] ;\n        a [ mid ] = a [ hi ] ;\n        a [ hi ] = temp ;\n        hi -- ;\n        break ;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void sort012 ( int a [ ], int arr_size ) {\n  int lo = 0;\n  int hi = arr_size - 1;\n  int mid = 0;\n  while ( mid <= hi ) {\n    switch ( a [ mid ] ) {\n      case 0 : swap ( a [ lo ++ ], a [ mid ++ ] );\n      break;\n      case 1 : mid ++;\n      break;\n      case 2 : swap ( a [ mid ], a [ hi -- ] );\n      break;\n    }\n  }\n}", "target_program": " def sort012 ( a , arr_size ) :\n    lo = 0\n    hi = arr_size - 1\n    mid = 0\n    while mid <= hi :\n        if a [ mid ] == 0 :\n            a [ lo ] , a [ mid ] = a [ mid ] , a [ lo ]\n            lo = lo + 1\n            mid = mid + 1\n        elif a [ mid ] == 1 :\n            mid = mid + 1\n        else :\n            a [ mid ] , a [ hi ] = a [ hi ] , a [ mid ]\n            hi = hi - 1"}
{"source": "python", "target": "java", "source_program": " def evenFib ( n ) :\n    if ( n < 1 ) :\n        return n\n    if ( n == 1 ) :\n        return 2\n    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )", "target_program": " static long evenFib ( int n ) {\n  if ( n < 1 ) return n ;\n  if ( n == 1 ) return 2 ;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def evenFib ( n ) :\n    if ( n < 1 ) :\n        return n\n    if ( n == 1 ) :\n        return 2\n    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )", "target_program": " long int evenFib ( int n ) {\n  if ( n < 1 ) return n;\n  if ( n == 1 ) return 2;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static long evenFib ( int n ) {\n  if ( n < 1 ) return n ;\n  if ( n == 1 ) return 2 ;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;\n}", "target_program": " def evenFib ( n ) :\n    if ( n < 1 ) :\n        return n\n    if ( n == 1 ) :\n        return 2\n    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static long evenFib ( int n ) {\n  if ( n < 1 ) return n ;\n  if ( n == 1 ) return 2 ;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;\n}", "target_program": " long int evenFib ( int n ) {\n  if ( n < 1 ) return n;\n  if ( n == 1 ) return 2;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " long int evenFib ( int n ) {\n  if ( n < 1 ) return n;\n  if ( n == 1 ) return 2;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) );\n}", "target_program": " static long evenFib ( int n ) {\n  if ( n < 1 ) return n ;\n  if ( n == 1 ) return 2 ;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long int evenFib ( int n ) {\n  if ( n < 1 ) return n;\n  if ( n == 1 ) return 2;\n  return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) );\n}", "target_program": " def evenFib ( n ) :\n    if ( n < 1 ) :\n        return n\n    if ( n == 1 ) :\n        return 2\n    return ( ( 4 * evenFib ( n - 1 ) ) + evenFib ( n - 2 ) )"}
{"source": "python", "target": "java", "source_program": " def printNGE ( arr ) :\n    for i in range ( 0 , len ( arr ) , 1 ) :\n        next = - 1\n        for j in range ( i + 1 , len ( arr ) , 1 ) :\n            if arr [ i ] < arr [ j ] :\n                next = arr [ j ]\n                break\n        print ( str ( arr [ i ] ) + \" -- \" + str ( next ) )", "target_program": " static void printNGE ( int arr [ ] , int n ) {\n  int next , i , j ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    next = - 1 ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ] ;\n        break ;\n      }\n    }\n    System . out . println ( arr [ i ] + \" -- \" + next ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printNGE ( arr ) :\n    for i in range ( 0 , len ( arr ) , 1 ) :\n        next = - 1\n        for j in range ( i + 1 , len ( arr ) , 1 ) :\n            if arr [ i ] < arr [ j ] :\n                next = arr [ j ]\n                break\n        print ( str ( arr [ i ] ) + \" -- \" + str ( next ) )", "target_program": " void printNGE ( int arr [ ], int n ) {\n  int next, i, j;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    next = - 1;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ];\n        break;\n      }\n    }\n    cout << arr [ i ] << \" -- \" << next << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printNGE ( int arr [ ] , int n ) {\n  int next , i , j ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    next = - 1 ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ] ;\n        break ;\n      }\n    }\n    System . out . println ( arr [ i ] + \" -- \" + next ) ;\n  }\n}", "target_program": " def printNGE ( arr ) :\n    for i in range ( 0 , len ( arr ) , 1 ) :\n        next = - 1\n        for j in range ( i + 1 , len ( arr ) , 1 ) :\n            if arr [ i ] < arr [ j ] :\n                next = arr [ j ]\n                break\n        print ( str ( arr [ i ] ) + \" -- \" + str ( next ) )"}
{"source": "java", "target": "cpp", "source_program": " static void printNGE ( int arr [ ] , int n ) {\n  int next , i , j ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    next = - 1 ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ] ;\n        break ;\n      }\n    }\n    System . out . println ( arr [ i ] + \" -- \" + next ) ;\n  }\n}", "target_program": " void printNGE ( int arr [ ], int n ) {\n  int next, i, j;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    next = - 1;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ];\n        break;\n      }\n    }\n    cout << arr [ i ] << \" -- \" << next << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printNGE ( int arr [ ], int n ) {\n  int next, i, j;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    next = - 1;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ];\n        break;\n      }\n    }\n    cout << arr [ i ] << \" -- \" << next << endl;\n  }\n}", "target_program": " static void printNGE ( int arr [ ] , int n ) {\n  int next , i , j ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    next = - 1 ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ] ;\n        break ;\n      }\n    }\n    System . out . println ( arr [ i ] + \" -- \" + next ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printNGE ( int arr [ ], int n ) {\n  int next, i, j;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    next = - 1;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ i ] < arr [ j ] ) {\n        next = arr [ j ];\n        break;\n      }\n    }\n    cout << arr [ i ] << \" -- \" << next << endl;\n  }\n}", "target_program": " def printNGE ( arr ) :\n    for i in range ( 0 , len ( arr ) , 1 ) :\n        next = - 1\n        for j in range ( i + 1 , len ( arr ) , 1 ) :\n            if arr [ i ] < arr [ j ] :\n                next = arr [ j ]\n                break\n        print ( str ( arr [ i ] ) + \" -- \" + str ( next ) )"}
{"source": "python", "target": "java", "source_program": " def fitOrNotFit ( R , r , x , y , rad ) :\n    val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) )\n    if ( val + rad <= R and val - rad >= R - r ) :\n        print ( \"Fits\\n\" )\n    else :\n        print ( \"Doesn't Fit\" )", "target_program": " static void fitOrNotFit ( int R , int r , int x , int y , int rad ) {\n  double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ;\n  if ( val + rad <= R && val - rad >= R - r ) System . out . println ( \"Fits\" ) ;\n  else System . out . println ( \"Doesn't Fit\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def fitOrNotFit ( R , r , x , y , rad ) :\n    val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) )\n    if ( val + rad <= R and val - rad >= R - r ) :\n        print ( \"Fits\\n\" )\n    else :\n        print ( \"Doesn't Fit\" )", "target_program": " void fitOrNotFit ( int R, int r, int x, int y, int rad ) {\n  double val = sqrt ( pow ( x, 2 ) + pow ( y, 2 ) );\n  if ( val + rad <= R && val - rad >= R - r ) cout << \"Fits\\n\";\n  else cout << \"Doesn't Fit\\n\";\n}"}
{"source": "java", "target": "python", "source_program": " static void fitOrNotFit ( int R , int r , int x , int y , int rad ) {\n  double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ;\n  if ( val + rad <= R && val - rad >= R - r ) System . out . println ( \"Fits\" ) ;\n  else System . out . println ( \"Doesn't Fit\" ) ;\n}", "target_program": " def fitOrNotFit ( R , r , x , y , rad ) :\n    val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) )\n    if ( val + rad <= R and val - rad >= R - r ) :\n        print ( \"Fits\\n\" )\n    else :\n        print ( \"Doesn't Fit\" )"}
{"source": "java", "target": "cpp", "source_program": " static void fitOrNotFit ( int R , int r , int x , int y , int rad ) {\n  double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ;\n  if ( val + rad <= R && val - rad >= R - r ) System . out . println ( \"Fits\" ) ;\n  else System . out . println ( \"Doesn't Fit\" ) ;\n}", "target_program": " void fitOrNotFit ( int R, int r, int x, int y, int rad ) {\n  double val = sqrt ( pow ( x, 2 ) + pow ( y, 2 ) );\n  if ( val + rad <= R && val - rad >= R - r ) cout << \"Fits\\n\";\n  else cout << \"Doesn't Fit\\n\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void fitOrNotFit ( int R, int r, int x, int y, int rad ) {\n  double val = sqrt ( pow ( x, 2 ) + pow ( y, 2 ) );\n  if ( val + rad <= R && val - rad >= R - r ) cout << \"Fits\\n\";\n  else cout << \"Doesn't Fit\\n\";\n}", "target_program": " static void fitOrNotFit ( int R , int r , int x , int y , int rad ) {\n  double val = Math . sqrt ( Math . pow ( x , 2 ) + Math . pow ( y , 2 ) ) ;\n  if ( val + rad <= R && val - rad >= R - r ) System . out . println ( \"Fits\" ) ;\n  else System . out . println ( \"Doesn't Fit\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void fitOrNotFit ( int R, int r, int x, int y, int rad ) {\n  double val = sqrt ( pow ( x, 2 ) + pow ( y, 2 ) );\n  if ( val + rad <= R && val - rad >= R - r ) cout << \"Fits\\n\";\n  else cout << \"Doesn't Fit\\n\";\n}", "target_program": " def fitOrNotFit ( R , r , x , y , rad ) :\n    val = math.sqrt ( math.pow ( x , 2 ) + math.pow ( y , 2 ) )\n    if ( val + rad <= R and val - rad >= R - r ) :\n        print ( \"Fits\\n\" )\n    else :\n        print ( \"Doesn't Fit\" )"}
{"source": "python", "target": "java", "source_program": " def gcdExtended ( a , b , x , y ) :\n    if a == 0 :\n        x = 0\n        y = 1\n        return b\n    x1 = 1\n    y1 = 1\n    gcd = gcdExtended ( b % a , a , x1 , y1 )\n    x = y1 - ( b / a ) * x1\n    y = x1\n    return gcd", "target_program": " public static int gcdExtended ( int a , int b , int x , int y ) {\n  if ( a == 0 ) {\n    x = 0 ;\n    y = 1 ;\n    return b ;\n  }\n  int x1 = 1 , y1 = 1 ;\n  int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;\n  x = y1 - ( b / a ) * x1 ;\n  y = x1 ;\n  return gcd ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def gcdExtended ( a , b , x , y ) :\n    if a == 0 :\n        x = 0\n        y = 1\n        return b\n    x1 = 1\n    y1 = 1\n    gcd = gcdExtended ( b % a , a , x1 , y1 )\n    x = y1 - ( b / a ) * x1\n    y = x1\n    return gcd", "target_program": " int gcdExtended ( int a, int b, int * x, int * y ) {\n  if ( a == 0 ) {\n    * x = 0;\n    * y = 1;\n    return b;\n  }\n  int x1, y1;\n  int gcd = gcdExtended ( b % a, a, & x1, & y1 );\n  * x = y1 - ( b / a ) * x1;\n  * y = x1;\n  return gcd;\n}"}
{"source": "java", "target": "python", "source_program": " public static int gcdExtended ( int a , int b , int x , int y ) {\n  if ( a == 0 ) {\n    x = 0 ;\n    y = 1 ;\n    return b ;\n  }\n  int x1 = 1 , y1 = 1 ;\n  int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;\n  x = y1 - ( b / a ) * x1 ;\n  y = x1 ;\n  return gcd ;\n}", "target_program": " def gcdExtended ( a , b , x , y ) :\n    if a == 0 :\n        x = 0\n        y = 1\n        return b\n    x1 = 1\n    y1 = 1\n    gcd = gcdExtended ( b % a , a , x1 , y1 )\n    x = y1 - ( b / a ) * x1\n    y = x1\n    return gcd"}
{"source": "java", "target": "cpp", "source_program": " public static int gcdExtended ( int a , int b , int x , int y ) {\n  if ( a == 0 ) {\n    x = 0 ;\n    y = 1 ;\n    return b ;\n  }\n  int x1 = 1 , y1 = 1 ;\n  int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;\n  x = y1 - ( b / a ) * x1 ;\n  y = x1 ;\n  return gcd ;\n}", "target_program": " int gcdExtended ( int a, int b, int * x, int * y ) {\n  if ( a == 0 ) {\n    * x = 0;\n    * y = 1;\n    return b;\n  }\n  int x1, y1;\n  int gcd = gcdExtended ( b % a, a, & x1, & y1 );\n  * x = y1 - ( b / a ) * x1;\n  * y = x1;\n  return gcd;\n}"}
{"source": "cpp", "target": "java", "source_program": " int gcdExtended ( int a, int b, int * x, int * y ) {\n  if ( a == 0 ) {\n    * x = 0;\n    * y = 1;\n    return b;\n  }\n  int x1, y1;\n  int gcd = gcdExtended ( b % a, a, & x1, & y1 );\n  * x = y1 - ( b / a ) * x1;\n  * y = x1;\n  return gcd;\n}", "target_program": " public static int gcdExtended ( int a , int b , int x , int y ) {\n  if ( a == 0 ) {\n    x = 0 ;\n    y = 1 ;\n    return b ;\n  }\n  int x1 = 1 , y1 = 1 ;\n  int gcd = gcdExtended ( b % a , a , x1 , y1 ) ;\n  x = y1 - ( b / a ) * x1 ;\n  y = x1 ;\n  return gcd ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int gcdExtended ( int a, int b, int * x, int * y ) {\n  if ( a == 0 ) {\n    * x = 0;\n    * y = 1;\n    return b;\n  }\n  int x1, y1;\n  int gcd = gcdExtended ( b % a, a, & x1, & y1 );\n  * x = y1 - ( b / a ) * x1;\n  * y = x1;\n  return gcd;\n}", "target_program": " def gcdExtended ( a , b , x , y ) :\n    if a == 0 :\n        x = 0\n        y = 1\n        return b\n    x1 = 1\n    y1 = 1\n    gcd = gcdExtended ( b % a , a , x1 , y1 )\n    x = y1 - ( b / a ) * x1\n    y = x1\n    return gcd"}
{"source": "python", "target": "java", "source_program": " def findSmallestRange ( arr , n , k ) :\n    i , minval , maxval , minrange , minel , maxel , flag , minind = 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0\n    for i in range ( k + 1 ) :\n        ptr [ i ] = 0\n    minrange = 10 ** 9\n    while ( 1 ) :\n        minind = - 1\n        minval = 10 ** 9\n        maxval = - 10 ** 9\n        flag = 0\n        for i in range ( k ) :\n            if ( ptr [ i ] == n ) :\n                flag = 1\n                break\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] < minval ) :\n                minind = i\n                minval = arr [ i ] [ ptr [ i ] ]\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] > maxval ) :\n                maxval = arr [ i ] [ ptr [ i ] ]\n        if ( flag ) :\n            break\n        ptr [ minind ] += 1\n        if ( ( maxval - minval ) < minrange ) :\n            minel = minval\n            maxel = maxval\n            minrange = maxel - minel\n    print ( \"The smallest range is [\" , minel , maxel , \"]\" )", "target_program": " static void findSmallestRange ( int arr [ ] [ ] , int n , int k ) {\n  int i , minval , maxval , minrange , minel = 0 , maxel = 0 , flag , minind ;\n  for ( i = 0 ;\n  i <= k ;\n  i ++ ) {\n    ptr [ i ] = 0 ;\n  }\n  minrange = Integer . MAX_VALUE ;\n  while ( true ) {\n    minind = - 1 ;\n    minval = Integer . MAX_VALUE ;\n    maxval = Integer . MIN_VALUE ;\n    flag = 0 ;\n    for ( i = 0 ;\n    i < k ;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1 ;\n        break ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i ;\n        minval = arr [ i ] [ ptr [ i ] ] ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ] ;\n      }\n    }\n    if ( flag == 1 ) {\n      break ;\n    }\n    ptr [ minind ] ++ ;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval ;\n      maxel = maxval ;\n      minrange = maxel - minel ;\n    }\n  }\n  System . out . printf ( \"The smallest range is [%d , %d]\\n\" , minel , maxel ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSmallestRange ( arr , n , k ) :\n    i , minval , maxval , minrange , minel , maxel , flag , minind = 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0\n    for i in range ( k + 1 ) :\n        ptr [ i ] = 0\n    minrange = 10 ** 9\n    while ( 1 ) :\n        minind = - 1\n        minval = 10 ** 9\n        maxval = - 10 ** 9\n        flag = 0\n        for i in range ( k ) :\n            if ( ptr [ i ] == n ) :\n                flag = 1\n                break\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] < minval ) :\n                minind = i\n                minval = arr [ i ] [ ptr [ i ] ]\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] > maxval ) :\n                maxval = arr [ i ] [ ptr [ i ] ]\n        if ( flag ) :\n            break\n        ptr [ minind ] += 1\n        if ( ( maxval - minval ) < minrange ) :\n            minel = minval\n            maxel = maxval\n            minrange = maxel - minel\n    print ( \"The smallest range is [\" , minel , maxel , \"]\" )", "target_program": " void findSmallestRange ( int arr [ ] [ N ], int n, int k ) {\n  int i, minval, maxval, minrange, minel, maxel, flag, minind;\n  for ( i = 0;\n  i <= k;\n  i ++ ) ptr [ i ] = 0;\n  minrange = INT_MAX;\n  while ( 1 ) {\n    minind = - 1;\n    minval = INT_MAX;\n    maxval = INT_MIN;\n    flag = 0;\n    for ( i = 0;\n    i < k;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1;\n        break;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i;\n        minval = arr [ i ] [ ptr [ i ] ];\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ];\n      }\n    }\n    if ( flag ) break;\n    ptr [ minind ] ++;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval;\n      maxel = maxval;\n      minrange = maxel - minel;\n    }\n  }\n  printf ( \"The smallest range is [%d , %d]\\n\", minel, maxel );\n}"}
{"source": "java", "target": "python", "source_program": " static void findSmallestRange ( int arr [ ] [ ] , int n , int k ) {\n  int i , minval , maxval , minrange , minel = 0 , maxel = 0 , flag , minind ;\n  for ( i = 0 ;\n  i <= k ;\n  i ++ ) {\n    ptr [ i ] = 0 ;\n  }\n  minrange = Integer . MAX_VALUE ;\n  while ( true ) {\n    minind = - 1 ;\n    minval = Integer . MAX_VALUE ;\n    maxval = Integer . MIN_VALUE ;\n    flag = 0 ;\n    for ( i = 0 ;\n    i < k ;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1 ;\n        break ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i ;\n        minval = arr [ i ] [ ptr [ i ] ] ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ] ;\n      }\n    }\n    if ( flag == 1 ) {\n      break ;\n    }\n    ptr [ minind ] ++ ;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval ;\n      maxel = maxval ;\n      minrange = maxel - minel ;\n    }\n  }\n  System . out . printf ( \"The smallest range is [%d , %d]\\n\" , minel , maxel ) ;\n}", "target_program": " def findSmallestRange ( arr , n , k ) :\n    i , minval , maxval , minrange , minel , maxel , flag , minind = 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0\n    for i in range ( k + 1 ) :\n        ptr [ i ] = 0\n    minrange = 10 ** 9\n    while ( 1 ) :\n        minind = - 1\n        minval = 10 ** 9\n        maxval = - 10 ** 9\n        flag = 0\n        for i in range ( k ) :\n            if ( ptr [ i ] == n ) :\n                flag = 1\n                break\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] < minval ) :\n                minind = i\n                minval = arr [ i ] [ ptr [ i ] ]\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] > maxval ) :\n                maxval = arr [ i ] [ ptr [ i ] ]\n        if ( flag ) :\n            break\n        ptr [ minind ] += 1\n        if ( ( maxval - minval ) < minrange ) :\n            minel = minval\n            maxel = maxval\n            minrange = maxel - minel\n    print ( \"The smallest range is [\" , minel , maxel , \"]\" )"}
{"source": "java", "target": "cpp", "source_program": " static void findSmallestRange ( int arr [ ] [ ] , int n , int k ) {\n  int i , minval , maxval , minrange , minel = 0 , maxel = 0 , flag , minind ;\n  for ( i = 0 ;\n  i <= k ;\n  i ++ ) {\n    ptr [ i ] = 0 ;\n  }\n  minrange = Integer . MAX_VALUE ;\n  while ( true ) {\n    minind = - 1 ;\n    minval = Integer . MAX_VALUE ;\n    maxval = Integer . MIN_VALUE ;\n    flag = 0 ;\n    for ( i = 0 ;\n    i < k ;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1 ;\n        break ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i ;\n        minval = arr [ i ] [ ptr [ i ] ] ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ] ;\n      }\n    }\n    if ( flag == 1 ) {\n      break ;\n    }\n    ptr [ minind ] ++ ;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval ;\n      maxel = maxval ;\n      minrange = maxel - minel ;\n    }\n  }\n  System . out . printf ( \"The smallest range is [%d , %d]\\n\" , minel , maxel ) ;\n}", "target_program": " void findSmallestRange ( int arr [ ] [ N ], int n, int k ) {\n  int i, minval, maxval, minrange, minel, maxel, flag, minind;\n  for ( i = 0;\n  i <= k;\n  i ++ ) ptr [ i ] = 0;\n  minrange = INT_MAX;\n  while ( 1 ) {\n    minind = - 1;\n    minval = INT_MAX;\n    maxval = INT_MIN;\n    flag = 0;\n    for ( i = 0;\n    i < k;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1;\n        break;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i;\n        minval = arr [ i ] [ ptr [ i ] ];\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ];\n      }\n    }\n    if ( flag ) break;\n    ptr [ minind ] ++;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval;\n      maxel = maxval;\n      minrange = maxel - minel;\n    }\n  }\n  printf ( \"The smallest range is [%d , %d]\\n\", minel, maxel );\n}"}
{"source": "cpp", "target": "java", "source_program": " void findSmallestRange ( int arr [ ] [ N ], int n, int k ) {\n  int i, minval, maxval, minrange, minel, maxel, flag, minind;\n  for ( i = 0;\n  i <= k;\n  i ++ ) ptr [ i ] = 0;\n  minrange = INT_MAX;\n  while ( 1 ) {\n    minind = - 1;\n    minval = INT_MAX;\n    maxval = INT_MIN;\n    flag = 0;\n    for ( i = 0;\n    i < k;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1;\n        break;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i;\n        minval = arr [ i ] [ ptr [ i ] ];\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ];\n      }\n    }\n    if ( flag ) break;\n    ptr [ minind ] ++;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval;\n      maxel = maxval;\n      minrange = maxel - minel;\n    }\n  }\n  printf ( \"The smallest range is [%d , %d]\\n\", minel, maxel );\n}", "target_program": " static void findSmallestRange ( int arr [ ] [ ] , int n , int k ) {\n  int i , minval , maxval , minrange , minel = 0 , maxel = 0 , flag , minind ;\n  for ( i = 0 ;\n  i <= k ;\n  i ++ ) {\n    ptr [ i ] = 0 ;\n  }\n  minrange = Integer . MAX_VALUE ;\n  while ( true ) {\n    minind = - 1 ;\n    minval = Integer . MAX_VALUE ;\n    maxval = Integer . MIN_VALUE ;\n    flag = 0 ;\n    for ( i = 0 ;\n    i < k ;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1 ;\n        break ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i ;\n        minval = arr [ i ] [ ptr [ i ] ] ;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ] ;\n      }\n    }\n    if ( flag == 1 ) {\n      break ;\n    }\n    ptr [ minind ] ++ ;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval ;\n      maxel = maxval ;\n      minrange = maxel - minel ;\n    }\n  }\n  System . out . printf ( \"The smallest range is [%d , %d]\\n\" , minel , maxel ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findSmallestRange ( int arr [ ] [ N ], int n, int k ) {\n  int i, minval, maxval, minrange, minel, maxel, flag, minind;\n  for ( i = 0;\n  i <= k;\n  i ++ ) ptr [ i ] = 0;\n  minrange = INT_MAX;\n  while ( 1 ) {\n    minind = - 1;\n    minval = INT_MAX;\n    maxval = INT_MIN;\n    flag = 0;\n    for ( i = 0;\n    i < k;\n    i ++ ) {\n      if ( ptr [ i ] == n ) {\n        flag = 1;\n        break;\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] < minval ) {\n        minind = i;\n        minval = arr [ i ] [ ptr [ i ] ];\n      }\n      if ( ptr [ i ] < n && arr [ i ] [ ptr [ i ] ] > maxval ) {\n        maxval = arr [ i ] [ ptr [ i ] ];\n      }\n    }\n    if ( flag ) break;\n    ptr [ minind ] ++;\n    if ( ( maxval - minval ) < minrange ) {\n      minel = minval;\n      maxel = maxval;\n      minrange = maxel - minel;\n    }\n  }\n  printf ( \"The smallest range is [%d , %d]\\n\", minel, maxel );\n}", "target_program": " def findSmallestRange ( arr , n , k ) :\n    i , minval , maxval , minrange , minel , maxel , flag , minind = 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0\n    for i in range ( k + 1 ) :\n        ptr [ i ] = 0\n    minrange = 10 ** 9\n    while ( 1 ) :\n        minind = - 1\n        minval = 10 ** 9\n        maxval = - 10 ** 9\n        flag = 0\n        for i in range ( k ) :\n            if ( ptr [ i ] == n ) :\n                flag = 1\n                break\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] < minval ) :\n                minind = i\n                minval = arr [ i ] [ ptr [ i ] ]\n            if ( ptr [ i ] < n and arr [ i ] [ ptr [ i ] ] > maxval ) :\n                maxval = arr [ i ] [ ptr [ i ] ]\n        if ( flag ) :\n            break\n        ptr [ minind ] += 1\n        if ( ( maxval - minval ) < minrange ) :\n            minel = minval\n            maxel = maxval\n            minrange = maxel - minel\n    print ( \"The smallest range is [\" , minel , maxel , \"]\" )"}
{"source": "python", "target": "java", "source_program": " def minCost ( cost ) :\n    dist = [ 0 for i in range ( N ) ]\n    for i in range ( N ) :\n        dist [ i ] = INF\n    dist [ 0 ] = 0\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) :\n                dist [ j ] = dist [ i ] + cost [ i ] [ j ]\n    return dist [ N - 1 ]", "target_program": " static int minCost ( int cost [ ] [ ] ) {\n  int dist [ ] = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dist [ i ] = INF ;\n  dist [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ;\n  return dist [ N - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minCost ( cost ) :\n    dist = [ 0 for i in range ( N ) ]\n    for i in range ( N ) :\n        dist [ i ] = INF\n    dist [ 0 ] = 0\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) :\n                dist [ j ] = dist [ i ] + cost [ i ] [ j ]\n    return dist [ N - 1 ]", "target_program": " INT_MAX int minCost ( int cost [ ] [ N ] ) {\n  int dist [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dist [ i ] = INF;\n  dist [ 0 ] = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ];\n  return dist [ N - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minCost ( int cost [ ] [ ] ) {\n  int dist [ ] = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dist [ i ] = INF ;\n  dist [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ;\n  return dist [ N - 1 ] ;\n}", "target_program": " def minCost ( cost ) :\n    dist = [ 0 for i in range ( N ) ]\n    for i in range ( N ) :\n        dist [ i ] = INF\n    dist [ 0 ] = 0\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) :\n                dist [ j ] = dist [ i ] + cost [ i ] [ j ]\n    return dist [ N - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int minCost ( int cost [ ] [ ] ) {\n  int dist [ ] = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dist [ i ] = INF ;\n  dist [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ;\n  return dist [ N - 1 ] ;\n}", "target_program": " INT_MAX int minCost ( int cost [ ] [ N ] ) {\n  int dist [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dist [ i ] = INF;\n  dist [ 0 ] = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ];\n  return dist [ N - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " INT_MAX int minCost ( int cost [ ] [ N ] ) {\n  int dist [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dist [ i ] = INF;\n  dist [ 0 ] = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ];\n  return dist [ N - 1 ];\n}", "target_program": " static int minCost ( int cost [ ] [ ] ) {\n  int dist [ ] = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dist [ i ] = INF ;\n  dist [ 0 ] = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ] ;\n  return dist [ N - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " INT_MAX int minCost ( int cost [ ] [ N ] ) {\n  int dist [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dist [ i ] = INF;\n  dist [ 0 ] = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) dist [ j ] = dist [ i ] + cost [ i ] [ j ];\n  return dist [ N - 1 ];\n}", "target_program": " def minCost ( cost ) :\n    dist = [ 0 for i in range ( N ) ]\n    for i in range ( N ) :\n        dist [ i ] = INF\n    dist [ 0 ] = 0\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            if ( dist [ j ] > dist [ i ] + cost [ i ] [ j ] ) :\n                dist [ j ] = dist [ i ] + cost [ i ] [ j ]\n    return dist [ N - 1 ]"}
{"source": "python", "target": "java", "source_program": " def middleOfThree ( a , b , c ) :\n    if a > b :\n        if ( b > c ) :\n            return b\n        elif ( a > c ) :\n            return c\n        else :\n            return a\n    else :\n        if ( a > c ) :\n            return a\n        elif ( b > c ) :\n            return c\n        else :\n            return b", "target_program": " public static int middleOfThree ( int a , int b , int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b ;\n    else if ( a > c ) return c ;\n    else return a ;\n  }\n  else {\n    if ( a > c ) return a ;\n    else if ( b > c ) return c ;\n    else return b ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def middleOfThree ( a , b , c ) :\n    if a > b :\n        if ( b > c ) :\n            return b\n        elif ( a > c ) :\n            return c\n        else :\n            return a\n    else :\n        if ( a > c ) :\n            return a\n        elif ( b > c ) :\n            return c\n        else :\n            return b", "target_program": " int middleOfThree ( int a, int b, int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b;\n    else if ( a > c ) return c;\n    else return a;\n  }\n  else {\n    if ( a > c ) return a;\n    else if ( b > c ) return c;\n    else return b;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static int middleOfThree ( int a , int b , int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b ;\n    else if ( a > c ) return c ;\n    else return a ;\n  }\n  else {\n    if ( a > c ) return a ;\n    else if ( b > c ) return c ;\n    else return b ;\n  }\n}", "target_program": " def middleOfThree ( a , b , c ) :\n    if a > b :\n        if ( b > c ) :\n            return b\n        elif ( a > c ) :\n            return c\n        else :\n            return a\n    else :\n        if ( a > c ) :\n            return a\n        elif ( b > c ) :\n            return c\n        else :\n            return b"}
{"source": "java", "target": "cpp", "source_program": " public static int middleOfThree ( int a , int b , int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b ;\n    else if ( a > c ) return c ;\n    else return a ;\n  }\n  else {\n    if ( a > c ) return a ;\n    else if ( b > c ) return c ;\n    else return b ;\n  }\n}", "target_program": " int middleOfThree ( int a, int b, int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b;\n    else if ( a > c ) return c;\n    else return a;\n  }\n  else {\n    if ( a > c ) return a;\n    else if ( b > c ) return c;\n    else return b;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int middleOfThree ( int a, int b, int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b;\n    else if ( a > c ) return c;\n    else return a;\n  }\n  else {\n    if ( a > c ) return a;\n    else if ( b > c ) return c;\n    else return b;\n  }\n}", "target_program": " public static int middleOfThree ( int a , int b , int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b ;\n    else if ( a > c ) return c ;\n    else return a ;\n  }\n  else {\n    if ( a > c ) return a ;\n    else if ( b > c ) return c ;\n    else return b ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int middleOfThree ( int a, int b, int c ) {\n  if ( a > b ) {\n    if ( b > c ) return b;\n    else if ( a > c ) return c;\n    else return a;\n  }\n  else {\n    if ( a > c ) return a;\n    else if ( b > c ) return c;\n    else return b;\n  }\n}", "target_program": " def middleOfThree ( a , b , c ) :\n    if a > b :\n        if ( b > c ) :\n            return b\n        elif ( a > c ) :\n            return c\n        else :\n            return a\n    else :\n        if ( a > c ) :\n            return a\n        elif ( b > c ) :\n            return c\n        else :\n            return b"}
{"source": "python", "target": "java", "source_program": " def check ( st ) :\n    n = len ( st )\n    oddDigSum = 0\n    evenDigSum = 0\n    for i in range ( 0 , n ) :\n        if ( i % 2 == 0 ) :\n            oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )\n        else :\n            evenDigSum = evenDigSum + ( ( int ) ( st [ i ] ) )\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "target_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int oddDigSum = 0 , evenDigSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str . charAt ( i ) - '0' ) ;\n    else evenDigSum += ( str . charAt ( i ) - '0' ) ;\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check ( st ) :\n    n = len ( st )\n    oddDigSum = 0\n    evenDigSum = 0\n    for i in range ( 0 , n ) :\n        if ( i % 2 == 0 ) :\n            oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )\n        else :\n            evenDigSum = evenDigSum + ( ( int ) ( st [ i ] ) )\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )", "target_program": " int check ( string str ) {\n  int n = str . length ( );\n  int oddDigSum = 0, evenDigSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str [ i ] - '0' );\n    else evenDigSum += ( str [ i ] - '0' );\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int oddDigSum = 0 , evenDigSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str . charAt ( i ) - '0' ) ;\n    else evenDigSum += ( str . charAt ( i ) - '0' ) ;\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;\n}", "target_program": " def check ( st ) :\n    n = len ( st )\n    oddDigSum = 0\n    evenDigSum = 0\n    for i in range ( 0 , n ) :\n        if ( i % 2 == 0 ) :\n            oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )\n        else :\n            evenDigSum = evenDigSum + ( ( int ) ( st [ i ] ) )\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int oddDigSum = 0 , evenDigSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str . charAt ( i ) - '0' ) ;\n    else evenDigSum += ( str . charAt ( i ) - '0' ) ;\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;\n}", "target_program": " int check ( string str ) {\n  int n = str . length ( );\n  int oddDigSum = 0, evenDigSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str [ i ] - '0' );\n    else evenDigSum += ( str [ i ] - '0' );\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int check ( string str ) {\n  int n = str . length ( );\n  int oddDigSum = 0, evenDigSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str [ i ] - '0' );\n    else evenDigSum += ( str [ i ] - '0' );\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 );\n}", "target_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int oddDigSum = 0 , evenDigSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str . charAt ( i ) - '0' ) ;\n    else evenDigSum += ( str . charAt ( i ) - '0' ) ;\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int check ( string str ) {\n  int n = str . length ( );\n  int oddDigSum = 0, evenDigSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) oddDigSum += ( str [ i ] - '0' );\n    else evenDigSum += ( str [ i ] - '0' );\n  }\n  return ( ( oddDigSum - evenDigSum ) % 11 == 0 );\n}", "target_program": " def check ( st ) :\n    n = len ( st )\n    oddDigSum = 0\n    evenDigSum = 0\n    for i in range ( 0 , n ) :\n        if ( i % 2 == 0 ) :\n            oddDigSum = oddDigSum + ( ( int ) ( st [ i ] ) )\n        else :\n            evenDigSum = evenDigSum + ( ( int ) ( st [ i ] ) )\n    return ( ( oddDigSum - evenDigSum ) % 11 == 0 )"}
{"source": "python", "target": "java", "source_program": " def getModulo ( n , d ) :\n    return ( n & ( d - 1 ) )", "target_program": " static int getModulo ( int n , int d ) {\n  return ( n & ( d - 1 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getModulo ( n , d ) :\n    return ( n & ( d - 1 ) )", "target_program": " unsigned int getModulo ( unsigned int n, unsigned int d ) {\n  return ( n & ( d - 1 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int getModulo ( int n , int d ) {\n  return ( n & ( d - 1 ) ) ;\n}", "target_program": " def getModulo ( n , d ) :\n    return ( n & ( d - 1 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int getModulo ( int n , int d ) {\n  return ( n & ( d - 1 ) ) ;\n}", "target_program": " unsigned int getModulo ( unsigned int n, unsigned int d ) {\n  return ( n & ( d - 1 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int getModulo ( unsigned int n, unsigned int d ) {\n  return ( n & ( d - 1 ) );\n}", "target_program": " static int getModulo ( int n , int d ) {\n  return ( n & ( d - 1 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int getModulo ( unsigned int n, unsigned int d ) {\n  return ( n & ( d - 1 ) );\n}", "target_program": " def getModulo ( n , d ) :\n    return ( n & ( d - 1 ) )"}
{"source": "python", "target": "java", "source_program": " def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( k + 1 ) :\n            dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n            dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n            if j >= 1 :\n                dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "target_program": " static int countStrings ( int n , int k ) {\n  int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ;\n  dp [ 1 ] [ 0 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i && j < k + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ;\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;\n      if ( j - 1 >= 0 ) {\n        dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ;\n      }\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( k + 1 ) :\n            dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n            dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n            if j >= 1 :\n                dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]", "target_program": " int countStrings ( int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ] [ 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 1 ] [ 0 ] [ 0 ] = 1;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ];\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ];\n      if ( j - 1 >= 0 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ];\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countStrings ( int n , int k ) {\n  int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ;\n  dp [ 1 ] [ 0 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i && j < k + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ;\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;\n      if ( j - 1 >= 0 ) {\n        dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ;\n      }\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;\n}", "target_program": " def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( k + 1 ) :\n            dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n            dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n            if j >= 1 :\n                dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int countStrings ( int n , int k ) {\n  int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ;\n  dp [ 1 ] [ 0 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i && j < k + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ;\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;\n      if ( j - 1 >= 0 ) {\n        dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ;\n      }\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;\n}", "target_program": " int countStrings ( int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ] [ 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 1 ] [ 0 ] [ 0 ] = 1;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ];\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ];\n      if ( j - 1 >= 0 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ];\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countStrings ( int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ] [ 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 1 ] [ 0 ] [ 0 ] = 1;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ];\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ];\n      if ( j - 1 >= 0 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ];\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ];\n}", "target_program": " static int countStrings ( int n , int k ) {\n  int dp [ ] [ ] [ ] = new int [ n + 1 ] [ k + 1 ] [ 2 ] ;\n  dp [ 1 ] [ 0 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i && j < k + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] ;\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ] ;\n      if ( j - 1 >= 0 ) {\n        dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ] ;\n      }\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countStrings ( int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ] [ 2 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 1 ] [ 0 ] [ 0 ] = 1;\n  dp [ 1 ] [ 0 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      dp [ i ] [ j ] [ 0 ] = dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ];\n      dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ];\n      if ( j - 1 >= 0 ) dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ];\n    }\n  }\n  return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ];\n}", "target_program": " def countStrings ( n , k ) :\n    dp = [ [ [ 0 , 0 ] for __ in range ( k + 1 ) ] for _ in range ( n + 1 ) ]\n    dp [ 1 ] [ 0 ] [ 0 ] = 1\n    dp [ 1 ] [ 0 ] [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( k + 1 ) :\n            dp [ i ] [ j ] [ 0 ] = ( dp [ i - 1 ] [ j ] [ 0 ] + dp [ i - 1 ] [ j ] [ 1 ] )\n            dp [ i ] [ j ] [ 1 ] = dp [ i - 1 ] [ j ] [ 0 ]\n            if j >= 1 :\n                dp [ i ] [ j ] [ 1 ] += dp [ i - 1 ] [ j - 1 ] [ 1 ]\n    return dp [ n ] [ k ] [ 0 ] + dp [ n ] [ k ] [ 1 ]"}
{"source": "python", "target": "java", "source_program": " def printEqualModNumbers ( arr , n ) :\n    arr.sort ( ) ;\n    d = arr [ n - 1 ] - arr [ 0 ] ;\n    v = [ ] ;\n    i = 1 ;\n    while ( i * i <= d ) :\n        if ( d % i == 0 ) :\n            v.append ( i ) ;\n            if ( i != d / i ) :\n                v.append ( d / i ) ;\n        i += 1 ;\n    for i in range ( len ( v ) ) :\n        temp = arr [ 0 ] % v [ i ] ;\n        j = 1 ;\n        while ( j < n ) :\n            if ( arr [ j ] % v [ i ] != temp ) :\n                break ;\n            j += 1 ;\n        if ( j == n ) :\n            print ( v [ i ] , end = \" \" ) ;", "target_program": " static void printEqualModNumbers ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int d = arr [ n - 1 ] - arr [ 0 ] ;\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i * i <= d ;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . add ( i ) ;\n      if ( i != d / i ) v . add ( d / i ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    int temp = arr [ 0 ] % v . get ( i ) ;\n    int j ;\n    for ( j = 1 ;\n    j < n ;\n    j ++ ) if ( arr [ j ] % v . get ( i ) != temp ) break ;\n    if ( j == n ) System . out . print ( v . get ( i ) + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printEqualModNumbers ( arr , n ) :\n    arr.sort ( ) ;\n    d = arr [ n - 1 ] - arr [ 0 ] ;\n    v = [ ] ;\n    i = 1 ;\n    while ( i * i <= d ) :\n        if ( d % i == 0 ) :\n            v.append ( i ) ;\n            if ( i != d / i ) :\n                v.append ( d / i ) ;\n        i += 1 ;\n    for i in range ( len ( v ) ) :\n        temp = arr [ 0 ] % v [ i ] ;\n        j = 1 ;\n        while ( j < n ) :\n            if ( arr [ j ] % v [ i ] != temp ) :\n                break ;\n            j += 1 ;\n        if ( j == n ) :\n            print ( v [ i ] , end = \" \" ) ;", "target_program": " void printEqualModNumbers ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int d = arr [ n - 1 ] - arr [ 0 ];\n  vector < int > v;\n  for ( int i = 1;\n  i * i <= d;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . push_back ( i );\n      if ( i != d / i ) v . push_back ( d / i );\n    }\n  }\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    int temp = arr [ 0 ] % v [ i ];\n    int j;\n    for ( j = 1;\n    j < n;\n    j ++ ) if ( arr [ j ] % v [ i ] != temp ) break;\n    if ( j == n ) cout << v [ i ] << \" \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printEqualModNumbers ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int d = arr [ n - 1 ] - arr [ 0 ] ;\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i * i <= d ;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . add ( i ) ;\n      if ( i != d / i ) v . add ( d / i ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    int temp = arr [ 0 ] % v . get ( i ) ;\n    int j ;\n    for ( j = 1 ;\n    j < n ;\n    j ++ ) if ( arr [ j ] % v . get ( i ) != temp ) break ;\n    if ( j == n ) System . out . print ( v . get ( i ) + \" \" ) ;\n  }\n}", "target_program": " def printEqualModNumbers ( arr , n ) :\n    arr.sort ( ) ;\n    d = arr [ n - 1 ] - arr [ 0 ] ;\n    v = [ ] ;\n    i = 1 ;\n    while ( i * i <= d ) :\n        if ( d % i == 0 ) :\n            v.append ( i ) ;\n            if ( i != d / i ) :\n                v.append ( d / i ) ;\n        i += 1 ;\n    for i in range ( len ( v ) ) :\n        temp = arr [ 0 ] % v [ i ] ;\n        j = 1 ;\n        while ( j < n ) :\n            if ( arr [ j ] % v [ i ] != temp ) :\n                break ;\n            j += 1 ;\n        if ( j == n ) :\n            print ( v [ i ] , end = \" \" ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void printEqualModNumbers ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int d = arr [ n - 1 ] - arr [ 0 ] ;\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i * i <= d ;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . add ( i ) ;\n      if ( i != d / i ) v . add ( d / i ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    int temp = arr [ 0 ] % v . get ( i ) ;\n    int j ;\n    for ( j = 1 ;\n    j < n ;\n    j ++ ) if ( arr [ j ] % v . get ( i ) != temp ) break ;\n    if ( j == n ) System . out . print ( v . get ( i ) + \" \" ) ;\n  }\n}", "target_program": " void printEqualModNumbers ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int d = arr [ n - 1 ] - arr [ 0 ];\n  vector < int > v;\n  for ( int i = 1;\n  i * i <= d;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . push_back ( i );\n      if ( i != d / i ) v . push_back ( d / i );\n    }\n  }\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    int temp = arr [ 0 ] % v [ i ];\n    int j;\n    for ( j = 1;\n    j < n;\n    j ++ ) if ( arr [ j ] % v [ i ] != temp ) break;\n    if ( j == n ) cout << v [ i ] << \" \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printEqualModNumbers ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int d = arr [ n - 1 ] - arr [ 0 ];\n  vector < int > v;\n  for ( int i = 1;\n  i * i <= d;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . push_back ( i );\n      if ( i != d / i ) v . push_back ( d / i );\n    }\n  }\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    int temp = arr [ 0 ] % v [ i ];\n    int j;\n    for ( j = 1;\n    j < n;\n    j ++ ) if ( arr [ j ] % v [ i ] != temp ) break;\n    if ( j == n ) cout << v [ i ] << \" \";\n  }\n}", "target_program": " static void printEqualModNumbers ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int d = arr [ n - 1 ] - arr [ 0 ] ;\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i * i <= d ;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . add ( i ) ;\n      if ( i != d / i ) v . add ( d / i ) ;\n    }\n  }\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    int temp = arr [ 0 ] % v . get ( i ) ;\n    int j ;\n    for ( j = 1 ;\n    j < n ;\n    j ++ ) if ( arr [ j ] % v . get ( i ) != temp ) break ;\n    if ( j == n ) System . out . print ( v . get ( i ) + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printEqualModNumbers ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int d = arr [ n - 1 ] - arr [ 0 ];\n  vector < int > v;\n  for ( int i = 1;\n  i * i <= d;\n  i ++ ) {\n    if ( d % i == 0 ) {\n      v . push_back ( i );\n      if ( i != d / i ) v . push_back ( d / i );\n    }\n  }\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    int temp = arr [ 0 ] % v [ i ];\n    int j;\n    for ( j = 1;\n    j < n;\n    j ++ ) if ( arr [ j ] % v [ i ] != temp ) break;\n    if ( j == n ) cout << v [ i ] << \" \";\n  }\n}", "target_program": " def printEqualModNumbers ( arr , n ) :\n    arr.sort ( ) ;\n    d = arr [ n - 1 ] - arr [ 0 ] ;\n    v = [ ] ;\n    i = 1 ;\n    while ( i * i <= d ) :\n        if ( d % i == 0 ) :\n            v.append ( i ) ;\n            if ( i != d / i ) :\n                v.append ( d / i ) ;\n        i += 1 ;\n    for i in range ( len ( v ) ) :\n        temp = arr [ 0 ] % v [ i ] ;\n        j = 1 ;\n        while ( j < n ) :\n            if ( arr [ j ] % v [ i ] != temp ) :\n                break ;\n            j += 1 ;\n        if ( j == n ) :\n            print ( v [ i ] , end = \" \" ) ;"}
{"source": "python", "target": "java", "source_program": " def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            a [ k ] [ i ] = val\n            val += 1\n        k += 1\n        for i in range ( k , m ) :\n            a [ i ] [ n - 1 ] = val\n            val += 1\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                a [ m - 1 ] [ i ] = val\n                val += 1\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                a [ i ] [ l ] = val\n                val += 1\n            l += 1", "target_program": " static void spiralFill ( int m , int n , int a [ ] [ ] ) {\n  int val = 1 ;\n  int k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( int i = l ;\n    i < n ;\n    ++ i ) {\n      a [ k ] [ i ] = val ++ ;\n    }\n    k ++ ;\n    for ( int i = k ;\n    i < m ;\n    ++ i ) {\n      a [ i ] [ n - 1 ] = val ++ ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( int i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        a [ m - 1 ] [ i ] = val ++ ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        a [ i ] [ l ] = val ++ ;\n      }\n      l ++ ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            a [ k ] [ i ] = val\n            val += 1\n        k += 1\n        for i in range ( k , m ) :\n            a [ i ] [ n - 1 ] = val\n            val += 1\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                a [ m - 1 ] [ i ] = val\n                val += 1\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                a [ i ] [ l ] = val\n                val += 1\n            l += 1", "target_program": " void spiralFill ( int m, int n, int a [ ] [ MAX ] ) {\n  int val = 1;\n  int k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( int i = l;\n    i < n;\n    ++ i ) a [ k ] [ i ] = val ++;\n    k ++;\n    for ( int i = k;\n    i < m;\n    ++ i ) a [ i ] [ n - 1 ] = val ++;\n    n --;\n    if ( k < m ) {\n      for ( int i = n - 1;\n      i >= l;\n      -- i ) a [ m - 1 ] [ i ] = val ++;\n      m --;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1;\n      i >= k;\n      -- i ) a [ i ] [ l ] = val ++;\n      l ++;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void spiralFill ( int m , int n , int a [ ] [ ] ) {\n  int val = 1 ;\n  int k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( int i = l ;\n    i < n ;\n    ++ i ) {\n      a [ k ] [ i ] = val ++ ;\n    }\n    k ++ ;\n    for ( int i = k ;\n    i < m ;\n    ++ i ) {\n      a [ i ] [ n - 1 ] = val ++ ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( int i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        a [ m - 1 ] [ i ] = val ++ ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        a [ i ] [ l ] = val ++ ;\n      }\n      l ++ ;\n    }\n  }\n}", "target_program": " def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            a [ k ] [ i ] = val\n            val += 1\n        k += 1\n        for i in range ( k , m ) :\n            a [ i ] [ n - 1 ] = val\n            val += 1\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                a [ m - 1 ] [ i ] = val\n                val += 1\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                a [ i ] [ l ] = val\n                val += 1\n            l += 1"}
{"source": "java", "target": "cpp", "source_program": " static void spiralFill ( int m , int n , int a [ ] [ ] ) {\n  int val = 1 ;\n  int k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( int i = l ;\n    i < n ;\n    ++ i ) {\n      a [ k ] [ i ] = val ++ ;\n    }\n    k ++ ;\n    for ( int i = k ;\n    i < m ;\n    ++ i ) {\n      a [ i ] [ n - 1 ] = val ++ ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( int i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        a [ m - 1 ] [ i ] = val ++ ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        a [ i ] [ l ] = val ++ ;\n      }\n      l ++ ;\n    }\n  }\n}", "target_program": " void spiralFill ( int m, int n, int a [ ] [ MAX ] ) {\n  int val = 1;\n  int k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( int i = l;\n    i < n;\n    ++ i ) a [ k ] [ i ] = val ++;\n    k ++;\n    for ( int i = k;\n    i < m;\n    ++ i ) a [ i ] [ n - 1 ] = val ++;\n    n --;\n    if ( k < m ) {\n      for ( int i = n - 1;\n      i >= l;\n      -- i ) a [ m - 1 ] [ i ] = val ++;\n      m --;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1;\n      i >= k;\n      -- i ) a [ i ] [ l ] = val ++;\n      l ++;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void spiralFill ( int m, int n, int a [ ] [ MAX ] ) {\n  int val = 1;\n  int k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( int i = l;\n    i < n;\n    ++ i ) a [ k ] [ i ] = val ++;\n    k ++;\n    for ( int i = k;\n    i < m;\n    ++ i ) a [ i ] [ n - 1 ] = val ++;\n    n --;\n    if ( k < m ) {\n      for ( int i = n - 1;\n      i >= l;\n      -- i ) a [ m - 1 ] [ i ] = val ++;\n      m --;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1;\n      i >= k;\n      -- i ) a [ i ] [ l ] = val ++;\n      l ++;\n    }\n  }\n}", "target_program": " static void spiralFill ( int m , int n , int a [ ] [ ] ) {\n  int val = 1 ;\n  int k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( int i = l ;\n    i < n ;\n    ++ i ) {\n      a [ k ] [ i ] = val ++ ;\n    }\n    k ++ ;\n    for ( int i = k ;\n    i < m ;\n    ++ i ) {\n      a [ i ] [ n - 1 ] = val ++ ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( int i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        a [ m - 1 ] [ i ] = val ++ ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        a [ i ] [ l ] = val ++ ;\n      }\n      l ++ ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void spiralFill ( int m, int n, int a [ ] [ MAX ] ) {\n  int val = 1;\n  int k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( int i = l;\n    i < n;\n    ++ i ) a [ k ] [ i ] = val ++;\n    k ++;\n    for ( int i = k;\n    i < m;\n    ++ i ) a [ i ] [ n - 1 ] = val ++;\n    n --;\n    if ( k < m ) {\n      for ( int i = n - 1;\n      i >= l;\n      -- i ) a [ m - 1 ] [ i ] = val ++;\n      m --;\n    }\n    if ( l < n ) {\n      for ( int i = m - 1;\n      i >= k;\n      -- i ) a [ i ] [ l ] = val ++;\n      l ++;\n    }\n  }\n}", "target_program": " def spiralFill ( m , n , a ) :\n    val = 1\n    k , l = 0 , 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            a [ k ] [ i ] = val\n            val += 1\n        k += 1\n        for i in range ( k , m ) :\n            a [ i ] [ n - 1 ] = val\n            val += 1\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , l - 1 , - 1 ) :\n                a [ m - 1 ] [ i ] = val\n                val += 1\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                a [ i ] [ l ] = val\n                val += 1\n            l += 1"}
{"source": "python", "target": "java", "source_program": " def printRepeating ( arr , size ) :\n    xor = arr [ 0 ]\n    n = size - 2\n    x = 0\n    y = 0\n    for i in range ( 1 , size ) :\n        xor ^= arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        xor ^= i\n    set_bit_no = xor & ~ ( xor - 1 )\n    for i in range ( 0 , size ) :\n        if ( arr [ i ] & set_bit_no ) :\n            x = x ^ arr [ i ]\n        else :\n            y = y ^ arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        if ( i & set_bit_no ) :\n            x = x ^ i\n        else :\n            y = y ^ i\n    print ( \"The two repeating\" , \"elements are\" , y , x )", "target_program": " void printRepeating ( int arr [ ] , int size ) {\n  int xor = arr [ 0 ] ;\n  int set_bit_no ;\n  int i ;\n  int n = size - 2 ;\n  int x = 0 , y = 0 ;\n  for ( i = 1 ;\n  i < size ;\n  i ++ ) xor ^= arr [ i ] ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) xor ^= i ;\n  set_bit_no = ( xor & ~ ( xor - 1 ) ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    int a = arr [ i ] & set_bit_no ;\n    if ( a != 0 ) x = x ^ arr [ i ] ;\n    else y = y ^ arr [ i ] ;\n  }\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int a = i & set_bit_no ;\n    if ( a != 0 ) x = x ^ i ;\n    else y = y ^ i ;\n  }\n  System . out . println ( \"The two reppeated elements are :\" ) ;\n  System . out . println ( x + \" \" + y ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printRepeating ( arr , size ) :\n    xor = arr [ 0 ]\n    n = size - 2\n    x = 0\n    y = 0\n    for i in range ( 1 , size ) :\n        xor ^= arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        xor ^= i\n    set_bit_no = xor & ~ ( xor - 1 )\n    for i in range ( 0 , size ) :\n        if ( arr [ i ] & set_bit_no ) :\n            x = x ^ arr [ i ]\n        else :\n            y = y ^ arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        if ( i & set_bit_no ) :\n            x = x ^ i\n        else :\n            y = y ^ i\n    print ( \"The two repeating\" , \"elements are\" , y , x )", "target_program": " void printRepeating ( int arr [ ], int size ) {\n  int Xor = arr [ 0 ];\n  int set_bit_no;\n  int i;\n  int n = size - 2;\n  int x = 0, y = 0;\n  for ( i = 1;\n  i < size;\n  i ++ ) Xor ^= arr [ i ];\n  for ( i = 1;\n  i <= n;\n  i ++ ) Xor ^= i;\n  set_bit_no = Xor & ~ ( Xor - 1 );\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ];\n    else y = y ^ arr [ i ];\n  }\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i & set_bit_no ) x = x ^ i;\n    else y = y ^ i;\n  }\n  cout << \"The two repeating elements are \" << y << \" \" << x;\n}"}
{"source": "java", "target": "python", "source_program": " void printRepeating ( int arr [ ] , int size ) {\n  int xor = arr [ 0 ] ;\n  int set_bit_no ;\n  int i ;\n  int n = size - 2 ;\n  int x = 0 , y = 0 ;\n  for ( i = 1 ;\n  i < size ;\n  i ++ ) xor ^= arr [ i ] ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) xor ^= i ;\n  set_bit_no = ( xor & ~ ( xor - 1 ) ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    int a = arr [ i ] & set_bit_no ;\n    if ( a != 0 ) x = x ^ arr [ i ] ;\n    else y = y ^ arr [ i ] ;\n  }\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int a = i & set_bit_no ;\n    if ( a != 0 ) x = x ^ i ;\n    else y = y ^ i ;\n  }\n  System . out . println ( \"The two reppeated elements are :\" ) ;\n  System . out . println ( x + \" \" + y ) ;\n}", "target_program": " def printRepeating ( arr , size ) :\n    xor = arr [ 0 ]\n    n = size - 2\n    x = 0\n    y = 0\n    for i in range ( 1 , size ) :\n        xor ^= arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        xor ^= i\n    set_bit_no = xor & ~ ( xor - 1 )\n    for i in range ( 0 , size ) :\n        if ( arr [ i ] & set_bit_no ) :\n            x = x ^ arr [ i ]\n        else :\n            y = y ^ arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        if ( i & set_bit_no ) :\n            x = x ^ i\n        else :\n            y = y ^ i\n    print ( \"The two repeating\" , \"elements are\" , y , x )"}
{"source": "java", "target": "cpp", "source_program": " void printRepeating ( int arr [ ] , int size ) {\n  int xor = arr [ 0 ] ;\n  int set_bit_no ;\n  int i ;\n  int n = size - 2 ;\n  int x = 0 , y = 0 ;\n  for ( i = 1 ;\n  i < size ;\n  i ++ ) xor ^= arr [ i ] ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) xor ^= i ;\n  set_bit_no = ( xor & ~ ( xor - 1 ) ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    int a = arr [ i ] & set_bit_no ;\n    if ( a != 0 ) x = x ^ arr [ i ] ;\n    else y = y ^ arr [ i ] ;\n  }\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int a = i & set_bit_no ;\n    if ( a != 0 ) x = x ^ i ;\n    else y = y ^ i ;\n  }\n  System . out . println ( \"The two reppeated elements are :\" ) ;\n  System . out . println ( x + \" \" + y ) ;\n}", "target_program": " void printRepeating ( int arr [ ], int size ) {\n  int Xor = arr [ 0 ];\n  int set_bit_no;\n  int i;\n  int n = size - 2;\n  int x = 0, y = 0;\n  for ( i = 1;\n  i < size;\n  i ++ ) Xor ^= arr [ i ];\n  for ( i = 1;\n  i <= n;\n  i ++ ) Xor ^= i;\n  set_bit_no = Xor & ~ ( Xor - 1 );\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ];\n    else y = y ^ arr [ i ];\n  }\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i & set_bit_no ) x = x ^ i;\n    else y = y ^ i;\n  }\n  cout << \"The two repeating elements are \" << y << \" \" << x;\n}"}
{"source": "cpp", "target": "java", "source_program": " void printRepeating ( int arr [ ], int size ) {\n  int Xor = arr [ 0 ];\n  int set_bit_no;\n  int i;\n  int n = size - 2;\n  int x = 0, y = 0;\n  for ( i = 1;\n  i < size;\n  i ++ ) Xor ^= arr [ i ];\n  for ( i = 1;\n  i <= n;\n  i ++ ) Xor ^= i;\n  set_bit_no = Xor & ~ ( Xor - 1 );\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ];\n    else y = y ^ arr [ i ];\n  }\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i & set_bit_no ) x = x ^ i;\n    else y = y ^ i;\n  }\n  cout << \"The two repeating elements are \" << y << \" \" << x;\n}", "target_program": " void printRepeating ( int arr [ ] , int size ) {\n  int xor = arr [ 0 ] ;\n  int set_bit_no ;\n  int i ;\n  int n = size - 2 ;\n  int x = 0 , y = 0 ;\n  for ( i = 1 ;\n  i < size ;\n  i ++ ) xor ^= arr [ i ] ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) xor ^= i ;\n  set_bit_no = ( xor & ~ ( xor - 1 ) ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    int a = arr [ i ] & set_bit_no ;\n    if ( a != 0 ) x = x ^ arr [ i ] ;\n    else y = y ^ arr [ i ] ;\n  }\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int a = i & set_bit_no ;\n    if ( a != 0 ) x = x ^ i ;\n    else y = y ^ i ;\n  }\n  System . out . println ( \"The two reppeated elements are :\" ) ;\n  System . out . println ( x + \" \" + y ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printRepeating ( int arr [ ], int size ) {\n  int Xor = arr [ 0 ];\n  int set_bit_no;\n  int i;\n  int n = size - 2;\n  int x = 0, y = 0;\n  for ( i = 1;\n  i < size;\n  i ++ ) Xor ^= arr [ i ];\n  for ( i = 1;\n  i <= n;\n  i ++ ) Xor ^= i;\n  set_bit_no = Xor & ~ ( Xor - 1 );\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ i ] & set_bit_no ) x = x ^ arr [ i ];\n    else y = y ^ arr [ i ];\n  }\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i & set_bit_no ) x = x ^ i;\n    else y = y ^ i;\n  }\n  cout << \"The two repeating elements are \" << y << \" \" << x;\n}", "target_program": " def printRepeating ( arr , size ) :\n    xor = arr [ 0 ]\n    n = size - 2\n    x = 0\n    y = 0\n    for i in range ( 1 , size ) :\n        xor ^= arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        xor ^= i\n    set_bit_no = xor & ~ ( xor - 1 )\n    for i in range ( 0 , size ) :\n        if ( arr [ i ] & set_bit_no ) :\n            x = x ^ arr [ i ]\n        else :\n            y = y ^ arr [ i ]\n    for i in range ( 1 , n + 1 ) :\n        if ( i & set_bit_no ) :\n            x = x ^ i\n        else :\n            y = y ^ i\n    print ( \"The two repeating\" , \"elements are\" , y , x )"}
{"source": "python", "target": "java", "source_program": " def countWays ( N ) :\n    if ( N == 1 ) :\n        return 4\n    countB = 1\n    countS = 1\n    for i in range ( 2 , N + 1 ) :\n        prev_countB = countB\n        prev_countS = countS\n        countS = prev_countB + prev_countS\n        countB = prev_countS\n    result = countS + countB\n    return ( result * result )", "target_program": " static int countWays ( int N ) {\n  if ( N == 1 ) return 4 ;\n  int countB = 1 , countS = 1 , prev_countB , prev_countS ;\n  for ( int i = 2 ;\n  i <= N ;\n  i ++ ) {\n    prev_countB = countB ;\n    prev_countS = countS ;\n    countS = prev_countB + prev_countS ;\n    countB = prev_countS ;\n  }\n  int result = countS + countB ;\n  return ( result * result ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWays ( N ) :\n    if ( N == 1 ) :\n        return 4\n    countB = 1\n    countS = 1\n    for i in range ( 2 , N + 1 ) :\n        prev_countB = countB\n        prev_countS = countS\n        countS = prev_countB + prev_countS\n        countB = prev_countS\n    result = countS + countB\n    return ( result * result )", "target_program": " int countWays ( int N ) {\n  if ( N == 1 ) return 4;\n  int countB = 1, countS = 1, prev_countB, prev_countS;\n  for ( int i = 2;\n  i <= N;\n  i ++ ) {\n    prev_countB = countB;\n    prev_countS = countS;\n    countS = prev_countB + prev_countS;\n    countB = prev_countS;\n  }\n  int result = countS + countB;\n  return ( result * result );\n}"}
{"source": "java", "target": "python", "source_program": " static int countWays ( int N ) {\n  if ( N == 1 ) return 4 ;\n  int countB = 1 , countS = 1 , prev_countB , prev_countS ;\n  for ( int i = 2 ;\n  i <= N ;\n  i ++ ) {\n    prev_countB = countB ;\n    prev_countS = countS ;\n    countS = prev_countB + prev_countS ;\n    countB = prev_countS ;\n  }\n  int result = countS + countB ;\n  return ( result * result ) ;\n}", "target_program": " def countWays ( N ) :\n    if ( N == 1 ) :\n        return 4\n    countB = 1\n    countS = 1\n    for i in range ( 2 , N + 1 ) :\n        prev_countB = countB\n        prev_countS = countS\n        countS = prev_countB + prev_countS\n        countB = prev_countS\n    result = countS + countB\n    return ( result * result )"}
{"source": "java", "target": "cpp", "source_program": " static int countWays ( int N ) {\n  if ( N == 1 ) return 4 ;\n  int countB = 1 , countS = 1 , prev_countB , prev_countS ;\n  for ( int i = 2 ;\n  i <= N ;\n  i ++ ) {\n    prev_countB = countB ;\n    prev_countS = countS ;\n    countS = prev_countB + prev_countS ;\n    countB = prev_countS ;\n  }\n  int result = countS + countB ;\n  return ( result * result ) ;\n}", "target_program": " int countWays ( int N ) {\n  if ( N == 1 ) return 4;\n  int countB = 1, countS = 1, prev_countB, prev_countS;\n  for ( int i = 2;\n  i <= N;\n  i ++ ) {\n    prev_countB = countB;\n    prev_countS = countS;\n    countS = prev_countB + prev_countS;\n    countB = prev_countS;\n  }\n  int result = countS + countB;\n  return ( result * result );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countWays ( int N ) {\n  if ( N == 1 ) return 4;\n  int countB = 1, countS = 1, prev_countB, prev_countS;\n  for ( int i = 2;\n  i <= N;\n  i ++ ) {\n    prev_countB = countB;\n    prev_countS = countS;\n    countS = prev_countB + prev_countS;\n    countB = prev_countS;\n  }\n  int result = countS + countB;\n  return ( result * result );\n}", "target_program": " static int countWays ( int N ) {\n  if ( N == 1 ) return 4 ;\n  int countB = 1 , countS = 1 , prev_countB , prev_countS ;\n  for ( int i = 2 ;\n  i <= N ;\n  i ++ ) {\n    prev_countB = countB ;\n    prev_countS = countS ;\n    countS = prev_countB + prev_countS ;\n    countB = prev_countS ;\n  }\n  int result = countS + countB ;\n  return ( result * result ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countWays ( int N ) {\n  if ( N == 1 ) return 4;\n  int countB = 1, countS = 1, prev_countB, prev_countS;\n  for ( int i = 2;\n  i <= N;\n  i ++ ) {\n    prev_countB = countB;\n    prev_countS = countS;\n    countS = prev_countB + prev_countS;\n    countB = prev_countS;\n  }\n  int result = countS + countB;\n  return ( result * result );\n}", "target_program": " def countWays ( N ) :\n    if ( N == 1 ) :\n        return 4\n    countB = 1\n    countS = 1\n    for i in range ( 2 , N + 1 ) :\n        prev_countB = countB\n        prev_countS = countS\n        countS = prev_countB + prev_countS\n        countB = prev_countS\n    result = countS + countB\n    return ( result * result )"}
{"source": "python", "target": "java", "source_program": " def isSparse ( array , m , n ) :\n    counter = 0\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( array [ i ] [ j ] == 0 ) :\n                counter = counter + 1\n    return ( counter > ( ( m * n ) // 2 ) )", "target_program": " static boolean isSparse ( int array [ ] [ ] , int m , int n ) {\n  int counter = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  ++ i ) for ( int j = 0 ;\n  j < n ;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;\n  return ( counter > ( ( m * n ) / 2 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isSparse ( array , m , n ) :\n    counter = 0\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( array [ i ] [ j ] == 0 ) :\n                counter = counter + 1\n    return ( counter > ( ( m * n ) // 2 ) )", "target_program": " bool isSparse ( int array [ ] [ MAX ], int m, int n ) {\n  int counter = 0;\n  for ( int i = 0;\n  i < m;\n  ++ i ) for ( int j = 0;\n  j < n;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter;\n  return ( counter > ( ( m * n ) / 2 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isSparse ( int array [ ] [ ] , int m , int n ) {\n  int counter = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  ++ i ) for ( int j = 0 ;\n  j < n ;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;\n  return ( counter > ( ( m * n ) / 2 ) ) ;\n}", "target_program": " def isSparse ( array , m , n ) :\n    counter = 0\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( array [ i ] [ j ] == 0 ) :\n                counter = counter + 1\n    return ( counter > ( ( m * n ) // 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isSparse ( int array [ ] [ ] , int m , int n ) {\n  int counter = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  ++ i ) for ( int j = 0 ;\n  j < n ;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;\n  return ( counter > ( ( m * n ) / 2 ) ) ;\n}", "target_program": " bool isSparse ( int array [ ] [ MAX ], int m, int n ) {\n  int counter = 0;\n  for ( int i = 0;\n  i < m;\n  ++ i ) for ( int j = 0;\n  j < n;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter;\n  return ( counter > ( ( m * n ) / 2 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isSparse ( int array [ ] [ MAX ], int m, int n ) {\n  int counter = 0;\n  for ( int i = 0;\n  i < m;\n  ++ i ) for ( int j = 0;\n  j < n;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter;\n  return ( counter > ( ( m * n ) / 2 ) );\n}", "target_program": " static boolean isSparse ( int array [ ] [ ] , int m , int n ) {\n  int counter = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  ++ i ) for ( int j = 0 ;\n  j < n ;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter ;\n  return ( counter > ( ( m * n ) / 2 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isSparse ( int array [ ] [ MAX ], int m, int n ) {\n  int counter = 0;\n  for ( int i = 0;\n  i < m;\n  ++ i ) for ( int j = 0;\n  j < n;\n  ++ j ) if ( array [ i ] [ j ] == 0 ) ++ counter;\n  return ( counter > ( ( m * n ) / 2 ) );\n}", "target_program": " def isSparse ( array , m , n ) :\n    counter = 0\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( array [ i ] [ j ] == 0 ) :\n                counter = counter + 1\n    return ( counter > ( ( m * n ) // 2 ) )"}
{"source": "python", "target": "java", "source_program": " def findMinAvgSubarray ( arr , n , k ) :\n    if ( n < k ) : return 0\n    res_index = 0\n    curr_sum = 0\n    for i in range ( k ) :\n        curr_sum += arr [ i ]\n    min_sum = curr_sum\n    for i in range ( k , n ) :\n        curr_sum += arr [ i ] - arr [ i - k ]\n        if ( curr_sum < min_sum ) :\n            min_sum = curr_sum\n            res_index = ( i - k + 1 )\n    print ( \"Subarray between [\" , res_index , \", \" , ( res_index + k - 1 ) , \"] has minimum average\" )", "target_program": " static void findMinAvgSubarray ( int n , int k ) {\n  if ( n < k ) return ;\n  int res_index = 0 ;\n  int curr_sum = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) curr_sum += arr [ i ] ;\n  int min_sum = curr_sum ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ] ;\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum ;\n      res_index = ( i - k + 1 ) ;\n    }\n  }\n  System . out . println ( \"Subarray between [\" + res_index + \", \" + ( res_index + k - 1 ) + \"] has minimum average\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinAvgSubarray ( arr , n , k ) :\n    if ( n < k ) : return 0\n    res_index = 0\n    curr_sum = 0\n    for i in range ( k ) :\n        curr_sum += arr [ i ]\n    min_sum = curr_sum\n    for i in range ( k , n ) :\n        curr_sum += arr [ i ] - arr [ i - k ]\n        if ( curr_sum < min_sum ) :\n            min_sum = curr_sum\n            res_index = ( i - k + 1 )\n    print ( \"Subarray between [\" , res_index , \", \" , ( res_index + k - 1 ) , \"] has minimum average\" )", "target_program": " void findMinAvgSubarray ( int arr [ ], int n, int k ) {\n  if ( n < k ) return;\n  int res_index = 0;\n  int curr_sum = 0;\n  for ( int i = 0;\n  i < k;\n  i ++ ) curr_sum += arr [ i ];\n  int min_sum = curr_sum;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ];\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum;\n      res_index = ( i - k + 1 );\n    }\n  }\n  cout << \"Subarray between [\" << res_index << \", \" << res_index + k - 1 << \"] has minimum average\";\n}"}
{"source": "java", "target": "python", "source_program": " static void findMinAvgSubarray ( int n , int k ) {\n  if ( n < k ) return ;\n  int res_index = 0 ;\n  int curr_sum = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) curr_sum += arr [ i ] ;\n  int min_sum = curr_sum ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ] ;\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum ;\n      res_index = ( i - k + 1 ) ;\n    }\n  }\n  System . out . println ( \"Subarray between [\" + res_index + \", \" + ( res_index + k - 1 ) + \"] has minimum average\" ) ;\n}", "target_program": " def findMinAvgSubarray ( arr , n , k ) :\n    if ( n < k ) : return 0\n    res_index = 0\n    curr_sum = 0\n    for i in range ( k ) :\n        curr_sum += arr [ i ]\n    min_sum = curr_sum\n    for i in range ( k , n ) :\n        curr_sum += arr [ i ] - arr [ i - k ]\n        if ( curr_sum < min_sum ) :\n            min_sum = curr_sum\n            res_index = ( i - k + 1 )\n    print ( \"Subarray between [\" , res_index , \", \" , ( res_index + k - 1 ) , \"] has minimum average\" )"}
{"source": "java", "target": "cpp", "source_program": " static void findMinAvgSubarray ( int n , int k ) {\n  if ( n < k ) return ;\n  int res_index = 0 ;\n  int curr_sum = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) curr_sum += arr [ i ] ;\n  int min_sum = curr_sum ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ] ;\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum ;\n      res_index = ( i - k + 1 ) ;\n    }\n  }\n  System . out . println ( \"Subarray between [\" + res_index + \", \" + ( res_index + k - 1 ) + \"] has minimum average\" ) ;\n}", "target_program": " void findMinAvgSubarray ( int arr [ ], int n, int k ) {\n  if ( n < k ) return;\n  int res_index = 0;\n  int curr_sum = 0;\n  for ( int i = 0;\n  i < k;\n  i ++ ) curr_sum += arr [ i ];\n  int min_sum = curr_sum;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ];\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum;\n      res_index = ( i - k + 1 );\n    }\n  }\n  cout << \"Subarray between [\" << res_index << \", \" << res_index + k - 1 << \"] has minimum average\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void findMinAvgSubarray ( int arr [ ], int n, int k ) {\n  if ( n < k ) return;\n  int res_index = 0;\n  int curr_sum = 0;\n  for ( int i = 0;\n  i < k;\n  i ++ ) curr_sum += arr [ i ];\n  int min_sum = curr_sum;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ];\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum;\n      res_index = ( i - k + 1 );\n    }\n  }\n  cout << \"Subarray between [\" << res_index << \", \" << res_index + k - 1 << \"] has minimum average\";\n}", "target_program": " static void findMinAvgSubarray ( int n , int k ) {\n  if ( n < k ) return ;\n  int res_index = 0 ;\n  int curr_sum = 0 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) curr_sum += arr [ i ] ;\n  int min_sum = curr_sum ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ] ;\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum ;\n      res_index = ( i - k + 1 ) ;\n    }\n  }\n  System . out . println ( \"Subarray between [\" + res_index + \", \" + ( res_index + k - 1 ) + \"] has minimum average\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findMinAvgSubarray ( int arr [ ], int n, int k ) {\n  if ( n < k ) return;\n  int res_index = 0;\n  int curr_sum = 0;\n  for ( int i = 0;\n  i < k;\n  i ++ ) curr_sum += arr [ i ];\n  int min_sum = curr_sum;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    curr_sum += arr [ i ] - arr [ i - k ];\n    if ( curr_sum < min_sum ) {\n      min_sum = curr_sum;\n      res_index = ( i - k + 1 );\n    }\n  }\n  cout << \"Subarray between [\" << res_index << \", \" << res_index + k - 1 << \"] has minimum average\";\n}", "target_program": " def findMinAvgSubarray ( arr , n , k ) :\n    if ( n < k ) : return 0\n    res_index = 0\n    curr_sum = 0\n    for i in range ( k ) :\n        curr_sum += arr [ i ]\n    min_sum = curr_sum\n    for i in range ( k , n ) :\n        curr_sum += arr [ i ] - arr [ i - k ]\n        if ( curr_sum < min_sum ) :\n            min_sum = curr_sum\n            res_index = ( i - k + 1 )\n    print ( \"Subarray between [\" , res_index , \", \" , ( res_index + k - 1 ) , \"] has minimum average\" )"}
{"source": "python", "target": "java", "source_program": " def query ( s , i , j ) :\n    n = len ( s )\n    i %= n\n    j %= n\n    print ( \"Yes\" ) if s [ i ] == s [ j ] else print ( \"No\" )", "target_program": " static void query ( String s , int i , int j ) {\n  int n = s . length ( ) ;\n  i %= n ;\n  j %= n ;\n  if ( s . charAt ( i ) == s . charAt ( j ) ) System . out . println ( \"Yes\" ) ;\n  else System . out . println ( \"No\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def query ( s , i , j ) :\n    n = len ( s )\n    i %= n\n    j %= n\n    print ( \"Yes\" ) if s [ i ] == s [ j ] else print ( \"No\" )", "target_program": " void query ( char s [ ], int i, int j ) {\n  int n = strlen ( s );\n  i %= n;\n  j %= n;\n  ( s [ i ] == s [ j ] ) ? ( cout << \"Yes\" << endl ) : ( cout << \"No\" << endl );\n}"}
{"source": "java", "target": "python", "source_program": " static void query ( String s , int i , int j ) {\n  int n = s . length ( ) ;\n  i %= n ;\n  j %= n ;\n  if ( s . charAt ( i ) == s . charAt ( j ) ) System . out . println ( \"Yes\" ) ;\n  else System . out . println ( \"No\" ) ;\n}", "target_program": " def query ( s , i , j ) :\n    n = len ( s )\n    i %= n\n    j %= n\n    print ( \"Yes\" ) if s [ i ] == s [ j ] else print ( \"No\" )"}
{"source": "java", "target": "cpp", "source_program": " static void query ( String s , int i , int j ) {\n  int n = s . length ( ) ;\n  i %= n ;\n  j %= n ;\n  if ( s . charAt ( i ) == s . charAt ( j ) ) System . out . println ( \"Yes\" ) ;\n  else System . out . println ( \"No\" ) ;\n}", "target_program": " void query ( char s [ ], int i, int j ) {\n  int n = strlen ( s );\n  i %= n;\n  j %= n;\n  ( s [ i ] == s [ j ] ) ? ( cout << \"Yes\" << endl ) : ( cout << \"No\" << endl );\n}"}
{"source": "cpp", "target": "java", "source_program": " void query ( char s [ ], int i, int j ) {\n  int n = strlen ( s );\n  i %= n;\n  j %= n;\n  ( s [ i ] == s [ j ] ) ? ( cout << \"Yes\" << endl ) : ( cout << \"No\" << endl );\n}", "target_program": " static void query ( String s , int i , int j ) {\n  int n = s . length ( ) ;\n  i %= n ;\n  j %= n ;\n  if ( s . charAt ( i ) == s . charAt ( j ) ) System . out . println ( \"Yes\" ) ;\n  else System . out . println ( \"No\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void query ( char s [ ], int i, int j ) {\n  int n = strlen ( s );\n  i %= n;\n  j %= n;\n  ( s [ i ] == s [ j ] ) ? ( cout << \"Yes\" << endl ) : ( cout << \"No\" << endl );\n}", "target_program": " def query ( s , i , j ) :\n    n = len ( s )\n    i %= n\n    j %= n\n    print ( \"Yes\" ) if s [ i ] == s [ j ] else print ( \"No\" )"}
{"source": "python", "target": "java", "source_program": " def productArray ( arr , n ) :\n    if n == 1 :\n        print ( 0 )\n        return\n    i , temp = 1 , 1\n    prod = [ 1 for i in range ( n ) ]\n    for i in range ( n ) :\n        prod [ i ] = temp\n        temp *= arr [ i ]\n    temp = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        prod [ i ] *= temp\n        temp *= arr [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = \" \" )\n    return", "target_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( \"0\" ) ;\n    return ;\n  }\n  int i , temp = 1 ;\n  int prod [ ] = new int [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) prod [ j ] = 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    prod [ i ] = temp ;\n    temp *= arr [ i ] ;\n  }\n  temp = 1 ;\n  for ( i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    prod [ i ] *= temp ;\n    temp *= arr [ i ] ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def productArray ( arr , n ) :\n    if n == 1 :\n        print ( 0 )\n        return\n    i , temp = 1 , 1\n    prod = [ 1 for i in range ( n ) ]\n    for i in range ( n ) :\n        prod [ i ] = temp\n        temp *= arr [ i ]\n    temp = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        prod [ i ] *= temp\n        temp *= arr [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = \" \" )\n    return", "target_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int i, temp = 1;\n  int * prod = new int [ ( sizeof ( int ) * n ) ];\n  memset ( prod, 1, n );\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    prod [ i ] = temp;\n    temp *= arr [ i ];\n  }\n  temp = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    prod [ i ] *= temp;\n    temp *= arr [ i ];\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}"}
{"source": "java", "target": "python", "source_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( \"0\" ) ;\n    return ;\n  }\n  int i , temp = 1 ;\n  int prod [ ] = new int [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) prod [ j ] = 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    prod [ i ] = temp ;\n    temp *= arr [ i ] ;\n  }\n  temp = 1 ;\n  for ( i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    prod [ i ] *= temp ;\n    temp *= arr [ i ] ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}", "target_program": " def productArray ( arr , n ) :\n    if n == 1 :\n        print ( 0 )\n        return\n    i , temp = 1 , 1\n    prod = [ 1 for i in range ( n ) ]\n    for i in range ( n ) :\n        prod [ i ] = temp\n        temp *= arr [ i ]\n    temp = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        prod [ i ] *= temp\n        temp *= arr [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = \" \" )\n    return"}
{"source": "java", "target": "cpp", "source_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( \"0\" ) ;\n    return ;\n  }\n  int i , temp = 1 ;\n  int prod [ ] = new int [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) prod [ j ] = 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    prod [ i ] = temp ;\n    temp *= arr [ i ] ;\n  }\n  temp = 1 ;\n  for ( i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    prod [ i ] *= temp ;\n    temp *= arr [ i ] ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}", "target_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int i, temp = 1;\n  int * prod = new int [ ( sizeof ( int ) * n ) ];\n  memset ( prod, 1, n );\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    prod [ i ] = temp;\n    temp *= arr [ i ];\n  }\n  temp = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    prod [ i ] *= temp;\n    temp *= arr [ i ];\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}"}
{"source": "cpp", "target": "java", "source_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int i, temp = 1;\n  int * prod = new int [ ( sizeof ( int ) * n ) ];\n  memset ( prod, 1, n );\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    prod [ i ] = temp;\n    temp *= arr [ i ];\n  }\n  temp = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    prod [ i ] *= temp;\n    temp *= arr [ i ];\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}", "target_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( \"0\" ) ;\n    return ;\n  }\n  int i , temp = 1 ;\n  int prod [ ] = new int [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) prod [ j ] = 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    prod [ i ] = temp ;\n    temp *= arr [ i ] ;\n  }\n  temp = 1 ;\n  for ( i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    prod [ i ] *= temp ;\n    temp *= arr [ i ] ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int i, temp = 1;\n  int * prod = new int [ ( sizeof ( int ) * n ) ];\n  memset ( prod, 1, n );\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    prod [ i ] = temp;\n    temp *= arr [ i ];\n  }\n  temp = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    prod [ i ] *= temp;\n    temp *= arr [ i ];\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}", "target_program": " def productArray ( arr , n ) :\n    if n == 1 :\n        print ( 0 )\n        return\n    i , temp = 1 , 1\n    prod = [ 1 for i in range ( n ) ]\n    for i in range ( n ) :\n        prod [ i ] = temp\n        temp *= arr [ i ]\n    temp = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        prod [ i ] *= temp\n        temp *= arr [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = \" \" )\n    return"}
{"source": "python", "target": "java", "source_program": " def pairSum ( mat , n , sum ) :\n    for i in range ( n ) :\n        mat [ i ].sort ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1", "target_program": " static void pairSum ( int mat [ ] [ ] , int n , int sum ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) Arrays . sort ( mat [ i ] ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int left = 0 , right = n - 1 ;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          System . out . print ( \"(\" + mat [ i ] [ left ] + \", \" + mat [ j ] [ right ] + \"), \" ) ;\n          left ++ ;\n          right -- ;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++ ;\n          else right -- ;\n        }\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def pairSum ( mat , n , sum ) :\n    for i in range ( n ) :\n        mat [ i ].sort ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1", "target_program": " void pairSum ( int mat [ ] [ MAX ], int n, int sum ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( mat [ i ], mat [ i ] + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int left = 0, right = n - 1;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          cout << \"(\" << mat [ i ] [ left ] << \", \" << mat [ j ] [ right ] << \"), \";\n          left ++;\n          right --;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++;\n          else right --;\n        }\n      }\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void pairSum ( int mat [ ] [ ] , int n , int sum ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) Arrays . sort ( mat [ i ] ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int left = 0 , right = n - 1 ;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          System . out . print ( \"(\" + mat [ i ] [ left ] + \", \" + mat [ j ] [ right ] + \"), \" ) ;\n          left ++ ;\n          right -- ;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++ ;\n          else right -- ;\n        }\n      }\n    }\n  }\n}", "target_program": " def pairSum ( mat , n , sum ) :\n    for i in range ( n ) :\n        mat [ i ].sort ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1"}
{"source": "java", "target": "cpp", "source_program": " static void pairSum ( int mat [ ] [ ] , int n , int sum ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) Arrays . sort ( mat [ i ] ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int left = 0 , right = n - 1 ;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          System . out . print ( \"(\" + mat [ i ] [ left ] + \", \" + mat [ j ] [ right ] + \"), \" ) ;\n          left ++ ;\n          right -- ;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++ ;\n          else right -- ;\n        }\n      }\n    }\n  }\n}", "target_program": " void pairSum ( int mat [ ] [ MAX ], int n, int sum ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( mat [ i ], mat [ i ] + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int left = 0, right = n - 1;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          cout << \"(\" << mat [ i ] [ left ] << \", \" << mat [ j ] [ right ] << \"), \";\n          left ++;\n          right --;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++;\n          else right --;\n        }\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void pairSum ( int mat [ ] [ MAX ], int n, int sum ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( mat [ i ], mat [ i ] + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int left = 0, right = n - 1;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          cout << \"(\" << mat [ i ] [ left ] << \", \" << mat [ j ] [ right ] << \"), \";\n          left ++;\n          right --;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++;\n          else right --;\n        }\n      }\n    }\n  }\n}", "target_program": " static void pairSum ( int mat [ ] [ ] , int n , int sum ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) Arrays . sort ( mat [ i ] ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int left = 0 , right = n - 1 ;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          System . out . print ( \"(\" + mat [ i ] [ left ] + \", \" + mat [ j ] [ right ] + \"), \" ) ;\n          left ++ ;\n          right -- ;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++ ;\n          else right -- ;\n        }\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void pairSum ( int mat [ ] [ MAX ], int n, int sum ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( mat [ i ], mat [ i ] + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int left = 0, right = n - 1;\n      while ( left < n && right >= 0 ) {\n        if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) {\n          cout << \"(\" << mat [ i ] [ left ] << \", \" << mat [ j ] [ right ] << \"), \";\n          left ++;\n          right --;\n        }\n        else {\n          if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) left ++;\n          else right --;\n        }\n      }\n    }\n  }\n}", "target_program": " def pairSum ( mat , n , sum ) :\n    for i in range ( n ) :\n        mat [ i ].sort ( )\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            left = 0\n            right = n - 1\n            while ( left < n and right >= 0 ) :\n                if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) == sum ) :\n                    print ( \"(\" , mat [ i ] [ left ] , \", \" , mat [ j ] [ right ] , \"), \" , end = \" \" )\n                    left += 1\n                    right -= 1\n                else :\n                    if ( ( mat [ i ] [ left ] + mat [ j ] [ right ] ) < sum ) :\n                        left += 1\n                    else :\n                        right -= 1"}
{"source": "python", "target": "java", "source_program": " def findNth ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1", "target_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 1 ;\n  ;\n  curr ++ ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def findNth ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1", "target_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 1;\n  ;\n  curr ++ ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 1 ;\n  ;\n  curr ++ ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}", "target_program": " def findNth ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 1 ;\n  ;\n  curr ++ ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}", "target_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 1;\n  ;\n  curr ++ ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 1;\n  ;\n  curr ++ ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}", "target_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 1 ;\n  ;\n  curr ++ ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 1;\n  ;\n  curr ++ ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}", "target_program": " def findNth ( n ) :\n    count = 0\n    for curr in itertools.count ( ) :\n        sum = 0\n        x = curr\n        while ( x ) :\n            sum = sum + x % 10\n            x = x // 10\n        if ( sum == 10 ) :\n            count = count + 1\n        if ( count == n ) :\n            return curr\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def slope ( x1 , y1 , x2 , y2 ) :\n    return ( float ) ( y2 - y1 ) / ( x2 - x1 )", "target_program": " static float slope ( float x1 , float y1 , float x2 , float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def slope ( x1 , y1 , x2 , y2 ) :\n    return ( float ) ( y2 - y1 ) / ( x2 - x1 )", "target_program": " float slope ( float x1, float y1, float x2, float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 );\n}"}
{"source": "java", "target": "python", "source_program": " static float slope ( float x1 , float y1 , float x2 , float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 ) ;\n}", "target_program": " def slope ( x1 , y1 , x2 , y2 ) :\n    return ( float ) ( y2 - y1 ) / ( x2 - x1 )"}
{"source": "java", "target": "cpp", "source_program": " static float slope ( float x1 , float y1 , float x2 , float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 ) ;\n}", "target_program": " float slope ( float x1, float y1, float x2, float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " float slope ( float x1, float y1, float x2, float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 );\n}", "target_program": " static float slope ( float x1 , float y1 , float x2 , float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float slope ( float x1, float y1, float x2, float y2 ) {\n  return ( y2 - y1 ) / ( x2 - x1 );\n}", "target_program": " def slope ( x1 , y1 , x2 , y2 ) :\n    return ( float ) ( y2 - y1 ) / ( x2 - x1 )"}
{"source": "python", "target": "java", "source_program": " def rangeGCD ( n , m ) :\n    return n if ( n == m ) else 1", "target_program": " static int rangeGCD ( int n , int m ) {\n  return ( n == m ) ? n : 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def rangeGCD ( n , m ) :\n    return n if ( n == m ) else 1", "target_program": " int rangeGCD ( int n, int m ) {\n  return ( n == m ) ? n : 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int rangeGCD ( int n , int m ) {\n  return ( n == m ) ? n : 1 ;\n}", "target_program": " def rangeGCD ( n , m ) :\n    return n if ( n == m ) else 1"}
{"source": "java", "target": "cpp", "source_program": " static int rangeGCD ( int n , int m ) {\n  return ( n == m ) ? n : 1 ;\n}", "target_program": " int rangeGCD ( int n, int m ) {\n  return ( n == m ) ? n : 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int rangeGCD ( int n, int m ) {\n  return ( n == m ) ? n : 1;\n}", "target_program": " static int rangeGCD ( int n , int m ) {\n  return ( n == m ) ? n : 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int rangeGCD ( int n, int m ) {\n  return ( n == m ) ? n : 1;\n}", "target_program": " def rangeGCD ( n , m ) :\n    return n if ( n == m ) else 1"}
{"source": "python", "target": "java", "source_program": " def alternateSubarray ( arr , n ) :\n    count = 1\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( ( arr [ i ] ^ prev ) == 0 ) :\n            while ( count ) :\n                print ( count , end = \" \" )\n                count -= 1\n        count += 1\n        prev = arr [ i ]\n    while ( count ) :\n        print ( count , end = \" \" )\n        count -= 1", "target_program": " static void alternateSubarray ( boolean arr [ ] , int n ) {\n  int count = 1 ;\n  boolean prev = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == false ) {\n      while ( count > 0 ) {\n        System . out . print ( count -- + \" \" ) ;\n      }\n    }\n    ++ count ;\n    prev = arr [ i ] ;\n  }\n  while ( count != 0 ) {\n    System . out . print ( count -- + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def alternateSubarray ( arr , n ) :\n    count = 1\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( ( arr [ i ] ^ prev ) == 0 ) :\n            while ( count ) :\n                print ( count , end = \" \" )\n                count -= 1\n        count += 1\n        prev = arr [ i ]\n    while ( count ) :\n        print ( count , end = \" \" )\n        count -= 1", "target_program": " void alternateSubarray ( bool arr [ ], int n ) {\n  int count = 1;\n  int prev = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == 0 ) {\n      while ( count ) cout << count -- << \" \";\n    }\n    ++ count;\n    prev = arr [ i ];\n  }\n  while ( count ) cout << count -- << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void alternateSubarray ( boolean arr [ ] , int n ) {\n  int count = 1 ;\n  boolean prev = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == false ) {\n      while ( count > 0 ) {\n        System . out . print ( count -- + \" \" ) ;\n      }\n    }\n    ++ count ;\n    prev = arr [ i ] ;\n  }\n  while ( count != 0 ) {\n    System . out . print ( count -- + \" \" ) ;\n  }\n}", "target_program": " def alternateSubarray ( arr , n ) :\n    count = 1\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( ( arr [ i ] ^ prev ) == 0 ) :\n            while ( count ) :\n                print ( count , end = \" \" )\n                count -= 1\n        count += 1\n        prev = arr [ i ]\n    while ( count ) :\n        print ( count , end = \" \" )\n        count -= 1"}
{"source": "java", "target": "cpp", "source_program": " static void alternateSubarray ( boolean arr [ ] , int n ) {\n  int count = 1 ;\n  boolean prev = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == false ) {\n      while ( count > 0 ) {\n        System . out . print ( count -- + \" \" ) ;\n      }\n    }\n    ++ count ;\n    prev = arr [ i ] ;\n  }\n  while ( count != 0 ) {\n    System . out . print ( count -- + \" \" ) ;\n  }\n}", "target_program": " void alternateSubarray ( bool arr [ ], int n ) {\n  int count = 1;\n  int prev = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == 0 ) {\n      while ( count ) cout << count -- << \" \";\n    }\n    ++ count;\n    prev = arr [ i ];\n  }\n  while ( count ) cout << count -- << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void alternateSubarray ( bool arr [ ], int n ) {\n  int count = 1;\n  int prev = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == 0 ) {\n      while ( count ) cout << count -- << \" \";\n    }\n    ++ count;\n    prev = arr [ i ];\n  }\n  while ( count ) cout << count -- << \" \";\n}", "target_program": " static void alternateSubarray ( boolean arr [ ] , int n ) {\n  int count = 1 ;\n  boolean prev = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == false ) {\n      while ( count > 0 ) {\n        System . out . print ( count -- + \" \" ) ;\n      }\n    }\n    ++ count ;\n    prev = arr [ i ] ;\n  }\n  while ( count != 0 ) {\n    System . out . print ( count -- + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void alternateSubarray ( bool arr [ ], int n ) {\n  int count = 1;\n  int prev = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  ++ i ) {\n    if ( ( arr [ i ] ^ prev ) == 0 ) {\n      while ( count ) cout << count -- << \" \";\n    }\n    ++ count;\n    prev = arr [ i ];\n  }\n  while ( count ) cout << count -- << \" \";\n}", "target_program": " def alternateSubarray ( arr , n ) :\n    count = 1\n    prev = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( ( arr [ i ] ^ prev ) == 0 ) :\n            while ( count ) :\n                print ( count , end = \" \" )\n                count -= 1\n        count += 1\n        prev = arr [ i ]\n    while ( count ) :\n        print ( count , end = \" \" )\n        count -= 1"}
{"source": "python", "target": "java", "source_program": " def unitDigitXRaisedY ( x , y ) :\n    res = 1\n    for i in range ( y ) :\n        res = ( res * x ) % 10\n    return res", "target_program": " static int unitDigitXRaisedY ( int x , int y ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < y ;\n  i ++ ) res = ( res * x ) % 10 ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def unitDigitXRaisedY ( x , y ) :\n    res = 1\n    for i in range ( y ) :\n        res = ( res * x ) % 10\n    return res", "target_program": " int unitDigitXRaisedY ( int x, int y ) {\n  int res = 1;\n  for ( int i = 0;\n  i < y;\n  i ++ ) res = ( res * x ) % 10;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int unitDigitXRaisedY ( int x , int y ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < y ;\n  i ++ ) res = ( res * x ) % 10 ;\n  return res ;\n}", "target_program": " def unitDigitXRaisedY ( x , y ) :\n    res = 1\n    for i in range ( y ) :\n        res = ( res * x ) % 10\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int unitDigitXRaisedY ( int x , int y ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < y ;\n  i ++ ) res = ( res * x ) % 10 ;\n  return res ;\n}", "target_program": " int unitDigitXRaisedY ( int x, int y ) {\n  int res = 1;\n  for ( int i = 0;\n  i < y;\n  i ++ ) res = ( res * x ) % 10;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int unitDigitXRaisedY ( int x, int y ) {\n  int res = 1;\n  for ( int i = 0;\n  i < y;\n  i ++ ) res = ( res * x ) % 10;\n  return res;\n}", "target_program": " static int unitDigitXRaisedY ( int x , int y ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < y ;\n  i ++ ) res = ( res * x ) % 10 ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int unitDigitXRaisedY ( int x, int y ) {\n  int res = 1;\n  for ( int i = 0;\n  i < y;\n  i ++ ) res = ( res * x ) % 10;\n  return res;\n}", "target_program": " def unitDigitXRaisedY ( x , y ) :\n    res = 1\n    for i in range ( y ) :\n        res = ( res * x ) % 10\n    return res"}
{"source": "python", "target": "java", "source_program": " def moduloMultiplication ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b ) :\n        if ( b & 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( 2 * a ) % mod ;\n        b >>= 1 ;\n    return res ;", "target_program": " static long moduloMultiplication ( long a , long b , long mod ) {\n  long res = 0 ;\n  a %= mod ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) > 0 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( 2 * a ) % mod ;\n    b >>= 1 ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def moduloMultiplication ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b ) :\n        if ( b & 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( 2 * a ) % mod ;\n        b >>= 1 ;\n    return res ;", "target_program": " long long moduloMultiplication ( long long a, long long b, long long mod ) {\n  long long res = 0;\n  a %= mod;\n  while ( b ) {\n    if ( b & 1 ) res = ( res + a ) % mod;\n    a = ( 2 * a ) % mod;\n    b >>= 1;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static long moduloMultiplication ( long a , long b , long mod ) {\n  long res = 0 ;\n  a %= mod ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) > 0 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( 2 * a ) % mod ;\n    b >>= 1 ;\n  }\n  return res ;\n}", "target_program": " def moduloMultiplication ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b ) :\n        if ( b & 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( 2 * a ) % mod ;\n        b >>= 1 ;\n    return res ;"}
{"source": "java", "target": "cpp", "source_program": " static long moduloMultiplication ( long a , long b , long mod ) {\n  long res = 0 ;\n  a %= mod ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) > 0 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( 2 * a ) % mod ;\n    b >>= 1 ;\n  }\n  return res ;\n}", "target_program": " long long moduloMultiplication ( long long a, long long b, long long mod ) {\n  long long res = 0;\n  a %= mod;\n  while ( b ) {\n    if ( b & 1 ) res = ( res + a ) % mod;\n    a = ( 2 * a ) % mod;\n    b >>= 1;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " long long moduloMultiplication ( long long a, long long b, long long mod ) {\n  long long res = 0;\n  a %= mod;\n  while ( b ) {\n    if ( b & 1 ) res = ( res + a ) % mod;\n    a = ( 2 * a ) % mod;\n    b >>= 1;\n  }\n  return res;\n}", "target_program": " static long moduloMultiplication ( long a , long b , long mod ) {\n  long res = 0 ;\n  a %= mod ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) > 0 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( 2 * a ) % mod ;\n    b >>= 1 ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long moduloMultiplication ( long long a, long long b, long long mod ) {\n  long long res = 0;\n  a %= mod;\n  while ( b ) {\n    if ( b & 1 ) res = ( res + a ) % mod;\n    a = ( 2 * a ) % mod;\n    b >>= 1;\n  }\n  return res;\n}", "target_program": " def moduloMultiplication ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b ) :\n        if ( b & 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( 2 * a ) % mod ;\n        b >>= 1 ;\n    return res ;"}
{"source": "python", "target": "java", "source_program": " def findSmallest ( m , s ) :\n    if ( s == 0 ) :\n        if ( m == 1 ) :\n            print ( \"Smallest number is 0\" )\n        else :\n            print ( \"Not possible\" )\n        return\n    if ( s > 9 * m ) :\n        print ( \"Not possible\" )\n        return\n    res = [ 0 for i in range ( m + 1 ) ]\n    s -= 1\n    for i in range ( m - 1 , 0 , - 1 ) :\n        if ( s > 9 ) :\n            res [ i ] = 9\n            s -= 9\n        else :\n            res [ i ] = s\n            s = 0\n    res [ 0 ] = s + 1\n    print ( \"Smallest number is \" , end = \"\" )\n    for i in range ( m ) :\n        print ( res [ i ] , end = \"\" )", "target_program": " static void findSmallest ( int m , int s ) {\n  if ( s == 0 ) {\n    System . out . print ( m == 1 ? \"Smallest number is 0\" : \"Not possible\" ) ;\n    return ;\n  }\n  if ( s > 9 * m ) {\n    System . out . println ( \"Not possible\" ) ;\n    return ;\n  }\n  int [ ] res = new int [ m ] ;\n  s -= 1 ;\n  for ( int i = m - 1 ;\n  i > 0 ;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9 ;\n      s -= 9 ;\n    }\n    else {\n      res [ i ] = s ;\n      s = 0 ;\n    }\n  }\n  res [ 0 ] = s + 1 ;\n  System . out . print ( \"Smallest number is \" ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) System . out . print ( res [ i ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSmallest ( m , s ) :\n    if ( s == 0 ) :\n        if ( m == 1 ) :\n            print ( \"Smallest number is 0\" )\n        else :\n            print ( \"Not possible\" )\n        return\n    if ( s > 9 * m ) :\n        print ( \"Not possible\" )\n        return\n    res = [ 0 for i in range ( m + 1 ) ]\n    s -= 1\n    for i in range ( m - 1 , 0 , - 1 ) :\n        if ( s > 9 ) :\n            res [ i ] = 9\n            s -= 9\n        else :\n            res [ i ] = s\n            s = 0\n    res [ 0 ] = s + 1\n    print ( \"Smallest number is \" , end = \"\" )\n    for i in range ( m ) :\n        print ( res [ i ] , end = \"\" )", "target_program": " void findSmallest ( int m, int s ) {\n  if ( s == 0 ) {\n    ( m == 1 ) ? cout << \"Smallest number is \" << 0 : cout << \"Not possible\";\n    return;\n  }\n  if ( s > 9 * m ) {\n    cout << \"Not possible\";\n    return;\n  }\n  int res [ m ];\n  s -= 1;\n  for ( int i = m - 1;\n  i > 0;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9;\n      s -= 9;\n    }\n    else {\n      res [ i ] = s;\n      s = 0;\n    }\n  }\n  res [ 0 ] = s + 1;\n  cout << \"Smallest number is \";\n  for ( int i = 0;\n  i < m;\n  i ++ ) cout << res [ i ];\n}"}
{"source": "java", "target": "python", "source_program": " static void findSmallest ( int m , int s ) {\n  if ( s == 0 ) {\n    System . out . print ( m == 1 ? \"Smallest number is 0\" : \"Not possible\" ) ;\n    return ;\n  }\n  if ( s > 9 * m ) {\n    System . out . println ( \"Not possible\" ) ;\n    return ;\n  }\n  int [ ] res = new int [ m ] ;\n  s -= 1 ;\n  for ( int i = m - 1 ;\n  i > 0 ;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9 ;\n      s -= 9 ;\n    }\n    else {\n      res [ i ] = s ;\n      s = 0 ;\n    }\n  }\n  res [ 0 ] = s + 1 ;\n  System . out . print ( \"Smallest number is \" ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) System . out . print ( res [ i ] ) ;\n}", "target_program": " def findSmallest ( m , s ) :\n    if ( s == 0 ) :\n        if ( m == 1 ) :\n            print ( \"Smallest number is 0\" )\n        else :\n            print ( \"Not possible\" )\n        return\n    if ( s > 9 * m ) :\n        print ( \"Not possible\" )\n        return\n    res = [ 0 for i in range ( m + 1 ) ]\n    s -= 1\n    for i in range ( m - 1 , 0 , - 1 ) :\n        if ( s > 9 ) :\n            res [ i ] = 9\n            s -= 9\n        else :\n            res [ i ] = s\n            s = 0\n    res [ 0 ] = s + 1\n    print ( \"Smallest number is \" , end = \"\" )\n    for i in range ( m ) :\n        print ( res [ i ] , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void findSmallest ( int m , int s ) {\n  if ( s == 0 ) {\n    System . out . print ( m == 1 ? \"Smallest number is 0\" : \"Not possible\" ) ;\n    return ;\n  }\n  if ( s > 9 * m ) {\n    System . out . println ( \"Not possible\" ) ;\n    return ;\n  }\n  int [ ] res = new int [ m ] ;\n  s -= 1 ;\n  for ( int i = m - 1 ;\n  i > 0 ;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9 ;\n      s -= 9 ;\n    }\n    else {\n      res [ i ] = s ;\n      s = 0 ;\n    }\n  }\n  res [ 0 ] = s + 1 ;\n  System . out . print ( \"Smallest number is \" ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) System . out . print ( res [ i ] ) ;\n}", "target_program": " void findSmallest ( int m, int s ) {\n  if ( s == 0 ) {\n    ( m == 1 ) ? cout << \"Smallest number is \" << 0 : cout << \"Not possible\";\n    return;\n  }\n  if ( s > 9 * m ) {\n    cout << \"Not possible\";\n    return;\n  }\n  int res [ m ];\n  s -= 1;\n  for ( int i = m - 1;\n  i > 0;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9;\n      s -= 9;\n    }\n    else {\n      res [ i ] = s;\n      s = 0;\n    }\n  }\n  res [ 0 ] = s + 1;\n  cout << \"Smallest number is \";\n  for ( int i = 0;\n  i < m;\n  i ++ ) cout << res [ i ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void findSmallest ( int m, int s ) {\n  if ( s == 0 ) {\n    ( m == 1 ) ? cout << \"Smallest number is \" << 0 : cout << \"Not possible\";\n    return;\n  }\n  if ( s > 9 * m ) {\n    cout << \"Not possible\";\n    return;\n  }\n  int res [ m ];\n  s -= 1;\n  for ( int i = m - 1;\n  i > 0;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9;\n      s -= 9;\n    }\n    else {\n      res [ i ] = s;\n      s = 0;\n    }\n  }\n  res [ 0 ] = s + 1;\n  cout << \"Smallest number is \";\n  for ( int i = 0;\n  i < m;\n  i ++ ) cout << res [ i ];\n}", "target_program": " static void findSmallest ( int m , int s ) {\n  if ( s == 0 ) {\n    System . out . print ( m == 1 ? \"Smallest number is 0\" : \"Not possible\" ) ;\n    return ;\n  }\n  if ( s > 9 * m ) {\n    System . out . println ( \"Not possible\" ) ;\n    return ;\n  }\n  int [ ] res = new int [ m ] ;\n  s -= 1 ;\n  for ( int i = m - 1 ;\n  i > 0 ;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9 ;\n      s -= 9 ;\n    }\n    else {\n      res [ i ] = s ;\n      s = 0 ;\n    }\n  }\n  res [ 0 ] = s + 1 ;\n  System . out . print ( \"Smallest number is \" ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) System . out . print ( res [ i ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findSmallest ( int m, int s ) {\n  if ( s == 0 ) {\n    ( m == 1 ) ? cout << \"Smallest number is \" << 0 : cout << \"Not possible\";\n    return;\n  }\n  if ( s > 9 * m ) {\n    cout << \"Not possible\";\n    return;\n  }\n  int res [ m ];\n  s -= 1;\n  for ( int i = m - 1;\n  i > 0;\n  i -- ) {\n    if ( s > 9 ) {\n      res [ i ] = 9;\n      s -= 9;\n    }\n    else {\n      res [ i ] = s;\n      s = 0;\n    }\n  }\n  res [ 0 ] = s + 1;\n  cout << \"Smallest number is \";\n  for ( int i = 0;\n  i < m;\n  i ++ ) cout << res [ i ];\n}", "target_program": " def findSmallest ( m , s ) :\n    if ( s == 0 ) :\n        if ( m == 1 ) :\n            print ( \"Smallest number is 0\" )\n        else :\n            print ( \"Not possible\" )\n        return\n    if ( s > 9 * m ) :\n        print ( \"Not possible\" )\n        return\n    res = [ 0 for i in range ( m + 1 ) ]\n    s -= 1\n    for i in range ( m - 1 , 0 , - 1 ) :\n        if ( s > 9 ) :\n            res [ i ] = 9\n            s -= 9\n        else :\n            res [ i ] = s\n            s = 0\n    res [ 0 ] = s + 1\n    print ( \"Smallest number is \" , end = \"\" )\n    for i in range ( m ) :\n        print ( res [ i ] , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def largest ( arr , n ) :\n    max = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if arr [ i ] > max :\n            max = arr [ i ]\n    return max", "target_program": " static int largest ( ) {\n  int i ;\n  int max = arr [ 0 ] ;\n  for ( i = 1 ;\n  i < arr . length ;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;\n  return max ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def largest ( arr , n ) :\n    max = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if arr [ i ] > max :\n            max = arr [ i ]\n    return max", "target_program": " int largest ( int arr [ ], int n ) {\n  int i;\n  int max = arr [ 0 ];\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ];\n  return max;\n}"}
{"source": "java", "target": "python", "source_program": " static int largest ( ) {\n  int i ;\n  int max = arr [ 0 ] ;\n  for ( i = 1 ;\n  i < arr . length ;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;\n  return max ;\n}", "target_program": " def largest ( arr , n ) :\n    max = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if arr [ i ] > max :\n            max = arr [ i ]\n    return max"}
{"source": "java", "target": "cpp", "source_program": " static int largest ( ) {\n  int i ;\n  int max = arr [ 0 ] ;\n  for ( i = 1 ;\n  i < arr . length ;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;\n  return max ;\n}", "target_program": " int largest ( int arr [ ], int n ) {\n  int i;\n  int max = arr [ 0 ];\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ];\n  return max;\n}"}
{"source": "cpp", "target": "java", "source_program": " int largest ( int arr [ ], int n ) {\n  int i;\n  int max = arr [ 0 ];\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ];\n  return max;\n}", "target_program": " static int largest ( ) {\n  int i ;\n  int max = arr [ 0 ] ;\n  for ( i = 1 ;\n  i < arr . length ;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ] ;\n  return max ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int largest ( int arr [ ], int n ) {\n  int i;\n  int max = arr [ 0 ];\n  for ( i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > max ) max = arr [ i ];\n  return max;\n}", "target_program": " def largest ( arr , n ) :\n    max = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if arr [ i ] > max :\n            max = arr [ i ]\n    return max"}
{"source": "python", "target": "java", "source_program": " def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = 0\n    for i in range ( min ( x , y ) , n + 1 ) :\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n    return result", "target_program": " static int countNums ( int n , int x , int y ) {\n  boolean [ ] arr = new boolean [ n + 1 ] ;\n  if ( x <= n ) arr [ x ] = true ;\n  if ( y <= n ) arr [ y ] = true ;\n  int result = 0 ;\n  for ( int i = Math . min ( x , y ) ;\n  i <= n ;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true ;\n      if ( i + y <= n ) arr [ i + y ] = true ;\n      result ++ ;\n    }\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = 0\n    for i in range ( min ( x , y ) , n + 1 ) :\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n    return result", "target_program": " int countNums ( int n, int x, int y ) {\n  vector < bool > arr ( n + 1, false );\n  if ( x <= n ) arr [ x ] = true;\n  if ( y <= n ) arr [ y ] = true;\n  int result = 0;\n  for ( int i = min ( x, y );\n  i <= n;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true;\n      if ( i + y <= n ) arr [ i + y ] = true;\n      result ++;\n    }\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNums ( int n , int x , int y ) {\n  boolean [ ] arr = new boolean [ n + 1 ] ;\n  if ( x <= n ) arr [ x ] = true ;\n  if ( y <= n ) arr [ y ] = true ;\n  int result = 0 ;\n  for ( int i = Math . min ( x , y ) ;\n  i <= n ;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true ;\n      if ( i + y <= n ) arr [ i + y ] = true ;\n      result ++ ;\n    }\n  }\n  return result ;\n}", "target_program": " def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = 0\n    for i in range ( min ( x , y ) , n + 1 ) :\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countNums ( int n , int x , int y ) {\n  boolean [ ] arr = new boolean [ n + 1 ] ;\n  if ( x <= n ) arr [ x ] = true ;\n  if ( y <= n ) arr [ y ] = true ;\n  int result = 0 ;\n  for ( int i = Math . min ( x , y ) ;\n  i <= n ;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true ;\n      if ( i + y <= n ) arr [ i + y ] = true ;\n      result ++ ;\n    }\n  }\n  return result ;\n}", "target_program": " int countNums ( int n, int x, int y ) {\n  vector < bool > arr ( n + 1, false );\n  if ( x <= n ) arr [ x ] = true;\n  if ( y <= n ) arr [ y ] = true;\n  int result = 0;\n  for ( int i = min ( x, y );\n  i <= n;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true;\n      if ( i + y <= n ) arr [ i + y ] = true;\n      result ++;\n    }\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countNums ( int n, int x, int y ) {\n  vector < bool > arr ( n + 1, false );\n  if ( x <= n ) arr [ x ] = true;\n  if ( y <= n ) arr [ y ] = true;\n  int result = 0;\n  for ( int i = min ( x, y );\n  i <= n;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true;\n      if ( i + y <= n ) arr [ i + y ] = true;\n      result ++;\n    }\n  }\n  return result;\n}", "target_program": " static int countNums ( int n , int x , int y ) {\n  boolean [ ] arr = new boolean [ n + 1 ] ;\n  if ( x <= n ) arr [ x ] = true ;\n  if ( y <= n ) arr [ y ] = true ;\n  int result = 0 ;\n  for ( int i = Math . min ( x , y ) ;\n  i <= n ;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true ;\n      if ( i + y <= n ) arr [ i + y ] = true ;\n      result ++ ;\n    }\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countNums ( int n, int x, int y ) {\n  vector < bool > arr ( n + 1, false );\n  if ( x <= n ) arr [ x ] = true;\n  if ( y <= n ) arr [ y ] = true;\n  int result = 0;\n  for ( int i = min ( x, y );\n  i <= n;\n  i ++ ) {\n    if ( arr [ i ] ) {\n      if ( i + x <= n ) arr [ i + x ] = true;\n      if ( i + y <= n ) arr [ i + y ] = true;\n      result ++;\n    }\n  }\n  return result;\n}", "target_program": " def countNums ( n , x , y ) :\n    arr = [ False for i in range ( n + 2 ) ]\n    if ( x <= n ) :\n        arr [ x ] = True\n    if ( y <= n ) :\n        arr [ y ] = True\n    result = 0\n    for i in range ( min ( x , y ) , n + 1 ) :\n        if ( arr [ i ] ) :\n            if ( i + x <= n ) :\n                arr [ i + x ] = True\n            if ( i + y <= n ) :\n                arr [ i + y ] = True\n            result = result + 1\n    return result"}
{"source": "python", "target": "java", "source_program": " def bubbleSort ( arr ) :\n    n = len ( arr )\n    for i in range ( n ) :\n        swapped = False\n        for j in range ( 0 , n - i - 1 ) :\n            if arr [ j ] > arr [ j + 1 ] :\n                arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , arr [ j ]\n                swapped = True\n        if swapped == False :\n            break", "target_program": " static void bubbleSort ( int arr [ ] , int n ) {\n  int i , j , temp ;\n  boolean swapped ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    swapped = false ;\n    for ( j = 0 ;\n    j < n - i - 1 ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        temp = arr [ j ] ;\n        arr [ j ] = arr [ j + 1 ] ;\n        arr [ j + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def bubbleSort ( arr ) :\n    n = len ( arr )\n    for i in range ( n ) :\n        swapped = False\n        for j in range ( 0 , n - i - 1 ) :\n            if arr [ j ] > arr [ j + 1 ] :\n                arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , arr [ j ]\n                swapped = True\n        if swapped == False :\n            break", "target_program": " void bubbleSort ( int arr [ ], int n ) {\n  int i, j;\n  bool swapped;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    swapped = false;\n    for ( j = 0;\n    j < n - i - 1;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        swap ( & arr [ j ], & arr [ j + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( swapped == false ) break;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void bubbleSort ( int arr [ ] , int n ) {\n  int i , j , temp ;\n  boolean swapped ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    swapped = false ;\n    for ( j = 0 ;\n    j < n - i - 1 ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        temp = arr [ j ] ;\n        arr [ j ] = arr [ j + 1 ] ;\n        arr [ j + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n  }\n}", "target_program": " def bubbleSort ( arr ) :\n    n = len ( arr )\n    for i in range ( n ) :\n        swapped = False\n        for j in range ( 0 , n - i - 1 ) :\n            if arr [ j ] > arr [ j + 1 ] :\n                arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , arr [ j ]\n                swapped = True\n        if swapped == False :\n            break"}
{"source": "java", "target": "cpp", "source_program": " static void bubbleSort ( int arr [ ] , int n ) {\n  int i , j , temp ;\n  boolean swapped ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    swapped = false ;\n    for ( j = 0 ;\n    j < n - i - 1 ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        temp = arr [ j ] ;\n        arr [ j ] = arr [ j + 1 ] ;\n        arr [ j + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n  }\n}", "target_program": " void bubbleSort ( int arr [ ], int n ) {\n  int i, j;\n  bool swapped;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    swapped = false;\n    for ( j = 0;\n    j < n - i - 1;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        swap ( & arr [ j ], & arr [ j + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( swapped == false ) break;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void bubbleSort ( int arr [ ], int n ) {\n  int i, j;\n  bool swapped;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    swapped = false;\n    for ( j = 0;\n    j < n - i - 1;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        swap ( & arr [ j ], & arr [ j + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( swapped == false ) break;\n  }\n}", "target_program": " static void bubbleSort ( int arr [ ] , int n ) {\n  int i , j , temp ;\n  boolean swapped ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    swapped = false ;\n    for ( j = 0 ;\n    j < n - i - 1 ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        temp = arr [ j ] ;\n        arr [ j ] = arr [ j + 1 ] ;\n        arr [ j + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void bubbleSort ( int arr [ ], int n ) {\n  int i, j;\n  bool swapped;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    swapped = false;\n    for ( j = 0;\n    j < n - i - 1;\n    j ++ ) {\n      if ( arr [ j ] > arr [ j + 1 ] ) {\n        swap ( & arr [ j ], & arr [ j + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( swapped == false ) break;\n  }\n}", "target_program": " def bubbleSort ( arr ) :\n    n = len ( arr )\n    for i in range ( n ) :\n        swapped = False\n        for j in range ( 0 , n - i - 1 ) :\n            if arr [ j ] > arr [ j + 1 ] :\n                arr [ j ] , arr [ j + 1 ] = arr [ j + 1 ] , arr [ j ]\n                swapped = True\n        if swapped == False :\n            break"}
{"source": "python", "target": "java", "source_program": " def maxSum ( grid , n ) :\n    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )\n    excl = 0\n    for i in range ( 1 , n ) :\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] )\n        excl = excl_new\n    return max ( excl , incl )", "target_program": " public static int maxSum ( int grid [ ] [ ] , int n ) {\n  int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ;\n  int excl = 0 , excl_new ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    excl_new = Math . max ( excl , incl ) ;\n    incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ;\n    excl = excl_new ;\n  }\n  return Math . max ( excl , incl ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSum ( grid , n ) :\n    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )\n    excl = 0\n    for i in range ( 1 , n ) :\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] )\n        excl = excl_new\n    return max ( excl , incl )", "target_program": " int maxSum ( int grid [ 2 ] [ MAX ], int n ) {\n  int incl = max ( grid [ 0 ] [ 0 ], grid [ 1 ] [ 0 ] );\n  int excl = 0, excl_new;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    excl_new = max ( excl, incl );\n    incl = excl + max ( grid [ 0 ] [ i ], grid [ 1 ] [ i ] );\n    excl = excl_new;\n  }\n  return max ( excl, incl );\n}"}
{"source": "java", "target": "python", "source_program": " public static int maxSum ( int grid [ ] [ ] , int n ) {\n  int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ;\n  int excl = 0 , excl_new ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    excl_new = Math . max ( excl , incl ) ;\n    incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ;\n    excl = excl_new ;\n  }\n  return Math . max ( excl , incl ) ;\n}", "target_program": " def maxSum ( grid , n ) :\n    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )\n    excl = 0\n    for i in range ( 1 , n ) :\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] )\n        excl = excl_new\n    return max ( excl , incl )"}
{"source": "java", "target": "cpp", "source_program": " public static int maxSum ( int grid [ ] [ ] , int n ) {\n  int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ;\n  int excl = 0 , excl_new ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    excl_new = Math . max ( excl , incl ) ;\n    incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ;\n    excl = excl_new ;\n  }\n  return Math . max ( excl , incl ) ;\n}", "target_program": " int maxSum ( int grid [ 2 ] [ MAX ], int n ) {\n  int incl = max ( grid [ 0 ] [ 0 ], grid [ 1 ] [ 0 ] );\n  int excl = 0, excl_new;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    excl_new = max ( excl, incl );\n    incl = excl + max ( grid [ 0 ] [ i ], grid [ 1 ] [ i ] );\n    excl = excl_new;\n  }\n  return max ( excl, incl );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSum ( int grid [ 2 ] [ MAX ], int n ) {\n  int incl = max ( grid [ 0 ] [ 0 ], grid [ 1 ] [ 0 ] );\n  int excl = 0, excl_new;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    excl_new = max ( excl, incl );\n    incl = excl + max ( grid [ 0 ] [ i ], grid [ 1 ] [ i ] );\n    excl = excl_new;\n  }\n  return max ( excl, incl );\n}", "target_program": " public static int maxSum ( int grid [ ] [ ] , int n ) {\n  int incl = Math . max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] ) ;\n  int excl = 0 , excl_new ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    excl_new = Math . max ( excl , incl ) ;\n    incl = excl + Math . max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] ) ;\n    excl = excl_new ;\n  }\n  return Math . max ( excl , incl ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSum ( int grid [ 2 ] [ MAX ], int n ) {\n  int incl = max ( grid [ 0 ] [ 0 ], grid [ 1 ] [ 0 ] );\n  int excl = 0, excl_new;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    excl_new = max ( excl, incl );\n    incl = excl + max ( grid [ 0 ] [ i ], grid [ 1 ] [ i ] );\n    excl = excl_new;\n  }\n  return max ( excl, incl );\n}", "target_program": " def maxSum ( grid , n ) :\n    incl = max ( grid [ 0 ] [ 0 ] , grid [ 1 ] [ 0 ] )\n    excl = 0\n    for i in range ( 1 , n ) :\n        excl_new = max ( excl , incl )\n        incl = excl + max ( grid [ 0 ] [ i ] , grid [ 1 ] [ i ] )\n        excl = excl_new\n    return max ( excl , incl )"}
{"source": "python", "target": "java", "source_program": " def gcdOfFactorial ( m , n ) :\n    return math.factorial ( min ( m , n ) )", "target_program": " static int gcdOfFactorial ( int m , int n ) {\n  int min = m < n ? m : n ;\n  return factorial ( min ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def gcdOfFactorial ( m , n ) :\n    return math.factorial ( min ( m , n ) )", "target_program": " int gcdOfFactorial ( int m, int n ) {\n  return factorial ( min ( m, n ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int gcdOfFactorial ( int m , int n ) {\n  int min = m < n ? m : n ;\n  return factorial ( min ) ;\n}", "target_program": " def gcdOfFactorial ( m , n ) :\n    return math.factorial ( min ( m , n ) )"}
{"source": "java", "target": "cpp", "source_program": " static int gcdOfFactorial ( int m , int n ) {\n  int min = m < n ? m : n ;\n  return factorial ( min ) ;\n}", "target_program": " int gcdOfFactorial ( int m, int n ) {\n  return factorial ( min ( m, n ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int gcdOfFactorial ( int m, int n ) {\n  return factorial ( min ( m, n ) );\n}", "target_program": " static int gcdOfFactorial ( int m , int n ) {\n  int min = m < n ? m : n ;\n  return factorial ( min ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int gcdOfFactorial ( int m, int n ) {\n  return factorial ( min ( m, n ) );\n}", "target_program": " def gcdOfFactorial ( m , n ) :\n    return math.factorial ( min ( m , n ) )"}
{"source": "python", "target": "java", "source_program": " def SectorArea ( radius , angle ) :\n    pi = 22 / 7\n    if angle >= 360 :\n        print ( \"Angle not possible\" )\n        return\n    else :\n        sector = ( pi * radius ** 2 ) * ( angle / 360 )\n        print ( sector )\n        return", "target_program": " static void SectorArea ( double radius , double angle ) {\n  if ( angle >= 360 ) System . out . println ( \"Angle not possible\" ) ;\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 ) ;\n    System . out . println ( sector ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def SectorArea ( radius , angle ) :\n    pi = 22 / 7\n    if angle >= 360 :\n        print ( \"Angle not possible\" )\n        return\n    else :\n        sector = ( pi * radius ** 2 ) * ( angle / 360 )\n        print ( sector )\n        return", "target_program": " void SectorArea ( double radius, double angle ) {\n  if ( angle >= 360 ) cout << \"Angle not possible\";\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 );\n    cout << sector;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void SectorArea ( double radius , double angle ) {\n  if ( angle >= 360 ) System . out . println ( \"Angle not possible\" ) ;\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 ) ;\n    System . out . println ( sector ) ;\n  }\n}", "target_program": " def SectorArea ( radius , angle ) :\n    pi = 22 / 7\n    if angle >= 360 :\n        print ( \"Angle not possible\" )\n        return\n    else :\n        sector = ( pi * radius ** 2 ) * ( angle / 360 )\n        print ( sector )\n        return"}
{"source": "java", "target": "cpp", "source_program": " static void SectorArea ( double radius , double angle ) {\n  if ( angle >= 360 ) System . out . println ( \"Angle not possible\" ) ;\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 ) ;\n    System . out . println ( sector ) ;\n  }\n}", "target_program": " void SectorArea ( double radius, double angle ) {\n  if ( angle >= 360 ) cout << \"Angle not possible\";\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 );\n    cout << sector;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void SectorArea ( double radius, double angle ) {\n  if ( angle >= 360 ) cout << \"Angle not possible\";\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 );\n    cout << sector;\n  }\n}", "target_program": " static void SectorArea ( double radius , double angle ) {\n  if ( angle >= 360 ) System . out . println ( \"Angle not possible\" ) ;\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 ) ;\n    System . out . println ( sector ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void SectorArea ( double radius, double angle ) {\n  if ( angle >= 360 ) cout << \"Angle not possible\";\n  else {\n    double sector = ( ( 22 * radius * radius ) / 7 ) * ( angle / 360 );\n    cout << sector;\n  }\n}", "target_program": " def SectorArea ( radius , angle ) :\n    pi = 22 / 7\n    if angle >= 360 :\n        print ( \"Angle not possible\" )\n        return\n    else :\n        sector = ( pi * radius ** 2 ) * ( angle / 360 )\n        print ( sector )\n        return"}
{"source": "python", "target": "java", "source_program": " def countSeq ( n ) :\n    nCr = 1\n    res = 1\n    for r in range ( 1 , n + 1 ) :\n        nCr = ( nCr * ( n + 1 - r ) ) / r ;\n        res += nCr * nCr ;\n    return res ;", "target_program": " static int countSeq ( int n ) {\n  int nCr = 1 , res = 1 ;\n  for ( int r = 1 ;\n  r <= n ;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r ;\n    res += nCr * nCr ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSeq ( n ) :\n    nCr = 1\n    res = 1\n    for r in range ( 1 , n + 1 ) :\n        nCr = ( nCr * ( n + 1 - r ) ) / r ;\n        res += nCr * nCr ;\n    return res ;", "target_program": " int countSeq ( int n ) {\n  int nCr = 1, res = 1;\n  for ( int r = 1;\n  r <= n;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r;\n    res += nCr * nCr;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSeq ( int n ) {\n  int nCr = 1 , res = 1 ;\n  for ( int r = 1 ;\n  r <= n ;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r ;\n    res += nCr * nCr ;\n  }\n  return res ;\n}", "target_program": " def countSeq ( n ) :\n    nCr = 1\n    res = 1\n    for r in range ( 1 , n + 1 ) :\n        nCr = ( nCr * ( n + 1 - r ) ) / r ;\n        res += nCr * nCr ;\n    return res ;"}
{"source": "java", "target": "cpp", "source_program": " static int countSeq ( int n ) {\n  int nCr = 1 , res = 1 ;\n  for ( int r = 1 ;\n  r <= n ;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r ;\n    res += nCr * nCr ;\n  }\n  return res ;\n}", "target_program": " int countSeq ( int n ) {\n  int nCr = 1, res = 1;\n  for ( int r = 1;\n  r <= n;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r;\n    res += nCr * nCr;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSeq ( int n ) {\n  int nCr = 1, res = 1;\n  for ( int r = 1;\n  r <= n;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r;\n    res += nCr * nCr;\n  }\n  return res;\n}", "target_program": " static int countSeq ( int n ) {\n  int nCr = 1 , res = 1 ;\n  for ( int r = 1 ;\n  r <= n ;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r ;\n    res += nCr * nCr ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSeq ( int n ) {\n  int nCr = 1, res = 1;\n  for ( int r = 1;\n  r <= n;\n  r ++ ) {\n    nCr = ( nCr * ( n + 1 - r ) ) / r;\n    res += nCr * nCr;\n  }\n  return res;\n}", "target_program": " def countSeq ( n ) :\n    nCr = 1\n    res = 1\n    for r in range ( 1 , n + 1 ) :\n        nCr = ( nCr * ( n + 1 - r ) ) / r ;\n        res += nCr * nCr ;\n    return res ;"}
{"source": "python", "target": "java", "source_program": " def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( 0 , n ) :\n        Sum [ i ] [ i ] = int ( string [ i ] )\n    for length in range ( 2 , n + 1 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n    return maxlen", "target_program": " static int findLength ( String str ) {\n  int n = str . length ( ) ;\n  int maxlen = 0 ;\n  int sum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ;\n  for ( int len = 2 ;\n  len <= n ;\n  len ++ ) {\n    for ( int i = 0 ;\n    i < n - len + 1 ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      int k = len / 2 ;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ;\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ;\n    }\n  }\n  return maxlen ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( 0 , n ) :\n        Sum [ i ] [ i ] = int ( string [ i ] )\n    for length in range ( 2 , n + 1 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n    return maxlen", "target_program": " int findLength ( char * str ) {\n  int n = strlen ( str );\n  int maxlen = 0;\n  int sum [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum [ i ] [ i ] = str [ i ] - '0';\n  for ( int len = 2;\n  len <= n;\n  len ++ ) {\n    for ( int i = 0;\n    i < n - len + 1;\n    i ++ ) {\n      int j = i + len - 1;\n      int k = len / 2;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ];\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len;\n    }\n  }\n  return maxlen;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLength ( String str ) {\n  int n = str . length ( ) ;\n  int maxlen = 0 ;\n  int sum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ;\n  for ( int len = 2 ;\n  len <= n ;\n  len ++ ) {\n    for ( int i = 0 ;\n    i < n - len + 1 ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      int k = len / 2 ;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ;\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ;\n    }\n  }\n  return maxlen ;\n}", "target_program": " def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( 0 , n ) :\n        Sum [ i ] [ i ] = int ( string [ i ] )\n    for length in range ( 2 , n + 1 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n    return maxlen"}
{"source": "java", "target": "cpp", "source_program": " static int findLength ( String str ) {\n  int n = str . length ( ) ;\n  int maxlen = 0 ;\n  int sum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ;\n  for ( int len = 2 ;\n  len <= n ;\n  len ++ ) {\n    for ( int i = 0 ;\n    i < n - len + 1 ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      int k = len / 2 ;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ;\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ;\n    }\n  }\n  return maxlen ;\n}", "target_program": " int findLength ( char * str ) {\n  int n = strlen ( str );\n  int maxlen = 0;\n  int sum [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum [ i ] [ i ] = str [ i ] - '0';\n  for ( int len = 2;\n  len <= n;\n  len ++ ) {\n    for ( int i = 0;\n    i < n - len + 1;\n    i ++ ) {\n      int j = i + len - 1;\n      int k = len / 2;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ];\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len;\n    }\n  }\n  return maxlen;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLength ( char * str ) {\n  int n = strlen ( str );\n  int maxlen = 0;\n  int sum [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum [ i ] [ i ] = str [ i ] - '0';\n  for ( int len = 2;\n  len <= n;\n  len ++ ) {\n    for ( int i = 0;\n    i < n - len + 1;\n    i ++ ) {\n      int j = i + len - 1;\n      int k = len / 2;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ];\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len;\n    }\n  }\n  return maxlen;\n}", "target_program": " static int findLength ( String str ) {\n  int n = str . length ( ) ;\n  int maxlen = 0 ;\n  int sum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum [ i ] [ i ] = str . charAt ( i ) - '0' ;\n  for ( int len = 2 ;\n  len <= n ;\n  len ++ ) {\n    for ( int i = 0 ;\n    i < n - len + 1 ;\n    i ++ ) {\n      int j = i + len - 1 ;\n      int k = len / 2 ;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ] ;\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len ;\n    }\n  }\n  return maxlen ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLength ( char * str ) {\n  int n = strlen ( str );\n  int maxlen = 0;\n  int sum [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum [ i ] [ i ] = str [ i ] - '0';\n  for ( int len = 2;\n  len <= n;\n  len ++ ) {\n    for ( int i = 0;\n    i < n - len + 1;\n    i ++ ) {\n      int j = i + len - 1;\n      int k = len / 2;\n      sum [ i ] [ j ] = sum [ i ] [ j - k ] + sum [ j - k + 1 ] [ j ];\n      if ( len % 2 == 0 && sum [ i ] [ j - k ] == sum [ ( j - k + 1 ) ] [ j ] && len > maxlen ) maxlen = len;\n    }\n  }\n  return maxlen;\n}", "target_program": " def findLength ( string ) :\n    n = len ( string )\n    maxlen = 0\n    Sum = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( 0 , n ) :\n        Sum [ i ] [ i ] = int ( string [ i ] )\n    for length in range ( 2 , n + 1 ) :\n        for i in range ( 0 , n - length + 1 ) :\n            j = i + length - 1\n            k = length // 2\n            Sum [ i ] [ j ] = ( Sum [ i ] [ j - k ] + Sum [ j - k + 1 ] [ j ] )\n            if ( length % 2 == 0 and Sum [ i ] [ j - k ] == Sum [ ( j - k + 1 ) ] [ j ] and length > maxlen ) :\n                maxlen = length\n    return maxlen"}
{"source": "python", "target": "java", "source_program": " def sortInWave ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 1 , 2 ) :\n        arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]", "target_program": " void sortInWave ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i += 2 ) swap ( arr , i , i + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sortInWave ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 1 , 2 ) :\n        arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]", "target_program": " void sortInWave ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i += 2 ) swap ( & arr [ i ], & arr [ i + 1 ] );\n}"}
{"source": "java", "target": "python", "source_program": " void sortInWave ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i += 2 ) swap ( arr , i , i + 1 ) ;\n}", "target_program": " def sortInWave ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 1 , 2 ) :\n        arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]"}
{"source": "java", "target": "cpp", "source_program": " void sortInWave ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i += 2 ) swap ( arr , i , i + 1 ) ;\n}", "target_program": " void sortInWave ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i += 2 ) swap ( & arr [ i ], & arr [ i + 1 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void sortInWave ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i += 2 ) swap ( & arr [ i ], & arr [ i + 1 ] );\n}", "target_program": " void sortInWave ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i += 2 ) swap ( arr , i , i + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void sortInWave ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i += 2 ) swap ( & arr [ i ], & arr [ i + 1 ] );\n}", "target_program": " def sortInWave ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 1 , 2 ) :\n        arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]"}
{"source": "python", "target": "java", "source_program": " def compute ( a , b ) :\n    AM = ( a + b ) / 2\n    GM = math.sqrt ( a * b )\n    HM = ( GM * GM ) / AM\n    return HM", "target_program": " static double compute ( int a , int b ) {\n  double AM , GM , HM ;\n  AM = ( a + b ) / 2 ;\n  GM = Math . sqrt ( a * b ) ;\n  HM = ( GM * GM ) / AM ;\n  return HM ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def compute ( a , b ) :\n    AM = ( a + b ) / 2\n    GM = math.sqrt ( a * b )\n    HM = ( GM * GM ) / AM\n    return HM", "target_program": " double compute ( int a, int b ) {\n  double AM, GM, HM;\n  AM = ( a + b ) / 2;\n  GM = sqrt ( a * b );\n  HM = ( GM * GM ) / AM;\n  return HM;\n}"}
{"source": "java", "target": "python", "source_program": " static double compute ( int a , int b ) {\n  double AM , GM , HM ;\n  AM = ( a + b ) / 2 ;\n  GM = Math . sqrt ( a * b ) ;\n  HM = ( GM * GM ) / AM ;\n  return HM ;\n}", "target_program": " def compute ( a , b ) :\n    AM = ( a + b ) / 2\n    GM = math.sqrt ( a * b )\n    HM = ( GM * GM ) / AM\n    return HM"}
{"source": "java", "target": "cpp", "source_program": " static double compute ( int a , int b ) {\n  double AM , GM , HM ;\n  AM = ( a + b ) / 2 ;\n  GM = Math . sqrt ( a * b ) ;\n  HM = ( GM * GM ) / AM ;\n  return HM ;\n}", "target_program": " double compute ( int a, int b ) {\n  double AM, GM, HM;\n  AM = ( a + b ) / 2;\n  GM = sqrt ( a * b );\n  HM = ( GM * GM ) / AM;\n  return HM;\n}"}
{"source": "cpp", "target": "java", "source_program": " double compute ( int a, int b ) {\n  double AM, GM, HM;\n  AM = ( a + b ) / 2;\n  GM = sqrt ( a * b );\n  HM = ( GM * GM ) / AM;\n  return HM;\n}", "target_program": " static double compute ( int a , int b ) {\n  double AM , GM , HM ;\n  AM = ( a + b ) / 2 ;\n  GM = Math . sqrt ( a * b ) ;\n  HM = ( GM * GM ) / AM ;\n  return HM ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double compute ( int a, int b ) {\n  double AM, GM, HM;\n  AM = ( a + b ) / 2;\n  GM = sqrt ( a * b );\n  HM = ( GM * GM ) / AM;\n  return HM;\n}", "target_program": " def compute ( a , b ) :\n    AM = ( a + b ) / 2\n    GM = math.sqrt ( a * b )\n    HM = ( GM * GM ) / AM\n    return HM"}
{"source": "python", "target": "java", "source_program": " def countBT ( h ) :\n    MOD = 1000000007\n    dp = [ 0 for i in range ( h + 1 ) ]\n    dp [ 0 ] = 1\n    dp [ 1 ] = 1\n    for i in range ( 2 , h + 1 ) :\n        dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD\n    return dp [ h ]", "target_program": " public static long countBT ( int h ) {\n  long [ ] dp = new long [ h + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= h ;\n  ++ i ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD ;\n  return dp [ h ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countBT ( h ) :\n    MOD = 1000000007\n    dp = [ 0 for i in range ( h + 1 ) ]\n    dp [ 0 ] = 1\n    dp [ 1 ] = 1\n    for i in range ( 2 , h + 1 ) :\n        dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD\n    return dp [ h ]", "target_program": " long long int countBT ( int h ) {\n  long long int dp [ h + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= h;\n  i ++ ) {\n    dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % mod + dp [ i - 1 ] ) % mod ) % mod;\n  }\n  return dp [ h ];\n}"}
{"source": "java", "target": "python", "source_program": " public static long countBT ( int h ) {\n  long [ ] dp = new long [ h + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= h ;\n  ++ i ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD ;\n  return dp [ h ] ;\n}", "target_program": " def countBT ( h ) :\n    MOD = 1000000007\n    dp = [ 0 for i in range ( h + 1 ) ]\n    dp [ 0 ] = 1\n    dp [ 1 ] = 1\n    for i in range ( 2 , h + 1 ) :\n        dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD\n    return dp [ h ]"}
{"source": "java", "target": "cpp", "source_program": " public static long countBT ( int h ) {\n  long [ ] dp = new long [ h + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= h ;\n  ++ i ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD ;\n  return dp [ h ] ;\n}", "target_program": " long long int countBT ( int h ) {\n  long long int dp [ h + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= h;\n  i ++ ) {\n    dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % mod + dp [ i - 1 ] ) % mod ) % mod;\n  }\n  return dp [ h ];\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int countBT ( int h ) {\n  long long int dp [ h + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= h;\n  i ++ ) {\n    dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % mod + dp [ i - 1 ] ) % mod ) % mod;\n  }\n  return dp [ h ];\n}", "target_program": " public static long countBT ( int h ) {\n  long [ ] dp = new long [ h + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= h ;\n  ++ i ) dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD ;\n  return dp [ h ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int countBT ( int h ) {\n  long long int dp [ h + 1 ];\n  dp [ 0 ] = dp [ 1 ] = 1;\n  for ( int i = 2;\n  i <= h;\n  i ++ ) {\n    dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % mod + dp [ i - 1 ] ) % mod ) % mod;\n  }\n  return dp [ h ];\n}", "target_program": " def countBT ( h ) :\n    MOD = 1000000007\n    dp = [ 0 for i in range ( h + 1 ) ]\n    dp [ 0 ] = 1\n    dp [ 1 ] = 1\n    for i in range ( 2 , h + 1 ) :\n        dp [ i ] = ( dp [ i - 1 ] * ( ( 2 * dp [ i - 2 ] ) % MOD + dp [ i - 1 ] ) % MOD ) % MOD\n    return dp [ h ]"}
{"source": "python", "target": "java", "source_program": " def getNthUglyNo ( n ) :\n    ugly = [ 0 ] * n\n    ugly [ 0 ] = 1\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    for l in range ( 1 , n ) :\n        ugly [ l ] = min ( next_multiple_of_2 , next_multiple_of_3 , next_multiple_of_5 )\n        if ugly [ l ] == next_multiple_of_2 :\n            i2 += 1\n            next_multiple_of_2 = ugly [ i2 ] * 2\n        if ugly [ l ] == next_multiple_of_3 :\n            i3 += 1\n            next_multiple_of_3 = ugly [ i3 ] * 3\n        if ugly [ l ] == next_multiple_of_5 :\n            i5 += 1\n            next_multiple_of_5 = ugly [ i5 ] * 5\n    return ugly [ - 1 ]", "target_program": " int getNthUglyNo ( int n ) {\n  int ugly [ ] = new int [ n ] ;\n  int i2 = 0 , i3 = 0 , i5 = 0 ;\n  int next_multiple_of_2 = 2 ;\n  int next_multiple_of_3 = 3 ;\n  int next_multiple_of_5 = 5 ;\n  int next_ugly_no = 1 ;\n  ugly [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    next_ugly_no = Math . min ( next_multiple_of_2 , Math . min ( next_multiple_of_3 , next_multiple_of_5 ) ) ;\n    ugly [ i ] = next_ugly_no ;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1 ;\n      next_multiple_of_2 = ugly [ i2 ] * 2 ;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1 ;\n      next_multiple_of_3 = ugly [ i3 ] * 3 ;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1 ;\n      next_multiple_of_5 = ugly [ i5 ] * 5 ;\n    }\n  }\n  return next_ugly_no ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getNthUglyNo ( n ) :\n    ugly = [ 0 ] * n\n    ugly [ 0 ] = 1\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    for l in range ( 1 , n ) :\n        ugly [ l ] = min ( next_multiple_of_2 , next_multiple_of_3 , next_multiple_of_5 )\n        if ugly [ l ] == next_multiple_of_2 :\n            i2 += 1\n            next_multiple_of_2 = ugly [ i2 ] * 2\n        if ugly [ l ] == next_multiple_of_3 :\n            i3 += 1\n            next_multiple_of_3 = ugly [ i3 ] * 3\n        if ugly [ l ] == next_multiple_of_5 :\n            i5 += 1\n            next_multiple_of_5 = ugly [ i5 ] * 5\n    return ugly [ - 1 ]", "target_program": " unsigned getNthUglyNo ( unsigned n ) {\n  unsigned ugly [ n ];\n  unsigned i2 = 0, i3 = 0, i5 = 0;\n  unsigned next_multiple_of_2 = 2;\n  unsigned next_multiple_of_3 = 3;\n  unsigned next_multiple_of_5 = 5;\n  unsigned next_ugly_no = 1;\n  ugly [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    next_ugly_no = min ( next_multiple_of_2, min ( next_multiple_of_3, next_multiple_of_5 ) );\n    ugly [ i ] = next_ugly_no;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1;\n      next_multiple_of_2 = ugly [ i2 ] * 2;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1;\n      next_multiple_of_3 = ugly [ i3 ] * 3;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1;\n      next_multiple_of_5 = ugly [ i5 ] * 5;\n    }\n  }\n  return next_ugly_no;\n}"}
{"source": "java", "target": "python", "source_program": " int getNthUglyNo ( int n ) {\n  int ugly [ ] = new int [ n ] ;\n  int i2 = 0 , i3 = 0 , i5 = 0 ;\n  int next_multiple_of_2 = 2 ;\n  int next_multiple_of_3 = 3 ;\n  int next_multiple_of_5 = 5 ;\n  int next_ugly_no = 1 ;\n  ugly [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    next_ugly_no = Math . min ( next_multiple_of_2 , Math . min ( next_multiple_of_3 , next_multiple_of_5 ) ) ;\n    ugly [ i ] = next_ugly_no ;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1 ;\n      next_multiple_of_2 = ugly [ i2 ] * 2 ;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1 ;\n      next_multiple_of_3 = ugly [ i3 ] * 3 ;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1 ;\n      next_multiple_of_5 = ugly [ i5 ] * 5 ;\n    }\n  }\n  return next_ugly_no ;\n}", "target_program": " def getNthUglyNo ( n ) :\n    ugly = [ 0 ] * n\n    ugly [ 0 ] = 1\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    for l in range ( 1 , n ) :\n        ugly [ l ] = min ( next_multiple_of_2 , next_multiple_of_3 , next_multiple_of_5 )\n        if ugly [ l ] == next_multiple_of_2 :\n            i2 += 1\n            next_multiple_of_2 = ugly [ i2 ] * 2\n        if ugly [ l ] == next_multiple_of_3 :\n            i3 += 1\n            next_multiple_of_3 = ugly [ i3 ] * 3\n        if ugly [ l ] == next_multiple_of_5 :\n            i5 += 1\n            next_multiple_of_5 = ugly [ i5 ] * 5\n    return ugly [ - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " int getNthUglyNo ( int n ) {\n  int ugly [ ] = new int [ n ] ;\n  int i2 = 0 , i3 = 0 , i5 = 0 ;\n  int next_multiple_of_2 = 2 ;\n  int next_multiple_of_3 = 3 ;\n  int next_multiple_of_5 = 5 ;\n  int next_ugly_no = 1 ;\n  ugly [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    next_ugly_no = Math . min ( next_multiple_of_2 , Math . min ( next_multiple_of_3 , next_multiple_of_5 ) ) ;\n    ugly [ i ] = next_ugly_no ;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1 ;\n      next_multiple_of_2 = ugly [ i2 ] * 2 ;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1 ;\n      next_multiple_of_3 = ugly [ i3 ] * 3 ;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1 ;\n      next_multiple_of_5 = ugly [ i5 ] * 5 ;\n    }\n  }\n  return next_ugly_no ;\n}", "target_program": " unsigned getNthUglyNo ( unsigned n ) {\n  unsigned ugly [ n ];\n  unsigned i2 = 0, i3 = 0, i5 = 0;\n  unsigned next_multiple_of_2 = 2;\n  unsigned next_multiple_of_3 = 3;\n  unsigned next_multiple_of_5 = 5;\n  unsigned next_ugly_no = 1;\n  ugly [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    next_ugly_no = min ( next_multiple_of_2, min ( next_multiple_of_3, next_multiple_of_5 ) );\n    ugly [ i ] = next_ugly_no;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1;\n      next_multiple_of_2 = ugly [ i2 ] * 2;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1;\n      next_multiple_of_3 = ugly [ i3 ] * 3;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1;\n      next_multiple_of_5 = ugly [ i5 ] * 5;\n    }\n  }\n  return next_ugly_no;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned getNthUglyNo ( unsigned n ) {\n  unsigned ugly [ n ];\n  unsigned i2 = 0, i3 = 0, i5 = 0;\n  unsigned next_multiple_of_2 = 2;\n  unsigned next_multiple_of_3 = 3;\n  unsigned next_multiple_of_5 = 5;\n  unsigned next_ugly_no = 1;\n  ugly [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    next_ugly_no = min ( next_multiple_of_2, min ( next_multiple_of_3, next_multiple_of_5 ) );\n    ugly [ i ] = next_ugly_no;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1;\n      next_multiple_of_2 = ugly [ i2 ] * 2;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1;\n      next_multiple_of_3 = ugly [ i3 ] * 3;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1;\n      next_multiple_of_5 = ugly [ i5 ] * 5;\n    }\n  }\n  return next_ugly_no;\n}", "target_program": " int getNthUglyNo ( int n ) {\n  int ugly [ ] = new int [ n ] ;\n  int i2 = 0 , i3 = 0 , i5 = 0 ;\n  int next_multiple_of_2 = 2 ;\n  int next_multiple_of_3 = 3 ;\n  int next_multiple_of_5 = 5 ;\n  int next_ugly_no = 1 ;\n  ugly [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    next_ugly_no = Math . min ( next_multiple_of_2 , Math . min ( next_multiple_of_3 , next_multiple_of_5 ) ) ;\n    ugly [ i ] = next_ugly_no ;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1 ;\n      next_multiple_of_2 = ugly [ i2 ] * 2 ;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1 ;\n      next_multiple_of_3 = ugly [ i3 ] * 3 ;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1 ;\n      next_multiple_of_5 = ugly [ i5 ] * 5 ;\n    }\n  }\n  return next_ugly_no ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned getNthUglyNo ( unsigned n ) {\n  unsigned ugly [ n ];\n  unsigned i2 = 0, i3 = 0, i5 = 0;\n  unsigned next_multiple_of_2 = 2;\n  unsigned next_multiple_of_3 = 3;\n  unsigned next_multiple_of_5 = 5;\n  unsigned next_ugly_no = 1;\n  ugly [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    next_ugly_no = min ( next_multiple_of_2, min ( next_multiple_of_3, next_multiple_of_5 ) );\n    ugly [ i ] = next_ugly_no;\n    if ( next_ugly_no == next_multiple_of_2 ) {\n      i2 = i2 + 1;\n      next_multiple_of_2 = ugly [ i2 ] * 2;\n    }\n    if ( next_ugly_no == next_multiple_of_3 ) {\n      i3 = i3 + 1;\n      next_multiple_of_3 = ugly [ i3 ] * 3;\n    }\n    if ( next_ugly_no == next_multiple_of_5 ) {\n      i5 = i5 + 1;\n      next_multiple_of_5 = ugly [ i5 ] * 5;\n    }\n  }\n  return next_ugly_no;\n}", "target_program": " def getNthUglyNo ( n ) :\n    ugly = [ 0 ] * n\n    ugly [ 0 ] = 1\n    i2 = i3 = i5 = 0\n    next_multiple_of_2 = 2\n    next_multiple_of_3 = 3\n    next_multiple_of_5 = 5\n    for l in range ( 1 , n ) :\n        ugly [ l ] = min ( next_multiple_of_2 , next_multiple_of_3 , next_multiple_of_5 )\n        if ugly [ l ] == next_multiple_of_2 :\n            i2 += 1\n            next_multiple_of_2 = ugly [ i2 ] * 2\n        if ugly [ l ] == next_multiple_of_3 :\n            i3 += 1\n            next_multiple_of_3 = ugly [ i3 ] * 3\n        if ugly [ l ] == next_multiple_of_5 :\n            i5 += 1\n            next_multiple_of_5 = ugly [ i5 ] * 5\n    return ugly [ - 1 ]"}
{"source": "python", "target": "java", "source_program": " def minimumCostOfBreaking ( X , Y , m , n ) :\n    res = 0\n    X.sort ( reverse = True )\n    Y.sort ( reverse = True )\n    hzntl = 1 ; vert = 1\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( X [ i ] > Y [ j ] ) :\n            res += X [ i ] * vert\n            hzntl += 1\n            i += 1\n        else :\n            res += Y [ j ] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while ( i < m ) :\n        total += X [ i ]\n        i += 1\n    res += total * vert\n    total = 0\n    while ( j < n ) :\n        total += Y [ j ]\n        j += 1\n    res += total * hzntl\n    return res", "target_program": " static int minimumCostOfBreaking ( Integer X [ ] , Integer Y [ ] , int m , int n ) {\n  int res = 0 ;\n  Arrays . sort ( X , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( Y , Collections . reverseOrder ( ) ) ;\n  int hzntl = 1 , vert = 1 ;\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert ;\n      hzntl ++ ;\n      i ++ ;\n    }\n    else {\n      res += Y [ j ] * hzntl ;\n      vert ++ ;\n      j ++ ;\n    }\n  }\n  int total = 0 ;\n  while ( i < m ) total += X [ i ++ ] ;\n  res += total * vert ;\n  total = 0 ;\n  while ( j < n ) total += Y [ j ++ ] ;\n  res += total * hzntl ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minimumCostOfBreaking ( X , Y , m , n ) :\n    res = 0\n    X.sort ( reverse = True )\n    Y.sort ( reverse = True )\n    hzntl = 1 ; vert = 1\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( X [ i ] > Y [ j ] ) :\n            res += X [ i ] * vert\n            hzntl += 1\n            i += 1\n        else :\n            res += Y [ j ] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while ( i < m ) :\n        total += X [ i ]\n        i += 1\n    res += total * vert\n    total = 0\n    while ( j < n ) :\n        total += Y [ j ]\n        j += 1\n    res += total * hzntl\n    return res", "target_program": " int minimumCostOfBreaking ( int X [ ], int Y [ ], int m, int n ) {\n  int res = 0;\n  sort ( X, X + m, greater < int > ( ) );\n  sort ( Y, Y + n, greater < int > ( ) );\n  int hzntl = 1, vert = 1;\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert;\n      hzntl ++;\n      i ++;\n    }\n    else {\n      res += Y [ j ] * hzntl;\n      vert ++;\n      j ++;\n    }\n  }\n  int total = 0;\n  while ( i < m ) total += X [ i ++ ];\n  res += total * vert;\n  total = 0;\n  while ( j < n ) total += Y [ j ++ ];\n  res += total * hzntl;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int minimumCostOfBreaking ( Integer X [ ] , Integer Y [ ] , int m , int n ) {\n  int res = 0 ;\n  Arrays . sort ( X , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( Y , Collections . reverseOrder ( ) ) ;\n  int hzntl = 1 , vert = 1 ;\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert ;\n      hzntl ++ ;\n      i ++ ;\n    }\n    else {\n      res += Y [ j ] * hzntl ;\n      vert ++ ;\n      j ++ ;\n    }\n  }\n  int total = 0 ;\n  while ( i < m ) total += X [ i ++ ] ;\n  res += total * vert ;\n  total = 0 ;\n  while ( j < n ) total += Y [ j ++ ] ;\n  res += total * hzntl ;\n  return res ;\n}", "target_program": " def minimumCostOfBreaking ( X , Y , m , n ) :\n    res = 0\n    X.sort ( reverse = True )\n    Y.sort ( reverse = True )\n    hzntl = 1 ; vert = 1\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( X [ i ] > Y [ j ] ) :\n            res += X [ i ] * vert\n            hzntl += 1\n            i += 1\n        else :\n            res += Y [ j ] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while ( i < m ) :\n        total += X [ i ]\n        i += 1\n    res += total * vert\n    total = 0\n    while ( j < n ) :\n        total += Y [ j ]\n        j += 1\n    res += total * hzntl\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int minimumCostOfBreaking ( Integer X [ ] , Integer Y [ ] , int m , int n ) {\n  int res = 0 ;\n  Arrays . sort ( X , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( Y , Collections . reverseOrder ( ) ) ;\n  int hzntl = 1 , vert = 1 ;\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert ;\n      hzntl ++ ;\n      i ++ ;\n    }\n    else {\n      res += Y [ j ] * hzntl ;\n      vert ++ ;\n      j ++ ;\n    }\n  }\n  int total = 0 ;\n  while ( i < m ) total += X [ i ++ ] ;\n  res += total * vert ;\n  total = 0 ;\n  while ( j < n ) total += Y [ j ++ ] ;\n  res += total * hzntl ;\n  return res ;\n}", "target_program": " int minimumCostOfBreaking ( int X [ ], int Y [ ], int m, int n ) {\n  int res = 0;\n  sort ( X, X + m, greater < int > ( ) );\n  sort ( Y, Y + n, greater < int > ( ) );\n  int hzntl = 1, vert = 1;\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert;\n      hzntl ++;\n      i ++;\n    }\n    else {\n      res += Y [ j ] * hzntl;\n      vert ++;\n      j ++;\n    }\n  }\n  int total = 0;\n  while ( i < m ) total += X [ i ++ ];\n  res += total * vert;\n  total = 0;\n  while ( j < n ) total += Y [ j ++ ];\n  res += total * hzntl;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minimumCostOfBreaking ( int X [ ], int Y [ ], int m, int n ) {\n  int res = 0;\n  sort ( X, X + m, greater < int > ( ) );\n  sort ( Y, Y + n, greater < int > ( ) );\n  int hzntl = 1, vert = 1;\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert;\n      hzntl ++;\n      i ++;\n    }\n    else {\n      res += Y [ j ] * hzntl;\n      vert ++;\n      j ++;\n    }\n  }\n  int total = 0;\n  while ( i < m ) total += X [ i ++ ];\n  res += total * vert;\n  total = 0;\n  while ( j < n ) total += Y [ j ++ ];\n  res += total * hzntl;\n  return res;\n}", "target_program": " static int minimumCostOfBreaking ( Integer X [ ] , Integer Y [ ] , int m , int n ) {\n  int res = 0 ;\n  Arrays . sort ( X , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( Y , Collections . reverseOrder ( ) ) ;\n  int hzntl = 1 , vert = 1 ;\n  int i = 0 , j = 0 ;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert ;\n      hzntl ++ ;\n      i ++ ;\n    }\n    else {\n      res += Y [ j ] * hzntl ;\n      vert ++ ;\n      j ++ ;\n    }\n  }\n  int total = 0 ;\n  while ( i < m ) total += X [ i ++ ] ;\n  res += total * vert ;\n  total = 0 ;\n  while ( j < n ) total += Y [ j ++ ] ;\n  res += total * hzntl ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minimumCostOfBreaking ( int X [ ], int Y [ ], int m, int n ) {\n  int res = 0;\n  sort ( X, X + m, greater < int > ( ) );\n  sort ( Y, Y + n, greater < int > ( ) );\n  int hzntl = 1, vert = 1;\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( X [ i ] > Y [ j ] ) {\n      res += X [ i ] * vert;\n      hzntl ++;\n      i ++;\n    }\n    else {\n      res += Y [ j ] * hzntl;\n      vert ++;\n      j ++;\n    }\n  }\n  int total = 0;\n  while ( i < m ) total += X [ i ++ ];\n  res += total * vert;\n  total = 0;\n  while ( j < n ) total += Y [ j ++ ];\n  res += total * hzntl;\n  return res;\n}", "target_program": " def minimumCostOfBreaking ( X , Y , m , n ) :\n    res = 0\n    X.sort ( reverse = True )\n    Y.sort ( reverse = True )\n    hzntl = 1 ; vert = 1\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( X [ i ] > Y [ j ] ) :\n            res += X [ i ] * vert\n            hzntl += 1\n            i += 1\n        else :\n            res += Y [ j ] * hzntl\n            vert += 1\n            j += 1\n    total = 0\n    while ( i < m ) :\n        total += X [ i ]\n        i += 1\n    res += total * vert\n    total = 0\n    while ( j < n ) :\n        total += Y [ j ]\n        j += 1\n    res += total * hzntl\n    return res"}
{"source": "python", "target": "java", "source_program": " def checkStackPermutation ( ip , op , n ) :\n    Input = Queue ( )\n    for i in range ( n ) :\n        Input.put ( ip [ i ] )\n    output = Queue ( )\n    for i in range ( n ) :\n        output.put ( op [ i ] )\n    tempStack = [ ]\n    while ( not Input.empty ( ) ) :\n        ele = Input.queue [ 0 ]\n        Input.get ( )\n        if ( ele == output.queue [ 0 ] ) :\n            output.get ( )\n            while ( len ( tempStack ) != 0 ) :\n                if ( tempStack [ - 1 ] == output.queue [ 0 ] ) :\n                    tempStack.pop ( )\n                    output.get ( )\n                else :\n                    break\n        else :\n            tempStack.append ( ele )\n    return ( Input.empty ( ) and len ( tempStack ) == 0 )", "target_program": " static boolean checkStackPermutation ( int ip [ ] , int op [ ] , int n ) {\n  Queue < Integer > input = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    input . add ( ip [ i ] ) ;\n  }\n  Queue < Integer > output = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    output . add ( op [ i ] ) ;\n  }\n  Stack < Integer > tempStack = new Stack < > ( ) ;\n  while ( ! input . isEmpty ( ) ) {\n    int ele = input . poll ( ) ;\n    if ( ele == output . peek ( ) ) {\n      output . poll ( ) ;\n      while ( ! tempStack . isEmpty ( ) ) {\n        if ( tempStack . peek ( ) == output . peek ( ) ) {\n          tempStack . pop ( ) ;\n          output . poll ( ) ;\n        }\n        else break ;\n      }\n    }\n    else {\n      tempStack . push ( ele ) ;\n    }\n  }\n  return ( input . isEmpty ( ) && tempStack . isEmpty ( ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkStackPermutation ( ip , op , n ) :\n    Input = Queue ( )\n    for i in range ( n ) :\n        Input.put ( ip [ i ] )\n    output = Queue ( )\n    for i in range ( n ) :\n        output.put ( op [ i ] )\n    tempStack = [ ]\n    while ( not Input.empty ( ) ) :\n        ele = Input.queue [ 0 ]\n        Input.get ( )\n        if ( ele == output.queue [ 0 ] ) :\n            output.get ( )\n            while ( len ( tempStack ) != 0 ) :\n                if ( tempStack [ - 1 ] == output.queue [ 0 ] ) :\n                    tempStack.pop ( )\n                    output.get ( )\n                else :\n                    break\n        else :\n            tempStack.append ( ele )\n    return ( Input.empty ( ) and len ( tempStack ) == 0 )", "target_program": " bool checkStackPermutation ( int ip [ ], int op [ ], int n ) {\n  queue < int > input;\n  for ( int i = 0;\n  i < n;\n  i ++ ) input . push ( ip [ i ] );\n  queue < int > output;\n  for ( int i = 0;\n  i < n;\n  i ++ ) output . push ( op [ i ] );\n  stack < int > tempStack;\n  while ( ! input . empty ( ) ) {\n    int ele = input . front ( );\n    input . pop ( );\n    if ( ele == output . front ( ) ) {\n      output . pop ( );\n      while ( ! tempStack . empty ( ) ) {\n        if ( tempStack . top ( ) == output . front ( ) ) {\n          tempStack . pop ( );\n          output . pop ( );\n        }\n        else break;\n      }\n    }\n    else tempStack . push ( ele );\n  }\n  return ( input . empty ( ) && tempStack . empty ( ) );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkStackPermutation ( int ip [ ] , int op [ ] , int n ) {\n  Queue < Integer > input = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    input . add ( ip [ i ] ) ;\n  }\n  Queue < Integer > output = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    output . add ( op [ i ] ) ;\n  }\n  Stack < Integer > tempStack = new Stack < > ( ) ;\n  while ( ! input . isEmpty ( ) ) {\n    int ele = input . poll ( ) ;\n    if ( ele == output . peek ( ) ) {\n      output . poll ( ) ;\n      while ( ! tempStack . isEmpty ( ) ) {\n        if ( tempStack . peek ( ) == output . peek ( ) ) {\n          tempStack . pop ( ) ;\n          output . poll ( ) ;\n        }\n        else break ;\n      }\n    }\n    else {\n      tempStack . push ( ele ) ;\n    }\n  }\n  return ( input . isEmpty ( ) && tempStack . isEmpty ( ) ) ;\n}", "target_program": " def checkStackPermutation ( ip , op , n ) :\n    Input = Queue ( )\n    for i in range ( n ) :\n        Input.put ( ip [ i ] )\n    output = Queue ( )\n    for i in range ( n ) :\n        output.put ( op [ i ] )\n    tempStack = [ ]\n    while ( not Input.empty ( ) ) :\n        ele = Input.queue [ 0 ]\n        Input.get ( )\n        if ( ele == output.queue [ 0 ] ) :\n            output.get ( )\n            while ( len ( tempStack ) != 0 ) :\n                if ( tempStack [ - 1 ] == output.queue [ 0 ] ) :\n                    tempStack.pop ( )\n                    output.get ( )\n                else :\n                    break\n        else :\n            tempStack.append ( ele )\n    return ( Input.empty ( ) and len ( tempStack ) == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkStackPermutation ( int ip [ ] , int op [ ] , int n ) {\n  Queue < Integer > input = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    input . add ( ip [ i ] ) ;\n  }\n  Queue < Integer > output = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    output . add ( op [ i ] ) ;\n  }\n  Stack < Integer > tempStack = new Stack < > ( ) ;\n  while ( ! input . isEmpty ( ) ) {\n    int ele = input . poll ( ) ;\n    if ( ele == output . peek ( ) ) {\n      output . poll ( ) ;\n      while ( ! tempStack . isEmpty ( ) ) {\n        if ( tempStack . peek ( ) == output . peek ( ) ) {\n          tempStack . pop ( ) ;\n          output . poll ( ) ;\n        }\n        else break ;\n      }\n    }\n    else {\n      tempStack . push ( ele ) ;\n    }\n  }\n  return ( input . isEmpty ( ) && tempStack . isEmpty ( ) ) ;\n}", "target_program": " bool checkStackPermutation ( int ip [ ], int op [ ], int n ) {\n  queue < int > input;\n  for ( int i = 0;\n  i < n;\n  i ++ ) input . push ( ip [ i ] );\n  queue < int > output;\n  for ( int i = 0;\n  i < n;\n  i ++ ) output . push ( op [ i ] );\n  stack < int > tempStack;\n  while ( ! input . empty ( ) ) {\n    int ele = input . front ( );\n    input . pop ( );\n    if ( ele == output . front ( ) ) {\n      output . pop ( );\n      while ( ! tempStack . empty ( ) ) {\n        if ( tempStack . top ( ) == output . front ( ) ) {\n          tempStack . pop ( );\n          output . pop ( );\n        }\n        else break;\n      }\n    }\n    else tempStack . push ( ele );\n  }\n  return ( input . empty ( ) && tempStack . empty ( ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkStackPermutation ( int ip [ ], int op [ ], int n ) {\n  queue < int > input;\n  for ( int i = 0;\n  i < n;\n  i ++ ) input . push ( ip [ i ] );\n  queue < int > output;\n  for ( int i = 0;\n  i < n;\n  i ++ ) output . push ( op [ i ] );\n  stack < int > tempStack;\n  while ( ! input . empty ( ) ) {\n    int ele = input . front ( );\n    input . pop ( );\n    if ( ele == output . front ( ) ) {\n      output . pop ( );\n      while ( ! tempStack . empty ( ) ) {\n        if ( tempStack . top ( ) == output . front ( ) ) {\n          tempStack . pop ( );\n          output . pop ( );\n        }\n        else break;\n      }\n    }\n    else tempStack . push ( ele );\n  }\n  return ( input . empty ( ) && tempStack . empty ( ) );\n}", "target_program": " static boolean checkStackPermutation ( int ip [ ] , int op [ ] , int n ) {\n  Queue < Integer > input = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    input . add ( ip [ i ] ) ;\n  }\n  Queue < Integer > output = new LinkedList < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    output . add ( op [ i ] ) ;\n  }\n  Stack < Integer > tempStack = new Stack < > ( ) ;\n  while ( ! input . isEmpty ( ) ) {\n    int ele = input . poll ( ) ;\n    if ( ele == output . peek ( ) ) {\n      output . poll ( ) ;\n      while ( ! tempStack . isEmpty ( ) ) {\n        if ( tempStack . peek ( ) == output . peek ( ) ) {\n          tempStack . pop ( ) ;\n          output . poll ( ) ;\n        }\n        else break ;\n      }\n    }\n    else {\n      tempStack . push ( ele ) ;\n    }\n  }\n  return ( input . isEmpty ( ) && tempStack . isEmpty ( ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkStackPermutation ( int ip [ ], int op [ ], int n ) {\n  queue < int > input;\n  for ( int i = 0;\n  i < n;\n  i ++ ) input . push ( ip [ i ] );\n  queue < int > output;\n  for ( int i = 0;\n  i < n;\n  i ++ ) output . push ( op [ i ] );\n  stack < int > tempStack;\n  while ( ! input . empty ( ) ) {\n    int ele = input . front ( );\n    input . pop ( );\n    if ( ele == output . front ( ) ) {\n      output . pop ( );\n      while ( ! tempStack . empty ( ) ) {\n        if ( tempStack . top ( ) == output . front ( ) ) {\n          tempStack . pop ( );\n          output . pop ( );\n        }\n        else break;\n      }\n    }\n    else tempStack . push ( ele );\n  }\n  return ( input . empty ( ) && tempStack . empty ( ) );\n}", "target_program": " def checkStackPermutation ( ip , op , n ) :\n    Input = Queue ( )\n    for i in range ( n ) :\n        Input.put ( ip [ i ] )\n    output = Queue ( )\n    for i in range ( n ) :\n        output.put ( op [ i ] )\n    tempStack = [ ]\n    while ( not Input.empty ( ) ) :\n        ele = Input.queue [ 0 ]\n        Input.get ( )\n        if ( ele == output.queue [ 0 ] ) :\n            output.get ( )\n            while ( len ( tempStack ) != 0 ) :\n                if ( tempStack [ - 1 ] == output.queue [ 0 ] ) :\n                    tempStack.pop ( )\n                    output.get ( )\n                else :\n                    break\n        else :\n            tempStack.append ( ele )\n    return ( Input.empty ( ) and len ( tempStack ) == 0 )"}
{"source": "python", "target": "java", "source_program": " def procal ( n ) :\n    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )", "target_program": " static double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def procal ( n ) :\n    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )", "target_program": " double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;\n}", "target_program": " def procal ( n ) :\n    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )"}
{"source": "java", "target": "cpp", "source_program": " static double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;\n}", "target_program": " double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 );\n}", "target_program": " static double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double procal ( int n ) {\n  return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 );\n}", "target_program": " def procal ( n ) :\n    return ( 3.0 * n ) / ( 4.0 * ( n * n ) - 1 )"}
{"source": "python", "target": "java", "source_program": " def simplify ( Str ) :\n    Len = len ( Str )\n    res = [ None ] * Len\n    index = 0\n    i = 0\n    s = [ ]\n    s.append ( 0 )\n    while ( i < Len ) :\n        if ( Str [ i ] == '+' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '-'\n                index += 1\n            if ( s [ - 1 ] == 0 ) :\n                res [ index ] = '+'\n                index += 1\n        elif ( Str [ i ] == '-' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '+'\n                index += 1\n            elif ( s [ - 1 ] == 0 ) :\n                res [ index ] = '-'\n                index += 1\n        elif ( Str [ i ] == '(' and i > 0 ) :\n            if ( Str [ i - 1 ] == '-' ) :\n                x = 0 if ( s [ - 1 ] == 1 ) else 1\n                s.append ( x )\n            elif ( Str [ i - 1 ] == '+' ) :\n                s.append ( s [ - 1 ] )\n        elif ( Str [ i ] == ')' ) :\n            s.pop ( )\n        else :\n            res [ index ] = Str [ i ]\n            index += 1\n        i += 1\n    return res", "target_program": " static String simplify ( String str ) {\n  int len = str . length ( ) ;\n  char res [ ] = new char [ len ] ;\n  int index = 0 , i = 0 ;\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  s . push ( 0 ) ;\n  while ( i < len ) {\n    if ( str . charAt ( i ) == '+' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '-' ;\n      if ( s . peek ( ) == 0 ) res [ index ++ ] = '+' ;\n    }\n    else if ( str . charAt ( i ) == '-' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '+' ;\n      else if ( s . peek ( ) == 0 ) res [ index ++ ] = '-' ;\n    }\n    else if ( str . charAt ( i ) == '(' && i > 0 ) {\n      if ( str . charAt ( i - 1 ) == '-' ) {\n        int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;\n        s . push ( x ) ;\n      }\n      else if ( str . charAt ( i - 1 ) == '+' ) s . push ( s . peek ( ) ) ;\n    }\n    else if ( str . charAt ( i ) == ')' ) s . pop ( ) ;\n    else res [ index ++ ] = str . charAt ( i ) ;\n    i ++ ;\n  }\n  return new String ( res ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def simplify ( Str ) :\n    Len = len ( Str )\n    res = [ None ] * Len\n    index = 0\n    i = 0\n    s = [ ]\n    s.append ( 0 )\n    while ( i < Len ) :\n        if ( Str [ i ] == '+' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '-'\n                index += 1\n            if ( s [ - 1 ] == 0 ) :\n                res [ index ] = '+'\n                index += 1\n        elif ( Str [ i ] == '-' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '+'\n                index += 1\n            elif ( s [ - 1 ] == 0 ) :\n                res [ index ] = '-'\n                index += 1\n        elif ( Str [ i ] == '(' and i > 0 ) :\n            if ( Str [ i - 1 ] == '-' ) :\n                x = 0 if ( s [ - 1 ] == 1 ) else 1\n                s.append ( x )\n            elif ( Str [ i - 1 ] == '+' ) :\n                s.append ( s [ - 1 ] )\n        elif ( Str [ i ] == ')' ) :\n            s.pop ( )\n        else :\n            res [ index ] = Str [ i ]\n            index += 1\n        i += 1\n    return res", "target_program": " char * simplify ( string str ) {\n  int len = str . length ( );\n  char * res = new char ( len );\n  int index = 0, i = 0;\n  stack < int > s;\n  s . push ( 0 );\n  while ( i < len ) {\n    if ( str [ i ] == '+' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '-';\n      if ( s . top ( ) == 0 ) res [ index ++ ] = '+';\n    }\n    else if ( str [ i ] == '-' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '+';\n      else if ( s . top ( ) == 0 ) res [ index ++ ] = '-';\n    }\n    else if ( str [ i ] == '(' && i > 0 ) {\n      if ( str [ i - 1 ] == '-' ) {\n        int x = ( s . top ( ) == 1 ) ? 0 : 1;\n        s . push ( x );\n      }\n      else if ( str [ i - 1 ] == '+' ) s . push ( s . top ( ) );\n    }\n    else if ( str [ i ] == ')' ) s . pop ( );\n    else res [ index ++ ] = str [ i ];\n    i ++;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static String simplify ( String str ) {\n  int len = str . length ( ) ;\n  char res [ ] = new char [ len ] ;\n  int index = 0 , i = 0 ;\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  s . push ( 0 ) ;\n  while ( i < len ) {\n    if ( str . charAt ( i ) == '+' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '-' ;\n      if ( s . peek ( ) == 0 ) res [ index ++ ] = '+' ;\n    }\n    else if ( str . charAt ( i ) == '-' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '+' ;\n      else if ( s . peek ( ) == 0 ) res [ index ++ ] = '-' ;\n    }\n    else if ( str . charAt ( i ) == '(' && i > 0 ) {\n      if ( str . charAt ( i - 1 ) == '-' ) {\n        int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;\n        s . push ( x ) ;\n      }\n      else if ( str . charAt ( i - 1 ) == '+' ) s . push ( s . peek ( ) ) ;\n    }\n    else if ( str . charAt ( i ) == ')' ) s . pop ( ) ;\n    else res [ index ++ ] = str . charAt ( i ) ;\n    i ++ ;\n  }\n  return new String ( res ) ;\n}", "target_program": " def simplify ( Str ) :\n    Len = len ( Str )\n    res = [ None ] * Len\n    index = 0\n    i = 0\n    s = [ ]\n    s.append ( 0 )\n    while ( i < Len ) :\n        if ( Str [ i ] == '+' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '-'\n                index += 1\n            if ( s [ - 1 ] == 0 ) :\n                res [ index ] = '+'\n                index += 1\n        elif ( Str [ i ] == '-' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '+'\n                index += 1\n            elif ( s [ - 1 ] == 0 ) :\n                res [ index ] = '-'\n                index += 1\n        elif ( Str [ i ] == '(' and i > 0 ) :\n            if ( Str [ i - 1 ] == '-' ) :\n                x = 0 if ( s [ - 1 ] == 1 ) else 1\n                s.append ( x )\n            elif ( Str [ i - 1 ] == '+' ) :\n                s.append ( s [ - 1 ] )\n        elif ( Str [ i ] == ')' ) :\n            s.pop ( )\n        else :\n            res [ index ] = Str [ i ]\n            index += 1\n        i += 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static String simplify ( String str ) {\n  int len = str . length ( ) ;\n  char res [ ] = new char [ len ] ;\n  int index = 0 , i = 0 ;\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  s . push ( 0 ) ;\n  while ( i < len ) {\n    if ( str . charAt ( i ) == '+' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '-' ;\n      if ( s . peek ( ) == 0 ) res [ index ++ ] = '+' ;\n    }\n    else if ( str . charAt ( i ) == '-' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '+' ;\n      else if ( s . peek ( ) == 0 ) res [ index ++ ] = '-' ;\n    }\n    else if ( str . charAt ( i ) == '(' && i > 0 ) {\n      if ( str . charAt ( i - 1 ) == '-' ) {\n        int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;\n        s . push ( x ) ;\n      }\n      else if ( str . charAt ( i - 1 ) == '+' ) s . push ( s . peek ( ) ) ;\n    }\n    else if ( str . charAt ( i ) == ')' ) s . pop ( ) ;\n    else res [ index ++ ] = str . charAt ( i ) ;\n    i ++ ;\n  }\n  return new String ( res ) ;\n}", "target_program": " char * simplify ( string str ) {\n  int len = str . length ( );\n  char * res = new char ( len );\n  int index = 0, i = 0;\n  stack < int > s;\n  s . push ( 0 );\n  while ( i < len ) {\n    if ( str [ i ] == '+' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '-';\n      if ( s . top ( ) == 0 ) res [ index ++ ] = '+';\n    }\n    else if ( str [ i ] == '-' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '+';\n      else if ( s . top ( ) == 0 ) res [ index ++ ] = '-';\n    }\n    else if ( str [ i ] == '(' && i > 0 ) {\n      if ( str [ i - 1 ] == '-' ) {\n        int x = ( s . top ( ) == 1 ) ? 0 : 1;\n        s . push ( x );\n      }\n      else if ( str [ i - 1 ] == '+' ) s . push ( s . top ( ) );\n    }\n    else if ( str [ i ] == ')' ) s . pop ( );\n    else res [ index ++ ] = str [ i ];\n    i ++;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " char * simplify ( string str ) {\n  int len = str . length ( );\n  char * res = new char ( len );\n  int index = 0, i = 0;\n  stack < int > s;\n  s . push ( 0 );\n  while ( i < len ) {\n    if ( str [ i ] == '+' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '-';\n      if ( s . top ( ) == 0 ) res [ index ++ ] = '+';\n    }\n    else if ( str [ i ] == '-' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '+';\n      else if ( s . top ( ) == 0 ) res [ index ++ ] = '-';\n    }\n    else if ( str [ i ] == '(' && i > 0 ) {\n      if ( str [ i - 1 ] == '-' ) {\n        int x = ( s . top ( ) == 1 ) ? 0 : 1;\n        s . push ( x );\n      }\n      else if ( str [ i - 1 ] == '+' ) s . push ( s . top ( ) );\n    }\n    else if ( str [ i ] == ')' ) s . pop ( );\n    else res [ index ++ ] = str [ i ];\n    i ++;\n  }\n  return res;\n}", "target_program": " static String simplify ( String str ) {\n  int len = str . length ( ) ;\n  char res [ ] = new char [ len ] ;\n  int index = 0 , i = 0 ;\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  s . push ( 0 ) ;\n  while ( i < len ) {\n    if ( str . charAt ( i ) == '+' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '-' ;\n      if ( s . peek ( ) == 0 ) res [ index ++ ] = '+' ;\n    }\n    else if ( str . charAt ( i ) == '-' ) {\n      if ( s . peek ( ) == 1 ) res [ index ++ ] = '+' ;\n      else if ( s . peek ( ) == 0 ) res [ index ++ ] = '-' ;\n    }\n    else if ( str . charAt ( i ) == '(' && i > 0 ) {\n      if ( str . charAt ( i - 1 ) == '-' ) {\n        int x = ( s . peek ( ) == 1 ) ? 0 : 1 ;\n        s . push ( x ) ;\n      }\n      else if ( str . charAt ( i - 1 ) == '+' ) s . push ( s . peek ( ) ) ;\n    }\n    else if ( str . charAt ( i ) == ')' ) s . pop ( ) ;\n    else res [ index ++ ] = str . charAt ( i ) ;\n    i ++ ;\n  }\n  return new String ( res ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " char * simplify ( string str ) {\n  int len = str . length ( );\n  char * res = new char ( len );\n  int index = 0, i = 0;\n  stack < int > s;\n  s . push ( 0 );\n  while ( i < len ) {\n    if ( str [ i ] == '+' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '-';\n      if ( s . top ( ) == 0 ) res [ index ++ ] = '+';\n    }\n    else if ( str [ i ] == '-' ) {\n      if ( s . top ( ) == 1 ) res [ index ++ ] = '+';\n      else if ( s . top ( ) == 0 ) res [ index ++ ] = '-';\n    }\n    else if ( str [ i ] == '(' && i > 0 ) {\n      if ( str [ i - 1 ] == '-' ) {\n        int x = ( s . top ( ) == 1 ) ? 0 : 1;\n        s . push ( x );\n      }\n      else if ( str [ i - 1 ] == '+' ) s . push ( s . top ( ) );\n    }\n    else if ( str [ i ] == ')' ) s . pop ( );\n    else res [ index ++ ] = str [ i ];\n    i ++;\n  }\n  return res;\n}", "target_program": " def simplify ( Str ) :\n    Len = len ( Str )\n    res = [ None ] * Len\n    index = 0\n    i = 0\n    s = [ ]\n    s.append ( 0 )\n    while ( i < Len ) :\n        if ( Str [ i ] == '+' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '-'\n                index += 1\n            if ( s [ - 1 ] == 0 ) :\n                res [ index ] = '+'\n                index += 1\n        elif ( Str [ i ] == '-' ) :\n            if ( s [ - 1 ] == 1 ) :\n                res [ index ] = '+'\n                index += 1\n            elif ( s [ - 1 ] == 0 ) :\n                res [ index ] = '-'\n                index += 1\n        elif ( Str [ i ] == '(' and i > 0 ) :\n            if ( Str [ i - 1 ] == '-' ) :\n                x = 0 if ( s [ - 1 ] == 1 ) else 1\n                s.append ( x )\n            elif ( Str [ i - 1 ] == '+' ) :\n                s.append ( s [ - 1 ] )\n        elif ( Str [ i ] == ')' ) :\n            s.pop ( )\n        else :\n            res [ index ] = Str [ i ]\n            index += 1\n        i += 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def CountSquares ( a , b ) :\n    cnt = 0\n    for i in range ( a , b + 1 ) :\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n    return cnt", "target_program": " static int countSquares ( int a , int b ) {\n  int cnt = 0 ;\n  for ( int i = a ;\n  i <= b ;\n  i ++ ) for ( int j = 1 ;\n  j * j <= i ;\n  j ++ ) if ( j * j == i ) cnt ++ ;\n  return cnt ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def CountSquares ( a , b ) :\n    cnt = 0\n    for i in range ( a , b + 1 ) :\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n    return cnt", "target_program": " int countSquares ( int a, int b ) {\n  int cnt = 0;\n  for ( int i = a;\n  i <= b;\n  i ++ ) for ( int j = 1;\n  j * j <= i;\n  j ++ ) if ( j * j == i ) cnt ++;\n  return cnt;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSquares ( int a , int b ) {\n  int cnt = 0 ;\n  for ( int i = a ;\n  i <= b ;\n  i ++ ) for ( int j = 1 ;\n  j * j <= i ;\n  j ++ ) if ( j * j == i ) cnt ++ ;\n  return cnt ;\n}", "target_program": " def CountSquares ( a , b ) :\n    cnt = 0\n    for i in range ( a , b + 1 ) :\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n    return cnt"}
{"source": "java", "target": "cpp", "source_program": " static int countSquares ( int a , int b ) {\n  int cnt = 0 ;\n  for ( int i = a ;\n  i <= b ;\n  i ++ ) for ( int j = 1 ;\n  j * j <= i ;\n  j ++ ) if ( j * j == i ) cnt ++ ;\n  return cnt ;\n}", "target_program": " int countSquares ( int a, int b ) {\n  int cnt = 0;\n  for ( int i = a;\n  i <= b;\n  i ++ ) for ( int j = 1;\n  j * j <= i;\n  j ++ ) if ( j * j == i ) cnt ++;\n  return cnt;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSquares ( int a, int b ) {\n  int cnt = 0;\n  for ( int i = a;\n  i <= b;\n  i ++ ) for ( int j = 1;\n  j * j <= i;\n  j ++ ) if ( j * j == i ) cnt ++;\n  return cnt;\n}", "target_program": " static int countSquares ( int a , int b ) {\n  int cnt = 0 ;\n  for ( int i = a ;\n  i <= b ;\n  i ++ ) for ( int j = 1 ;\n  j * j <= i ;\n  j ++ ) if ( j * j == i ) cnt ++ ;\n  return cnt ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSquares ( int a, int b ) {\n  int cnt = 0;\n  for ( int i = a;\n  i <= b;\n  i ++ ) for ( int j = 1;\n  j * j <= i;\n  j ++ ) if ( j * j == i ) cnt ++;\n  return cnt;\n}", "target_program": " def CountSquares ( a , b ) :\n    cnt = 0\n    for i in range ( a , b + 1 ) :\n        j = 1 ;\n        while j * j <= i :\n            if j * j == i :\n                cnt = cnt + 1\n            j = j + 1\n        i = i + 1\n    return cnt"}
{"source": "python", "target": "java", "source_program": " def minDiff ( arr , n , k ) :\n    result = + 2147483647\n    arr.sort ( )\n    for i in range ( n - k + 1 ) :\n        result = int ( min ( result , arr [ i + k - 1 ] - arr [ i ] ) )\n    return result", "target_program": " static int minDiff ( int arr [ ] , int n , int k ) {\n  int result = Integer . MAX_VALUE ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i <= n - k ;\n  i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minDiff ( arr , n , k ) :\n    result = + 2147483647\n    arr.sort ( )\n    for i in range ( n - k + 1 ) :\n        result = int ( min ( result , arr [ i + k - 1 ] - arr [ i ] ) )\n    return result", "target_program": " int minDiff ( int arr [ ], int n, int k ) {\n  int result = INT_MAX;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i <= n - k;\n  i ++ ) result = min ( result, arr [ i + k - 1 ] - arr [ i ] );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int minDiff ( int arr [ ] , int n , int k ) {\n  int result = Integer . MAX_VALUE ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i <= n - k ;\n  i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ;\n  return result ;\n}", "target_program": " def minDiff ( arr , n , k ) :\n    result = + 2147483647\n    arr.sort ( )\n    for i in range ( n - k + 1 ) :\n        result = int ( min ( result , arr [ i + k - 1 ] - arr [ i ] ) )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int minDiff ( int arr [ ] , int n , int k ) {\n  int result = Integer . MAX_VALUE ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i <= n - k ;\n  i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ;\n  return result ;\n}", "target_program": " int minDiff ( int arr [ ], int n, int k ) {\n  int result = INT_MAX;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i <= n - k;\n  i ++ ) result = min ( result, arr [ i + k - 1 ] - arr [ i ] );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minDiff ( int arr [ ], int n, int k ) {\n  int result = INT_MAX;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i <= n - k;\n  i ++ ) result = min ( result, arr [ i + k - 1 ] - arr [ i ] );\n  return result;\n}", "target_program": " static int minDiff ( int arr [ ] , int n , int k ) {\n  int result = Integer . MAX_VALUE ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i <= n - k ;\n  i ++ ) result = Math . min ( result , arr [ i + k - 1 ] - arr [ i ] ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minDiff ( int arr [ ], int n, int k ) {\n  int result = INT_MAX;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i <= n - k;\n  i ++ ) result = min ( result, arr [ i + k - 1 ] - arr [ i ] );\n  return result;\n}", "target_program": " def minDiff ( arr , n , k ) :\n    result = + 2147483647\n    arr.sort ( )\n    for i in range ( n - k + 1 ) :\n        result = int ( min ( result , arr [ i + k - 1 ] - arr [ i ] ) )\n    return result"}
{"source": "python", "target": "java", "source_program": " def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if ( length % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )", "target_program": " static boolean checkDivisibility ( String num ) {\n  int length = num . length ( ) ;\n  if ( length == 1 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( length % 3 == 1 ) {\n    num += \"00\" ;\n    length += 2 ;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\" ;\n    length += 1 ;\n  }\n  int sum = 0 , p = 1 ;\n  for ( int i = length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    sum = sum + group * p ;\n    p *= ( - 1 ) ;\n  }\n  sum = Math . abs ( sum ) ;\n  return ( sum % 13 == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if ( length % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )", "target_program": " bool checkDivisibility ( string num ) {\n  int length = num . size ( );\n  if ( length == 1 && num [ 0 ] == '0' ) return true;\n  if ( length % 3 == 1 ) {\n    num += \"00\";\n    length += 2;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\";\n    length += 1;\n  }\n  int sum = 0, p = 1;\n  for ( int i = length - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    sum = sum + group * p;\n    p *= ( - 1 );\n  }\n  sum = abs ( sum );\n  return ( sum % 13 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkDivisibility ( String num ) {\n  int length = num . length ( ) ;\n  if ( length == 1 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( length % 3 == 1 ) {\n    num += \"00\" ;\n    length += 2 ;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\" ;\n    length += 1 ;\n  }\n  int sum = 0 , p = 1 ;\n  for ( int i = length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    sum = sum + group * p ;\n    p *= ( - 1 ) ;\n  }\n  sum = Math . abs ( sum ) ;\n  return ( sum % 13 == 0 ) ;\n}", "target_program": " def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if ( length % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkDivisibility ( String num ) {\n  int length = num . length ( ) ;\n  if ( length == 1 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( length % 3 == 1 ) {\n    num += \"00\" ;\n    length += 2 ;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\" ;\n    length += 1 ;\n  }\n  int sum = 0 , p = 1 ;\n  for ( int i = length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    sum = sum + group * p ;\n    p *= ( - 1 ) ;\n  }\n  sum = Math . abs ( sum ) ;\n  return ( sum % 13 == 0 ) ;\n}", "target_program": " bool checkDivisibility ( string num ) {\n  int length = num . size ( );\n  if ( length == 1 && num [ 0 ] == '0' ) return true;\n  if ( length % 3 == 1 ) {\n    num += \"00\";\n    length += 2;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\";\n    length += 1;\n  }\n  int sum = 0, p = 1;\n  for ( int i = length - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    sum = sum + group * p;\n    p *= ( - 1 );\n  }\n  sum = abs ( sum );\n  return ( sum % 13 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkDivisibility ( string num ) {\n  int length = num . size ( );\n  if ( length == 1 && num [ 0 ] == '0' ) return true;\n  if ( length % 3 == 1 ) {\n    num += \"00\";\n    length += 2;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\";\n    length += 1;\n  }\n  int sum = 0, p = 1;\n  for ( int i = length - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    sum = sum + group * p;\n    p *= ( - 1 );\n  }\n  sum = abs ( sum );\n  return ( sum % 13 == 0 );\n}", "target_program": " static boolean checkDivisibility ( String num ) {\n  int length = num . length ( ) ;\n  if ( length == 1 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( length % 3 == 1 ) {\n    num += \"00\" ;\n    length += 2 ;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\" ;\n    length += 1 ;\n  }\n  int sum = 0 , p = 1 ;\n  for ( int i = length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    sum = sum + group * p ;\n    p *= ( - 1 ) ;\n  }\n  sum = Math . abs ( sum ) ;\n  return ( sum % 13 == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkDivisibility ( string num ) {\n  int length = num . size ( );\n  if ( length == 1 && num [ 0 ] == '0' ) return true;\n  if ( length % 3 == 1 ) {\n    num += \"00\";\n    length += 2;\n  }\n  else if ( length % 3 == 2 ) {\n    num += \"0\";\n    length += 1;\n  }\n  int sum = 0, p = 1;\n  for ( int i = length - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    sum = sum + group * p;\n    p *= ( - 1 );\n  }\n  sum = abs ( sum );\n  return ( sum % 13 == 0 );\n}", "target_program": " def checkDivisibility ( num ) :\n    length = len ( num )\n    if ( length == 1 and num [ 0 ] == '0' ) :\n        return True\n    if ( length % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        length += 2\n    elif ( length % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        length += 1\n    sum = 0\n    p = 1\n    for i in range ( length - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        sum = sum + group * p\n        p *= ( - 1 )\n    sum = abs ( sum )\n    return ( sum % 13 == 0 )"}
{"source": "python", "target": "java", "source_program": " def printSumSimple ( mat , k ) :\n    if ( k > n ) :\n        return\n    for i in range ( n - k + 1 ) :\n        for j in range ( n - k + 1 ) :\n            sum = 0\n            for p in range ( i , k + i ) :\n                for q in range ( j , k + j ) :\n                    sum += mat [ p ] [ q ]\n            print ( sum , end = \" \" )\n        print ( )", "target_program": " static void printSumSimple ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      int sum = 0 ;\n      for ( int p = i ;\n      p < k + i ;\n      p ++ ) for ( int q = j ;\n      q < k + j ;\n      q ++ ) sum += mat [ p ] [ q ] ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSumSimple ( mat , k ) :\n    if ( k > n ) :\n        return\n    for i in range ( n - k + 1 ) :\n        for j in range ( n - k + 1 ) :\n            sum = 0\n            for p in range ( i , k + i ) :\n                for q in range ( j , k + j ) :\n                    sum += mat [ p ] [ q ]\n            print ( sum , end = \" \" )\n        print ( )", "target_program": " void printSumSimple ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    for ( int j = 0;\n    j < n - k + 1;\n    j ++ ) {\n      int sum = 0;\n      for ( int p = i;\n      p < k + i;\n      p ++ ) for ( int q = j;\n      q < k + j;\n      q ++ ) sum += mat [ p ] [ q ];\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printSumSimple ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      int sum = 0 ;\n      for ( int p = i ;\n      p < k + i ;\n      p ++ ) for ( int q = j ;\n      q < k + j ;\n      q ++ ) sum += mat [ p ] [ q ] ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " def printSumSimple ( mat , k ) :\n    if ( k > n ) :\n        return\n    for i in range ( n - k + 1 ) :\n        for j in range ( n - k + 1 ) :\n            sum = 0\n            for p in range ( i , k + i ) :\n                for q in range ( j , k + j ) :\n                    sum += mat [ p ] [ q ]\n            print ( sum , end = \" \" )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void printSumSimple ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      int sum = 0 ;\n      for ( int p = i ;\n      p < k + i ;\n      p ++ ) for ( int q = j ;\n      q < k + j ;\n      q ++ ) sum += mat [ p ] [ q ] ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " void printSumSimple ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    for ( int j = 0;\n    j < n - k + 1;\n    j ++ ) {\n      int sum = 0;\n      for ( int p = i;\n      p < k + i;\n      p ++ ) for ( int q = j;\n      q < k + j;\n      q ++ ) sum += mat [ p ] [ q ];\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSumSimple ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    for ( int j = 0;\n    j < n - k + 1;\n    j ++ ) {\n      int sum = 0;\n      for ( int p = i;\n      p < k + i;\n      p ++ ) for ( int q = j;\n      q < k + j;\n      q ++ ) sum += mat [ p ] [ q ];\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}", "target_program": " static void printSumSimple ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      int sum = 0 ;\n      for ( int p = i ;\n      p < k + i ;\n      p ++ ) for ( int q = j ;\n      q < k + j ;\n      q ++ ) sum += mat [ p ] [ q ] ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSumSimple ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    for ( int j = 0;\n    j < n - k + 1;\n    j ++ ) {\n      int sum = 0;\n      for ( int p = i;\n      p < k + i;\n      p ++ ) for ( int q = j;\n      q < k + j;\n      q ++ ) sum += mat [ p ] [ q ];\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}", "target_program": " def printSumSimple ( mat , k ) :\n    if ( k > n ) :\n        return\n    for i in range ( n - k + 1 ) :\n        for j in range ( n - k + 1 ) :\n            sum = 0\n            for p in range ( i , k + i ) :\n                for q in range ( j , k + j ) :\n                    sum += mat [ p ] [ q ]\n            print ( sum , end = \" \" )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def maxOverlap ( start , end ) :\n    n = len ( start )\n    maxa = max ( start )\n    maxb = max ( end )\n    maxc = max ( maxa , maxb )\n    x = ( maxc + 2 ) * [ 0 ]\n    cur = 0 ; idx = 0\n    for i in range ( 0 , n ) :\n        x [ start [ i ] ] += 1\n        x [ end [ i ] + 1 ] -= 1\n    maxy = - 1\n    for i in range ( 0 , maxc + 1 ) :\n        cur += x [ i ]\n        if maxy < cur :\n            maxy = cur\n            idx = i\n    print ( \"Maximum value is: {0:d}\".format ( maxy ) , \" at position: {0:d}\".format ( idx ) )", "target_program": " public static void maxOverlap ( int [ ] start , int [ ] end , int n ) {\n  int maxa = Arrays . stream ( start ) . max ( ) . getAsInt ( ) ;\n  int maxb = Arrays . stream ( end ) . max ( ) . getAsInt ( ) ;\n  int maxc = Math . max ( maxa , maxb ) ;\n  int [ ] x = new int [ maxc + 2 ] ;\n  Arrays . fill ( x , 0 ) ;\n  int cur = 0 , idx = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    ++ x [ start [ i ] ] ;\n    -- x [ end [ i ] + 1 ] ;\n  }\n  int maxy = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i <= maxc ;\n  i ++ ) {\n    cur += x [ i ] ;\n    if ( maxy < cur ) {\n      maxy = cur ;\n      idx = i ;\n    }\n  }\n  System . out . println ( \"Maximum value is:\" + maxy + \" at position: \" + idx + \"\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxOverlap ( start , end ) :\n    n = len ( start )\n    maxa = max ( start )\n    maxb = max ( end )\n    maxc = max ( maxa , maxb )\n    x = ( maxc + 2 ) * [ 0 ]\n    cur = 0 ; idx = 0\n    for i in range ( 0 , n ) :\n        x [ start [ i ] ] += 1\n        x [ end [ i ] + 1 ] -= 1\n    maxy = - 1\n    for i in range ( 0 , maxc + 1 ) :\n        cur += x [ i ]\n        if maxy < cur :\n            maxy = cur\n            idx = i\n    print ( \"Maximum value is: {0:d}\".format ( maxy ) , \" at position: {0:d}\".format ( idx ) )", "target_program": " void maxOverlap ( vector < int > & start, vector < int > & end ) {\n  int n = start . size ( );\n  int maxa = * max_element ( start . begin ( ), start . end ( ) );\n  int maxb = * max_element ( end . begin ( ), end . end ( ) );\n  int maxc = max ( maxa, maxb );\n  int x [ maxc + 2 ];\n  memset ( x, 0, sizeof x );\n  int cur = 0, idx;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    ++ x [ start [ i ] ];\n    -- x [ end [ i ] + 1 ];\n  }\n  int maxy = INT_MIN;\n  for ( int i = 0;\n  i <= maxc;\n  i ++ ) {\n    cur += x [ i ];\n    if ( maxy < cur ) {\n      maxy = cur;\n      idx = i;\n    }\n  }\n  cout << \"Maximum value is \" << maxy << \" at position \" << idx << endl;\n}"}
{"source": "java", "target": "python", "source_program": " public static void maxOverlap ( int [ ] start , int [ ] end , int n ) {\n  int maxa = Arrays . stream ( start ) . max ( ) . getAsInt ( ) ;\n  int maxb = Arrays . stream ( end ) . max ( ) . getAsInt ( ) ;\n  int maxc = Math . max ( maxa , maxb ) ;\n  int [ ] x = new int [ maxc + 2 ] ;\n  Arrays . fill ( x , 0 ) ;\n  int cur = 0 , idx = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    ++ x [ start [ i ] ] ;\n    -- x [ end [ i ] + 1 ] ;\n  }\n  int maxy = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i <= maxc ;\n  i ++ ) {\n    cur += x [ i ] ;\n    if ( maxy < cur ) {\n      maxy = cur ;\n      idx = i ;\n    }\n  }\n  System . out . println ( \"Maximum value is:\" + maxy + \" at position: \" + idx + \"\" ) ;\n}", "target_program": " def maxOverlap ( start , end ) :\n    n = len ( start )\n    maxa = max ( start )\n    maxb = max ( end )\n    maxc = max ( maxa , maxb )\n    x = ( maxc + 2 ) * [ 0 ]\n    cur = 0 ; idx = 0\n    for i in range ( 0 , n ) :\n        x [ start [ i ] ] += 1\n        x [ end [ i ] + 1 ] -= 1\n    maxy = - 1\n    for i in range ( 0 , maxc + 1 ) :\n        cur += x [ i ]\n        if maxy < cur :\n            maxy = cur\n            idx = i\n    print ( \"Maximum value is: {0:d}\".format ( maxy ) , \" at position: {0:d}\".format ( idx ) )"}
{"source": "java", "target": "cpp", "source_program": " public static void maxOverlap ( int [ ] start , int [ ] end , int n ) {\n  int maxa = Arrays . stream ( start ) . max ( ) . getAsInt ( ) ;\n  int maxb = Arrays . stream ( end ) . max ( ) . getAsInt ( ) ;\n  int maxc = Math . max ( maxa , maxb ) ;\n  int [ ] x = new int [ maxc + 2 ] ;\n  Arrays . fill ( x , 0 ) ;\n  int cur = 0 , idx = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    ++ x [ start [ i ] ] ;\n    -- x [ end [ i ] + 1 ] ;\n  }\n  int maxy = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i <= maxc ;\n  i ++ ) {\n    cur += x [ i ] ;\n    if ( maxy < cur ) {\n      maxy = cur ;\n      idx = i ;\n    }\n  }\n  System . out . println ( \"Maximum value is:\" + maxy + \" at position: \" + idx + \"\" ) ;\n}", "target_program": " void maxOverlap ( vector < int > & start, vector < int > & end ) {\n  int n = start . size ( );\n  int maxa = * max_element ( start . begin ( ), start . end ( ) );\n  int maxb = * max_element ( end . begin ( ), end . end ( ) );\n  int maxc = max ( maxa, maxb );\n  int x [ maxc + 2 ];\n  memset ( x, 0, sizeof x );\n  int cur = 0, idx;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    ++ x [ start [ i ] ];\n    -- x [ end [ i ] + 1 ];\n  }\n  int maxy = INT_MIN;\n  for ( int i = 0;\n  i <= maxc;\n  i ++ ) {\n    cur += x [ i ];\n    if ( maxy < cur ) {\n      maxy = cur;\n      idx = i;\n    }\n  }\n  cout << \"Maximum value is \" << maxy << \" at position \" << idx << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void maxOverlap ( vector < int > & start, vector < int > & end ) {\n  int n = start . size ( );\n  int maxa = * max_element ( start . begin ( ), start . end ( ) );\n  int maxb = * max_element ( end . begin ( ), end . end ( ) );\n  int maxc = max ( maxa, maxb );\n  int x [ maxc + 2 ];\n  memset ( x, 0, sizeof x );\n  int cur = 0, idx;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    ++ x [ start [ i ] ];\n    -- x [ end [ i ] + 1 ];\n  }\n  int maxy = INT_MIN;\n  for ( int i = 0;\n  i <= maxc;\n  i ++ ) {\n    cur += x [ i ];\n    if ( maxy < cur ) {\n      maxy = cur;\n      idx = i;\n    }\n  }\n  cout << \"Maximum value is \" << maxy << \" at position \" << idx << endl;\n}", "target_program": " public static void maxOverlap ( int [ ] start , int [ ] end , int n ) {\n  int maxa = Arrays . stream ( start ) . max ( ) . getAsInt ( ) ;\n  int maxb = Arrays . stream ( end ) . max ( ) . getAsInt ( ) ;\n  int maxc = Math . max ( maxa , maxb ) ;\n  int [ ] x = new int [ maxc + 2 ] ;\n  Arrays . fill ( x , 0 ) ;\n  int cur = 0 , idx = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    ++ x [ start [ i ] ] ;\n    -- x [ end [ i ] + 1 ] ;\n  }\n  int maxy = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i <= maxc ;\n  i ++ ) {\n    cur += x [ i ] ;\n    if ( maxy < cur ) {\n      maxy = cur ;\n      idx = i ;\n    }\n  }\n  System . out . println ( \"Maximum value is:\" + maxy + \" at position: \" + idx + \"\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void maxOverlap ( vector < int > & start, vector < int > & end ) {\n  int n = start . size ( );\n  int maxa = * max_element ( start . begin ( ), start . end ( ) );\n  int maxb = * max_element ( end . begin ( ), end . end ( ) );\n  int maxc = max ( maxa, maxb );\n  int x [ maxc + 2 ];\n  memset ( x, 0, sizeof x );\n  int cur = 0, idx;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    ++ x [ start [ i ] ];\n    -- x [ end [ i ] + 1 ];\n  }\n  int maxy = INT_MIN;\n  for ( int i = 0;\n  i <= maxc;\n  i ++ ) {\n    cur += x [ i ];\n    if ( maxy < cur ) {\n      maxy = cur;\n      idx = i;\n    }\n  }\n  cout << \"Maximum value is \" << maxy << \" at position \" << idx << endl;\n}", "target_program": " def maxOverlap ( start , end ) :\n    n = len ( start )\n    maxa = max ( start )\n    maxb = max ( end )\n    maxc = max ( maxa , maxb )\n    x = ( maxc + 2 ) * [ 0 ]\n    cur = 0 ; idx = 0\n    for i in range ( 0 , n ) :\n        x [ start [ i ] ] += 1\n        x [ end [ i ] + 1 ] -= 1\n    maxy = - 1\n    for i in range ( 0 , maxc + 1 ) :\n        cur += x [ i ]\n        if maxy < cur :\n            maxy = cur\n            idx = i\n    print ( \"Maximum value is: {0:d}\".format ( maxy ) , \" at position: {0:d}\".format ( idx ) )"}
{"source": "python", "target": "java", "source_program": " def maxSumWO3Consec ( n ) :\n    if ( sum [ n ] != - 1 ) :\n        return sum [ n ]\n    if ( n == 0 ) :\n        sum [ n ] = 0\n        return sum [ n ]\n    if ( n == 1 ) :\n        sum [ n ] = arr [ 0 ]\n        return sum [ n ]\n    if ( n == 2 ) :\n        sum [ n ] = arr [ 1 ] + arr [ 0 ]\n        return sum [ n ]\n    sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) )\n    return sum [ n ]", "target_program": " static int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ] ;\n  if ( n == 0 ) return sum [ n ] = 0 ;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;\n  return sum [ n ] = Math . max ( Math . max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSumWO3Consec ( n ) :\n    if ( sum [ n ] != - 1 ) :\n        return sum [ n ]\n    if ( n == 0 ) :\n        sum [ n ] = 0\n        return sum [ n ]\n    if ( n == 1 ) :\n        sum [ n ] = arr [ 0 ]\n        return sum [ n ]\n    if ( n == 2 ) :\n        sum [ n ] = arr [ 1 ] + arr [ 0 ]\n        return sum [ n ]\n    sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) )\n    return sum [ n ]", "target_program": " int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ];\n  if ( n == 0 ) return sum [ n ] = 0;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ];\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ];\n  return sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ), maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ), arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ] ;\n  if ( n == 0 ) return sum [ n ] = 0 ;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;\n  return sum [ n ] = Math . max ( Math . max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) ) ;\n}", "target_program": " def maxSumWO3Consec ( n ) :\n    if ( sum [ n ] != - 1 ) :\n        return sum [ n ]\n    if ( n == 0 ) :\n        sum [ n ] = 0\n        return sum [ n ]\n    if ( n == 1 ) :\n        sum [ n ] = arr [ 0 ]\n        return sum [ n ]\n    if ( n == 2 ) :\n        sum [ n ] = arr [ 1 ] + arr [ 0 ]\n        return sum [ n ]\n    sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) )\n    return sum [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ] ;\n  if ( n == 0 ) return sum [ n ] = 0 ;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;\n  return sum [ n ] = Math . max ( Math . max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) ) ;\n}", "target_program": " int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ];\n  if ( n == 0 ) return sum [ n ] = 0;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ];\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ];\n  return sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ), maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ), arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ];\n  if ( n == 0 ) return sum [ n ] = 0;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ];\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ];\n  return sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ), maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ), arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) );\n}", "target_program": " static int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ] ;\n  if ( n == 0 ) return sum [ n ] = 0 ;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ] ;\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ] ;\n  return sum [ n ] = Math . max ( Math . max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSumWO3Consec ( int n ) {\n  if ( sum [ n ] != - 1 ) return sum [ n ];\n  if ( n == 0 ) return sum [ n ] = 0;\n  if ( n == 1 ) return sum [ n ] = arr [ 0 ];\n  if ( n == 2 ) return sum [ n ] = arr [ 1 ] + arr [ 0 ];\n  return sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ), maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ), arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) );\n}", "target_program": " def maxSumWO3Consec ( n ) :\n    if ( sum [ n ] != - 1 ) :\n        return sum [ n ]\n    if ( n == 0 ) :\n        sum [ n ] = 0\n        return sum [ n ]\n    if ( n == 1 ) :\n        sum [ n ] = arr [ 0 ]\n        return sum [ n ]\n    if ( n == 2 ) :\n        sum [ n ] = arr [ 1 ] + arr [ 0 ]\n        return sum [ n ]\n    sum [ n ] = max ( max ( maxSumWO3Consec ( n - 1 ) , maxSumWO3Consec ( n - 2 ) + arr [ n - 1 ] ) , arr [ n - 2 ] + arr [ n - 1 ] + maxSumWO3Consec ( n - 3 ) )\n    return sum [ n ]"}
{"source": "python", "target": "java", "source_program": " def add ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]", "target_program": " static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def add ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]", "target_program": " void add ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ];\n}"}
{"source": "java", "target": "python", "source_program": " static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;\n}", "target_program": " def add ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]"}
{"source": "java", "target": "cpp", "source_program": " static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;\n}", "target_program": " void add ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void add ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ];\n}", "target_program": " static void add ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void add ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ];\n}", "target_program": " def add ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] + B [ i ] [ j ]"}
{"source": "python", "target": "java", "source_program": " def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    for i in range ( 1 , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - 1\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1", "target_program": " static int findMaxAverage ( int arr [ ] , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int sum = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < k ;\n  i ++ ) sum += arr [ i ] ;\n  int max_sum = sum , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    sum = sum + arr [ i ] - arr [ i - k ] ;\n    if ( sum > max_sum ) {\n      max_sum = sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    for i in range ( 1 , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - 1\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1", "target_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int sum = arr [ 0 ];\n  for ( int i = 1;\n  i < k;\n  i ++ ) sum += arr [ i ];\n  int max_sum = sum, max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int sum = sum + arr [ i ] - arr [ i - k ];\n    if ( sum > max_sum ) {\n      max_sum = sum;\n      max_end = i;\n    }\n  }\n  return max_end - k + 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxAverage ( int arr [ ] , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int sum = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < k ;\n  i ++ ) sum += arr [ i ] ;\n  int max_sum = sum , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    sum = sum + arr [ i ] - arr [ i - k ] ;\n    if ( sum > max_sum ) {\n      max_sum = sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}", "target_program": " def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    for i in range ( 1 , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - 1\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxAverage ( int arr [ ] , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int sum = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < k ;\n  i ++ ) sum += arr [ i ] ;\n  int max_sum = sum , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    sum = sum + arr [ i ] - arr [ i - k ] ;\n    if ( sum > max_sum ) {\n      max_sum = sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}", "target_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int sum = arr [ 0 ];\n  for ( int i = 1;\n  i < k;\n  i ++ ) sum += arr [ i ];\n  int max_sum = sum, max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int sum = sum + arr [ i ] - arr [ i - k ];\n    if ( sum > max_sum ) {\n      max_sum = sum;\n      max_end = i;\n    }\n  }\n  return max_end - k + 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int sum = arr [ 0 ];\n  for ( int i = 1;\n  i < k;\n  i ++ ) sum += arr [ i ];\n  int max_sum = sum, max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int sum = sum + arr [ i ] - arr [ i - k ];\n    if ( sum > max_sum ) {\n      max_sum = sum;\n      max_end = i;\n    }\n  }\n  return max_end - k + 1;\n}", "target_program": " static int findMaxAverage ( int arr [ ] , int n , int k ) {\n  if ( k > n ) return - 1 ;\n  int sum = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < k ;\n  i ++ ) sum += arr [ i ] ;\n  int max_sum = sum , max_end = k - 1 ;\n  for ( int i = k ;\n  i < n ;\n  i ++ ) {\n    sum = sum + arr [ i ] - arr [ i - k ] ;\n    if ( sum > max_sum ) {\n      max_sum = sum ;\n      max_end = i ;\n    }\n  }\n  return max_end - k + 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxAverage ( int arr [ ], int n, int k ) {\n  if ( k > n ) return - 1;\n  int sum = arr [ 0 ];\n  for ( int i = 1;\n  i < k;\n  i ++ ) sum += arr [ i ];\n  int max_sum = sum, max_end = k - 1;\n  for ( int i = k;\n  i < n;\n  i ++ ) {\n    int sum = sum + arr [ i ] - arr [ i - k ];\n    if ( sum > max_sum ) {\n      max_sum = sum;\n      max_end = i;\n    }\n  }\n  return max_end - k + 1;\n}", "target_program": " def findMaxAverage ( arr , n , k ) :\n    if ( k > n ) :\n        return - 1\n    sum = arr [ 0 ]\n    for i in range ( 1 , k ) :\n        sum += arr [ i ]\n    max_sum = sum\n    max_end = k - 1\n    for i in range ( k , n ) :\n        sum = sum + arr [ i ] - arr [ i - k ]\n        if ( sum > max_sum ) :\n            max_sum = sum\n            max_end = i\n    return max_end - k + 1"}
{"source": "python", "target": "java", "source_program": " def center ( x1 , x2 , y1 , y2 ) :\n    print ( int ( ( x1 + x2 ) / 2 ) , end = \"\" )\n    print ( \",\" , int ( ( y1 + y2 ) / 2 ) )", "target_program": " static void center ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( float ) ( x1 + x2 ) / 2 + \", \" + ( float ) ( y1 + y2 ) / 2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def center ( x1 , x2 , y1 , y2 ) :\n    print ( int ( ( x1 + x2 ) / 2 ) , end = \"\" )\n    print ( \",\" , int ( ( y1 + y2 ) / 2 ) )", "target_program": " void center ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \", \" << ( float ) ( y1 + y2 ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static void center ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( float ) ( x1 + x2 ) / 2 + \", \" + ( float ) ( y1 + y2 ) / 2 ) ;\n}", "target_program": " def center ( x1 , x2 , y1 , y2 ) :\n    print ( int ( ( x1 + x2 ) / 2 ) , end = \"\" )\n    print ( \",\" , int ( ( y1 + y2 ) / 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static void center ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( float ) ( x1 + x2 ) / 2 + \", \" + ( float ) ( y1 + y2 ) / 2 ) ;\n}", "target_program": " void center ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \", \" << ( float ) ( y1 + y2 ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " void center ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \", \" << ( float ) ( y1 + y2 ) / 2;\n}", "target_program": " static void center ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( float ) ( x1 + x2 ) / 2 + \", \" + ( float ) ( y1 + y2 ) / 2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void center ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \", \" << ( float ) ( y1 + y2 ) / 2;\n}", "target_program": " def center ( x1 , x2 , y1 , y2 ) :\n    print ( int ( ( x1 + x2 ) / 2 ) , end = \"\" )\n    print ( \",\" , int ( ( y1 + y2 ) / 2 ) )"}
{"source": "python", "target": "java", "source_program": " def countNonDecreasing ( n ) :\n    dp = [ [ 0 for i in range ( n + 1 ) ] for i in range ( 10 ) ]\n    for i in range ( 10 ) :\n        dp [ i ] [ 1 ] = 1\n    for digit in range ( 10 ) :\n        for len in range ( 2 , n + 1 ) :\n            for x in range ( digit + 1 ) :\n                dp [ digit ] [ len ] += dp [ x ] [ len - 1 ]\n    count = 0\n    for i in range ( 10 ) :\n        count += dp [ i ] [ n ]\n    return count", "target_program": " static int countNonDecreasing ( int n ) {\n  int dp [ ] [ ] = new int [ 10 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) dp [ i ] [ 1 ] = 1 ;\n  for ( int digit = 0 ;\n  digit <= 9 ;\n  digit ++ ) {\n    for ( int len = 2 ;\n    len <= n ;\n    len ++ ) {\n      for ( int x = 0 ;\n      x <= digit ;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ;\n    }\n  }\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) count += dp [ i ] [ n ] ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNonDecreasing ( n ) :\n    dp = [ [ 0 for i in range ( n + 1 ) ] for i in range ( 10 ) ]\n    for i in range ( 10 ) :\n        dp [ i ] [ 1 ] = 1\n    for digit in range ( 10 ) :\n        for len in range ( 2 , n + 1 ) :\n            for x in range ( digit + 1 ) :\n                dp [ digit ] [ len ] += dp [ x ] [ len - 1 ]\n    count = 0\n    for i in range ( 10 ) :\n        count += dp [ i ] [ n ]\n    return count", "target_program": " long long int countNonDecreasing ( int n ) {\n  long long int dp [ 10 ] [ n + 1 ];\n  memset ( dp, 0, sizeof dp );\n  for ( int i = 0;\n  i < 10;\n  i ++ ) dp [ i ] [ 1 ] = 1;\n  for ( int digit = 0;\n  digit <= 9;\n  digit ++ ) {\n    for ( int len = 2;\n    len <= n;\n    len ++ ) {\n      for ( int x = 0;\n      x <= digit;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ];\n    }\n  }\n  long long int count = 0;\n  for ( int i = 0;\n  i < 10;\n  i ++ ) count += dp [ i ] [ n ];\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNonDecreasing ( int n ) {\n  int dp [ ] [ ] = new int [ 10 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) dp [ i ] [ 1 ] = 1 ;\n  for ( int digit = 0 ;\n  digit <= 9 ;\n  digit ++ ) {\n    for ( int len = 2 ;\n    len <= n ;\n    len ++ ) {\n      for ( int x = 0 ;\n      x <= digit ;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ;\n    }\n  }\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) count += dp [ i ] [ n ] ;\n  return count ;\n}", "target_program": " def countNonDecreasing ( n ) :\n    dp = [ [ 0 for i in range ( n + 1 ) ] for i in range ( 10 ) ]\n    for i in range ( 10 ) :\n        dp [ i ] [ 1 ] = 1\n    for digit in range ( 10 ) :\n        for len in range ( 2 , n + 1 ) :\n            for x in range ( digit + 1 ) :\n                dp [ digit ] [ len ] += dp [ x ] [ len - 1 ]\n    count = 0\n    for i in range ( 10 ) :\n        count += dp [ i ] [ n ]\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countNonDecreasing ( int n ) {\n  int dp [ ] [ ] = new int [ 10 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) dp [ i ] [ 1 ] = 1 ;\n  for ( int digit = 0 ;\n  digit <= 9 ;\n  digit ++ ) {\n    for ( int len = 2 ;\n    len <= n ;\n    len ++ ) {\n      for ( int x = 0 ;\n      x <= digit ;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ;\n    }\n  }\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) count += dp [ i ] [ n ] ;\n  return count ;\n}", "target_program": " long long int countNonDecreasing ( int n ) {\n  long long int dp [ 10 ] [ n + 1 ];\n  memset ( dp, 0, sizeof dp );\n  for ( int i = 0;\n  i < 10;\n  i ++ ) dp [ i ] [ 1 ] = 1;\n  for ( int digit = 0;\n  digit <= 9;\n  digit ++ ) {\n    for ( int len = 2;\n    len <= n;\n    len ++ ) {\n      for ( int x = 0;\n      x <= digit;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ];\n    }\n  }\n  long long int count = 0;\n  for ( int i = 0;\n  i < 10;\n  i ++ ) count += dp [ i ] [ n ];\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int countNonDecreasing ( int n ) {\n  long long int dp [ 10 ] [ n + 1 ];\n  memset ( dp, 0, sizeof dp );\n  for ( int i = 0;\n  i < 10;\n  i ++ ) dp [ i ] [ 1 ] = 1;\n  for ( int digit = 0;\n  digit <= 9;\n  digit ++ ) {\n    for ( int len = 2;\n    len <= n;\n    len ++ ) {\n      for ( int x = 0;\n      x <= digit;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ];\n    }\n  }\n  long long int count = 0;\n  for ( int i = 0;\n  i < 10;\n  i ++ ) count += dp [ i ] [ n ];\n  return count;\n}", "target_program": " static int countNonDecreasing ( int n ) {\n  int dp [ ] [ ] = new int [ 10 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) dp [ i ] [ 1 ] = 1 ;\n  for ( int digit = 0 ;\n  digit <= 9 ;\n  digit ++ ) {\n    for ( int len = 2 ;\n    len <= n ;\n    len ++ ) {\n      for ( int x = 0 ;\n      x <= digit ;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ] ;\n    }\n  }\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) count += dp [ i ] [ n ] ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int countNonDecreasing ( int n ) {\n  long long int dp [ 10 ] [ n + 1 ];\n  memset ( dp, 0, sizeof dp );\n  for ( int i = 0;\n  i < 10;\n  i ++ ) dp [ i ] [ 1 ] = 1;\n  for ( int digit = 0;\n  digit <= 9;\n  digit ++ ) {\n    for ( int len = 2;\n    len <= n;\n    len ++ ) {\n      for ( int x = 0;\n      x <= digit;\n      x ++ ) dp [ digit ] [ len ] += dp [ x ] [ len - 1 ];\n    }\n  }\n  long long int count = 0;\n  for ( int i = 0;\n  i < 10;\n  i ++ ) count += dp [ i ] [ n ];\n  return count;\n}", "target_program": " def countNonDecreasing ( n ) :\n    dp = [ [ 0 for i in range ( n + 1 ) ] for i in range ( 10 ) ]\n    for i in range ( 10 ) :\n        dp [ i ] [ 1 ] = 1\n    for digit in range ( 10 ) :\n        for len in range ( 2 , n + 1 ) :\n            for x in range ( digit + 1 ) :\n                dp [ digit ] [ len ] += dp [ x ] [ len - 1 ]\n    count = 0\n    for i in range ( 10 ) :\n        count += dp [ i ] [ n ]\n    return count"}
{"source": "python", "target": "java", "source_program": " def replaceOriginal ( s , n ) :\n    r = [ ' ' ] * n\n    for i in range ( n ) :\n        r [ i ] = s [ n - 1 - i ]\n        if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 'i' and s [ i ] != 'o' and s [ i ] != 'u' ) :\n            print ( r [ i ] , end = \"\" )\n    print ( )", "target_program": " static void replaceOriginal ( String s , int n ) {\n  char r [ ] = new char [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    r [ i ] = s . charAt ( n - 1 - i ) ;\n    if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' && s . charAt ( i ) != 'i' && s . charAt ( i ) != 'o' && s . charAt ( i ) != 'u' ) {\n      System . out . print ( r [ i ] ) ;\n    }\n  }\n  System . out . println ( \"\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def replaceOriginal ( s , n ) :\n    r = [ ' ' ] * n\n    for i in range ( n ) :\n        r [ i ] = s [ n - 1 - i ]\n        if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 'i' and s [ i ] != 'o' and s [ i ] != 'u' ) :\n            print ( r [ i ] , end = \"\" )\n    print ( )", "target_program": " void replaceOriginal ( string s, int n ) {\n  string r ( n, ' ' );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    r [ i ] = s [ n - 1 - i ];\n    if ( s [ i ] != 'a' && s [ i ] != 'e' && s [ i ] != 'i' && s [ i ] != 'o' && s [ i ] != 'u' ) {\n      cout << r [ i ];\n    }\n  }\n  cout << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void replaceOriginal ( String s , int n ) {\n  char r [ ] = new char [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    r [ i ] = s . charAt ( n - 1 - i ) ;\n    if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' && s . charAt ( i ) != 'i' && s . charAt ( i ) != 'o' && s . charAt ( i ) != 'u' ) {\n      System . out . print ( r [ i ] ) ;\n    }\n  }\n  System . out . println ( \"\" ) ;\n}", "target_program": " def replaceOriginal ( s , n ) :\n    r = [ ' ' ] * n\n    for i in range ( n ) :\n        r [ i ] = s [ n - 1 - i ]\n        if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 'i' and s [ i ] != 'o' and s [ i ] != 'u' ) :\n            print ( r [ i ] , end = \"\" )\n    print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void replaceOriginal ( String s , int n ) {\n  char r [ ] = new char [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    r [ i ] = s . charAt ( n - 1 - i ) ;\n    if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' && s . charAt ( i ) != 'i' && s . charAt ( i ) != 'o' && s . charAt ( i ) != 'u' ) {\n      System . out . print ( r [ i ] ) ;\n    }\n  }\n  System . out . println ( \"\" ) ;\n}", "target_program": " void replaceOriginal ( string s, int n ) {\n  string r ( n, ' ' );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    r [ i ] = s [ n - 1 - i ];\n    if ( s [ i ] != 'a' && s [ i ] != 'e' && s [ i ] != 'i' && s [ i ] != 'o' && s [ i ] != 'u' ) {\n      cout << r [ i ];\n    }\n  }\n  cout << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void replaceOriginal ( string s, int n ) {\n  string r ( n, ' ' );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    r [ i ] = s [ n - 1 - i ];\n    if ( s [ i ] != 'a' && s [ i ] != 'e' && s [ i ] != 'i' && s [ i ] != 'o' && s [ i ] != 'u' ) {\n      cout << r [ i ];\n    }\n  }\n  cout << endl;\n}", "target_program": " static void replaceOriginal ( String s , int n ) {\n  char r [ ] = new char [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    r [ i ] = s . charAt ( n - 1 - i ) ;\n    if ( s . charAt ( i ) != 'a' && s . charAt ( i ) != 'e' && s . charAt ( i ) != 'i' && s . charAt ( i ) != 'o' && s . charAt ( i ) != 'u' ) {\n      System . out . print ( r [ i ] ) ;\n    }\n  }\n  System . out . println ( \"\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void replaceOriginal ( string s, int n ) {\n  string r ( n, ' ' );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    r [ i ] = s [ n - 1 - i ];\n    if ( s [ i ] != 'a' && s [ i ] != 'e' && s [ i ] != 'i' && s [ i ] != 'o' && s [ i ] != 'u' ) {\n      cout << r [ i ];\n    }\n  }\n  cout << endl;\n}", "target_program": " def replaceOriginal ( s , n ) :\n    r = [ ' ' ] * n\n    for i in range ( n ) :\n        r [ i ] = s [ n - 1 - i ]\n        if ( s [ i ] != 'a' and s [ i ] != 'e' and s [ i ] != 'i' and s [ i ] != 'o' and s [ i ] != 'u' ) :\n            print ( r [ i ] , end = \"\" )\n    print ( )"}
{"source": "python", "target": "java", "source_program": " def findMissing ( a , b , n , m ) :\n    s = dict ( )\n    for i in range ( m ) :\n        s [ b [ i ] ] = 1\n    for i in range ( n ) :\n        if a [ i ] not in s.keys ( ) :\n            print ( a [ i ] , end = \" \" )", "target_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  HashSet < Integer > s = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) s . add ( b [ i ] ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( ! s . contains ( a [ i ] ) ) System . out . print ( a [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMissing ( a , b , n , m ) :\n    s = dict ( )\n    for i in range ( m ) :\n        s [ b [ i ] ] = 1\n    for i in range ( n ) :\n        if a [ i ] not in s.keys ( ) :\n            print ( a [ i ] , end = \" \" )", "target_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < m;\n  i ++ ) s . insert ( b [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( s . find ( a [ i ] ) == s . end ( ) ) cout << a [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  HashSet < Integer > s = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) s . add ( b [ i ] ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( ! s . contains ( a [ i ] ) ) System . out . print ( a [ i ] + \" \" ) ;\n}", "target_program": " def findMissing ( a , b , n , m ) :\n    s = dict ( )\n    for i in range ( m ) :\n        s [ b [ i ] ] = 1\n    for i in range ( n ) :\n        if a [ i ] not in s.keys ( ) :\n            print ( a [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  HashSet < Integer > s = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) s . add ( b [ i ] ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( ! s . contains ( a [ i ] ) ) System . out . print ( a [ i ] + \" \" ) ;\n}", "target_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < m;\n  i ++ ) s . insert ( b [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( s . find ( a [ i ] ) == s . end ( ) ) cout << a [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < m;\n  i ++ ) s . insert ( b [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( s . find ( a [ i ] ) == s . end ( ) ) cout << a [ i ] << \" \";\n}", "target_program": " static void findMissing ( int a [ ] , int b [ ] , int n , int m ) {\n  HashSet < Integer > s = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) s . add ( b [ i ] ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( ! s . contains ( a [ i ] ) ) System . out . print ( a [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findMissing ( int a [ ], int b [ ], int n, int m ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < m;\n  i ++ ) s . insert ( b [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( s . find ( a [ i ] ) == s . end ( ) ) cout << a [ i ] << \" \";\n}", "target_program": " def findMissing ( a , b , n , m ) :\n    s = dict ( )\n    for i in range ( m ) :\n        s [ b [ i ] ] = 1\n    for i in range ( n ) :\n        if a [ i ] not in s.keys ( ) :\n            print ( a [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def countWays ( n ) :\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( 2 ) ]\n    dp [ 0 ] [ 1 ] = 1\n    dp [ 1 ] [ 1 ] = 2\n    for i in range ( 2 , n + 1 ) :\n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]\n        dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] )\n    return dp [ 0 ] [ n ] + dp [ 1 ] [ n ]", "target_program": " static long countWays ( int n ) {\n  long dp [ ] [ ] = new long [ 2 ] [ n + 1 ] ;\n  dp [ 0 ] [ 1 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 2 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ] ;\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] ;\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWays ( n ) :\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( 2 ) ]\n    dp [ 0 ] [ 1 ] = 1\n    dp [ 1 ] [ 1 ] = 2\n    for i in range ( 2 , n + 1 ) :\n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]\n        dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] )\n    return dp [ 0 ] [ n ] + dp [ 1 ] [ n ]", "target_program": " long countWays ( int n ) {\n  long dp [ 2 ] [ n + 1 ];\n  dp [ 0 ] [ 1 ] = 1;\n  dp [ 1 ] [ 1 ] = 2;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ];\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ];\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static long countWays ( int n ) {\n  long dp [ ] [ ] = new long [ 2 ] [ n + 1 ] ;\n  dp [ 0 ] [ 1 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 2 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ] ;\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] ;\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;\n}", "target_program": " def countWays ( n ) :\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( 2 ) ]\n    dp [ 0 ] [ 1 ] = 1\n    dp [ 1 ] [ 1 ] = 2\n    for i in range ( 2 , n + 1 ) :\n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]\n        dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] )\n    return dp [ 0 ] [ n ] + dp [ 1 ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static long countWays ( int n ) {\n  long dp [ ] [ ] = new long [ 2 ] [ n + 1 ] ;\n  dp [ 0 ] [ 1 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 2 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ] ;\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] ;\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;\n}", "target_program": " long countWays ( int n ) {\n  long dp [ 2 ] [ n + 1 ];\n  dp [ 0 ] [ 1 ] = 1;\n  dp [ 1 ] [ 1 ] = 2;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ];\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ];\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " long countWays ( int n ) {\n  long dp [ 2 ] [ n + 1 ];\n  dp [ 0 ] [ 1 ] = 1;\n  dp [ 1 ] [ 1 ] = 2;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ];\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ];\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ];\n}", "target_program": " static long countWays ( int n ) {\n  long dp [ ] [ ] = new long [ 2 ] [ n + 1 ] ;\n  dp [ 0 ] [ 1 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 2 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ] ;\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] ;\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long countWays ( int n ) {\n  long dp [ 2 ] [ n + 1 ];\n  dp [ 0 ] [ 1 ] = 1;\n  dp [ 1 ] [ 1 ] = 2;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ];\n    dp [ 1 ] [ i ] = dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ];\n  }\n  return dp [ 0 ] [ n ] + dp [ 1 ] [ n ];\n}", "target_program": " def countWays ( n ) :\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( 2 ) ]\n    dp [ 0 ] [ 1 ] = 1\n    dp [ 1 ] [ 1 ] = 2\n    for i in range ( 2 , n + 1 ) :\n        dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + dp [ 1 ] [ i - 1 ]\n        dp [ 1 ] [ i ] = ( dp [ 0 ] [ i - 1 ] * 2 + dp [ 1 ] [ i - 1 ] )\n    return dp [ 0 ] [ n ] + dp [ 1 ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def find_Area ( r ) :\n    return ( 2 * r * r )", "target_program": " static int find_Area ( int r ) {\n  return ( 2 * r * r ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def find_Area ( r ) :\n    return ( 2 * r * r )", "target_program": " int find_Area ( int r ) {\n  return ( 2 * r * r );\n}"}
{"source": "java", "target": "python", "source_program": " static int find_Area ( int r ) {\n  return ( 2 * r * r ) ;\n}", "target_program": " def find_Area ( r ) :\n    return ( 2 * r * r )"}
{"source": "java", "target": "cpp", "source_program": " static int find_Area ( int r ) {\n  return ( 2 * r * r ) ;\n}", "target_program": " int find_Area ( int r ) {\n  return ( 2 * r * r );\n}"}
{"source": "cpp", "target": "java", "source_program": " int find_Area ( int r ) {\n  return ( 2 * r * r );\n}", "target_program": " static int find_Area ( int r ) {\n  return ( 2 * r * r ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int find_Area ( int r ) {\n  return ( 2 * r * r );\n}", "target_program": " def find_Area ( r ) :\n    return ( 2 * r * r )"}
{"source": "python", "target": "java", "source_program": " def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 , 1 ) :\n        for j in range ( i , m + 1 , 1 ) :\n            dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] )\n    return dp [ n ] [ m ]", "target_program": " static int MaxDotProduct ( int A [ ] , int B [ ] , int m , int n ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int [ ] row : dp ) Arrays . fill ( row , 0 ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = i ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] ) ;\n  return dp [ n ] [ m ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 , 1 ) :\n        for j in range ( i , m + 1 , 1 ) :\n            dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] )\n    return dp [ n ] [ m ]", "target_program": " long long int MaxDotProduct ( int A [ ], int B [ ], int m, int n ) {\n  long long int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = i;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );\n  return dp [ n ] [ m ];\n}"}
{"source": "java", "target": "python", "source_program": " static int MaxDotProduct ( int A [ ] , int B [ ] , int m , int n ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int [ ] row : dp ) Arrays . fill ( row , 0 ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = i ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] ) ;\n  return dp [ n ] [ m ] ;\n}", "target_program": " def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 , 1 ) :\n        for j in range ( i , m + 1 , 1 ) :\n            dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] )\n    return dp [ n ] [ m ]"}
{"source": "java", "target": "cpp", "source_program": " static int MaxDotProduct ( int A [ ] , int B [ ] , int m , int n ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int [ ] row : dp ) Arrays . fill ( row , 0 ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = i ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] ) ;\n  return dp [ n ] [ m ] ;\n}", "target_program": " long long int MaxDotProduct ( int A [ ], int B [ ], int m, int n ) {\n  long long int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = i;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );\n  return dp [ n ] [ m ];\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int MaxDotProduct ( int A [ ], int B [ ], int m, int n ) {\n  long long int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = i;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );\n  return dp [ n ] [ m ];\n}", "target_program": " static int MaxDotProduct ( int A [ ] , int B [ ] , int m , int n ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int [ ] row : dp ) Arrays . fill ( row , 0 ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = i ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = Math . max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] ) ;\n  return dp [ n ] [ m ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int MaxDotProduct ( int A [ ], int B [ ], int m, int n ) {\n  long long int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = i;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ), dp [ i ] [ j - 1 ] );\n  return dp [ n ] [ m ];\n}", "target_program": " def MaxDotProduct ( A , B , m , n ) :\n    dp = [ [ 0 for i in range ( m + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 , 1 ) :\n        for j in range ( i , m + 1 , 1 ) :\n            dp [ i ] [ j ] = max ( ( dp [ i - 1 ] [ j - 1 ] + ( A [ j - 1 ] * B [ i - 1 ] ) ) , dp [ i ] [ j - 1 ] )\n    return dp [ n ] [ m ]"}
{"source": "python", "target": "java", "source_program": " def printDistSum ( arr , n ) :\n    Sum = sum ( arr )\n    dp = [ [ False for i in range ( Sum + 1 ) ] for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        dp [ i ] [ 0 ] = True\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i - 1 ] ] = True\n        for j in range ( 1 , Sum + 1 ) :\n            if ( dp [ i - 1 ] [ j ] == True ) :\n                dp [ i ] [ j ] = True\n                dp [ i ] [ j + arr [ i - 1 ] ] = True\n    for j in range ( Sum + 1 ) :\n        if ( dp [ n ] [ j ] == True ) :\n            print ( j , end = \" \" )", "target_program": " static void printDistSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  boolean [ ] [ ] dp = new boolean [ n + 1 ] [ sum + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = true ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true ;\n    for ( int j = 1 ;\n    j <= sum ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true ;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true ;\n      }\n    }\n  }\n  for ( int j = 0 ;\n  j <= sum ;\n  j ++ ) if ( dp [ n ] [ j ] == true ) System . out . print ( j + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDistSum ( arr , n ) :\n    Sum = sum ( arr )\n    dp = [ [ False for i in range ( Sum + 1 ) ] for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        dp [ i ] [ 0 ] = True\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i - 1 ] ] = True\n        for j in range ( 1 , Sum + 1 ) :\n            if ( dp [ i - 1 ] [ j ] == True ) :\n                dp [ i ] [ j ] = True\n                dp [ i ] [ j + arr [ i - 1 ] ] = True\n    for j in range ( Sum + 1 ) :\n        if ( dp [ n ] [ j ] == True ) :\n            print ( j , end = \" \" )", "target_program": " void printDistSum ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  bool dp [ n + 1 ] [ sum + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = true;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true;\n    for ( int j = 1;\n    j <= sum;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true;\n      }\n    }\n  }\n  for ( int j = 0;\n  j <= sum;\n  j ++ ) if ( dp [ n ] [ j ] == true ) cout << j << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void printDistSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  boolean [ ] [ ] dp = new boolean [ n + 1 ] [ sum + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = true ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true ;\n    for ( int j = 1 ;\n    j <= sum ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true ;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true ;\n      }\n    }\n  }\n  for ( int j = 0 ;\n  j <= sum ;\n  j ++ ) if ( dp [ n ] [ j ] == true ) System . out . print ( j + \" \" ) ;\n}", "target_program": " def printDistSum ( arr , n ) :\n    Sum = sum ( arr )\n    dp = [ [ False for i in range ( Sum + 1 ) ] for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        dp [ i ] [ 0 ] = True\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i - 1 ] ] = True\n        for j in range ( 1 , Sum + 1 ) :\n            if ( dp [ i - 1 ] [ j ] == True ) :\n                dp [ i ] [ j ] = True\n                dp [ i ] [ j + arr [ i - 1 ] ] = True\n    for j in range ( Sum + 1 ) :\n        if ( dp [ n ] [ j ] == True ) :\n            print ( j , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void printDistSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  boolean [ ] [ ] dp = new boolean [ n + 1 ] [ sum + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = true ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true ;\n    for ( int j = 1 ;\n    j <= sum ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true ;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true ;\n      }\n    }\n  }\n  for ( int j = 0 ;\n  j <= sum ;\n  j ++ ) if ( dp [ n ] [ j ] == true ) System . out . print ( j + \" \" ) ;\n}", "target_program": " void printDistSum ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  bool dp [ n + 1 ] [ sum + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = true;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true;\n    for ( int j = 1;\n    j <= sum;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true;\n      }\n    }\n  }\n  for ( int j = 0;\n  j <= sum;\n  j ++ ) if ( dp [ n ] [ j ] == true ) cout << j << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDistSum ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  bool dp [ n + 1 ] [ sum + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = true;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true;\n    for ( int j = 1;\n    j <= sum;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true;\n      }\n    }\n  }\n  for ( int j = 0;\n  j <= sum;\n  j ++ ) if ( dp [ n ] [ j ] == true ) cout << j << \" \";\n}", "target_program": " static void printDistSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  boolean [ ] [ ] dp = new boolean [ n + 1 ] [ sum + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = true ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true ;\n    for ( int j = 1 ;\n    j <= sum ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true ;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true ;\n      }\n    }\n  }\n  for ( int j = 0 ;\n  j <= sum ;\n  j ++ ) if ( dp [ n ] [ j ] == true ) System . out . print ( j + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDistSum ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  bool dp [ n + 1 ] [ sum + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = true;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i - 1 ] ] = true;\n    for ( int j = 1;\n    j <= sum;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] == true ) {\n        dp [ i ] [ j ] = true;\n        dp [ i ] [ j + arr [ i - 1 ] ] = true;\n      }\n    }\n  }\n  for ( int j = 0;\n  j <= sum;\n  j ++ ) if ( dp [ n ] [ j ] == true ) cout << j << \" \";\n}", "target_program": " def printDistSum ( arr , n ) :\n    Sum = sum ( arr )\n    dp = [ [ False for i in range ( Sum + 1 ) ] for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        dp [ i ] [ 0 ] = True\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i - 1 ] ] = True\n        for j in range ( 1 , Sum + 1 ) :\n            if ( dp [ i - 1 ] [ j ] == True ) :\n                dp [ i ] [ j ] = True\n                dp [ i ] [ j + arr [ i - 1 ] ] = True\n    for j in range ( Sum + 1 ) :\n        if ( dp [ n ] [ j ] == True ) :\n            print ( j , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n    result = - 2147483648\n    for i in range ( n ) :\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n    return result", "target_program": " static int maxAlternateSum ( int arr [ ] , int n ) {\n  if ( n == 1 ) return arr [ 0 ] ;\n  int dec [ ] = new int [ n ] ;\n  int inc [ ] = new int [ n ] ;\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;\n  int flag = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr [ i ] ) ;\n        flag = 1 ;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr [ i ] ) ;\n    }\n  }\n  int result = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ] ;\n    if ( result < dec [ i ] ) result = dec [ i ] ;\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n    result = - 2147483648\n    for i in range ( n ) :\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n    return result", "target_program": " int maxAlternateSum ( int arr [ ], int n ) {\n  if ( n == 1 ) return arr [ 0 ];\n  int dec [ n ];\n  memset ( dec, 0, sizeof ( dec ) );\n  int inc [ n ];\n  memset ( inc, 0, sizeof ( inc ) );\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ];\n  int flag = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = max ( dec [ i ], inc [ j ] + arr [ i ] );\n        flag = 1;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ], dec [ j ] + arr [ i ] );\n    }\n  }\n  int result = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ];\n    if ( result < dec [ i ] ) result = dec [ i ];\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxAlternateSum ( int arr [ ] , int n ) {\n  if ( n == 1 ) return arr [ 0 ] ;\n  int dec [ ] = new int [ n ] ;\n  int inc [ ] = new int [ n ] ;\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;\n  int flag = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr [ i ] ) ;\n        flag = 1 ;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr [ i ] ) ;\n    }\n  }\n  int result = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ] ;\n    if ( result < dec [ i ] ) result = dec [ i ] ;\n  }\n  return result ;\n}", "target_program": " def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n    result = - 2147483648\n    for i in range ( n ) :\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int maxAlternateSum ( int arr [ ] , int n ) {\n  if ( n == 1 ) return arr [ 0 ] ;\n  int dec [ ] = new int [ n ] ;\n  int inc [ ] = new int [ n ] ;\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;\n  int flag = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr [ i ] ) ;\n        flag = 1 ;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr [ i ] ) ;\n    }\n  }\n  int result = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ] ;\n    if ( result < dec [ i ] ) result = dec [ i ] ;\n  }\n  return result ;\n}", "target_program": " int maxAlternateSum ( int arr [ ], int n ) {\n  if ( n == 1 ) return arr [ 0 ];\n  int dec [ n ];\n  memset ( dec, 0, sizeof ( dec ) );\n  int inc [ n ];\n  memset ( inc, 0, sizeof ( inc ) );\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ];\n  int flag = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = max ( dec [ i ], inc [ j ] + arr [ i ] );\n        flag = 1;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ], dec [ j ] + arr [ i ] );\n    }\n  }\n  int result = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ];\n    if ( result < dec [ i ] ) result = dec [ i ];\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxAlternateSum ( int arr [ ], int n ) {\n  if ( n == 1 ) return arr [ 0 ];\n  int dec [ n ];\n  memset ( dec, 0, sizeof ( dec ) );\n  int inc [ n ];\n  memset ( inc, 0, sizeof ( inc ) );\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ];\n  int flag = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = max ( dec [ i ], inc [ j ] + arr [ i ] );\n        flag = 1;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ], dec [ j ] + arr [ i ] );\n    }\n  }\n  int result = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ];\n    if ( result < dec [ i ] ) result = dec [ i ];\n  }\n  return result;\n}", "target_program": " static int maxAlternateSum ( int arr [ ] , int n ) {\n  if ( n == 1 ) return arr [ 0 ] ;\n  int dec [ ] = new int [ n ] ;\n  int inc [ ] = new int [ n ] ;\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ] ;\n  int flag = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = Math . max ( dec [ i ] , inc [ j ] + arr [ i ] ) ;\n        flag = 1 ;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = Math . max ( inc [ i ] , dec [ j ] + arr [ i ] ) ;\n    }\n  }\n  int result = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ] ;\n    if ( result < dec [ i ] ) result = dec [ i ] ;\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxAlternateSum ( int arr [ ], int n ) {\n  if ( n == 1 ) return arr [ 0 ];\n  int dec [ n ];\n  memset ( dec, 0, sizeof ( dec ) );\n  int inc [ n ];\n  memset ( inc, 0, sizeof ( inc ) );\n  dec [ 0 ] = inc [ 0 ] = arr [ 0 ];\n  int flag = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ j ] > arr [ i ] ) {\n        dec [ i ] = max ( dec [ i ], inc [ j ] + arr [ i ] );\n        flag = 1;\n      }\n      else if ( arr [ j ] < arr [ i ] && flag == 1 ) inc [ i ] = max ( inc [ i ], dec [ j ] + arr [ i ] );\n    }\n  }\n  int result = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( result < inc [ i ] ) result = inc [ i ];\n    if ( result < dec [ i ] ) result = dec [ i ];\n  }\n  return result;\n}", "target_program": " def maxAlternateSum ( arr , n ) :\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    dec = [ 0 for i in range ( n + 1 ) ]\n    inc = [ 0 for i in range ( n + 1 ) ]\n    dec [ 0 ] = inc [ 0 ] = arr [ 0 ]\n    flag = 0\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ j ] > arr [ i ] ) :\n                dec [ i ] = max ( dec [ i ] , inc [ j ] + arr [ i ] )\n                flag = 1\n            elif ( arr [ j ] < arr [ i ] and flag == 1 ) :\n                inc [ i ] = max ( inc [ i ] , dec [ j ] + arr [ i ] )\n    result = - 2147483648\n    for i in range ( n ) :\n        if ( result < inc [ i ] ) :\n            result = inc [ i ]\n        if ( result < dec [ i ] ) :\n            result = dec [ i ]\n    return result"}
{"source": "python", "target": "java", "source_program": " def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum", "target_program": " static int sumAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int sum = 0 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) sum += ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum", "target_program": " int sumAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int sum = 0;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) sum += ( tree [ i ] - '0' );\n    }\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int sumAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int sum = 0 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) sum += ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return sum ;\n}", "target_program": " def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int sumAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int sum = 0 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) sum += ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return sum ;\n}", "target_program": " int sumAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int sum = 0;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) sum += ( tree [ i ] - '0' );\n    }\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int sum = 0;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) sum += ( tree [ i ] - '0' );\n    }\n  }\n  return sum;\n}", "target_program": " static int sumAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int sum = 0 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) sum += ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int sum = 0;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) sum += ( tree [ i ] - '0' );\n    }\n  }\n  return sum;\n}", "target_program": " def sumAtKthLevel ( tree , k ) :\n    level = - 1\n    sum = 0\n    n = len ( tree )\n    for i in range ( n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                sum += ( ord ( tree [ i ] ) - ord ( '0' ) )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def isDivisible999 ( num ) :\n    n = len ( num ) ;\n    if ( n == 0 or num [ 0 ] == '0' ) :\n        return true\n    if ( ( n % 3 ) == 1 ) :\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) :\n        num = \"0\" + num\n    gSum = 0\n    for i in range ( 0 , n , 3 ) :\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n    if ( gSum > 1000 ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )", "target_program": " static boolean isDivisible999 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  int gSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int group = 0 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 100 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 10 ;\n    group += num . charAt ( i ) - '0' ;\n    gSum += group ;\n  }\n  if ( gSum > 1000 ) {\n    num = Integer . toString ( gSum ) ;\n    n = num . length ( ) ;\n    gSum = isDivisible999 ( num ) ? 1 : 0 ;\n  }\n  return ( gSum == 999 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isDivisible999 ( num ) :\n    n = len ( num ) ;\n    if ( n == 0 or num [ 0 ] == '0' ) :\n        return true\n    if ( ( n % 3 ) == 1 ) :\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) :\n        num = \"0\" + num\n    gSum = 0\n    for i in range ( 0 , n , 3 ) :\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n    if ( gSum > 1000 ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )", "target_program": " bool isDivisible999 ( string num ) {\n  int n = num . length ( );\n  if ( n == 0 && num [ 0 ] == '0' ) return true;\n  if ( n % 3 == 1 ) num = \"00\" + num;\n  if ( n % 3 == 2 ) num = \"0\" + num;\n  int gSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int group = 0;\n    group += ( num [ i ++ ] - '0' ) * 100;\n    group += ( num [ i ++ ] - '0' ) * 10;\n    group += num [ i ] - '0';\n    gSum += group;\n  }\n  if ( gSum > 1000 ) {\n    num = to_string ( gSum );\n    n = num . length ( );\n    gSum = isDivisible999 ( num );\n  }\n  return ( gSum == 999 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isDivisible999 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  int gSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int group = 0 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 100 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 10 ;\n    group += num . charAt ( i ) - '0' ;\n    gSum += group ;\n  }\n  if ( gSum > 1000 ) {\n    num = Integer . toString ( gSum ) ;\n    n = num . length ( ) ;\n    gSum = isDivisible999 ( num ) ? 1 : 0 ;\n  }\n  return ( gSum == 999 ) ;\n}", "target_program": " def isDivisible999 ( num ) :\n    n = len ( num ) ;\n    if ( n == 0 or num [ 0 ] == '0' ) :\n        return true\n    if ( ( n % 3 ) == 1 ) :\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) :\n        num = \"0\" + num\n    gSum = 0\n    for i in range ( 0 , n , 3 ) :\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n    if ( gSum > 1000 ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isDivisible999 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  int gSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int group = 0 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 100 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 10 ;\n    group += num . charAt ( i ) - '0' ;\n    gSum += group ;\n  }\n  if ( gSum > 1000 ) {\n    num = Integer . toString ( gSum ) ;\n    n = num . length ( ) ;\n    gSum = isDivisible999 ( num ) ? 1 : 0 ;\n  }\n  return ( gSum == 999 ) ;\n}", "target_program": " bool isDivisible999 ( string num ) {\n  int n = num . length ( );\n  if ( n == 0 && num [ 0 ] == '0' ) return true;\n  if ( n % 3 == 1 ) num = \"00\" + num;\n  if ( n % 3 == 2 ) num = \"0\" + num;\n  int gSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int group = 0;\n    group += ( num [ i ++ ] - '0' ) * 100;\n    group += ( num [ i ++ ] - '0' ) * 10;\n    group += num [ i ] - '0';\n    gSum += group;\n  }\n  if ( gSum > 1000 ) {\n    num = to_string ( gSum );\n    n = num . length ( );\n    gSum = isDivisible999 ( num );\n  }\n  return ( gSum == 999 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isDivisible999 ( string num ) {\n  int n = num . length ( );\n  if ( n == 0 && num [ 0 ] == '0' ) return true;\n  if ( n % 3 == 1 ) num = \"00\" + num;\n  if ( n % 3 == 2 ) num = \"0\" + num;\n  int gSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int group = 0;\n    group += ( num [ i ++ ] - '0' ) * 100;\n    group += ( num [ i ++ ] - '0' ) * 10;\n    group += num [ i ] - '0';\n    gSum += group;\n  }\n  if ( gSum > 1000 ) {\n    num = to_string ( gSum );\n    n = num . length ( );\n    gSum = isDivisible999 ( num );\n  }\n  return ( gSum == 999 );\n}", "target_program": " static boolean isDivisible999 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  int gSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int group = 0 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 100 ;\n    group += ( num . charAt ( i ++ ) - '0' ) * 10 ;\n    group += num . charAt ( i ) - '0' ;\n    gSum += group ;\n  }\n  if ( gSum > 1000 ) {\n    num = Integer . toString ( gSum ) ;\n    n = num . length ( ) ;\n    gSum = isDivisible999 ( num ) ? 1 : 0 ;\n  }\n  return ( gSum == 999 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isDivisible999 ( string num ) {\n  int n = num . length ( );\n  if ( n == 0 && num [ 0 ] == '0' ) return true;\n  if ( n % 3 == 1 ) num = \"00\" + num;\n  if ( n % 3 == 2 ) num = \"0\" + num;\n  int gSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int group = 0;\n    group += ( num [ i ++ ] - '0' ) * 100;\n    group += ( num [ i ++ ] - '0' ) * 10;\n    group += num [ i ] - '0';\n    gSum += group;\n  }\n  if ( gSum > 1000 ) {\n    num = to_string ( gSum );\n    n = num . length ( );\n    gSum = isDivisible999 ( num );\n  }\n  return ( gSum == 999 );\n}", "target_program": " def isDivisible999 ( num ) :\n    n = len ( num ) ;\n    if ( n == 0 or num [ 0 ] == '0' ) :\n        return true\n    if ( ( n % 3 ) == 1 ) :\n        num = \"00\" + num\n    if ( ( n % 3 ) == 2 ) :\n        num = \"0\" + num\n    gSum = 0\n    for i in range ( 0 , n , 3 ) :\n        group = 0\n        group += ( ord ( num [ i ] ) - 48 ) * 100\n        group += ( ord ( num [ i + 1 ] ) - 48 ) * 10\n        group += ( ord ( num [ i + 2 ] ) - 48 )\n        gSum += group\n    if ( gSum > 1000 ) :\n        num = str ( gSum )\n        n = len ( num )\n        gSum = isDivisible999 ( num )\n    return ( gSum == 999 )"}
{"source": "python", "target": "java", "source_program": " def check ( st ) :\n    n = len ( st )\n    digitSum = 0\n    for i in range ( 0 , n ) :\n        digitSum = digitSum + ( int ) ( st [ i ] )\n    return ( digitSum % 9 == 0 )", "target_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int digitSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;\n  return ( digitSum % 9 == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check ( st ) :\n    n = len ( st )\n    digitSum = 0\n    for i in range ( 0 , n ) :\n        digitSum = digitSum + ( int ) ( st [ i ] )\n    return ( digitSum % 9 == 0 )", "target_program": " int check ( string str ) {\n  int n = str . length ( );\n  int digitSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) digitSum += ( str [ i ] - '0' );\n  return ( digitSum % 9 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int digitSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;\n  return ( digitSum % 9 == 0 ) ;\n}", "target_program": " def check ( st ) :\n    n = len ( st )\n    digitSum = 0\n    for i in range ( 0 , n ) :\n        digitSum = digitSum + ( int ) ( st [ i ] )\n    return ( digitSum % 9 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int digitSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;\n  return ( digitSum % 9 == 0 ) ;\n}", "target_program": " int check ( string str ) {\n  int n = str . length ( );\n  int digitSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) digitSum += ( str [ i ] - '0' );\n  return ( digitSum % 9 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int check ( string str ) {\n  int n = str . length ( );\n  int digitSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) digitSum += ( str [ i ] - '0' );\n  return ( digitSum % 9 == 0 );\n}", "target_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  int digitSum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) digitSum += ( str . charAt ( i ) - '0' ) ;\n  return ( digitSum % 9 == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int check ( string str ) {\n  int n = str . length ( );\n  int digitSum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) digitSum += ( str [ i ] - '0' );\n  return ( digitSum % 9 == 0 );\n}", "target_program": " def check ( st ) :\n    n = len ( st )\n    digitSum = 0\n    for i in range ( 0 , n ) :\n        digitSum = digitSum + ( int ) ( st [ i ] )\n    return ( digitSum % 9 == 0 )"}
{"source": "python", "target": "java", "source_program": " def countTrees ( n ) :\n    BT = [ 0 ] * ( n + 1 )\n    BT [ 0 ] = BT [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( i ) :\n            BT [ i ] += BT [ j ] * BT [ i - j - 1 ]\n    return BT [ n ]", "target_program": " static int countTrees ( int n ) {\n  int BT [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) BT [ i ] = 0 ;\n  BT [ 0 ] = BT [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  ++ i ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ] ;\n  return BT [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countTrees ( n ) :\n    BT = [ 0 ] * ( n + 1 )\n    BT [ 0 ] = BT [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( i ) :\n            BT [ i ] += BT [ j ] * BT [ i - j - 1 ]\n    return BT [ n ]", "target_program": " int countTrees ( int n ) {\n  int BT [ n + 1 ];\n  memset ( BT, 0, sizeof ( BT ) );\n  BT [ 0 ] = BT [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  ++ i ) for ( int j = 0;\n  j < i;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ];\n  return BT [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countTrees ( int n ) {\n  int BT [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) BT [ i ] = 0 ;\n  BT [ 0 ] = BT [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  ++ i ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ] ;\n  return BT [ n ] ;\n}", "target_program": " def countTrees ( n ) :\n    BT = [ 0 ] * ( n + 1 )\n    BT [ 0 ] = BT [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( i ) :\n            BT [ i ] += BT [ j ] * BT [ i - j - 1 ]\n    return BT [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countTrees ( int n ) {\n  int BT [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) BT [ i ] = 0 ;\n  BT [ 0 ] = BT [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  ++ i ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ] ;\n  return BT [ n ] ;\n}", "target_program": " int countTrees ( int n ) {\n  int BT [ n + 1 ];\n  memset ( BT, 0, sizeof ( BT ) );\n  BT [ 0 ] = BT [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  ++ i ) for ( int j = 0;\n  j < i;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ];\n  return BT [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countTrees ( int n ) {\n  int BT [ n + 1 ];\n  memset ( BT, 0, sizeof ( BT ) );\n  BT [ 0 ] = BT [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  ++ i ) for ( int j = 0;\n  j < i;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ];\n  return BT [ n ];\n}", "target_program": " static int countTrees ( int n ) {\n  int BT [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) BT [ i ] = 0 ;\n  BT [ 0 ] = BT [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  ++ i ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ] ;\n  return BT [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countTrees ( int n ) {\n  int BT [ n + 1 ];\n  memset ( BT, 0, sizeof ( BT ) );\n  BT [ 0 ] = BT [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  ++ i ) for ( int j = 0;\n  j < i;\n  j ++ ) BT [ i ] += BT [ j ] * BT [ i - j - 1 ];\n  return BT [ n ];\n}", "target_program": " def countTrees ( n ) :\n    BT = [ 0 ] * ( n + 1 )\n    BT [ 0 ] = BT [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( i ) :\n            BT [ i ] += BT [ j ] * BT [ i - j - 1 ]\n    return BT [ n ]"}
{"source": "python", "target": "java", "source_program": " def swapUpperToLower ( arr ) :\n    n = 4 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            temp = arr [ i ] [ j ] ;\n            arr [ i ] [ j ] = arr [ j ] [ i ] ;\n            arr [ j ] [ i ] = temp ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            print ( arr [ i ] [ j ] , end = \" \" ) ;\n        print ( \" \" ) ;", "target_program": " static void swapUpperToLower ( int arr [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int temp = arr [ i ] [ j ] ;\n      arr [ i ] [ j ] = arr [ j ] [ i ] ;\n      arr [ j ] [ i ] = temp ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( arr [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def swapUpperToLower ( arr ) :\n    n = 4 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            temp = arr [ i ] [ j ] ;\n            arr [ i ] [ j ] = arr [ j ] [ i ] ;\n            arr [ j ] [ i ] = temp ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            print ( arr [ i ] [ j ] , end = \" \" ) ;\n        print ( \" \" ) ;", "target_program": " void swapUpperToLower ( int arr [ n ] [ n ] ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int temp = arr [ i ] [ j ];\n      arr [ i ] [ j ] = arr [ j ] [ i ];\n      arr [ j ] [ i ] = temp;\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << arr [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void swapUpperToLower ( int arr [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int temp = arr [ i ] [ j ] ;\n      arr [ i ] [ j ] = arr [ j ] [ i ] ;\n      arr [ j ] [ i ] = temp ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( arr [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " def swapUpperToLower ( arr ) :\n    n = 4 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            temp = arr [ i ] [ j ] ;\n            arr [ i ] [ j ] = arr [ j ] [ i ] ;\n            arr [ j ] [ i ] = temp ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            print ( arr [ i ] [ j ] , end = \" \" ) ;\n        print ( \" \" ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void swapUpperToLower ( int arr [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int temp = arr [ i ] [ j ] ;\n      arr [ i ] [ j ] = arr [ j ] [ i ] ;\n      arr [ j ] [ i ] = temp ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( arr [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " void swapUpperToLower ( int arr [ n ] [ n ] ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int temp = arr [ i ] [ j ];\n      arr [ i ] [ j ] = arr [ j ] [ i ];\n      arr [ j ] [ i ] = temp;\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << arr [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void swapUpperToLower ( int arr [ n ] [ n ] ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int temp = arr [ i ] [ j ];\n      arr [ i ] [ j ] = arr [ j ] [ i ];\n      arr [ j ] [ i ] = temp;\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << arr [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}", "target_program": " static void swapUpperToLower ( int arr [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int temp = arr [ i ] [ j ] ;\n      arr [ i ] [ j ] = arr [ j ] [ i ] ;\n      arr [ j ] [ i ] = temp ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( arr [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void swapUpperToLower ( int arr [ n ] [ n ] ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int temp = arr [ i ] [ j ];\n      arr [ i ] [ j ] = arr [ j ] [ i ];\n      arr [ j ] [ i ] = temp;\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << arr [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}", "target_program": " def swapUpperToLower ( arr ) :\n    n = 4 ;\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            temp = arr [ i ] [ j ] ;\n            arr [ i ] [ j ] = arr [ j ] [ i ] ;\n            arr [ j ] [ i ] = temp ;\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            print ( arr [ i ] [ j ] , end = \" \" ) ;\n        print ( \" \" ) ;"}
{"source": "python", "target": "java", "source_program": " def findSum ( N , K ) :\n    ans = 0 ;\n    y = N / K ;\n    x = N % K ;\n    ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ) ;\n    return int ( ans ) ;", "target_program": " static int findSum ( int N , int K ) {\n  int ans = 0 ;\n  int y = N / K ;\n  int x = N % K ;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSum ( N , K ) :\n    ans = 0 ;\n    y = N / K ;\n    x = N % K ;\n    ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ) ;\n    return int ( ans ) ;", "target_program": " int findSum ( int N, int K ) {\n  int ans = 0;\n  int y = N / K;\n  int x = N % K;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2;\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findSum ( int N , int K ) {\n  int ans = 0 ;\n  int y = N / K ;\n  int x = N % K ;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;\n  return ans ;\n}", "target_program": " def findSum ( N , K ) :\n    ans = 0 ;\n    y = N / K ;\n    x = N % K ;\n    ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ) ;\n    return int ( ans ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int findSum ( int N , int K ) {\n  int ans = 0 ;\n  int y = N / K ;\n  int x = N % K ;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;\n  return ans ;\n}", "target_program": " int findSum ( int N, int K ) {\n  int ans = 0;\n  int y = N / K;\n  int x = N % K;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2;\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSum ( int N, int K ) {\n  int ans = 0;\n  int y = N / K;\n  int x = N % K;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2;\n  return ans;\n}", "target_program": " static int findSum ( int N , int K ) {\n  int ans = 0 ;\n  int y = N / K ;\n  int x = N % K ;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ;\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSum ( int N, int K ) {\n  int ans = 0;\n  int y = N / K;\n  int x = N % K;\n  ans = ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2;\n  return ans;\n}", "target_program": " def findSum ( N , K ) :\n    ans = 0 ;\n    y = N / K ;\n    x = N % K ;\n    ans = ( ( K * ( K - 1 ) / 2 ) * y + ( x * ( x + 1 ) ) / 2 ) ;\n    return int ( ans ) ;"}
{"source": "python", "target": "java", "source_program": " def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count", "target_program": " static int xorZero ( String s ) {\n  int one_count = 0 , zero_count = 0 ;\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++ ;\n  else zero_count ++ ;\n  if ( one_count % 2 == 0 ) return zero_count ;\n  return one_count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count", "target_program": " int xorZero ( string str ) {\n  int one_count = 0, zero_count = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++;\n  else zero_count ++;\n  if ( one_count % 2 == 0 ) return zero_count;\n  return one_count;\n}"}
{"source": "java", "target": "python", "source_program": " static int xorZero ( String s ) {\n  int one_count = 0 , zero_count = 0 ;\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++ ;\n  else zero_count ++ ;\n  if ( one_count % 2 == 0 ) return zero_count ;\n  return one_count ;\n}", "target_program": " def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count"}
{"source": "java", "target": "cpp", "source_program": " static int xorZero ( String s ) {\n  int one_count = 0 , zero_count = 0 ;\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++ ;\n  else zero_count ++ ;\n  if ( one_count % 2 == 0 ) return zero_count ;\n  return one_count ;\n}", "target_program": " int xorZero ( string str ) {\n  int one_count = 0, zero_count = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++;\n  else zero_count ++;\n  if ( one_count % 2 == 0 ) return zero_count;\n  return one_count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int xorZero ( string str ) {\n  int one_count = 0, zero_count = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++;\n  else zero_count ++;\n  if ( one_count % 2 == 0 ) return zero_count;\n  return one_count;\n}", "target_program": " static int xorZero ( String s ) {\n  int one_count = 0 , zero_count = 0 ;\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++ ;\n  else zero_count ++ ;\n  if ( one_count % 2 == 0 ) return zero_count ;\n  return one_count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int xorZero ( string str ) {\n  int one_count = 0, zero_count = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( str [ i ] == '1' ) one_count ++;\n  else zero_count ++;\n  if ( one_count % 2 == 0 ) return zero_count;\n  return one_count;\n}", "target_program": " def xorZero ( str ) :\n    one_count = 0\n    zero_count = 0\n    n = len ( str )\n    for i in range ( 0 , n , 1 ) :\n        if ( str [ i ] == '1' ) :\n            one_count += 1\n        else :\n            zero_count += 1\n    if ( one_count % 2 == 0 ) :\n        return zero_count\n    return one_count"}
{"source": "python", "target": "java", "source_program": " def count ( S , m , n ) :\n    if ( n == 0 ) :\n        return 1\n    if ( n < 0 ) :\n        return 0 ;\n    if ( m <= 0 and n >= 1 ) :\n        return 0\n    return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;", "target_program": " static int count ( int S [ ] , int m , int n ) {\n  if ( n == 0 ) return 1 ;\n  if ( n < 0 ) return 0 ;\n  if ( m <= 0 && n >= 1 ) return 0 ;\n  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def count ( S , m , n ) :\n    if ( n == 0 ) :\n        return 1\n    if ( n < 0 ) :\n        return 0 ;\n    if ( m <= 0 and n >= 1 ) :\n        return 0\n    return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;", "target_program": " int count ( int S [ ], int m, int n ) {\n  if ( n == 0 ) return 1;\n  if ( n < 0 ) return 0;\n  if ( m <= 0 && n >= 1 ) return 0;\n  return count ( S, m - 1, n ) + count ( S, m, n - S [ m - 1 ] );\n}"}
{"source": "java", "target": "python", "source_program": " static int count ( int S [ ] , int m , int n ) {\n  if ( n == 0 ) return 1 ;\n  if ( n < 0 ) return 0 ;\n  if ( m <= 0 && n >= 1 ) return 0 ;\n  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;\n}", "target_program": " def count ( S , m , n ) :\n    if ( n == 0 ) :\n        return 1\n    if ( n < 0 ) :\n        return 0 ;\n    if ( m <= 0 and n >= 1 ) :\n        return 0\n    return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int count ( int S [ ] , int m , int n ) {\n  if ( n == 0 ) return 1 ;\n  if ( n < 0 ) return 0 ;\n  if ( m <= 0 && n >= 1 ) return 0 ;\n  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;\n}", "target_program": " int count ( int S [ ], int m, int n ) {\n  if ( n == 0 ) return 1;\n  if ( n < 0 ) return 0;\n  if ( m <= 0 && n >= 1 ) return 0;\n  return count ( S, m - 1, n ) + count ( S, m, n - S [ m - 1 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " int count ( int S [ ], int m, int n ) {\n  if ( n == 0 ) return 1;\n  if ( n < 0 ) return 0;\n  if ( m <= 0 && n >= 1 ) return 0;\n  return count ( S, m - 1, n ) + count ( S, m, n - S [ m - 1 ] );\n}", "target_program": " static int count ( int S [ ] , int m , int n ) {\n  if ( n == 0 ) return 1 ;\n  if ( n < 0 ) return 0 ;\n  if ( m <= 0 && n >= 1 ) return 0 ;\n  return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int count ( int S [ ], int m, int n ) {\n  if ( n == 0 ) return 1;\n  if ( n < 0 ) return 0;\n  if ( m <= 0 && n >= 1 ) return 0;\n  return count ( S, m - 1, n ) + count ( S, m, n - S [ m - 1 ] );\n}", "target_program": " def count ( S , m , n ) :\n    if ( n == 0 ) :\n        return 1\n    if ( n < 0 ) :\n        return 0 ;\n    if ( m <= 0 and n >= 1 ) :\n        return 0\n    return count ( S , m - 1 , n ) + count ( S , m , n - S [ m - 1 ] ) ;"}
{"source": "python", "target": "java", "source_program": " def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    if ( n == 2 ) :\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) :\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) :\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    for i in range ( 4 , n ) :\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )", "target_program": " static int minSum ( int [ ] arr , int n ) {\n  int [ ] dp = new int [ n ] ;\n  if ( n == 1 ) return arr [ 0 ] ;\n  if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ;\n  if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min ( arr [ 1 ] , arr [ 2 ] ) ) ;\n  if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] , arr [ 1 ] ) , Math . min ( arr [ 2 ] , arr [ 3 ] ) ) ;\n  dp [ 0 ] = arr [ 0 ] ;\n  dp [ 1 ] = arr [ 1 ] ;\n  dp [ 2 ] = arr [ 2 ] ;\n  dp [ 3 ] = arr [ 3 ] ;\n  for ( int i = 4 ;\n  i < n ;\n  i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp [ i - 1 ] , dp [ i - 2 ] ) , Math . min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ;\n  return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2 ] ) , Math . min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    if ( n == 2 ) :\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) :\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) :\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    for i in range ( 4 , n ) :\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )", "target_program": " int minSum ( int arr [ ], int n ) {\n  int dp [ n ];\n  if ( n == 1 ) return arr [ 0 ];\n  if ( n == 2 ) return min ( arr [ 0 ], arr [ 1 ] );\n  if ( n == 3 ) return min ( arr [ 0 ], min ( arr [ 1 ], arr [ 2 ] ) );\n  if ( n == 4 ) return min ( min ( arr [ 0 ], arr [ 1 ] ), min ( arr [ 2 ], arr [ 3 ] ) );\n  dp [ 0 ] = arr [ 0 ];\n  dp [ 1 ] = arr [ 1 ];\n  dp [ 2 ] = arr [ 2 ];\n  dp [ 3 ] = arr [ 3 ];\n  for ( int i = 4;\n  i < n;\n  i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ], dp [ i - 2 ] ), min ( dp [ i - 3 ], dp [ i - 4 ] ) );\n  return min ( min ( dp [ n - 1 ], dp [ n - 2 ] ), min ( dp [ n - 4 ], dp [ n - 3 ] ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int minSum ( int [ ] arr , int n ) {\n  int [ ] dp = new int [ n ] ;\n  if ( n == 1 ) return arr [ 0 ] ;\n  if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ;\n  if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min ( arr [ 1 ] , arr [ 2 ] ) ) ;\n  if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] , arr [ 1 ] ) , Math . min ( arr [ 2 ] , arr [ 3 ] ) ) ;\n  dp [ 0 ] = arr [ 0 ] ;\n  dp [ 1 ] = arr [ 1 ] ;\n  dp [ 2 ] = arr [ 2 ] ;\n  dp [ 3 ] = arr [ 3 ] ;\n  for ( int i = 4 ;\n  i < n ;\n  i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp [ i - 1 ] , dp [ i - 2 ] ) , Math . min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ;\n  return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2 ] ) , Math . min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ;\n}", "target_program": " def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    if ( n == 2 ) :\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) :\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) :\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    for i in range ( 4 , n ) :\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )"}
{"source": "java", "target": "cpp", "source_program": " static int minSum ( int [ ] arr , int n ) {\n  int [ ] dp = new int [ n ] ;\n  if ( n == 1 ) return arr [ 0 ] ;\n  if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ;\n  if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min ( arr [ 1 ] , arr [ 2 ] ) ) ;\n  if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] , arr [ 1 ] ) , Math . min ( arr [ 2 ] , arr [ 3 ] ) ) ;\n  dp [ 0 ] = arr [ 0 ] ;\n  dp [ 1 ] = arr [ 1 ] ;\n  dp [ 2 ] = arr [ 2 ] ;\n  dp [ 3 ] = arr [ 3 ] ;\n  for ( int i = 4 ;\n  i < n ;\n  i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp [ i - 1 ] , dp [ i - 2 ] ) , Math . min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ;\n  return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2 ] ) , Math . min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ;\n}", "target_program": " int minSum ( int arr [ ], int n ) {\n  int dp [ n ];\n  if ( n == 1 ) return arr [ 0 ];\n  if ( n == 2 ) return min ( arr [ 0 ], arr [ 1 ] );\n  if ( n == 3 ) return min ( arr [ 0 ], min ( arr [ 1 ], arr [ 2 ] ) );\n  if ( n == 4 ) return min ( min ( arr [ 0 ], arr [ 1 ] ), min ( arr [ 2 ], arr [ 3 ] ) );\n  dp [ 0 ] = arr [ 0 ];\n  dp [ 1 ] = arr [ 1 ];\n  dp [ 2 ] = arr [ 2 ];\n  dp [ 3 ] = arr [ 3 ];\n  for ( int i = 4;\n  i < n;\n  i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ], dp [ i - 2 ] ), min ( dp [ i - 3 ], dp [ i - 4 ] ) );\n  return min ( min ( dp [ n - 1 ], dp [ n - 2 ] ), min ( dp [ n - 4 ], dp [ n - 3 ] ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int minSum ( int arr [ ], int n ) {\n  int dp [ n ];\n  if ( n == 1 ) return arr [ 0 ];\n  if ( n == 2 ) return min ( arr [ 0 ], arr [ 1 ] );\n  if ( n == 3 ) return min ( arr [ 0 ], min ( arr [ 1 ], arr [ 2 ] ) );\n  if ( n == 4 ) return min ( min ( arr [ 0 ], arr [ 1 ] ), min ( arr [ 2 ], arr [ 3 ] ) );\n  dp [ 0 ] = arr [ 0 ];\n  dp [ 1 ] = arr [ 1 ];\n  dp [ 2 ] = arr [ 2 ];\n  dp [ 3 ] = arr [ 3 ];\n  for ( int i = 4;\n  i < n;\n  i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ], dp [ i - 2 ] ), min ( dp [ i - 3 ], dp [ i - 4 ] ) );\n  return min ( min ( dp [ n - 1 ], dp [ n - 2 ] ), min ( dp [ n - 4 ], dp [ n - 3 ] ) );\n}", "target_program": " static int minSum ( int [ ] arr , int n ) {\n  int [ ] dp = new int [ n ] ;\n  if ( n == 1 ) return arr [ 0 ] ;\n  if ( n == 2 ) return Math . min ( arr [ 0 ] , arr [ 1 ] ) ;\n  if ( n == 3 ) return Math . min ( arr [ 0 ] , Math . min ( arr [ 1 ] , arr [ 2 ] ) ) ;\n  if ( n == 4 ) return Math . min ( Math . min ( arr [ 0 ] , arr [ 1 ] ) , Math . min ( arr [ 2 ] , arr [ 3 ] ) ) ;\n  dp [ 0 ] = arr [ 0 ] ;\n  dp [ 1 ] = arr [ 1 ] ;\n  dp [ 2 ] = arr [ 2 ] ;\n  dp [ 3 ] = arr [ 3 ] ;\n  for ( int i = 4 ;\n  i < n ;\n  i ++ ) dp [ i ] = arr [ i ] + Math . min ( Math . min ( dp [ i - 1 ] , dp [ i - 2 ] ) , Math . min ( dp [ i - 3 ] , dp [ i - 4 ] ) ) ;\n  return Math . min ( Math . min ( dp [ n - 1 ] , dp [ n - 2 ] ) , Math . min ( dp [ n - 4 ] , dp [ n - 3 ] ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minSum ( int arr [ ], int n ) {\n  int dp [ n ];\n  if ( n == 1 ) return arr [ 0 ];\n  if ( n == 2 ) return min ( arr [ 0 ], arr [ 1 ] );\n  if ( n == 3 ) return min ( arr [ 0 ], min ( arr [ 1 ], arr [ 2 ] ) );\n  if ( n == 4 ) return min ( min ( arr [ 0 ], arr [ 1 ] ), min ( arr [ 2 ], arr [ 3 ] ) );\n  dp [ 0 ] = arr [ 0 ];\n  dp [ 1 ] = arr [ 1 ];\n  dp [ 2 ] = arr [ 2 ];\n  dp [ 3 ] = arr [ 3 ];\n  for ( int i = 4;\n  i < n;\n  i ++ ) dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ], dp [ i - 2 ] ), min ( dp [ i - 3 ], dp [ i - 4 ] ) );\n  return min ( min ( dp [ n - 1 ], dp [ n - 2 ] ), min ( dp [ n - 4 ], dp [ n - 3 ] ) );\n}", "target_program": " def minSum ( arr , n ) :\n    dp = [ 0 ] * n\n    if ( n == 1 ) :\n        return arr [ 0 ]\n    if ( n == 2 ) :\n        return min ( arr [ 0 ] , arr [ 1 ] )\n    if ( n == 3 ) :\n        return min ( arr [ 0 ] , min ( arr [ 1 ] , arr [ 2 ] ) )\n    if ( n == 4 ) :\n        return min ( min ( arr [ 0 ] , arr [ 1 ] ) , min ( arr [ 2 ] , arr [ 3 ] ) )\n    dp [ 0 ] = arr [ 0 ]\n    dp [ 1 ] = arr [ 1 ]\n    dp [ 2 ] = arr [ 2 ]\n    dp [ 3 ] = arr [ 3 ]\n    for i in range ( 4 , n ) :\n        dp [ i ] = arr [ i ] + min ( min ( dp [ i - 1 ] , dp [ i - 2 ] ) , min ( dp [ i - 3 ] , dp [ i - 4 ] ) )\n    return min ( min ( dp [ n - 1 ] , dp [ n - 2 ] ) , min ( dp [ n - 4 ] , dp [ n - 3 ] ) )"}
{"source": "python", "target": "java", "source_program": " def maxPathSum ( tri , m , n ) :\n    for i in range ( m - 1 , - 1 , - 1 ) :\n        for j in range ( i + 1 ) :\n            if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j ]\n            else :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]\n    return tri [ 0 ] [ 0 ]", "target_program": " static int maxPathSum ( int tri [ ] [ ] , int m , int n ) {\n  for ( int i = m - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;\n    }\n  }\n  return tri [ 0 ] [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxPathSum ( tri , m , n ) :\n    for i in range ( m - 1 , - 1 , - 1 ) :\n        for j in range ( i + 1 ) :\n            if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j ]\n            else :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]\n    return tri [ 0 ] [ 0 ]", "target_program": " int maxPathSum ( int tri [ ] [ N ], int m, int n ) {\n  for ( int i = m - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ];\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ];\n    }\n  }\n  return tri [ 0 ] [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxPathSum ( int tri [ ] [ ] , int m , int n ) {\n  for ( int i = m - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;\n    }\n  }\n  return tri [ 0 ] [ 0 ] ;\n}", "target_program": " def maxPathSum ( tri , m , n ) :\n    for i in range ( m - 1 , - 1 , - 1 ) :\n        for j in range ( i + 1 ) :\n            if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j ]\n            else :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]\n    return tri [ 0 ] [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxPathSum ( int tri [ ] [ ] , int m , int n ) {\n  for ( int i = m - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;\n    }\n  }\n  return tri [ 0 ] [ 0 ] ;\n}", "target_program": " int maxPathSum ( int tri [ ] [ N ], int m, int n ) {\n  for ( int i = m - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ];\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ];\n    }\n  }\n  return tri [ 0 ] [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxPathSum ( int tri [ ] [ N ], int m, int n ) {\n  for ( int i = m - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ];\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ];\n    }\n  }\n  return tri [ 0 ] [ 0 ];\n}", "target_program": " static int maxPathSum ( int tri [ ] [ ] , int m , int n ) {\n  for ( int i = m - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ] ;\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ] ;\n    }\n  }\n  return tri [ 0 ] [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxPathSum ( int tri [ ] [ N ], int m, int n ) {\n  for ( int i = m - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) {\n      if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) tri [ i ] [ j ] += tri [ i + 1 ] [ j ];\n      else tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ];\n    }\n  }\n  return tri [ 0 ] [ 0 ];\n}", "target_program": " def maxPathSum ( tri , m , n ) :\n    for i in range ( m - 1 , - 1 , - 1 ) :\n        for j in range ( i + 1 ) :\n            if ( tri [ i + 1 ] [ j ] > tri [ i + 1 ] [ j + 1 ] ) :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j ]\n            else :\n                tri [ i ] [ j ] += tri [ i + 1 ] [ j + 1 ]\n    return tri [ 0 ] [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    for i in range ( 0 , n1 ) :\n        for j in range ( 0 , n2 ) :\n            for k in range ( 0 , n3 ) :\n                if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) :\n                    return True\n    return False", "target_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) for ( int k = 0 ;\n  k < n3 ;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    for i in range ( 0 , n1 ) :\n        for j in range ( 0 , n2 ) :\n            for k in range ( 0 , n3 ) :\n                if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) :\n                    return True\n    return False", "target_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  for ( int i = 0;\n  i < n1;\n  i ++ ) for ( int j = 0;\n  j < n2;\n  j ++ ) for ( int k = 0;\n  k < n3;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) for ( int k = 0 ;\n  k < n3 ;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true ;\n  return false ;\n}", "target_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    for i in range ( 0 , n1 ) :\n        for j in range ( 0 , n2 ) :\n            for k in range ( 0 , n3 ) :\n                if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) :\n                    return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) for ( int k = 0 ;\n  k < n3 ;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true ;\n  return false ;\n}", "target_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  for ( int i = 0;\n  i < n1;\n  i ++ ) for ( int j = 0;\n  j < n2;\n  j ++ ) for ( int k = 0;\n  k < n3;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  for ( int i = 0;\n  i < n1;\n  i ++ ) for ( int j = 0;\n  j < n2;\n  j ++ ) for ( int k = 0;\n  k < n3;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true;\n  return false;\n}", "target_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) for ( int k = 0 ;\n  k < n3 ;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  for ( int i = 0;\n  i < n1;\n  i ++ ) for ( int j = 0;\n  j < n2;\n  j ++ ) for ( int k = 0;\n  k < n3;\n  k ++ ) if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) return true;\n  return false;\n}", "target_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    for i in range ( 0 , n1 ) :\n        for j in range ( 0 , n2 ) :\n            for k in range ( 0 , n3 ) :\n                if ( a1 [ i ] + a2 [ j ] + a3 [ k ] == sum ) :\n                    return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def fib ( n , a = 0 , b = 1 ) :\n    if n == 0 :\n        return a\n    if n == 1 :\n        return b\n    return fib ( n - 1 , b , a + b ) ;", "target_program": " static int fib ( int n , int a , int b ) {\n  if ( n == 0 ) return a ;\n  if ( n == 1 ) return b ;\n  return fib ( n - 1 , b , a + b ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def fib ( n , a = 0 , b = 1 ) :\n    if n == 0 :\n        return a\n    if n == 1 :\n        return b\n    return fib ( n - 1 , b , a + b ) ;", "target_program": " int fib ( int n, int a = 0, int b = 1 ) {\n  if ( n == 0 ) return a;\n  if ( n == 1 ) return b;\n  return fib ( n - 1, b, a + b );\n}"}
{"source": "java", "target": "python", "source_program": " static int fib ( int n , int a , int b ) {\n  if ( n == 0 ) return a ;\n  if ( n == 1 ) return b ;\n  return fib ( n - 1 , b , a + b ) ;\n}", "target_program": " def fib ( n , a = 0 , b = 1 ) :\n    if n == 0 :\n        return a\n    if n == 1 :\n        return b\n    return fib ( n - 1 , b , a + b ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int fib ( int n , int a , int b ) {\n  if ( n == 0 ) return a ;\n  if ( n == 1 ) return b ;\n  return fib ( n - 1 , b , a + b ) ;\n}", "target_program": " int fib ( int n, int a = 0, int b = 1 ) {\n  if ( n == 0 ) return a;\n  if ( n == 1 ) return b;\n  return fib ( n - 1, b, a + b );\n}"}
{"source": "cpp", "target": "java", "source_program": " int fib ( int n, int a = 0, int b = 1 ) {\n  if ( n == 0 ) return a;\n  if ( n == 1 ) return b;\n  return fib ( n - 1, b, a + b );\n}", "target_program": " static int fib ( int n , int a , int b ) {\n  if ( n == 0 ) return a ;\n  if ( n == 1 ) return b ;\n  return fib ( n - 1 , b , a + b ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int fib ( int n, int a = 0, int b = 1 ) {\n  if ( n == 0 ) return a;\n  if ( n == 1 ) return b;\n  return fib ( n - 1, b, a + b );\n}", "target_program": " def fib ( n , a = 0 , b = 1 ) :\n    if n == 0 :\n        return a\n    if n == 1 :\n        return b\n    return fib ( n - 1 , b , a + b ) ;"}
{"source": "python", "target": "java", "source_program": " def isLucky ( n ) :\n    ar = [ 0 ] * 10\n    while ( n > 0 ) :\n        digit = math.floor ( n % 10 )\n        if ( ar [ digit ] ) :\n            return 0\n        ar [ digit ] = 1\n        n = n / 10\n    return 1", "target_program": " static boolean isLucky ( int n ) {\n  boolean arr [ ] = new boolean [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) arr [ i ] = false ;\n  while ( n > 0 ) {\n    int digit = n % 10 ;\n    if ( arr [ digit ] ) return false ;\n    arr [ digit ] = true ;\n    n = n / 10 ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isLucky ( n ) :\n    ar = [ 0 ] * 10\n    while ( n > 0 ) :\n        digit = math.floor ( n % 10 )\n        if ( ar [ digit ] ) :\n            return 0\n        ar [ digit ] = 1\n        n = n / 10\n    return 1", "target_program": " bool isLucky ( int n ) {\n  bool arr [ 10 ];\n  for ( int i = 0;\n  i < 10;\n  i ++ ) arr [ i ] = false;\n  while ( n > 0 ) {\n    int digit = n % 10;\n    if ( arr [ digit ] ) return false;\n    arr [ digit ] = true;\n    n = n / 10;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isLucky ( int n ) {\n  boolean arr [ ] = new boolean [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) arr [ i ] = false ;\n  while ( n > 0 ) {\n    int digit = n % 10 ;\n    if ( arr [ digit ] ) return false ;\n    arr [ digit ] = true ;\n    n = n / 10 ;\n  }\n  return true ;\n}", "target_program": " def isLucky ( n ) :\n    ar = [ 0 ] * 10\n    while ( n > 0 ) :\n        digit = math.floor ( n % 10 )\n        if ( ar [ digit ] ) :\n            return 0\n        ar [ digit ] = 1\n        n = n / 10\n    return 1"}
{"source": "java", "target": "cpp", "source_program": " static boolean isLucky ( int n ) {\n  boolean arr [ ] = new boolean [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) arr [ i ] = false ;\n  while ( n > 0 ) {\n    int digit = n % 10 ;\n    if ( arr [ digit ] ) return false ;\n    arr [ digit ] = true ;\n    n = n / 10 ;\n  }\n  return true ;\n}", "target_program": " bool isLucky ( int n ) {\n  bool arr [ 10 ];\n  for ( int i = 0;\n  i < 10;\n  i ++ ) arr [ i ] = false;\n  while ( n > 0 ) {\n    int digit = n % 10;\n    if ( arr [ digit ] ) return false;\n    arr [ digit ] = true;\n    n = n / 10;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isLucky ( int n ) {\n  bool arr [ 10 ];\n  for ( int i = 0;\n  i < 10;\n  i ++ ) arr [ i ] = false;\n  while ( n > 0 ) {\n    int digit = n % 10;\n    if ( arr [ digit ] ) return false;\n    arr [ digit ] = true;\n    n = n / 10;\n  }\n  return true;\n}", "target_program": " static boolean isLucky ( int n ) {\n  boolean arr [ ] = new boolean [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) arr [ i ] = false ;\n  while ( n > 0 ) {\n    int digit = n % 10 ;\n    if ( arr [ digit ] ) return false ;\n    arr [ digit ] = true ;\n    n = n / 10 ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isLucky ( int n ) {\n  bool arr [ 10 ];\n  for ( int i = 0;\n  i < 10;\n  i ++ ) arr [ i ] = false;\n  while ( n > 0 ) {\n    int digit = n % 10;\n    if ( arr [ digit ] ) return false;\n    arr [ digit ] = true;\n    n = n / 10;\n  }\n  return true;\n}", "target_program": " def isLucky ( n ) :\n    ar = [ 0 ] * 10\n    while ( n > 0 ) :\n        digit = math.floor ( n % 10 )\n        if ( ar [ digit ] ) :\n            return 0\n        ar [ digit ] = 1\n        n = n / 10\n    return 1"}
{"source": "python", "target": "java", "source_program": " def printSumTricky ( mat , k ) :\n    global n\n    if k > n :\n        return\n    stripSum = [ [ None ] * n for i in range ( n ) ]\n    for j in range ( n ) :\n        Sum = 0\n        for i in range ( k ) :\n            Sum += mat [ i ] [ j ]\n        stripSum [ 0 ] [ j ] = Sum\n        for i in range ( 1 , n - k + 1 ) :\n            Sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] )\n            stripSum [ i ] [ j ] = Sum\n    for i in range ( n - k + 1 ) :\n        Sum = 0\n        for j in range ( k ) :\n            Sum += stripSum [ i ] [ j ]\n        print ( Sum , end = \" \" )\n        for j in range ( 1 , n - k + 1 ) :\n            Sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] )\n            print ( Sum , end = \" \" )\n        print ( )", "target_program": " static void printSumTricky ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  int stripSum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) sum += mat [ i ] [ j ] ;\n    stripSum [ 0 ] [ j ] = sum ;\n    for ( int i = 1 ;\n    i < n - k + 1 ;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ;\n      stripSum [ i ] [ j ] = sum ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    int sum = 0 ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) sum += stripSum [ i ] [ j ] ;\n    System . out . print ( sum + \" \" ) ;\n    for ( int j = 1 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSumTricky ( mat , k ) :\n    global n\n    if k > n :\n        return\n    stripSum = [ [ None ] * n for i in range ( n ) ]\n    for j in range ( n ) :\n        Sum = 0\n        for i in range ( k ) :\n            Sum += mat [ i ] [ j ]\n        stripSum [ 0 ] [ j ] = Sum\n        for i in range ( 1 , n - k + 1 ) :\n            Sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] )\n            stripSum [ i ] [ j ] = Sum\n    for i in range ( n - k + 1 ) :\n        Sum = 0\n        for j in range ( k ) :\n            Sum += stripSum [ i ] [ j ]\n        print ( Sum , end = \" \" )\n        for j in range ( 1 , n - k + 1 ) :\n            Sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] )\n            print ( Sum , end = \" \" )\n        print ( )", "target_program": " void printSumTricky ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  int stripSum [ n ] [ n ];\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    int sum = 0;\n    for ( int i = 0;\n    i < k;\n    i ++ ) sum += mat [ i ] [ j ];\n    stripSum [ 0 ] [ j ] = sum;\n    for ( int i = 1;\n    i < n - k + 1;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] );\n      stripSum [ i ] [ j ] = sum;\n    }\n  }\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    int sum = 0;\n    for ( int j = 0;\n    j < k;\n    j ++ ) sum += stripSum [ i ] [ j ];\n    cout << sum << \"  \";\n    for ( int j = 1;\n    j < n - k + 1;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] );\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printSumTricky ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  int stripSum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) sum += mat [ i ] [ j ] ;\n    stripSum [ 0 ] [ j ] = sum ;\n    for ( int i = 1 ;\n    i < n - k + 1 ;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ;\n      stripSum [ i ] [ j ] = sum ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    int sum = 0 ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) sum += stripSum [ i ] [ j ] ;\n    System . out . print ( sum + \" \" ) ;\n    for ( int j = 1 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " def printSumTricky ( mat , k ) :\n    global n\n    if k > n :\n        return\n    stripSum = [ [ None ] * n for i in range ( n ) ]\n    for j in range ( n ) :\n        Sum = 0\n        for i in range ( k ) :\n            Sum += mat [ i ] [ j ]\n        stripSum [ 0 ] [ j ] = Sum\n        for i in range ( 1 , n - k + 1 ) :\n            Sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] )\n            stripSum [ i ] [ j ] = Sum\n    for i in range ( n - k + 1 ) :\n        Sum = 0\n        for j in range ( k ) :\n            Sum += stripSum [ i ] [ j ]\n        print ( Sum , end = \" \" )\n        for j in range ( 1 , n - k + 1 ) :\n            Sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] )\n            print ( Sum , end = \" \" )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void printSumTricky ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  int stripSum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) sum += mat [ i ] [ j ] ;\n    stripSum [ 0 ] [ j ] = sum ;\n    for ( int i = 1 ;\n    i < n - k + 1 ;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ;\n      stripSum [ i ] [ j ] = sum ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    int sum = 0 ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) sum += stripSum [ i ] [ j ] ;\n    System . out . print ( sum + \" \" ) ;\n    for ( int j = 1 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " void printSumTricky ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  int stripSum [ n ] [ n ];\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    int sum = 0;\n    for ( int i = 0;\n    i < k;\n    i ++ ) sum += mat [ i ] [ j ];\n    stripSum [ 0 ] [ j ] = sum;\n    for ( int i = 1;\n    i < n - k + 1;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] );\n      stripSum [ i ] [ j ] = sum;\n    }\n  }\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    int sum = 0;\n    for ( int j = 0;\n    j < k;\n    j ++ ) sum += stripSum [ i ] [ j ];\n    cout << sum << \"  \";\n    for ( int j = 1;\n    j < n - k + 1;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] );\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSumTricky ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  int stripSum [ n ] [ n ];\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    int sum = 0;\n    for ( int i = 0;\n    i < k;\n    i ++ ) sum += mat [ i ] [ j ];\n    stripSum [ 0 ] [ j ] = sum;\n    for ( int i = 1;\n    i < n - k + 1;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] );\n      stripSum [ i ] [ j ] = sum;\n    }\n  }\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    int sum = 0;\n    for ( int j = 0;\n    j < k;\n    j ++ ) sum += stripSum [ i ] [ j ];\n    cout << sum << \"  \";\n    for ( int j = 1;\n    j < n - k + 1;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] );\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}", "target_program": " static void printSumTricky ( int mat [ ] [ ] , int k ) {\n  if ( k > n ) return ;\n  int stripSum [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    int sum = 0 ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) sum += mat [ i ] [ j ] ;\n    stripSum [ 0 ] [ j ] = sum ;\n    for ( int i = 1 ;\n    i < n - k + 1 ;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] ) ;\n      stripSum [ i ] [ j ] = sum ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n - k + 1 ;\n  i ++ ) {\n    int sum = 0 ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) sum += stripSum [ i ] [ j ] ;\n    System . out . print ( sum + \" \" ) ;\n    for ( int j = 1 ;\n    j < n - k + 1 ;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] ) ;\n      System . out . print ( sum + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSumTricky ( int mat [ ] [ n ], int k ) {\n  if ( k > n ) return;\n  int stripSum [ n ] [ n ];\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    int sum = 0;\n    for ( int i = 0;\n    i < k;\n    i ++ ) sum += mat [ i ] [ j ];\n    stripSum [ 0 ] [ j ] = sum;\n    for ( int i = 1;\n    i < n - k + 1;\n    i ++ ) {\n      sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] );\n      stripSum [ i ] [ j ] = sum;\n    }\n  }\n  for ( int i = 0;\n  i < n - k + 1;\n  i ++ ) {\n    int sum = 0;\n    for ( int j = 0;\n    j < k;\n    j ++ ) sum += stripSum [ i ] [ j ];\n    cout << sum << \"  \";\n    for ( int j = 1;\n    j < n - k + 1;\n    j ++ ) {\n      sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] );\n      cout << sum << \"  \";\n    }\n    cout << endl;\n  }\n}", "target_program": " def printSumTricky ( mat , k ) :\n    global n\n    if k > n :\n        return\n    stripSum = [ [ None ] * n for i in range ( n ) ]\n    for j in range ( n ) :\n        Sum = 0\n        for i in range ( k ) :\n            Sum += mat [ i ] [ j ]\n        stripSum [ 0 ] [ j ] = Sum\n        for i in range ( 1 , n - k + 1 ) :\n            Sum += ( mat [ i + k - 1 ] [ j ] - mat [ i - 1 ] [ j ] )\n            stripSum [ i ] [ j ] = Sum\n    for i in range ( n - k + 1 ) :\n        Sum = 0\n        for j in range ( k ) :\n            Sum += stripSum [ i ] [ j ]\n        print ( Sum , end = \" \" )\n        for j in range ( 1 , n - k + 1 ) :\n            Sum += ( stripSum [ i ] [ j + k - 1 ] - stripSum [ i ] [ j - 1 ] )\n            print ( Sum , end = \" \" )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def minTime ( n , k , a ) :\n    a.sort ( reverse = True ) ;\n    minTime = 0 ;\n    for i in range ( 0 , n , k ) :\n        minTime += ( 2 * a [ i ] ) ;\n    return minTime ;", "target_program": " static int minTime ( int n , int k , int a [ ] ) {\n  int temp ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( a [ i ] < a [ j ] ) {\n        temp = a [ i ] ;\n        a [ i ] = a [ j ] ;\n        a [ j ] = temp ;\n      }\n    }\n  }\n  int minTime = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += k ) minTime += ( 2 * a [ i ] ) ;\n  return minTime ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minTime ( n , k , a ) :\n    a.sort ( reverse = True ) ;\n    minTime = 0 ;\n    for i in range ( 0 , n , k ) :\n        minTime += ( 2 * a [ i ] ) ;\n    return minTime ;", "target_program": " int minTime ( int n, int k, int a [ ] ) {\n  sort ( a, a + n, greater < int > ( ) );\n  int minTime = 0;\n  for ( int i = 0;\n  i < n;\n  i += k ) minTime += ( 2 * a [ i ] );\n  return minTime;\n}"}
{"source": "java", "target": "python", "source_program": " static int minTime ( int n , int k , int a [ ] ) {\n  int temp ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( a [ i ] < a [ j ] ) {\n        temp = a [ i ] ;\n        a [ i ] = a [ j ] ;\n        a [ j ] = temp ;\n      }\n    }\n  }\n  int minTime = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += k ) minTime += ( 2 * a [ i ] ) ;\n  return minTime ;\n}", "target_program": " def minTime ( n , k , a ) :\n    a.sort ( reverse = True ) ;\n    minTime = 0 ;\n    for i in range ( 0 , n , k ) :\n        minTime += ( 2 * a [ i ] ) ;\n    return minTime ;"}
{"source": "java", "target": "cpp", "source_program": " static int minTime ( int n , int k , int a [ ] ) {\n  int temp ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( a [ i ] < a [ j ] ) {\n        temp = a [ i ] ;\n        a [ i ] = a [ j ] ;\n        a [ j ] = temp ;\n      }\n    }\n  }\n  int minTime = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += k ) minTime += ( 2 * a [ i ] ) ;\n  return minTime ;\n}", "target_program": " int minTime ( int n, int k, int a [ ] ) {\n  sort ( a, a + n, greater < int > ( ) );\n  int minTime = 0;\n  for ( int i = 0;\n  i < n;\n  i += k ) minTime += ( 2 * a [ i ] );\n  return minTime;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minTime ( int n, int k, int a [ ] ) {\n  sort ( a, a + n, greater < int > ( ) );\n  int minTime = 0;\n  for ( int i = 0;\n  i < n;\n  i += k ) minTime += ( 2 * a [ i ] );\n  return minTime;\n}", "target_program": " static int minTime ( int n , int k , int a [ ] ) {\n  int temp ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( a [ i ] < a [ j ] ) {\n        temp = a [ i ] ;\n        a [ i ] = a [ j ] ;\n        a [ j ] = temp ;\n      }\n    }\n  }\n  int minTime = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i += k ) minTime += ( 2 * a [ i ] ) ;\n  return minTime ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minTime ( int n, int k, int a [ ] ) {\n  sort ( a, a + n, greater < int > ( ) );\n  int minTime = 0;\n  for ( int i = 0;\n  i < n;\n  i += k ) minTime += ( 2 * a [ i ] );\n  return minTime;\n}", "target_program": " def minTime ( n , k , a ) :\n    a.sort ( reverse = True ) ;\n    minTime = 0 ;\n    for i in range ( 0 , n , k ) :\n        minTime += ( 2 * a [ i ] ) ;\n    return minTime ;"}
{"source": "python", "target": "java", "source_program": " def oddEvenSort ( arr , n ) :\n    isSorted = 0\n    while isSorted == 0 :\n        isSorted = 1\n        temp = 0\n        for i in range ( 1 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n        for i in range ( 0 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n    return", "target_program": " public static void oddEvenSort ( int arr [ ] , int n ) {\n  boolean isSorted = false ;\n  while ( ! isSorted ) {\n    isSorted = true ;\n    int temp = 0 ;\n    for ( int i = 1 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n    for ( int i = 0 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n  }\n  return ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def oddEvenSort ( arr , n ) :\n    isSorted = 0\n    while isSorted == 0 :\n        isSorted = 1\n        temp = 0\n        for i in range ( 1 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n        for i in range ( 0 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n    return", "target_program": " void oddEvenSort ( int arr [ ], int n ) {\n  bool isSorted = false;\n  while ( ! isSorted ) {\n    isSorted = true;\n    for ( int i = 1;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n    for ( int i = 0;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n  }\n  return;\n}"}
{"source": "java", "target": "python", "source_program": " public static void oddEvenSort ( int arr [ ] , int n ) {\n  boolean isSorted = false ;\n  while ( ! isSorted ) {\n    isSorted = true ;\n    int temp = 0 ;\n    for ( int i = 1 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n    for ( int i = 0 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n  }\n  return ;\n}", "target_program": " def oddEvenSort ( arr , n ) :\n    isSorted = 0\n    while isSorted == 0 :\n        isSorted = 1\n        temp = 0\n        for i in range ( 1 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n        for i in range ( 0 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n    return"}
{"source": "java", "target": "cpp", "source_program": " public static void oddEvenSort ( int arr [ ] , int n ) {\n  boolean isSorted = false ;\n  while ( ! isSorted ) {\n    isSorted = true ;\n    int temp = 0 ;\n    for ( int i = 1 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n    for ( int i = 0 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n  }\n  return ;\n}", "target_program": " void oddEvenSort ( int arr [ ], int n ) {\n  bool isSorted = false;\n  while ( ! isSorted ) {\n    isSorted = true;\n    for ( int i = 1;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n    for ( int i = 0;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n  }\n  return;\n}"}
{"source": "cpp", "target": "java", "source_program": " void oddEvenSort ( int arr [ ], int n ) {\n  bool isSorted = false;\n  while ( ! isSorted ) {\n    isSorted = true;\n    for ( int i = 1;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n    for ( int i = 0;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n  }\n  return;\n}", "target_program": " public static void oddEvenSort ( int arr [ ] , int n ) {\n  boolean isSorted = false ;\n  while ( ! isSorted ) {\n    isSorted = true ;\n    int temp = 0 ;\n    for ( int i = 1 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n    for ( int i = 0 ;\n    i <= n - 2 ;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        temp = arr [ i ] ;\n        arr [ i ] = arr [ i + 1 ] ;\n        arr [ i + 1 ] = temp ;\n        isSorted = false ;\n      }\n    }\n  }\n  return ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void oddEvenSort ( int arr [ ], int n ) {\n  bool isSorted = false;\n  while ( ! isSorted ) {\n    isSorted = true;\n    for ( int i = 1;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n    for ( int i = 0;\n    i <= n - 2;\n    i = i + 2 ) {\n      if ( arr [ i ] > arr [ i + 1 ] ) {\n        swap ( arr [ i ], arr [ i + 1 ] );\n        isSorted = false;\n      }\n    }\n  }\n  return;\n}", "target_program": " def oddEvenSort ( arr , n ) :\n    isSorted = 0\n    while isSorted == 0 :\n        isSorted = 1\n        temp = 0\n        for i in range ( 1 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n        for i in range ( 0 , n - 1 , 2 ) :\n            if arr [ i ] > arr [ i + 1 ] :\n                arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]\n                isSorted = 0\n    return"}
{"source": "python", "target": "java", "source_program": " def printKDistinct ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1", "target_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  Map < Integer , Integer > h = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . containsKey ( arr [ i ] ) ) h . put ( arr [ i ] , h . get ( arr [ i ] ) + 1 ) ;\n    else h . put ( arr [ i ] , 1 ) ;\n  }\n  if ( h . size ( ) < k ) return - 1 ;\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . get ( arr [ i ] ) == 1 ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printKDistinct ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1", "target_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > h;\n  for ( int i = 0;\n  i < n;\n  i ++ ) h [ arr [ i ] ] ++;\n  if ( h . size ( ) < k ) return - 1;\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( h [ arr [ i ] ] == 1 ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  Map < Integer , Integer > h = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . containsKey ( arr [ i ] ) ) h . put ( arr [ i ] , h . get ( arr [ i ] ) + 1 ) ;\n    else h . put ( arr [ i ] , 1 ) ;\n  }\n  if ( h . size ( ) < k ) return - 1 ;\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . get ( arr [ i ] ) == 1 ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " def printKDistinct ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  Map < Integer , Integer > h = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . containsKey ( arr [ i ] ) ) h . put ( arr [ i ] , h . get ( arr [ i ] ) + 1 ) ;\n    else h . put ( arr [ i ] , 1 ) ;\n  }\n  if ( h . size ( ) < k ) return - 1 ;\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . get ( arr [ i ] ) == 1 ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > h;\n  for ( int i = 0;\n  i < n;\n  i ++ ) h [ arr [ i ] ] ++;\n  if ( h . size ( ) < k ) return - 1;\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( h [ arr [ i ] ] == 1 ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > h;\n  for ( int i = 0;\n  i < n;\n  i ++ ) h [ arr [ i ] ] ++;\n  if ( h . size ( ) < k ) return - 1;\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( h [ arr [ i ] ] == 1 ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  Map < Integer , Integer > h = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . containsKey ( arr [ i ] ) ) h . put ( arr [ i ] , h . get ( arr [ i ] ) + 1 ) ;\n    else h . put ( arr [ i ] , 1 ) ;\n  }\n  if ( h . size ( ) < k ) return - 1 ;\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( h . get ( arr [ i ] ) == 1 ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  unordered_map < int, int > h;\n  for ( int i = 0;\n  i < n;\n  i ++ ) h [ arr [ i ] ] ++;\n  if ( h . size ( ) < k ) return - 1;\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( h [ arr [ i ] ] == 1 ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " def printKDistinct ( arr , size , KthIndex ) :\n    dict = { }\n    vect = [ ]\n    for i in range ( size ) :\n        if ( arr [ i ] in dict ) :\n            dict [ arr [ i ] ] = dict [ arr [ i ] ] + 1\n        else :\n            dict [ arr [ i ] ] = 1\n    for i in range ( size ) :\n        if ( dict [ arr [ i ] ] > 1 ) :\n            continue\n        else :\n            KthIndex = KthIndex - 1\n        if ( KthIndex == 0 ) :\n            return arr [ i ]\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def generate ( ones , zeroes , str , len1 ) :\n    if ( len1 == len ( str ) ) :\n        print ( str , end = \" \" )\n        return\n    generate ( ones + 1 , zeroes , str + \"1\" , len1 )\n    if ( ones > zeroes ) :\n        generate ( ones , zeroes + 1 , str + \"0\" , len1 )", "target_program": " static void generate ( int ones , int zeroes , String str , int len ) {\n  if ( len == str . length ( ) ) {\n    System . out . print ( str + \" \" ) ;\n    return ;\n  }\n  generate ( ones + 1 , zeroes , str + \"1\" , len ) ;\n  if ( ones > zeroes ) {\n    generate ( ones , zeroes + 1 , str + \"0\" , len ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def generate ( ones , zeroes , str , len1 ) :\n    if ( len1 == len ( str ) ) :\n        print ( str , end = \" \" )\n        return\n    generate ( ones + 1 , zeroes , str + \"1\" , len1 )\n    if ( ones > zeroes ) :\n        generate ( ones , zeroes + 1 , str + \"0\" , len1 )", "target_program": " void generate ( int ones, int zeroes, string str, int len ) {\n  if ( len == str . length ( ) ) {\n    cout << str << \"  \";\n    return;\n  }\n  generate ( ones + 1, zeroes, str + \"1\", len );\n  if ( ones > zeroes ) generate ( ones, zeroes + 1, str + \"0\", len );\n}"}
{"source": "java", "target": "python", "source_program": " static void generate ( int ones , int zeroes , String str , int len ) {\n  if ( len == str . length ( ) ) {\n    System . out . print ( str + \" \" ) ;\n    return ;\n  }\n  generate ( ones + 1 , zeroes , str + \"1\" , len ) ;\n  if ( ones > zeroes ) {\n    generate ( ones , zeroes + 1 , str + \"0\" , len ) ;\n  }\n}", "target_program": " def generate ( ones , zeroes , str , len1 ) :\n    if ( len1 == len ( str ) ) :\n        print ( str , end = \" \" )\n        return\n    generate ( ones + 1 , zeroes , str + \"1\" , len1 )\n    if ( ones > zeroes ) :\n        generate ( ones , zeroes + 1 , str + \"0\" , len1 )"}
{"source": "java", "target": "cpp", "source_program": " static void generate ( int ones , int zeroes , String str , int len ) {\n  if ( len == str . length ( ) ) {\n    System . out . print ( str + \" \" ) ;\n    return ;\n  }\n  generate ( ones + 1 , zeroes , str + \"1\" , len ) ;\n  if ( ones > zeroes ) {\n    generate ( ones , zeroes + 1 , str + \"0\" , len ) ;\n  }\n}", "target_program": " void generate ( int ones, int zeroes, string str, int len ) {\n  if ( len == str . length ( ) ) {\n    cout << str << \"  \";\n    return;\n  }\n  generate ( ones + 1, zeroes, str + \"1\", len );\n  if ( ones > zeroes ) generate ( ones, zeroes + 1, str + \"0\", len );\n}"}
{"source": "cpp", "target": "java", "source_program": " void generate ( int ones, int zeroes, string str, int len ) {\n  if ( len == str . length ( ) ) {\n    cout << str << \"  \";\n    return;\n  }\n  generate ( ones + 1, zeroes, str + \"1\", len );\n  if ( ones > zeroes ) generate ( ones, zeroes + 1, str + \"0\", len );\n}", "target_program": " static void generate ( int ones , int zeroes , String str , int len ) {\n  if ( len == str . length ( ) ) {\n    System . out . print ( str + \" \" ) ;\n    return ;\n  }\n  generate ( ones + 1 , zeroes , str + \"1\" , len ) ;\n  if ( ones > zeroes ) {\n    generate ( ones , zeroes + 1 , str + \"0\" , len ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void generate ( int ones, int zeroes, string str, int len ) {\n  if ( len == str . length ( ) ) {\n    cout << str << \"  \";\n    return;\n  }\n  generate ( ones + 1, zeroes, str + \"1\", len );\n  if ( ones > zeroes ) generate ( ones, zeroes + 1, str + \"0\", len );\n}", "target_program": " def generate ( ones , zeroes , str , len1 ) :\n    if ( len1 == len ( str ) ) :\n        print ( str , end = \" \" )\n        return\n    generate ( ones + 1 , zeroes , str + \"1\" , len1 )\n    if ( ones > zeroes ) :\n        generate ( ones , zeroes + 1 , str + \"0\" , len1 )"}
{"source": "python", "target": "java", "source_program": " def findElement ( arr , n , key ) :\n    for i in range ( n ) :\n        if ( arr [ i ] == key ) :\n            return i\n    return - 1", "target_program": " static int findElement ( int arr [ ] , int n , int key ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] == key ) return i ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findElement ( arr , n , key ) :\n    for i in range ( n ) :\n        if ( arr [ i ] == key ) :\n            return i\n    return - 1", "target_program": " int findElement ( int arr [ ], int n, int key ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == key ) return i;\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findElement ( int arr [ ] , int n , int key ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] == key ) return i ;\n  return - 1 ;\n}", "target_program": " def findElement ( arr , n , key ) :\n    for i in range ( n ) :\n        if ( arr [ i ] == key ) :\n            return i\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findElement ( int arr [ ] , int n , int key ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] == key ) return i ;\n  return - 1 ;\n}", "target_program": " int findElement ( int arr [ ], int n, int key ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == key ) return i;\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findElement ( int arr [ ], int n, int key ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == key ) return i;\n  return - 1;\n}", "target_program": " static int findElement ( int arr [ ] , int n , int key ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] == key ) return i ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findElement ( int arr [ ], int n, int key ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == key ) return i;\n  return - 1;\n}", "target_program": " def findElement ( arr , n , key ) :\n    for i in range ( n ) :\n        if ( arr [ i ] == key ) :\n            return i\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ 0 for k in range ( n ) ]\n    bw = [ 0 for k in range ( n ) ]\n    cur_max , max_so_far = arr [ 0 ] , arr [ 0 ]\n    for i in range ( n ) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n    cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ]\n    i = n - 2\n    while i >= 0 :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= 1\n    fans = max_so_far\n    for i in range ( 1 , n - 1 ) :\n        fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )\n    return fans", "target_program": " static int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) {\n  int fw [ ] = new int [ n ] ;\n  int bw [ ] = new int [ n ] ;\n  int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;\n  fw [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    fw [ i ] = cur_max ;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    bw [ i ] = cur_max ;\n  }\n  int fans = max_so_far ;\n  for ( int i = 1 ;\n  i < n - 1 ;\n  i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ;\n  return fans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ 0 for k in range ( n ) ]\n    bw = [ 0 for k in range ( n ) ]\n    cur_max , max_so_far = arr [ 0 ] , arr [ 0 ]\n    for i in range ( n ) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n    cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ]\n    i = n - 2\n    while i >= 0 :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= 1\n    fans = max_so_far\n    for i in range ( 1 , n - 1 ) :\n        fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )\n    return fans", "target_program": " int maxSumSubarrayRemovingOneEle ( int arr [ ], int n ) {\n  int fw [ n ], bw [ n ];\n  int cur_max = arr [ 0 ], max_so_far = arr [ 0 ];\n  fw [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    fw [ i ] = cur_max;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    bw [ i ] = cur_max;\n  }\n  int fans = max_so_far;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) fans = max ( fans, fw [ i - 1 ] + bw [ i + 1 ] );\n  return fans;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) {\n  int fw [ ] = new int [ n ] ;\n  int bw [ ] = new int [ n ] ;\n  int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;\n  fw [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    fw [ i ] = cur_max ;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    bw [ i ] = cur_max ;\n  }\n  int fans = max_so_far ;\n  for ( int i = 1 ;\n  i < n - 1 ;\n  i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ;\n  return fans ;\n}", "target_program": " def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ 0 for k in range ( n ) ]\n    bw = [ 0 for k in range ( n ) ]\n    cur_max , max_so_far = arr [ 0 ] , arr [ 0 ]\n    for i in range ( n ) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n    cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ]\n    i = n - 2\n    while i >= 0 :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= 1\n    fans = max_so_far\n    for i in range ( 1 , n - 1 ) :\n        fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )\n    return fans"}
{"source": "java", "target": "cpp", "source_program": " static int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) {\n  int fw [ ] = new int [ n ] ;\n  int bw [ ] = new int [ n ] ;\n  int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;\n  fw [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    fw [ i ] = cur_max ;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    bw [ i ] = cur_max ;\n  }\n  int fans = max_so_far ;\n  for ( int i = 1 ;\n  i < n - 1 ;\n  i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ;\n  return fans ;\n}", "target_program": " int maxSumSubarrayRemovingOneEle ( int arr [ ], int n ) {\n  int fw [ n ], bw [ n ];\n  int cur_max = arr [ 0 ], max_so_far = arr [ 0 ];\n  fw [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    fw [ i ] = cur_max;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    bw [ i ] = cur_max;\n  }\n  int fans = max_so_far;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) fans = max ( fans, fw [ i - 1 ] + bw [ i + 1 ] );\n  return fans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSumSubarrayRemovingOneEle ( int arr [ ], int n ) {\n  int fw [ n ], bw [ n ];\n  int cur_max = arr [ 0 ], max_so_far = arr [ 0 ];\n  fw [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    fw [ i ] = cur_max;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    bw [ i ] = cur_max;\n  }\n  int fans = max_so_far;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) fans = max ( fans, fw [ i - 1 ] + bw [ i + 1 ] );\n  return fans;\n}", "target_program": " static int maxSumSubarrayRemovingOneEle ( int arr [ ] , int n ) {\n  int fw [ ] = new int [ n ] ;\n  int bw [ ] = new int [ n ] ;\n  int cur_max = arr [ 0 ] , max_so_far = arr [ 0 ] ;\n  fw [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    fw [ i ] = cur_max ;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    cur_max = Math . max ( arr [ i ] , cur_max + arr [ i ] ) ;\n    max_so_far = Math . max ( max_so_far , cur_max ) ;\n    bw [ i ] = cur_max ;\n  }\n  int fans = max_so_far ;\n  for ( int i = 1 ;\n  i < n - 1 ;\n  i ++ ) fans = Math . max ( fans , fw [ i - 1 ] + bw [ i + 1 ] ) ;\n  return fans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSumSubarrayRemovingOneEle ( int arr [ ], int n ) {\n  int fw [ n ], bw [ n ];\n  int cur_max = arr [ 0 ], max_so_far = arr [ 0 ];\n  fw [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    fw [ i ] = cur_max;\n  }\n  cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    cur_max = max ( arr [ i ], cur_max + arr [ i ] );\n    max_so_far = max ( max_so_far, cur_max );\n    bw [ i ] = cur_max;\n  }\n  int fans = max_so_far;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) fans = max ( fans, fw [ i - 1 ] + bw [ i + 1 ] );\n  return fans;\n}", "target_program": " def maxSumSubarrayRemovingOneEle ( arr , n ) :\n    fw = [ 0 for k in range ( n ) ]\n    bw = [ 0 for k in range ( n ) ]\n    cur_max , max_so_far = arr [ 0 ] , arr [ 0 ]\n    for i in range ( n ) :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        fw [ i ] = cur_max\n    cur_max = max_so_far = bw [ n - 1 ] = arr [ n - 1 ]\n    i = n - 2\n    while i >= 0 :\n        cur_max = max ( arr [ i ] , cur_max + arr [ i ] )\n        max_so_far = max ( max_so_far , cur_max )\n        bw [ i ] = cur_max\n        i -= 1\n    fans = max_so_far\n    for i in range ( 1 , n - 1 ) :\n        fans = max ( fans , fw [ i - 1 ] + bw [ i + 1 ] )\n    return fans"}
{"source": "python", "target": "java", "source_program": " def countWays ( n , m ) :\n    count = [ ]\n    for i in range ( n + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n    return count [ n ]", "target_program": " static int countWays ( int n , int m ) {\n  int count [ ] = new int [ n + 1 ] ;\n  count [ 0 ] = 0 ;\n  int i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ;\n    else if ( i < m ) count [ i ] = 1 ;\n    else count [ i ] = 2 ;\n  }\n  return count [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWays ( n , m ) :\n    count = [ ]\n    for i in range ( n + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n    return count [ n ]", "target_program": " int countWays ( int n, int m ) {\n  int count [ n + 1 ];\n  count [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ];\n    else if ( i < m ) count [ i ] = 1;\n    else count [ i ] = 2;\n  }\n  return count [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countWays ( int n , int m ) {\n  int count [ ] = new int [ n + 1 ] ;\n  count [ 0 ] = 0 ;\n  int i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ;\n    else if ( i < m ) count [ i ] = 1 ;\n    else count [ i ] = 2 ;\n  }\n  return count [ n ] ;\n}", "target_program": " def countWays ( n , m ) :\n    count = [ ]\n    for i in range ( n + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n    return count [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countWays ( int n , int m ) {\n  int count [ ] = new int [ n + 1 ] ;\n  count [ 0 ] = 0 ;\n  int i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ;\n    else if ( i < m ) count [ i ] = 1 ;\n    else count [ i ] = 2 ;\n  }\n  return count [ n ] ;\n}", "target_program": " int countWays ( int n, int m ) {\n  int count [ n + 1 ];\n  count [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ];\n    else if ( i < m ) count [ i ] = 1;\n    else count [ i ] = 2;\n  }\n  return count [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countWays ( int n, int m ) {\n  int count [ n + 1 ];\n  count [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ];\n    else if ( i < m ) count [ i ] = 1;\n    else count [ i ] = 2;\n  }\n  return count [ n ];\n}", "target_program": " static int countWays ( int n , int m ) {\n  int count [ ] = new int [ n + 1 ] ;\n  count [ 0 ] = 0 ;\n  int i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ] ;\n    else if ( i < m ) count [ i ] = 1 ;\n    else count [ i ] = 2 ;\n  }\n  return count [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countWays ( int n, int m ) {\n  int count [ n + 1 ];\n  count [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( i > m ) count [ i ] = count [ i - 1 ] + count [ i - m ];\n    else if ( i < m ) count [ i ] = 1;\n    else count [ i ] = 2;\n  }\n  return count [ n ];\n}", "target_program": " def countWays ( n , m ) :\n    count = [ ]\n    for i in range ( n + 2 ) :\n        count.append ( 0 )\n    count [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        if ( i > m ) :\n            count [ i ] = count [ i - 1 ] + count [ i - m ]\n        elif ( i < m ) :\n            count [ i ] = 1\n        else :\n            count [ i ] = 2\n    return count [ n ]"}
{"source": "python", "target": "java", "source_program": " def LCIS ( arr1 , n , arr2 , m ) :\n    table = [ 0 ] * m\n    for j in range ( m ) :\n        table [ j ] = 0\n    for i in range ( n ) :\n        current = 0\n        for j in range ( m ) :\n            if ( arr1 [ i ] == arr2 [ j ] ) :\n                if ( current + 1 > table [ j ] ) :\n                    table [ j ] = current + 1\n            if ( arr1 [ i ] > arr2 [ j ] ) :\n                if ( table [ j ] > current ) :\n                    current = table [ j ]\n    result = 0\n    for i in range ( m ) :\n        if ( table [ i ] > result ) :\n            result = table [ i ]\n    return result", "target_program": " static int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) {\n  int table [ ] = new int [ m ] ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) table [ j ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int current = 0 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ;\n    }\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ] ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def LCIS ( arr1 , n , arr2 , m ) :\n    table = [ 0 ] * m\n    for j in range ( m ) :\n        table [ j ] = 0\n    for i in range ( n ) :\n        current = 0\n        for j in range ( m ) :\n            if ( arr1 [ i ] == arr2 [ j ] ) :\n                if ( current + 1 > table [ j ] ) :\n                    table [ j ] = current + 1\n            if ( arr1 [ i ] > arr2 [ j ] ) :\n                if ( table [ j ] > current ) :\n                    current = table [ j ]\n    result = 0\n    for i in range ( m ) :\n        if ( table [ i ] > result ) :\n            result = table [ i ]\n    return result", "target_program": " int LCIS ( int arr1 [ ], int n, int arr2 [ ], int m ) {\n  int table [ m ];\n  for ( int j = 0;\n  j < m;\n  j ++ ) table [ j ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int current = 0;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ];\n    }\n  }\n  int result = 0;\n  for ( int i = 0;\n  i < m;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ];\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) {\n  int table [ ] = new int [ m ] ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) table [ j ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int current = 0 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ;\n    }\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ] ;\n  return result ;\n}", "target_program": " def LCIS ( arr1 , n , arr2 , m ) :\n    table = [ 0 ] * m\n    for j in range ( m ) :\n        table [ j ] = 0\n    for i in range ( n ) :\n        current = 0\n        for j in range ( m ) :\n            if ( arr1 [ i ] == arr2 [ j ] ) :\n                if ( current + 1 > table [ j ] ) :\n                    table [ j ] = current + 1\n            if ( arr1 [ i ] > arr2 [ j ] ) :\n                if ( table [ j ] > current ) :\n                    current = table [ j ]\n    result = 0\n    for i in range ( m ) :\n        if ( table [ i ] > result ) :\n            result = table [ i ]\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) {\n  int table [ ] = new int [ m ] ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) table [ j ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int current = 0 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ;\n    }\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ] ;\n  return result ;\n}", "target_program": " int LCIS ( int arr1 [ ], int n, int arr2 [ ], int m ) {\n  int table [ m ];\n  for ( int j = 0;\n  j < m;\n  j ++ ) table [ j ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int current = 0;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ];\n    }\n  }\n  int result = 0;\n  for ( int i = 0;\n  i < m;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ];\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int LCIS ( int arr1 [ ], int n, int arr2 [ ], int m ) {\n  int table [ m ];\n  for ( int j = 0;\n  j < m;\n  j ++ ) table [ j ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int current = 0;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ];\n    }\n  }\n  int result = 0;\n  for ( int i = 0;\n  i < m;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ];\n  return result;\n}", "target_program": " static int LCIS ( int arr1 [ ] , int n , int arr2 [ ] , int m ) {\n  int table [ ] = new int [ m ] ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) table [ j ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int current = 0 ;\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1 ;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ] ;\n    }\n  }\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ] ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int LCIS ( int arr1 [ ], int n, int arr2 [ ], int m ) {\n  int table [ m ];\n  for ( int j = 0;\n  j < m;\n  j ++ ) table [ j ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int current = 0;\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr1 [ i ] == arr2 [ j ] ) if ( current + 1 > table [ j ] ) table [ j ] = current + 1;\n      if ( arr1 [ i ] > arr2 [ j ] ) if ( table [ j ] > current ) current = table [ j ];\n    }\n  }\n  int result = 0;\n  for ( int i = 0;\n  i < m;\n  i ++ ) if ( table [ i ] > result ) result = table [ i ];\n  return result;\n}", "target_program": " def LCIS ( arr1 , n , arr2 , m ) :\n    table = [ 0 ] * m\n    for j in range ( m ) :\n        table [ j ] = 0\n    for i in range ( n ) :\n        current = 0\n        for j in range ( m ) :\n            if ( arr1 [ i ] == arr2 [ j ] ) :\n                if ( current + 1 > table [ j ] ) :\n                    table [ j ] = current + 1\n            if ( arr1 [ i ] > arr2 [ j ] ) :\n                if ( table [ j ] > current ) :\n                    current = table [ j ]\n    result = 0\n    for i in range ( m ) :\n        if ( table [ i ] > result ) :\n            result = table [ i ]\n    return result"}
{"source": "python", "target": "java", "source_program": " def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 :\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 :\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    for i in range ( 3 , n ) :\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n    return sum [ n - 1 ]", "target_program": " static int maxSumWO3Consec ( int arr [ ] , int n ) {\n  int sum [ ] = new int [ n ] ;\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;\n  if ( n > 2 ) sum [ 2 ] = Math . max ( sum [ 1 ] , Math . max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ;\n  for ( int i = 3 ;\n  i < n ;\n  i ++ ) sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ;\n  return sum [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 :\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 :\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    for i in range ( 3 , n ) :\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n    return sum [ n - 1 ]", "target_program": " int maxSumWO3Consec ( int arr [ ], int n ) {\n  int sum [ n ];\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ];\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ];\n  if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ], max ( arr [ 1 ] + arr [ 2 ], arr [ 0 ] + arr [ 2 ] ) );\n  for ( int i = 3;\n  i < n;\n  i ++ ) sum [ i ] = max ( max ( sum [ i - 1 ], sum [ i - 2 ] + arr [ i ] ), arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] );\n  return sum [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSumWO3Consec ( int arr [ ] , int n ) {\n  int sum [ ] = new int [ n ] ;\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;\n  if ( n > 2 ) sum [ 2 ] = Math . max ( sum [ 1 ] , Math . max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ;\n  for ( int i = 3 ;\n  i < n ;\n  i ++ ) sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ;\n  return sum [ n - 1 ] ;\n}", "target_program": " def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 :\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 :\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    for i in range ( 3 , n ) :\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n    return sum [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxSumWO3Consec ( int arr [ ] , int n ) {\n  int sum [ ] = new int [ n ] ;\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;\n  if ( n > 2 ) sum [ 2 ] = Math . max ( sum [ 1 ] , Math . max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ;\n  for ( int i = 3 ;\n  i < n ;\n  i ++ ) sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ;\n  return sum [ n - 1 ] ;\n}", "target_program": " int maxSumWO3Consec ( int arr [ ], int n ) {\n  int sum [ n ];\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ];\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ];\n  if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ], max ( arr [ 1 ] + arr [ 2 ], arr [ 0 ] + arr [ 2 ] ) );\n  for ( int i = 3;\n  i < n;\n  i ++ ) sum [ i ] = max ( max ( sum [ i - 1 ], sum [ i - 2 ] + arr [ i ] ), arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] );\n  return sum [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSumWO3Consec ( int arr [ ], int n ) {\n  int sum [ n ];\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ];\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ];\n  if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ], max ( arr [ 1 ] + arr [ 2 ], arr [ 0 ] + arr [ 2 ] ) );\n  for ( int i = 3;\n  i < n;\n  i ++ ) sum [ i ] = max ( max ( sum [ i - 1 ], sum [ i - 2 ] + arr [ i ] ), arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] );\n  return sum [ n - 1 ];\n}", "target_program": " static int maxSumWO3Consec ( int arr [ ] , int n ) {\n  int sum [ ] = new int [ n ] ;\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ] ;\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ] ;\n  if ( n > 2 ) sum [ 2 ] = Math . max ( sum [ 1 ] , Math . max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) ) ;\n  for ( int i = 3 ;\n  i < n ;\n  i ++ ) sum [ i ] = Math . max ( Math . max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] ) ;\n  return sum [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSumWO3Consec ( int arr [ ], int n ) {\n  int sum [ n ];\n  if ( n >= 1 ) sum [ 0 ] = arr [ 0 ];\n  if ( n >= 2 ) sum [ 1 ] = arr [ 0 ] + arr [ 1 ];\n  if ( n > 2 ) sum [ 2 ] = max ( sum [ 1 ], max ( arr [ 1 ] + arr [ 2 ], arr [ 0 ] + arr [ 2 ] ) );\n  for ( int i = 3;\n  i < n;\n  i ++ ) sum [ i ] = max ( max ( sum [ i - 1 ], sum [ i - 2 ] + arr [ i ] ), arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] );\n  return sum [ n - 1 ];\n}", "target_program": " def maxSumWO3Consec ( arr , n ) :\n    sum = [ 0 for k in range ( n ) ]\n    if n >= 1 :\n        sum [ 0 ] = arr [ 0 ]\n    if n >= 2 :\n        sum [ 1 ] = arr [ 0 ] + arr [ 1 ]\n    if n > 2 :\n        sum [ 2 ] = max ( sum [ 1 ] , max ( arr [ 1 ] + arr [ 2 ] , arr [ 0 ] + arr [ 2 ] ) )\n    for i in range ( 3 , n ) :\n        sum [ i ] = max ( max ( sum [ i - 1 ] , sum [ i - 2 ] + arr [ i ] ) , arr [ i ] + arr [ i - 1 ] + sum [ i - 3 ] )\n    return sum [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def eulerian ( n , m ) :\n    dp = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 0 , m + 1 ) :\n            if ( i > j ) :\n                if ( j == 0 ) :\n                    dp [ i ] [ j ] = 1\n                else :\n                    dp [ i ] [ j ] = ( ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) )\n    return dp [ n ] [ m ]", "target_program": " public static int eulerian ( int n , int m ) {\n  int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= m ;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1 ;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n ] [ m ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def eulerian ( n , m ) :\n    dp = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 0 , m + 1 ) :\n            if ( i > j ) :\n                if ( j == 0 ) :\n                    dp [ i ] [ j ] = 1\n                else :\n                    dp [ i ] [ j ] = ( ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) )\n    return dp [ n ] [ m ]", "target_program": " int eulerian ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= m;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] );\n      }\n    }\n  }\n  return dp [ n ] [ m ];\n}"}
{"source": "java", "target": "python", "source_program": " public static int eulerian ( int n , int m ) {\n  int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= m ;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1 ;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n ] [ m ] ;\n}", "target_program": " def eulerian ( n , m ) :\n    dp = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 0 , m + 1 ) :\n            if ( i > j ) :\n                if ( j == 0 ) :\n                    dp [ i ] [ j ] = 1\n                else :\n                    dp [ i ] [ j ] = ( ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) )\n    return dp [ n ] [ m ]"}
{"source": "java", "target": "cpp", "source_program": " public static int eulerian ( int n , int m ) {\n  int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= m ;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1 ;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n ] [ m ] ;\n}", "target_program": " int eulerian ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= m;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] );\n      }\n    }\n  }\n  return dp [ n ] [ m ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int eulerian ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= m;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] );\n      }\n    }\n  }\n  return dp [ n ] [ m ];\n}", "target_program": " public static int eulerian ( int n , int m ) {\n  int [ ] [ ] dp = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= m ;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1 ;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n ] [ m ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int eulerian ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= m;\n    j ++ ) {\n      if ( i > j ) {\n        if ( j == 0 ) dp [ i ] [ j ] = 1;\n        else dp [ i ] [ j ] = ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] );\n      }\n    }\n  }\n  return dp [ n ] [ m ];\n}", "target_program": " def eulerian ( n , m ) :\n    dp = [ [ 0 for x in range ( m + 1 ) ] for y in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 0 , m + 1 ) :\n            if ( i > j ) :\n                if ( j == 0 ) :\n                    dp [ i ] [ j ] = 1\n                else :\n                    dp [ i ] [ j ] = ( ( ( i - j ) * dp [ i - 1 ] [ j - 1 ] ) + ( ( j + 1 ) * dp [ i - 1 ] [ j ] ) )\n    return dp [ n ] [ m ]"}
{"source": "python", "target": "java", "source_program": " def rearrange ( arr , n ) :\n    i = - 1\n    for j in range ( n ) :\n        if ( arr [ j ] < 0 ) :\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2", "target_program": " static void rearrange ( int arr [ ] , int n ) {\n  int i = - 1 , temp = 0 ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++ ;\n      temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n  }\n  int pos = i + 1 , neg = 0 ;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    temp = arr [ neg ] ;\n    arr [ neg ] = arr [ pos ] ;\n    arr [ pos ] = temp ;\n    pos ++ ;\n    neg += 2 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def rearrange ( arr , n ) :\n    i = - 1\n    for j in range ( n ) :\n        if ( arr [ j ] < 0 ) :\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2", "target_program": " void GFG :: rearrange ( int arr [ ], int n ) {\n  int i = - 1;\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++;\n      swap ( & arr [ i ], & arr [ j ] );\n    }\n  }\n  int pos = i + 1, neg = 0;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    swap ( & arr [ neg ], & arr [ pos ] );\n    pos ++;\n    neg += 2;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void rearrange ( int arr [ ] , int n ) {\n  int i = - 1 , temp = 0 ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++ ;\n      temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n  }\n  int pos = i + 1 , neg = 0 ;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    temp = arr [ neg ] ;\n    arr [ neg ] = arr [ pos ] ;\n    arr [ pos ] = temp ;\n    pos ++ ;\n    neg += 2 ;\n  }\n}", "target_program": " def rearrange ( arr , n ) :\n    i = - 1\n    for j in range ( n ) :\n        if ( arr [ j ] < 0 ) :\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2"}
{"source": "java", "target": "cpp", "source_program": " static void rearrange ( int arr [ ] , int n ) {\n  int i = - 1 , temp = 0 ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++ ;\n      temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n  }\n  int pos = i + 1 , neg = 0 ;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    temp = arr [ neg ] ;\n    arr [ neg ] = arr [ pos ] ;\n    arr [ pos ] = temp ;\n    pos ++ ;\n    neg += 2 ;\n  }\n}", "target_program": " void GFG :: rearrange ( int arr [ ], int n ) {\n  int i = - 1;\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++;\n      swap ( & arr [ i ], & arr [ j ] );\n    }\n  }\n  int pos = i + 1, neg = 0;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    swap ( & arr [ neg ], & arr [ pos ] );\n    pos ++;\n    neg += 2;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void GFG :: rearrange ( int arr [ ], int n ) {\n  int i = - 1;\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++;\n      swap ( & arr [ i ], & arr [ j ] );\n    }\n  }\n  int pos = i + 1, neg = 0;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    swap ( & arr [ neg ], & arr [ pos ] );\n    pos ++;\n    neg += 2;\n  }\n}", "target_program": " static void rearrange ( int arr [ ] , int n ) {\n  int i = - 1 , temp = 0 ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++ ;\n      temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n  }\n  int pos = i + 1 , neg = 0 ;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    temp = arr [ neg ] ;\n    arr [ neg ] = arr [ pos ] ;\n    arr [ pos ] = temp ;\n    pos ++ ;\n    neg += 2 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void GFG :: rearrange ( int arr [ ], int n ) {\n  int i = - 1;\n  for ( int j = 0;\n  j < n;\n  j ++ ) {\n    if ( arr [ j ] < 0 ) {\n      i ++;\n      swap ( & arr [ i ], & arr [ j ] );\n    }\n  }\n  int pos = i + 1, neg = 0;\n  while ( pos < n && neg < pos && arr [ neg ] < 0 ) {\n    swap ( & arr [ neg ], & arr [ pos ] );\n    pos ++;\n    neg += 2;\n  }\n}", "target_program": " def rearrange ( arr , n ) :\n    i = - 1\n    for j in range ( n ) :\n        if ( arr [ j ] < 0 ) :\n            i += 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n    pos , neg = i + 1 , 0\n    while ( pos < n and neg < pos and arr [ neg ] < 0 ) :\n        arr [ neg ] , arr [ pos ] = arr [ pos ] , arr [ neg ]\n        pos += 1\n        neg += 2"}
{"source": "python", "target": "java", "source_program": " def maximumSum ( arr , n , k ) :\n    for i in range ( 1 , k + 1 ) :\n        min = + 2147483647\n        index = - 1\n        for j in range ( n ) :\n            if ( arr [ j ] < min ) :\n                min = arr [ j ]\n                index = j\n        if ( min == 0 ) :\n            break\n        arr [ index ] = - arr [ index ]\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    return sum", "target_program": " static int maximumSum ( int arr [ ] , int n , int k ) {\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int min = + 2147483647 ;\n    int index = - 1 ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ] ;\n        index = j ;\n      }\n    }\n    if ( min == 0 ) break ;\n    arr [ index ] = - arr [ index ] ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumSum ( arr , n , k ) :\n    for i in range ( 1 , k + 1 ) :\n        min = + 2147483647\n        index = - 1\n        for j in range ( n ) :\n            if ( arr [ j ] < min ) :\n                min = arr [ j ]\n                index = j\n        if ( min == 0 ) :\n            break\n        arr [ index ] = - arr [ index ]\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    return sum", "target_program": " int maximumSum ( int arr [ ], int n, int k ) {\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int min = INT_MAX;\n    int index = - 1;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ];\n        index = j;\n      }\n    }\n    if ( min == 0 ) break;\n    arr [ index ] = - arr [ index ];\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumSum ( int arr [ ] , int n , int k ) {\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int min = + 2147483647 ;\n    int index = - 1 ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ] ;\n        index = j ;\n      }\n    }\n    if ( min == 0 ) break ;\n    arr [ index ] = - arr [ index ] ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  return sum ;\n}", "target_program": " def maximumSum ( arr , n , k ) :\n    for i in range ( 1 , k + 1 ) :\n        min = + 2147483647\n        index = - 1\n        for j in range ( n ) :\n            if ( arr [ j ] < min ) :\n                min = arr [ j ]\n                index = j\n        if ( min == 0 ) :\n            break\n        arr [ index ] = - arr [ index ]\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int maximumSum ( int arr [ ] , int n , int k ) {\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int min = + 2147483647 ;\n    int index = - 1 ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ] ;\n        index = j ;\n      }\n    }\n    if ( min == 0 ) break ;\n    arr [ index ] = - arr [ index ] ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  return sum ;\n}", "target_program": " int maximumSum ( int arr [ ], int n, int k ) {\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int min = INT_MAX;\n    int index = - 1;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ];\n        index = j;\n      }\n    }\n    if ( min == 0 ) break;\n    arr [ index ] = - arr [ index ];\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumSum ( int arr [ ], int n, int k ) {\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int min = INT_MAX;\n    int index = - 1;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ];\n        index = j;\n      }\n    }\n    if ( min == 0 ) break;\n    arr [ index ] = - arr [ index ];\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  return sum;\n}", "target_program": " static int maximumSum ( int arr [ ] , int n , int k ) {\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int min = + 2147483647 ;\n    int index = - 1 ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ] ;\n        index = j ;\n      }\n    }\n    if ( min == 0 ) break ;\n    arr [ index ] = - arr [ index ] ;\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += arr [ i ] ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumSum ( int arr [ ], int n, int k ) {\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int min = INT_MAX;\n    int index = - 1;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( arr [ j ] < min ) {\n        min = arr [ j ];\n        index = j;\n      }\n    }\n    if ( min == 0 ) break;\n    arr [ index ] = - arr [ index ];\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  return sum;\n}", "target_program": " def maximumSum ( arr , n , k ) :\n    for i in range ( 1 , k + 1 ) :\n        min = + 2147483647\n        index = - 1\n        for j in range ( n ) :\n            if ( arr [ j ] < min ) :\n                min = arr [ j ]\n                index = j\n        if ( min == 0 ) :\n            break\n        arr [ index ] = - arr [ index ]\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    return sum"}
{"source": "python", "target": "java", "source_program": " def isSubSequence ( str1 , str2 , m , n ) :\n    j = 0\n    i = 0\n    while j < m and i < n :\n        if str1 [ j ] == str2 [ i ] :\n            j = j + 1\n        i = i + 1\n    return j == m", "target_program": " static boolean isSubSequence ( String str1 , String str2 , int m , int n ) {\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < n && j < m ;\n  i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j ++ ;\n  return ( j == m ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isSubSequence ( str1 , str2 , m , n ) :\n    j = 0\n    i = 0\n    while j < m and i < n :\n        if str1 [ j ] == str2 [ i ] :\n            j = j + 1\n        i = i + 1\n    return j == m", "target_program": " bool isSubSequence ( char str1 [ ], char str2 [ ], int m, int n ) {\n  int j = 0;\n  for ( int i = 0;\n  i < n && j < m;\n  i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++;\n  return ( j == m );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isSubSequence ( String str1 , String str2 , int m , int n ) {\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < n && j < m ;\n  i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j ++ ;\n  return ( j == m ) ;\n}", "target_program": " def isSubSequence ( str1 , str2 , m , n ) :\n    j = 0\n    i = 0\n    while j < m and i < n :\n        if str1 [ j ] == str2 [ i ] :\n            j = j + 1\n        i = i + 1\n    return j == m"}
{"source": "java", "target": "cpp", "source_program": " static boolean isSubSequence ( String str1 , String str2 , int m , int n ) {\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < n && j < m ;\n  i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j ++ ;\n  return ( j == m ) ;\n}", "target_program": " bool isSubSequence ( char str1 [ ], char str2 [ ], int m, int n ) {\n  int j = 0;\n  for ( int i = 0;\n  i < n && j < m;\n  i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++;\n  return ( j == m );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isSubSequence ( char str1 [ ], char str2 [ ], int m, int n ) {\n  int j = 0;\n  for ( int i = 0;\n  i < n && j < m;\n  i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++;\n  return ( j == m );\n}", "target_program": " static boolean isSubSequence ( String str1 , String str2 , int m , int n ) {\n  int j = 0 ;\n  for ( int i = 0 ;\n  i < n && j < m ;\n  i ++ ) if ( str1 . charAt ( j ) == str2 . charAt ( i ) ) j ++ ;\n  return ( j == m ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isSubSequence ( char str1 [ ], char str2 [ ], int m, int n ) {\n  int j = 0;\n  for ( int i = 0;\n  i < n && j < m;\n  i ++ ) if ( str1 [ j ] == str2 [ i ] ) j ++;\n  return ( j == m );\n}", "target_program": " def isSubSequence ( str1 , str2 , m , n ) :\n    j = 0\n    i = 0\n    while j < m and i < n :\n        if str1 [ j ] == str2 [ i ] :\n            j = j + 1\n        i = i + 1\n    return j == m"}
{"source": "python", "target": "java", "source_program": " def unitnumber ( x , y ) :\n    x = x % 10\n    if y != 0 :\n        y = y % 4 + 4\n    return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )", "target_program": " static int unitnumber ( int x , int y ) {\n  x = x % 10 ;\n  if ( y != 0 ) y = y % 4 + 4 ;\n  return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def unitnumber ( x , y ) :\n    x = x % 10\n    if y != 0 :\n        y = y % 4 + 4\n    return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )", "target_program": " int unitnumber ( int x, int y ) {\n  x = x % 10;\n  if ( y != 0 ) y = y % 4 + 4;\n  return ( ( ( int ) ( pow ( x, y ) ) ) % 10 );\n}"}
{"source": "java", "target": "python", "source_program": " static int unitnumber ( int x , int y ) {\n  x = x % 10 ;\n  if ( y != 0 ) y = y % 4 + 4 ;\n  return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;\n}", "target_program": " def unitnumber ( x , y ) :\n    x = x % 10\n    if y != 0 :\n        y = y % 4 + 4\n    return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )"}
{"source": "java", "target": "cpp", "source_program": " static int unitnumber ( int x , int y ) {\n  x = x % 10 ;\n  if ( y != 0 ) y = y % 4 + 4 ;\n  return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;\n}", "target_program": " int unitnumber ( int x, int y ) {\n  x = x % 10;\n  if ( y != 0 ) y = y % 4 + 4;\n  return ( ( ( int ) ( pow ( x, y ) ) ) % 10 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int unitnumber ( int x, int y ) {\n  x = x % 10;\n  if ( y != 0 ) y = y % 4 + 4;\n  return ( ( ( int ) ( pow ( x, y ) ) ) % 10 );\n}", "target_program": " static int unitnumber ( int x , int y ) {\n  x = x % 10 ;\n  if ( y != 0 ) y = y % 4 + 4 ;\n  return ( ( ( int ) ( Math . pow ( x , y ) ) ) % 10 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int unitnumber ( int x, int y ) {\n  x = x % 10;\n  if ( y != 0 ) y = y % 4 + 4;\n  return ( ( ( int ) ( pow ( x, y ) ) ) % 10 );\n}", "target_program": " def unitnumber ( x , y ) :\n    x = x % 10\n    if y != 0 :\n        y = y % 4 + 4\n    return ( ( ( int ) ( math.pow ( x , y ) ) ) % 10 )"}
{"source": "python", "target": "java", "source_program": " def NextFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    j = 0\n    for i in range ( n ) :\n        while j < m :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n            j = ( j + 1 ) % m\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )", "target_program": " static void NextFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] , j = 0 ;\n  Arrays . fill ( allocation , - 1 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n      j = ( j + 1 ) % m ;\n    }\n  }\n  System . out . print ( \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( i + 1 + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) {\n      System . out . print ( allocation [ i ] + 1 ) ;\n    }\n    else {\n      System . out . print ( \"Not Allocated\" ) ;\n    }\n    System . out . println ( \"\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def NextFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    j = 0\n    for i in range ( n ) :\n        while j < m :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n            j = ( j + 1 ) % m\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )", "target_program": " void NextFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ], j = 0;\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n      j = ( j + 1 ) % m;\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void NextFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] , j = 0 ;\n  Arrays . fill ( allocation , - 1 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n      j = ( j + 1 ) % m ;\n    }\n  }\n  System . out . print ( \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( i + 1 + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) {\n      System . out . print ( allocation [ i ] + 1 ) ;\n    }\n    else {\n      System . out . print ( \"Not Allocated\" ) ;\n    }\n    System . out . println ( \"\" ) ;\n  }\n}", "target_program": " def NextFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    j = 0\n    for i in range ( n ) :\n        while j < m :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n            j = ( j + 1 ) % m\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"source": "java", "target": "cpp", "source_program": " static void NextFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] , j = 0 ;\n  Arrays . fill ( allocation , - 1 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n      j = ( j + 1 ) % m ;\n    }\n  }\n  System . out . print ( \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( i + 1 + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) {\n      System . out . print ( allocation [ i ] + 1 ) ;\n    }\n    else {\n      System . out . print ( \"Not Allocated\" ) ;\n    }\n    System . out . println ( \"\" ) ;\n  }\n}", "target_program": " void NextFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ], j = 0;\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n      j = ( j + 1 ) % m;\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void NextFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ], j = 0;\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n      j = ( j + 1 ) % m;\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}", "target_program": " static void NextFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] , j = 0 ;\n  Arrays . fill ( allocation , - 1 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n      j = ( j + 1 ) % m ;\n    }\n  }\n  System . out . print ( \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( i + 1 + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) {\n      System . out . print ( allocation [ i ] + 1 ) ;\n    }\n    else {\n      System . out . print ( \"Not Allocated\" ) ;\n    }\n    System . out . println ( \"\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void NextFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ], j = 0;\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( j < m ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n      j = ( j + 1 ) % m;\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}", "target_program": " def NextFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    j = 0\n    for i in range ( n ) :\n        while j < m :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n            j = ( j + 1 ) % m\n    print ( \"Process No.Process Size Block no.\" )\n    for i in range ( n ) :\n        print ( i + 1 , \"         \" , processSize [ i ] , end = \"     \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"source": "python", "target": "java", "source_program": " def nobleInteger ( arr , size ) :\n    for i in range ( 0 , size ) :\n        count = 0\n        for j in range ( 0 , size ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                count += 1\n        if ( count == arr [ i ] ) :\n            return arr [ i ]\n    return - 1", "target_program": " public static int nobleInteger ( int arr [ ] ) {\n  int size = arr . length ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++ ;\n    if ( count == arr [ i ] ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def nobleInteger ( arr , size ) :\n    for i in range ( 0 , size ) :\n        count = 0\n        for j in range ( 0 , size ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                count += 1\n        if ( count == arr [ i ] ) :\n            return arr [ i ]\n    return - 1", "target_program": " int nobleInteger ( int arr [ ], int size ) {\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int count = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++;\n    if ( count == arr [ i ] ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " public static int nobleInteger ( int arr [ ] ) {\n  int size = arr . length ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++ ;\n    if ( count == arr [ i ] ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " def nobleInteger ( arr , size ) :\n    for i in range ( 0 , size ) :\n        count = 0\n        for j in range ( 0 , size ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                count += 1\n        if ( count == arr [ i ] ) :\n            return arr [ i ]\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " public static int nobleInteger ( int arr [ ] ) {\n  int size = arr . length ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++ ;\n    if ( count == arr [ i ] ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " int nobleInteger ( int arr [ ], int size ) {\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int count = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++;\n    if ( count == arr [ i ] ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int nobleInteger ( int arr [ ], int size ) {\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int count = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++;\n    if ( count == arr [ i ] ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " public static int nobleInteger ( int arr [ ] ) {\n  int size = arr . length ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++ ;\n    if ( count == arr [ i ] ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int nobleInteger ( int arr [ ], int size ) {\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int count = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( arr [ i ] < arr [ j ] ) count ++;\n    if ( count == arr [ i ] ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " def nobleInteger ( arr , size ) :\n    for i in range ( 0 , size ) :\n        count = 0\n        for j in range ( 0 , size ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                count += 1\n        if ( count == arr [ i ] ) :\n            return arr [ i ]\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def minimumflip ( mat , n ) :\n    transpose = [ [ 0 ] * n ] * n\n    for i in range ( n ) :\n        for j in range ( n ) :\n            transpose [ i ] [ j ] = mat [ j ] [ i ]\n    flip = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if transpose [ i ] [ j ] != mat [ i ] [ j ] :\n                flip += 1\n    return int ( flip / 2 )", "target_program": " static int minimumflip ( int mat [ ] [ ] , int n ) {\n  int transpose [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ] ;\n  int flip = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++ ;\n  return flip / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minimumflip ( mat , n ) :\n    transpose = [ [ 0 ] * n ] * n\n    for i in range ( n ) :\n        for j in range ( n ) :\n            transpose [ i ] [ j ] = mat [ j ] [ i ]\n    flip = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if transpose [ i ] [ j ] != mat [ i ] [ j ] :\n                flip += 1\n    return int ( flip / 2 )", "target_program": " int minimumflip ( int mat [ ] [ N ], int n ) {\n  int transpose [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ];\n  int flip = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++;\n  return flip / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int minimumflip ( int mat [ ] [ ] , int n ) {\n  int transpose [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ] ;\n  int flip = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++ ;\n  return flip / 2 ;\n}", "target_program": " def minimumflip ( mat , n ) :\n    transpose = [ [ 0 ] * n ] * n\n    for i in range ( n ) :\n        for j in range ( n ) :\n            transpose [ i ] [ j ] = mat [ j ] [ i ]\n    flip = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if transpose [ i ] [ j ] != mat [ i ] [ j ] :\n                flip += 1\n    return int ( flip / 2 )"}
{"source": "java", "target": "cpp", "source_program": " static int minimumflip ( int mat [ ] [ ] , int n ) {\n  int transpose [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ] ;\n  int flip = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++ ;\n  return flip / 2 ;\n}", "target_program": " int minimumflip ( int mat [ ] [ N ], int n ) {\n  int transpose [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ];\n  int flip = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++;\n  return flip / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minimumflip ( int mat [ ] [ N ], int n ) {\n  int transpose [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ];\n  int flip = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++;\n  return flip / 2;\n}", "target_program": " static int minimumflip ( int mat [ ] [ ] , int n ) {\n  int transpose [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ] ;\n  int flip = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++ ;\n  return flip / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minimumflip ( int mat [ ] [ N ], int n ) {\n  int transpose [ n ] [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) transpose [ i ] [ j ] = mat [ j ] [ i ];\n  int flip = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( transpose [ i ] [ j ] != mat [ i ] [ j ] ) flip ++;\n  return flip / 2;\n}", "target_program": " def minimumflip ( mat , n ) :\n    transpose = [ [ 0 ] * n ] * n\n    for i in range ( n ) :\n        for j in range ( n ) :\n            transpose [ i ] [ j ] = mat [ j ] [ i ]\n    flip = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if transpose [ i ] [ j ] != mat [ i ] [ j ] :\n                flip += 1\n    return int ( flip / 2 )"}
{"source": "python", "target": "java", "source_program": " def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) :\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    for i in arr :\n        print ( str ( i ) + \" \" , end = '' )", "target_program": " static void arrayEvenAndOdd ( int arr [ ] , int n ) {\n  int i = - 1 , j = 0 ;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++ ;\n      int temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n    j ++ ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) :\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    for i in arr :\n        print ( str ( i ) + \" \" , end = '' )", "target_program": " void arrayEvenAndOdd ( int arr [ ], int n ) {\n  int i = - 1, j = 0;\n  int t;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++;\n      swap ( arr [ i ], arr [ j ] );\n    }\n    j ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << arr [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void arrayEvenAndOdd ( int arr [ ] , int n ) {\n  int i = - 1 , j = 0 ;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++ ;\n      int temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n    j ++ ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n}", "target_program": " def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) :\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    for i in arr :\n        print ( str ( i ) + \" \" , end = '' )"}
{"source": "java", "target": "cpp", "source_program": " static void arrayEvenAndOdd ( int arr [ ] , int n ) {\n  int i = - 1 , j = 0 ;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++ ;\n      int temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n    j ++ ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n}", "target_program": " void arrayEvenAndOdd ( int arr [ ], int n ) {\n  int i = - 1, j = 0;\n  int t;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++;\n      swap ( arr [ i ], arr [ j ] );\n    }\n    j ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << arr [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void arrayEvenAndOdd ( int arr [ ], int n ) {\n  int i = - 1, j = 0;\n  int t;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++;\n      swap ( arr [ i ], arr [ j ] );\n    }\n    j ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << arr [ i ] << \" \";\n}", "target_program": " static void arrayEvenAndOdd ( int arr [ ] , int n ) {\n  int i = - 1 , j = 0 ;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++ ;\n      int temp = arr [ i ] ;\n      arr [ i ] = arr [ j ] ;\n      arr [ j ] = temp ;\n    }\n    j ++ ;\n  }\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void arrayEvenAndOdd ( int arr [ ], int n ) {\n  int i = - 1, j = 0;\n  int t;\n  while ( j != n ) {\n    if ( arr [ j ] % 2 == 0 ) {\n      i ++;\n      swap ( arr [ i ], arr [ j ] );\n    }\n    j ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << arr [ i ] << \" \";\n}", "target_program": " def arrayEvenAndOdd ( arr , n ) :\n    i = - 1\n    j = 0\n    while ( j != n ) :\n        if ( arr [ j ] % 2 == 0 ) :\n            i = i + 1\n            arr [ i ] , arr [ j ] = arr [ j ] , arr [ i ]\n        j = j + 1\n    for i in arr :\n        print ( str ( i ) + \" \" , end = '' )"}
{"source": "python", "target": "java", "source_program": " def dfs ( List , node , arrival ) :\n    print ( node )\n    for i in range ( len ( List [ node ] ) ) :\n        if ( List [ node ] [ i ] != arrival ) :\n            dfs ( List , List [ node ] [ i ] , node )", "target_program": " public static void dfs ( LinkedList < Integer > list [ ] , int node , int arrival ) {\n  System . out . println ( node ) ;\n  for ( int i = 0 ;\n  i < list [ node ] . size ( ) ;\n  i ++ ) {\n    if ( list [ node ] . get ( i ) != arrival ) dfs ( list , list [ node ] . get ( i ) , node ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def dfs ( List , node , arrival ) :\n    print ( node )\n    for i in range ( len ( List [ node ] ) ) :\n        if ( List [ node ] [ i ] != arrival ) :\n            dfs ( List , List [ node ] [ i ] , node )", "target_program": " void dfs ( vector < int > list [ ], int node, int arrival ) {\n  cout << node << '\\n';\n  for ( int i = 0;\n  i < list [ node ] . size ( );\n  i ++ ) {\n    if ( list [ node ] [ i ] != arrival ) dfs ( list, list [ node ] [ i ], node );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void dfs ( LinkedList < Integer > list [ ] , int node , int arrival ) {\n  System . out . println ( node ) ;\n  for ( int i = 0 ;\n  i < list [ node ] . size ( ) ;\n  i ++ ) {\n    if ( list [ node ] . get ( i ) != arrival ) dfs ( list , list [ node ] . get ( i ) , node ) ;\n  }\n}", "target_program": " def dfs ( List , node , arrival ) :\n    print ( node )\n    for i in range ( len ( List [ node ] ) ) :\n        if ( List [ node ] [ i ] != arrival ) :\n            dfs ( List , List [ node ] [ i ] , node )"}
{"source": "java", "target": "cpp", "source_program": " public static void dfs ( LinkedList < Integer > list [ ] , int node , int arrival ) {\n  System . out . println ( node ) ;\n  for ( int i = 0 ;\n  i < list [ node ] . size ( ) ;\n  i ++ ) {\n    if ( list [ node ] . get ( i ) != arrival ) dfs ( list , list [ node ] . get ( i ) , node ) ;\n  }\n}", "target_program": " void dfs ( vector < int > list [ ], int node, int arrival ) {\n  cout << node << '\\n';\n  for ( int i = 0;\n  i < list [ node ] . size ( );\n  i ++ ) {\n    if ( list [ node ] [ i ] != arrival ) dfs ( list, list [ node ] [ i ], node );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void dfs ( vector < int > list [ ], int node, int arrival ) {\n  cout << node << '\\n';\n  for ( int i = 0;\n  i < list [ node ] . size ( );\n  i ++ ) {\n    if ( list [ node ] [ i ] != arrival ) dfs ( list, list [ node ] [ i ], node );\n  }\n}", "target_program": " public static void dfs ( LinkedList < Integer > list [ ] , int node , int arrival ) {\n  System . out . println ( node ) ;\n  for ( int i = 0 ;\n  i < list [ node ] . size ( ) ;\n  i ++ ) {\n    if ( list [ node ] . get ( i ) != arrival ) dfs ( list , list [ node ] . get ( i ) , node ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void dfs ( vector < int > list [ ], int node, int arrival ) {\n  cout << node << '\\n';\n  for ( int i = 0;\n  i < list [ node ] . size ( );\n  i ++ ) {\n    if ( list [ node ] [ i ] != arrival ) dfs ( list, list [ node ] [ i ], node );\n  }\n}", "target_program": " def dfs ( List , node , arrival ) :\n    print ( node )\n    for i in range ( len ( List [ node ] ) ) :\n        if ( List [ node ] [ i ] != arrival ) :\n            dfs ( List , List [ node ] [ i ] , node )"}
{"source": "python", "target": "java", "source_program": " def turnOffK ( n , k ) :\n    if ( k <= 0 ) :\n        return n\n    return ( n & ~ ( 1 << ( k - 1 ) ) )", "target_program": " static int turnOffK ( int n , int k ) {\n  if ( k <= 0 ) return n ;\n  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def turnOffK ( n , k ) :\n    if ( k <= 0 ) :\n        return n\n    return ( n & ~ ( 1 << ( k - 1 ) ) )", "target_program": " int turnOffK ( int n, int k ) {\n  if ( k <= 0 ) return n;\n  return ( n & ~ ( 1 << ( k - 1 ) ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int turnOffK ( int n , int k ) {\n  if ( k <= 0 ) return n ;\n  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;\n}", "target_program": " def turnOffK ( n , k ) :\n    if ( k <= 0 ) :\n        return n\n    return ( n & ~ ( 1 << ( k - 1 ) ) )"}
{"source": "java", "target": "cpp", "source_program": " static int turnOffK ( int n , int k ) {\n  if ( k <= 0 ) return n ;\n  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;\n}", "target_program": " int turnOffK ( int n, int k ) {\n  if ( k <= 0 ) return n;\n  return ( n & ~ ( 1 << ( k - 1 ) ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int turnOffK ( int n, int k ) {\n  if ( k <= 0 ) return n;\n  return ( n & ~ ( 1 << ( k - 1 ) ) );\n}", "target_program": " static int turnOffK ( int n , int k ) {\n  if ( k <= 0 ) return n ;\n  return ( n & ~ ( 1 << ( k - 1 ) ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int turnOffK ( int n, int k ) {\n  if ( k <= 0 ) return n;\n  return ( n & ~ ( 1 << ( k - 1 ) ) );\n}", "target_program": " def turnOffK ( n , k ) :\n    if ( k <= 0 ) :\n        return n\n    return ( n & ~ ( 1 << ( k - 1 ) ) )"}
{"source": "python", "target": "java", "source_program": " def count ( s , Len ) :\n    global MAX\n    cur = 0\n    dig = 0\n    Sum = [ 0 ] * MAX\n    dp = [ [ 0 , 0 , 0 ] for i in range ( MAX ) ]\n    dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        cur += dig\n        cur %= 3\n        Sum [ i ] = cur\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ]\n        dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ]\n        dp [ i ] [ Sum [ i ] ] += 1\n    ans = 0\n    dprev = 0\n    value = 0\n    dprev2 = 0\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        if dig == 8 :\n            ans += 1\n        if i - 2 >= 0 :\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = dprev * 10 + dig\n            if ( value % 8 == 0 ) and ( value % 3 != 0 ) :\n                ans += 1\n        if i - 3 >= 0 :\n            dprev2 = int ( s [ i - 3 ] ) - 48\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = ( dprev2 * 100 + dprev * 10 + dig )\n            if value % 8 != 0 :\n                continue\n            ans += ( i - 2 )\n            ans -= ( dp [ i - 3 ] [ Sum [ i ] ] )\n    return ans", "target_program": " static int count ( String s , int len ) {\n  int MAX = 1000 ;\n  int cur = 0 , dig = 0 ;\n  int [ ] sum = new int [ MAX ] ;\n  int [ ] [ ] dp = new int [ MAX ] [ 3 ] ;\n  dp [ 0 ] [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    cur += dig ;\n    cur %= 3 ;\n    sum [ i ] = cur ;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ] ;\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ] ;\n    dp [ i ] [ sum [ i ] ] ++ ;\n  }\n  int ans = 0 , dprev = 0 , value = 0 , dprev2 = 0 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    if ( dig == 8 ) ans ++ ;\n    if ( i - 2 >= 0 ) {\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev * 10 + dig ;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++ ;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = ( int ) ( s . charAt ( i - 3 ) ) - 48 ;\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev2 * 100 + dprev * 10 + dig ;\n      if ( value % 8 != 0 ) continue ;\n      ans += ( i - 2 ) ;\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def count ( s , Len ) :\n    global MAX\n    cur = 0\n    dig = 0\n    Sum = [ 0 ] * MAX\n    dp = [ [ 0 , 0 , 0 ] for i in range ( MAX ) ]\n    dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        cur += dig\n        cur %= 3\n        Sum [ i ] = cur\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ]\n        dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ]\n        dp [ i ] [ Sum [ i ] ] += 1\n    ans = 0\n    dprev = 0\n    value = 0\n    dprev2 = 0\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        if dig == 8 :\n            ans += 1\n        if i - 2 >= 0 :\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = dprev * 10 + dig\n            if ( value % 8 == 0 ) and ( value % 3 != 0 ) :\n                ans += 1\n        if i - 3 >= 0 :\n            dprev2 = int ( s [ i - 3 ] ) - 48\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = ( dprev2 * 100 + dprev * 10 + dig )\n            if value % 8 != 0 :\n                continue\n            ans += ( i - 2 )\n            ans -= ( dp [ i - 3 ] [ Sum [ i ] ] )\n    return ans", "target_program": " int count ( char s [ ], int len ) {\n  int cur = 0, dig = 0;\n  int sum [ MAX ], dp [ MAX ] [ 3 ];\n  memset ( sum, 0, sizeof ( sum ) );\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    cur += dig;\n    cur %= 3;\n    sum [ i ] = cur;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ];\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ];\n    dp [ i ] [ sum [ i ] ] ++;\n  }\n  int ans = 0, dprev = 0, value = 0, dprev2 = 0;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    if ( dig == 8 ) ans ++;\n    if ( i - 2 >= 0 ) {\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev * 10 + dig;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = int ( s [ i - 3 ] ) - 48;\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev2 * 100 + dprev * 10 + dig;\n      if ( value % 8 != 0 ) continue;\n      ans += ( i - 2 );\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] );\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int count ( String s , int len ) {\n  int MAX = 1000 ;\n  int cur = 0 , dig = 0 ;\n  int [ ] sum = new int [ MAX ] ;\n  int [ ] [ ] dp = new int [ MAX ] [ 3 ] ;\n  dp [ 0 ] [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    cur += dig ;\n    cur %= 3 ;\n    sum [ i ] = cur ;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ] ;\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ] ;\n    dp [ i ] [ sum [ i ] ] ++ ;\n  }\n  int ans = 0 , dprev = 0 , value = 0 , dprev2 = 0 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    if ( dig == 8 ) ans ++ ;\n    if ( i - 2 >= 0 ) {\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev * 10 + dig ;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++ ;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = ( int ) ( s . charAt ( i - 3 ) ) - 48 ;\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev2 * 100 + dprev * 10 + dig ;\n      if ( value % 8 != 0 ) continue ;\n      ans += ( i - 2 ) ;\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " def count ( s , Len ) :\n    global MAX\n    cur = 0\n    dig = 0\n    Sum = [ 0 ] * MAX\n    dp = [ [ 0 , 0 , 0 ] for i in range ( MAX ) ]\n    dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        cur += dig\n        cur %= 3\n        Sum [ i ] = cur\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ]\n        dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ]\n        dp [ i ] [ Sum [ i ] ] += 1\n    ans = 0\n    dprev = 0\n    value = 0\n    dprev2 = 0\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        if dig == 8 :\n            ans += 1\n        if i - 2 >= 0 :\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = dprev * 10 + dig\n            if ( value % 8 == 0 ) and ( value % 3 != 0 ) :\n                ans += 1\n        if i - 3 >= 0 :\n            dprev2 = int ( s [ i - 3 ] ) - 48\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = ( dprev2 * 100 + dprev * 10 + dig )\n            if value % 8 != 0 :\n                continue\n            ans += ( i - 2 )\n            ans -= ( dp [ i - 3 ] [ Sum [ i ] ] )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int count ( String s , int len ) {\n  int MAX = 1000 ;\n  int cur = 0 , dig = 0 ;\n  int [ ] sum = new int [ MAX ] ;\n  int [ ] [ ] dp = new int [ MAX ] [ 3 ] ;\n  dp [ 0 ] [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    cur += dig ;\n    cur %= 3 ;\n    sum [ i ] = cur ;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ] ;\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ] ;\n    dp [ i ] [ sum [ i ] ] ++ ;\n  }\n  int ans = 0 , dprev = 0 , value = 0 , dprev2 = 0 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    if ( dig == 8 ) ans ++ ;\n    if ( i - 2 >= 0 ) {\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev * 10 + dig ;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++ ;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = ( int ) ( s . charAt ( i - 3 ) ) - 48 ;\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev2 * 100 + dprev * 10 + dig ;\n      if ( value % 8 != 0 ) continue ;\n      ans += ( i - 2 ) ;\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " int count ( char s [ ], int len ) {\n  int cur = 0, dig = 0;\n  int sum [ MAX ], dp [ MAX ] [ 3 ];\n  memset ( sum, 0, sizeof ( sum ) );\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    cur += dig;\n    cur %= 3;\n    sum [ i ] = cur;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ];\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ];\n    dp [ i ] [ sum [ i ] ] ++;\n  }\n  int ans = 0, dprev = 0, value = 0, dprev2 = 0;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    if ( dig == 8 ) ans ++;\n    if ( i - 2 >= 0 ) {\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev * 10 + dig;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = int ( s [ i - 3 ] ) - 48;\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev2 * 100 + dprev * 10 + dig;\n      if ( value % 8 != 0 ) continue;\n      ans += ( i - 2 );\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] );\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int count ( char s [ ], int len ) {\n  int cur = 0, dig = 0;\n  int sum [ MAX ], dp [ MAX ] [ 3 ];\n  memset ( sum, 0, sizeof ( sum ) );\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    cur += dig;\n    cur %= 3;\n    sum [ i ] = cur;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ];\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ];\n    dp [ i ] [ sum [ i ] ] ++;\n  }\n  int ans = 0, dprev = 0, value = 0, dprev2 = 0;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    if ( dig == 8 ) ans ++;\n    if ( i - 2 >= 0 ) {\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev * 10 + dig;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = int ( s [ i - 3 ] ) - 48;\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev2 * 100 + dprev * 10 + dig;\n      if ( value % 8 != 0 ) continue;\n      ans += ( i - 2 );\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] );\n    }\n  }\n  return ans;\n}", "target_program": " static int count ( String s , int len ) {\n  int MAX = 1000 ;\n  int cur = 0 , dig = 0 ;\n  int [ ] sum = new int [ MAX ] ;\n  int [ ] [ ] dp = new int [ MAX ] [ 3 ] ;\n  dp [ 0 ] [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    cur += dig ;\n    cur %= 3 ;\n    sum [ i ] = cur ;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ] ;\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ] ;\n    dp [ i ] [ sum [ i ] ] ++ ;\n  }\n  int ans = 0 , dprev = 0 , value = 0 , dprev2 = 0 ;\n  for ( int i = 1 ;\n  i <= len ;\n  i ++ ) {\n    dig = ( int ) ( s . charAt ( i - 1 ) ) - 48 ;\n    if ( dig == 8 ) ans ++ ;\n    if ( i - 2 >= 0 ) {\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev * 10 + dig ;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++ ;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = ( int ) ( s . charAt ( i - 3 ) ) - 48 ;\n      dprev = ( int ) ( s . charAt ( i - 2 ) ) - 48 ;\n      value = dprev2 * 100 + dprev * 10 + dig ;\n      if ( value % 8 != 0 ) continue ;\n      ans += ( i - 2 ) ;\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int count ( char s [ ], int len ) {\n  int cur = 0, dig = 0;\n  int sum [ MAX ], dp [ MAX ] [ 3 ];\n  memset ( sum, 0, sizeof ( sum ) );\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    cur += dig;\n    cur %= 3;\n    sum [ i ] = cur;\n    dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n    dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ];\n    dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ];\n    dp [ i ] [ sum [ i ] ] ++;\n  }\n  int ans = 0, dprev = 0, value = 0, dprev2 = 0;\n  for ( int i = 1;\n  i <= len;\n  i ++ ) {\n    dig = int ( s [ i - 1 ] ) - 48;\n    if ( dig == 8 ) ans ++;\n    if ( i - 2 >= 0 ) {\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev * 10 + dig;\n      if ( ( value % 8 == 0 ) && ( value % 3 != 0 ) ) ans ++;\n    }\n    if ( i - 3 >= 0 ) {\n      dprev2 = int ( s [ i - 3 ] ) - 48;\n      dprev = int ( s [ i - 2 ] ) - 48;\n      value = dprev2 * 100 + dprev * 10 + dig;\n      if ( value % 8 != 0 ) continue;\n      ans += ( i - 2 );\n      ans -= ( dp [ i - 3 ] [ sum [ i ] ] );\n    }\n  }\n  return ans;\n}", "target_program": " def count ( s , Len ) :\n    global MAX\n    cur = 0\n    dig = 0\n    Sum = [ 0 ] * MAX\n    dp = [ [ 0 , 0 , 0 ] for i in range ( MAX ) ]\n    dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        cur += dig\n        cur %= 3\n        Sum [ i ] = cur\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n        dp [ i ] [ 1 ] = dp [ i - 1 ] [ 1 ]\n        dp [ i ] [ 2 ] = dp [ i - 1 ] [ 2 ]\n        dp [ i ] [ Sum [ i ] ] += 1\n    ans = 0\n    dprev = 0\n    value = 0\n    dprev2 = 0\n    for i in range ( 1 , Len + 1 ) :\n        dig = int ( s [ i - 1 ] ) - 48\n        if dig == 8 :\n            ans += 1\n        if i - 2 >= 0 :\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = dprev * 10 + dig\n            if ( value % 8 == 0 ) and ( value % 3 != 0 ) :\n                ans += 1\n        if i - 3 >= 0 :\n            dprev2 = int ( s [ i - 3 ] ) - 48\n            dprev = int ( s [ i - 2 ] ) - 48\n            value = ( dprev2 * 100 + dprev * 10 + dig )\n            if value % 8 != 0 :\n                continue\n            ans += ( i - 2 )\n            ans -= ( dp [ i - 3 ] [ Sum [ i ] ] )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def addOne ( x ) :\n    return ( - ( ~ x ) ) ;", "target_program": " static int addOne ( int x ) {\n  return ( - ( ~ x ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def addOne ( x ) :\n    return ( - ( ~ x ) ) ;", "target_program": " int addOne ( int x ) {\n  return ( - ( ~ x ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int addOne ( int x ) {\n  return ( - ( ~ x ) ) ;\n}", "target_program": " def addOne ( x ) :\n    return ( - ( ~ x ) ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int addOne ( int x ) {\n  return ( - ( ~ x ) ) ;\n}", "target_program": " int addOne ( int x ) {\n  return ( - ( ~ x ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int addOne ( int x ) {\n  return ( - ( ~ x ) );\n}", "target_program": " static int addOne ( int x ) {\n  return ( - ( ~ x ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int addOne ( int x ) {\n  return ( - ( ~ x ) );\n}", "target_program": " def addOne ( x ) :\n    return ( - ( ~ x ) ) ;"}
{"source": "python", "target": "java", "source_program": " def printFirstRepeating ( arr , n ) :\n    Min = - 1\n    myset = dict ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if arr [ i ] in myset.keys ( ) :\n            Min = i\n        else :\n            myset [ arr [ i ] ] = 1\n    if ( Min != - 1 ) :\n        print ( \"The first repeating element is\" , arr [ Min ] )\n    else :\n        print ( \"There are no repeating elements\" )", "target_program": " static void printFirstRepeating ( int arr [ ] ) {\n  int min = - 1 ;\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( set . contains ( arr [ i ] ) ) min = i ;\n    else set . add ( arr [ i ] ) ;\n  }\n  if ( min != - 1 ) System . out . println ( \"The first repeating element is \" + arr [ min ] ) ;\n  else System . out . println ( \"There are no repeating elements\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printFirstRepeating ( arr , n ) :\n    Min = - 1\n    myset = dict ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if arr [ i ] in myset.keys ( ) :\n            Min = i\n        else :\n            myset [ arr [ i ] ] = 1\n    if ( Min != - 1 ) :\n        print ( \"The first repeating element is\" , arr [ Min ] )\n    else :\n        print ( \"There are no repeating elements\" )", "target_program": " void printFirstRepeating ( int arr [ ], int n ) {\n  int min = - 1;\n  set < int > myset;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) min = i;\n    else myset . insert ( arr [ i ] );\n  }\n  if ( min != - 1 ) cout << \"The first repeating element is \" << arr [ min ];\n  else cout << \"There are no repeating elements\";\n}"}
{"source": "java", "target": "python", "source_program": " static void printFirstRepeating ( int arr [ ] ) {\n  int min = - 1 ;\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( set . contains ( arr [ i ] ) ) min = i ;\n    else set . add ( arr [ i ] ) ;\n  }\n  if ( min != - 1 ) System . out . println ( \"The first repeating element is \" + arr [ min ] ) ;\n  else System . out . println ( \"There are no repeating elements\" ) ;\n}", "target_program": " def printFirstRepeating ( arr , n ) :\n    Min = - 1\n    myset = dict ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if arr [ i ] in myset.keys ( ) :\n            Min = i\n        else :\n            myset [ arr [ i ] ] = 1\n    if ( Min != - 1 ) :\n        print ( \"The first repeating element is\" , arr [ Min ] )\n    else :\n        print ( \"There are no repeating elements\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printFirstRepeating ( int arr [ ] ) {\n  int min = - 1 ;\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( set . contains ( arr [ i ] ) ) min = i ;\n    else set . add ( arr [ i ] ) ;\n  }\n  if ( min != - 1 ) System . out . println ( \"The first repeating element is \" + arr [ min ] ) ;\n  else System . out . println ( \"There are no repeating elements\" ) ;\n}", "target_program": " void printFirstRepeating ( int arr [ ], int n ) {\n  int min = - 1;\n  set < int > myset;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) min = i;\n    else myset . insert ( arr [ i ] );\n  }\n  if ( min != - 1 ) cout << \"The first repeating element is \" << arr [ min ];\n  else cout << \"There are no repeating elements\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printFirstRepeating ( int arr [ ], int n ) {\n  int min = - 1;\n  set < int > myset;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) min = i;\n    else myset . insert ( arr [ i ] );\n  }\n  if ( min != - 1 ) cout << \"The first repeating element is \" << arr [ min ];\n  else cout << \"There are no repeating elements\";\n}", "target_program": " static void printFirstRepeating ( int arr [ ] ) {\n  int min = - 1 ;\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = arr . length - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( set . contains ( arr [ i ] ) ) min = i ;\n    else set . add ( arr [ i ] ) ;\n  }\n  if ( min != - 1 ) System . out . println ( \"The first repeating element is \" + arr [ min ] ) ;\n  else System . out . println ( \"There are no repeating elements\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printFirstRepeating ( int arr [ ], int n ) {\n  int min = - 1;\n  set < int > myset;\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) min = i;\n    else myset . insert ( arr [ i ] );\n  }\n  if ( min != - 1 ) cout << \"The first repeating element is \" << arr [ min ];\n  else cout << \"There are no repeating elements\";\n}", "target_program": " def printFirstRepeating ( arr , n ) :\n    Min = - 1\n    myset = dict ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        if arr [ i ] in myset.keys ( ) :\n            Min = i\n        else :\n            myset [ arr [ i ] ] = 1\n    if ( Min != - 1 ) :\n        print ( \"The first repeating element is\" , arr [ Min ] )\n    else :\n        print ( \"There are no repeating elements\" )"}
{"source": "python", "target": "java", "source_program": " def costToBalance ( s ) :\n    if ( len ( s ) == 0 ) :\n        print ( 0 )\n    ans = 0\n    o = 0\n    c = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            o += 1\n        if ( s [ i ] == ')' ) :\n            c += 1\n    if ( o != c ) :\n        return - 1\n    a = [ 0 for i in range ( len ( s ) ) ]\n    if ( s [ 0 ] == '(' ) :\n        a [ 0 ] = 1\n    else :\n        a [ 0 ] = - 1\n    if ( a [ 0 ] < 0 ) :\n        ans += abs ( a [ 0 ] )\n    for i in range ( 1 , len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            a [ i ] = a [ i - 1 ] + 1\n        else :\n            a [ i ] = a [ i - 1 ] - 1\n        if ( a [ i ] < 0 ) :\n            ans += abs ( a [ i ] )\n    return ans", "target_program": " static int costToBalance ( String s ) {\n  if ( s . length ( ) == 0 ) System . out . println ( 0 ) ;\n  int ans = 0 ;\n  int o = 0 , c = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) o ++ ;\n    if ( s . charAt ( i ) == ')' ) c ++ ;\n  }\n  if ( o != c ) return - 1 ;\n  int [ ] a = new int [ s . length ( ) ] ;\n  if ( s . charAt ( 0 ) == '(' ) a [ 0 ] = 1 ;\n  else a [ 0 ] = - 1 ;\n  if ( a [ 0 ] < 0 ) ans += Math . abs ( a [ 0 ] ) ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) a [ i ] = a [ i - 1 ] + 1 ;\n    else a [ i ] = a [ i - 1 ] - 1 ;\n    if ( a [ i ] < 0 ) ans += Math . abs ( a [ i ] ) ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def costToBalance ( s ) :\n    if ( len ( s ) == 0 ) :\n        print ( 0 )\n    ans = 0\n    o = 0\n    c = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            o += 1\n        if ( s [ i ] == ')' ) :\n            c += 1\n    if ( o != c ) :\n        return - 1\n    a = [ 0 for i in range ( len ( s ) ) ]\n    if ( s [ 0 ] == '(' ) :\n        a [ 0 ] = 1\n    else :\n        a [ 0 ] = - 1\n    if ( a [ 0 ] < 0 ) :\n        ans += abs ( a [ 0 ] )\n    for i in range ( 1 , len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            a [ i ] = a [ i - 1 ] + 1\n        else :\n            a [ i ] = a [ i - 1 ] - 1\n        if ( a [ i ] < 0 ) :\n            ans += abs ( a [ i ] )\n    return ans", "target_program": " int costToBalance ( string s ) {\n  if ( s . length ( ) == 0 ) cout << 0 << endl;\n  int ans = 0;\n  int o = 0, c = 0;\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) o ++;\n    if ( s [ i ] == ')' ) c ++;\n  }\n  if ( o != c ) return - 1;\n  int a [ s . size ( ) ];\n  if ( s [ 0 ] == '(' ) a [ 0 ] = 1;\n  else a [ 0 ] = - 1;\n  if ( a [ 0 ] < 0 ) ans += abs ( a [ 0 ] );\n  for ( int i = 1;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) a [ i ] = a [ i - 1 ] + 1;\n    else a [ i ] = a [ i - 1 ] - 1;\n    if ( a [ i ] < 0 ) ans += abs ( a [ i ] );\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int costToBalance ( String s ) {\n  if ( s . length ( ) == 0 ) System . out . println ( 0 ) ;\n  int ans = 0 ;\n  int o = 0 , c = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) o ++ ;\n    if ( s . charAt ( i ) == ')' ) c ++ ;\n  }\n  if ( o != c ) return - 1 ;\n  int [ ] a = new int [ s . length ( ) ] ;\n  if ( s . charAt ( 0 ) == '(' ) a [ 0 ] = 1 ;\n  else a [ 0 ] = - 1 ;\n  if ( a [ 0 ] < 0 ) ans += Math . abs ( a [ 0 ] ) ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) a [ i ] = a [ i - 1 ] + 1 ;\n    else a [ i ] = a [ i - 1 ] - 1 ;\n    if ( a [ i ] < 0 ) ans += Math . abs ( a [ i ] ) ;\n  }\n  return ans ;\n}", "target_program": " def costToBalance ( s ) :\n    if ( len ( s ) == 0 ) :\n        print ( 0 )\n    ans = 0\n    o = 0\n    c = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            o += 1\n        if ( s [ i ] == ')' ) :\n            c += 1\n    if ( o != c ) :\n        return - 1\n    a = [ 0 for i in range ( len ( s ) ) ]\n    if ( s [ 0 ] == '(' ) :\n        a [ 0 ] = 1\n    else :\n        a [ 0 ] = - 1\n    if ( a [ 0 ] < 0 ) :\n        ans += abs ( a [ 0 ] )\n    for i in range ( 1 , len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            a [ i ] = a [ i - 1 ] + 1\n        else :\n            a [ i ] = a [ i - 1 ] - 1\n        if ( a [ i ] < 0 ) :\n            ans += abs ( a [ i ] )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int costToBalance ( String s ) {\n  if ( s . length ( ) == 0 ) System . out . println ( 0 ) ;\n  int ans = 0 ;\n  int o = 0 , c = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) o ++ ;\n    if ( s . charAt ( i ) == ')' ) c ++ ;\n  }\n  if ( o != c ) return - 1 ;\n  int [ ] a = new int [ s . length ( ) ] ;\n  if ( s . charAt ( 0 ) == '(' ) a [ 0 ] = 1 ;\n  else a [ 0 ] = - 1 ;\n  if ( a [ 0 ] < 0 ) ans += Math . abs ( a [ 0 ] ) ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) a [ i ] = a [ i - 1 ] + 1 ;\n    else a [ i ] = a [ i - 1 ] - 1 ;\n    if ( a [ i ] < 0 ) ans += Math . abs ( a [ i ] ) ;\n  }\n  return ans ;\n}", "target_program": " int costToBalance ( string s ) {\n  if ( s . length ( ) == 0 ) cout << 0 << endl;\n  int ans = 0;\n  int o = 0, c = 0;\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) o ++;\n    if ( s [ i ] == ')' ) c ++;\n  }\n  if ( o != c ) return - 1;\n  int a [ s . size ( ) ];\n  if ( s [ 0 ] == '(' ) a [ 0 ] = 1;\n  else a [ 0 ] = - 1;\n  if ( a [ 0 ] < 0 ) ans += abs ( a [ 0 ] );\n  for ( int i = 1;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) a [ i ] = a [ i - 1 ] + 1;\n    else a [ i ] = a [ i - 1 ] - 1;\n    if ( a [ i ] < 0 ) ans += abs ( a [ i ] );\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int costToBalance ( string s ) {\n  if ( s . length ( ) == 0 ) cout << 0 << endl;\n  int ans = 0;\n  int o = 0, c = 0;\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) o ++;\n    if ( s [ i ] == ')' ) c ++;\n  }\n  if ( o != c ) return - 1;\n  int a [ s . size ( ) ];\n  if ( s [ 0 ] == '(' ) a [ 0 ] = 1;\n  else a [ 0 ] = - 1;\n  if ( a [ 0 ] < 0 ) ans += abs ( a [ 0 ] );\n  for ( int i = 1;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) a [ i ] = a [ i - 1 ] + 1;\n    else a [ i ] = a [ i - 1 ] - 1;\n    if ( a [ i ] < 0 ) ans += abs ( a [ i ] );\n  }\n  return ans;\n}", "target_program": " static int costToBalance ( String s ) {\n  if ( s . length ( ) == 0 ) System . out . println ( 0 ) ;\n  int ans = 0 ;\n  int o = 0 , c = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) o ++ ;\n    if ( s . charAt ( i ) == ')' ) c ++ ;\n  }\n  if ( o != c ) return - 1 ;\n  int [ ] a = new int [ s . length ( ) ] ;\n  if ( s . charAt ( 0 ) == '(' ) a [ 0 ] = 1 ;\n  else a [ 0 ] = - 1 ;\n  if ( a [ 0 ] < 0 ) ans += Math . abs ( a [ 0 ] ) ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == '(' ) a [ i ] = a [ i - 1 ] + 1 ;\n    else a [ i ] = a [ i - 1 ] - 1 ;\n    if ( a [ i ] < 0 ) ans += Math . abs ( a [ i ] ) ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int costToBalance ( string s ) {\n  if ( s . length ( ) == 0 ) cout << 0 << endl;\n  int ans = 0;\n  int o = 0, c = 0;\n  for ( int i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) o ++;\n    if ( s [ i ] == ')' ) c ++;\n  }\n  if ( o != c ) return - 1;\n  int a [ s . size ( ) ];\n  if ( s [ 0 ] == '(' ) a [ 0 ] = 1;\n  else a [ 0 ] = - 1;\n  if ( a [ 0 ] < 0 ) ans += abs ( a [ 0 ] );\n  for ( int i = 1;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] == '(' ) a [ i ] = a [ i - 1 ] + 1;\n    else a [ i ] = a [ i - 1 ] - 1;\n    if ( a [ i ] < 0 ) ans += abs ( a [ i ] );\n  }\n  return ans;\n}", "target_program": " def costToBalance ( s ) :\n    if ( len ( s ) == 0 ) :\n        print ( 0 )\n    ans = 0\n    o = 0\n    c = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            o += 1\n        if ( s [ i ] == ')' ) :\n            c += 1\n    if ( o != c ) :\n        return - 1\n    a = [ 0 for i in range ( len ( s ) ) ]\n    if ( s [ 0 ] == '(' ) :\n        a [ 0 ] = 1\n    else :\n        a [ 0 ] = - 1\n    if ( a [ 0 ] < 0 ) :\n        ans += abs ( a [ 0 ] )\n    for i in range ( 1 , len ( s ) ) :\n        if ( s [ i ] == '(' ) :\n            a [ i ] = a [ i - 1 ] + 1\n        else :\n            a [ i ] = a [ i - 1 ] - 1\n        if ( a [ i ] < 0 ) :\n            ans += abs ( a [ i ] )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findWinner ( x , y , n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    dp [ 0 ] = False\n    dp [ 1 ] = True\n    for i in range ( 2 , n + 1 ) :\n        if ( i - 1 >= 0 and not dp [ i - 1 ] ) :\n            dp [ i ] = True\n        elif ( i - x >= 0 and not dp [ i - x ] ) :\n            dp [ i ] = True\n        elif ( i - y >= 0 and not dp [ i - y ] ) :\n            dp [ i ] = True\n        else :\n            dp [ i ] = False\n    return dp [ n ]", "target_program": " static boolean findWinner ( int x , int y , int n ) {\n  boolean [ ] dp = new boolean [ n + 1 ] ;\n  Arrays . fill ( dp , false ) ;\n  dp [ 0 ] = false ;\n  dp [ 1 ] = true ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i - 1 >= 0 && dp [ i - 1 ] == false ) dp [ i ] = true ;\n    else if ( i - x >= 0 && dp [ i - x ] == false ) dp [ i ] = true ;\n    else if ( i - y >= 0 && dp [ i - y ] == false ) dp [ i ] = true ;\n    else dp [ i ] = false ;\n  }\n  return dp [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findWinner ( x , y , n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    dp [ 0 ] = False\n    dp [ 1 ] = True\n    for i in range ( 2 , n + 1 ) :\n        if ( i - 1 >= 0 and not dp [ i - 1 ] ) :\n            dp [ i ] = True\n        elif ( i - x >= 0 and not dp [ i - x ] ) :\n            dp [ i ] = True\n        elif ( i - y >= 0 and not dp [ i - y ] ) :\n            dp [ i ] = True\n        else :\n            dp [ i ] = False\n    return dp [ n ]", "target_program": " bool findWinner ( int x, int y, int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = false;\n  dp [ 1 ] = true;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i - 1 >= 0 and ! dp [ i - 1 ] ) dp [ i ] = true;\n    else if ( i - x >= 0 and ! dp [ i - x ] ) dp [ i ] = true;\n    else if ( i - y >= 0 and ! dp [ i - y ] ) dp [ i ] = true;\n    else dp [ i ] = false;\n  }\n  return dp [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static boolean findWinner ( int x , int y , int n ) {\n  boolean [ ] dp = new boolean [ n + 1 ] ;\n  Arrays . fill ( dp , false ) ;\n  dp [ 0 ] = false ;\n  dp [ 1 ] = true ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i - 1 >= 0 && dp [ i - 1 ] == false ) dp [ i ] = true ;\n    else if ( i - x >= 0 && dp [ i - x ] == false ) dp [ i ] = true ;\n    else if ( i - y >= 0 && dp [ i - y ] == false ) dp [ i ] = true ;\n    else dp [ i ] = false ;\n  }\n  return dp [ n ] ;\n}", "target_program": " def findWinner ( x , y , n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    dp [ 0 ] = False\n    dp [ 1 ] = True\n    for i in range ( 2 , n + 1 ) :\n        if ( i - 1 >= 0 and not dp [ i - 1 ] ) :\n            dp [ i ] = True\n        elif ( i - x >= 0 and not dp [ i - x ] ) :\n            dp [ i ] = True\n        elif ( i - y >= 0 and not dp [ i - y ] ) :\n            dp [ i ] = True\n        else :\n            dp [ i ] = False\n    return dp [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static boolean findWinner ( int x , int y , int n ) {\n  boolean [ ] dp = new boolean [ n + 1 ] ;\n  Arrays . fill ( dp , false ) ;\n  dp [ 0 ] = false ;\n  dp [ 1 ] = true ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i - 1 >= 0 && dp [ i - 1 ] == false ) dp [ i ] = true ;\n    else if ( i - x >= 0 && dp [ i - x ] == false ) dp [ i ] = true ;\n    else if ( i - y >= 0 && dp [ i - y ] == false ) dp [ i ] = true ;\n    else dp [ i ] = false ;\n  }\n  return dp [ n ] ;\n}", "target_program": " bool findWinner ( int x, int y, int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = false;\n  dp [ 1 ] = true;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i - 1 >= 0 and ! dp [ i - 1 ] ) dp [ i ] = true;\n    else if ( i - x >= 0 and ! dp [ i - x ] ) dp [ i ] = true;\n    else if ( i - y >= 0 and ! dp [ i - y ] ) dp [ i ] = true;\n    else dp [ i ] = false;\n  }\n  return dp [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " bool findWinner ( int x, int y, int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = false;\n  dp [ 1 ] = true;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i - 1 >= 0 and ! dp [ i - 1 ] ) dp [ i ] = true;\n    else if ( i - x >= 0 and ! dp [ i - x ] ) dp [ i ] = true;\n    else if ( i - y >= 0 and ! dp [ i - y ] ) dp [ i ] = true;\n    else dp [ i ] = false;\n  }\n  return dp [ n ];\n}", "target_program": " static boolean findWinner ( int x , int y , int n ) {\n  boolean [ ] dp = new boolean [ n + 1 ] ;\n  Arrays . fill ( dp , false ) ;\n  dp [ 0 ] = false ;\n  dp [ 1 ] = true ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    if ( i - 1 >= 0 && dp [ i - 1 ] == false ) dp [ i ] = true ;\n    else if ( i - x >= 0 && dp [ i - x ] == false ) dp [ i ] = true ;\n    else if ( i - y >= 0 && dp [ i - y ] == false ) dp [ i ] = true ;\n    else dp [ i ] = false ;\n  }\n  return dp [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool findWinner ( int x, int y, int n ) {\n  int dp [ n + 1 ];\n  dp [ 0 ] = false;\n  dp [ 1 ] = true;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    if ( i - 1 >= 0 and ! dp [ i - 1 ] ) dp [ i ] = true;\n    else if ( i - x >= 0 and ! dp [ i - x ] ) dp [ i ] = true;\n    else if ( i - y >= 0 and ! dp [ i - y ] ) dp [ i ] = true;\n    else dp [ i ] = false;\n  }\n  return dp [ n ];\n}", "target_program": " def findWinner ( x , y , n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    dp [ 0 ] = False\n    dp [ 1 ] = True\n    for i in range ( 2 , n + 1 ) :\n        if ( i - 1 >= 0 and not dp [ i - 1 ] ) :\n            dp [ i ] = True\n        elif ( i - x >= 0 and not dp [ i - x ] ) :\n            dp [ i ] = True\n        elif ( i - y >= 0 and not dp [ i - y ] ) :\n            dp [ i ] = True\n        else :\n            dp [ i ] = False\n    return dp [ n ]"}
{"source": "python", "target": "java", "source_program": " def getTotalNumberOfSequences ( m , n ) :\n    if m < n :\n        return 0\n    if n == 0 :\n        return 1\n    res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m // 2 , n - 1 ) )\n    return res", "target_program": " static int getTotalNumberOfSequences ( int m , int n ) {\n  if ( m < n ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m / 2 , n - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getTotalNumberOfSequences ( m , n ) :\n    if m < n :\n        return 0\n    if n == 0 :\n        return 1\n    res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m // 2 , n - 1 ) )\n    return res", "target_program": " int getTotalNumberOfSequences ( int m, int n ) {\n  if ( m < n ) return 0;\n  if ( n == 0 ) return 1;\n  return getTotalNumberOfSequences ( m - 1, n ) + getTotalNumberOfSequences ( m / 2, n - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int getTotalNumberOfSequences ( int m , int n ) {\n  if ( m < n ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m / 2 , n - 1 ) ;\n}", "target_program": " def getTotalNumberOfSequences ( m , n ) :\n    if m < n :\n        return 0\n    if n == 0 :\n        return 1\n    res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m // 2 , n - 1 ) )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int getTotalNumberOfSequences ( int m , int n ) {\n  if ( m < n ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m / 2 , n - 1 ) ;\n}", "target_program": " int getTotalNumberOfSequences ( int m, int n ) {\n  if ( m < n ) return 0;\n  if ( n == 0 ) return 1;\n  return getTotalNumberOfSequences ( m - 1, n ) + getTotalNumberOfSequences ( m / 2, n - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int getTotalNumberOfSequences ( int m, int n ) {\n  if ( m < n ) return 0;\n  if ( n == 0 ) return 1;\n  return getTotalNumberOfSequences ( m - 1, n ) + getTotalNumberOfSequences ( m / 2, n - 1 );\n}", "target_program": " static int getTotalNumberOfSequences ( int m , int n ) {\n  if ( m < n ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  return getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m / 2 , n - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getTotalNumberOfSequences ( int m, int n ) {\n  if ( m < n ) return 0;\n  if ( n == 0 ) return 1;\n  return getTotalNumberOfSequences ( m - 1, n ) + getTotalNumberOfSequences ( m / 2, n - 1 );\n}", "target_program": " def getTotalNumberOfSequences ( m , n ) :\n    if m < n :\n        return 0\n    if n == 0 :\n        return 1\n    res = ( getTotalNumberOfSequences ( m - 1 , n ) + getTotalNumberOfSequences ( m // 2 , n - 1 ) )\n    return res"}
{"source": "python", "target": "java", "source_program": " def printDuplicates ( arr ) :\n    dict = { }\n    for ele in arr :\n        try :\n            dict [ ele ] += 1\n        except :\n            dict [ ele ] = 1\n    for item in dict :\n        if ( dict [ item ] > 1 ) :\n            print ( item , end = \" \" )\n    print ( \"\\n\" )", "target_program": " private static void printDuplicates ( int [ ] arr , int n ) {\n  Map < Integer , Integer > map = new HashMap < > ( ) ;\n  int count = 0 ;\n  boolean dup = false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( map . containsKey ( arr [ i ] ) ) {\n      count = map . get ( arr [ i ] ) ;\n      map . put ( arr [ i ] , count + 1 ) ;\n    }\n    else {\n      map . put ( arr [ i ] , 1 ) ;\n    }\n  }\n  for ( Entry < Integer , Integer > entry : map . entrySet ( ) ) {\n    if ( entry . getValue ( ) > 1 ) {\n      System . out . print ( entry . getKey ( ) + \" \" ) ;\n      dup = true ;\n    }\n  }\n  if ( ! dup ) {\n    System . out . println ( \"-1\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDuplicates ( arr ) :\n    dict = { }\n    for ele in arr :\n        try :\n            dict [ ele ] += 1\n        except :\n            dict [ ele ] = 1\n    for item in dict :\n        if ( dict [ item ] > 1 ) :\n            print ( item , end = \" \" )\n    print ( \"\\n\" )", "target_program": " void printDuplicates ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  bool dup = false;\n  unordered_map < int, int > :: iterator itr;\n  for ( itr = freq . begin ( );\n  itr != freq . end ( );\n  itr ++ ) {\n    if ( itr -> second > 1 ) {\n      cout << itr -> first << \" \";\n      dup = true;\n    }\n  }\n  if ( dup == false ) cout << \"-1\";\n}"}
{"source": "java", "target": "python", "source_program": " private static void printDuplicates ( int [ ] arr , int n ) {\n  Map < Integer , Integer > map = new HashMap < > ( ) ;\n  int count = 0 ;\n  boolean dup = false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( map . containsKey ( arr [ i ] ) ) {\n      count = map . get ( arr [ i ] ) ;\n      map . put ( arr [ i ] , count + 1 ) ;\n    }\n    else {\n      map . put ( arr [ i ] , 1 ) ;\n    }\n  }\n  for ( Entry < Integer , Integer > entry : map . entrySet ( ) ) {\n    if ( entry . getValue ( ) > 1 ) {\n      System . out . print ( entry . getKey ( ) + \" \" ) ;\n      dup = true ;\n    }\n  }\n  if ( ! dup ) {\n    System . out . println ( \"-1\" ) ;\n  }\n}", "target_program": " def printDuplicates ( arr ) :\n    dict = { }\n    for ele in arr :\n        try :\n            dict [ ele ] += 1\n        except :\n            dict [ ele ] = 1\n    for item in dict :\n        if ( dict [ item ] > 1 ) :\n            print ( item , end = \" \" )\n    print ( \"\\n\" )"}
{"source": "java", "target": "cpp", "source_program": " private static void printDuplicates ( int [ ] arr , int n ) {\n  Map < Integer , Integer > map = new HashMap < > ( ) ;\n  int count = 0 ;\n  boolean dup = false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( map . containsKey ( arr [ i ] ) ) {\n      count = map . get ( arr [ i ] ) ;\n      map . put ( arr [ i ] , count + 1 ) ;\n    }\n    else {\n      map . put ( arr [ i ] , 1 ) ;\n    }\n  }\n  for ( Entry < Integer , Integer > entry : map . entrySet ( ) ) {\n    if ( entry . getValue ( ) > 1 ) {\n      System . out . print ( entry . getKey ( ) + \" \" ) ;\n      dup = true ;\n    }\n  }\n  if ( ! dup ) {\n    System . out . println ( \"-1\" ) ;\n  }\n}", "target_program": " void printDuplicates ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  bool dup = false;\n  unordered_map < int, int > :: iterator itr;\n  for ( itr = freq . begin ( );\n  itr != freq . end ( );\n  itr ++ ) {\n    if ( itr -> second > 1 ) {\n      cout << itr -> first << \" \";\n      dup = true;\n    }\n  }\n  if ( dup == false ) cout << \"-1\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDuplicates ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  bool dup = false;\n  unordered_map < int, int > :: iterator itr;\n  for ( itr = freq . begin ( );\n  itr != freq . end ( );\n  itr ++ ) {\n    if ( itr -> second > 1 ) {\n      cout << itr -> first << \" \";\n      dup = true;\n    }\n  }\n  if ( dup == false ) cout << \"-1\";\n}", "target_program": " private static void printDuplicates ( int [ ] arr , int n ) {\n  Map < Integer , Integer > map = new HashMap < > ( ) ;\n  int count = 0 ;\n  boolean dup = false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( map . containsKey ( arr [ i ] ) ) {\n      count = map . get ( arr [ i ] ) ;\n      map . put ( arr [ i ] , count + 1 ) ;\n    }\n    else {\n      map . put ( arr [ i ] , 1 ) ;\n    }\n  }\n  for ( Entry < Integer , Integer > entry : map . entrySet ( ) ) {\n    if ( entry . getValue ( ) > 1 ) {\n      System . out . print ( entry . getKey ( ) + \" \" ) ;\n      dup = true ;\n    }\n  }\n  if ( ! dup ) {\n    System . out . println ( \"-1\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDuplicates ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  bool dup = false;\n  unordered_map < int, int > :: iterator itr;\n  for ( itr = freq . begin ( );\n  itr != freq . end ( );\n  itr ++ ) {\n    if ( itr -> second > 1 ) {\n      cout << itr -> first << \" \";\n      dup = true;\n    }\n  }\n  if ( dup == false ) cout << \"-1\";\n}", "target_program": " def printDuplicates ( arr ) :\n    dict = { }\n    for ele in arr :\n        try :\n            dict [ ele ] += 1\n        except :\n            dict [ ele ] = 1\n    for item in dict :\n        if ( dict [ item ] > 1 ) :\n            print ( item , end = \" \" )\n    print ( \"\\n\" )"}
{"source": "python", "target": "java", "source_program": " def findCount ( n , sum ) :\n    start = math.pow ( 10 , n - 1 ) ;\n    end = math.pow ( 10 , n ) - 1 ;\n    count = 0 ;\n    i = start ;\n    while ( i <= end ) :\n        cur = 0 ;\n        temp = i ;\n        while ( temp != 0 ) :\n            cur += temp % 10 ;\n            temp = temp // 10 ;\n        if ( cur == sum ) :\n            count = count + 1 ;\n            i += 9 ;\n        else :\n            i = i + 1 ;\n    print ( count ) ;", "target_program": " private static void findCount ( int n , int sum ) {\n  int start = ( int ) Math . pow ( 10 , n - 1 ) ;\n  int end = ( int ) Math . pow ( 10 , n ) - 1 ;\n  int count = 0 ;\n  int i = start ;\n  while ( i < end ) {\n    int cur = 0 ;\n    int temp = i ;\n    while ( temp != 0 ) {\n      cur += temp % 10 ;\n      temp = temp / 10 ;\n    }\n    if ( cur == sum ) {\n      count ++ ;\n      i += 9 ;\n    }\n    else i ++ ;\n  }\n  System . out . println ( count ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findCount ( n , sum ) :\n    start = math.pow ( 10 , n - 1 ) ;\n    end = math.pow ( 10 , n ) - 1 ;\n    count = 0 ;\n    i = start ;\n    while ( i <= end ) :\n        cur = 0 ;\n        temp = i ;\n        while ( temp != 0 ) :\n            cur += temp % 10 ;\n            temp = temp // 10 ;\n        if ( cur == sum ) :\n            count = count + 1 ;\n            i += 9 ;\n        else :\n            i = i + 1 ;\n    print ( count ) ;", "target_program": " void findCount ( int n, int sum ) {\n  int start = pow ( 10, n - 1 );\n  int end = pow ( 10, n ) - 1;\n  int count = 0;\n  int i = start;\n  while ( i <= end ) {\n    int cur = 0;\n    int temp = i;\n    while ( temp != 0 ) {\n      cur += temp % 10;\n      temp = temp / 10;\n    }\n    if ( cur == sum ) {\n      count ++;\n      i += 9;\n    }\n    else i ++;\n  }\n  cout << count;\n}"}
{"source": "java", "target": "python", "source_program": " private static void findCount ( int n , int sum ) {\n  int start = ( int ) Math . pow ( 10 , n - 1 ) ;\n  int end = ( int ) Math . pow ( 10 , n ) - 1 ;\n  int count = 0 ;\n  int i = start ;\n  while ( i < end ) {\n    int cur = 0 ;\n    int temp = i ;\n    while ( temp != 0 ) {\n      cur += temp % 10 ;\n      temp = temp / 10 ;\n    }\n    if ( cur == sum ) {\n      count ++ ;\n      i += 9 ;\n    }\n    else i ++ ;\n  }\n  System . out . println ( count ) ;\n}", "target_program": " def findCount ( n , sum ) :\n    start = math.pow ( 10 , n - 1 ) ;\n    end = math.pow ( 10 , n ) - 1 ;\n    count = 0 ;\n    i = start ;\n    while ( i <= end ) :\n        cur = 0 ;\n        temp = i ;\n        while ( temp != 0 ) :\n            cur += temp % 10 ;\n            temp = temp // 10 ;\n        if ( cur == sum ) :\n            count = count + 1 ;\n            i += 9 ;\n        else :\n            i = i + 1 ;\n    print ( count ) ;"}
{"source": "java", "target": "cpp", "source_program": " private static void findCount ( int n , int sum ) {\n  int start = ( int ) Math . pow ( 10 , n - 1 ) ;\n  int end = ( int ) Math . pow ( 10 , n ) - 1 ;\n  int count = 0 ;\n  int i = start ;\n  while ( i < end ) {\n    int cur = 0 ;\n    int temp = i ;\n    while ( temp != 0 ) {\n      cur += temp % 10 ;\n      temp = temp / 10 ;\n    }\n    if ( cur == sum ) {\n      count ++ ;\n      i += 9 ;\n    }\n    else i ++ ;\n  }\n  System . out . println ( count ) ;\n}", "target_program": " void findCount ( int n, int sum ) {\n  int start = pow ( 10, n - 1 );\n  int end = pow ( 10, n ) - 1;\n  int count = 0;\n  int i = start;\n  while ( i <= end ) {\n    int cur = 0;\n    int temp = i;\n    while ( temp != 0 ) {\n      cur += temp % 10;\n      temp = temp / 10;\n    }\n    if ( cur == sum ) {\n      count ++;\n      i += 9;\n    }\n    else i ++;\n  }\n  cout << count;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findCount ( int n, int sum ) {\n  int start = pow ( 10, n - 1 );\n  int end = pow ( 10, n ) - 1;\n  int count = 0;\n  int i = start;\n  while ( i <= end ) {\n    int cur = 0;\n    int temp = i;\n    while ( temp != 0 ) {\n      cur += temp % 10;\n      temp = temp / 10;\n    }\n    if ( cur == sum ) {\n      count ++;\n      i += 9;\n    }\n    else i ++;\n  }\n  cout << count;\n}", "target_program": " private static void findCount ( int n , int sum ) {\n  int start = ( int ) Math . pow ( 10 , n - 1 ) ;\n  int end = ( int ) Math . pow ( 10 , n ) - 1 ;\n  int count = 0 ;\n  int i = start ;\n  while ( i < end ) {\n    int cur = 0 ;\n    int temp = i ;\n    while ( temp != 0 ) {\n      cur += temp % 10 ;\n      temp = temp / 10 ;\n    }\n    if ( cur == sum ) {\n      count ++ ;\n      i += 9 ;\n    }\n    else i ++ ;\n  }\n  System . out . println ( count ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findCount ( int n, int sum ) {\n  int start = pow ( 10, n - 1 );\n  int end = pow ( 10, n ) - 1;\n  int count = 0;\n  int i = start;\n  while ( i <= end ) {\n    int cur = 0;\n    int temp = i;\n    while ( temp != 0 ) {\n      cur += temp % 10;\n      temp = temp / 10;\n    }\n    if ( cur == sum ) {\n      count ++;\n      i += 9;\n    }\n    else i ++;\n  }\n  cout << count;\n}", "target_program": " def findCount ( n , sum ) :\n    start = math.pow ( 10 , n - 1 ) ;\n    end = math.pow ( 10 , n ) - 1 ;\n    count = 0 ;\n    i = start ;\n    while ( i <= end ) :\n        cur = 0 ;\n        temp = i ;\n        while ( temp != 0 ) :\n            cur += temp % 10 ;\n            temp = temp // 10 ;\n        if ( cur == sum ) :\n            count = count + 1 ;\n            i += 9 ;\n        else :\n            i = i + 1 ;\n    print ( count ) ;"}
{"source": "python", "target": "java", "source_program": " def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = 0\n    for i in range ( n ) :\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n    return mn * ( sum - mn )", "target_program": " static int minimum_cost ( int a [ ] , int n ) {\n  int mn = Integer . MAX_VALUE ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mn = Math . min ( a [ i ] , mn ) ;\n    sum += a [ i ] ;\n  }\n  return mn * ( sum - mn ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = 0\n    for i in range ( n ) :\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n    return mn * ( sum - mn )", "target_program": " int minimum_cost ( int a [ ], int n ) {\n  int mn = INT_MAX;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mn = min ( a [ i ], mn );\n    sum += a [ i ];\n  }\n  return mn * ( sum - mn );\n}"}
{"source": "java", "target": "python", "source_program": " static int minimum_cost ( int a [ ] , int n ) {\n  int mn = Integer . MAX_VALUE ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mn = Math . min ( a [ i ] , mn ) ;\n    sum += a [ i ] ;\n  }\n  return mn * ( sum - mn ) ;\n}", "target_program": " def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = 0\n    for i in range ( n ) :\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n    return mn * ( sum - mn )"}
{"source": "java", "target": "cpp", "source_program": " static int minimum_cost ( int a [ ] , int n ) {\n  int mn = Integer . MAX_VALUE ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mn = Math . min ( a [ i ] , mn ) ;\n    sum += a [ i ] ;\n  }\n  return mn * ( sum - mn ) ;\n}", "target_program": " int minimum_cost ( int a [ ], int n ) {\n  int mn = INT_MAX;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mn = min ( a [ i ], mn );\n    sum += a [ i ];\n  }\n  return mn * ( sum - mn );\n}"}
{"source": "cpp", "target": "java", "source_program": " int minimum_cost ( int a [ ], int n ) {\n  int mn = INT_MAX;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mn = min ( a [ i ], mn );\n    sum += a [ i ];\n  }\n  return mn * ( sum - mn );\n}", "target_program": " static int minimum_cost ( int a [ ] , int n ) {\n  int mn = Integer . MAX_VALUE ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mn = Math . min ( a [ i ] , mn ) ;\n    sum += a [ i ] ;\n  }\n  return mn * ( sum - mn ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minimum_cost ( int a [ ], int n ) {\n  int mn = INT_MAX;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mn = min ( a [ i ], mn );\n    sum += a [ i ];\n  }\n  return mn * ( sum - mn );\n}", "target_program": " def minimum_cost ( a , n ) :\n    mn = sys.maxsize\n    sum = 0\n    for i in range ( n ) :\n        mn = min ( a [ i ] , mn )\n        sum += a [ i ]\n    return mn * ( sum - mn )"}
{"source": "python", "target": "java", "source_program": " def printDivisors ( n ) :\n    list = [ ]\n    for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :\n        if ( n % i == 0 ) :\n            if ( n / i == i ) :\n                print ( i , end = \" \" )\n            else :\n                print ( i , end = \" \" )\n                list.append ( int ( n / i ) )\n    for i in list [ : : - 1 ] :\n        print ( i , end = \" \" )", "target_program": " static void printDivisors ( int n ) {\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) System . out . printf ( \"%d \" , i ) ;\n      else {\n        System . out . printf ( \"%d \" , i ) ;\n        v . add ( n / i ) ;\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) System . out . printf ( \"%d \" , v . get ( i ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDivisors ( n ) :\n    list = [ ]\n    for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :\n        if ( n % i == 0 ) :\n            if ( n / i == i ) :\n                print ( i , end = \" \" )\n            else :\n                print ( i , end = \" \" )\n                list.append ( int ( n / i ) )\n    for i in list [ : : - 1 ] :\n        print ( i , end = \" \" )", "target_program": " void printDivisors ( int n ) {\n  vector < int > v;\n  for ( int i = 1;\n  i <= sqrt ( n );\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) printf ( \"%d \", i );\n      else {\n        printf ( \"%d \", i );\n        v . push_back ( n / i );\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1;\n  i >= 0;\n  i -- ) printf ( \"%d \", v [ i ] );\n}"}
{"source": "java", "target": "python", "source_program": " static void printDivisors ( int n ) {\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) System . out . printf ( \"%d \" , i ) ;\n      else {\n        System . out . printf ( \"%d \" , i ) ;\n        v . add ( n / i ) ;\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) System . out . printf ( \"%d \" , v . get ( i ) ) ;\n}", "target_program": " def printDivisors ( n ) :\n    list = [ ]\n    for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :\n        if ( n % i == 0 ) :\n            if ( n / i == i ) :\n                print ( i , end = \" \" )\n            else :\n                print ( i , end = \" \" )\n                list.append ( int ( n / i ) )\n    for i in list [ : : - 1 ] :\n        print ( i , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void printDivisors ( int n ) {\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) System . out . printf ( \"%d \" , i ) ;\n      else {\n        System . out . printf ( \"%d \" , i ) ;\n        v . add ( n / i ) ;\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) System . out . printf ( \"%d \" , v . get ( i ) ) ;\n}", "target_program": " void printDivisors ( int n ) {\n  vector < int > v;\n  for ( int i = 1;\n  i <= sqrt ( n );\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) printf ( \"%d \", i );\n      else {\n        printf ( \"%d \", i );\n        v . push_back ( n / i );\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1;\n  i >= 0;\n  i -- ) printf ( \"%d \", v [ i ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDivisors ( int n ) {\n  vector < int > v;\n  for ( int i = 1;\n  i <= sqrt ( n );\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) printf ( \"%d \", i );\n      else {\n        printf ( \"%d \", i );\n        v . push_back ( n / i );\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1;\n  i >= 0;\n  i -- ) printf ( \"%d \", v [ i ] );\n}", "target_program": " static void printDivisors ( int n ) {\n  Vector < Integer > v = new Vector < > ( ) ;\n  for ( int i = 1 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) System . out . printf ( \"%d \" , i ) ;\n      else {\n        System . out . printf ( \"%d \" , i ) ;\n        v . add ( n / i ) ;\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1 ;\n  i >= 0 ;\n  i -- ) System . out . printf ( \"%d \" , v . get ( i ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDivisors ( int n ) {\n  vector < int > v;\n  for ( int i = 1;\n  i <= sqrt ( n );\n  i ++ ) {\n    if ( n % i == 0 ) {\n      if ( n / i == i ) printf ( \"%d \", i );\n      else {\n        printf ( \"%d \", i );\n        v . push_back ( n / i );\n      }\n    }\n  }\n  for ( int i = v . size ( ) - 1;\n  i >= 0;\n  i -- ) printf ( \"%d \", v [ i ] );\n}", "target_program": " def printDivisors ( n ) :\n    list = [ ]\n    for i in range ( 1 , int ( math.sqrt ( n ) + 1 ) ) :\n        if ( n % i == 0 ) :\n            if ( n / i == i ) :\n                print ( i , end = \" \" )\n            else :\n                print ( i , end = \" \" )\n                list.append ( int ( n / i ) )\n    for i in list [ : : - 1 ] :\n        print ( i , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = \"\" )\n    print ( \"\\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] , end = \"\" )", "target_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \" Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \" Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = \"\" )\n    print ( \"\\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] , end = \"\" )", "target_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \" \\nDiagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ i ] * mat [ i ] [ i ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] << \" \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \" Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \" Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] + \" \" ) ;\n  }\n}", "target_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = \"\" )\n    print ( \"\\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \" Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \" Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] + \" \" ) ;\n  }\n}", "target_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \" \\nDiagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ i ] * mat [ i ] [ i ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] << \" \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \" \\nDiagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ i ] * mat [ i ] [ i ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] << \" \";\n  }\n}", "target_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \" Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ i ] * mat [ i ] [ i ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \" Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    System . out . print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \" \\nDiagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ i ] * mat [ i ] [ i ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    cout << mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] << \" \";\n  }\n}", "target_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ i ] * mat [ i ] [ i ] , end = \"\" )\n    print ( \"\\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        print ( mat [ i ] [ row - i - 1 ] * mat [ i ] [ row - i - 1 ] , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def polygonArea ( X , Y , n ) :\n    area = 0.0\n    j = n - 1\n    for i in range ( 0 , n ) :\n        area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] )\n        j = i\n    return abs ( area // 2.0 )", "target_program": " static double polygonArea ( double X [ ] , double Y [ ] , int n ) {\n  double area = 0.0 ;\n  int j = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;\n    j = i ;\n  }\n  return Math . abs ( area / 2.0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def polygonArea ( X , Y , n ) :\n    area = 0.0\n    j = n - 1\n    for i in range ( 0 , n ) :\n        area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] )\n        j = i\n    return abs ( area // 2.0 )", "target_program": " double polygonArea ( double X [ ], double Y [ ], int n ) {\n  double area = 0.0;\n  int j = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] );\n    j = i;\n  }\n  return abs ( area / 2.0 );\n}"}
{"source": "java", "target": "python", "source_program": " static double polygonArea ( double X [ ] , double Y [ ] , int n ) {\n  double area = 0.0 ;\n  int j = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;\n    j = i ;\n  }\n  return Math . abs ( area / 2.0 ) ;\n}", "target_program": " def polygonArea ( X , Y , n ) :\n    area = 0.0\n    j = n - 1\n    for i in range ( 0 , n ) :\n        area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] )\n        j = i\n    return abs ( area // 2.0 )"}
{"source": "java", "target": "cpp", "source_program": " static double polygonArea ( double X [ ] , double Y [ ] , int n ) {\n  double area = 0.0 ;\n  int j = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;\n    j = i ;\n  }\n  return Math . abs ( area / 2.0 ) ;\n}", "target_program": " double polygonArea ( double X [ ], double Y [ ], int n ) {\n  double area = 0.0;\n  int j = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] );\n    j = i;\n  }\n  return abs ( area / 2.0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " double polygonArea ( double X [ ], double Y [ ], int n ) {\n  double area = 0.0;\n  int j = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] );\n    j = i;\n  }\n  return abs ( area / 2.0 );\n}", "target_program": " static double polygonArea ( double X [ ] , double Y [ ] , int n ) {\n  double area = 0.0 ;\n  int j = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] ) ;\n    j = i ;\n  }\n  return Math . abs ( area / 2.0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double polygonArea ( double X [ ], double Y [ ], int n ) {\n  double area = 0.0;\n  int j = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    area += ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] );\n    j = i;\n  }\n  return abs ( area / 2.0 );\n}", "target_program": " def polygonArea ( X , Y , n ) :\n    area = 0.0\n    j = n - 1\n    for i in range ( 0 , n ) :\n        area = area + ( X [ j ] + X [ i ] ) * ( Y [ j ] - Y [ i ] )\n        j = i\n    return abs ( area // 2.0 )"}
{"source": "python", "target": "java", "source_program": " def findFrequency ( arr , n , left , right , element ) :\n    count = 0\n    for i in range ( left - 1 , right ) :\n        if ( arr [ i ] == element ) :\n            count += 1\n    return count", "target_program": " public static int findFrequency ( int arr [ ] , int n , int left , int right , int element ) {\n  int count = 0 ;\n  for ( int i = left - 1 ;\n  i < right ;\n  ++ i ) if ( arr [ i ] == element ) ++ count ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findFrequency ( arr , n , left , right , element ) :\n    count = 0\n    for i in range ( left - 1 , right ) :\n        if ( arr [ i ] == element ) :\n            count += 1\n    return count", "target_program": " int findFrequency ( int arr [ ], int n, int left, int right, int element ) {\n  int count = 0;\n  for ( int i = left - 1;\n  i <= right;\n  ++ i ) if ( arr [ i ] == element ) ++ count;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " public static int findFrequency ( int arr [ ] , int n , int left , int right , int element ) {\n  int count = 0 ;\n  for ( int i = left - 1 ;\n  i < right ;\n  ++ i ) if ( arr [ i ] == element ) ++ count ;\n  return count ;\n}", "target_program": " def findFrequency ( arr , n , left , right , element ) :\n    count = 0\n    for i in range ( left - 1 , right ) :\n        if ( arr [ i ] == element ) :\n            count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " public static int findFrequency ( int arr [ ] , int n , int left , int right , int element ) {\n  int count = 0 ;\n  for ( int i = left - 1 ;\n  i < right ;\n  ++ i ) if ( arr [ i ] == element ) ++ count ;\n  return count ;\n}", "target_program": " int findFrequency ( int arr [ ], int n, int left, int right, int element ) {\n  int count = 0;\n  for ( int i = left - 1;\n  i <= right;\n  ++ i ) if ( arr [ i ] == element ) ++ count;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findFrequency ( int arr [ ], int n, int left, int right, int element ) {\n  int count = 0;\n  for ( int i = left - 1;\n  i <= right;\n  ++ i ) if ( arr [ i ] == element ) ++ count;\n  return count;\n}", "target_program": " public static int findFrequency ( int arr [ ] , int n , int left , int right , int element ) {\n  int count = 0 ;\n  for ( int i = left - 1 ;\n  i < right ;\n  ++ i ) if ( arr [ i ] == element ) ++ count ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findFrequency ( int arr [ ], int n, int left, int right, int element ) {\n  int count = 0;\n  for ( int i = left - 1;\n  i <= right;\n  ++ i ) if ( arr [ i ] == element ) ++ count;\n  return count;\n}", "target_program": " def findFrequency ( arr , n , left , right , element ) :\n    count = 0\n    for i in range ( left - 1 , right ) :\n        if ( arr [ i ] == element ) :\n            count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def print_sequence ( n , k ) :\n    b = int ( n / ( k * ( k + 1 ) / 2 ) ) ;\n    if b == 0 :\n        print ( \"-1\" )\n    else :\n        r = 1 ;\n        x = 1\n        while x ** 2 <= n :\n            if n % x != 0 :\n                continue ;\n            elif x <= b and x > r :\n                r = x\n            elif n / x <= b and n / x > r :\n                r = n / x\n            x = x + 1\n        i = 1\n        while i < k :\n            print ( r * i , end = \" \" )\n            i = i + 1\n        last_term = n - ( r * ( k * ( k - 1 ) / 2 ) )\n        print ( last_term )", "target_program": " static void print_sequence ( int n , int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 ) ;\n  if ( b == 0 ) {\n    System . out . println ( \"-1\" ) ;\n  }\n  else {\n    int r = 1 ;\n    for ( int x = 1 ;\n    x * x <= n ;\n    x ++ ) {\n      if ( n % x != 0 ) continue ;\n      if ( x <= b && x > r ) r = x ;\n      if ( n / x <= b && n / x > r ) r = n / x ;\n    }\n    for ( int i = 1 ;\n    i < k ;\n    i ++ ) System . out . print ( r * i + \" \" ) ;\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;\n    System . out . println ( res ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def print_sequence ( n , k ) :\n    b = int ( n / ( k * ( k + 1 ) / 2 ) ) ;\n    if b == 0 :\n        print ( \"-1\" )\n    else :\n        r = 1 ;\n        x = 1\n        while x ** 2 <= n :\n            if n % x != 0 :\n                continue ;\n            elif x <= b and x > r :\n                r = x\n            elif n / x <= b and n / x > r :\n                r = n / x\n            x = x + 1\n        i = 1\n        while i < k :\n            print ( r * i , end = \" \" )\n            i = i + 1\n        last_term = n - ( r * ( k * ( k - 1 ) / 2 ) )\n        print ( last_term )", "target_program": " void print_sequence ( int n, int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 );\n  if ( b == 0 ) {\n    cout << - 1 << endl;\n  }\n  else {\n    int r = 1;\n    for ( int x = 1;\n    x * x <= n;\n    x ++ ) {\n      if ( n % x != 0 ) continue;\n      if ( x <= b && x > r ) r = x;\n      if ( n / x <= b && n / x > r ) r = n / x;\n    }\n    for ( int i = 1;\n    i < k;\n    i ++ ) cout << r * i << \" \";\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) );\n    cout << res << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void print_sequence ( int n , int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 ) ;\n  if ( b == 0 ) {\n    System . out . println ( \"-1\" ) ;\n  }\n  else {\n    int r = 1 ;\n    for ( int x = 1 ;\n    x * x <= n ;\n    x ++ ) {\n      if ( n % x != 0 ) continue ;\n      if ( x <= b && x > r ) r = x ;\n      if ( n / x <= b && n / x > r ) r = n / x ;\n    }\n    for ( int i = 1 ;\n    i < k ;\n    i ++ ) System . out . print ( r * i + \" \" ) ;\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;\n    System . out . println ( res ) ;\n  }\n}", "target_program": " def print_sequence ( n , k ) :\n    b = int ( n / ( k * ( k + 1 ) / 2 ) ) ;\n    if b == 0 :\n        print ( \"-1\" )\n    else :\n        r = 1 ;\n        x = 1\n        while x ** 2 <= n :\n            if n % x != 0 :\n                continue ;\n            elif x <= b and x > r :\n                r = x\n            elif n / x <= b and n / x > r :\n                r = n / x\n            x = x + 1\n        i = 1\n        while i < k :\n            print ( r * i , end = \" \" )\n            i = i + 1\n        last_term = n - ( r * ( k * ( k - 1 ) / 2 ) )\n        print ( last_term )"}
{"source": "java", "target": "cpp", "source_program": " static void print_sequence ( int n , int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 ) ;\n  if ( b == 0 ) {\n    System . out . println ( \"-1\" ) ;\n  }\n  else {\n    int r = 1 ;\n    for ( int x = 1 ;\n    x * x <= n ;\n    x ++ ) {\n      if ( n % x != 0 ) continue ;\n      if ( x <= b && x > r ) r = x ;\n      if ( n / x <= b && n / x > r ) r = n / x ;\n    }\n    for ( int i = 1 ;\n    i < k ;\n    i ++ ) System . out . print ( r * i + \" \" ) ;\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;\n    System . out . println ( res ) ;\n  }\n}", "target_program": " void print_sequence ( int n, int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 );\n  if ( b == 0 ) {\n    cout << - 1 << endl;\n  }\n  else {\n    int r = 1;\n    for ( int x = 1;\n    x * x <= n;\n    x ++ ) {\n      if ( n % x != 0 ) continue;\n      if ( x <= b && x > r ) r = x;\n      if ( n / x <= b && n / x > r ) r = n / x;\n    }\n    for ( int i = 1;\n    i < k;\n    i ++ ) cout << r * i << \" \";\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) );\n    cout << res << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void print_sequence ( int n, int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 );\n  if ( b == 0 ) {\n    cout << - 1 << endl;\n  }\n  else {\n    int r = 1;\n    for ( int x = 1;\n    x * x <= n;\n    x ++ ) {\n      if ( n % x != 0 ) continue;\n      if ( x <= b && x > r ) r = x;\n      if ( n / x <= b && n / x > r ) r = n / x;\n    }\n    for ( int i = 1;\n    i < k;\n    i ++ ) cout << r * i << \" \";\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) );\n    cout << res << endl;\n  }\n}", "target_program": " static void print_sequence ( int n , int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 ) ;\n  if ( b == 0 ) {\n    System . out . println ( \"-1\" ) ;\n  }\n  else {\n    int r = 1 ;\n    for ( int x = 1 ;\n    x * x <= n ;\n    x ++ ) {\n      if ( n % x != 0 ) continue ;\n      if ( x <= b && x > r ) r = x ;\n      if ( n / x <= b && n / x > r ) r = n / x ;\n    }\n    for ( int i = 1 ;\n    i < k ;\n    i ++ ) System . out . print ( r * i + \" \" ) ;\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) ) ;\n    System . out . println ( res ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void print_sequence ( int n, int k ) {\n  int b = n / ( k * ( k + 1 ) / 2 );\n  if ( b == 0 ) {\n    cout << - 1 << endl;\n  }\n  else {\n    int r = 1;\n    for ( int x = 1;\n    x * x <= n;\n    x ++ ) {\n      if ( n % x != 0 ) continue;\n      if ( x <= b && x > r ) r = x;\n      if ( n / x <= b && n / x > r ) r = n / x;\n    }\n    for ( int i = 1;\n    i < k;\n    i ++ ) cout << r * i << \" \";\n    int res = n - ( r * ( k * ( k - 1 ) / 2 ) );\n    cout << res << endl;\n  }\n}", "target_program": " def print_sequence ( n , k ) :\n    b = int ( n / ( k * ( k + 1 ) / 2 ) ) ;\n    if b == 0 :\n        print ( \"-1\" )\n    else :\n        r = 1 ;\n        x = 1\n        while x ** 2 <= n :\n            if n % x != 0 :\n                continue ;\n            elif x <= b and x > r :\n                r = x\n            elif n / x <= b and n / x > r :\n                r = n / x\n            x = x + 1\n        i = 1\n        while i < k :\n            print ( r * i , end = \" \" )\n            i = i + 1\n        last_term = n - ( r * ( k * ( k - 1 ) / 2 ) )\n        print ( last_term )"}
{"source": "python", "target": "java", "source_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    for i in range ( n1 ) :\n        s.add ( a1 [ i ] )\n    for i in range ( n2 ) :\n        for j in range ( n3 ) :\n            if sum - a2 [ i ] - a3 [ j ] in s :\n                return True\n    return False", "target_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    s . add ( a1 [ i ] ) ;\n  }\n  ArrayList < Integer > al = new ArrayList < > ( s ) ;\n  for ( int i = 0 ;\n  i < n2 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n3 ;\n    j ++ ) {\n      if ( al . contains ( sum - a2 [ i ] - a3 [ j ] ) & al . indexOf ( sum - a2 [ i ] - a3 [ j ] ) != al . get ( al . size ( ) - 1 ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    for i in range ( n1 ) :\n        s.add ( a1 [ i ] )\n    for i in range ( n2 ) :\n        for j in range ( n3 ) :\n            if sum - a2 [ i ] - a3 [ j ] in s :\n                return True\n    return False", "target_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n1;\n  i ++ ) s . insert ( a1 [ i ] );\n  for ( int i = 0;\n  i < n2;\n  i ++ ) {\n    for ( int j = 0;\n    j < n3;\n    j ++ ) {\n      if ( s . find ( sum - a2 [ i ] - a3 [ j ] ) != s . end ( ) ) return true;\n    }\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    s . add ( a1 [ i ] ) ;\n  }\n  ArrayList < Integer > al = new ArrayList < > ( s ) ;\n  for ( int i = 0 ;\n  i < n2 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n3 ;\n    j ++ ) {\n      if ( al . contains ( sum - a2 [ i ] - a3 [ j ] ) & al . indexOf ( sum - a2 [ i ] - a3 [ j ] ) != al . get ( al . size ( ) - 1 ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}", "target_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    for i in range ( n1 ) :\n        s.add ( a1 [ i ] )\n    for i in range ( n2 ) :\n        for j in range ( n3 ) :\n            if sum - a2 [ i ] - a3 [ j ] in s :\n                return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    s . add ( a1 [ i ] ) ;\n  }\n  ArrayList < Integer > al = new ArrayList < > ( s ) ;\n  for ( int i = 0 ;\n  i < n2 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n3 ;\n    j ++ ) {\n      if ( al . contains ( sum - a2 [ i ] - a3 [ j ] ) & al . indexOf ( sum - a2 [ i ] - a3 [ j ] ) != al . get ( al . size ( ) - 1 ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}", "target_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n1;\n  i ++ ) s . insert ( a1 [ i ] );\n  for ( int i = 0;\n  i < n2;\n  i ++ ) {\n    for ( int j = 0;\n    j < n3;\n    j ++ ) {\n      if ( s . find ( sum - a2 [ i ] - a3 [ j ] ) != s . end ( ) ) return true;\n    }\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n1;\n  i ++ ) s . insert ( a1 [ i ] );\n  for ( int i = 0;\n  i < n2;\n  i ++ ) {\n    for ( int j = 0;\n    j < n3;\n    j ++ ) {\n      if ( s . find ( sum - a2 [ i ] - a3 [ j ] ) != s . end ( ) ) return true;\n    }\n  }\n  return false;\n}", "target_program": " static boolean findTriplet ( int a1 [ ] , int a2 [ ] , int a3 [ ] , int n1 , int n2 , int n3 , int sum ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    s . add ( a1 [ i ] ) ;\n  }\n  ArrayList < Integer > al = new ArrayList < > ( s ) ;\n  for ( int i = 0 ;\n  i < n2 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n3 ;\n    j ++ ) {\n      if ( al . contains ( sum - a2 [ i ] - a3 [ j ] ) & al . indexOf ( sum - a2 [ i ] - a3 [ j ] ) != al . get ( al . size ( ) - 1 ) ) {\n        return true ;\n      }\n    }\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool findTriplet ( int a1 [ ], int a2 [ ], int a3 [ ], int n1, int n2, int n3, int sum ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n1;\n  i ++ ) s . insert ( a1 [ i ] );\n  for ( int i = 0;\n  i < n2;\n  i ++ ) {\n    for ( int j = 0;\n    j < n3;\n    j ++ ) {\n      if ( s . find ( sum - a2 [ i ] - a3 [ j ] ) != s . end ( ) ) return true;\n    }\n  }\n  return false;\n}", "target_program": " def findTriplet ( a1 , a2 , a3 , n1 , n2 , n3 , sum ) :\n    s = set ( )\n    for i in range ( n1 ) :\n        s.add ( a1 [ i ] )\n    for i in range ( n2 ) :\n        for j in range ( n3 ) :\n            if sum - a2 [ i ] - a3 [ j ] in s :\n                return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def findMaximum ( arr , low , high ) :\n    if low == high :\n        return arr [ low ]\n    if high == low + 1 and arr [ low ] >= arr [ high ] :\n        return arr [ low ] ;\n    if high == low + 1 and arr [ low ] < arr [ high ] :\n        return arr [ high ]\n    mid = ( low + high ) // 2\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] :\n        return findMaximum ( arr , low , mid - 1 )\n    else :\n        return findMaximum ( arr , mid + 1 , high )", "target_program": " static int findMaximum ( int arr [ ] , int low , int high ) {\n  if ( low == high ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ;\n  int mid = ( low + high ) / 2 ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ;\n  else return findMaximum ( arr , mid + 1 , high ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaximum ( arr , low , high ) :\n    if low == high :\n        return arr [ low ]\n    if high == low + 1 and arr [ low ] >= arr [ high ] :\n        return arr [ low ] ;\n    if high == low + 1 and arr [ low ] < arr [ high ] :\n        return arr [ high ]\n    mid = ( low + high ) // 2\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] :\n        return findMaximum ( arr , low , mid - 1 )\n    else :\n        return findMaximum ( arr , mid + 1 , high )", "target_program": " int findMaximum ( int arr [ ], int low, int high ) {\n  if ( low == high ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ];\n  int mid = ( low + high ) / 2;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr, low, mid - 1 );\n  else return findMaximum ( arr, mid + 1, high );\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaximum ( int arr [ ] , int low , int high ) {\n  if ( low == high ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ;\n  int mid = ( low + high ) / 2 ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ;\n  else return findMaximum ( arr , mid + 1 , high ) ;\n}", "target_program": " def findMaximum ( arr , low , high ) :\n    if low == high :\n        return arr [ low ]\n    if high == low + 1 and arr [ low ] >= arr [ high ] :\n        return arr [ low ] ;\n    if high == low + 1 and arr [ low ] < arr [ high ] :\n        return arr [ high ]\n    mid = ( low + high ) // 2\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] :\n        return findMaximum ( arr , low , mid - 1 )\n    else :\n        return findMaximum ( arr , mid + 1 , high )"}
{"source": "java", "target": "cpp", "source_program": " static int findMaximum ( int arr [ ] , int low , int high ) {\n  if ( low == high ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ;\n  int mid = ( low + high ) / 2 ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ;\n  else return findMaximum ( arr , mid + 1 , high ) ;\n}", "target_program": " int findMaximum ( int arr [ ], int low, int high ) {\n  if ( low == high ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ];\n  int mid = ( low + high ) / 2;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr, low, mid - 1 );\n  else return findMaximum ( arr, mid + 1, high );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaximum ( int arr [ ], int low, int high ) {\n  if ( low == high ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ];\n  int mid = ( low + high ) / 2;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr, low, mid - 1 );\n  else return findMaximum ( arr, mid + 1, high );\n}", "target_program": " static int findMaximum ( int arr [ ] , int low , int high ) {\n  if ( low == high ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ] ;\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ] ;\n  int mid = ( low + high ) / 2 ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr , low , mid - 1 ) ;\n  else return findMaximum ( arr , mid + 1 , high ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaximum ( int arr [ ], int low, int high ) {\n  if ( low == high ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] >= arr [ high ] ) return arr [ low ];\n  if ( ( high == low + 1 ) && arr [ low ] < arr [ high ] ) return arr [ high ];\n  int mid = ( low + high ) / 2;\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] > arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ mid ] > arr [ mid + 1 ] && arr [ mid ] < arr [ mid - 1 ] ) return findMaximum ( arr, low, mid - 1 );\n  else return findMaximum ( arr, mid + 1, high );\n}", "target_program": " def findMaximum ( arr , low , high ) :\n    if low == high :\n        return arr [ low ]\n    if high == low + 1 and arr [ low ] >= arr [ high ] :\n        return arr [ low ] ;\n    if high == low + 1 and arr [ low ] < arr [ high ] :\n        return arr [ high ]\n    mid = ( low + high ) // 2\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] > arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ mid ] > arr [ mid + 1 ] and arr [ mid ] < arr [ mid - 1 ] :\n        return findMaximum ( arr , low , mid - 1 )\n    else :\n        return findMaximum ( arr , mid + 1 , high )"}
{"source": "python", "target": "java", "source_program": " def fib ( n , lookup ) :\n    if n == 0 or n == 1 :\n        lookup [ n ] = n\n    if lookup [ n ] is None :\n        lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , lookup )\n    return lookup [ n ]", "target_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n ;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;\n  }\n  return lookup [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def fib ( n , lookup ) :\n    if n == 0 or n == 1 :\n        lookup [ n ] = n\n    if lookup [ n ] is None :\n        lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , lookup )\n    return lookup [ n ]", "target_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 );\n  }\n  return lookup [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n ;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;\n  }\n  return lookup [ n ] ;\n}", "target_program": " def fib ( n , lookup ) :\n    if n == 0 or n == 1 :\n        lookup [ n ] = n\n    if lookup [ n ] is None :\n        lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , lookup )\n    return lookup [ n ]"}
{"source": "java", "target": "cpp", "source_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n ;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;\n  }\n  return lookup [ n ] ;\n}", "target_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 );\n  }\n  return lookup [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 );\n  }\n  return lookup [ n ];\n}", "target_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n ;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 ) ;\n  }\n  return lookup [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int fib ( int n ) {\n  if ( lookup [ n ] == NIL ) {\n    if ( n <= 1 ) lookup [ n ] = n;\n    else lookup [ n ] = fib ( n - 1 ) + fib ( n - 2 );\n  }\n  return lookup [ n ];\n}", "target_program": " def fib ( n , lookup ) :\n    if n == 0 or n == 1 :\n        lookup [ n ] = n\n    if lookup [ n ] is None :\n        lookup [ n ] = fib ( n - 1 , lookup ) + fib ( n - 2 , lookup )\n    return lookup [ n ]"}
{"source": "python", "target": "java", "source_program": " def power ( x , y , p ) :\n    res = 1\n    x = x % p\n    while ( y > 0 ) :\n        if ( ( y & 1 ) == 1 ) :\n            res = ( res * x ) % p\n        y = y >> 1\n        x = ( x * x ) % p\n    return res", "target_program": " static int power ( int x , int y , int p ) {\n  int res = 1 ;\n  x = x % p ;\n  while ( y > 0 ) {\n    if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;\n    y = y >> 1 ;\n    x = ( x * x ) % p ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def power ( x , y , p ) :\n    res = 1\n    x = x % p\n    while ( y > 0 ) :\n        if ( ( y & 1 ) == 1 ) :\n            res = ( res * x ) % p\n        y = y >> 1\n        x = ( x * x ) % p\n    return res", "target_program": " int power ( int x, unsigned int y, int p ) {\n  int res = 1;\n  x = x % p;\n  while ( y > 0 ) {\n    if ( y & 1 ) res = ( res * x ) % p;\n    y = y >> 1;\n    x = ( x * x ) % p;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int power ( int x , int y , int p ) {\n  int res = 1 ;\n  x = x % p ;\n  while ( y > 0 ) {\n    if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;\n    y = y >> 1 ;\n    x = ( x * x ) % p ;\n  }\n  return res ;\n}", "target_program": " def power ( x , y , p ) :\n    res = 1\n    x = x % p\n    while ( y > 0 ) :\n        if ( ( y & 1 ) == 1 ) :\n            res = ( res * x ) % p\n        y = y >> 1\n        x = ( x * x ) % p\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int power ( int x , int y , int p ) {\n  int res = 1 ;\n  x = x % p ;\n  while ( y > 0 ) {\n    if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;\n    y = y >> 1 ;\n    x = ( x * x ) % p ;\n  }\n  return res ;\n}", "target_program": " int power ( int x, unsigned int y, int p ) {\n  int res = 1;\n  x = x % p;\n  while ( y > 0 ) {\n    if ( y & 1 ) res = ( res * x ) % p;\n    y = y >> 1;\n    x = ( x * x ) % p;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int power ( int x, unsigned int y, int p ) {\n  int res = 1;\n  x = x % p;\n  while ( y > 0 ) {\n    if ( y & 1 ) res = ( res * x ) % p;\n    y = y >> 1;\n    x = ( x * x ) % p;\n  }\n  return res;\n}", "target_program": " static int power ( int x , int y , int p ) {\n  int res = 1 ;\n  x = x % p ;\n  while ( y > 0 ) {\n    if ( ( y & 1 ) == 1 ) res = ( res * x ) % p ;\n    y = y >> 1 ;\n    x = ( x * x ) % p ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int power ( int x, unsigned int y, int p ) {\n  int res = 1;\n  x = x % p;\n  while ( y > 0 ) {\n    if ( y & 1 ) res = ( res * x ) % p;\n    y = y >> 1;\n    x = ( x * x ) % p;\n  }\n  return res;\n}", "target_program": " def power ( x , y , p ) :\n    res = 1\n    x = x % p\n    while ( y > 0 ) :\n        if ( ( y & 1 ) == 1 ) :\n            res = ( res * x ) % p\n        y = y >> 1\n        x = ( x * x ) % p\n    return res"}
{"source": "python", "target": "java", "source_program": " def isPowerOfTwo ( x ) :\n    return ( x and ( not ( x & ( x - 1 ) ) ) )", "target_program": " static boolean isPowerOfTwo ( int x ) {\n  return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPowerOfTwo ( x ) :\n    return ( x and ( not ( x & ( x - 1 ) ) ) )", "target_program": " int bool isPowerOfTwo ( int x ) {\n  return x && ( ! ( x & ( x - 1 ) ) );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPowerOfTwo ( int x ) {\n  return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;\n}", "target_program": " def isPowerOfTwo ( x ) :\n    return ( x and ( not ( x & ( x - 1 ) ) ) )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPowerOfTwo ( int x ) {\n  return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;\n}", "target_program": " int bool isPowerOfTwo ( int x ) {\n  return x && ( ! ( x & ( x - 1 ) ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int bool isPowerOfTwo ( int x ) {\n  return x && ( ! ( x & ( x - 1 ) ) );\n}", "target_program": " static boolean isPowerOfTwo ( int x ) {\n  return x != 0 && ( ( x & ( x - 1 ) ) == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int bool isPowerOfTwo ( int x ) {\n  return x && ( ! ( x & ( x - 1 ) ) );\n}", "target_program": " def isPowerOfTwo ( x ) :\n    return ( x and ( not ( x & ( x - 1 ) ) ) )"}
{"source": "python", "target": "java", "source_program": " def printNumbers ( numbers ) :\n    numbers = map ( str , numbers )\n    result = [ ]\n    for num in numbers :\n        if ( '1' in num and '2' in num and '3' in num ) :\n            result.append ( num )\n    if not result :\n        result = [ '-1' ]\n    return sorted ( result ) ;", "target_program": " private static String printNumbers ( int [ ] numbers ) {\n  ArrayList < Integer > array = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    if ( findContainsOneTwoThree ( number ) ) array . add ( number ) ;\n  }\n  Collections . sort ( array ) ;\n  StringBuffer strbuf = new StringBuffer ( ) ;\n  Iterator it = array . iterator ( ) ;\n  while ( it . hasNext ( ) ) {\n    int value = ( int ) it . next ( ) ;\n    if ( strbuf . length ( ) > 0 ) strbuf . append ( \", \" ) ;\n    strbuf . append ( Integer . toString ( value ) ) ;\n  }\n  return ( strbuf . length ( ) > 0 ) ? strbuf . toString ( ) : \"-1\" ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printNumbers ( numbers ) :\n    numbers = map ( str , numbers )\n    result = [ ]\n    for num in numbers :\n        if ( '1' in num and '2' in num and '3' in num ) :\n            result.append ( num )\n    if not result :\n        result = [ '-1' ]\n    return sorted ( result ) ;", "target_program": " string printNumbers ( int numbers [ ], int n ) {\n  vector < int > oneTwoThree;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( findContainsOneTwoThree ( numbers [ i ] ) ) oneTwoThree . push_back ( numbers [ i ] );\n  }\n  sort ( oneTwoThree . begin ( ), oneTwoThree . end ( ) );\n  string result = \"\";\n  for ( auto number : oneTwoThree ) {\n    int value = number;\n    if ( result . length ( ) > 0 ) result += \", \";\n    result += to_string ( value );\n  }\n  return ( result . length ( ) > 0 ) ? result : \"-1\";\n}"}
{"source": "java", "target": "python", "source_program": " private static String printNumbers ( int [ ] numbers ) {\n  ArrayList < Integer > array = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    if ( findContainsOneTwoThree ( number ) ) array . add ( number ) ;\n  }\n  Collections . sort ( array ) ;\n  StringBuffer strbuf = new StringBuffer ( ) ;\n  Iterator it = array . iterator ( ) ;\n  while ( it . hasNext ( ) ) {\n    int value = ( int ) it . next ( ) ;\n    if ( strbuf . length ( ) > 0 ) strbuf . append ( \", \" ) ;\n    strbuf . append ( Integer . toString ( value ) ) ;\n  }\n  return ( strbuf . length ( ) > 0 ) ? strbuf . toString ( ) : \"-1\" ;\n}", "target_program": " def printNumbers ( numbers ) :\n    numbers = map ( str , numbers )\n    result = [ ]\n    for num in numbers :\n        if ( '1' in num and '2' in num and '3' in num ) :\n            result.append ( num )\n    if not result :\n        result = [ '-1' ]\n    return sorted ( result ) ;"}
{"source": "java", "target": "cpp", "source_program": " private static String printNumbers ( int [ ] numbers ) {\n  ArrayList < Integer > array = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    if ( findContainsOneTwoThree ( number ) ) array . add ( number ) ;\n  }\n  Collections . sort ( array ) ;\n  StringBuffer strbuf = new StringBuffer ( ) ;\n  Iterator it = array . iterator ( ) ;\n  while ( it . hasNext ( ) ) {\n    int value = ( int ) it . next ( ) ;\n    if ( strbuf . length ( ) > 0 ) strbuf . append ( \", \" ) ;\n    strbuf . append ( Integer . toString ( value ) ) ;\n  }\n  return ( strbuf . length ( ) > 0 ) ? strbuf . toString ( ) : \"-1\" ;\n}", "target_program": " string printNumbers ( int numbers [ ], int n ) {\n  vector < int > oneTwoThree;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( findContainsOneTwoThree ( numbers [ i ] ) ) oneTwoThree . push_back ( numbers [ i ] );\n  }\n  sort ( oneTwoThree . begin ( ), oneTwoThree . end ( ) );\n  string result = \"\";\n  for ( auto number : oneTwoThree ) {\n    int value = number;\n    if ( result . length ( ) > 0 ) result += \", \";\n    result += to_string ( value );\n  }\n  return ( result . length ( ) > 0 ) ? result : \"-1\";\n}"}
{"source": "cpp", "target": "java", "source_program": " string printNumbers ( int numbers [ ], int n ) {\n  vector < int > oneTwoThree;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( findContainsOneTwoThree ( numbers [ i ] ) ) oneTwoThree . push_back ( numbers [ i ] );\n  }\n  sort ( oneTwoThree . begin ( ), oneTwoThree . end ( ) );\n  string result = \"\";\n  for ( auto number : oneTwoThree ) {\n    int value = number;\n    if ( result . length ( ) > 0 ) result += \", \";\n    result += to_string ( value );\n  }\n  return ( result . length ( ) > 0 ) ? result : \"-1\";\n}", "target_program": " private static String printNumbers ( int [ ] numbers ) {\n  ArrayList < Integer > array = new ArrayList < > ( ) ;\n  for ( int number : numbers ) {\n    if ( findContainsOneTwoThree ( number ) ) array . add ( number ) ;\n  }\n  Collections . sort ( array ) ;\n  StringBuffer strbuf = new StringBuffer ( ) ;\n  Iterator it = array . iterator ( ) ;\n  while ( it . hasNext ( ) ) {\n    int value = ( int ) it . next ( ) ;\n    if ( strbuf . length ( ) > 0 ) strbuf . append ( \", \" ) ;\n    strbuf . append ( Integer . toString ( value ) ) ;\n  }\n  return ( strbuf . length ( ) > 0 ) ? strbuf . toString ( ) : \"-1\" ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string printNumbers ( int numbers [ ], int n ) {\n  vector < int > oneTwoThree;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( findContainsOneTwoThree ( numbers [ i ] ) ) oneTwoThree . push_back ( numbers [ i ] );\n  }\n  sort ( oneTwoThree . begin ( ), oneTwoThree . end ( ) );\n  string result = \"\";\n  for ( auto number : oneTwoThree ) {\n    int value = number;\n    if ( result . length ( ) > 0 ) result += \", \";\n    result += to_string ( value );\n  }\n  return ( result . length ( ) > 0 ) ? result : \"-1\";\n}", "target_program": " def printNumbers ( numbers ) :\n    numbers = map ( str , numbers )\n    result = [ ]\n    for num in numbers :\n        if ( '1' in num and '2' in num and '3' in num ) :\n            result.append ( num )\n    if not result :\n        result = [ '-1' ]\n    return sorted ( result ) ;"}
{"source": "python", "target": "java", "source_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum", "target_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum", "target_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}"}
{"source": "java", "target": "python", "source_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}", "target_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum"}
{"source": "java", "target": "cpp", "source_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}", "target_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}", "target_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}", "target_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum"}
{"source": "python", "target": "java", "source_program": " def minRevolutions ( r , x1 , y1 , x2 , y2 ) :\n    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )\n    return math.ceil ( d // ( 2 * r ) )", "target_program": " static double minRevolutions ( double r , int x1 , int y1 , int x2 , int y2 ) {\n  double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ;\n  return Math . ceil ( d / ( 2 * r ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minRevolutions ( r , x1 , y1 , x2 , y2 ) :\n    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )\n    return math.ceil ( d // ( 2 * r ) )", "target_program": " int minRevolutions ( double r, int x1, int y1, int x2, int y2 ) {\n  double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) );\n  return ceil ( d / ( 2 * r ) );\n}"}
{"source": "java", "target": "python", "source_program": " static double minRevolutions ( double r , int x1 , int y1 , int x2 , int y2 ) {\n  double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ;\n  return Math . ceil ( d / ( 2 * r ) ) ;\n}", "target_program": " def minRevolutions ( r , x1 , y1 , x2 , y2 ) :\n    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )\n    return math.ceil ( d // ( 2 * r ) )"}
{"source": "java", "target": "cpp", "source_program": " static double minRevolutions ( double r , int x1 , int y1 , int x2 , int y2 ) {\n  double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ;\n  return Math . ceil ( d / ( 2 * r ) ) ;\n}", "target_program": " int minRevolutions ( double r, int x1, int y1, int x2, int y2 ) {\n  double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) );\n  return ceil ( d / ( 2 * r ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int minRevolutions ( double r, int x1, int y1, int x2, int y2 ) {\n  double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) );\n  return ceil ( d / ( 2 * r ) );\n}", "target_program": " static double minRevolutions ( double r , int x1 , int y1 , int x2 , int y2 ) {\n  double d = Math . sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ) ;\n  return Math . ceil ( d / ( 2 * r ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minRevolutions ( double r, int x1, int y1, int x2, int y2 ) {\n  double d = sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) );\n  return ceil ( d / ( 2 * r ) );\n}", "target_program": " def minRevolutions ( r , x1 , y1 , x2 , y2 ) :\n    d = math.sqrt ( ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) )\n    return math.ceil ( d // ( 2 * r ) )"}
{"source": "python", "target": "java", "source_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( set1 [ i ] == set2 [ j ] ) :\n                return False\n    return True", "target_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  for ( int i = 0 ;\n  i < set1 . length ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < set2 . length ;\n    j ++ ) {\n      if ( set1 [ i ] == set2 [ j ] ) return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( set1 [ i ] == set2 [ j ] ) :\n                return False\n    return True", "target_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  for ( int i = 0;\n  i < m;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  for ( int i = 0 ;\n  i < set1 . length ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < set2 . length ;\n    j ++ ) {\n      if ( set1 [ i ] == set2 [ j ] ) return false ;\n    }\n  }\n  return true ;\n}", "target_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( set1 [ i ] == set2 [ j ] ) :\n                return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  for ( int i = 0 ;\n  i < set1 . length ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < set2 . length ;\n    j ++ ) {\n      if ( set1 [ i ] == set2 [ j ] ) return false ;\n    }\n  }\n  return true ;\n}", "target_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  for ( int i = 0;\n  i < m;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  for ( int i = 0;\n  i < m;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false;\n  return true;\n}", "target_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  for ( int i = 0 ;\n  i < set1 . length ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < set2 . length ;\n    j ++ ) {\n      if ( set1 [ i ] == set2 [ j ] ) return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  for ( int i = 0;\n  i < m;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( set1 [ i ] == set2 [ j ] ) return false;\n  return true;\n}", "target_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    for i in range ( 0 , m ) :\n        for j in range ( 0 , n ) :\n            if ( set1 [ i ] == set2 [ j ] ) :\n                return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def findMinSum ( num ) :\n    sum = 0\n    i = 2\n    while ( i * i <= num ) :\n        while ( num % i == 0 ) :\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum", "target_program": " static int findMinSum ( int num ) {\n  int sum = 0 ;\n  for ( int i = 2 ;\n  i * i <= num ;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i ;\n      num /= i ;\n    }\n  }\n  sum += num ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinSum ( num ) :\n    sum = 0\n    i = 2\n    while ( i * i <= num ) :\n        while ( num % i == 0 ) :\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum", "target_program": " int findMinSum ( int num ) {\n  int sum = 0;\n  for ( int i = 2;\n  i * i <= num;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i;\n      num /= i;\n    }\n  }\n  sum += num;\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMinSum ( int num ) {\n  int sum = 0 ;\n  for ( int i = 2 ;\n  i * i <= num ;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i ;\n      num /= i ;\n    }\n  }\n  sum += num ;\n  return sum ;\n}", "target_program": " def findMinSum ( num ) :\n    sum = 0\n    i = 2\n    while ( i * i <= num ) :\n        while ( num % i == 0 ) :\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int findMinSum ( int num ) {\n  int sum = 0 ;\n  for ( int i = 2 ;\n  i * i <= num ;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i ;\n      num /= i ;\n    }\n  }\n  sum += num ;\n  return sum ;\n}", "target_program": " int findMinSum ( int num ) {\n  int sum = 0;\n  for ( int i = 2;\n  i * i <= num;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i;\n      num /= i;\n    }\n  }\n  sum += num;\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMinSum ( int num ) {\n  int sum = 0;\n  for ( int i = 2;\n  i * i <= num;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i;\n      num /= i;\n    }\n  }\n  sum += num;\n  return sum;\n}", "target_program": " static int findMinSum ( int num ) {\n  int sum = 0 ;\n  for ( int i = 2 ;\n  i * i <= num ;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i ;\n      num /= i ;\n    }\n  }\n  sum += num ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMinSum ( int num ) {\n  int sum = 0;\n  for ( int i = 2;\n  i * i <= num;\n  i ++ ) {\n    while ( num % i == 0 ) {\n      sum += i;\n      num /= i;\n    }\n  }\n  sum += num;\n  return sum;\n}", "target_program": " def findMinSum ( num ) :\n    sum = 0\n    i = 2\n    while ( i * i <= num ) :\n        while ( num % i == 0 ) :\n            sum += i\n            num /= i\n        i += 1\n    sum += num\n    return sum"}
{"source": "python", "target": "java", "source_program": " def mostFrequent ( arr , n ) :\n    arr.sort ( )\n    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            curr_count += 1\n        else :\n            if ( curr_count > max_count ) :\n                max_count = curr_count\n                res = arr [ i - 1 ]\n            curr_count = 1\n    if ( curr_count > max_count ) :\n        max_count = curr_count\n        res = arr [ n - 1 ]\n    return res", "target_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int max_count = 1 , res = arr [ 0 ] ;\n  int curr_count = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count ;\n        res = arr [ i - 1 ] ;\n      }\n      curr_count = 1 ;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count ;\n    res = arr [ n - 1 ] ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def mostFrequent ( arr , n ) :\n    arr.sort ( )\n    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            curr_count += 1\n        else :\n            if ( curr_count > max_count ) :\n                max_count = curr_count\n                res = arr [ i - 1 ]\n            curr_count = 1\n    if ( curr_count > max_count ) :\n        max_count = curr_count\n        res = arr [ n - 1 ]\n    return res", "target_program": " int mostFrequent ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int max_count = 1, res = arr [ 0 ], curr_count = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count;\n        res = arr [ i - 1 ];\n      }\n      curr_count = 1;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count;\n    res = arr [ n - 1 ];\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int max_count = 1 , res = arr [ 0 ] ;\n  int curr_count = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count ;\n        res = arr [ i - 1 ] ;\n      }\n      curr_count = 1 ;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count ;\n    res = arr [ n - 1 ] ;\n  }\n  return res ;\n}", "target_program": " def mostFrequent ( arr , n ) :\n    arr.sort ( )\n    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            curr_count += 1\n        else :\n            if ( curr_count > max_count ) :\n                max_count = curr_count\n                res = arr [ i - 1 ]\n            curr_count = 1\n    if ( curr_count > max_count ) :\n        max_count = curr_count\n        res = arr [ n - 1 ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int max_count = 1 , res = arr [ 0 ] ;\n  int curr_count = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count ;\n        res = arr [ i - 1 ] ;\n      }\n      curr_count = 1 ;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count ;\n    res = arr [ n - 1 ] ;\n  }\n  return res ;\n}", "target_program": " int mostFrequent ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int max_count = 1, res = arr [ 0 ], curr_count = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count;\n        res = arr [ i - 1 ];\n      }\n      curr_count = 1;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count;\n    res = arr [ n - 1 ];\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int mostFrequent ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int max_count = 1, res = arr [ 0 ], curr_count = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count;\n        res = arr [ i - 1 ];\n      }\n      curr_count = 1;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count;\n    res = arr [ n - 1 ];\n  }\n  return res;\n}", "target_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int max_count = 1 , res = arr [ 0 ] ;\n  int curr_count = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++ ;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count ;\n        res = arr [ i - 1 ] ;\n      }\n      curr_count = 1 ;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count ;\n    res = arr [ n - 1 ] ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int mostFrequent ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int max_count = 1, res = arr [ 0 ], curr_count = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == arr [ i - 1 ] ) curr_count ++;\n    else {\n      if ( curr_count > max_count ) {\n        max_count = curr_count;\n        res = arr [ i - 1 ];\n      }\n      curr_count = 1;\n    }\n  }\n  if ( curr_count > max_count ) {\n    max_count = curr_count;\n    res = arr [ n - 1 ];\n  }\n  return res;\n}", "target_program": " def mostFrequent ( arr , n ) :\n    arr.sort ( )\n    max_count = 1 ; res = arr [ 0 ] ; curr_count = 1\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] == arr [ i - 1 ] ) :\n            curr_count += 1\n        else :\n            if ( curr_count > max_count ) :\n                max_count = curr_count\n                res = arr [ i - 1 ]\n            curr_count = 1\n    if ( curr_count > max_count ) :\n        max_count = curr_count\n        res = arr [ n - 1 ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def minXOR ( arr , n ) :\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        val = arr [ i ] ^ arr [ i + 1 ] ;\n        minXor = min ( minXor , val ) ;\n    return minXor", "target_program": " static int minXOR ( int arr [ ] , int n ) {\n  Arrays . parallelSort ( arr ) ;\n  int minXor = Integer . MAX_VALUE ;\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ] ;\n    minXor = Math . min ( minXor , val ) ;\n  }\n  return minXor ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minXOR ( arr , n ) :\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        val = arr [ i ] ^ arr [ i + 1 ] ;\n        minXor = min ( minXor , val ) ;\n    return minXor", "target_program": " int minXOR ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int minXor = INT_MAX;\n  int val = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ];\n    minXor = min ( minXor, val );\n  }\n  return minXor;\n}"}
{"source": "java", "target": "python", "source_program": " static int minXOR ( int arr [ ] , int n ) {\n  Arrays . parallelSort ( arr ) ;\n  int minXor = Integer . MAX_VALUE ;\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ] ;\n    minXor = Math . min ( minXor , val ) ;\n  }\n  return minXor ;\n}", "target_program": " def minXOR ( arr , n ) :\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        val = arr [ i ] ^ arr [ i + 1 ] ;\n        minXor = min ( minXor , val ) ;\n    return minXor"}
{"source": "java", "target": "cpp", "source_program": " static int minXOR ( int arr [ ] , int n ) {\n  Arrays . parallelSort ( arr ) ;\n  int minXor = Integer . MAX_VALUE ;\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ] ;\n    minXor = Math . min ( minXor , val ) ;\n  }\n  return minXor ;\n}", "target_program": " int minXOR ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int minXor = INT_MAX;\n  int val = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ];\n    minXor = min ( minXor, val );\n  }\n  return minXor;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minXOR ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int minXor = INT_MAX;\n  int val = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ];\n    minXor = min ( minXor, val );\n  }\n  return minXor;\n}", "target_program": " static int minXOR ( int arr [ ] , int n ) {\n  Arrays . parallelSort ( arr ) ;\n  int minXor = Integer . MAX_VALUE ;\n  int val = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ] ;\n    minXor = Math . min ( minXor , val ) ;\n  }\n  return minXor ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minXOR ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int minXor = INT_MAX;\n  int val = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    val = arr [ i ] ^ arr [ i + 1 ];\n    minXor = min ( minXor, val );\n  }\n  return minXor;\n}", "target_program": " def minXOR ( arr , n ) :\n    arr.sort ( )\n    minXor = int ( sys.float_info.max )\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        val = arr [ i ] ^ arr [ i + 1 ] ;\n        minXor = min ( minXor , val ) ;\n    return minXor"}
{"source": "python", "target": "java", "source_program": " def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    for i in range ( n ) :\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n    return res - diff", "target_program": " static int minproduct ( int a [ ] , int b [ ] , int n , int k ) {\n  int diff = 0 , res = 0 ;\n  int temp = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ] ;\n    res = res + pro ;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    int d = Math . abs ( pro - temp ) ;\n    if ( d > diff ) diff = d ;\n  }\n  return res - diff ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    for i in range ( n ) :\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n    return res - diff", "target_program": " int minproduct ( int a [ ], int b [ ], int n, int k ) {\n  int diff = 0, res = 0;\n  int temp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ];\n    res = res + pro;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    int d = abs ( pro - temp );\n    if ( d > diff ) diff = d;\n  }\n  return res - diff;\n}"}
{"source": "java", "target": "python", "source_program": " static int minproduct ( int a [ ] , int b [ ] , int n , int k ) {\n  int diff = 0 , res = 0 ;\n  int temp = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ] ;\n    res = res + pro ;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    int d = Math . abs ( pro - temp ) ;\n    if ( d > diff ) diff = d ;\n  }\n  return res - diff ;\n}", "target_program": " def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    for i in range ( n ) :\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n    return res - diff"}
{"source": "java", "target": "cpp", "source_program": " static int minproduct ( int a [ ] , int b [ ] , int n , int k ) {\n  int diff = 0 , res = 0 ;\n  int temp = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ] ;\n    res = res + pro ;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    int d = Math . abs ( pro - temp ) ;\n    if ( d > diff ) diff = d ;\n  }\n  return res - diff ;\n}", "target_program": " int minproduct ( int a [ ], int b [ ], int n, int k ) {\n  int diff = 0, res = 0;\n  int temp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ];\n    res = res + pro;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    int d = abs ( pro - temp );\n    if ( d > diff ) diff = d;\n  }\n  return res - diff;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minproduct ( int a [ ], int b [ ], int n, int k ) {\n  int diff = 0, res = 0;\n  int temp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ];\n    res = res + pro;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    int d = abs ( pro - temp );\n    if ( d > diff ) diff = d;\n  }\n  return res - diff;\n}", "target_program": " static int minproduct ( int a [ ] , int b [ ] , int n , int k ) {\n  int diff = 0 , res = 0 ;\n  int temp = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ] ;\n    res = res + pro ;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ] ;\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ] ;\n    int d = Math . abs ( pro - temp ) ;\n    if ( d > diff ) diff = d ;\n  }\n  return res - diff ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minproduct ( int a [ ], int b [ ], int n, int k ) {\n  int diff = 0, res = 0;\n  int temp;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int pro = a [ i ] * b [ i ];\n    res = res + pro;\n    if ( pro < 0 && b [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro < 0 && a [ i ] < 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] < 0 ) temp = ( a [ i ] + 2 * k ) * b [ i ];\n    else if ( pro > 0 && a [ i ] > 0 ) temp = ( a [ i ] - 2 * k ) * b [ i ];\n    int d = abs ( pro - temp );\n    if ( d > diff ) diff = d;\n  }\n  return res - diff;\n}", "target_program": " def minproduct ( a , b , n , k ) :\n    diff = 0\n    res = 0\n    for i in range ( n ) :\n        pro = a [ i ] * b [ i ]\n        res = res + pro\n        if ( pro < 0 and b [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro < 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] < 0 ) :\n            temp = ( a [ i ] + 2 * k ) * b [ i ]\n        elif ( pro > 0 and a [ i ] > 0 ) :\n            temp = ( a [ i ] - 2 * k ) * b [ i ]\n        d = abs ( pro - temp )\n        if ( d > diff ) :\n            diff = d\n    return res - diff"}
{"source": "python", "target": "java", "source_program": " def russianPeasant ( a , b ) :\n    res = 0\n    while ( b > 0 ) :\n        if ( b & 1 ) :\n            res = res + a\n        a = a << 1\n        b = b >> 1\n    return res", "target_program": " static int russianPeasant ( int a , int b ) {\n  int res = 0 ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) != 0 ) res = res + a ;\n    a = a << 1 ;\n    b = b >> 1 ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def russianPeasant ( a , b ) :\n    res = 0\n    while ( b > 0 ) :\n        if ( b & 1 ) :\n            res = res + a\n        a = a << 1\n        b = b >> 1\n    return res", "target_program": " unsigned int russianPeasant ( unsigned int a, unsigned int b ) {\n  int res = 0;\n  while ( b > 0 ) {\n    if ( b & 1 ) res = res + a;\n    a = a << 1;\n    b = b >> 1;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int russianPeasant ( int a , int b ) {\n  int res = 0 ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) != 0 ) res = res + a ;\n    a = a << 1 ;\n    b = b >> 1 ;\n  }\n  return res ;\n}", "target_program": " def russianPeasant ( a , b ) :\n    res = 0\n    while ( b > 0 ) :\n        if ( b & 1 ) :\n            res = res + a\n        a = a << 1\n        b = b >> 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int russianPeasant ( int a , int b ) {\n  int res = 0 ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) != 0 ) res = res + a ;\n    a = a << 1 ;\n    b = b >> 1 ;\n  }\n  return res ;\n}", "target_program": " unsigned int russianPeasant ( unsigned int a, unsigned int b ) {\n  int res = 0;\n  while ( b > 0 ) {\n    if ( b & 1 ) res = res + a;\n    a = a << 1;\n    b = b >> 1;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int russianPeasant ( unsigned int a, unsigned int b ) {\n  int res = 0;\n  while ( b > 0 ) {\n    if ( b & 1 ) res = res + a;\n    a = a << 1;\n    b = b >> 1;\n  }\n  return res;\n}", "target_program": " static int russianPeasant ( int a , int b ) {\n  int res = 0 ;\n  while ( b > 0 ) {\n    if ( ( b & 1 ) != 0 ) res = res + a ;\n    a = a << 1 ;\n    b = b >> 1 ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int russianPeasant ( unsigned int a, unsigned int b ) {\n  int res = 0;\n  while ( b > 0 ) {\n    if ( b & 1 ) res = res + a;\n    a = a << 1;\n    b = b >> 1;\n  }\n  return res;\n}", "target_program": " def russianPeasant ( a , b ) :\n    res = 0\n    while ( b > 0 ) :\n        if ( b & 1 ) :\n            res = res + a\n        a = a << 1\n        b = b >> 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def findPairs ( arr1 , arr2 , n , m , x ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , m ) :\n            if ( arr1 [ i ] + arr2 [ j ] == x ) :\n                print ( arr1 [ i ] , arr2 [ j ] )", "target_program": " static void findPairs ( int arr1 [ ] , int arr2 [ ] , int n , int m , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) System . out . println ( arr1 [ i ] + \" \" + arr2 [ j ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findPairs ( arr1 , arr2 , n , m , x ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , m ) :\n            if ( arr1 [ i ] + arr2 [ j ] == x ) :\n                print ( arr1 [ i ] , arr2 [ j ] )", "target_program": " void findPairs ( int arr1 [ ], int arr2 [ ], int n, int m, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) cout << arr1 [ i ] << \" \" << arr2 [ j ] << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void findPairs ( int arr1 [ ] , int arr2 [ ] , int n , int m , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) System . out . println ( arr1 [ i ] + \" \" + arr2 [ j ] ) ;\n}", "target_program": " def findPairs ( arr1 , arr2 , n , m , x ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , m ) :\n            if ( arr1 [ i ] + arr2 [ j ] == x ) :\n                print ( arr1 [ i ] , arr2 [ j ] )"}
{"source": "java", "target": "cpp", "source_program": " static void findPairs ( int arr1 [ ] , int arr2 [ ] , int n , int m , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) System . out . println ( arr1 [ i ] + \" \" + arr2 [ j ] ) ;\n}", "target_program": " void findPairs ( int arr1 [ ], int arr2 [ ], int n, int m, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) cout << arr1 [ i ] << \" \" << arr2 [ j ] << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findPairs ( int arr1 [ ], int arr2 [ ], int n, int m, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) cout << arr1 [ i ] << \" \" << arr2 [ j ] << endl;\n}", "target_program": " static void findPairs ( int arr1 [ ] , int arr2 [ ] , int n , int m , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) System . out . println ( arr1 [ i ] + \" \" + arr2 [ j ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findPairs ( int arr1 [ ], int arr2 [ ], int n, int m, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( arr1 [ i ] + arr2 [ j ] == x ) cout << arr1 [ i ] << \" \" << arr2 [ j ] << endl;\n}", "target_program": " def findPairs ( arr1 , arr2 , n , m , x ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , m ) :\n            if ( arr1 [ i ] + arr2 [ j ] == x ) :\n                print ( arr1 [ i ] , arr2 [ j ] )"}
{"source": "python", "target": "java", "source_program": " def nextGreater ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;", "target_program": " static String nextGreater ( String num ) {\n  int l = num . length ( ) ;\n  int i ;\n  for ( i = l - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( num . charAt ( i ) == '0' ) {\n      num = num . substring ( 0 , i ) + '1' + num . substring ( i + 1 ) ;\n      break ;\n    }\n    else {\n      num = num . substring ( 0 , i ) + '0' + num . substring ( i + 1 ) ;\n    }\n  }\n  if ( i < 0 ) {\n    num = \"1\" + num ;\n  }\n  return num ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def nextGreater ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;", "target_program": " string nextGreater ( string num ) {\n  int l = num . size ( );\n  for ( int i = l - 1;\n  i >= 0;\n  i -- ) {\n    if ( num . at ( i ) == '0' ) {\n      num . at ( i ) = '1';\n      break;\n    }\n    else num . at ( i ) = '0';\n  }\n  if ( i < 0 ) num = \"1\" + num;\n  return num;\n}"}
{"source": "java", "target": "python", "source_program": " static String nextGreater ( String num ) {\n  int l = num . length ( ) ;\n  int i ;\n  for ( i = l - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( num . charAt ( i ) == '0' ) {\n      num = num . substring ( 0 , i ) + '1' + num . substring ( i + 1 ) ;\n      break ;\n    }\n    else {\n      num = num . substring ( 0 , i ) + '0' + num . substring ( i + 1 ) ;\n    }\n  }\n  if ( i < 0 ) {\n    num = \"1\" + num ;\n  }\n  return num ;\n}", "target_program": " def nextGreater ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;"}
{"source": "java", "target": "cpp", "source_program": " static String nextGreater ( String num ) {\n  int l = num . length ( ) ;\n  int i ;\n  for ( i = l - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( num . charAt ( i ) == '0' ) {\n      num = num . substring ( 0 , i ) + '1' + num . substring ( i + 1 ) ;\n      break ;\n    }\n    else {\n      num = num . substring ( 0 , i ) + '0' + num . substring ( i + 1 ) ;\n    }\n  }\n  if ( i < 0 ) {\n    num = \"1\" + num ;\n  }\n  return num ;\n}", "target_program": " string nextGreater ( string num ) {\n  int l = num . size ( );\n  for ( int i = l - 1;\n  i >= 0;\n  i -- ) {\n    if ( num . at ( i ) == '0' ) {\n      num . at ( i ) = '1';\n      break;\n    }\n    else num . at ( i ) = '0';\n  }\n  if ( i < 0 ) num = \"1\" + num;\n  return num;\n}"}
{"source": "cpp", "target": "java", "source_program": " string nextGreater ( string num ) {\n  int l = num . size ( );\n  for ( int i = l - 1;\n  i >= 0;\n  i -- ) {\n    if ( num . at ( i ) == '0' ) {\n      num . at ( i ) = '1';\n      break;\n    }\n    else num . at ( i ) = '0';\n  }\n  if ( i < 0 ) num = \"1\" + num;\n  return num;\n}", "target_program": " static String nextGreater ( String num ) {\n  int l = num . length ( ) ;\n  int i ;\n  for ( i = l - 1 ;\n  i >= 0 ;\n  i -- ) {\n    if ( num . charAt ( i ) == '0' ) {\n      num = num . substring ( 0 , i ) + '1' + num . substring ( i + 1 ) ;\n      break ;\n    }\n    else {\n      num = num . substring ( 0 , i ) + '0' + num . substring ( i + 1 ) ;\n    }\n  }\n  if ( i < 0 ) {\n    num = \"1\" + num ;\n  }\n  return num ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string nextGreater ( string num ) {\n  int l = num . size ( );\n  for ( int i = l - 1;\n  i >= 0;\n  i -- ) {\n    if ( num . at ( i ) == '0' ) {\n      num . at ( i ) = '1';\n      break;\n    }\n    else num . at ( i ) = '0';\n  }\n  if ( i < 0 ) num = \"1\" + num;\n  return num;\n}", "target_program": " def nextGreater ( num1 ) :\n    l = len ( num1 ) ;\n    num = list ( num1 ) ;\n    i = l - 1 ;\n    while ( i >= 0 ) :\n        if ( num [ i ] == '0' ) :\n            num [ i ] = '1' ;\n            break ;\n        else :\n            num [ i ] = '0' ;\n        i -= 1 ;\n    num1 = ''.join ( num ) ;\n    if ( i < 0 ) :\n        num1 = '1' + num1 ;\n    return num1 ;"}
{"source": "python", "target": "java", "source_program": " def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    for i in range ( 0 , n - 1 ) :\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        for j in range ( i + 1 , n ) :\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = j - i + 1\n                startindex = i\n    if ( maxsize == - 1 ) :\n        print ( \"No such subarray\" ) ;\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 ) ;\n    return maxsize", "target_program": " int findSubArray ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int maxsize = - 1 , startindex = 0 ;\n  int endindex = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] == 0 ) sum += - 1 ;\n      else sum += 1 ;\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1 ;\n        startindex = i ;\n      }\n    }\n  }\n  endindex = startindex + maxsize - 1 ;\n  if ( maxsize == - 1 ) System . out . println ( \"No such subarray\" ) ;\n  else System . out . println ( startindex + \" to \" + endindex ) ;\n  return maxsize ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    for i in range ( 0 , n - 1 ) :\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        for j in range ( i + 1 , n ) :\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = j - i + 1\n                startindex = i\n    if ( maxsize == - 1 ) :\n        print ( \"No such subarray\" ) ;\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 ) ;\n    return maxsize", "target_program": " int findSubArray ( int arr [ ], int n ) {\n  int sum = 0;\n  int maxsize = - 1, startindex;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 );\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1;\n        startindex = i;\n      }\n    }\n  }\n  if ( maxsize == - 1 ) cout << \"No such subarray\";\n  else cout << startindex << \" to \" << startindex + maxsize - 1;\n  return maxsize;\n}"}
{"source": "java", "target": "python", "source_program": " int findSubArray ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int maxsize = - 1 , startindex = 0 ;\n  int endindex = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] == 0 ) sum += - 1 ;\n      else sum += 1 ;\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1 ;\n        startindex = i ;\n      }\n    }\n  }\n  endindex = startindex + maxsize - 1 ;\n  if ( maxsize == - 1 ) System . out . println ( \"No such subarray\" ) ;\n  else System . out . println ( startindex + \" to \" + endindex ) ;\n  return maxsize ;\n}", "target_program": " def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    for i in range ( 0 , n - 1 ) :\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        for j in range ( i + 1 , n ) :\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = j - i + 1\n                startindex = i\n    if ( maxsize == - 1 ) :\n        print ( \"No such subarray\" ) ;\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 ) ;\n    return maxsize"}
{"source": "java", "target": "cpp", "source_program": " int findSubArray ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int maxsize = - 1 , startindex = 0 ;\n  int endindex = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] == 0 ) sum += - 1 ;\n      else sum += 1 ;\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1 ;\n        startindex = i ;\n      }\n    }\n  }\n  endindex = startindex + maxsize - 1 ;\n  if ( maxsize == - 1 ) System . out . println ( \"No such subarray\" ) ;\n  else System . out . println ( startindex + \" to \" + endindex ) ;\n  return maxsize ;\n}", "target_program": " int findSubArray ( int arr [ ], int n ) {\n  int sum = 0;\n  int maxsize = - 1, startindex;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 );\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1;\n        startindex = i;\n      }\n    }\n  }\n  if ( maxsize == - 1 ) cout << \"No such subarray\";\n  else cout << startindex << \" to \" << startindex + maxsize - 1;\n  return maxsize;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSubArray ( int arr [ ], int n ) {\n  int sum = 0;\n  int maxsize = - 1, startindex;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 );\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1;\n        startindex = i;\n      }\n    }\n  }\n  if ( maxsize == - 1 ) cout << \"No such subarray\";\n  else cout << startindex << \" to \" << startindex + maxsize - 1;\n  return maxsize;\n}", "target_program": " int findSubArray ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int maxsize = - 1 , startindex = 0 ;\n  int endindex = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ j ] == 0 ) sum += - 1 ;\n      else sum += 1 ;\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1 ;\n        startindex = i ;\n      }\n    }\n  }\n  endindex = startindex + maxsize - 1 ;\n  if ( maxsize == - 1 ) System . out . println ( \"No such subarray\" ) ;\n  else System . out . println ( startindex + \" to \" + endindex ) ;\n  return maxsize ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSubArray ( int arr [ ], int n ) {\n  int sum = 0;\n  int maxsize = - 1, startindex;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    sum = ( arr [ i ] == 0 ) ? - 1 : 1;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      ( arr [ j ] == 0 ) ? ( sum += - 1 ) : ( sum += 1 );\n      if ( sum == 0 && maxsize < j - i + 1 ) {\n        maxsize = j - i + 1;\n        startindex = i;\n      }\n    }\n  }\n  if ( maxsize == - 1 ) cout << \"No such subarray\";\n  else cout << startindex << \" to \" << startindex + maxsize - 1;\n  return maxsize;\n}", "target_program": " def findSubArray ( arr , n ) :\n    sum = 0\n    maxsize = - 1\n    for i in range ( 0 , n - 1 ) :\n        sum = - 1 if ( arr [ i ] == 0 ) else 1\n        for j in range ( i + 1 , n ) :\n            sum = sum + ( - 1 ) if ( arr [ j ] == 0 ) else sum + 1\n            if ( sum == 0 and maxsize < j - i + 1 ) :\n                maxsize = j - i + 1\n                startindex = i\n    if ( maxsize == - 1 ) :\n        print ( \"No such subarray\" ) ;\n    else :\n        print ( startindex , \"to\" , startindex + maxsize - 1 ) ;\n    return maxsize"}
{"source": "python", "target": "java", "source_program": " def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    for i in range ( n ) :\n        Hash.add ( arr [ i ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += 1\n    return result", "target_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  HashSet < Integer > Hash = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Hash . add ( arr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      if ( Hash . contains ( product ) ) {\n        result ++ ;\n      }\n    }\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    for i in range ( n ) :\n        Hash.add ( arr [ i ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += 1\n    return result", "target_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  set < int > Hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) Hash . insert ( arr [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      if ( Hash . find ( product ) != Hash . end ( ) ) result ++;\n    }\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  HashSet < Integer > Hash = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Hash . add ( arr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      if ( Hash . contains ( product ) ) {\n        result ++ ;\n      }\n    }\n  }\n  return result ;\n}", "target_program": " def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    for i in range ( n ) :\n        Hash.add ( arr [ i ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += 1\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  HashSet < Integer > Hash = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Hash . add ( arr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      if ( Hash . contains ( product ) ) {\n        result ++ ;\n      }\n    }\n  }\n  return result ;\n}", "target_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  set < int > Hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) Hash . insert ( arr [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      if ( Hash . find ( product ) != Hash . end ( ) ) result ++;\n    }\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  set < int > Hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) Hash . insert ( arr [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      if ( Hash . find ( product ) != Hash . end ( ) ) result ++;\n    }\n  }\n  return result;\n}", "target_program": " static int countPairs ( int arr [ ] , int n ) {\n  int result = 0 ;\n  HashSet < Integer > Hash = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Hash . add ( arr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ] ;\n      if ( Hash . contains ( product ) ) {\n        result ++ ;\n      }\n    }\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairs ( int arr [ ], int n ) {\n  int result = 0;\n  set < int > Hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) Hash . insert ( arr [ i ] );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int product = arr [ i ] * arr [ j ];\n      if ( Hash . find ( product ) != Hash . end ( ) ) result ++;\n    }\n  }\n  return result;\n}", "target_program": " def countPairs ( arr , n ) :\n    result = 0\n    Hash = set ( )\n    for i in range ( n ) :\n        Hash.add ( arr [ i ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            product = arr [ i ] * arr [ j ]\n            if product in ( Hash ) :\n                result += 1\n    return result"}
{"source": "python", "target": "java", "source_program": " def lps ( str ) :\n    n = len ( str )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( n ) :\n        L [ i ] [ i ] = 1\n    for cl in range ( 2 , n + 1 ) :\n        for i in range ( n - cl + 1 ) :\n            j = i + cl - 1\n            if str [ i ] == str [ j ] and cl == 2 :\n                L [ i ] [ j ] = 2\n            elif str [ i ] == str [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    return L [ 0 ] [ n - 1 ]", "target_program": " static int lps ( String seq ) {\n  int n = seq . length ( ) ;\n  int i , j , cl ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ i ] = 1 ;\n  for ( cl = 2 ;\n  cl <= n ;\n  cl ++ ) {\n    for ( i = 0 ;\n    i < n - cl + 1 ;\n    i ++ ) {\n      j = i + cl - 1 ;\n      if ( seq . charAt ( i ) == seq . charAt ( j ) && cl == 2 ) L [ i ] [ j ] = 2 ;\n      else if ( seq . charAt ( i ) == seq . charAt ( j ) ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    }\n  }\n  return L [ 0 ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lps ( str ) :\n    n = len ( str )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( n ) :\n        L [ i ] [ i ] = 1\n    for cl in range ( 2 , n + 1 ) :\n        for i in range ( n - cl + 1 ) :\n            j = i + cl - 1\n            if str [ i ] == str [ j ] and cl == 2 :\n                L [ i ] [ j ] = 2\n            elif str [ i ] == str [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    return L [ 0 ] [ n - 1 ]", "target_program": " int lps ( char * str ) {\n  int n = strlen ( str );\n  int i, j, cl;\n  int L [ n ] [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) L [ i ] [ i ] = 1;\n  for ( cl = 2;\n  cl <= n;\n  cl ++ ) {\n    for ( i = 0;\n    i < n - cl + 1;\n    i ++ ) {\n      j = i + cl - 1;\n      if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ] = 2;\n      else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ], L [ i + 1 ] [ j ] );\n    }\n  }\n  return L [ 0 ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int lps ( String seq ) {\n  int n = seq . length ( ) ;\n  int i , j , cl ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ i ] = 1 ;\n  for ( cl = 2 ;\n  cl <= n ;\n  cl ++ ) {\n    for ( i = 0 ;\n    i < n - cl + 1 ;\n    i ++ ) {\n      j = i + cl - 1 ;\n      if ( seq . charAt ( i ) == seq . charAt ( j ) && cl == 2 ) L [ i ] [ j ] = 2 ;\n      else if ( seq . charAt ( i ) == seq . charAt ( j ) ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    }\n  }\n  return L [ 0 ] [ n - 1 ] ;\n}", "target_program": " def lps ( str ) :\n    n = len ( str )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( n ) :\n        L [ i ] [ i ] = 1\n    for cl in range ( 2 , n + 1 ) :\n        for i in range ( n - cl + 1 ) :\n            j = i + cl - 1\n            if str [ i ] == str [ j ] and cl == 2 :\n                L [ i ] [ j ] = 2\n            elif str [ i ] == str [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    return L [ 0 ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int lps ( String seq ) {\n  int n = seq . length ( ) ;\n  int i , j , cl ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ i ] = 1 ;\n  for ( cl = 2 ;\n  cl <= n ;\n  cl ++ ) {\n    for ( i = 0 ;\n    i < n - cl + 1 ;\n    i ++ ) {\n      j = i + cl - 1 ;\n      if ( seq . charAt ( i ) == seq . charAt ( j ) && cl == 2 ) L [ i ] [ j ] = 2 ;\n      else if ( seq . charAt ( i ) == seq . charAt ( j ) ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    }\n  }\n  return L [ 0 ] [ n - 1 ] ;\n}", "target_program": " int lps ( char * str ) {\n  int n = strlen ( str );\n  int i, j, cl;\n  int L [ n ] [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) L [ i ] [ i ] = 1;\n  for ( cl = 2;\n  cl <= n;\n  cl ++ ) {\n    for ( i = 0;\n    i < n - cl + 1;\n    i ++ ) {\n      j = i + cl - 1;\n      if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ] = 2;\n      else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ], L [ i + 1 ] [ j ] );\n    }\n  }\n  return L [ 0 ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int lps ( char * str ) {\n  int n = strlen ( str );\n  int i, j, cl;\n  int L [ n ] [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) L [ i ] [ i ] = 1;\n  for ( cl = 2;\n  cl <= n;\n  cl ++ ) {\n    for ( i = 0;\n    i < n - cl + 1;\n    i ++ ) {\n      j = i + cl - 1;\n      if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ] = 2;\n      else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ], L [ i + 1 ] [ j ] );\n    }\n  }\n  return L [ 0 ] [ n - 1 ];\n}", "target_program": " static int lps ( String seq ) {\n  int n = seq . length ( ) ;\n  int i , j , cl ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ i ] = 1 ;\n  for ( cl = 2 ;\n  cl <= n ;\n  cl ++ ) {\n    for ( i = 0 ;\n    i < n - cl + 1 ;\n    i ++ ) {\n      j = i + cl - 1 ;\n      if ( seq . charAt ( i ) == seq . charAt ( j ) && cl == 2 ) L [ i ] [ j ] = 2 ;\n      else if ( seq . charAt ( i ) == seq . charAt ( j ) ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2 ;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    }\n  }\n  return L [ 0 ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lps ( char * str ) {\n  int n = strlen ( str );\n  int i, j, cl;\n  int L [ n ] [ n ];\n  for ( i = 0;\n  i < n;\n  i ++ ) L [ i ] [ i ] = 1;\n  for ( cl = 2;\n  cl <= n;\n  cl ++ ) {\n    for ( i = 0;\n    i < n - cl + 1;\n    i ++ ) {\n      j = i + cl - 1;\n      if ( str [ i ] == str [ j ] && cl == 2 ) L [ i ] [ j ] = 2;\n      else if ( str [ i ] == str [ j ] ) L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2;\n      else L [ i ] [ j ] = max ( L [ i ] [ j - 1 ], L [ i + 1 ] [ j ] );\n    }\n  }\n  return L [ 0 ] [ n - 1 ];\n}", "target_program": " def lps ( str ) :\n    n = len ( str )\n    L = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( n ) :\n        L [ i ] [ i ] = 1\n    for cl in range ( 2 , n + 1 ) :\n        for i in range ( n - cl + 1 ) :\n            j = i + cl - 1\n            if str [ i ] == str [ j ] and cl == 2 :\n                L [ i ] [ j ] = 2\n            elif str [ i ] == str [ j ] :\n                L [ i ] [ j ] = L [ i + 1 ] [ j - 1 ] + 2\n            else :\n                L [ i ] [ j ] = max ( L [ i ] [ j - 1 ] , L [ i + 1 ] [ j ] ) ;\n    return L [ 0 ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def getInvCount ( arr , n ) :\n    invcount = 0\n    for i in range ( 1 , n - 1 ) :\n        small = 0\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                small += 1\n        great = 0 ;\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                great += 1\n        invcount += great * small\n    return invcount", "target_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    int small = 0 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;\n    int great = 0 ;\n    for ( int j = i - 1 ;\n    j >= 0 ;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;\n    invcount += great * small ;\n  }\n  return invcount ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getInvCount ( arr , n ) :\n    invcount = 0\n    for i in range ( 1 , n - 1 ) :\n        small = 0\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                small += 1\n        great = 0 ;\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                great += 1\n        invcount += great * small\n    return invcount", "target_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) {\n    int small = 0;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++;\n    int great = 0;\n    for ( int j = i - 1;\n    j >= 0;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++;\n    invcount += great * small;\n  }\n  return invcount;\n}"}
{"source": "java", "target": "python", "source_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    int small = 0 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;\n    int great = 0 ;\n    for ( int j = i - 1 ;\n    j >= 0 ;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;\n    invcount += great * small ;\n  }\n  return invcount ;\n}", "target_program": " def getInvCount ( arr , n ) :\n    invcount = 0\n    for i in range ( 1 , n - 1 ) :\n        small = 0\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                small += 1\n        great = 0 ;\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                great += 1\n        invcount += great * small\n    return invcount"}
{"source": "java", "target": "cpp", "source_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    int small = 0 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;\n    int great = 0 ;\n    for ( int j = i - 1 ;\n    j >= 0 ;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;\n    invcount += great * small ;\n  }\n  return invcount ;\n}", "target_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) {\n    int small = 0;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++;\n    int great = 0;\n    for ( int j = i - 1;\n    j >= 0;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++;\n    invcount += great * small;\n  }\n  return invcount;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) {\n    int small = 0;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++;\n    int great = 0;\n    for ( int j = i - 1;\n    j >= 0;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++;\n    invcount += great * small;\n  }\n  return invcount;\n}", "target_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    int small = 0 ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++ ;\n    int great = 0 ;\n    for ( int j = i - 1 ;\n    j >= 0 ;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++ ;\n    invcount += great * small ;\n  }\n  return invcount ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 1;\n  i < n - 1;\n  i ++ ) {\n    int small = 0;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) if ( arr [ i ] > arr [ j ] ) small ++;\n    int great = 0;\n    for ( int j = i - 1;\n    j >= 0;\n    j -- ) if ( arr [ i ] < arr [ j ] ) great ++;\n    invcount += great * small;\n  }\n  return invcount;\n}", "target_program": " def getInvCount ( arr , n ) :\n    invcount = 0\n    for i in range ( 1 , n - 1 ) :\n        small = 0\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                small += 1\n        great = 0 ;\n        for j in range ( i - 1 , - 1 , - 1 ) :\n            if ( arr [ i ] < arr [ j ] ) :\n                great += 1\n        invcount += great * small\n    return invcount"}
{"source": "python", "target": "java", "source_program": " def isDivisibleBy10 ( bin ) :\n    n = len ( bin )\n    if ( bin [ n - 1 ] == '1' ) :\n        return False\n    sum = 0\n    i = n - 2\n    while i >= 0 :\n        if ( bin [ i ] == '1' ) :\n            posFromRight = n - i - 1\n            if ( posFromRight % 4 == 1 ) :\n                sum = sum + 2\n            elif ( posFromRight % 4 == 2 ) :\n                sum = sum + 4\n            elif ( posFromRight % 4 == 3 ) :\n                sum = sum + 8\n            elif ( posFromRight % 4 == 0 ) :\n                sum = sum + 6\n        i = i - 1\n    if ( sum % 10 == 0 ) :\n        return True\n    return False", "target_program": " static boolean isDivisibleBy10 ( String bin ) {\n  int n = bin . length ( ) ;\n  if ( bin . charAt ( n - 1 ) == '1' ) return false ;\n  int sum = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( bin . charAt ( i ) == '1' ) {\n      int posFromRight = n - i - 1 ;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2 ;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4 ;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8 ;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6 ;\n    }\n  }\n  if ( sum % 10 == 0 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isDivisibleBy10 ( bin ) :\n    n = len ( bin )\n    if ( bin [ n - 1 ] == '1' ) :\n        return False\n    sum = 0\n    i = n - 2\n    while i >= 0 :\n        if ( bin [ i ] == '1' ) :\n            posFromRight = n - i - 1\n            if ( posFromRight % 4 == 1 ) :\n                sum = sum + 2\n            elif ( posFromRight % 4 == 2 ) :\n                sum = sum + 4\n            elif ( posFromRight % 4 == 3 ) :\n                sum = sum + 8\n            elif ( posFromRight % 4 == 0 ) :\n                sum = sum + 6\n        i = i - 1\n    if ( sum % 10 == 0 ) :\n        return True\n    return False", "target_program": " bool isDivisibleBy10 ( string bin ) {\n  int n = bin . size ( );\n  if ( bin [ n - 1 ] == '1' ) return false;\n  int sum = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( bin [ i ] == '1' ) {\n      int posFromRight = n - i - 1;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6;\n    }\n  }\n  if ( sum % 10 == 0 ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isDivisibleBy10 ( String bin ) {\n  int n = bin . length ( ) ;\n  if ( bin . charAt ( n - 1 ) == '1' ) return false ;\n  int sum = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( bin . charAt ( i ) == '1' ) {\n      int posFromRight = n - i - 1 ;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2 ;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4 ;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8 ;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6 ;\n    }\n  }\n  if ( sum % 10 == 0 ) return true ;\n  return false ;\n}", "target_program": " def isDivisibleBy10 ( bin ) :\n    n = len ( bin )\n    if ( bin [ n - 1 ] == '1' ) :\n        return False\n    sum = 0\n    i = n - 2\n    while i >= 0 :\n        if ( bin [ i ] == '1' ) :\n            posFromRight = n - i - 1\n            if ( posFromRight % 4 == 1 ) :\n                sum = sum + 2\n            elif ( posFromRight % 4 == 2 ) :\n                sum = sum + 4\n            elif ( posFromRight % 4 == 3 ) :\n                sum = sum + 8\n            elif ( posFromRight % 4 == 0 ) :\n                sum = sum + 6\n        i = i - 1\n    if ( sum % 10 == 0 ) :\n        return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isDivisibleBy10 ( String bin ) {\n  int n = bin . length ( ) ;\n  if ( bin . charAt ( n - 1 ) == '1' ) return false ;\n  int sum = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( bin . charAt ( i ) == '1' ) {\n      int posFromRight = n - i - 1 ;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2 ;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4 ;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8 ;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6 ;\n    }\n  }\n  if ( sum % 10 == 0 ) return true ;\n  return false ;\n}", "target_program": " bool isDivisibleBy10 ( string bin ) {\n  int n = bin . size ( );\n  if ( bin [ n - 1 ] == '1' ) return false;\n  int sum = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( bin [ i ] == '1' ) {\n      int posFromRight = n - i - 1;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6;\n    }\n  }\n  if ( sum % 10 == 0 ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isDivisibleBy10 ( string bin ) {\n  int n = bin . size ( );\n  if ( bin [ n - 1 ] == '1' ) return false;\n  int sum = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( bin [ i ] == '1' ) {\n      int posFromRight = n - i - 1;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6;\n    }\n  }\n  if ( sum % 10 == 0 ) return true;\n  return false;\n}", "target_program": " static boolean isDivisibleBy10 ( String bin ) {\n  int n = bin . length ( ) ;\n  if ( bin . charAt ( n - 1 ) == '1' ) return false ;\n  int sum = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( bin . charAt ( i ) == '1' ) {\n      int posFromRight = n - i - 1 ;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2 ;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4 ;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8 ;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6 ;\n    }\n  }\n  if ( sum % 10 == 0 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isDivisibleBy10 ( string bin ) {\n  int n = bin . size ( );\n  if ( bin [ n - 1 ] == '1' ) return false;\n  int sum = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( bin [ i ] == '1' ) {\n      int posFromRight = n - i - 1;\n      if ( posFromRight % 4 == 1 ) sum = sum + 2;\n      else if ( posFromRight % 4 == 2 ) sum = sum + 4;\n      else if ( posFromRight % 4 == 3 ) sum = sum + 8;\n      else if ( posFromRight % 4 == 0 ) sum = sum + 6;\n    }\n  }\n  if ( sum % 10 == 0 ) return true;\n  return false;\n}", "target_program": " def isDivisibleBy10 ( bin ) :\n    n = len ( bin )\n    if ( bin [ n - 1 ] == '1' ) :\n        return False\n    sum = 0\n    i = n - 2\n    while i >= 0 :\n        if ( bin [ i ] == '1' ) :\n            posFromRight = n - i - 1\n            if ( posFromRight % 4 == 1 ) :\n                sum = sum + 2\n            elif ( posFromRight % 4 == 2 ) :\n                sum = sum + 4\n            elif ( posFromRight % 4 == 3 ) :\n                sum = sum + 8\n            elif ( posFromRight % 4 == 0 ) :\n                sum = sum + 6\n        i = i - 1\n    if ( sum % 10 == 0 ) :\n        return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    if m < n :\n        return 0\n    arr1.sort ( )\n    arr2.sort ( )\n    while i < n and j < m :\n        if arr1 [ j ] < arr2 [ i ] :\n            j += 1\n        elif arr1 [ j ] == arr2 [ i ] :\n            j += 1\n            i += 1\n        elif arr1 [ j ] > arr2 [ i ] :\n            return 0\n    return False if i < n else True", "target_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  if ( m < n ) return false ;\n  Arrays . sort ( arr1 ) ;\n  Arrays . sort ( arr2 ) ;\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++ ;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++ ;\n      i ++ ;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return false ;\n  }\n  if ( i < n ) return false ;\n  else return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    if m < n :\n        return 0\n    arr1.sort ( )\n    arr2.sort ( )\n    while i < n and j < m :\n        if arr1 [ j ] < arr2 [ i ] :\n            j += 1\n        elif arr1 [ j ] == arr2 [ i ] :\n            j += 1\n            i += 1\n        elif arr1 [ j ] > arr2 [ i ] :\n            return 0\n    return False if i < n else True", "target_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  if ( m < n ) return 0;\n  sort ( arr1, arr1 + m );\n  sort ( arr2, arr2 + n );\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++;\n      i ++;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return 0;\n  }\n  return ( i < n ) ? false : true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  if ( m < n ) return false ;\n  Arrays . sort ( arr1 ) ;\n  Arrays . sort ( arr2 ) ;\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++ ;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++ ;\n      i ++ ;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return false ;\n  }\n  if ( i < n ) return false ;\n  else return true ;\n}", "target_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    if m < n :\n        return 0\n    arr1.sort ( )\n    arr2.sort ( )\n    while i < n and j < m :\n        if arr1 [ j ] < arr2 [ i ] :\n            j += 1\n        elif arr1 [ j ] == arr2 [ i ] :\n            j += 1\n            i += 1\n        elif arr1 [ j ] > arr2 [ i ] :\n            return 0\n    return False if i < n else True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  if ( m < n ) return false ;\n  Arrays . sort ( arr1 ) ;\n  Arrays . sort ( arr2 ) ;\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++ ;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++ ;\n      i ++ ;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return false ;\n  }\n  if ( i < n ) return false ;\n  else return true ;\n}", "target_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  if ( m < n ) return 0;\n  sort ( arr1, arr1 + m );\n  sort ( arr2, arr2 + n );\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++;\n      i ++;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return 0;\n  }\n  return ( i < n ) ? false : true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  if ( m < n ) return 0;\n  sort ( arr1, arr1 + m );\n  sort ( arr2, arr2 + n );\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++;\n      i ++;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return 0;\n  }\n  return ( i < n ) ? false : true;\n}", "target_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 , j = 0 ;\n  if ( m < n ) return false ;\n  Arrays . sort ( arr1 ) ;\n  Arrays . sort ( arr2 ) ;\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++ ;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++ ;\n      i ++ ;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return false ;\n  }\n  if ( i < n ) return false ;\n  else return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0, j = 0;\n  if ( m < n ) return 0;\n  sort ( arr1, arr1 + m );\n  sort ( arr2, arr2 + n );\n  while ( i < n && j < m ) {\n    if ( arr1 [ j ] < arr2 [ i ] ) j ++;\n    else if ( arr1 [ j ] == arr2 [ i ] ) {\n      j ++;\n      i ++;\n    }\n    else if ( arr1 [ j ] > arr2 [ i ] ) return 0;\n  }\n  return ( i < n ) ? false : true;\n}", "target_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    if m < n :\n        return 0\n    arr1.sort ( )\n    arr2.sort ( )\n    while i < n and j < m :\n        if arr1 [ j ] < arr2 [ i ] :\n            j += 1\n        elif arr1 [ j ] == arr2 [ i ] :\n            j += 1\n            i += 1\n        elif arr1 [ j ] > arr2 [ i ] :\n            return 0\n    return False if i < n else True"}
{"source": "python", "target": "java", "source_program": " def kthgroupsum ( k ) :\n    return k * k * k", "target_program": " public static int kthgroupsum ( int k ) {\n  return k * k * k ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def kthgroupsum ( k ) :\n    return k * k * k", "target_program": " int kthgroupsum ( int k ) {\n  return k * k * k;\n}"}
{"source": "java", "target": "python", "source_program": " public static int kthgroupsum ( int k ) {\n  return k * k * k ;\n}", "target_program": " def kthgroupsum ( k ) :\n    return k * k * k"}
{"source": "java", "target": "cpp", "source_program": " public static int kthgroupsum ( int k ) {\n  return k * k * k ;\n}", "target_program": " int kthgroupsum ( int k ) {\n  return k * k * k;\n}"}
{"source": "cpp", "target": "java", "source_program": " int kthgroupsum ( int k ) {\n  return k * k * k;\n}", "target_program": " public static int kthgroupsum ( int k ) {\n  return k * k * k ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int kthgroupsum ( int k ) {\n  return k * k * k;\n}", "target_program": " def kthgroupsum ( k ) :\n    return k * k * k"}
{"source": "python", "target": "java", "source_program": " def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    for i in range ( 1 , arr_size ) :\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n    second = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n    third = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n    print ( \"The Third Largest\" , \"element is\" , third )", "target_program": " static void thirdLargest ( int arr [ ] , int arr_size ) {\n  if ( arr_size < 3 ) {\n    System . out . printf ( \" Invalid Input \" ) ;\n    return ;\n  }\n  int first = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;\n  int second = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ] ;\n  int third = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ] ;\n  System . out . printf ( \"The third Largest \" + \"element is %d\\n\" , third ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    for i in range ( 1 , arr_size ) :\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n    second = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n    third = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n    print ( \"The Third Largest\" , \"element is\" , third )", "target_program": " void thirdLargest ( int arr [ ], int arr_size ) {\n  if ( arr_size < 3 ) {\n    printf ( \" Invalid Input \" );\n    return;\n  }\n  int first = arr [ 0 ];\n  for ( int i = 1;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ];\n  int second = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ];\n  int third = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ];\n  printf ( \"The third Largest element is %d\\n\", third );\n}"}
{"source": "java", "target": "python", "source_program": " static void thirdLargest ( int arr [ ] , int arr_size ) {\n  if ( arr_size < 3 ) {\n    System . out . printf ( \" Invalid Input \" ) ;\n    return ;\n  }\n  int first = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;\n  int second = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ] ;\n  int third = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ] ;\n  System . out . printf ( \"The third Largest \" + \"element is %d\\n\" , third ) ;\n}", "target_program": " def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    for i in range ( 1 , arr_size ) :\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n    second = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n    third = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n    print ( \"The Third Largest\" , \"element is\" , third )"}
{"source": "java", "target": "cpp", "source_program": " static void thirdLargest ( int arr [ ] , int arr_size ) {\n  if ( arr_size < 3 ) {\n    System . out . printf ( \" Invalid Input \" ) ;\n    return ;\n  }\n  int first = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;\n  int second = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ] ;\n  int third = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ] ;\n  System . out . printf ( \"The third Largest \" + \"element is %d\\n\" , third ) ;\n}", "target_program": " void thirdLargest ( int arr [ ], int arr_size ) {\n  if ( arr_size < 3 ) {\n    printf ( \" Invalid Input \" );\n    return;\n  }\n  int first = arr [ 0 ];\n  for ( int i = 1;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ];\n  int second = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ];\n  int third = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ];\n  printf ( \"The third Largest element is %d\\n\", third );\n}"}
{"source": "cpp", "target": "java", "source_program": " void thirdLargest ( int arr [ ], int arr_size ) {\n  if ( arr_size < 3 ) {\n    printf ( \" Invalid Input \" );\n    return;\n  }\n  int first = arr [ 0 ];\n  for ( int i = 1;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ];\n  int second = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ];\n  int third = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ];\n  printf ( \"The third Largest element is %d\\n\", third );\n}", "target_program": " static void thirdLargest ( int arr [ ] , int arr_size ) {\n  if ( arr_size < 3 ) {\n    System . out . printf ( \" Invalid Input \" ) ;\n    return ;\n  }\n  int first = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ] ;\n  int second = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ] ;\n  int third = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < arr_size ;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ] ;\n  System . out . printf ( \"The third Largest \" + \"element is %d\\n\" , third ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void thirdLargest ( int arr [ ], int arr_size ) {\n  if ( arr_size < 3 ) {\n    printf ( \" Invalid Input \" );\n    return;\n  }\n  int first = arr [ 0 ];\n  for ( int i = 1;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > first ) first = arr [ i ];\n  int second = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > second && arr [ i ] < first ) second = arr [ i ];\n  int third = INT_MIN;\n  for ( int i = 0;\n  i < arr_size;\n  i ++ ) if ( arr [ i ] > third && arr [ i ] < second ) third = arr [ i ];\n  printf ( \"The third Largest element is %d\\n\", third );\n}", "target_program": " def thirdLargest ( arr , arr_size ) :\n    if ( arr_size < 3 ) :\n        print ( \" Invalid Input \" )\n        return\n    first = arr [ 0 ]\n    for i in range ( 1 , arr_size ) :\n        if ( arr [ i ] > first ) :\n            first = arr [ i ]\n    second = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > second and arr [ i ] < first ) :\n            second = arr [ i ]\n    third = - sys.maxsize\n    for i in range ( 0 , arr_size ) :\n        if ( arr [ i ] > third and arr [ i ] < second ) :\n            third = arr [ i ]\n    print ( \"The Third Largest\" , \"element is\" , third )"}
{"source": "python", "target": "java", "source_program": " def sumNodes ( l ) :\n    leafNodeCount = math.pow ( 2 , l - 1 ) ;\n    sumLastLevel = 0 ;\n    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ) ;\n    sum = sumLastLevel * l ;\n    return int ( sum ) ;", "target_program": " static double sumNodes ( int l ) {\n  double leafNodeCount = Math . pow ( 2 , l - 1 ) ;\n  double sumLastLevel = 0 ;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ;\n  double sum = sumLastLevel * l ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumNodes ( l ) :\n    leafNodeCount = math.pow ( 2 , l - 1 ) ;\n    sumLastLevel = 0 ;\n    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ) ;\n    sum = sumLastLevel * l ;\n    return int ( sum ) ;", "target_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  int sumLastLevel = 0;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2;\n  int sum = sumLastLevel * l;\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static double sumNodes ( int l ) {\n  double leafNodeCount = Math . pow ( 2 , l - 1 ) ;\n  double sumLastLevel = 0 ;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ;\n  double sum = sumLastLevel * l ;\n  return sum ;\n}", "target_program": " def sumNodes ( l ) :\n    leafNodeCount = math.pow ( 2 , l - 1 ) ;\n    sumLastLevel = 0 ;\n    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ) ;\n    sum = sumLastLevel * l ;\n    return int ( sum ) ;"}
{"source": "java", "target": "cpp", "source_program": " static double sumNodes ( int l ) {\n  double leafNodeCount = Math . pow ( 2 , l - 1 ) ;\n  double sumLastLevel = 0 ;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ;\n  double sum = sumLastLevel * l ;\n  return sum ;\n}", "target_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  int sumLastLevel = 0;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2;\n  int sum = sumLastLevel * l;\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  int sumLastLevel = 0;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2;\n  int sum = sumLastLevel * l;\n  return sum;\n}", "target_program": " static double sumNodes ( int l ) {\n  double leafNodeCount = Math . pow ( 2 , l - 1 ) ;\n  double sumLastLevel = 0 ;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ;\n  double sum = sumLastLevel * l ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  int sumLastLevel = 0;\n  sumLastLevel = ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2;\n  int sum = sumLastLevel * l;\n  return sum;\n}", "target_program": " def sumNodes ( l ) :\n    leafNodeCount = math.pow ( 2 , l - 1 ) ;\n    sumLastLevel = 0 ;\n    sumLastLevel = ( ( leafNodeCount * ( leafNodeCount + 1 ) ) / 2 ) ;\n    sum = sumLastLevel * l ;\n    return int ( sum ) ;"}
{"source": "python", "target": "java", "source_program": " def middleOfThree ( a , b , c ) :\n    x = a - b\n    y = b - c\n    z = a - c\n    if x * y > 0 :\n        return b\n    elif ( x * z > 0 ) :\n        return\n    else :\n        return a", "target_program": " public static int middleOfThree ( int a , int b , int c ) {\n  int x = a - b ;\n  int y = b - c ;\n  int z = a - c ;\n  if ( x * y > 0 ) return b ;\n  else if ( x * z > 0 ) return c ;\n  else return a ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def middleOfThree ( a , b , c ) :\n    x = a - b\n    y = b - c\n    z = a - c\n    if x * y > 0 :\n        return b\n    elif ( x * z > 0 ) :\n        return\n    else :\n        return a", "target_program": " int middleOfThree ( int a, int b, int c ) {\n  int x = a - b;\n  int y = b - c;\n  int z = a - c;\n  if ( x * y > 0 ) return b;\n  else if ( x * z > 0 ) return c;\n  else return a;\n}"}
{"source": "java", "target": "python", "source_program": " public static int middleOfThree ( int a , int b , int c ) {\n  int x = a - b ;\n  int y = b - c ;\n  int z = a - c ;\n  if ( x * y > 0 ) return b ;\n  else if ( x * z > 0 ) return c ;\n  else return a ;\n}", "target_program": " def middleOfThree ( a , b , c ) :\n    x = a - b\n    y = b - c\n    z = a - c\n    if x * y > 0 :\n        return b\n    elif ( x * z > 0 ) :\n        return\n    else :\n        return a"}
{"source": "java", "target": "cpp", "source_program": " public static int middleOfThree ( int a , int b , int c ) {\n  int x = a - b ;\n  int y = b - c ;\n  int z = a - c ;\n  if ( x * y > 0 ) return b ;\n  else if ( x * z > 0 ) return c ;\n  else return a ;\n}", "target_program": " int middleOfThree ( int a, int b, int c ) {\n  int x = a - b;\n  int y = b - c;\n  int z = a - c;\n  if ( x * y > 0 ) return b;\n  else if ( x * z > 0 ) return c;\n  else return a;\n}"}
{"source": "cpp", "target": "java", "source_program": " int middleOfThree ( int a, int b, int c ) {\n  int x = a - b;\n  int y = b - c;\n  int z = a - c;\n  if ( x * y > 0 ) return b;\n  else if ( x * z > 0 ) return c;\n  else return a;\n}", "target_program": " public static int middleOfThree ( int a , int b , int c ) {\n  int x = a - b ;\n  int y = b - c ;\n  int z = a - c ;\n  if ( x * y > 0 ) return b ;\n  else if ( x * z > 0 ) return c ;\n  else return a ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int middleOfThree ( int a, int b, int c ) {\n  int x = a - b;\n  int y = b - c;\n  int z = a - c;\n  if ( x * y > 0 ) return b;\n  else if ( x * z > 0 ) return c;\n  else return a;\n}", "target_program": " def middleOfThree ( a , b , c ) :\n    x = a - b\n    y = b - c\n    z = a - c\n    if x * y > 0 :\n        return b\n    elif ( x * z > 0 ) :\n        return\n    else :\n        return a"}
{"source": "python", "target": "java", "source_program": " def maxTripletSum ( arr , n ) :\n    maxA = - 100000000\n    maxB = - 100000000\n    maxC = - 100000000\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > maxA ) :\n            maxC = maxB\n            maxB = maxA\n            maxA = arr [ i ]\n        elif ( arr [ i ] > maxB ) :\n            maxC = maxB\n            maxB = arr [ i ]\n        elif ( arr [ i ] > maxC ) :\n            maxC = arr [ i ]\n    return ( maxA + maxB + maxC )", "target_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int maxA = - 100000000 , maxB = - 100000000 ;\n  int maxC = - 100000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB ;\n      maxB = maxA ;\n      maxA = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB ;\n      maxB = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ] ;\n  }\n  return ( maxA + maxB + maxC ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxTripletSum ( arr , n ) :\n    maxA = - 100000000\n    maxB = - 100000000\n    maxC = - 100000000\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > maxA ) :\n            maxC = maxB\n            maxB = maxA\n            maxA = arr [ i ]\n        elif ( arr [ i ] > maxB ) :\n            maxC = maxB\n            maxB = arr [ i ]\n        elif ( arr [ i ] > maxC ) :\n            maxC = arr [ i ]\n    return ( maxA + maxB + maxC )", "target_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB;\n      maxB = maxA;\n      maxA = arr [ i ];\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB;\n      maxB = arr [ i ];\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ];\n  }\n  return ( maxA + maxB + maxC );\n}"}
{"source": "java", "target": "python", "source_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int maxA = - 100000000 , maxB = - 100000000 ;\n  int maxC = - 100000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB ;\n      maxB = maxA ;\n      maxA = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB ;\n      maxB = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ] ;\n  }\n  return ( maxA + maxB + maxC ) ;\n}", "target_program": " def maxTripletSum ( arr , n ) :\n    maxA = - 100000000\n    maxB = - 100000000\n    maxC = - 100000000\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > maxA ) :\n            maxC = maxB\n            maxB = maxA\n            maxA = arr [ i ]\n        elif ( arr [ i ] > maxB ) :\n            maxC = maxB\n            maxB = arr [ i ]\n        elif ( arr [ i ] > maxC ) :\n            maxC = arr [ i ]\n    return ( maxA + maxB + maxC )"}
{"source": "java", "target": "cpp", "source_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int maxA = - 100000000 , maxB = - 100000000 ;\n  int maxC = - 100000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB ;\n      maxB = maxA ;\n      maxA = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB ;\n      maxB = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ] ;\n  }\n  return ( maxA + maxB + maxC ) ;\n}", "target_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB;\n      maxB = maxA;\n      maxA = arr [ i ];\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB;\n      maxB = arr [ i ];\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ];\n  }\n  return ( maxA + maxB + maxC );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB;\n      maxB = maxA;\n      maxA = arr [ i ];\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB;\n      maxB = arr [ i ];\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ];\n  }\n  return ( maxA + maxB + maxC );\n}", "target_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int maxA = - 100000000 , maxB = - 100000000 ;\n  int maxC = - 100000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB ;\n      maxB = maxA ;\n      maxA = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB ;\n      maxB = arr [ i ] ;\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ] ;\n  }\n  return ( maxA + maxB + maxC ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > maxA ) {\n      maxC = maxB;\n      maxB = maxA;\n      maxA = arr [ i ];\n    }\n    else if ( arr [ i ] > maxB ) {\n      maxC = maxB;\n      maxB = arr [ i ];\n    }\n    else if ( arr [ i ] > maxC ) maxC = arr [ i ];\n  }\n  return ( maxA + maxB + maxC );\n}", "target_program": " def maxTripletSum ( arr , n ) :\n    maxA = - 100000000\n    maxB = - 100000000\n    maxC = - 100000000\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] > maxA ) :\n            maxC = maxB\n            maxB = maxA\n            maxA = arr [ i ]\n        elif ( arr [ i ] > maxB ) :\n            maxC = maxB\n            maxB = arr [ i ]\n        elif ( arr [ i ] > maxC ) :\n            maxC = arr [ i ]\n    return ( maxA + maxB + maxC )"}
{"source": "python", "target": "java", "source_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    for i in range ( m ) :\n        us.add ( arr1 [ i ] )\n    for j in range ( n ) :\n        if x - arr2 [ j ] in us :\n            count += 1\n    return count", "target_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  HashSet < Integer > us = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) us . add ( arr1 [ i ] ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( us . contains ( x - arr2 [ j ] ) ) count ++ ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    for i in range ( m ) :\n        us.add ( arr1 [ i ] )\n    for j in range ( n ) :\n        if x - arr2 [ j ] in us :\n            count += 1\n    return count", "target_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  unordered_set < int > us;\n  for ( int i = 0;\n  i < m;\n  i ++ ) us . insert ( arr1 [ i ] );\n  for ( int j = 0;\n  j < n;\n  j ++ ) if ( us . find ( x - arr2 [ j ] ) != us . end ( ) ) count ++;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  HashSet < Integer > us = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) us . add ( arr1 [ i ] ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( us . contains ( x - arr2 [ j ] ) ) count ++ ;\n  return count ;\n}", "target_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    for i in range ( m ) :\n        us.add ( arr1 [ i ] )\n    for j in range ( n ) :\n        if x - arr2 [ j ] in us :\n            count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  HashSet < Integer > us = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) us . add ( arr1 [ i ] ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( us . contains ( x - arr2 [ j ] ) ) count ++ ;\n  return count ;\n}", "target_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  unordered_set < int > us;\n  for ( int i = 0;\n  i < m;\n  i ++ ) us . insert ( arr1 [ i ] );\n  for ( int j = 0;\n  j < n;\n  j ++ ) if ( us . find ( x - arr2 [ j ] ) != us . end ( ) ) count ++;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  unordered_set < int > us;\n  for ( int i = 0;\n  i < m;\n  i ++ ) us . insert ( arr1 [ i ] );\n  for ( int j = 0;\n  j < n;\n  j ++ ) if ( us . find ( x - arr2 [ j ] ) != us . end ( ) ) count ++;\n  return count;\n}", "target_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  HashSet < Integer > us = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < m ;\n  i ++ ) us . add ( arr1 [ i ] ) ;\n  for ( int j = 0 ;\n  j < n ;\n  j ++ ) if ( us . contains ( x - arr2 [ j ] ) ) count ++ ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  unordered_set < int > us;\n  for ( int i = 0;\n  i < m;\n  i ++ ) us . insert ( arr1 [ i ] );\n  for ( int j = 0;\n  j < n;\n  j ++ ) if ( us . find ( x - arr2 [ j ] ) != us . end ( ) ) count ++;\n  return count;\n}", "target_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count = 0\n    us = set ( )\n    for i in range ( m ) :\n        us.add ( arr1 [ i ] )\n    for j in range ( n ) :\n        if x - arr2 [ j ] in us :\n            count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def getMinStepToReachEnd ( arr , N ) :\n    visit = [ False for i in range ( N ) ]\n    distance = [ 0 for i in range ( N ) ]\n    digit = [ [ 0 for i in range ( N ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , N ) :\n        digit [ arr [ i ] ].append ( i )\n    distance [ 0 ] = 0\n    visit [ 0 ] = True\n    q = [ ]\n    q.append ( 0 )\n    while ( len ( q ) > 0 ) :\n        idx = q [ 0 ]\n        q.remove ( q [ 0 ] )\n        if ( idx == N - 1 ) :\n            break\n        d = arr [ idx ]\n        for i in range ( len ( digit [ d ] ) ) :\n            nextidx = digit [ d ] [ i ]\n            if ( visit [ nextidx ] == False ) :\n                visit [ nextidx ] = True\n                q.append ( nextidx )\n                distance [ nextidx ] = distance [ idx ] + 1\n        if ( idx - 1 >= 0 and visit [ idx - 1 ] == False ) :\n            visit [ idx - 1 ] = True\n            q.append ( idx - 1 )\n            distance [ idx - 1 ] = distance [ idx ] + 1\n        if ( idx + 1 < N and visit [ idx + 1 ] == False ) :\n            visit [ idx + 1 ] = True\n            q.append ( idx + 1 )\n            distance [ idx + 1 ] = distance [ idx ] + 1\n    return distance [ N - 1 ]", "target_program": " static int getMinStepToReachEnd ( int arr [ ] , int N ) {\n  boolean [ ] visit = new boolean [ N ] ;\n  int [ ] distance = new int [ N ] ;\n  Vector < Integer > [ ] digit = new Vector [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) digit [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) visit [ i ] = false ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) digit [ arr [ i ] ] . add ( i ) ;\n  distance [ 0 ] = 0 ;\n  visit [ 0 ] = true ;\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 0 ) ;\n  while ( ! q . isEmpty ( ) ) {\n    int idx = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( idx == N - 1 ) break ;\n    int d = arr [ idx ] ;\n    for ( int i = 0 ;\n    i < digit [ d ] . size ( ) ;\n    i ++ ) {\n      int nextidx = digit [ d ] . get ( i ) ;\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true ;\n        q . add ( nextidx ) ;\n        distance [ nextidx ] = distance [ idx ] + 1 ;\n      }\n    }\n    digit [ d ] . clear ( ) ;\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true ;\n      q . add ( idx - 1 ) ;\n      distance [ idx - 1 ] = distance [ idx ] + 1 ;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true ;\n      q . add ( idx + 1 ) ;\n      distance [ idx + 1 ] = distance [ idx ] + 1 ;\n    }\n  }\n  return distance [ N - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getMinStepToReachEnd ( arr , N ) :\n    visit = [ False for i in range ( N ) ]\n    distance = [ 0 for i in range ( N ) ]\n    digit = [ [ 0 for i in range ( N ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , N ) :\n        digit [ arr [ i ] ].append ( i )\n    distance [ 0 ] = 0\n    visit [ 0 ] = True\n    q = [ ]\n    q.append ( 0 )\n    while ( len ( q ) > 0 ) :\n        idx = q [ 0 ]\n        q.remove ( q [ 0 ] )\n        if ( idx == N - 1 ) :\n            break\n        d = arr [ idx ]\n        for i in range ( len ( digit [ d ] ) ) :\n            nextidx = digit [ d ] [ i ]\n            if ( visit [ nextidx ] == False ) :\n                visit [ nextidx ] = True\n                q.append ( nextidx )\n                distance [ nextidx ] = distance [ idx ] + 1\n        if ( idx - 1 >= 0 and visit [ idx - 1 ] == False ) :\n            visit [ idx - 1 ] = True\n            q.append ( idx - 1 )\n            distance [ idx - 1 ] = distance [ idx ] + 1\n        if ( idx + 1 < N and visit [ idx + 1 ] == False ) :\n            visit [ idx + 1 ] = True\n            q.append ( idx + 1 )\n            distance [ idx + 1 ] = distance [ idx ] + 1\n    return distance [ N - 1 ]", "target_program": " int getMinStepToReachEnd ( int arr [ ], int N ) {\n  bool visit [ N ];\n  int distance [ N ];\n  vector < int > digit [ 10 ];\n  memset ( visit, false, sizeof ( visit ) );\n  for ( int i = 1;\n  i < N;\n  i ++ ) digit [ arr [ i ] ] . push_back ( i );\n  distance [ 0 ] = 0;\n  visit [ 0 ] = true;\n  queue < int > q;\n  q . push ( 0 );\n  while ( ! q . empty ( ) ) {\n    int idx = q . front ( );\n    q . pop ( );\n    if ( idx == N - 1 ) break;\n    int d = arr [ idx ];\n    for ( int i = 0;\n    i < digit [ d ] . size ( );\n    i ++ ) {\n      int nextidx = digit [ d ] [ i ];\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true;\n        q . push ( nextidx );\n        distance [ nextidx ] = distance [ idx ] + 1;\n      }\n    }\n    digit [ d ] . clear ( );\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true;\n      q . push ( idx - 1 );\n      distance [ idx - 1 ] = distance [ idx ] + 1;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true;\n      q . push ( idx + 1 );\n      distance [ idx + 1 ] = distance [ idx ] + 1;\n    }\n  }\n  return distance [ N - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int getMinStepToReachEnd ( int arr [ ] , int N ) {\n  boolean [ ] visit = new boolean [ N ] ;\n  int [ ] distance = new int [ N ] ;\n  Vector < Integer > [ ] digit = new Vector [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) digit [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) visit [ i ] = false ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) digit [ arr [ i ] ] . add ( i ) ;\n  distance [ 0 ] = 0 ;\n  visit [ 0 ] = true ;\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 0 ) ;\n  while ( ! q . isEmpty ( ) ) {\n    int idx = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( idx == N - 1 ) break ;\n    int d = arr [ idx ] ;\n    for ( int i = 0 ;\n    i < digit [ d ] . size ( ) ;\n    i ++ ) {\n      int nextidx = digit [ d ] . get ( i ) ;\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true ;\n        q . add ( nextidx ) ;\n        distance [ nextidx ] = distance [ idx ] + 1 ;\n      }\n    }\n    digit [ d ] . clear ( ) ;\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true ;\n      q . add ( idx - 1 ) ;\n      distance [ idx - 1 ] = distance [ idx ] + 1 ;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true ;\n      q . add ( idx + 1 ) ;\n      distance [ idx + 1 ] = distance [ idx ] + 1 ;\n    }\n  }\n  return distance [ N - 1 ] ;\n}", "target_program": " def getMinStepToReachEnd ( arr , N ) :\n    visit = [ False for i in range ( N ) ]\n    distance = [ 0 for i in range ( N ) ]\n    digit = [ [ 0 for i in range ( N ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , N ) :\n        digit [ arr [ i ] ].append ( i )\n    distance [ 0 ] = 0\n    visit [ 0 ] = True\n    q = [ ]\n    q.append ( 0 )\n    while ( len ( q ) > 0 ) :\n        idx = q [ 0 ]\n        q.remove ( q [ 0 ] )\n        if ( idx == N - 1 ) :\n            break\n        d = arr [ idx ]\n        for i in range ( len ( digit [ d ] ) ) :\n            nextidx = digit [ d ] [ i ]\n            if ( visit [ nextidx ] == False ) :\n                visit [ nextidx ] = True\n                q.append ( nextidx )\n                distance [ nextidx ] = distance [ idx ] + 1\n        if ( idx - 1 >= 0 and visit [ idx - 1 ] == False ) :\n            visit [ idx - 1 ] = True\n            q.append ( idx - 1 )\n            distance [ idx - 1 ] = distance [ idx ] + 1\n        if ( idx + 1 < N and visit [ idx + 1 ] == False ) :\n            visit [ idx + 1 ] = True\n            q.append ( idx + 1 )\n            distance [ idx + 1 ] = distance [ idx ] + 1\n    return distance [ N - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int getMinStepToReachEnd ( int arr [ ] , int N ) {\n  boolean [ ] visit = new boolean [ N ] ;\n  int [ ] distance = new int [ N ] ;\n  Vector < Integer > [ ] digit = new Vector [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) digit [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) visit [ i ] = false ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) digit [ arr [ i ] ] . add ( i ) ;\n  distance [ 0 ] = 0 ;\n  visit [ 0 ] = true ;\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 0 ) ;\n  while ( ! q . isEmpty ( ) ) {\n    int idx = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( idx == N - 1 ) break ;\n    int d = arr [ idx ] ;\n    for ( int i = 0 ;\n    i < digit [ d ] . size ( ) ;\n    i ++ ) {\n      int nextidx = digit [ d ] . get ( i ) ;\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true ;\n        q . add ( nextidx ) ;\n        distance [ nextidx ] = distance [ idx ] + 1 ;\n      }\n    }\n    digit [ d ] . clear ( ) ;\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true ;\n      q . add ( idx - 1 ) ;\n      distance [ idx - 1 ] = distance [ idx ] + 1 ;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true ;\n      q . add ( idx + 1 ) ;\n      distance [ idx + 1 ] = distance [ idx ] + 1 ;\n    }\n  }\n  return distance [ N - 1 ] ;\n}", "target_program": " int getMinStepToReachEnd ( int arr [ ], int N ) {\n  bool visit [ N ];\n  int distance [ N ];\n  vector < int > digit [ 10 ];\n  memset ( visit, false, sizeof ( visit ) );\n  for ( int i = 1;\n  i < N;\n  i ++ ) digit [ arr [ i ] ] . push_back ( i );\n  distance [ 0 ] = 0;\n  visit [ 0 ] = true;\n  queue < int > q;\n  q . push ( 0 );\n  while ( ! q . empty ( ) ) {\n    int idx = q . front ( );\n    q . pop ( );\n    if ( idx == N - 1 ) break;\n    int d = arr [ idx ];\n    for ( int i = 0;\n    i < digit [ d ] . size ( );\n    i ++ ) {\n      int nextidx = digit [ d ] [ i ];\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true;\n        q . push ( nextidx );\n        distance [ nextidx ] = distance [ idx ] + 1;\n      }\n    }\n    digit [ d ] . clear ( );\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true;\n      q . push ( idx - 1 );\n      distance [ idx - 1 ] = distance [ idx ] + 1;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true;\n      q . push ( idx + 1 );\n      distance [ idx + 1 ] = distance [ idx ] + 1;\n    }\n  }\n  return distance [ N - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int getMinStepToReachEnd ( int arr [ ], int N ) {\n  bool visit [ N ];\n  int distance [ N ];\n  vector < int > digit [ 10 ];\n  memset ( visit, false, sizeof ( visit ) );\n  for ( int i = 1;\n  i < N;\n  i ++ ) digit [ arr [ i ] ] . push_back ( i );\n  distance [ 0 ] = 0;\n  visit [ 0 ] = true;\n  queue < int > q;\n  q . push ( 0 );\n  while ( ! q . empty ( ) ) {\n    int idx = q . front ( );\n    q . pop ( );\n    if ( idx == N - 1 ) break;\n    int d = arr [ idx ];\n    for ( int i = 0;\n    i < digit [ d ] . size ( );\n    i ++ ) {\n      int nextidx = digit [ d ] [ i ];\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true;\n        q . push ( nextidx );\n        distance [ nextidx ] = distance [ idx ] + 1;\n      }\n    }\n    digit [ d ] . clear ( );\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true;\n      q . push ( idx - 1 );\n      distance [ idx - 1 ] = distance [ idx ] + 1;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true;\n      q . push ( idx + 1 );\n      distance [ idx + 1 ] = distance [ idx ] + 1;\n    }\n  }\n  return distance [ N - 1 ];\n}", "target_program": " static int getMinStepToReachEnd ( int arr [ ] , int N ) {\n  boolean [ ] visit = new boolean [ N ] ;\n  int [ ] distance = new int [ N ] ;\n  Vector < Integer > [ ] digit = new Vector [ 10 ] ;\n  for ( int i = 0 ;\n  i < 10 ;\n  i ++ ) digit [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) visit [ i ] = false ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) digit [ arr [ i ] ] . add ( i ) ;\n  distance [ 0 ] = 0 ;\n  visit [ 0 ] = true ;\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 0 ) ;\n  while ( ! q . isEmpty ( ) ) {\n    int idx = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( idx == N - 1 ) break ;\n    int d = arr [ idx ] ;\n    for ( int i = 0 ;\n    i < digit [ d ] . size ( ) ;\n    i ++ ) {\n      int nextidx = digit [ d ] . get ( i ) ;\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true ;\n        q . add ( nextidx ) ;\n        distance [ nextidx ] = distance [ idx ] + 1 ;\n      }\n    }\n    digit [ d ] . clear ( ) ;\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true ;\n      q . add ( idx - 1 ) ;\n      distance [ idx - 1 ] = distance [ idx ] + 1 ;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true ;\n      q . add ( idx + 1 ) ;\n      distance [ idx + 1 ] = distance [ idx ] + 1 ;\n    }\n  }\n  return distance [ N - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getMinStepToReachEnd ( int arr [ ], int N ) {\n  bool visit [ N ];\n  int distance [ N ];\n  vector < int > digit [ 10 ];\n  memset ( visit, false, sizeof ( visit ) );\n  for ( int i = 1;\n  i < N;\n  i ++ ) digit [ arr [ i ] ] . push_back ( i );\n  distance [ 0 ] = 0;\n  visit [ 0 ] = true;\n  queue < int > q;\n  q . push ( 0 );\n  while ( ! q . empty ( ) ) {\n    int idx = q . front ( );\n    q . pop ( );\n    if ( idx == N - 1 ) break;\n    int d = arr [ idx ];\n    for ( int i = 0;\n    i < digit [ d ] . size ( );\n    i ++ ) {\n      int nextidx = digit [ d ] [ i ];\n      if ( ! visit [ nextidx ] ) {\n        visit [ nextidx ] = true;\n        q . push ( nextidx );\n        distance [ nextidx ] = distance [ idx ] + 1;\n      }\n    }\n    digit [ d ] . clear ( );\n    if ( idx - 1 >= 0 && ! visit [ idx - 1 ] ) {\n      visit [ idx - 1 ] = true;\n      q . push ( idx - 1 );\n      distance [ idx - 1 ] = distance [ idx ] + 1;\n    }\n    if ( idx + 1 < N && ! visit [ idx + 1 ] ) {\n      visit [ idx + 1 ] = true;\n      q . push ( idx + 1 );\n      distance [ idx + 1 ] = distance [ idx ] + 1;\n    }\n  }\n  return distance [ N - 1 ];\n}", "target_program": " def getMinStepToReachEnd ( arr , N ) :\n    visit = [ False for i in range ( N ) ]\n    distance = [ 0 for i in range ( N ) ]\n    digit = [ [ 0 for i in range ( N ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , N ) :\n        digit [ arr [ i ] ].append ( i )\n    distance [ 0 ] = 0\n    visit [ 0 ] = True\n    q = [ ]\n    q.append ( 0 )\n    while ( len ( q ) > 0 ) :\n        idx = q [ 0 ]\n        q.remove ( q [ 0 ] )\n        if ( idx == N - 1 ) :\n            break\n        d = arr [ idx ]\n        for i in range ( len ( digit [ d ] ) ) :\n            nextidx = digit [ d ] [ i ]\n            if ( visit [ nextidx ] == False ) :\n                visit [ nextidx ] = True\n                q.append ( nextidx )\n                distance [ nextidx ] = distance [ idx ] + 1\n        if ( idx - 1 >= 0 and visit [ idx - 1 ] == False ) :\n            visit [ idx - 1 ] = True\n            q.append ( idx - 1 )\n            distance [ idx - 1 ] = distance [ idx ] + 1\n        if ( idx + 1 < N and visit [ idx + 1 ] == False ) :\n            visit [ idx + 1 ] = True\n            q.append ( idx + 1 )\n            distance [ idx + 1 ] = distance [ idx ] + 1\n    return distance [ N - 1 ]"}
{"source": "python", "target": "java", "source_program": " def minimizeWithKSwaps ( arr , n , k ) :\n    for i in range ( n - 1 ) :\n        pos = i\n        for j in range ( i + 1 , n ) :\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n        for j in range ( pos , i , - 1 ) :\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n        k -= pos - i", "target_program": " static void minimizeWithKSwaps ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int pos = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( j - i > k ) break ;\n      if ( arr [ j ] < arr [ pos ] ) pos = j ;\n    }\n    int temp ;\n    for ( int j = pos ;\n    j > i ;\n    -- j ) {\n      temp = arr [ j ] ;\n      arr [ j ] = arr [ j - 1 ] ;\n      arr [ j - 1 ] = temp ;\n    }\n    k -= pos - i ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def minimizeWithKSwaps ( arr , n , k ) :\n    for i in range ( n - 1 ) :\n        pos = i\n        for j in range ( i + 1 , n ) :\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n        for j in range ( pos , i , - 1 ) :\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n        k -= pos - i", "target_program": " void minimizeWithKSwaps ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int pos = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( j - i > k ) break;\n      if ( arr [ j ] < arr [ pos ] ) pos = j;\n    }\n    for ( int j = pos;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= pos - i;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void minimizeWithKSwaps ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int pos = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( j - i > k ) break ;\n      if ( arr [ j ] < arr [ pos ] ) pos = j ;\n    }\n    int temp ;\n    for ( int j = pos ;\n    j > i ;\n    -- j ) {\n      temp = arr [ j ] ;\n      arr [ j ] = arr [ j - 1 ] ;\n      arr [ j - 1 ] = temp ;\n    }\n    k -= pos - i ;\n  }\n}", "target_program": " def minimizeWithKSwaps ( arr , n , k ) :\n    for i in range ( n - 1 ) :\n        pos = i\n        for j in range ( i + 1 , n ) :\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n        for j in range ( pos , i , - 1 ) :\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n        k -= pos - i"}
{"source": "java", "target": "cpp", "source_program": " static void minimizeWithKSwaps ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int pos = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( j - i > k ) break ;\n      if ( arr [ j ] < arr [ pos ] ) pos = j ;\n    }\n    int temp ;\n    for ( int j = pos ;\n    j > i ;\n    -- j ) {\n      temp = arr [ j ] ;\n      arr [ j ] = arr [ j - 1 ] ;\n      arr [ j - 1 ] = temp ;\n    }\n    k -= pos - i ;\n  }\n}", "target_program": " void minimizeWithKSwaps ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int pos = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( j - i > k ) break;\n      if ( arr [ j ] < arr [ pos ] ) pos = j;\n    }\n    for ( int j = pos;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= pos - i;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void minimizeWithKSwaps ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int pos = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( j - i > k ) break;\n      if ( arr [ j ] < arr [ pos ] ) pos = j;\n    }\n    for ( int j = pos;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= pos - i;\n  }\n}", "target_program": " static void minimizeWithKSwaps ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int pos = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( j - i > k ) break ;\n      if ( arr [ j ] < arr [ pos ] ) pos = j ;\n    }\n    int temp ;\n    for ( int j = pos ;\n    j > i ;\n    -- j ) {\n      temp = arr [ j ] ;\n      arr [ j ] = arr [ j - 1 ] ;\n      arr [ j - 1 ] = temp ;\n    }\n    k -= pos - i ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void minimizeWithKSwaps ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int pos = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( j - i > k ) break;\n      if ( arr [ j ] < arr [ pos ] ) pos = j;\n    }\n    for ( int j = pos;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= pos - i;\n  }\n}", "target_program": " def minimizeWithKSwaps ( arr , n , k ) :\n    for i in range ( n - 1 ) :\n        pos = i\n        for j in range ( i + 1 , n ) :\n            if ( j - i > k ) :\n                break\n            if ( arr [ j ] < arr [ pos ] ) :\n                pos = j\n        for j in range ( pos , i , - 1 ) :\n            arr [ j ] , arr [ j - 1 ] = arr [ j - 1 ] , arr [ j ]\n        k -= pos - i"}
{"source": "python", "target": "java", "source_program": " def printSequence ( arr , input ) :\n    n = len ( input )\n    output = \"\"\n    for i in range ( n ) :\n        if ( input [ i ] == ' ' ) :\n            output = output + \"0\"\n        else :\n            position = ord ( input [ i ] ) - ord ( 'A' )\n            output = output + arr [ position ]\n    return output", "target_program": " static String printSequence ( String arr [ ] , String input ) {\n  String output = \"\" ;\n  int n = input . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( input . charAt ( i ) == ' ' ) output = output + \"0\" ;\n    else {\n      int position = input . charAt ( i ) - 'A' ;\n      output = output + arr [ position ] ;\n    }\n  }\n  return output ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSequence ( arr , input ) :\n    n = len ( input )\n    output = \"\"\n    for i in range ( n ) :\n        if ( input [ i ] == ' ' ) :\n            output = output + \"0\"\n        else :\n            position = ord ( input [ i ] ) - ord ( 'A' )\n            output = output + arr [ position ]\n    return output", "target_program": " string printSequence ( string arr [ ], string input ) {\n  string output = \"\";\n  int n = input . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( input [ i ] == ' ' ) output = output + \"0\";\n    else {\n      int position = input [ i ] - 'A';\n      output = output + arr [ position ];\n    }\n  }\n  return output;\n}"}
{"source": "java", "target": "python", "source_program": " static String printSequence ( String arr [ ] , String input ) {\n  String output = \"\" ;\n  int n = input . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( input . charAt ( i ) == ' ' ) output = output + \"0\" ;\n    else {\n      int position = input . charAt ( i ) - 'A' ;\n      output = output + arr [ position ] ;\n    }\n  }\n  return output ;\n}", "target_program": " def printSequence ( arr , input ) :\n    n = len ( input )\n    output = \"\"\n    for i in range ( n ) :\n        if ( input [ i ] == ' ' ) :\n            output = output + \"0\"\n        else :\n            position = ord ( input [ i ] ) - ord ( 'A' )\n            output = output + arr [ position ]\n    return output"}
{"source": "java", "target": "cpp", "source_program": " static String printSequence ( String arr [ ] , String input ) {\n  String output = \"\" ;\n  int n = input . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( input . charAt ( i ) == ' ' ) output = output + \"0\" ;\n    else {\n      int position = input . charAt ( i ) - 'A' ;\n      output = output + arr [ position ] ;\n    }\n  }\n  return output ;\n}", "target_program": " string printSequence ( string arr [ ], string input ) {\n  string output = \"\";\n  int n = input . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( input [ i ] == ' ' ) output = output + \"0\";\n    else {\n      int position = input [ i ] - 'A';\n      output = output + arr [ position ];\n    }\n  }\n  return output;\n}"}
{"source": "cpp", "target": "java", "source_program": " string printSequence ( string arr [ ], string input ) {\n  string output = \"\";\n  int n = input . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( input [ i ] == ' ' ) output = output + \"0\";\n    else {\n      int position = input [ i ] - 'A';\n      output = output + arr [ position ];\n    }\n  }\n  return output;\n}", "target_program": " static String printSequence ( String arr [ ] , String input ) {\n  String output = \"\" ;\n  int n = input . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( input . charAt ( i ) == ' ' ) output = output + \"0\" ;\n    else {\n      int position = input . charAt ( i ) - 'A' ;\n      output = output + arr [ position ] ;\n    }\n  }\n  return output ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string printSequence ( string arr [ ], string input ) {\n  string output = \"\";\n  int n = input . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( input [ i ] == ' ' ) output = output + \"0\";\n    else {\n      int position = input [ i ] - 'A';\n      output = output + arr [ position ];\n    }\n  }\n  return output;\n}", "target_program": " def printSequence ( arr , input ) :\n    n = len ( input )\n    output = \"\"\n    for i in range ( n ) :\n        if ( input [ i ] == ' ' ) :\n            output = output + \"0\"\n        else :\n            position = ord ( input [ i ] ) - ord ( 'A' )\n            output = output + arr [ position ]\n    return output"}
{"source": "python", "target": "java", "source_program": " def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :\n    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n    radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n    if ( distSq == radSumSq ) :\n        return 1\n    elif ( distSq > radSumSq ) :\n        return - 1\n    else :\n        return 0", "target_program": " static int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n  if ( distSq == radSumSq ) return 1 ;\n  else if ( distSq > radSumSq ) return - 1 ;\n  else return 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :\n    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n    radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n    if ( distSq == radSumSq ) :\n        return 1\n    elif ( distSq > radSumSq ) :\n        return - 1\n    else :\n        return 0", "target_program": " int circle ( int x1, int y1, int x2, int y2, int r1, int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 );\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 );\n  if ( distSq == radSumSq ) return 1;\n  else if ( distSq > radSumSq ) return - 1;\n  else return 0;\n}"}
{"source": "java", "target": "python", "source_program": " static int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n  if ( distSq == radSumSq ) return 1 ;\n  else if ( distSq > radSumSq ) return - 1 ;\n  else return 0 ;\n}", "target_program": " def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :\n    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n    radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n    if ( distSq == radSumSq ) :\n        return 1\n    elif ( distSq > radSumSq ) :\n        return - 1\n    else :\n        return 0"}
{"source": "java", "target": "cpp", "source_program": " static int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n  if ( distSq == radSumSq ) return 1 ;\n  else if ( distSq > radSumSq ) return - 1 ;\n  else return 0 ;\n}", "target_program": " int circle ( int x1, int y1, int x2, int y2, int r1, int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 );\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 );\n  if ( distSq == radSumSq ) return 1;\n  else if ( distSq > radSumSq ) return - 1;\n  else return 0;\n}"}
{"source": "cpp", "target": "java", "source_program": " int circle ( int x1, int y1, int x2, int y2, int r1, int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 );\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 );\n  if ( distSq == radSumSq ) return 1;\n  else if ( distSq > radSumSq ) return - 1;\n  else return 0;\n}", "target_program": " static int circle ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n  if ( distSq == radSumSq ) return 1 ;\n  else if ( distSq > radSumSq ) return - 1 ;\n  else return 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int circle ( int x1, int y1, int x2, int y2, int r1, int r2 ) {\n  int distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 );\n  int radSumSq = ( r1 + r2 ) * ( r1 + r2 );\n  if ( distSq == radSumSq ) return 1;\n  else if ( distSq > radSumSq ) return - 1;\n  else return 0;\n}", "target_program": " def circle ( x1 , y1 , x2 , y2 , r1 , r2 ) :\n    distSq = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;\n    radSumSq = ( r1 + r2 ) * ( r1 + r2 ) ;\n    if ( distSq == radSumSq ) :\n        return 1\n    elif ( distSq > radSumSq ) :\n        return - 1\n    else :\n        return 0"}
{"source": "python", "target": "java", "source_program": " def pad ( n ) :\n    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1\n    for i in range ( 3 , n + 1 ) :\n        pNext = pPrevPrev + pPrev\n        pPrevPrev = pPrev\n        pPrev = pCurr\n        pCurr = pNext\n    return pNext ;", "target_program": " static int pad ( int n ) {\n  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev ;\n    pPrevPrev = pPrev ;\n    pPrev = pCurr ;\n    pCurr = pNext ;\n  }\n  return pNext ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pad ( n ) :\n    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1\n    for i in range ( 3 , n + 1 ) :\n        pNext = pPrevPrev + pPrev\n        pPrevPrev = pPrev\n        pPrev = pCurr\n        pCurr = pNext\n    return pNext ;", "target_program": " int pad ( int n ) {\n  int pPrevPrev = 1, pPrev = 1, pCurr = 1, pNext = 1;\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev;\n    pPrevPrev = pPrev;\n    pPrev = pCurr;\n    pCurr = pNext;\n  }\n  return pNext;\n}"}
{"source": "java", "target": "python", "source_program": " static int pad ( int n ) {\n  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev ;\n    pPrevPrev = pPrev ;\n    pPrev = pCurr ;\n    pCurr = pNext ;\n  }\n  return pNext ;\n}", "target_program": " def pad ( n ) :\n    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1\n    for i in range ( 3 , n + 1 ) :\n        pNext = pPrevPrev + pPrev\n        pPrevPrev = pPrev\n        pPrev = pCurr\n        pCurr = pNext\n    return pNext ;"}
{"source": "java", "target": "cpp", "source_program": " static int pad ( int n ) {\n  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev ;\n    pPrevPrev = pPrev ;\n    pPrev = pCurr ;\n    pCurr = pNext ;\n  }\n  return pNext ;\n}", "target_program": " int pad ( int n ) {\n  int pPrevPrev = 1, pPrev = 1, pCurr = 1, pNext = 1;\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev;\n    pPrevPrev = pPrev;\n    pPrev = pCurr;\n    pCurr = pNext;\n  }\n  return pNext;\n}"}
{"source": "cpp", "target": "java", "source_program": " int pad ( int n ) {\n  int pPrevPrev = 1, pPrev = 1, pCurr = 1, pNext = 1;\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev;\n    pPrevPrev = pPrev;\n    pPrev = pCurr;\n    pCurr = pNext;\n  }\n  return pNext;\n}", "target_program": " static int pad ( int n ) {\n  int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev ;\n    pPrevPrev = pPrev ;\n    pPrev = pCurr ;\n    pCurr = pNext ;\n  }\n  return pNext ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int pad ( int n ) {\n  int pPrevPrev = 1, pPrev = 1, pCurr = 1, pNext = 1;\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    pNext = pPrevPrev + pPrev;\n    pPrevPrev = pPrev;\n    pPrev = pCurr;\n    pCurr = pNext;\n  }\n  return pNext;\n}", "target_program": " def pad ( n ) :\n    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1\n    for i in range ( 3 , n + 1 ) :\n        pNext = pPrevPrev + pPrev\n        pPrevPrev = pPrev\n        pPrev = pCurr\n        pCurr = pNext\n    return pNext ;"}
{"source": "python", "target": "java", "source_program": " def check ( s ) :\n    if ( len ( s ) >= 10 ) :\n        return True\n    for i in range ( 1 , len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            for k in range ( j + 1 , len ( s ) ) :\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j - i ]\n                s3 = s [ j : k - j ]\n                s4 = s [ k : len ( s ) - k ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n    return False", "target_program": " public static boolean check ( String s ) {\n  if ( s . length ( ) >= 10 ) return true ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < s . length ( ) ;\n      k ++ ) {\n        String s1 = \"\" , s2 = \"\" , s3 = \"\" , s4 = \"\" ;\n        try {\n          s1 = s . substring ( 0 , i ) ;\n          s2 = s . substring ( i , j - i ) ;\n          s3 = s . substring ( j , k - j ) ;\n          s4 = s . substring ( k , s . length ( ) - k ) ;\n        }\n        catch ( StringIndexOutOfBoundsException e ) {\n        }\n        if ( strcheck ( s1 , s2 ) && strcheck ( s1 , s3 ) && strcheck ( s1 , s4 ) && strcheck ( s2 , s3 ) && strcheck ( s2 , s4 ) && strcheck ( s3 , s4 ) ) return true ;\n      }\n    }\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check ( s ) :\n    if ( len ( s ) >= 10 ) :\n        return True\n    for i in range ( 1 , len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            for k in range ( j + 1 , len ( s ) ) :\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j - i ]\n                s3 = s [ j : k - j ]\n                s4 = s [ k : len ( s ) - k ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n    return False", "target_program": " bool check ( string s ) {\n  if ( s . size ( ) >= 10 ) return true;\n  for ( int i = 1;\n  i < s . size ( );\n  i ++ ) {\n    for ( int j = i + 1;\n    j < s . size ( );\n    j ++ ) {\n      for ( int k = j + 1;\n      k < s . size ( );\n      k ++ ) {\n        string s1 = s . substr ( 0, i );\n        string s2 = s . substr ( i, j - i );\n        string s3 = s . substr ( j, k - j );\n        string s4 = s . substr ( k, s . size ( ) - k );\n        if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 && s2 != s4 && s3 != s4 ) return true;\n      }\n    }\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " public static boolean check ( String s ) {\n  if ( s . length ( ) >= 10 ) return true ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < s . length ( ) ;\n      k ++ ) {\n        String s1 = \"\" , s2 = \"\" , s3 = \"\" , s4 = \"\" ;\n        try {\n          s1 = s . substring ( 0 , i ) ;\n          s2 = s . substring ( i , j - i ) ;\n          s3 = s . substring ( j , k - j ) ;\n          s4 = s . substring ( k , s . length ( ) - k ) ;\n        }\n        catch ( StringIndexOutOfBoundsException e ) {\n        }\n        if ( strcheck ( s1 , s2 ) && strcheck ( s1 , s3 ) && strcheck ( s1 , s4 ) && strcheck ( s2 , s3 ) && strcheck ( s2 , s4 ) && strcheck ( s3 , s4 ) ) return true ;\n      }\n    }\n  }\n  return false ;\n}", "target_program": " def check ( s ) :\n    if ( len ( s ) >= 10 ) :\n        return True\n    for i in range ( 1 , len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            for k in range ( j + 1 , len ( s ) ) :\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j - i ]\n                s3 = s [ j : k - j ]\n                s4 = s [ k : len ( s ) - k ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " public static boolean check ( String s ) {\n  if ( s . length ( ) >= 10 ) return true ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < s . length ( ) ;\n      k ++ ) {\n        String s1 = \"\" , s2 = \"\" , s3 = \"\" , s4 = \"\" ;\n        try {\n          s1 = s . substring ( 0 , i ) ;\n          s2 = s . substring ( i , j - i ) ;\n          s3 = s . substring ( j , k - j ) ;\n          s4 = s . substring ( k , s . length ( ) - k ) ;\n        }\n        catch ( StringIndexOutOfBoundsException e ) {\n        }\n        if ( strcheck ( s1 , s2 ) && strcheck ( s1 , s3 ) && strcheck ( s1 , s4 ) && strcheck ( s2 , s3 ) && strcheck ( s2 , s4 ) && strcheck ( s3 , s4 ) ) return true ;\n      }\n    }\n  }\n  return false ;\n}", "target_program": " bool check ( string s ) {\n  if ( s . size ( ) >= 10 ) return true;\n  for ( int i = 1;\n  i < s . size ( );\n  i ++ ) {\n    for ( int j = i + 1;\n    j < s . size ( );\n    j ++ ) {\n      for ( int k = j + 1;\n      k < s . size ( );\n      k ++ ) {\n        string s1 = s . substr ( 0, i );\n        string s2 = s . substr ( i, j - i );\n        string s3 = s . substr ( j, k - j );\n        string s4 = s . substr ( k, s . size ( ) - k );\n        if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 && s2 != s4 && s3 != s4 ) return true;\n      }\n    }\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool check ( string s ) {\n  if ( s . size ( ) >= 10 ) return true;\n  for ( int i = 1;\n  i < s . size ( );\n  i ++ ) {\n    for ( int j = i + 1;\n    j < s . size ( );\n    j ++ ) {\n      for ( int k = j + 1;\n      k < s . size ( );\n      k ++ ) {\n        string s1 = s . substr ( 0, i );\n        string s2 = s . substr ( i, j - i );\n        string s3 = s . substr ( j, k - j );\n        string s4 = s . substr ( k, s . size ( ) - k );\n        if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 && s2 != s4 && s3 != s4 ) return true;\n      }\n    }\n  }\n  return false;\n}", "target_program": " public static boolean check ( String s ) {\n  if ( s . length ( ) >= 10 ) return true ;\n  for ( int i = 1 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < s . length ( ) ;\n      k ++ ) {\n        String s1 = \"\" , s2 = \"\" , s3 = \"\" , s4 = \"\" ;\n        try {\n          s1 = s . substring ( 0 , i ) ;\n          s2 = s . substring ( i , j - i ) ;\n          s3 = s . substring ( j , k - j ) ;\n          s4 = s . substring ( k , s . length ( ) - k ) ;\n        }\n        catch ( StringIndexOutOfBoundsException e ) {\n        }\n        if ( strcheck ( s1 , s2 ) && strcheck ( s1 , s3 ) && strcheck ( s1 , s4 ) && strcheck ( s2 , s3 ) && strcheck ( s2 , s4 ) && strcheck ( s3 , s4 ) ) return true ;\n      }\n    }\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool check ( string s ) {\n  if ( s . size ( ) >= 10 ) return true;\n  for ( int i = 1;\n  i < s . size ( );\n  i ++ ) {\n    for ( int j = i + 1;\n    j < s . size ( );\n    j ++ ) {\n      for ( int k = j + 1;\n      k < s . size ( );\n      k ++ ) {\n        string s1 = s . substr ( 0, i );\n        string s2 = s . substr ( i, j - i );\n        string s3 = s . substr ( j, k - j );\n        string s4 = s . substr ( k, s . size ( ) - k );\n        if ( s1 != s2 && s1 != s3 && s1 != s4 && s2 != s3 && s2 != s4 && s3 != s4 ) return true;\n      }\n    }\n  }\n  return false;\n}", "target_program": " def check ( s ) :\n    if ( len ( s ) >= 10 ) :\n        return True\n    for i in range ( 1 , len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            for k in range ( j + 1 , len ( s ) ) :\n                s1 = s [ 0 : i ]\n                s2 = s [ i : j - i ]\n                s3 = s [ j : k - j ]\n                s4 = s [ k : len ( s ) - k ]\n                if ( s1 != s2 and s1 != s3 and s1 != s4 and s2 != s3 and s2 != s4 and s3 != s4 ) :\n                    return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def isPossible ( a , b , n , k ) :\n    a.sort ( reverse = True )\n    b.sort ( )\n    for i in range ( n ) :\n        if ( a [ i ] + b [ i ] < k ) :\n            return False\n    return True", "target_program": " static boolean isPossible ( Integer a [ ] , int b [ ] , int n , int k ) {\n  Arrays . sort ( a , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( b ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPossible ( a , b , n , k ) :\n    a.sort ( reverse = True )\n    b.sort ( )\n    for i in range ( n ) :\n        if ( a [ i ] + b [ i ] < k ) :\n            return False\n    return True", "target_program": " bool isPossible ( int a [ ], int b [ ], int n, int k ) {\n  sort ( a, a + n );\n  sort ( b, b + n, greater < int > ( ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPossible ( Integer a [ ] , int b [ ] , int n , int k ) {\n  Arrays . sort ( a , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( b ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;\n  return true ;\n}", "target_program": " def isPossible ( a , b , n , k ) :\n    a.sort ( reverse = True )\n    b.sort ( )\n    for i in range ( n ) :\n        if ( a [ i ] + b [ i ] < k ) :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPossible ( Integer a [ ] , int b [ ] , int n , int k ) {\n  Arrays . sort ( a , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( b ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;\n  return true ;\n}", "target_program": " bool isPossible ( int a [ ], int b [ ], int n, int k ) {\n  sort ( a, a + n );\n  sort ( b, b + n, greater < int > ( ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPossible ( int a [ ], int b [ ], int n, int k ) {\n  sort ( a, a + n );\n  sort ( b, b + n, greater < int > ( ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false;\n  return true;\n}", "target_program": " static boolean isPossible ( Integer a [ ] , int b [ ] , int n , int k ) {\n  Arrays . sort ( a , Collections . reverseOrder ( ) ) ;\n  Arrays . sort ( b ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPossible ( int a [ ], int b [ ], int n, int k ) {\n  sort ( a, a + n );\n  sort ( b, b + n, greater < int > ( ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( a [ i ] + b [ i ] < k ) return false;\n  return true;\n}", "target_program": " def isPossible ( a , b , n , k ) :\n    a.sort ( reverse = True )\n    b.sort ( )\n    for i in range ( n ) :\n        if ( a [ i ] + b [ i ] < k ) :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0\n    times = 0\n    for i in range ( n ) :\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k :\n            return best\n    return best", "target_program": " static int winner ( int a [ ] , int n , int k ) {\n  if ( k >= n - 1 ) return n ;\n  int best = 0 , times = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ] ;\n      if ( i == 1 ) times = 1 ;\n    }\n    else times += 1 ;\n    if ( times >= k ) return best ;\n  }\n  return best ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0\n    times = 0\n    for i in range ( n ) :\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k :\n            return best\n    return best", "target_program": " int winner ( int a [ ], int n, int k ) {\n  if ( k >= n - 1 ) return n;\n  int best = 0, times = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ];\n      if ( i ) times = 1;\n    }\n    else times += 1;\n    if ( times >= k ) return best;\n  }\n  return best;\n}"}
{"source": "java", "target": "python", "source_program": " static int winner ( int a [ ] , int n , int k ) {\n  if ( k >= n - 1 ) return n ;\n  int best = 0 , times = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ] ;\n      if ( i == 1 ) times = 1 ;\n    }\n    else times += 1 ;\n    if ( times >= k ) return best ;\n  }\n  return best ;\n}", "target_program": " def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0\n    times = 0\n    for i in range ( n ) :\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k :\n            return best\n    return best"}
{"source": "java", "target": "cpp", "source_program": " static int winner ( int a [ ] , int n , int k ) {\n  if ( k >= n - 1 ) return n ;\n  int best = 0 , times = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ] ;\n      if ( i == 1 ) times = 1 ;\n    }\n    else times += 1 ;\n    if ( times >= k ) return best ;\n  }\n  return best ;\n}", "target_program": " int winner ( int a [ ], int n, int k ) {\n  if ( k >= n - 1 ) return n;\n  int best = 0, times = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ];\n      if ( i ) times = 1;\n    }\n    else times += 1;\n    if ( times >= k ) return best;\n  }\n  return best;\n}"}
{"source": "cpp", "target": "java", "source_program": " int winner ( int a [ ], int n, int k ) {\n  if ( k >= n - 1 ) return n;\n  int best = 0, times = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ];\n      if ( i ) times = 1;\n    }\n    else times += 1;\n    if ( times >= k ) return best;\n  }\n  return best;\n}", "target_program": " static int winner ( int a [ ] , int n , int k ) {\n  if ( k >= n - 1 ) return n ;\n  int best = 0 , times = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ] ;\n      if ( i == 1 ) times = 1 ;\n    }\n    else times += 1 ;\n    if ( times >= k ) return best ;\n  }\n  return best ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int winner ( int a [ ], int n, int k ) {\n  if ( k >= n - 1 ) return n;\n  int best = 0, times = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > best ) {\n      best = a [ i ];\n      if ( i ) times = 1;\n    }\n    else times += 1;\n    if ( times >= k ) return best;\n  }\n  return best;\n}", "target_program": " def winner ( a , n , k ) :\n    if k >= n - 1 :\n        return n\n    best = 0\n    times = 0\n    for i in range ( n ) :\n        if a [ i ] > best :\n            best = a [ i ]\n            if i == True :\n                times = 1\n        else :\n            times += 1\n        if times >= k :\n            return best\n    return best"}
{"source": "python", "target": "java", "source_program": " def direction ( R , C ) :\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if R == C and R % 2 != 0 and C % 2 != 0 :\n        print ( \"Right\" )\n        return\n    if R == C and R % 2 == 0 and C % 2 == 0 :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return", "target_program": " static void direction ( int R , int C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def direction ( R , C ) :\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if R == C and R % 2 != 0 and C % 2 != 0 :\n        print ( \"Right\" )\n        return\n    if R == C and R % 2 == 0 and C % 2 == 0 :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return", "target_program": " void direction ( ll R, ll C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void direction ( int R , int C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n}", "target_program": " def direction ( R , C ) :\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if R == C and R % 2 != 0 and C % 2 != 0 :\n        print ( \"Right\" )\n        return\n    if R == C and R % 2 == 0 and C % 2 == 0 :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return"}
{"source": "java", "target": "cpp", "source_program": " static void direction ( int R , int C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n}", "target_program": " void direction ( ll R, ll C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void direction ( ll R, ll C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n}", "target_program": " static void direction ( int R , int C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Left\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    System . out . println ( \"Up\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    System . out . println ( \"Down\" ) ;\n    return ;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    System . out . println ( \"Right\" ) ;\n    return ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void direction ( ll R, ll C ) {\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 != 0 && C % 2 != 0 ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R == C && R % 2 == 0 && C % 2 == 0 ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R < C ) {\n    cout << \"Left\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 == 0 && R > C ) {\n    cout << \"Up\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 == 0 && C % 2 != 0 && R > C ) {\n    cout << \"Down\" << endl;\n    return;\n  }\n  if ( R != C && R % 2 != 0 && C % 2 == 0 && R < C ) {\n    cout << \"Right\" << endl;\n    return;\n  }\n}", "target_program": " def direction ( R , C ) :\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if R == C and R % 2 != 0 and C % 2 != 0 :\n        print ( \"Right\" )\n        return\n    if R == C and R % 2 == 0 and C % 2 == 0 :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 != 0 and R < C ) :\n        print ( \"Left\" )\n        return\n    if ( R != C and R % 2 == 0 and C % 2 == 0 and R > C ) :\n        print ( \"Up\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R > C ) :\n        print ( \"Down\" )\n        return\n    if ( R != C and R % 2 != 0 and C % 2 != 0 and R < C ) :\n        print ( \"Right\" )\n        return"}
{"source": "python", "target": "java", "source_program": " def countIntegralSolutions ( n ) :\n    result = 0\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            for k in range ( n + 1 ) :\n                if i + j + k == n :\n                    result += 1\n    return result", "target_program": " static int countIntegralSolutions ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n - i ;\n  j ++ ) for ( int k = 0 ;\n  k <= ( n - i - j ) ;\n  k ++ ) if ( i + j + k == n ) result ++ ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countIntegralSolutions ( n ) :\n    result = 0\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            for k in range ( n + 1 ) :\n                if i + j + k == n :\n                    result += 1\n    return result", "target_program": " int countIntegralSolutions ( int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n - i;\n  j ++ ) for ( int k = 0;\n  k <= ( n - i - j );\n  k ++ ) if ( i + j + k == n ) result ++;\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countIntegralSolutions ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n - i ;\n  j ++ ) for ( int k = 0 ;\n  k <= ( n - i - j ) ;\n  k ++ ) if ( i + j + k == n ) result ++ ;\n  return result ;\n}", "target_program": " def countIntegralSolutions ( n ) :\n    result = 0\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            for k in range ( n + 1 ) :\n                if i + j + k == n :\n                    result += 1\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countIntegralSolutions ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n - i ;\n  j ++ ) for ( int k = 0 ;\n  k <= ( n - i - j ) ;\n  k ++ ) if ( i + j + k == n ) result ++ ;\n  return result ;\n}", "target_program": " int countIntegralSolutions ( int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n - i;\n  j ++ ) for ( int k = 0;\n  k <= ( n - i - j );\n  k ++ ) if ( i + j + k == n ) result ++;\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countIntegralSolutions ( int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n - i;\n  j ++ ) for ( int k = 0;\n  k <= ( n - i - j );\n  k ++ ) if ( i + j + k == n ) result ++;\n  return result;\n}", "target_program": " static int countIntegralSolutions ( int n ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n - i ;\n  j ++ ) for ( int k = 0 ;\n  k <= ( n - i - j ) ;\n  k ++ ) if ( i + j + k == n ) result ++ ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countIntegralSolutions ( int n ) {\n  int result = 0;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n - i;\n  j ++ ) for ( int k = 0;\n  k <= ( n - i - j );\n  k ++ ) if ( i + j + k == n ) result ++;\n  return result;\n}", "target_program": " def countIntegralSolutions ( n ) :\n    result = 0\n    for i in range ( n + 1 ) :\n        for j in range ( n + 1 ) :\n            for k in range ( n + 1 ) :\n                if i + j + k == n :\n                    result += 1\n    return result"}
{"source": "python", "target": "java", "source_program": " def swapDiagonal ( matrix ) :\n    for i in range ( N ) :\n        matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \\\n            matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]", "target_program": " static void swapDiagonal ( int matrix [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int temp = matrix [ i ] [ i ] ;\n    matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;\n    matrix [ i ] [ N - i - 1 ] = temp ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def swapDiagonal ( matrix ) :\n    for i in range ( N ) :\n        matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \\\n            matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]", "target_program": " void swapDiagonal ( int matrix [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) swap ( matrix [ i ] [ i ], matrix [ i ] [ N - i - 1 ] );\n}"}
{"source": "java", "target": "python", "source_program": " static void swapDiagonal ( int matrix [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int temp = matrix [ i ] [ i ] ;\n    matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;\n    matrix [ i ] [ N - i - 1 ] = temp ;\n  }\n}", "target_program": " def swapDiagonal ( matrix ) :\n    for i in range ( N ) :\n        matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \\\n            matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]"}
{"source": "java", "target": "cpp", "source_program": " static void swapDiagonal ( int matrix [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int temp = matrix [ i ] [ i ] ;\n    matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;\n    matrix [ i ] [ N - i - 1 ] = temp ;\n  }\n}", "target_program": " void swapDiagonal ( int matrix [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) swap ( matrix [ i ] [ i ], matrix [ i ] [ N - i - 1 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void swapDiagonal ( int matrix [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) swap ( matrix [ i ] [ i ], matrix [ i ] [ N - i - 1 ] );\n}", "target_program": " static void swapDiagonal ( int matrix [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    int temp = matrix [ i ] [ i ] ;\n    matrix [ i ] [ i ] = matrix [ i ] [ N - i - 1 ] ;\n    matrix [ i ] [ N - i - 1 ] = temp ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void swapDiagonal ( int matrix [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) swap ( matrix [ i ] [ i ], matrix [ i ] [ N - i - 1 ] );\n}", "target_program": " def swapDiagonal ( matrix ) :\n    for i in range ( N ) :\n        matrix [ i ] [ i ] , matrix [ i ] [ N - i - 1 ] = \\\n            matrix [ i ] [ N - i - 1 ] , matrix [ i ] [ i ]"}
{"source": "python", "target": "java", "source_program": " def MinOperation ( a , n , k ) :\n    result = 0\n    for i in range ( n ) :\n        if ( a [ i ] != 1 and a [ i ] > k ) :\n            result = ( result + min ( a [ i ] % k , k - a [ i ] % k ) )\n        else :\n            result = result + k - a [ i ]\n    return result", "target_program": " static int MinOperation ( int a [ ] , int n , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + Math . min ( a [ i ] % k , k - a [ i ] % k ) ;\n    }\n    else {\n      result = result + k - a [ i ] ;\n    }\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MinOperation ( a , n , k ) :\n    result = 0\n    for i in range ( n ) :\n        if ( a [ i ] != 1 and a [ i ] > k ) :\n            result = ( result + min ( a [ i ] % k , k - a [ i ] % k ) )\n        else :\n            result = result + k - a [ i ]\n    return result", "target_program": " int MinOperation ( int a [ ], int n, int k ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + min ( a [ i ] % k, k - a [ i ] % k );\n    }\n    else {\n      result = result + k - a [ i ];\n    }\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int MinOperation ( int a [ ] , int n , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + Math . min ( a [ i ] % k , k - a [ i ] % k ) ;\n    }\n    else {\n      result = result + k - a [ i ] ;\n    }\n  }\n  return result ;\n}", "target_program": " def MinOperation ( a , n , k ) :\n    result = 0\n    for i in range ( n ) :\n        if ( a [ i ] != 1 and a [ i ] > k ) :\n            result = ( result + min ( a [ i ] % k , k - a [ i ] % k ) )\n        else :\n            result = result + k - a [ i ]\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int MinOperation ( int a [ ] , int n , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + Math . min ( a [ i ] % k , k - a [ i ] % k ) ;\n    }\n    else {\n      result = result + k - a [ i ] ;\n    }\n  }\n  return result ;\n}", "target_program": " int MinOperation ( int a [ ], int n, int k ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + min ( a [ i ] % k, k - a [ i ] % k );\n    }\n    else {\n      result = result + k - a [ i ];\n    }\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int MinOperation ( int a [ ], int n, int k ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + min ( a [ i ] % k, k - a [ i ] % k );\n    }\n    else {\n      result = result + k - a [ i ];\n    }\n  }\n  return result;\n}", "target_program": " static int MinOperation ( int a [ ] , int n , int k ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + Math . min ( a [ i ] % k , k - a [ i ] % k ) ;\n    }\n    else {\n      result = result + k - a [ i ] ;\n    }\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int MinOperation ( int a [ ], int n, int k ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    if ( a [ i ] != 1 && a [ i ] > k ) {\n      result = result + min ( a [ i ] % k, k - a [ i ] % k );\n    }\n    else {\n      result = result + k - a [ i ];\n    }\n  }\n  return result;\n}", "target_program": " def MinOperation ( a , n , k ) :\n    result = 0\n    for i in range ( n ) :\n        if ( a [ i ] != 1 and a [ i ] > k ) :\n            result = ( result + min ( a [ i ] % k , k - a [ i ] % k ) )\n        else :\n            result = result + k - a [ i ]\n    return result"}
{"source": "python", "target": "java", "source_program": " def squareRoot ( n ) :\n    x = n ;\n    y = 1 ;\n    while ( x > y ) :\n        x = ( x + y ) / 2 ;\n        y = n / x ;\n    return x ;", "target_program": " static long squareRoot ( int n ) {\n  int x = n ;\n  int y = 1 ;\n  while ( x > y ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return ( long ) x ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def squareRoot ( n ) :\n    x = n ;\n    y = 1 ;\n    while ( x > y ) :\n        x = ( x + y ) / 2 ;\n        y = n / x ;\n    return x ;", "target_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}"}
{"source": "java", "target": "python", "source_program": " static long squareRoot ( int n ) {\n  int x = n ;\n  int y = 1 ;\n  while ( x > y ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return ( long ) x ;\n}", "target_program": " def squareRoot ( n ) :\n    x = n ;\n    y = 1 ;\n    while ( x > y ) :\n        x = ( x + y ) / 2 ;\n        y = n / x ;\n    return x ;"}
{"source": "java", "target": "cpp", "source_program": " static long squareRoot ( int n ) {\n  int x = n ;\n  int y = 1 ;\n  while ( x > y ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return ( long ) x ;\n}", "target_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}"}
{"source": "cpp", "target": "java", "source_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}", "target_program": " static long squareRoot ( int n ) {\n  int x = n ;\n  int y = 1 ;\n  while ( x > y ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return ( long ) x ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}", "target_program": " def squareRoot ( n ) :\n    x = n ;\n    y = 1 ;\n    while ( x > y ) :\n        x = ( x + y ) / 2 ;\n        y = n / x ;\n    return x ;"}
{"source": "python", "target": "java", "source_program": " def KMP ( m , n , str2 , str1 ) :\n    pos = 0\n    Len = 0\n    p = [ 0 for i in range ( m + 1 ) ]\n    k = 0\n    for i in range ( 2 , n + 1 ) :\n        while ( k > 0 and str1 [ k ] != str1 [ i - 1 ] ) :\n            k = p [ k ]\n        if ( str1 [ k ] == str1 [ i - 1 ] ) :\n            k += 1\n        p [ i ] = k\n    j = 0\n    for i in range ( m ) :\n        while ( j > 0 and j < n and str1 [ j ] != str2 [ i ] ) :\n            j = p [ j ]\n        if ( j < n and str1 [ j ] == str2 [ i ] ) :\n            j += 1\n        if ( j > Len ) :\n            Len = j\n            pos = i - j + 1\n    print ( \"Shift = \" , pos )\n    print ( \"Prefix = \" , str1 [ : Len ] )", "target_program": " static void KMP ( int m , int n , String str2 , String str1 ) {\n  int pos = 0 , len = 0 ;\n  int [ ] p = new int [ m + 1 ] ;\n  int k = 0 ;\n  char [ ] ch1 = str1 . toCharArray ( ) ;\n  char [ ] ch2 = str2 . toCharArray ( ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    while ( k > 0 && ch1 [ k ] != ch1 [ i - 1 ] ) k = p [ k ] ;\n    if ( ch1 [ k ] == ch1 [ i - 1 ] ) ++ k ;\n    p [ i ] = k ;\n  }\n  for ( int j = 0 , i = 0 ;\n  i < m ;\n  i ++ ) {\n    while ( j > 0 && j < n && ch1 [ j ] != ch2 [ i ] ) j = p [ j ] ;\n    if ( j < n && ch1 [ j ] == ch2 [ i ] ) j ++ ;\n    if ( j > len ) {\n      len = j ;\n      pos = i - j + 1 ;\n    }\n  }\n  System . out . println ( \"Shift = \" + pos ) ;\n  System . out . println ( \"Prefix = \" + str1 . substring ( 0 , len ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def KMP ( m , n , str2 , str1 ) :\n    pos = 0\n    Len = 0\n    p = [ 0 for i in range ( m + 1 ) ]\n    k = 0\n    for i in range ( 2 , n + 1 ) :\n        while ( k > 0 and str1 [ k ] != str1 [ i - 1 ] ) :\n            k = p [ k ]\n        if ( str1 [ k ] == str1 [ i - 1 ] ) :\n            k += 1\n        p [ i ] = k\n    j = 0\n    for i in range ( m ) :\n        while ( j > 0 and j < n and str1 [ j ] != str2 [ i ] ) :\n            j = p [ j ]\n        if ( j < n and str1 [ j ] == str2 [ i ] ) :\n            j += 1\n        if ( j > Len ) :\n            Len = j\n            pos = i - j + 1\n    print ( \"Shift = \" , pos )\n    print ( \"Prefix = \" , str1 [ : Len ] )", "target_program": " void KMP ( int m, int n, string str2, string str1 ) {\n  int pos = 0, len = 0;\n  int p [ m + 1 ];\n  int k = 0;\n  p [ 1 ] = 0;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    while ( k > 0 && str1 [ k ] != str1 [ i - 1 ] ) k = p [ k ];\n    if ( str1 [ k ] == str1 [ i - 1 ] ) ++ k;\n    p [ i ] = k;\n  }\n  for ( int j = 0, i = 0;\n  i < m;\n  i ++ ) {\n    while ( j > 0 && str1 [ j ] != str2 [ i ] ) j = p [ j ];\n    if ( str1 [ j ] == str2 [ i ] ) j ++;\n    if ( j > len ) {\n      len = j;\n      pos = i - j + 1;\n    }\n  }\n  cout << \"Shift = \" << pos << endl;\n  cout << \"Prefix = \" << str1 . substr ( 0, len );\n}"}
{"source": "java", "target": "python", "source_program": " static void KMP ( int m , int n , String str2 , String str1 ) {\n  int pos = 0 , len = 0 ;\n  int [ ] p = new int [ m + 1 ] ;\n  int k = 0 ;\n  char [ ] ch1 = str1 . toCharArray ( ) ;\n  char [ ] ch2 = str2 . toCharArray ( ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    while ( k > 0 && ch1 [ k ] != ch1 [ i - 1 ] ) k = p [ k ] ;\n    if ( ch1 [ k ] == ch1 [ i - 1 ] ) ++ k ;\n    p [ i ] = k ;\n  }\n  for ( int j = 0 , i = 0 ;\n  i < m ;\n  i ++ ) {\n    while ( j > 0 && j < n && ch1 [ j ] != ch2 [ i ] ) j = p [ j ] ;\n    if ( j < n && ch1 [ j ] == ch2 [ i ] ) j ++ ;\n    if ( j > len ) {\n      len = j ;\n      pos = i - j + 1 ;\n    }\n  }\n  System . out . println ( \"Shift = \" + pos ) ;\n  System . out . println ( \"Prefix = \" + str1 . substring ( 0 , len ) ) ;\n}", "target_program": " def KMP ( m , n , str2 , str1 ) :\n    pos = 0\n    Len = 0\n    p = [ 0 for i in range ( m + 1 ) ]\n    k = 0\n    for i in range ( 2 , n + 1 ) :\n        while ( k > 0 and str1 [ k ] != str1 [ i - 1 ] ) :\n            k = p [ k ]\n        if ( str1 [ k ] == str1 [ i - 1 ] ) :\n            k += 1\n        p [ i ] = k\n    j = 0\n    for i in range ( m ) :\n        while ( j > 0 and j < n and str1 [ j ] != str2 [ i ] ) :\n            j = p [ j ]\n        if ( j < n and str1 [ j ] == str2 [ i ] ) :\n            j += 1\n        if ( j > Len ) :\n            Len = j\n            pos = i - j + 1\n    print ( \"Shift = \" , pos )\n    print ( \"Prefix = \" , str1 [ : Len ] )"}
{"source": "java", "target": "cpp", "source_program": " static void KMP ( int m , int n , String str2 , String str1 ) {\n  int pos = 0 , len = 0 ;\n  int [ ] p = new int [ m + 1 ] ;\n  int k = 0 ;\n  char [ ] ch1 = str1 . toCharArray ( ) ;\n  char [ ] ch2 = str2 . toCharArray ( ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    while ( k > 0 && ch1 [ k ] != ch1 [ i - 1 ] ) k = p [ k ] ;\n    if ( ch1 [ k ] == ch1 [ i - 1 ] ) ++ k ;\n    p [ i ] = k ;\n  }\n  for ( int j = 0 , i = 0 ;\n  i < m ;\n  i ++ ) {\n    while ( j > 0 && j < n && ch1 [ j ] != ch2 [ i ] ) j = p [ j ] ;\n    if ( j < n && ch1 [ j ] == ch2 [ i ] ) j ++ ;\n    if ( j > len ) {\n      len = j ;\n      pos = i - j + 1 ;\n    }\n  }\n  System . out . println ( \"Shift = \" + pos ) ;\n  System . out . println ( \"Prefix = \" + str1 . substring ( 0 , len ) ) ;\n}", "target_program": " void KMP ( int m, int n, string str2, string str1 ) {\n  int pos = 0, len = 0;\n  int p [ m + 1 ];\n  int k = 0;\n  p [ 1 ] = 0;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    while ( k > 0 && str1 [ k ] != str1 [ i - 1 ] ) k = p [ k ];\n    if ( str1 [ k ] == str1 [ i - 1 ] ) ++ k;\n    p [ i ] = k;\n  }\n  for ( int j = 0, i = 0;\n  i < m;\n  i ++ ) {\n    while ( j > 0 && str1 [ j ] != str2 [ i ] ) j = p [ j ];\n    if ( str1 [ j ] == str2 [ i ] ) j ++;\n    if ( j > len ) {\n      len = j;\n      pos = i - j + 1;\n    }\n  }\n  cout << \"Shift = \" << pos << endl;\n  cout << \"Prefix = \" << str1 . substr ( 0, len );\n}"}
{"source": "cpp", "target": "java", "source_program": " void KMP ( int m, int n, string str2, string str1 ) {\n  int pos = 0, len = 0;\n  int p [ m + 1 ];\n  int k = 0;\n  p [ 1 ] = 0;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    while ( k > 0 && str1 [ k ] != str1 [ i - 1 ] ) k = p [ k ];\n    if ( str1 [ k ] == str1 [ i - 1 ] ) ++ k;\n    p [ i ] = k;\n  }\n  for ( int j = 0, i = 0;\n  i < m;\n  i ++ ) {\n    while ( j > 0 && str1 [ j ] != str2 [ i ] ) j = p [ j ];\n    if ( str1 [ j ] == str2 [ i ] ) j ++;\n    if ( j > len ) {\n      len = j;\n      pos = i - j + 1;\n    }\n  }\n  cout << \"Shift = \" << pos << endl;\n  cout << \"Prefix = \" << str1 . substr ( 0, len );\n}", "target_program": " static void KMP ( int m , int n , String str2 , String str1 ) {\n  int pos = 0 , len = 0 ;\n  int [ ] p = new int [ m + 1 ] ;\n  int k = 0 ;\n  char [ ] ch1 = str1 . toCharArray ( ) ;\n  char [ ] ch2 = str2 . toCharArray ( ) ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    while ( k > 0 && ch1 [ k ] != ch1 [ i - 1 ] ) k = p [ k ] ;\n    if ( ch1 [ k ] == ch1 [ i - 1 ] ) ++ k ;\n    p [ i ] = k ;\n  }\n  for ( int j = 0 , i = 0 ;\n  i < m ;\n  i ++ ) {\n    while ( j > 0 && j < n && ch1 [ j ] != ch2 [ i ] ) j = p [ j ] ;\n    if ( j < n && ch1 [ j ] == ch2 [ i ] ) j ++ ;\n    if ( j > len ) {\n      len = j ;\n      pos = i - j + 1 ;\n    }\n  }\n  System . out . println ( \"Shift = \" + pos ) ;\n  System . out . println ( \"Prefix = \" + str1 . substring ( 0 , len ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void KMP ( int m, int n, string str2, string str1 ) {\n  int pos = 0, len = 0;\n  int p [ m + 1 ];\n  int k = 0;\n  p [ 1 ] = 0;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    while ( k > 0 && str1 [ k ] != str1 [ i - 1 ] ) k = p [ k ];\n    if ( str1 [ k ] == str1 [ i - 1 ] ) ++ k;\n    p [ i ] = k;\n  }\n  for ( int j = 0, i = 0;\n  i < m;\n  i ++ ) {\n    while ( j > 0 && str1 [ j ] != str2 [ i ] ) j = p [ j ];\n    if ( str1 [ j ] == str2 [ i ] ) j ++;\n    if ( j > len ) {\n      len = j;\n      pos = i - j + 1;\n    }\n  }\n  cout << \"Shift = \" << pos << endl;\n  cout << \"Prefix = \" << str1 . substr ( 0, len );\n}", "target_program": " def KMP ( m , n , str2 , str1 ) :\n    pos = 0\n    Len = 0\n    p = [ 0 for i in range ( m + 1 ) ]\n    k = 0\n    for i in range ( 2 , n + 1 ) :\n        while ( k > 0 and str1 [ k ] != str1 [ i - 1 ] ) :\n            k = p [ k ]\n        if ( str1 [ k ] == str1 [ i - 1 ] ) :\n            k += 1\n        p [ i ] = k\n    j = 0\n    for i in range ( m ) :\n        while ( j > 0 and j < n and str1 [ j ] != str2 [ i ] ) :\n            j = p [ j ]\n        if ( j < n and str1 [ j ] == str2 [ i ] ) :\n            j += 1\n        if ( j > Len ) :\n            Len = j\n            pos = i - j + 1\n    print ( \"Shift = \" , pos )\n    print ( \"Prefix = \" , str1 [ : Len ] )"}
{"source": "python", "target": "java", "source_program": " def printSorted ( arr , start , end ) :\n    if start > end :\n        return\n    printSorted ( arr , start * 2 + 1 , end )\n    print ( arr [ start ] , end = \" \" )\n    printSorted ( arr , start * 2 + 2 , end )", "target_program": " private static void printSorted ( int [ ] arr , int start , int end ) {\n  if ( start > end ) return ;\n  printSorted ( arr , start * 2 + 1 , end ) ;\n  System . out . print ( arr [ start ] + \" \" ) ;\n  printSorted ( arr , start * 2 + 2 , end ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSorted ( arr , start , end ) :\n    if start > end :\n        return\n    printSorted ( arr , start * 2 + 1 , end )\n    print ( arr [ start ] , end = \" \" )\n    printSorted ( arr , start * 2 + 2 , end )", "target_program": " void printSorted ( int arr [ ], int start, int end ) {\n  if ( start > end ) return;\n  printSorted ( arr, start * 2 + 1, end );\n  cout << arr [ start ] << \" \";\n  printSorted ( arr, start * 2 + 2, end );\n}"}
{"source": "java", "target": "python", "source_program": " private static void printSorted ( int [ ] arr , int start , int end ) {\n  if ( start > end ) return ;\n  printSorted ( arr , start * 2 + 1 , end ) ;\n  System . out . print ( arr [ start ] + \" \" ) ;\n  printSorted ( arr , start * 2 + 2 , end ) ;\n}", "target_program": " def printSorted ( arr , start , end ) :\n    if start > end :\n        return\n    printSorted ( arr , start * 2 + 1 , end )\n    print ( arr [ start ] , end = \" \" )\n    printSorted ( arr , start * 2 + 2 , end )"}
{"source": "java", "target": "cpp", "source_program": " private static void printSorted ( int [ ] arr , int start , int end ) {\n  if ( start > end ) return ;\n  printSorted ( arr , start * 2 + 1 , end ) ;\n  System . out . print ( arr [ start ] + \" \" ) ;\n  printSorted ( arr , start * 2 + 2 , end ) ;\n}", "target_program": " void printSorted ( int arr [ ], int start, int end ) {\n  if ( start > end ) return;\n  printSorted ( arr, start * 2 + 1, end );\n  cout << arr [ start ] << \" \";\n  printSorted ( arr, start * 2 + 2, end );\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSorted ( int arr [ ], int start, int end ) {\n  if ( start > end ) return;\n  printSorted ( arr, start * 2 + 1, end );\n  cout << arr [ start ] << \" \";\n  printSorted ( arr, start * 2 + 2, end );\n}", "target_program": " private static void printSorted ( int [ ] arr , int start , int end ) {\n  if ( start > end ) return ;\n  printSorted ( arr , start * 2 + 1 , end ) ;\n  System . out . print ( arr [ start ] + \" \" ) ;\n  printSorted ( arr , start * 2 + 2 , end ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSorted ( int arr [ ], int start, int end ) {\n  if ( start > end ) return;\n  printSorted ( arr, start * 2 + 1, end );\n  cout << arr [ start ] << \" \";\n  printSorted ( arr, start * 2 + 2, end );\n}", "target_program": " def printSorted ( arr , start , end ) :\n    if start > end :\n        return\n    printSorted ( arr , start * 2 + 1 , end )\n    print ( arr [ start ] , end = \" \" )\n    printSorted ( arr , start * 2 + 2 , end )"}
{"source": "python", "target": "java", "source_program": " def check ( degree , n ) :\n    deg_sum = sum ( degree )\n    if ( 2 * ( n - 1 ) == deg_sum ) :\n        return True\n    else :\n        return False", "target_program": " static boolean check ( int degree [ ] , int n ) {\n  int deg_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    deg_sum += degree [ i ] ;\n  }\n  return ( 2 * ( n - 1 ) == deg_sum ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check ( degree , n ) :\n    deg_sum = sum ( degree )\n    if ( 2 * ( n - 1 ) == deg_sum ) :\n        return True\n    else :\n        return False", "target_program": " bool check ( int degree [ ], int n ) {\n  int deg_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) deg_sum += degree [ i ];\n  return ( 2 * ( n - 1 ) == deg_sum );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean check ( int degree [ ] , int n ) {\n  int deg_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    deg_sum += degree [ i ] ;\n  }\n  return ( 2 * ( n - 1 ) == deg_sum ) ;\n}", "target_program": " def check ( degree , n ) :\n    deg_sum = sum ( degree )\n    if ( 2 * ( n - 1 ) == deg_sum ) :\n        return True\n    else :\n        return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean check ( int degree [ ] , int n ) {\n  int deg_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    deg_sum += degree [ i ] ;\n  }\n  return ( 2 * ( n - 1 ) == deg_sum ) ;\n}", "target_program": " bool check ( int degree [ ], int n ) {\n  int deg_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) deg_sum += degree [ i ];\n  return ( 2 * ( n - 1 ) == deg_sum );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool check ( int degree [ ], int n ) {\n  int deg_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) deg_sum += degree [ i ];\n  return ( 2 * ( n - 1 ) == deg_sum );\n}", "target_program": " static boolean check ( int degree [ ] , int n ) {\n  int deg_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    deg_sum += degree [ i ] ;\n  }\n  return ( 2 * ( n - 1 ) == deg_sum ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool check ( int degree [ ], int n ) {\n  int deg_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) deg_sum += degree [ i ];\n  return ( 2 * ( n - 1 ) == deg_sum );\n}", "target_program": " def check ( degree , n ) :\n    deg_sum = sum ( degree )\n    if ( 2 * ( n - 1 ) == deg_sum ) :\n        return True\n    else :\n        return False"}
{"source": "python", "target": "java", "source_program": " def pushZerosToEnd ( arr , n ) :\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] != 0 :\n            arr [ count ] = arr [ i ]\n            count += 1\n    while count < n :\n        arr [ count ] = 0\n        count += 1", "target_program": " static void pushZerosToEnd ( int arr [ ] , int n ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ;\n  while ( count < n ) arr [ count ++ ] = 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pushZerosToEnd ( arr , n ) :\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] != 0 :\n            arr [ count ] = arr [ i ]\n            count += 1\n    while count < n :\n        arr [ count ] = 0\n        count += 1", "target_program": " void pushZerosToEnd ( int arr [ ], int n ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ];\n  while ( count < n ) arr [ count ++ ] = 0;\n}"}
{"source": "java", "target": "python", "source_program": " static void pushZerosToEnd ( int arr [ ] , int n ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ;\n  while ( count < n ) arr [ count ++ ] = 0 ;\n}", "target_program": " def pushZerosToEnd ( arr , n ) :\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] != 0 :\n            arr [ count ] = arr [ i ]\n            count += 1\n    while count < n :\n        arr [ count ] = 0\n        count += 1"}
{"source": "java", "target": "cpp", "source_program": " static void pushZerosToEnd ( int arr [ ] , int n ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ;\n  while ( count < n ) arr [ count ++ ] = 0 ;\n}", "target_program": " void pushZerosToEnd ( int arr [ ], int n ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ];\n  while ( count < n ) arr [ count ++ ] = 0;\n}"}
{"source": "cpp", "target": "java", "source_program": " void pushZerosToEnd ( int arr [ ], int n ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ];\n  while ( count < n ) arr [ count ++ ] = 0;\n}", "target_program": " static void pushZerosToEnd ( int arr [ ] , int n ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ] ;\n  while ( count < n ) arr [ count ++ ] = 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void pushZerosToEnd ( int arr [ ], int n ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] != 0 ) arr [ count ++ ] = arr [ i ];\n  while ( count < n ) arr [ count ++ ] = 0;\n}", "target_program": " def pushZerosToEnd ( arr , n ) :\n    count = 0\n    for i in range ( n ) :\n        if arr [ i ] != 0 :\n            arr [ count ] = arr [ i ]\n            count += 1\n    while count < n :\n        arr [ count ] = 0\n        count += 1"}
{"source": "python", "target": "java", "source_program": " def answerQuery ( a , n , l , r ) :\n    count = 0\n    l = l - 1\n    for i in range ( l , r , 1 ) :\n        element = a [ i ]\n        divisors = 0\n        for j in range ( l , r , 1 ) :\n            if ( a [ j ] % a [ i ] == 0 ) :\n                divisors += 1\n            else :\n                break\n        if ( divisors == ( r - l ) ) :\n            count += 1\n    return count", "target_program": " static int answerQuery ( int a [ ] , int n , int l , int r ) {\n  int count = 0 ;\n  l = l - 1 ;\n  for ( int i = l ;\n  i < r ;\n  i ++ ) {\n    int element = a [ i ] ;\n    int divisors = 0 ;\n    for ( int j = l ;\n    j < r ;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++ ;\n      else break ;\n    }\n    if ( divisors == ( r - l ) ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def answerQuery ( a , n , l , r ) :\n    count = 0\n    l = l - 1\n    for i in range ( l , r , 1 ) :\n        element = a [ i ]\n        divisors = 0\n        for j in range ( l , r , 1 ) :\n            if ( a [ j ] % a [ i ] == 0 ) :\n                divisors += 1\n            else :\n                break\n        if ( divisors == ( r - l ) ) :\n            count += 1\n    return count", "target_program": " int answerQuery ( int a [ ], int n, int l, int r ) {\n  int count = 0;\n  l = l - 1;\n  for ( int i = l;\n  i < r;\n  i ++ ) {\n    int element = a [ i ];\n    int divisors = 0;\n    for ( int j = l;\n    j < r;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++;\n      else break;\n    }\n    if ( divisors == ( r - l ) ) count ++;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int answerQuery ( int a [ ] , int n , int l , int r ) {\n  int count = 0 ;\n  l = l - 1 ;\n  for ( int i = l ;\n  i < r ;\n  i ++ ) {\n    int element = a [ i ] ;\n    int divisors = 0 ;\n    for ( int j = l ;\n    j < r ;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++ ;\n      else break ;\n    }\n    if ( divisors == ( r - l ) ) count ++ ;\n  }\n  return count ;\n}", "target_program": " def answerQuery ( a , n , l , r ) :\n    count = 0\n    l = l - 1\n    for i in range ( l , r , 1 ) :\n        element = a [ i ]\n        divisors = 0\n        for j in range ( l , r , 1 ) :\n            if ( a [ j ] % a [ i ] == 0 ) :\n                divisors += 1\n            else :\n                break\n        if ( divisors == ( r - l ) ) :\n            count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int answerQuery ( int a [ ] , int n , int l , int r ) {\n  int count = 0 ;\n  l = l - 1 ;\n  for ( int i = l ;\n  i < r ;\n  i ++ ) {\n    int element = a [ i ] ;\n    int divisors = 0 ;\n    for ( int j = l ;\n    j < r ;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++ ;\n      else break ;\n    }\n    if ( divisors == ( r - l ) ) count ++ ;\n  }\n  return count ;\n}", "target_program": " int answerQuery ( int a [ ], int n, int l, int r ) {\n  int count = 0;\n  l = l - 1;\n  for ( int i = l;\n  i < r;\n  i ++ ) {\n    int element = a [ i ];\n    int divisors = 0;\n    for ( int j = l;\n    j < r;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++;\n      else break;\n    }\n    if ( divisors == ( r - l ) ) count ++;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int answerQuery ( int a [ ], int n, int l, int r ) {\n  int count = 0;\n  l = l - 1;\n  for ( int i = l;\n  i < r;\n  i ++ ) {\n    int element = a [ i ];\n    int divisors = 0;\n    for ( int j = l;\n    j < r;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++;\n      else break;\n    }\n    if ( divisors == ( r - l ) ) count ++;\n  }\n  return count;\n}", "target_program": " static int answerQuery ( int a [ ] , int n , int l , int r ) {\n  int count = 0 ;\n  l = l - 1 ;\n  for ( int i = l ;\n  i < r ;\n  i ++ ) {\n    int element = a [ i ] ;\n    int divisors = 0 ;\n    for ( int j = l ;\n    j < r ;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++ ;\n      else break ;\n    }\n    if ( divisors == ( r - l ) ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int answerQuery ( int a [ ], int n, int l, int r ) {\n  int count = 0;\n  l = l - 1;\n  for ( int i = l;\n  i < r;\n  i ++ ) {\n    int element = a [ i ];\n    int divisors = 0;\n    for ( int j = l;\n    j < r;\n    j ++ ) {\n      if ( a [ j ] % a [ i ] == 0 ) divisors ++;\n      else break;\n    }\n    if ( divisors == ( r - l ) ) count ++;\n  }\n  return count;\n}", "target_program": " def answerQuery ( a , n , l , r ) :\n    count = 0\n    l = l - 1\n    for i in range ( l , r , 1 ) :\n        element = a [ i ]\n        divisors = 0\n        for j in range ( l , r , 1 ) :\n            if ( a [ j ] % a [ i ] == 0 ) :\n                divisors += 1\n            else :\n                break\n        if ( divisors == ( r - l ) ) :\n            count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def sumOfLargePrimeFactor ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum", "target_program": " static int sumOfLargePrimeFactor ( int n ) {\n  int prime [ ] = new int [ n + 1 ] , sum = 0 ;\n  Arrays . fill ( prime , 0 ) ;\n  int max = n / 2 ;\n  for ( int p = 2 ;\n  p <= max ;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2 ;\n      i <= n ;\n      i += p ) prime [ i ] = p ;\n    }\n  }\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( prime [ p ] != 0 ) sum += prime [ p ] ;\n    else sum += p ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumOfLargePrimeFactor ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum", "target_program": " int sumOfLargePrimeFactor ( int n ) {\n  int prime [ n + 1 ], sum = 0;\n  memset ( prime, 0, sizeof ( prime ) );\n  int max = n / 2;\n  for ( int p = 2;\n  p <= max;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2;\n      i <= n;\n      i += p ) prime [ i ] = p;\n    }\n  }\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( prime [ p ] ) sum += prime [ p ];\n    else sum += p;\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int sumOfLargePrimeFactor ( int n ) {\n  int prime [ ] = new int [ n + 1 ] , sum = 0 ;\n  Arrays . fill ( prime , 0 ) ;\n  int max = n / 2 ;\n  for ( int p = 2 ;\n  p <= max ;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2 ;\n      i <= n ;\n      i += p ) prime [ i ] = p ;\n    }\n  }\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( prime [ p ] != 0 ) sum += prime [ p ] ;\n    else sum += p ;\n  }\n  return sum ;\n}", "target_program": " def sumOfLargePrimeFactor ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int sumOfLargePrimeFactor ( int n ) {\n  int prime [ ] = new int [ n + 1 ] , sum = 0 ;\n  Arrays . fill ( prime , 0 ) ;\n  int max = n / 2 ;\n  for ( int p = 2 ;\n  p <= max ;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2 ;\n      i <= n ;\n      i += p ) prime [ i ] = p ;\n    }\n  }\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( prime [ p ] != 0 ) sum += prime [ p ] ;\n    else sum += p ;\n  }\n  return sum ;\n}", "target_program": " int sumOfLargePrimeFactor ( int n ) {\n  int prime [ n + 1 ], sum = 0;\n  memset ( prime, 0, sizeof ( prime ) );\n  int max = n / 2;\n  for ( int p = 2;\n  p <= max;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2;\n      i <= n;\n      i += p ) prime [ i ] = p;\n    }\n  }\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( prime [ p ] ) sum += prime [ p ];\n    else sum += p;\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumOfLargePrimeFactor ( int n ) {\n  int prime [ n + 1 ], sum = 0;\n  memset ( prime, 0, sizeof ( prime ) );\n  int max = n / 2;\n  for ( int p = 2;\n  p <= max;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2;\n      i <= n;\n      i += p ) prime [ i ] = p;\n    }\n  }\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( prime [ p ] ) sum += prime [ p ];\n    else sum += p;\n  }\n  return sum;\n}", "target_program": " static int sumOfLargePrimeFactor ( int n ) {\n  int prime [ ] = new int [ n + 1 ] , sum = 0 ;\n  Arrays . fill ( prime , 0 ) ;\n  int max = n / 2 ;\n  for ( int p = 2 ;\n  p <= max ;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2 ;\n      i <= n ;\n      i += p ) prime [ i ] = p ;\n    }\n  }\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( prime [ p ] != 0 ) sum += prime [ p ] ;\n    else sum += p ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumOfLargePrimeFactor ( int n ) {\n  int prime [ n + 1 ], sum = 0;\n  memset ( prime, 0, sizeof ( prime ) );\n  int max = n / 2;\n  for ( int p = 2;\n  p <= max;\n  p ++ ) {\n    if ( prime [ p ] == 0 ) {\n      for ( int i = p * 2;\n      i <= n;\n      i += p ) prime [ i ] = p;\n    }\n  }\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( prime [ p ] ) sum += prime [ p ];\n    else sum += p;\n  }\n  return sum;\n}", "target_program": " def sumOfLargePrimeFactor ( n ) :\n    prime = [ 0 ] * ( n + 1 )\n    sum = 0\n    max = int ( n / 2 )\n    for p in range ( 2 , max + 1 ) :\n        if prime [ p ] == 0 :\n            for i in range ( p * 2 , n + 1 , p ) :\n                prime [ i ] = p\n    for p in range ( 2 , n + 1 ) :\n        if prime [ p ] :\n            sum += prime [ p ]\n        else :\n            sum += p\n    return sum"}
{"source": "python", "target": "java", "source_program": " def editDistDP ( str1 , str2 , m , n ) :\n    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if i == 0 :\n                dp [ i ] [ j ] = j\n            elif j == 0 :\n                dp [ i ] [ j ] = i\n            elif str1 [ i - 1 ] == str2 [ j - 1 ] :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] )\n    return dp [ m ] [ n ]", "target_program": " static int editDistDP ( String str1 , String str2 , int m , int n ) {\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j - 1 ) ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def editDistDP ( str1 , str2 , m , n ) :\n    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if i == 0 :\n                dp [ i ] [ j ] = j\n            elif j == 0 :\n                dp [ i ] [ j ] = i\n            elif str1 [ i - 1 ] == str2 [ j - 1 ] :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] )\n    return dp [ m ] [ n ]", "target_program": " int editDistDP ( string str1, string str2, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j;\n      else if ( j == 0 ) dp [ i ] [ j ] = i;\n      else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int editDistDP ( String str1 , String str2 , int m , int n ) {\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j - 1 ) ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}", "target_program": " def editDistDP ( str1 , str2 , m , n ) :\n    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if i == 0 :\n                dp [ i ] [ j ] = j\n            elif j == 0 :\n                dp [ i ] [ j ] = i\n            elif str1 [ i - 1 ] == str2 [ j - 1 ] :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] )\n    return dp [ m ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int editDistDP ( String str1 , String str2 , int m , int n ) {\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j - 1 ) ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}", "target_program": " int editDistDP ( string str1, string str2, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j;\n      else if ( j == 0 ) dp [ i ] [ j ] = i;\n      else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int editDistDP ( string str1, string str2, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j;\n      else if ( j == 0 ) dp [ i ] [ j ] = i;\n      else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}", "target_program": " static int editDistDP ( String str1 , String str2 , int m , int n ) {\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( str1 . charAt ( i - 1 ) == str2 . charAt ( j - 1 ) ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int editDistDP ( string str1, string str2, int m, int n ) {\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j;\n      else if ( j == 0 ) dp [ i ] [ j ] = i;\n      else if ( str1 [ i - 1 ] == str2 [ j - 1 ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ], dp [ i - 1 ] [ j - 1 ] );\n    }\n  }\n  return dp [ m ] [ n ];\n}", "target_program": " def editDistDP ( str1 , str2 , m , n ) :\n    dp = [ [ 0 for x in range ( n + 1 ) ] for x in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        for j in range ( n + 1 ) :\n            if i == 0 :\n                dp [ i ] [ j ] = j\n            elif j == 0 :\n                dp [ i ] [ j ] = i\n            elif str1 [ i - 1 ] == str2 [ j - 1 ] :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] )\n    return dp [ m ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def countSol ( coeff , start , end , rhs ) :\n    if ( rhs == 0 ) :\n        return 1\n    result = 0\n    for i in range ( start , end + 1 ) :\n        if ( coeff [ i ] <= rhs ) :\n            result += countSol ( coeff , i , end , rhs - coeff [ i ] )\n    return result", "target_program": " static int countSol ( int coeff [ ] , int start , int end , int rhs ) {\n  if ( rhs == 0 ) return 1 ;\n  int result = 0 ;\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff , i , end , rhs - coeff [ i ] ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSol ( coeff , start , end , rhs ) :\n    if ( rhs == 0 ) :\n        return 1\n    result = 0\n    for i in range ( start , end + 1 ) :\n        if ( coeff [ i ] <= rhs ) :\n            result += countSol ( coeff , i , end , rhs - coeff [ i ] )\n    return result", "target_program": " int countSol ( int coeff [ ], int start, int end, int rhs ) {\n  if ( rhs == 0 ) return 1;\n  int result = 0;\n  for ( int i = start;\n  i <= end;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff, i, end, rhs - coeff [ i ] );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSol ( int coeff [ ] , int start , int end , int rhs ) {\n  if ( rhs == 0 ) return 1 ;\n  int result = 0 ;\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff , i , end , rhs - coeff [ i ] ) ;\n  return result ;\n}", "target_program": " def countSol ( coeff , start , end , rhs ) :\n    if ( rhs == 0 ) :\n        return 1\n    result = 0\n    for i in range ( start , end + 1 ) :\n        if ( coeff [ i ] <= rhs ) :\n            result += countSol ( coeff , i , end , rhs - coeff [ i ] )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countSol ( int coeff [ ] , int start , int end , int rhs ) {\n  if ( rhs == 0 ) return 1 ;\n  int result = 0 ;\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff , i , end , rhs - coeff [ i ] ) ;\n  return result ;\n}", "target_program": " int countSol ( int coeff [ ], int start, int end, int rhs ) {\n  if ( rhs == 0 ) return 1;\n  int result = 0;\n  for ( int i = start;\n  i <= end;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff, i, end, rhs - coeff [ i ] );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSol ( int coeff [ ], int start, int end, int rhs ) {\n  if ( rhs == 0 ) return 1;\n  int result = 0;\n  for ( int i = start;\n  i <= end;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff, i, end, rhs - coeff [ i ] );\n  return result;\n}", "target_program": " static int countSol ( int coeff [ ] , int start , int end , int rhs ) {\n  if ( rhs == 0 ) return 1 ;\n  int result = 0 ;\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff , i , end , rhs - coeff [ i ] ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSol ( int coeff [ ], int start, int end, int rhs ) {\n  if ( rhs == 0 ) return 1;\n  int result = 0;\n  for ( int i = start;\n  i <= end;\n  i ++ ) if ( coeff [ i ] <= rhs ) result += countSol ( coeff, i, end, rhs - coeff [ i ] );\n  return result;\n}", "target_program": " def countSol ( coeff , start , end , rhs ) :\n    if ( rhs == 0 ) :\n        return 1\n    result = 0\n    for i in range ( start , end + 1 ) :\n        if ( coeff [ i ] <= rhs ) :\n            result += countSol ( coeff , i , end , rhs - coeff [ i ] )\n    return result"}
{"source": "python", "target": "java", "source_program": " def minheapify ( a , index ) :\n    small = index\n    l = 2 * index + 1\n    r = 2 * index + 2\n    if ( l < n and a [ l ] < a [ small ] ) :\n        small = l\n    if ( r < n and a [ r ] < a [ small ] ) :\n        small = r\n    if ( small != index ) :\n        ( a [ small ] , a [ index ] ) = ( a [ index ] , a [ small ] )\n        minheapify ( a , small )", "target_program": " static void minheapify ( int [ ] a , int index ) {\n  int small = index ;\n  int l = 2 * index + 1 ;\n  int r = 2 * index + 2 ;\n  if ( l < n && a [ l ] < a [ small ] ) small = l ;\n  if ( r < n && a [ r ] < a [ small ] ) small = r ;\n  if ( small != index ) {\n    int t = a [ small ] ;\n    a [ small ] = a [ index ] ;\n    a [ index ] = t ;\n    minheapify ( a , small ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def minheapify ( a , index ) :\n    small = index\n    l = 2 * index + 1\n    r = 2 * index + 2\n    if ( l < n and a [ l ] < a [ small ] ) :\n        small = l\n    if ( r < n and a [ r ] < a [ small ] ) :\n        small = r\n    if ( small != index ) :\n        ( a [ small ] , a [ index ] ) = ( a [ index ] , a [ small ] )\n        minheapify ( a , small )", "target_program": " void minheapify ( int a [ ], int index ) {\n  int small = index;\n  int l = 2 * index + 1;\n  int r = 2 * index + 2;\n  if ( l < n && a [ l ] < a [ small ] ) small = l;\n  if ( r < n && a [ r ] < a [ small ] ) small = r;\n  if ( small != index ) {\n    swap ( a [ small ], a [ index ] );\n    minheapify ( a, small );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void minheapify ( int [ ] a , int index ) {\n  int small = index ;\n  int l = 2 * index + 1 ;\n  int r = 2 * index + 2 ;\n  if ( l < n && a [ l ] < a [ small ] ) small = l ;\n  if ( r < n && a [ r ] < a [ small ] ) small = r ;\n  if ( small != index ) {\n    int t = a [ small ] ;\n    a [ small ] = a [ index ] ;\n    a [ index ] = t ;\n    minheapify ( a , small ) ;\n  }\n}", "target_program": " def minheapify ( a , index ) :\n    small = index\n    l = 2 * index + 1\n    r = 2 * index + 2\n    if ( l < n and a [ l ] < a [ small ] ) :\n        small = l\n    if ( r < n and a [ r ] < a [ small ] ) :\n        small = r\n    if ( small != index ) :\n        ( a [ small ] , a [ index ] ) = ( a [ index ] , a [ small ] )\n        minheapify ( a , small )"}
{"source": "java", "target": "cpp", "source_program": " static void minheapify ( int [ ] a , int index ) {\n  int small = index ;\n  int l = 2 * index + 1 ;\n  int r = 2 * index + 2 ;\n  if ( l < n && a [ l ] < a [ small ] ) small = l ;\n  if ( r < n && a [ r ] < a [ small ] ) small = r ;\n  if ( small != index ) {\n    int t = a [ small ] ;\n    a [ small ] = a [ index ] ;\n    a [ index ] = t ;\n    minheapify ( a , small ) ;\n  }\n}", "target_program": " void minheapify ( int a [ ], int index ) {\n  int small = index;\n  int l = 2 * index + 1;\n  int r = 2 * index + 2;\n  if ( l < n && a [ l ] < a [ small ] ) small = l;\n  if ( r < n && a [ r ] < a [ small ] ) small = r;\n  if ( small != index ) {\n    swap ( a [ small ], a [ index ] );\n    minheapify ( a, small );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void minheapify ( int a [ ], int index ) {\n  int small = index;\n  int l = 2 * index + 1;\n  int r = 2 * index + 2;\n  if ( l < n && a [ l ] < a [ small ] ) small = l;\n  if ( r < n && a [ r ] < a [ small ] ) small = r;\n  if ( small != index ) {\n    swap ( a [ small ], a [ index ] );\n    minheapify ( a, small );\n  }\n}", "target_program": " static void minheapify ( int [ ] a , int index ) {\n  int small = index ;\n  int l = 2 * index + 1 ;\n  int r = 2 * index + 2 ;\n  if ( l < n && a [ l ] < a [ small ] ) small = l ;\n  if ( r < n && a [ r ] < a [ small ] ) small = r ;\n  if ( small != index ) {\n    int t = a [ small ] ;\n    a [ small ] = a [ index ] ;\n    a [ index ] = t ;\n    minheapify ( a , small ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void minheapify ( int a [ ], int index ) {\n  int small = index;\n  int l = 2 * index + 1;\n  int r = 2 * index + 2;\n  if ( l < n && a [ l ] < a [ small ] ) small = l;\n  if ( r < n && a [ r ] < a [ small ] ) small = r;\n  if ( small != index ) {\n    swap ( a [ small ], a [ index ] );\n    minheapify ( a, small );\n  }\n}", "target_program": " def minheapify ( a , index ) :\n    small = index\n    l = 2 * index + 1\n    r = 2 * index + 2\n    if ( l < n and a [ l ] < a [ small ] ) :\n        small = l\n    if ( r < n and a [ r ] < a [ small ] ) :\n        small = r\n    if ( small != index ) :\n        ( a [ small ] , a [ index ] ) = ( a [ index ] , a [ small ] )\n        minheapify ( a , small )"}
{"source": "python", "target": "java", "source_program": " def computeLPSArray ( pat , M , lps ) :\n    len = 0\n    lps [ 0 ]\n    i = 1\n    while i < M :\n        if pat [ i ] == pat [ len ] :\n            len += 1\n            lps [ i ] = len\n            i += 1\n        else :\n            if len != 0 :\n                len = lps [ len - 1 ]\n            else :\n                lps [ i ] = 0\n                i += 1", "target_program": " void computeLPSArray ( String pat , int M , int lps [ ] ) {\n  int len = 0 ;\n  int i = 1 ;\n  lps [ 0 ] = 0 ;\n  while ( i < M ) {\n    if ( pat . charAt ( i ) == pat . charAt ( len ) ) {\n      len ++ ;\n      lps [ i ] = len ;\n      i ++ ;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ] ;\n      }\n      else {\n        lps [ i ] = len ;\n        i ++ ;\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def computeLPSArray ( pat , M , lps ) :\n    len = 0\n    lps [ 0 ]\n    i = 1\n    while i < M :\n        if pat [ i ] == pat [ len ] :\n            len += 1\n            lps [ i ] = len\n            i += 1\n        else :\n            if len != 0 :\n                len = lps [ len - 1 ]\n            else :\n                lps [ i ] = 0\n                i += 1", "target_program": " void computeLPSArray ( char * pat, int M, int * lps ) {\n  int len = 0;\n  lps [ 0 ] = 0;\n  int i = 1;\n  while ( i < M ) {\n    if ( pat [ i ] == pat [ len ] ) {\n      len ++;\n      lps [ i ] = len;\n      i ++;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ];\n      }\n      else {\n        lps [ i ] = 0;\n        i ++;\n      }\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " void computeLPSArray ( String pat , int M , int lps [ ] ) {\n  int len = 0 ;\n  int i = 1 ;\n  lps [ 0 ] = 0 ;\n  while ( i < M ) {\n    if ( pat . charAt ( i ) == pat . charAt ( len ) ) {\n      len ++ ;\n      lps [ i ] = len ;\n      i ++ ;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ] ;\n      }\n      else {\n        lps [ i ] = len ;\n        i ++ ;\n      }\n    }\n  }\n}", "target_program": " def computeLPSArray ( pat , M , lps ) :\n    len = 0\n    lps [ 0 ]\n    i = 1\n    while i < M :\n        if pat [ i ] == pat [ len ] :\n            len += 1\n            lps [ i ] = len\n            i += 1\n        else :\n            if len != 0 :\n                len = lps [ len - 1 ]\n            else :\n                lps [ i ] = 0\n                i += 1"}
{"source": "java", "target": "cpp", "source_program": " void computeLPSArray ( String pat , int M , int lps [ ] ) {\n  int len = 0 ;\n  int i = 1 ;\n  lps [ 0 ] = 0 ;\n  while ( i < M ) {\n    if ( pat . charAt ( i ) == pat . charAt ( len ) ) {\n      len ++ ;\n      lps [ i ] = len ;\n      i ++ ;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ] ;\n      }\n      else {\n        lps [ i ] = len ;\n        i ++ ;\n      }\n    }\n  }\n}", "target_program": " void computeLPSArray ( char * pat, int M, int * lps ) {\n  int len = 0;\n  lps [ 0 ] = 0;\n  int i = 1;\n  while ( i < M ) {\n    if ( pat [ i ] == pat [ len ] ) {\n      len ++;\n      lps [ i ] = len;\n      i ++;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ];\n      }\n      else {\n        lps [ i ] = 0;\n        i ++;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void computeLPSArray ( char * pat, int M, int * lps ) {\n  int len = 0;\n  lps [ 0 ] = 0;\n  int i = 1;\n  while ( i < M ) {\n    if ( pat [ i ] == pat [ len ] ) {\n      len ++;\n      lps [ i ] = len;\n      i ++;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ];\n      }\n      else {\n        lps [ i ] = 0;\n        i ++;\n      }\n    }\n  }\n}", "target_program": " void computeLPSArray ( String pat , int M , int lps [ ] ) {\n  int len = 0 ;\n  int i = 1 ;\n  lps [ 0 ] = 0 ;\n  while ( i < M ) {\n    if ( pat . charAt ( i ) == pat . charAt ( len ) ) {\n      len ++ ;\n      lps [ i ] = len ;\n      i ++ ;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ] ;\n      }\n      else {\n        lps [ i ] = len ;\n        i ++ ;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void computeLPSArray ( char * pat, int M, int * lps ) {\n  int len = 0;\n  lps [ 0 ] = 0;\n  int i = 1;\n  while ( i < M ) {\n    if ( pat [ i ] == pat [ len ] ) {\n      len ++;\n      lps [ i ] = len;\n      i ++;\n    }\n    else {\n      if ( len != 0 ) {\n        len = lps [ len - 1 ];\n      }\n      else {\n        lps [ i ] = 0;\n        i ++;\n      }\n    }\n  }\n}", "target_program": " def computeLPSArray ( pat , M , lps ) :\n    len = 0\n    lps [ 0 ]\n    i = 1\n    while i < M :\n        if pat [ i ] == pat [ len ] :\n            len += 1\n            lps [ i ] = len\n            i += 1\n        else :\n            if len != 0 :\n                len = lps [ len - 1 ]\n            else :\n                lps [ i ] = 0\n                i += 1"}
{"source": "python", "target": "java", "source_program": " def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff", "target_program": " static int findMinDiff ( int [ ] arr , int n ) {\n  int diff = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( ( arr [ i ] - arr [ j ] ) ) < diff ) diff = Math . abs ( ( arr [ i ] - arr [ j ] ) ) ;\n  return diff ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff", "target_program": " int findMinDiff ( int arr [ ], int n ) {\n  int diff = INT_MAX;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] );\n  return diff;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMinDiff ( int [ ] arr , int n ) {\n  int diff = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( ( arr [ i ] - arr [ j ] ) ) < diff ) diff = Math . abs ( ( arr [ i ] - arr [ j ] ) ) ;\n  return diff ;\n}", "target_program": " def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff"}
{"source": "java", "target": "cpp", "source_program": " static int findMinDiff ( int [ ] arr , int n ) {\n  int diff = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( ( arr [ i ] - arr [ j ] ) ) < diff ) diff = Math . abs ( ( arr [ i ] - arr [ j ] ) ) ;\n  return diff ;\n}", "target_program": " int findMinDiff ( int arr [ ], int n ) {\n  int diff = INT_MAX;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] );\n  return diff;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMinDiff ( int arr [ ], int n ) {\n  int diff = INT_MAX;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] );\n  return diff;\n}", "target_program": " static int findMinDiff ( int [ ] arr , int n ) {\n  int diff = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( ( arr [ i ] - arr [ j ] ) ) < diff ) diff = Math . abs ( ( arr [ i ] - arr [ j ] ) ) ;\n  return diff ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMinDiff ( int arr [ ], int n ) {\n  int diff = INT_MAX;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( arr [ i ] - arr [ j ] ) < diff ) diff = abs ( arr [ i ] - arr [ j ] );\n  return diff;\n}", "target_program": " def findMinDiff ( arr , n ) :\n    diff = 10 ** 20\n    for i in range ( n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] - arr [ j ] ) < diff :\n                diff = abs ( arr [ i ] - arr [ j ] )\n    return diff"}
{"source": "python", "target": "java", "source_program": " def Print ( n , k ) :\n    rem = 1\n    for i in range ( 0 , k ) :\n        print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = \"\" )\n        rem = ( 10 * rem ) % n", "target_program": " static void print ( int n , int k ) {\n  int rem = 1 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    System . out . print ( ( 10 * rem ) / n ) ;\n    rem = ( 10 * rem ) % n ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def Print ( n , k ) :\n    rem = 1\n    for i in range ( 0 , k ) :\n        print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = \"\" )\n        rem = ( 10 * rem ) % n", "target_program": " void print ( int n, int k ) {\n  int rem = 1;\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    cout << ( 10 * rem ) / n;\n    rem = ( 10 * rem ) % n;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void print ( int n , int k ) {\n  int rem = 1 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    System . out . print ( ( 10 * rem ) / n ) ;\n    rem = ( 10 * rem ) % n ;\n  }\n}", "target_program": " def Print ( n , k ) :\n    rem = 1\n    for i in range ( 0 , k ) :\n        print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = \"\" )\n        rem = ( 10 * rem ) % n"}
{"source": "java", "target": "cpp", "source_program": " static void print ( int n , int k ) {\n  int rem = 1 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    System . out . print ( ( 10 * rem ) / n ) ;\n    rem = ( 10 * rem ) % n ;\n  }\n}", "target_program": " void print ( int n, int k ) {\n  int rem = 1;\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    cout << ( 10 * rem ) / n;\n    rem = ( 10 * rem ) % n;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void print ( int n, int k ) {\n  int rem = 1;\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    cout << ( 10 * rem ) / n;\n    rem = ( 10 * rem ) % n;\n  }\n}", "target_program": " static void print ( int n , int k ) {\n  int rem = 1 ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    System . out . print ( ( 10 * rem ) / n ) ;\n    rem = ( 10 * rem ) % n ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void print ( int n, int k ) {\n  int rem = 1;\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    cout << ( 10 * rem ) / n;\n    rem = ( 10 * rem ) % n;\n  }\n}", "target_program": " def Print ( n , k ) :\n    rem = 1\n    for i in range ( 0 , k ) :\n        print ( math.floor ( ( ( 10 * rem ) / n ) ) , end = \"\" )\n        rem = ( 10 * rem ) % n"}
{"source": "python", "target": "java", "source_program": " def groupElements ( arr , n ) :\n    visited = [ False ] * n\n    for i in range ( 0 , n ) :\n        visited [ i ] = False\n    for i in range ( 0 , n ) :\n        if ( visited [ i ] == False ) :\n            print ( arr [ i ] , end = \" \" )\n            for j in range ( i + 1 , n ) :\n                if ( arr [ i ] == arr [ j ] ) :\n                    print ( arr [ i ] , end = \" \" )\n                    visited [ j ] = True", "target_program": " static void groupElements ( int arr [ ] , int n ) {\n  boolean visited [ ] = new boolean [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    visited [ i ] = false ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      System . out . print ( arr [ i ] + \" \" ) ;\n      for ( int j = i + 1 ;\n      j < n ;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          System . out . print ( arr [ i ] + \" \" ) ;\n          visited [ j ] = true ;\n        }\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def groupElements ( arr , n ) :\n    visited = [ False ] * n\n    for i in range ( 0 , n ) :\n        visited [ i ] = False\n    for i in range ( 0 , n ) :\n        if ( visited [ i ] == False ) :\n            print ( arr [ i ] , end = \" \" )\n            for j in range ( i + 1 , n ) :\n                if ( arr [ i ] == arr [ j ] ) :\n                    print ( arr [ i ] , end = \" \" )\n                    visited [ j ] = True", "target_program": " void groupElements ( int arr [ ], int n ) {\n  bool * visited = new bool [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) visited [ i ] = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      cout << arr [ i ] << \" \";\n      for ( int j = i + 1;\n      j < n;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          cout << arr [ i ] << \" \";\n          visited [ j ] = true;\n        }\n      }\n    }\n  }\n  delete [ ] visited;\n}"}
{"source": "java", "target": "python", "source_program": " static void groupElements ( int arr [ ] , int n ) {\n  boolean visited [ ] = new boolean [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    visited [ i ] = false ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      System . out . print ( arr [ i ] + \" \" ) ;\n      for ( int j = i + 1 ;\n      j < n ;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          System . out . print ( arr [ i ] + \" \" ) ;\n          visited [ j ] = true ;\n        }\n      }\n    }\n  }\n}", "target_program": " def groupElements ( arr , n ) :\n    visited = [ False ] * n\n    for i in range ( 0 , n ) :\n        visited [ i ] = False\n    for i in range ( 0 , n ) :\n        if ( visited [ i ] == False ) :\n            print ( arr [ i ] , end = \" \" )\n            for j in range ( i + 1 , n ) :\n                if ( arr [ i ] == arr [ j ] ) :\n                    print ( arr [ i ] , end = \" \" )\n                    visited [ j ] = True"}
{"source": "java", "target": "cpp", "source_program": " static void groupElements ( int arr [ ] , int n ) {\n  boolean visited [ ] = new boolean [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    visited [ i ] = false ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      System . out . print ( arr [ i ] + \" \" ) ;\n      for ( int j = i + 1 ;\n      j < n ;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          System . out . print ( arr [ i ] + \" \" ) ;\n          visited [ j ] = true ;\n        }\n      }\n    }\n  }\n}", "target_program": " void groupElements ( int arr [ ], int n ) {\n  bool * visited = new bool [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) visited [ i ] = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      cout << arr [ i ] << \" \";\n      for ( int j = i + 1;\n      j < n;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          cout << arr [ i ] << \" \";\n          visited [ j ] = true;\n        }\n      }\n    }\n  }\n  delete [ ] visited;\n}"}
{"source": "cpp", "target": "java", "source_program": " void groupElements ( int arr [ ], int n ) {\n  bool * visited = new bool [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) visited [ i ] = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      cout << arr [ i ] << \" \";\n      for ( int j = i + 1;\n      j < n;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          cout << arr [ i ] << \" \";\n          visited [ j ] = true;\n        }\n      }\n    }\n  }\n  delete [ ] visited;\n}", "target_program": " static void groupElements ( int arr [ ] , int n ) {\n  boolean visited [ ] = new boolean [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    visited [ i ] = false ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      System . out . print ( arr [ i ] + \" \" ) ;\n      for ( int j = i + 1 ;\n      j < n ;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          System . out . print ( arr [ i ] + \" \" ) ;\n          visited [ j ] = true ;\n        }\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void groupElements ( int arr [ ], int n ) {\n  bool * visited = new bool [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) visited [ i ] = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! visited [ i ] ) {\n      cout << arr [ i ] << \" \";\n      for ( int j = i + 1;\n      j < n;\n      j ++ ) {\n        if ( arr [ i ] == arr [ j ] ) {\n          cout << arr [ i ] << \" \";\n          visited [ j ] = true;\n        }\n      }\n    }\n  }\n  delete [ ] visited;\n}", "target_program": " def groupElements ( arr , n ) :\n    visited = [ False ] * n\n    for i in range ( 0 , n ) :\n        visited [ i ] = False\n    for i in range ( 0 , n ) :\n        if ( visited [ i ] == False ) :\n            print ( arr [ i ] , end = \" \" )\n            for j in range ( i + 1 , n ) :\n                if ( arr [ i ] == arr [ j ] ) :\n                    print ( arr [ i ] , end = \" \" )\n                    visited [ j ] = True"}
{"source": "python", "target": "java", "source_program": " def checkIsAP ( arr , n ) :\n    if ( n == 1 ) : return True\n    arr.sort ( )\n    d = arr [ 1 ] - arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if ( arr [ i ] - arr [ i - 1 ] != d ) :\n            return False\n    return True", "target_program": " static boolean checkIsAP ( int arr [ ] , int n ) {\n  if ( n == 1 ) return true ;\n  Arrays . sort ( arr ) ;\n  int d = arr [ 1 ] - arr [ 0 ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkIsAP ( arr , n ) :\n    if ( n == 1 ) : return True\n    arr.sort ( )\n    d = arr [ 1 ] - arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if ( arr [ i ] - arr [ i - 1 ] != d ) :\n            return False\n    return True", "target_program": " bool checkIsAP ( int arr [ ], int n ) {\n  if ( n == 1 ) return true;\n  sort ( arr, arr + n );\n  int d = arr [ 1 ] - arr [ 0 ];\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkIsAP ( int arr [ ] , int n ) {\n  if ( n == 1 ) return true ;\n  Arrays . sort ( arr ) ;\n  int d = arr [ 1 ] - arr [ 0 ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;\n  return true ;\n}", "target_program": " def checkIsAP ( arr , n ) :\n    if ( n == 1 ) : return True\n    arr.sort ( )\n    d = arr [ 1 ] - arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if ( arr [ i ] - arr [ i - 1 ] != d ) :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkIsAP ( int arr [ ] , int n ) {\n  if ( n == 1 ) return true ;\n  Arrays . sort ( arr ) ;\n  int d = arr [ 1 ] - arr [ 0 ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;\n  return true ;\n}", "target_program": " bool checkIsAP ( int arr [ ], int n ) {\n  if ( n == 1 ) return true;\n  sort ( arr, arr + n );\n  int d = arr [ 1 ] - arr [ 0 ];\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkIsAP ( int arr [ ], int n ) {\n  if ( n == 1 ) return true;\n  sort ( arr, arr + n );\n  int d = arr [ 1 ] - arr [ 0 ];\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false;\n  return true;\n}", "target_program": " static boolean checkIsAP ( int arr [ ] , int n ) {\n  if ( n == 1 ) return true ;\n  Arrays . sort ( arr ) ;\n  int d = arr [ 1 ] - arr [ 0 ] ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkIsAP ( int arr [ ], int n ) {\n  if ( n == 1 ) return true;\n  sort ( arr, arr + n );\n  int d = arr [ 1 ] - arr [ 0 ];\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( arr [ i ] - arr [ i - 1 ] != d ) return false;\n  return true;\n}", "target_program": " def checkIsAP ( arr , n ) :\n    if ( n == 1 ) : return True\n    arr.sort ( )\n    d = arr [ 1 ] - arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if ( arr [ i ] - arr [ i - 1 ] != d ) :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def findPosition ( k , n ) :\n    f1 = 0\n    f2 = 1\n    i = 2 ;\n    while i != 0 :\n        f3 = f1 + f2 ;\n        f1 = f2 ;\n        f2 = f3 ;\n        if f2 % k == 0 :\n            return n * i\n        i += 1\n    return", "target_program": " public static int findPosition ( int k , int n ) {\n  long f1 = 0 , f2 = 1 , f3 ;\n  int i = 2 ;\n  while ( i != 0 ) {\n    f3 = f1 + f2 ;\n    f1 = f2 ;\n    f2 = f3 ;\n    if ( f2 % k == 0 ) {\n      return n * i ;\n    }\n    i ++ ;\n  }\n  return 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findPosition ( k , n ) :\n    f1 = 0\n    f2 = 1\n    i = 2 ;\n    while i != 0 :\n        f3 = f1 + f2 ;\n        f1 = f2 ;\n        f2 = f3 ;\n        if f2 % k == 0 :\n            return n * i\n        i += 1\n    return", "target_program": " int findPosition ( int k, int n ) {\n  unsigned long long int f1 = 0, f2 = 1, f3;\n  for ( int i = 2;\n  i <= MAX;\n  i ++ ) {\n    f3 = f1 + f2;\n    f1 = f2;\n    f2 = f3;\n    if ( f2 % k == 0 ) return n * i;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static int findPosition ( int k , int n ) {\n  long f1 = 0 , f2 = 1 , f3 ;\n  int i = 2 ;\n  while ( i != 0 ) {\n    f3 = f1 + f2 ;\n    f1 = f2 ;\n    f2 = f3 ;\n    if ( f2 % k == 0 ) {\n      return n * i ;\n    }\n    i ++ ;\n  }\n  return 0 ;\n}", "target_program": " def findPosition ( k , n ) :\n    f1 = 0\n    f2 = 1\n    i = 2 ;\n    while i != 0 :\n        f3 = f1 + f2 ;\n        f1 = f2 ;\n        f2 = f3 ;\n        if f2 % k == 0 :\n            return n * i\n        i += 1\n    return"}
{"source": "java", "target": "cpp", "source_program": " public static int findPosition ( int k , int n ) {\n  long f1 = 0 , f2 = 1 , f3 ;\n  int i = 2 ;\n  while ( i != 0 ) {\n    f3 = f1 + f2 ;\n    f1 = f2 ;\n    f2 = f3 ;\n    if ( f2 % k == 0 ) {\n      return n * i ;\n    }\n    i ++ ;\n  }\n  return 0 ;\n}", "target_program": " int findPosition ( int k, int n ) {\n  unsigned long long int f1 = 0, f2 = 1, f3;\n  for ( int i = 2;\n  i <= MAX;\n  i ++ ) {\n    f3 = f1 + f2;\n    f1 = f2;\n    f2 = f3;\n    if ( f2 % k == 0 ) return n * i;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int findPosition ( int k, int n ) {\n  unsigned long long int f1 = 0, f2 = 1, f3;\n  for ( int i = 2;\n  i <= MAX;\n  i ++ ) {\n    f3 = f1 + f2;\n    f1 = f2;\n    f2 = f3;\n    if ( f2 % k == 0 ) return n * i;\n  }\n}", "target_program": " public static int findPosition ( int k , int n ) {\n  long f1 = 0 , f2 = 1 , f3 ;\n  int i = 2 ;\n  while ( i != 0 ) {\n    f3 = f1 + f2 ;\n    f1 = f2 ;\n    f2 = f3 ;\n    if ( f2 % k == 0 ) {\n      return n * i ;\n    }\n    i ++ ;\n  }\n  return 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findPosition ( int k, int n ) {\n  unsigned long long int f1 = 0, f2 = 1, f3;\n  for ( int i = 2;\n  i <= MAX;\n  i ++ ) {\n    f3 = f1 + f2;\n    f1 = f2;\n    f2 = f3;\n    if ( f2 % k == 0 ) return n * i;\n  }\n}", "target_program": " def findPosition ( k , n ) :\n    f1 = 0\n    f2 = 1\n    i = 2 ;\n    while i != 0 :\n        f3 = f1 + f2 ;\n        f1 = f2 ;\n        f2 = f3 ;\n        if f2 % k == 0 :\n            return n * i\n        i += 1\n    return"}
{"source": "python", "target": "java", "source_program": " def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    arr.sort ( )\n    l = 0\n    r = 0\n    while r < n :\n        if arr [ r ] - arr [ l ] == k :\n            count += 1\n            l += 1\n            r += 1\n        elif arr [ r ] - arr [ l ] > k :\n            l += 1\n        else :\n            r += 1\n    return count", "target_program": " static int countPairsWithDiffK ( int arr [ ] , int n , int k ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  int l = 0 ;\n  int r = 0 ;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++ ;\n    else r ++ ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    arr.sort ( )\n    l = 0\n    r = 0\n    while r < n :\n        if arr [ r ] - arr [ l ] == k :\n            count += 1\n            l += 1\n            r += 1\n        elif arr [ r ] - arr [ l ] > k :\n            l += 1\n        else :\n            r += 1\n    return count", "target_program": " int countPairsWithDiffK ( int arr [ ], int n, int k ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  int l = 0;\n  int r = 0;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++;\n      l ++;\n      r ++;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++;\n    else r ++;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairsWithDiffK ( int arr [ ] , int n , int k ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  int l = 0 ;\n  int r = 0 ;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++ ;\n    else r ++ ;\n  }\n  return count ;\n}", "target_program": " def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    arr.sort ( )\n    l = 0\n    r = 0\n    while r < n :\n        if arr [ r ] - arr [ l ] == k :\n            count += 1\n            l += 1\n            r += 1\n        elif arr [ r ] - arr [ l ] > k :\n            l += 1\n        else :\n            r += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countPairsWithDiffK ( int arr [ ] , int n , int k ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  int l = 0 ;\n  int r = 0 ;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++ ;\n    else r ++ ;\n  }\n  return count ;\n}", "target_program": " int countPairsWithDiffK ( int arr [ ], int n, int k ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  int l = 0;\n  int r = 0;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++;\n      l ++;\n      r ++;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++;\n    else r ++;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairsWithDiffK ( int arr [ ], int n, int k ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  int l = 0;\n  int r = 0;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++;\n      l ++;\n      r ++;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++;\n    else r ++;\n  }\n  return count;\n}", "target_program": " static int countPairsWithDiffK ( int arr [ ] , int n , int k ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  int l = 0 ;\n  int r = 0 ;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++ ;\n    else r ++ ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairsWithDiffK ( int arr [ ], int n, int k ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  int l = 0;\n  int r = 0;\n  while ( r < n ) {\n    if ( arr [ r ] - arr [ l ] == k ) {\n      count ++;\n      l ++;\n      r ++;\n    }\n    else if ( arr [ r ] - arr [ l ] > k ) l ++;\n    else r ++;\n  }\n  return count;\n}", "target_program": " def countPairsWithDiffK ( arr , n , k ) :\n    count = 0\n    arr.sort ( )\n    l = 0\n    r = 0\n    while r < n :\n        if arr [ r ] - arr [ l ] == k :\n            count += 1\n            l += 1\n            r += 1\n        elif arr [ r ] - arr [ l ] > k :\n            l += 1\n        else :\n            r += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def countNum ( arr , n ) :\n    count = 0\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1 ;\n    return count", "target_program": " static int countNum ( int [ ] arr , int n ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNum ( arr , n ) :\n    count = 0\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1 ;\n    return count", "target_program": " int countNum ( int arr [ ], int n ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNum ( int [ ] arr , int n ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ;\n  return count ;\n}", "target_program": " def countNum ( arr , n ) :\n    count = 0\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1 ;\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countNum ( int [ ] arr , int n ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ;\n  return count ;\n}", "target_program": " int countNum ( int arr [ ], int n ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countNum ( int arr [ ], int n ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1;\n  return count;\n}", "target_program": " static int countNum ( int [ ] arr , int n ) {\n  int count = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1 ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countNum ( int arr [ ], int n ) {\n  int count = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] != arr [ i + 1 ] && arr [ i ] != arr [ i + 1 ] - 1 ) count += arr [ i + 1 ] - arr [ i ] - 1;\n  return count;\n}", "target_program": " def countNum ( arr , n ) :\n    count = 0\n    arr.sort ( )\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] != arr [ i + 1 ] and arr [ i ] != arr [ i + 1 ] - 1 ) :\n            count += arr [ i + 1 ] - arr [ i ] - 1 ;\n    return count"}
{"source": "python", "target": "java", "source_program": " def subArray ( arr , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            for k in range ( i , j + 1 ) :\n                print ( arr [ k ] , end = \"\" )\n            print ( \"\\n\" , end = \"\" )", "target_program": " static void subArray ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      for ( int k = i ;\n      k <= j ;\n      k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def subArray ( arr , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            for k in range ( i , j + 1 ) :\n                print ( arr [ k ] , end = \"\" )\n            print ( \"\\n\" , end = \"\" )", "target_program": " void subArray ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      for ( int k = i;\n      k <= j;\n      k ++ ) cout << arr [ k ] << \" \";\n      cout << endl;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void subArray ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      for ( int k = i ;\n      k <= j ;\n      k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n    }\n  }\n}", "target_program": " def subArray ( arr , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            for k in range ( i , j + 1 ) :\n                print ( arr [ k ] , end = \"\" )\n            print ( \"\\n\" , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void subArray ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      for ( int k = i ;\n      k <= j ;\n      k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n    }\n  }\n}", "target_program": " void subArray ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      for ( int k = i;\n      k <= j;\n      k ++ ) cout << arr [ k ] << \" \";\n      cout << endl;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void subArray ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      for ( int k = i;\n      k <= j;\n      k ++ ) cout << arr [ k ] << \" \";\n      cout << endl;\n    }\n  }\n}", "target_program": " static void subArray ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      for ( int k = i ;\n      k <= j ;\n      k ++ ) System . out . print ( arr [ k ] + \" \" ) ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void subArray ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      for ( int k = i;\n      k <= j;\n      k ++ ) cout << arr [ k ] << \" \";\n      cout << endl;\n    }\n  }\n}", "target_program": " def subArray ( arr , n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( i , n ) :\n            for k in range ( i , j + 1 ) :\n                print ( arr [ k ] , end = \"\" )\n            print ( \"\\n\" , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def maximumSum ( a , n ) :\n    global M ;\n    for i in range ( 0 , n ) :\n        a [ i ].sort ( ) ;\n    sum = a [ n - 1 ] [ M - 1 ] ;\n    prev = a [ n - 1 ] [ M - 1 ] ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( a [ i ] [ j ] < prev ) :\n                prev = a [ i ] [ j ] ;\n                sum += prev ;\n                break ;\n        if ( j == - 1 ) :\n            return 0 ;\n    return sum ;", "target_program": " static int maximumSum ( int a [ ] [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sort ( a , i , n ) ;\n  int sum = a [ n - 1 ] [ M - 1 ] ;\n  int prev = a [ n - 1 ] [ M - 1 ] ;\n  int i , j ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ] ;\n        sum += prev ;\n        break ;\n      }\n    }\n    if ( j == - 1 ) return 0 ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumSum ( a , n ) :\n    global M ;\n    for i in range ( 0 , n ) :\n        a [ i ].sort ( ) ;\n    sum = a [ n - 1 ] [ M - 1 ] ;\n    prev = a [ n - 1 ] [ M - 1 ] ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( a [ i ] [ j ] < prev ) :\n                prev = a [ i ] [ j ] ;\n                sum += prev ;\n                break ;\n        if ( j == - 1 ) :\n            return 0 ;\n    return sum ;", "target_program": " int maximumSum ( int a [ ] [ M ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( a [ i ], a [ i ] + M );\n  int sum = a [ n - 1 ] [ M - 1 ];\n  int prev = a [ n - 1 ] [ M - 1 ];\n  int i, j;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    for ( j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ];\n        sum += prev;\n        break;\n      }\n    }\n    if ( j == - 1 ) return 0;\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumSum ( int a [ ] [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sort ( a , i , n ) ;\n  int sum = a [ n - 1 ] [ M - 1 ] ;\n  int prev = a [ n - 1 ] [ M - 1 ] ;\n  int i , j ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ] ;\n        sum += prev ;\n        break ;\n      }\n    }\n    if ( j == - 1 ) return 0 ;\n  }\n  return sum ;\n}", "target_program": " def maximumSum ( a , n ) :\n    global M ;\n    for i in range ( 0 , n ) :\n        a [ i ].sort ( ) ;\n    sum = a [ n - 1 ] [ M - 1 ] ;\n    prev = a [ n - 1 ] [ M - 1 ] ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( a [ i ] [ j ] < prev ) :\n                prev = a [ i ] [ j ] ;\n                sum += prev ;\n                break ;\n        if ( j == - 1 ) :\n            return 0 ;\n    return sum ;"}
{"source": "java", "target": "cpp", "source_program": " static int maximumSum ( int a [ ] [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sort ( a , i , n ) ;\n  int sum = a [ n - 1 ] [ M - 1 ] ;\n  int prev = a [ n - 1 ] [ M - 1 ] ;\n  int i , j ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ] ;\n        sum += prev ;\n        break ;\n      }\n    }\n    if ( j == - 1 ) return 0 ;\n  }\n  return sum ;\n}", "target_program": " int maximumSum ( int a [ ] [ M ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( a [ i ], a [ i ] + M );\n  int sum = a [ n - 1 ] [ M - 1 ];\n  int prev = a [ n - 1 ] [ M - 1 ];\n  int i, j;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    for ( j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ];\n        sum += prev;\n        break;\n      }\n    }\n    if ( j == - 1 ) return 0;\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumSum ( int a [ ] [ M ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( a [ i ], a [ i ] + M );\n  int sum = a [ n - 1 ] [ M - 1 ];\n  int prev = a [ n - 1 ] [ M - 1 ];\n  int i, j;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    for ( j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ];\n        sum += prev;\n        break;\n      }\n    }\n    if ( j == - 1 ) return 0;\n  }\n  return sum;\n}", "target_program": " static int maximumSum ( int a [ ] [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sort ( a , i , n ) ;\n  int sum = a [ n - 1 ] [ M - 1 ] ;\n  int prev = a [ n - 1 ] [ M - 1 ] ;\n  int i , j ;\n  for ( i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( j = M - 1 ;\n    j >= 0 ;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ] ;\n        sum += prev ;\n        break ;\n      }\n    }\n    if ( j == - 1 ) return 0 ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumSum ( int a [ ] [ M ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) sort ( a [ i ], a [ i ] + M );\n  int sum = a [ n - 1 ] [ M - 1 ];\n  int prev = a [ n - 1 ] [ M - 1 ];\n  int i, j;\n  for ( i = n - 2;\n  i >= 0;\n  i -- ) {\n    for ( j = M - 1;\n    j >= 0;\n    j -- ) {\n      if ( a [ i ] [ j ] < prev ) {\n        prev = a [ i ] [ j ];\n        sum += prev;\n        break;\n      }\n    }\n    if ( j == - 1 ) return 0;\n  }\n  return sum;\n}", "target_program": " def maximumSum ( a , n ) :\n    global M ;\n    for i in range ( 0 , n ) :\n        a [ i ].sort ( ) ;\n    sum = a [ n - 1 ] [ M - 1 ] ;\n    prev = a [ n - 1 ] [ M - 1 ] ;\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        for j in range ( M - 1 , - 1 , - 1 ) :\n            if ( a [ i ] [ j ] < prev ) :\n                prev = a [ i ] [ j ] ;\n                sum += prev ;\n                break ;\n        if ( j == - 1 ) :\n            return 0 ;\n    return sum ;"}
{"source": "python", "target": "java", "source_program": " def factorial ( n ) :\n    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) ;", "target_program": " static int factorial ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * factorial ( n - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def factorial ( n ) :\n    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) ;", "target_program": " unsigned int factorial ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * factorial ( n - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int factorial ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * factorial ( n - 1 ) ;\n}", "target_program": " def factorial ( n ) :\n    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int factorial ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * factorial ( n - 1 ) ;\n}", "target_program": " unsigned int factorial ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * factorial ( n - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int factorial ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * factorial ( n - 1 );\n}", "target_program": " static int factorial ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * factorial ( n - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int factorial ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * factorial ( n - 1 );\n}", "target_program": " def factorial ( n ) :\n    return 1 if ( n == 1 or n == 0 ) else n * factorial ( n - 1 ) ;"}
{"source": "python", "target": "java", "source_program": " def printSquares ( n ) :\n    square = 0 ; prev_x = 0 ;\n    for x in range ( 0 , n ) :\n        square = ( square + x + prev_x )\n        print ( square , end = \" \" )\n        prev_x = x", "target_program": " static void printSquares ( int n ) {\n  int square = 0 , prev_x = 0 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    square = ( square + x + prev_x ) ;\n    System . out . print ( square + \" \" ) ;\n    prev_x = x ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSquares ( n ) :\n    square = 0 ; prev_x = 0 ;\n    for x in range ( 0 , n ) :\n        square = ( square + x + prev_x )\n        print ( square , end = \" \" )\n        prev_x = x", "target_program": " void printSquares ( int n ) {\n  int square = 0, prev_x = 0;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    square = ( square + x + prev_x );\n    cout << square << \" \";\n    prev_x = x;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printSquares ( int n ) {\n  int square = 0 , prev_x = 0 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    square = ( square + x + prev_x ) ;\n    System . out . print ( square + \" \" ) ;\n    prev_x = x ;\n  }\n}", "target_program": " def printSquares ( n ) :\n    square = 0 ; prev_x = 0 ;\n    for x in range ( 0 , n ) :\n        square = ( square + x + prev_x )\n        print ( square , end = \" \" )\n        prev_x = x"}
{"source": "java", "target": "cpp", "source_program": " static void printSquares ( int n ) {\n  int square = 0 , prev_x = 0 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    square = ( square + x + prev_x ) ;\n    System . out . print ( square + \" \" ) ;\n    prev_x = x ;\n  }\n}", "target_program": " void printSquares ( int n ) {\n  int square = 0, prev_x = 0;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    square = ( square + x + prev_x );\n    cout << square << \" \";\n    prev_x = x;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSquares ( int n ) {\n  int square = 0, prev_x = 0;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    square = ( square + x + prev_x );\n    cout << square << \" \";\n    prev_x = x;\n  }\n}", "target_program": " static void printSquares ( int n ) {\n  int square = 0 , prev_x = 0 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    square = ( square + x + prev_x ) ;\n    System . out . print ( square + \" \" ) ;\n    prev_x = x ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSquares ( int n ) {\n  int square = 0, prev_x = 0;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    square = ( square + x + prev_x );\n    cout << square << \" \";\n    prev_x = x;\n  }\n}", "target_program": " def printSquares ( n ) :\n    square = 0 ; prev_x = 0 ;\n    for x in range ( 0 , n ) :\n        square = ( square + x + prev_x )\n        print ( square , end = \" \" )\n        prev_x = x"}
{"source": "python", "target": "java", "source_program": " def concatenate ( a , b , c , n1 , n2 ) :\n    i = - 1\n    for i in range ( n1 ) :\n        c [ i ] = a [ i ]\n    for j in range ( n2 ) :\n        c [ i ] = b [ j ]\n        i += 1", "target_program": " static void concatenate ( char a [ ] , char b [ ] , char c [ ] , int n1 , int n2 ) {\n  int i ;\n  for ( i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    c [ i ] = a [ i ] ;\n  }\n  for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) {\n    c [ i ++ ] = b [ j ] ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def concatenate ( a , b , c , n1 , n2 ) :\n    i = - 1\n    for i in range ( n1 ) :\n        c [ i ] = a [ i ]\n    for j in range ( n2 ) :\n        c [ i ] = b [ j ]\n        i += 1", "target_program": " void concatenate ( char a [ ], char b [ ], char c [ ], int n1, int n2 ) {\n  int i;\n  for ( i = 0;\n  i < n1;\n  i ++ ) c [ i ] = a [ i ];\n  for ( int j = 0;\n  j < n2;\n  j ++ ) c [ i ++ ] = b [ j ];\n  c [ i ] = '\\0';\n}"}
{"source": "java", "target": "python", "source_program": " static void concatenate ( char a [ ] , char b [ ] , char c [ ] , int n1 , int n2 ) {\n  int i ;\n  for ( i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    c [ i ] = a [ i ] ;\n  }\n  for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) {\n    c [ i ++ ] = b [ j ] ;\n  }\n}", "target_program": " def concatenate ( a , b , c , n1 , n2 ) :\n    i = - 1\n    for i in range ( n1 ) :\n        c [ i ] = a [ i ]\n    for j in range ( n2 ) :\n        c [ i ] = b [ j ]\n        i += 1"}
{"source": "java", "target": "cpp", "source_program": " static void concatenate ( char a [ ] , char b [ ] , char c [ ] , int n1 , int n2 ) {\n  int i ;\n  for ( i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    c [ i ] = a [ i ] ;\n  }\n  for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) {\n    c [ i ++ ] = b [ j ] ;\n  }\n}", "target_program": " void concatenate ( char a [ ], char b [ ], char c [ ], int n1, int n2 ) {\n  int i;\n  for ( i = 0;\n  i < n1;\n  i ++ ) c [ i ] = a [ i ];\n  for ( int j = 0;\n  j < n2;\n  j ++ ) c [ i ++ ] = b [ j ];\n  c [ i ] = '\\0';\n}"}
{"source": "cpp", "target": "java", "source_program": " void concatenate ( char a [ ], char b [ ], char c [ ], int n1, int n2 ) {\n  int i;\n  for ( i = 0;\n  i < n1;\n  i ++ ) c [ i ] = a [ i ];\n  for ( int j = 0;\n  j < n2;\n  j ++ ) c [ i ++ ] = b [ j ];\n  c [ i ] = '\\0';\n}", "target_program": " static void concatenate ( char a [ ] , char b [ ] , char c [ ] , int n1 , int n2 ) {\n  int i ;\n  for ( i = 0 ;\n  i < n1 ;\n  i ++ ) {\n    c [ i ] = a [ i ] ;\n  }\n  for ( int j = 0 ;\n  j < n2 ;\n  j ++ ) {\n    c [ i ++ ] = b [ j ] ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void concatenate ( char a [ ], char b [ ], char c [ ], int n1, int n2 ) {\n  int i;\n  for ( i = 0;\n  i < n1;\n  i ++ ) c [ i ] = a [ i ];\n  for ( int j = 0;\n  j < n2;\n  j ++ ) c [ i ++ ] = b [ j ];\n  c [ i ] = '\\0';\n}", "target_program": " def concatenate ( a , b , c , n1 , n2 ) :\n    i = - 1\n    for i in range ( n1 ) :\n        c [ i ] = a [ i ]\n    for j in range ( n2 ) :\n        c [ i ] = b [ j ]\n        i += 1"}
{"source": "python", "target": "java", "source_program": " def printClosest ( ar1 , ar2 , m , n , x ) :\n    diff = sys.maxsize\n    l = 0\n    r = n - 1\n    while ( l < m and r >= 0 ) :\n        if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( ar1 [ l ] + ar2 [ r ] - x )\n        if ar1 [ l ] + ar2 [ r ] > x :\n            r = r - 1\n        else :\n            l = l + 1\n    print ( \"The closest pair is [\" , ar1 [ res_l ] , \",\" , ar2 [ res_r ] , \"]\" )", "target_program": " void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n , int x ) {\n  int diff = Integer . MAX_VALUE ;\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . print ( \"The closest pair is [\" + ar1 [ res_l ] + \", \" + ar2 [ res_r ] + \"]\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printClosest ( ar1 , ar2 , m , n , x ) :\n    diff = sys.maxsize\n    l = 0\n    r = n - 1\n    while ( l < m and r >= 0 ) :\n        if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( ar1 [ l ] + ar2 [ r ] - x )\n        if ar1 [ l ] + ar2 [ r ] > x :\n            r = r - 1\n        else :\n            l = l + 1\n    print ( \"The closest pair is [\" , ar1 [ res_l ] , \",\" , ar2 [ res_r ] , \"]\" )", "target_program": " void printClosest ( int ar1 [ ], int ar2 [ ], int m, int n, int x ) {\n  int diff = INT_MAX;\n  int res_l, res_r;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( ar1 [ l ] + ar2 [ r ] - x );\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \"The closest pair is [\" << ar1 [ res_l ] << \", \" << ar2 [ res_r ] << \"] \\n\";\n}"}
{"source": "java", "target": "python", "source_program": " void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n , int x ) {\n  int diff = Integer . MAX_VALUE ;\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . print ( \"The closest pair is [\" + ar1 [ res_l ] + \", \" + ar2 [ res_r ] + \"]\" ) ;\n}", "target_program": " def printClosest ( ar1 , ar2 , m , n , x ) :\n    diff = sys.maxsize\n    l = 0\n    r = n - 1\n    while ( l < m and r >= 0 ) :\n        if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( ar1 [ l ] + ar2 [ r ] - x )\n        if ar1 [ l ] + ar2 [ r ] > x :\n            r = r - 1\n        else :\n            l = l + 1\n    print ( \"The closest pair is [\" , ar1 [ res_l ] , \",\" , ar2 [ res_r ] , \"]\" )"}
{"source": "java", "target": "cpp", "source_program": " void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n , int x ) {\n  int diff = Integer . MAX_VALUE ;\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . print ( \"The closest pair is [\" + ar1 [ res_l ] + \", \" + ar2 [ res_r ] + \"]\" ) ;\n}", "target_program": " void printClosest ( int ar1 [ ], int ar2 [ ], int m, int n, int x ) {\n  int diff = INT_MAX;\n  int res_l, res_r;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( ar1 [ l ] + ar2 [ r ] - x );\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \"The closest pair is [\" << ar1 [ res_l ] << \", \" << ar2 [ res_r ] << \"] \\n\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printClosest ( int ar1 [ ], int ar2 [ ], int m, int n, int x ) {\n  int diff = INT_MAX;\n  int res_l, res_r;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( ar1 [ l ] + ar2 [ r ] - x );\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \"The closest pair is [\" << ar1 [ res_l ] << \", \" << ar2 [ res_r ] << \"] \\n\";\n}", "target_program": " void printClosest ( int ar1 [ ] , int ar2 [ ] , int m , int n , int x ) {\n  int diff = Integer . MAX_VALUE ;\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( ar1 [ l ] + ar2 [ r ] - x ) ;\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . print ( \"The closest pair is [\" + ar1 [ res_l ] + \", \" + ar2 [ res_r ] + \"]\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printClosest ( int ar1 [ ], int ar2 [ ], int m, int n, int x ) {\n  int diff = INT_MAX;\n  int res_l, res_r;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( ar1 [ l ] + ar2 [ r ] - x );\n    }\n    if ( ar1 [ l ] + ar2 [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \"The closest pair is [\" << ar1 [ res_l ] << \", \" << ar2 [ res_r ] << \"] \\n\";\n}", "target_program": " def printClosest ( ar1 , ar2 , m , n , x ) :\n    diff = sys.maxsize\n    l = 0\n    r = n - 1\n    while ( l < m and r >= 0 ) :\n        if abs ( ar1 [ l ] + ar2 [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( ar1 [ l ] + ar2 [ r ] - x )\n        if ar1 [ l ] + ar2 [ r ] > x :\n            r = r - 1\n        else :\n            l = l + 1\n    print ( \"The closest pair is [\" , ar1 [ res_l ] , \",\" , ar2 [ res_r ] , \"]\" )"}
{"source": "python", "target": "java", "source_program": " def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    for i in range ( n ) :\n        LIS [ i ] = 1\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n        len = max ( len , LIS [ i ] )\n    return ( n - len )", "target_program": " static int minRemove ( int arr [ ] , int n ) {\n  int LIS [ ] = new int [ n ] ;\n  int len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) LIS [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ;\n    }\n    len = Math . max ( len , LIS [ i ] ) ;\n  }\n  return n - len ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    for i in range ( n ) :\n        LIS [ i ] = 1\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n        len = max ( len , LIS [ i ] )\n    return ( n - len )", "target_program": " int minRemove ( int arr [ ], int n ) {\n  int LIS [ n ], len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) LIS [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) {\n        LIS [ i ] = max ( LIS [ i ], LIS [ j ] + 1 );\n      }\n    }\n    len = max ( len, LIS [ i ] );\n  }\n  return n - len;\n}"}
{"source": "java", "target": "python", "source_program": " static int minRemove ( int arr [ ] , int n ) {\n  int LIS [ ] = new int [ n ] ;\n  int len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) LIS [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ;\n    }\n    len = Math . max ( len , LIS [ i ] ) ;\n  }\n  return n - len ;\n}", "target_program": " def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    for i in range ( n ) :\n        LIS [ i ] = 1\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n        len = max ( len , LIS [ i ] )\n    return ( n - len )"}
{"source": "java", "target": "cpp", "source_program": " static int minRemove ( int arr [ ] , int n ) {\n  int LIS [ ] = new int [ n ] ;\n  int len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) LIS [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ;\n    }\n    len = Math . max ( len , LIS [ i ] ) ;\n  }\n  return n - len ;\n}", "target_program": " int minRemove ( int arr [ ], int n ) {\n  int LIS [ n ], len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) LIS [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) {\n        LIS [ i ] = max ( LIS [ i ], LIS [ j ] + 1 );\n      }\n    }\n    len = max ( len, LIS [ i ] );\n  }\n  return n - len;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minRemove ( int arr [ ], int n ) {\n  int LIS [ n ], len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) LIS [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) {\n        LIS [ i ] = max ( LIS [ i ], LIS [ j ] + 1 );\n      }\n    }\n    len = max ( len, LIS [ i ] );\n  }\n  return n - len;\n}", "target_program": " static int minRemove ( int arr [ ] , int n ) {\n  int LIS [ ] = new int [ n ] ;\n  int len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) LIS [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) LIS [ i ] = Math . max ( LIS [ i ] , LIS [ j ] + 1 ) ;\n    }\n    len = Math . max ( len , LIS [ i ] ) ;\n  }\n  return n - len ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minRemove ( int arr [ ], int n ) {\n  int LIS [ n ], len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) LIS [ i ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < i;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] && ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) {\n        LIS [ i ] = max ( LIS [ i ], LIS [ j ] + 1 );\n      }\n    }\n    len = max ( len, LIS [ i ] );\n  }\n  return n - len;\n}", "target_program": " def minRemove ( arr , n ) :\n    LIS = [ 0 for i in range ( n ) ]\n    len = 0\n    for i in range ( n ) :\n        LIS [ i ] = 1\n    for i in range ( 1 , n ) :\n        for j in range ( i ) :\n            if ( arr [ i ] > arr [ j ] and ( i - j ) <= ( arr [ i ] - arr [ j ] ) ) :\n                LIS [ i ] = max ( LIS [ i ] , LIS [ j ] + 1 )\n        len = max ( len , LIS [ i ] )\n    return ( n - len )"}
{"source": "python", "target": "java", "source_program": " def fact ( n ) :\n    if ( n == 0 ) :\n        return 1\n    return n * fact ( n - 1 )", "target_program": " static int fact ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * fact ( n - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def fact ( n ) :\n    if ( n == 0 ) :\n        return 1\n    return n * fact ( n - 1 )", "target_program": " unsigned int fact ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * fact ( n - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int fact ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * fact ( n - 1 ) ;\n}", "target_program": " def fact ( n ) :\n    if ( n == 0 ) :\n        return 1\n    return n * fact ( n - 1 )"}
{"source": "java", "target": "cpp", "source_program": " static int fact ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * fact ( n - 1 ) ;\n}", "target_program": " unsigned int fact ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * fact ( n - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int fact ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * fact ( n - 1 );\n}", "target_program": " static int fact ( int n ) {\n  if ( n == 0 ) return 1 ;\n  return n * fact ( n - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int fact ( unsigned int n ) {\n  if ( n == 0 ) return 1;\n  return n * fact ( n - 1 );\n}", "target_program": " def fact ( n ) :\n    if ( n == 0 ) :\n        return 1\n    return n * fact ( n - 1 )"}
{"source": "python", "target": "java", "source_program": " def tower ( n , sourcePole , destinationPole , auxiliaryPole ) :\n    if ( 0 == n ) :\n        return\n    tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole )\n    print ( \"Move the disk\" , sourcePole , \"from\" , sourcePole , \"to\" , destinationPole )\n    tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole )", "target_program": " static void tower ( int n , char sourcePole , char destinationPole , char auxiliaryPole ) {\n  if ( 0 == n ) return ;\n  tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole ) ;\n  System . out . printf ( \"Move the disk %d from %c to %c\\n\" , n , sourcePole , destinationPole ) ;\n  tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def tower ( n , sourcePole , destinationPole , auxiliaryPole ) :\n    if ( 0 == n ) :\n        return\n    tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole )\n    print ( \"Move the disk\" , sourcePole , \"from\" , sourcePole , \"to\" , destinationPole )\n    tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole )", "target_program": " void tower ( int n, char sourcePole, char destinationPole, char auxiliaryPole ) {\n  if ( 0 == n ) return;\n  tower ( n - 1, sourcePole, auxiliaryPole, destinationPole );\n  cout << \"Move the disk \" << n << \" from \" << sourcePole << \" to \" << destinationPole << endl;\n  tower ( n - 1, auxiliaryPole, destinationPole, sourcePole );\n}"}
{"source": "java", "target": "python", "source_program": " static void tower ( int n , char sourcePole , char destinationPole , char auxiliaryPole ) {\n  if ( 0 == n ) return ;\n  tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole ) ;\n  System . out . printf ( \"Move the disk %d from %c to %c\\n\" , n , sourcePole , destinationPole ) ;\n  tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole ) ;\n}", "target_program": " def tower ( n , sourcePole , destinationPole , auxiliaryPole ) :\n    if ( 0 == n ) :\n        return\n    tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole )\n    print ( \"Move the disk\" , sourcePole , \"from\" , sourcePole , \"to\" , destinationPole )\n    tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole )"}
{"source": "java", "target": "cpp", "source_program": " static void tower ( int n , char sourcePole , char destinationPole , char auxiliaryPole ) {\n  if ( 0 == n ) return ;\n  tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole ) ;\n  System . out . printf ( \"Move the disk %d from %c to %c\\n\" , n , sourcePole , destinationPole ) ;\n  tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole ) ;\n}", "target_program": " void tower ( int n, char sourcePole, char destinationPole, char auxiliaryPole ) {\n  if ( 0 == n ) return;\n  tower ( n - 1, sourcePole, auxiliaryPole, destinationPole );\n  cout << \"Move the disk \" << n << \" from \" << sourcePole << \" to \" << destinationPole << endl;\n  tower ( n - 1, auxiliaryPole, destinationPole, sourcePole );\n}"}
{"source": "cpp", "target": "java", "source_program": " void tower ( int n, char sourcePole, char destinationPole, char auxiliaryPole ) {\n  if ( 0 == n ) return;\n  tower ( n - 1, sourcePole, auxiliaryPole, destinationPole );\n  cout << \"Move the disk \" << n << \" from \" << sourcePole << \" to \" << destinationPole << endl;\n  tower ( n - 1, auxiliaryPole, destinationPole, sourcePole );\n}", "target_program": " static void tower ( int n , char sourcePole , char destinationPole , char auxiliaryPole ) {\n  if ( 0 == n ) return ;\n  tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole ) ;\n  System . out . printf ( \"Move the disk %d from %c to %c\\n\" , n , sourcePole , destinationPole ) ;\n  tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void tower ( int n, char sourcePole, char destinationPole, char auxiliaryPole ) {\n  if ( 0 == n ) return;\n  tower ( n - 1, sourcePole, auxiliaryPole, destinationPole );\n  cout << \"Move the disk \" << n << \" from \" << sourcePole << \" to \" << destinationPole << endl;\n  tower ( n - 1, auxiliaryPole, destinationPole, sourcePole );\n}", "target_program": " def tower ( n , sourcePole , destinationPole , auxiliaryPole ) :\n    if ( 0 == n ) :\n        return\n    tower ( n - 1 , sourcePole , auxiliaryPole , destinationPole )\n    print ( \"Move the disk\" , sourcePole , \"from\" , sourcePole , \"to\" , destinationPole )\n    tower ( n - 1 , auxiliaryPole , destinationPole , sourcePole )"}
{"source": "python", "target": "java", "source_program": " def solution ( a , b , n ) :\n    i = 0\n    while i * a <= n :\n        if ( n - ( i * a ) ) % b == 0 :\n            print ( \"x = \" , i , \", y = \" , int ( ( n - ( i * a ) ) / b ) )\n            return 0\n        i = i + 1\n    print ( \"No solution\" )", "target_program": " static void solution ( int a , int b , int n ) {\n  for ( int i = 0 ;\n  i * a <= n ;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      System . out . println ( \"x = \" + i + \", y = \" + ( n - ( i * a ) ) / b ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"No solution\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def solution ( a , b , n ) :\n    i = 0\n    while i * a <= n :\n        if ( n - ( i * a ) ) % b == 0 :\n            print ( \"x = \" , i , \", y = \" , int ( ( n - ( i * a ) ) / b ) )\n            return 0\n        i = i + 1\n    print ( \"No solution\" )", "target_program": " void solution ( int a, int b, int n ) {\n  for ( int i = 0;\n  i * a <= n;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      cout << \"x = \" << i << \", y = \" << ( n - ( i * a ) ) / b;\n      return;\n    }\n  }\n  cout << \"No solution\";\n}"}
{"source": "java", "target": "python", "source_program": " static void solution ( int a , int b , int n ) {\n  for ( int i = 0 ;\n  i * a <= n ;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      System . out . println ( \"x = \" + i + \", y = \" + ( n - ( i * a ) ) / b ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"No solution\" ) ;\n}", "target_program": " def solution ( a , b , n ) :\n    i = 0\n    while i * a <= n :\n        if ( n - ( i * a ) ) % b == 0 :\n            print ( \"x = \" , i , \", y = \" , int ( ( n - ( i * a ) ) / b ) )\n            return 0\n        i = i + 1\n    print ( \"No solution\" )"}
{"source": "java", "target": "cpp", "source_program": " static void solution ( int a , int b , int n ) {\n  for ( int i = 0 ;\n  i * a <= n ;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      System . out . println ( \"x = \" + i + \", y = \" + ( n - ( i * a ) ) / b ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"No solution\" ) ;\n}", "target_program": " void solution ( int a, int b, int n ) {\n  for ( int i = 0;\n  i * a <= n;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      cout << \"x = \" << i << \", y = \" << ( n - ( i * a ) ) / b;\n      return;\n    }\n  }\n  cout << \"No solution\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void solution ( int a, int b, int n ) {\n  for ( int i = 0;\n  i * a <= n;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      cout << \"x = \" << i << \", y = \" << ( n - ( i * a ) ) / b;\n      return;\n    }\n  }\n  cout << \"No solution\";\n}", "target_program": " static void solution ( int a , int b , int n ) {\n  for ( int i = 0 ;\n  i * a <= n ;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      System . out . println ( \"x = \" + i + \", y = \" + ( n - ( i * a ) ) / b ) ;\n      return ;\n    }\n  }\n  System . out . println ( \"No solution\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void solution ( int a, int b, int n ) {\n  for ( int i = 0;\n  i * a <= n;\n  i ++ ) {\n    if ( ( n - ( i * a ) ) % b == 0 ) {\n      cout << \"x = \" << i << \", y = \" << ( n - ( i * a ) ) / b;\n      return;\n    }\n  }\n  cout << \"No solution\";\n}", "target_program": " def solution ( a , b , n ) :\n    i = 0\n    while i * a <= n :\n        if ( n - ( i * a ) ) % b == 0 :\n            print ( \"x = \" , i , \", y = \" , int ( ( n - ( i * a ) ) / b ) )\n            return 0\n        i = i + 1\n    print ( \"No solution\" )"}
{"source": "python", "target": "java", "source_program": " def exponentiation ( bas , exp ) :\n    t = 1 ;\n    while ( exp > 0 ) :\n        if ( exp % 2 != 0 ) :\n            t = ( t * bas ) % N ;\n        bas = ( bas * bas ) % N ;\n        exp = int ( exp / 2 ) ;\n    return t % N ;", "target_program": " static long exponentiation ( long base , long exp ) {\n  long t = 1L ;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N ;\n    base = ( base * base ) % N ;\n    exp /= 2 ;\n  }\n  return t % N ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def exponentiation ( bas , exp ) :\n    t = 1 ;\n    while ( exp > 0 ) :\n        if ( exp % 2 != 0 ) :\n            t = ( t * bas ) % N ;\n        bas = ( bas * bas ) % N ;\n        exp = int ( exp / 2 ) ;\n    return t % N ;", "target_program": " long exponentiation ( long base, long exp ) {\n  long t = 1L;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N;\n    base = ( base * base ) % N;\n    exp /= 2;\n  }\n  return t % N;\n}"}
{"source": "java", "target": "python", "source_program": " static long exponentiation ( long base , long exp ) {\n  long t = 1L ;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N ;\n    base = ( base * base ) % N ;\n    exp /= 2 ;\n  }\n  return t % N ;\n}", "target_program": " def exponentiation ( bas , exp ) :\n    t = 1 ;\n    while ( exp > 0 ) :\n        if ( exp % 2 != 0 ) :\n            t = ( t * bas ) % N ;\n        bas = ( bas * bas ) % N ;\n        exp = int ( exp / 2 ) ;\n    return t % N ;"}
{"source": "java", "target": "cpp", "source_program": " static long exponentiation ( long base , long exp ) {\n  long t = 1L ;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N ;\n    base = ( base * base ) % N ;\n    exp /= 2 ;\n  }\n  return t % N ;\n}", "target_program": " long exponentiation ( long base, long exp ) {\n  long t = 1L;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N;\n    base = ( base * base ) % N;\n    exp /= 2;\n  }\n  return t % N;\n}"}
{"source": "cpp", "target": "java", "source_program": " long exponentiation ( long base, long exp ) {\n  long t = 1L;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N;\n    base = ( base * base ) % N;\n    exp /= 2;\n  }\n  return t % N;\n}", "target_program": " static long exponentiation ( long base , long exp ) {\n  long t = 1L ;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N ;\n    base = ( base * base ) % N ;\n    exp /= 2 ;\n  }\n  return t % N ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long exponentiation ( long base, long exp ) {\n  long t = 1L;\n  while ( exp > 0 ) {\n    if ( exp % 2 != 0 ) t = ( t * base ) % N;\n    base = ( base * base ) % N;\n    exp /= 2;\n  }\n  return t % N;\n}", "target_program": " def exponentiation ( bas , exp ) :\n    t = 1 ;\n    while ( exp > 0 ) :\n        if ( exp % 2 != 0 ) :\n            t = ( t * bas ) % N ;\n        bas = ( bas * bas ) % N ;\n        exp = int ( exp / 2 ) ;\n    return t % N ;"}
{"source": "python", "target": "java", "source_program": " def checkIfAllTogether ( s , c ) :\n    oneSeen = False\n    i = 0\n    n = len ( s )\n    while ( i < n ) :\n        if ( s [ i ] == c ) :\n            if ( oneSeen == True ) :\n                return False\n            while ( i < n and s [ i ] == c ) :\n                i = i + 1\n            oneSeen = True\n        else :\n            i = i + 1\n    return True", "target_program": " static boolean checkIfAllTogether ( String s , char c ) {\n  boolean oneSeen = false ;\n  int i = 0 , n = s . length ( ) ;\n  while ( i < n ) {\n    if ( s . charAt ( i ) == c ) {\n      if ( oneSeen == true ) return false ;\n      while ( i < n && s . charAt ( i ) == c ) i ++ ;\n      oneSeen = true ;\n    }\n    else i ++ ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkIfAllTogether ( s , c ) :\n    oneSeen = False\n    i = 0\n    n = len ( s )\n    while ( i < n ) :\n        if ( s [ i ] == c ) :\n            if ( oneSeen == True ) :\n                return False\n            while ( i < n and s [ i ] == c ) :\n                i = i + 1\n            oneSeen = True\n        else :\n            i = i + 1\n    return True", "target_program": " bool checkIfAllTogether ( string s, char c ) {\n  bool oneSeen = false;\n  int i = 0, n = s . length ( );\n  while ( i < n ) {\n    if ( s [ i ] == c ) {\n      if ( oneSeen == true ) return false;\n      while ( i < n && s [ i ] == c ) i ++;\n      oneSeen = true;\n    }\n    else i ++;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkIfAllTogether ( String s , char c ) {\n  boolean oneSeen = false ;\n  int i = 0 , n = s . length ( ) ;\n  while ( i < n ) {\n    if ( s . charAt ( i ) == c ) {\n      if ( oneSeen == true ) return false ;\n      while ( i < n && s . charAt ( i ) == c ) i ++ ;\n      oneSeen = true ;\n    }\n    else i ++ ;\n  }\n  return true ;\n}", "target_program": " def checkIfAllTogether ( s , c ) :\n    oneSeen = False\n    i = 0\n    n = len ( s )\n    while ( i < n ) :\n        if ( s [ i ] == c ) :\n            if ( oneSeen == True ) :\n                return False\n            while ( i < n and s [ i ] == c ) :\n                i = i + 1\n            oneSeen = True\n        else :\n            i = i + 1\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkIfAllTogether ( String s , char c ) {\n  boolean oneSeen = false ;\n  int i = 0 , n = s . length ( ) ;\n  while ( i < n ) {\n    if ( s . charAt ( i ) == c ) {\n      if ( oneSeen == true ) return false ;\n      while ( i < n && s . charAt ( i ) == c ) i ++ ;\n      oneSeen = true ;\n    }\n    else i ++ ;\n  }\n  return true ;\n}", "target_program": " bool checkIfAllTogether ( string s, char c ) {\n  bool oneSeen = false;\n  int i = 0, n = s . length ( );\n  while ( i < n ) {\n    if ( s [ i ] == c ) {\n      if ( oneSeen == true ) return false;\n      while ( i < n && s [ i ] == c ) i ++;\n      oneSeen = true;\n    }\n    else i ++;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkIfAllTogether ( string s, char c ) {\n  bool oneSeen = false;\n  int i = 0, n = s . length ( );\n  while ( i < n ) {\n    if ( s [ i ] == c ) {\n      if ( oneSeen == true ) return false;\n      while ( i < n && s [ i ] == c ) i ++;\n      oneSeen = true;\n    }\n    else i ++;\n  }\n  return true;\n}", "target_program": " static boolean checkIfAllTogether ( String s , char c ) {\n  boolean oneSeen = false ;\n  int i = 0 , n = s . length ( ) ;\n  while ( i < n ) {\n    if ( s . charAt ( i ) == c ) {\n      if ( oneSeen == true ) return false ;\n      while ( i < n && s . charAt ( i ) == c ) i ++ ;\n      oneSeen = true ;\n    }\n    else i ++ ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkIfAllTogether ( string s, char c ) {\n  bool oneSeen = false;\n  int i = 0, n = s . length ( );\n  while ( i < n ) {\n    if ( s [ i ] == c ) {\n      if ( oneSeen == true ) return false;\n      while ( i < n && s [ i ] == c ) i ++;\n      oneSeen = true;\n    }\n    else i ++;\n  }\n  return true;\n}", "target_program": " def checkIfAllTogether ( s , c ) :\n    oneSeen = False\n    i = 0\n    n = len ( s )\n    while ( i < n ) :\n        if ( s [ i ] == c ) :\n            if ( oneSeen == True ) :\n                return False\n            while ( i < n and s [ i ] == c ) :\n                i = i + 1\n            oneSeen = True\n        else :\n            i = i + 1\n    return True"}
{"source": "python", "target": "java", "source_program": " def cycleSort ( array ) :\n    writes = 0\n    for cycleStart in range ( 0 , len ( array ) - 1 ) :\n        item = array [ cycleStart ]\n        pos = cycleStart\n        for i in range ( cycleStart + 1 , len ( array ) ) :\n            if array [ i ] < item :\n                pos += 1\n        if pos == cycleStart :\n            continue\n        while item == array [ pos ] :\n            pos += 1\n        array [ pos ] , item = item , array [ pos ]\n        writes += 1\n        while pos != cycleStart :\n            pos = cycleStart\n            for i in range ( cycleStart + 1 , len ( array ) ) :\n                if array [ i ] < item :\n                    pos += 1\n            while item == array [ pos ] :\n                pos += 1\n            array [ pos ] , item = item , array [ pos ]\n            writes += 1\n    return writes", "target_program": " public static void cycleSort ( int arr [ ] , int n ) {\n  int writes = 0 ;\n  for ( int cycle_start = 0 ;\n  cycle_start <= n - 2 ;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ] ;\n    int pos = cycle_start ;\n    for ( int i = cycle_start + 1 ;\n    i < n ;\n    i ++ ) if ( arr [ i ] < item ) pos ++ ;\n    if ( pos == cycle_start ) continue ;\n    while ( item == arr [ pos ] ) pos += 1 ;\n    if ( pos != cycle_start ) {\n      int temp = item ;\n      item = arr [ pos ] ;\n      arr [ pos ] = temp ;\n      writes ++ ;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start ;\n      for ( int i = cycle_start + 1 ;\n      i < n ;\n      i ++ ) if ( arr [ i ] < item ) pos += 1 ;\n      while ( item == arr [ pos ] ) pos += 1 ;\n      if ( item != arr [ pos ] ) {\n        int temp = item ;\n        item = arr [ pos ] ;\n        arr [ pos ] = temp ;\n        writes ++ ;\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def cycleSort ( array ) :\n    writes = 0\n    for cycleStart in range ( 0 , len ( array ) - 1 ) :\n        item = array [ cycleStart ]\n        pos = cycleStart\n        for i in range ( cycleStart + 1 , len ( array ) ) :\n            if array [ i ] < item :\n                pos += 1\n        if pos == cycleStart :\n            continue\n        while item == array [ pos ] :\n            pos += 1\n        array [ pos ] , item = item , array [ pos ]\n        writes += 1\n        while pos != cycleStart :\n            pos = cycleStart\n            for i in range ( cycleStart + 1 , len ( array ) ) :\n                if array [ i ] < item :\n                    pos += 1\n            while item == array [ pos ] :\n                pos += 1\n            array [ pos ] , item = item , array [ pos ]\n            writes += 1\n    return writes", "target_program": " void cycleSort ( int arr [ ], int n ) {\n  int writes = 0;\n  for ( int cycle_start = 0;\n  cycle_start <= n - 2;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ];\n    int pos = cycle_start;\n    for ( int i = cycle_start + 1;\n    i < n;\n    i ++ ) if ( arr [ i ] < item ) pos ++;\n    if ( pos == cycle_start ) continue;\n    while ( item == arr [ pos ] ) pos += 1;\n    if ( pos != cycle_start ) {\n      swap ( item, arr [ pos ] );\n      writes ++;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start;\n      for ( int i = cycle_start + 1;\n      i < n;\n      i ++ ) if ( arr [ i ] < item ) pos += 1;\n      while ( item == arr [ pos ] ) pos += 1;\n      if ( item != arr [ pos ] ) {\n        swap ( item, arr [ pos ] );\n        writes ++;\n      }\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void cycleSort ( int arr [ ] , int n ) {\n  int writes = 0 ;\n  for ( int cycle_start = 0 ;\n  cycle_start <= n - 2 ;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ] ;\n    int pos = cycle_start ;\n    for ( int i = cycle_start + 1 ;\n    i < n ;\n    i ++ ) if ( arr [ i ] < item ) pos ++ ;\n    if ( pos == cycle_start ) continue ;\n    while ( item == arr [ pos ] ) pos += 1 ;\n    if ( pos != cycle_start ) {\n      int temp = item ;\n      item = arr [ pos ] ;\n      arr [ pos ] = temp ;\n      writes ++ ;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start ;\n      for ( int i = cycle_start + 1 ;\n      i < n ;\n      i ++ ) if ( arr [ i ] < item ) pos += 1 ;\n      while ( item == arr [ pos ] ) pos += 1 ;\n      if ( item != arr [ pos ] ) {\n        int temp = item ;\n        item = arr [ pos ] ;\n        arr [ pos ] = temp ;\n        writes ++ ;\n      }\n    }\n  }\n}", "target_program": " def cycleSort ( array ) :\n    writes = 0\n    for cycleStart in range ( 0 , len ( array ) - 1 ) :\n        item = array [ cycleStart ]\n        pos = cycleStart\n        for i in range ( cycleStart + 1 , len ( array ) ) :\n            if array [ i ] < item :\n                pos += 1\n        if pos == cycleStart :\n            continue\n        while item == array [ pos ] :\n            pos += 1\n        array [ pos ] , item = item , array [ pos ]\n        writes += 1\n        while pos != cycleStart :\n            pos = cycleStart\n            for i in range ( cycleStart + 1 , len ( array ) ) :\n                if array [ i ] < item :\n                    pos += 1\n            while item == array [ pos ] :\n                pos += 1\n            array [ pos ] , item = item , array [ pos ]\n            writes += 1\n    return writes"}
{"source": "java", "target": "cpp", "source_program": " public static void cycleSort ( int arr [ ] , int n ) {\n  int writes = 0 ;\n  for ( int cycle_start = 0 ;\n  cycle_start <= n - 2 ;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ] ;\n    int pos = cycle_start ;\n    for ( int i = cycle_start + 1 ;\n    i < n ;\n    i ++ ) if ( arr [ i ] < item ) pos ++ ;\n    if ( pos == cycle_start ) continue ;\n    while ( item == arr [ pos ] ) pos += 1 ;\n    if ( pos != cycle_start ) {\n      int temp = item ;\n      item = arr [ pos ] ;\n      arr [ pos ] = temp ;\n      writes ++ ;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start ;\n      for ( int i = cycle_start + 1 ;\n      i < n ;\n      i ++ ) if ( arr [ i ] < item ) pos += 1 ;\n      while ( item == arr [ pos ] ) pos += 1 ;\n      if ( item != arr [ pos ] ) {\n        int temp = item ;\n        item = arr [ pos ] ;\n        arr [ pos ] = temp ;\n        writes ++ ;\n      }\n    }\n  }\n}", "target_program": " void cycleSort ( int arr [ ], int n ) {\n  int writes = 0;\n  for ( int cycle_start = 0;\n  cycle_start <= n - 2;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ];\n    int pos = cycle_start;\n    for ( int i = cycle_start + 1;\n    i < n;\n    i ++ ) if ( arr [ i ] < item ) pos ++;\n    if ( pos == cycle_start ) continue;\n    while ( item == arr [ pos ] ) pos += 1;\n    if ( pos != cycle_start ) {\n      swap ( item, arr [ pos ] );\n      writes ++;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start;\n      for ( int i = cycle_start + 1;\n      i < n;\n      i ++ ) if ( arr [ i ] < item ) pos += 1;\n      while ( item == arr [ pos ] ) pos += 1;\n      if ( item != arr [ pos ] ) {\n        swap ( item, arr [ pos ] );\n        writes ++;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void cycleSort ( int arr [ ], int n ) {\n  int writes = 0;\n  for ( int cycle_start = 0;\n  cycle_start <= n - 2;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ];\n    int pos = cycle_start;\n    for ( int i = cycle_start + 1;\n    i < n;\n    i ++ ) if ( arr [ i ] < item ) pos ++;\n    if ( pos == cycle_start ) continue;\n    while ( item == arr [ pos ] ) pos += 1;\n    if ( pos != cycle_start ) {\n      swap ( item, arr [ pos ] );\n      writes ++;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start;\n      for ( int i = cycle_start + 1;\n      i < n;\n      i ++ ) if ( arr [ i ] < item ) pos += 1;\n      while ( item == arr [ pos ] ) pos += 1;\n      if ( item != arr [ pos ] ) {\n        swap ( item, arr [ pos ] );\n        writes ++;\n      }\n    }\n  }\n}", "target_program": " public static void cycleSort ( int arr [ ] , int n ) {\n  int writes = 0 ;\n  for ( int cycle_start = 0 ;\n  cycle_start <= n - 2 ;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ] ;\n    int pos = cycle_start ;\n    for ( int i = cycle_start + 1 ;\n    i < n ;\n    i ++ ) if ( arr [ i ] < item ) pos ++ ;\n    if ( pos == cycle_start ) continue ;\n    while ( item == arr [ pos ] ) pos += 1 ;\n    if ( pos != cycle_start ) {\n      int temp = item ;\n      item = arr [ pos ] ;\n      arr [ pos ] = temp ;\n      writes ++ ;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start ;\n      for ( int i = cycle_start + 1 ;\n      i < n ;\n      i ++ ) if ( arr [ i ] < item ) pos += 1 ;\n      while ( item == arr [ pos ] ) pos += 1 ;\n      if ( item != arr [ pos ] ) {\n        int temp = item ;\n        item = arr [ pos ] ;\n        arr [ pos ] = temp ;\n        writes ++ ;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void cycleSort ( int arr [ ], int n ) {\n  int writes = 0;\n  for ( int cycle_start = 0;\n  cycle_start <= n - 2;\n  cycle_start ++ ) {\n    int item = arr [ cycle_start ];\n    int pos = cycle_start;\n    for ( int i = cycle_start + 1;\n    i < n;\n    i ++ ) if ( arr [ i ] < item ) pos ++;\n    if ( pos == cycle_start ) continue;\n    while ( item == arr [ pos ] ) pos += 1;\n    if ( pos != cycle_start ) {\n      swap ( item, arr [ pos ] );\n      writes ++;\n    }\n    while ( pos != cycle_start ) {\n      pos = cycle_start;\n      for ( int i = cycle_start + 1;\n      i < n;\n      i ++ ) if ( arr [ i ] < item ) pos += 1;\n      while ( item == arr [ pos ] ) pos += 1;\n      if ( item != arr [ pos ] ) {\n        swap ( item, arr [ pos ] );\n        writes ++;\n      }\n    }\n  }\n}", "target_program": " def cycleSort ( array ) :\n    writes = 0\n    for cycleStart in range ( 0 , len ( array ) - 1 ) :\n        item = array [ cycleStart ]\n        pos = cycleStart\n        for i in range ( cycleStart + 1 , len ( array ) ) :\n            if array [ i ] < item :\n                pos += 1\n        if pos == cycleStart :\n            continue\n        while item == array [ pos ] :\n            pos += 1\n        array [ pos ] , item = item , array [ pos ]\n        writes += 1\n        while pos != cycleStart :\n            pos = cycleStart\n            for i in range ( cycleStart + 1 , len ( array ) ) :\n                if array [ i ] < item :\n                    pos += 1\n            while item == array [ pos ] :\n                pos += 1\n            array [ pos ] , item = item , array [ pos ]\n            writes += 1\n    return writes"}
{"source": "python", "target": "java", "source_program": " def selectRandom ( x ) :\n    res = 0 ;\n    count = 0 ;\n    count += 1 ;\n    if ( count == 1 ) :\n        res = x ;\n    else :\n        i = random.randrange ( count ) ;\n        if ( i == count - 1 ) :\n            res = x ;\n    return res ;", "target_program": " static int selectRandom ( int x ) {\n  count ++ ;\n  if ( count == 1 ) res = x ;\n  else {\n    Random r = new Random ( ) ;\n    int i = r . nextInt ( count ) ;\n    if ( i == count - 1 ) res = x ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def selectRandom ( x ) :\n    res = 0 ;\n    count = 0 ;\n    count += 1 ;\n    if ( count == 1 ) :\n        res = x ;\n    else :\n        i = random.randrange ( count ) ;\n        if ( i == count - 1 ) :\n            res = x ;\n    return res ;", "target_program": " int selectRandom ( int x ) {\n  static int res;\n  static int count = 0;\n  count ++;\n  if ( count == 1 ) res = x;\n  else {\n    int i = rand ( ) % count;\n    if ( i == count - 1 ) res = x;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int selectRandom ( int x ) {\n  count ++ ;\n  if ( count == 1 ) res = x ;\n  else {\n    Random r = new Random ( ) ;\n    int i = r . nextInt ( count ) ;\n    if ( i == count - 1 ) res = x ;\n  }\n  return res ;\n}", "target_program": " def selectRandom ( x ) :\n    res = 0 ;\n    count = 0 ;\n    count += 1 ;\n    if ( count == 1 ) :\n        res = x ;\n    else :\n        i = random.randrange ( count ) ;\n        if ( i == count - 1 ) :\n            res = x ;\n    return res ;"}
{"source": "java", "target": "cpp", "source_program": " static int selectRandom ( int x ) {\n  count ++ ;\n  if ( count == 1 ) res = x ;\n  else {\n    Random r = new Random ( ) ;\n    int i = r . nextInt ( count ) ;\n    if ( i == count - 1 ) res = x ;\n  }\n  return res ;\n}", "target_program": " int selectRandom ( int x ) {\n  static int res;\n  static int count = 0;\n  count ++;\n  if ( count == 1 ) res = x;\n  else {\n    int i = rand ( ) % count;\n    if ( i == count - 1 ) res = x;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int selectRandom ( int x ) {\n  static int res;\n  static int count = 0;\n  count ++;\n  if ( count == 1 ) res = x;\n  else {\n    int i = rand ( ) % count;\n    if ( i == count - 1 ) res = x;\n  }\n  return res;\n}", "target_program": " static int selectRandom ( int x ) {\n  count ++ ;\n  if ( count == 1 ) res = x ;\n  else {\n    Random r = new Random ( ) ;\n    int i = r . nextInt ( count ) ;\n    if ( i == count - 1 ) res = x ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int selectRandom ( int x ) {\n  static int res;\n  static int count = 0;\n  count ++;\n  if ( count == 1 ) res = x;\n  else {\n    int i = rand ( ) % count;\n    if ( i == count - 1 ) res = x;\n  }\n  return res;\n}", "target_program": " def selectRandom ( x ) :\n    res = 0 ;\n    count = 0 ;\n    count += 1 ;\n    if ( count == 1 ) :\n        res = x ;\n    else :\n        i = random.randrange ( count ) ;\n        if ( i == count - 1 ) :\n            res = x ;\n    return res ;"}
{"source": "python", "target": "java", "source_program": " def printHosoya ( n ) :\n    dp = [ [ 0 for i in range ( N ) ] for i in range ( N ) ]\n    dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1\n    for i in range ( 2 , n ) :\n        for j in range ( n ) :\n            if ( i > j ) :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 ) :\n            print ( dp [ i ] [ j ] , end = ' ' )\n        print ( )", "target_program": " static void printHosoya ( int n ) {\n  int dp [ ] [ ] = new int [ N ] [ N ] ;\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ;\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) System . out . print ( dp [ i ] [ j ] + \"\" ) ;\n    System . out . println ( \"\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printHosoya ( n ) :\n    dp = [ [ 0 for i in range ( N ) ] for i in range ( N ) ]\n    dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1\n    for i in range ( 2 , n ) :\n        for j in range ( n ) :\n            if ( i > j ) :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 ) :\n            print ( dp [ i ] [ j ] , end = ' ' )\n        print ( )", "target_program": " void printHosoya ( int n ) {\n  int dp [ N ] [ N ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ];\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ];\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) cout << dp [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printHosoya ( int n ) {\n  int dp [ ] [ ] = new int [ N ] [ N ] ;\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ;\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) System . out . print ( dp [ i ] [ j ] + \"\" ) ;\n    System . out . println ( \"\" ) ;\n  }\n}", "target_program": " def printHosoya ( n ) :\n    dp = [ [ 0 for i in range ( N ) ] for i in range ( N ) ]\n    dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1\n    for i in range ( 2 , n ) :\n        for j in range ( n ) :\n            if ( i > j ) :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 ) :\n            print ( dp [ i ] [ j ] , end = ' ' )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void printHosoya ( int n ) {\n  int dp [ ] [ ] = new int [ N ] [ N ] ;\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ;\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) System . out . print ( dp [ i ] [ j ] + \"\" ) ;\n    System . out . println ( \"\" ) ;\n  }\n}", "target_program": " void printHosoya ( int n ) {\n  int dp [ N ] [ N ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ];\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ];\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) cout << dp [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printHosoya ( int n ) {\n  int dp [ N ] [ N ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ];\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ];\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) cout << dp [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}", "target_program": " static void printHosoya ( int n ) {\n  int dp [ ] [ ] = new int [ N ] [ N ] ;\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = 1 ;\n  dp [ 1 ] [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] ;\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= i ;\n    j ++ ) System . out . print ( dp [ i ] [ j ] + \"\" ) ;\n    System . out . println ( \"\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printHosoya ( int n ) {\n  int dp [ N ] [ N ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1;\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i > j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ];\n      else dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ];\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= i;\n    j ++ ) cout << dp [ i ] [ j ] << \" \";\n    cout << endl;\n  }\n}", "target_program": " def printHosoya ( n ) :\n    dp = [ [ 0 for i in range ( N ) ] for i in range ( N ) ]\n    dp [ 0 ] [ 0 ] = dp [ 1 ] [ 0 ] = dp [ 1 ] [ 1 ] = 1\n    for i in range ( 2 , n ) :\n        for j in range ( n ) :\n            if ( i > j ) :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j ] + dp [ i - 2 ] [ j ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 2 ] [ j - 2 ] )\n    for i in range ( n ) :\n        for j in range ( i + 1 ) :\n            print ( dp [ i ] [ j ] , end = ' ' )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def lastPosition ( n , m , k ) :\n    if ( m <= n - k + 1 ) :\n        return m + k - 1\n    m = m - ( n - k + 1 )\n    if ( m % n == 0 ) :\n        return n\n    else :\n        return m % n", "target_program": " static int lastPosition ( int n , int m , int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1 ;\n  m = m - ( n - k + 1 ) ;\n  return ( m % n == 0 ) ? n : ( m % n ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lastPosition ( n , m , k ) :\n    if ( m <= n - k + 1 ) :\n        return m + k - 1\n    m = m - ( n - k + 1 )\n    if ( m % n == 0 ) :\n        return n\n    else :\n        return m % n", "target_program": " int lastPosition ( int n, int m, int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1;\n  m = m - ( n - k + 1 );\n  return ( m % n == 0 ) ? n : ( m % n );\n}"}
{"source": "java", "target": "python", "source_program": " static int lastPosition ( int n , int m , int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1 ;\n  m = m - ( n - k + 1 ) ;\n  return ( m % n == 0 ) ? n : ( m % n ) ;\n}", "target_program": " def lastPosition ( n , m , k ) :\n    if ( m <= n - k + 1 ) :\n        return m + k - 1\n    m = m - ( n - k + 1 )\n    if ( m % n == 0 ) :\n        return n\n    else :\n        return m % n"}
{"source": "java", "target": "cpp", "source_program": " static int lastPosition ( int n , int m , int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1 ;\n  m = m - ( n - k + 1 ) ;\n  return ( m % n == 0 ) ? n : ( m % n ) ;\n}", "target_program": " int lastPosition ( int n, int m, int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1;\n  m = m - ( n - k + 1 );\n  return ( m % n == 0 ) ? n : ( m % n );\n}"}
{"source": "cpp", "target": "java", "source_program": " int lastPosition ( int n, int m, int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1;\n  m = m - ( n - k + 1 );\n  return ( m % n == 0 ) ? n : ( m % n );\n}", "target_program": " static int lastPosition ( int n , int m , int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1 ;\n  m = m - ( n - k + 1 ) ;\n  return ( m % n == 0 ) ? n : ( m % n ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lastPosition ( int n, int m, int k ) {\n  if ( m <= n - k + 1 ) return m + k - 1;\n  m = m - ( n - k + 1 );\n  return ( m % n == 0 ) ? n : ( m % n );\n}", "target_program": " def lastPosition ( n , m , k ) :\n    if ( m <= n - k + 1 ) :\n        return m + k - 1\n    m = m - ( n - k + 1 )\n    if ( m % n == 0 ) :\n        return n\n    else :\n        return m % n"}
{"source": "python", "target": "java", "source_program": " def longestSubsequence ( a , n ) :\n    mp = { i : 0 for i in range ( 13 ) }\n    dp = [ 0 for i in range ( n ) ]\n    maximum = - sys.maxsize - 1\n    index = - 1\n    for i in range ( n ) :\n        if ( ( a [ i ] - 1 ) in mp ) :\n            lastIndex = mp [ a [ i ] - 1 ] - 1\n            dp [ i ] = 1 + dp [ lastIndex ]\n        else :\n            dp [ i ] = 1\n        mp [ a [ i ] ] = i + 1\n        if ( maximum < dp [ i ] ) :\n            maximum = dp [ i ]\n            index = i\n    for curr in range ( a [ index ] - maximum + 1 , a [ index ] + 1 , 1 ) :\n        print ( curr , end = \" \" )", "target_program": " public static void longestSubsequence ( int [ ] a , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;\n  int [ ] dp = new int [ n ] ;\n  int maximum = Integer . MIN_VALUE ;\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( mp . get ( a [ i ] - 1 ) != null ) {\n      int lastIndex = mp . get ( a [ i ] - 1 ) - 1 ;\n      dp [ i ] = 1 + dp [ lastIndex ] ;\n    }\n    else dp [ i ] = 1 ;\n    mp . put ( a [ i ] , i + 1 ) ;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ] ;\n      index = i ;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1 ;\n  curr <= a [ index ] ;\n  curr ++ ) System . out . print ( curr + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longestSubsequence ( a , n ) :\n    mp = { i : 0 for i in range ( 13 ) }\n    dp = [ 0 for i in range ( n ) ]\n    maximum = - sys.maxsize - 1\n    index = - 1\n    for i in range ( n ) :\n        if ( ( a [ i ] - 1 ) in mp ) :\n            lastIndex = mp [ a [ i ] - 1 ] - 1\n            dp [ i ] = 1 + dp [ lastIndex ]\n        else :\n            dp [ i ] = 1\n        mp [ a [ i ] ] = i + 1\n        if ( maximum < dp [ i ] ) :\n            maximum = dp [ i ]\n            index = i\n    for curr in range ( a [ index ] - maximum + 1 , a [ index ] + 1 , 1 ) :\n        print ( curr , end = \" \" )", "target_program": " void longestSubsequence ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  int dp [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int maximum = INT_MIN;\n  int index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( a [ i ] - 1 ) != mp . end ( ) ) {\n      int lastIndex = mp [ a [ i ] - 1 ] - 1;\n      dp [ i ] = 1 + dp [ lastIndex ];\n    }\n    else dp [ i ] = 1;\n    mp [ a [ i ] ] = i + 1;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ];\n      index = i;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1;\n  curr <= a [ index ];\n  curr ++ ) cout << curr << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " public static void longestSubsequence ( int [ ] a , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;\n  int [ ] dp = new int [ n ] ;\n  int maximum = Integer . MIN_VALUE ;\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( mp . get ( a [ i ] - 1 ) != null ) {\n      int lastIndex = mp . get ( a [ i ] - 1 ) - 1 ;\n      dp [ i ] = 1 + dp [ lastIndex ] ;\n    }\n    else dp [ i ] = 1 ;\n    mp . put ( a [ i ] , i + 1 ) ;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ] ;\n      index = i ;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1 ;\n  curr <= a [ index ] ;\n  curr ++ ) System . out . print ( curr + \" \" ) ;\n}", "target_program": " def longestSubsequence ( a , n ) :\n    mp = { i : 0 for i in range ( 13 ) }\n    dp = [ 0 for i in range ( n ) ]\n    maximum = - sys.maxsize - 1\n    index = - 1\n    for i in range ( n ) :\n        if ( ( a [ i ] - 1 ) in mp ) :\n            lastIndex = mp [ a [ i ] - 1 ] - 1\n            dp [ i ] = 1 + dp [ lastIndex ]\n        else :\n            dp [ i ] = 1\n        mp [ a [ i ] ] = i + 1\n        if ( maximum < dp [ i ] ) :\n            maximum = dp [ i ]\n            index = i\n    for curr in range ( a [ index ] - maximum + 1 , a [ index ] + 1 , 1 ) :\n        print ( curr , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " public static void longestSubsequence ( int [ ] a , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;\n  int [ ] dp = new int [ n ] ;\n  int maximum = Integer . MIN_VALUE ;\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( mp . get ( a [ i ] - 1 ) != null ) {\n      int lastIndex = mp . get ( a [ i ] - 1 ) - 1 ;\n      dp [ i ] = 1 + dp [ lastIndex ] ;\n    }\n    else dp [ i ] = 1 ;\n    mp . put ( a [ i ] , i + 1 ) ;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ] ;\n      index = i ;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1 ;\n  curr <= a [ index ] ;\n  curr ++ ) System . out . print ( curr + \" \" ) ;\n}", "target_program": " void longestSubsequence ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  int dp [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int maximum = INT_MIN;\n  int index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( a [ i ] - 1 ) != mp . end ( ) ) {\n      int lastIndex = mp [ a [ i ] - 1 ] - 1;\n      dp [ i ] = 1 + dp [ lastIndex ];\n    }\n    else dp [ i ] = 1;\n    mp [ a [ i ] ] = i + 1;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ];\n      index = i;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1;\n  curr <= a [ index ];\n  curr ++ ) cout << curr << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void longestSubsequence ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  int dp [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int maximum = INT_MIN;\n  int index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( a [ i ] - 1 ) != mp . end ( ) ) {\n      int lastIndex = mp [ a [ i ] - 1 ] - 1;\n      dp [ i ] = 1 + dp [ lastIndex ];\n    }\n    else dp [ i ] = 1;\n    mp [ a [ i ] ] = i + 1;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ];\n      index = i;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1;\n  curr <= a [ index ];\n  curr ++ ) cout << curr << \" \";\n}", "target_program": " public static void longestSubsequence ( int [ ] a , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;\n  int [ ] dp = new int [ n ] ;\n  int maximum = Integer . MIN_VALUE ;\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( mp . get ( a [ i ] - 1 ) != null ) {\n      int lastIndex = mp . get ( a [ i ] - 1 ) - 1 ;\n      dp [ i ] = 1 + dp [ lastIndex ] ;\n    }\n    else dp [ i ] = 1 ;\n    mp . put ( a [ i ] , i + 1 ) ;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ] ;\n      index = i ;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1 ;\n  curr <= a [ index ] ;\n  curr ++ ) System . out . print ( curr + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void longestSubsequence ( int a [ ], int n ) {\n  unordered_map < int, int > mp;\n  int dp [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int maximum = INT_MIN;\n  int index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( a [ i ] - 1 ) != mp . end ( ) ) {\n      int lastIndex = mp [ a [ i ] - 1 ] - 1;\n      dp [ i ] = 1 + dp [ lastIndex ];\n    }\n    else dp [ i ] = 1;\n    mp [ a [ i ] ] = i + 1;\n    if ( maximum < dp [ i ] ) {\n      maximum = dp [ i ];\n      index = i;\n    }\n  }\n  for ( int curr = a [ index ] - maximum + 1;\n  curr <= a [ index ];\n  curr ++ ) cout << curr << \" \";\n}", "target_program": " def longestSubsequence ( a , n ) :\n    mp = { i : 0 for i in range ( 13 ) }\n    dp = [ 0 for i in range ( n ) ]\n    maximum = - sys.maxsize - 1\n    index = - 1\n    for i in range ( n ) :\n        if ( ( a [ i ] - 1 ) in mp ) :\n            lastIndex = mp [ a [ i ] - 1 ] - 1\n            dp [ i ] = 1 + dp [ lastIndex ]\n        else :\n            dp [ i ] = 1\n        mp [ a [ i ] ] = i + 1\n        if ( maximum < dp [ i ] ) :\n            maximum = dp [ i ]\n            index = i\n    for curr in range ( a [ index ] - maximum + 1 , a [ index ] + 1 , 1 ) :\n        print ( curr , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def countTriangle ( g , isDirected ) :\n    nodes = len ( g )\n    count_Triangle = 0\n    for i in range ( nodes ) :\n        for j in range ( nodes ) :\n            for k in range ( nodes ) :\n                if ( i != j and i != k and j != k and g [ i ] [ j ] and g [ j ] [ k ] and g [ k ] [ i ] ) :\n                    count_Triangle += 1\n    return count_Triangle / 3 if isDirected else count_Triangle / 6", "target_program": " int countTriangle ( int graph [ ] [ ] , boolean isDirected ) {\n  int count_Triangle = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < V ;\n    j ++ ) {\n      for ( int k = 0 ;\n      k < V ;\n      k ++ ) {\n        if ( graph [ i ] [ j ] == 1 && graph [ j ] [ k ] == 1 && graph [ k ] [ i ] == 1 ) count_Triangle ++ ;\n      }\n    }\n  }\n  if ( isDirected == true ) {\n    count_Triangle /= 3 ;\n  }\n  else {\n    count_Triangle /= 6 ;\n  }\n  return count_Triangle ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countTriangle ( g , isDirected ) :\n    nodes = len ( g )\n    count_Triangle = 0\n    for i in range ( nodes ) :\n        for j in range ( nodes ) :\n            for k in range ( nodes ) :\n                if ( i != j and i != k and j != k and g [ i ] [ j ] and g [ j ] [ k ] and g [ k ] [ i ] ) :\n                    count_Triangle += 1\n    return count_Triangle / 3 if isDirected else count_Triangle / 6", "target_program": " int countTriangle ( int graph [ V ] [ V ], bool isDirected ) {\n  int count_Triangle = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    for ( int j = 0;\n    j < V;\n    j ++ ) {\n      for ( int k = 0;\n      k < V;\n      k ++ ) {\n        if ( graph [ i ] [ j ] && graph [ j ] [ k ] && graph [ k ] [ i ] ) count_Triangle ++;\n      }\n    }\n  }\n  isDirected ? count_Triangle /= 3 : count_Triangle /= 6;\n  return count_Triangle;\n}"}
{"source": "java", "target": "python", "source_program": " int countTriangle ( int graph [ ] [ ] , boolean isDirected ) {\n  int count_Triangle = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < V ;\n    j ++ ) {\n      for ( int k = 0 ;\n      k < V ;\n      k ++ ) {\n        if ( graph [ i ] [ j ] == 1 && graph [ j ] [ k ] == 1 && graph [ k ] [ i ] == 1 ) count_Triangle ++ ;\n      }\n    }\n  }\n  if ( isDirected == true ) {\n    count_Triangle /= 3 ;\n  }\n  else {\n    count_Triangle /= 6 ;\n  }\n  return count_Triangle ;\n}", "target_program": " def countTriangle ( g , isDirected ) :\n    nodes = len ( g )\n    count_Triangle = 0\n    for i in range ( nodes ) :\n        for j in range ( nodes ) :\n            for k in range ( nodes ) :\n                if ( i != j and i != k and j != k and g [ i ] [ j ] and g [ j ] [ k ] and g [ k ] [ i ] ) :\n                    count_Triangle += 1\n    return count_Triangle / 3 if isDirected else count_Triangle / 6"}
{"source": "java", "target": "cpp", "source_program": " int countTriangle ( int graph [ ] [ ] , boolean isDirected ) {\n  int count_Triangle = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < V ;\n    j ++ ) {\n      for ( int k = 0 ;\n      k < V ;\n      k ++ ) {\n        if ( graph [ i ] [ j ] == 1 && graph [ j ] [ k ] == 1 && graph [ k ] [ i ] == 1 ) count_Triangle ++ ;\n      }\n    }\n  }\n  if ( isDirected == true ) {\n    count_Triangle /= 3 ;\n  }\n  else {\n    count_Triangle /= 6 ;\n  }\n  return count_Triangle ;\n}", "target_program": " int countTriangle ( int graph [ V ] [ V ], bool isDirected ) {\n  int count_Triangle = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    for ( int j = 0;\n    j < V;\n    j ++ ) {\n      for ( int k = 0;\n      k < V;\n      k ++ ) {\n        if ( graph [ i ] [ j ] && graph [ j ] [ k ] && graph [ k ] [ i ] ) count_Triangle ++;\n      }\n    }\n  }\n  isDirected ? count_Triangle /= 3 : count_Triangle /= 6;\n  return count_Triangle;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countTriangle ( int graph [ V ] [ V ], bool isDirected ) {\n  int count_Triangle = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    for ( int j = 0;\n    j < V;\n    j ++ ) {\n      for ( int k = 0;\n      k < V;\n      k ++ ) {\n        if ( graph [ i ] [ j ] && graph [ j ] [ k ] && graph [ k ] [ i ] ) count_Triangle ++;\n      }\n    }\n  }\n  isDirected ? count_Triangle /= 3 : count_Triangle /= 6;\n  return count_Triangle;\n}", "target_program": " int countTriangle ( int graph [ ] [ ] , boolean isDirected ) {\n  int count_Triangle = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < V ;\n    j ++ ) {\n      for ( int k = 0 ;\n      k < V ;\n      k ++ ) {\n        if ( graph [ i ] [ j ] == 1 && graph [ j ] [ k ] == 1 && graph [ k ] [ i ] == 1 ) count_Triangle ++ ;\n      }\n    }\n  }\n  if ( isDirected == true ) {\n    count_Triangle /= 3 ;\n  }\n  else {\n    count_Triangle /= 6 ;\n  }\n  return count_Triangle ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countTriangle ( int graph [ V ] [ V ], bool isDirected ) {\n  int count_Triangle = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    for ( int j = 0;\n    j < V;\n    j ++ ) {\n      for ( int k = 0;\n      k < V;\n      k ++ ) {\n        if ( graph [ i ] [ j ] && graph [ j ] [ k ] && graph [ k ] [ i ] ) count_Triangle ++;\n      }\n    }\n  }\n  isDirected ? count_Triangle /= 3 : count_Triangle /= 6;\n  return count_Triangle;\n}", "target_program": " def countTriangle ( g , isDirected ) :\n    nodes = len ( g )\n    count_Triangle = 0\n    for i in range ( nodes ) :\n        for j in range ( nodes ) :\n            for k in range ( nodes ) :\n                if ( i != j and i != k and j != k and g [ i ] [ j ] and g [ j ] [ k ] and g [ k ] [ i ] ) :\n                    count_Triangle += 1\n    return count_Triangle / 3 if isDirected else count_Triangle / 6"}
{"source": "python", "target": "java", "source_program": " def checkDuplicatesWithinK ( arr , n , k ) :\n    myset = [ ]\n    for i in range ( n ) :\n        if arr [ i ] in myset :\n            return True\n        myset.append ( arr [ i ] )\n        if ( i >= k ) :\n            myset.remove ( arr [ i - k ] )\n    return False", "target_program": " static boolean checkDuplicatesWithinK ( int arr [ ] , int k ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( set . contains ( arr [ i ] ) ) return true ;\n    set . add ( arr [ i ] ) ;\n    if ( i >= k ) set . remove ( arr [ i - k ] ) ;\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkDuplicatesWithinK ( arr , n , k ) :\n    myset = [ ]\n    for i in range ( n ) :\n        if arr [ i ] in myset :\n            return True\n        myset.append ( arr [ i ] )\n        if ( i >= k ) :\n            myset.remove ( arr [ i - k ] )\n    return False", "target_program": " bool checkDuplicatesWithinK ( int arr [ ], int n, int k ) {\n  unordered_set < int > myset;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) return true;\n    myset . insert ( arr [ i ] );\n    if ( i >= k ) myset . erase ( arr [ i - k ] );\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkDuplicatesWithinK ( int arr [ ] , int k ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( set . contains ( arr [ i ] ) ) return true ;\n    set . add ( arr [ i ] ) ;\n    if ( i >= k ) set . remove ( arr [ i - k ] ) ;\n  }\n  return false ;\n}", "target_program": " def checkDuplicatesWithinK ( arr , n , k ) :\n    myset = [ ]\n    for i in range ( n ) :\n        if arr [ i ] in myset :\n            return True\n        myset.append ( arr [ i ] )\n        if ( i >= k ) :\n            myset.remove ( arr [ i - k ] )\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkDuplicatesWithinK ( int arr [ ] , int k ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( set . contains ( arr [ i ] ) ) return true ;\n    set . add ( arr [ i ] ) ;\n    if ( i >= k ) set . remove ( arr [ i - k ] ) ;\n  }\n  return false ;\n}", "target_program": " bool checkDuplicatesWithinK ( int arr [ ], int n, int k ) {\n  unordered_set < int > myset;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) return true;\n    myset . insert ( arr [ i ] );\n    if ( i >= k ) myset . erase ( arr [ i - k ] );\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkDuplicatesWithinK ( int arr [ ], int n, int k ) {\n  unordered_set < int > myset;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) return true;\n    myset . insert ( arr [ i ] );\n    if ( i >= k ) myset . erase ( arr [ i - k ] );\n  }\n  return false;\n}", "target_program": " static boolean checkDuplicatesWithinK ( int arr [ ] , int k ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( set . contains ( arr [ i ] ) ) return true ;\n    set . add ( arr [ i ] ) ;\n    if ( i >= k ) set . remove ( arr [ i - k ] ) ;\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkDuplicatesWithinK ( int arr [ ], int n, int k ) {\n  unordered_set < int > myset;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( myset . find ( arr [ i ] ) != myset . end ( ) ) return true;\n    myset . insert ( arr [ i ] );\n    if ( i >= k ) myset . erase ( arr [ i - k ] );\n  }\n  return false;\n}", "target_program": " def checkDuplicatesWithinK ( arr , n , k ) :\n    myset = [ ]\n    for i in range ( n ) :\n        if arr [ i ] in myset :\n            return True\n        myset.append ( arr [ i ] )\n        if ( i >= k ) :\n            myset.remove ( arr [ i - k ] )\n    return False"}
{"source": "python", "target": "java", "source_program": " def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    for i in range ( N ) :\n        lis [ i ] = 1\n    for i in range ( 1 , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n    max = 0\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )", "target_program": " static int minInsertionStepToSortArray ( int arr [ ] , int N ) {\n  int [ ] lis = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int max = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return ( N - max ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    for i in range ( N ) :\n        lis [ i ] = 1\n    for i in range ( 1 , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n    max = 0\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )", "target_program": " int minInsertionStepToSortArray ( int arr [ ], int N ) {\n  int lis [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) lis [ i ] = 1;\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int max = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ];\n  return ( N - max );\n}"}
{"source": "java", "target": "python", "source_program": " static int minInsertionStepToSortArray ( int arr [ ] , int N ) {\n  int [ ] lis = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int max = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return ( N - max ) ;\n}", "target_program": " def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    for i in range ( N ) :\n        lis [ i ] = 1\n    for i in range ( 1 , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n    max = 0\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )"}
{"source": "java", "target": "cpp", "source_program": " static int minInsertionStepToSortArray ( int arr [ ] , int N ) {\n  int [ ] lis = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int max = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return ( N - max ) ;\n}", "target_program": " int minInsertionStepToSortArray ( int arr [ ], int N ) {\n  int lis [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) lis [ i ] = 1;\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int max = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ];\n  return ( N - max );\n}"}
{"source": "cpp", "target": "java", "source_program": " int minInsertionStepToSortArray ( int arr [ ], int N ) {\n  int lis [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) lis [ i ] = 1;\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int max = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ];\n  return ( N - max );\n}", "target_program": " static int minInsertionStepToSortArray ( int arr [ ] , int N ) {\n  int [ ] lis = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  int max = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return ( N - max ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minInsertionStepToSortArray ( int arr [ ], int N ) {\n  int lis [ N ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) lis [ i ] = 1;\n  for ( int i = 1;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < i;\n  j ++ ) if ( arr [ i ] >= arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  int max = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ];\n  return ( N - max );\n}", "target_program": " def minInsertionStepToSortArray ( arr , N ) :\n    lis = [ 0 ] * N\n    for i in range ( N ) :\n        lis [ i ] = 1\n    for i in range ( 1 , N ) :\n        for j in range ( i ) :\n            if ( arr [ i ] >= arr [ j ] and lis [ i ] < lis [ j ] + 1 ) :\n                lis [ i ] = lis [ j ] + 1\n    max = 0\n    for i in range ( N ) :\n        if ( max < lis [ i ] ) :\n            max = lis [ i ]\n    return ( N - max )"}
{"source": "python", "target": "java", "source_program": " def countNonDecreasing ( n ) :\n    N = 10\n    count = 1\n    for i in range ( 1 , n + 1 ) :\n        count = int ( count * ( N + i - 1 ) )\n        count = int ( count / i )\n    return count", "target_program": " static long countNonDecreasing ( int n ) {\n  int N = 10 ;\n  long count = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    count *= ( N + i - 1 ) ;\n    count /= i ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNonDecreasing ( n ) :\n    N = 10\n    count = 1\n    for i in range ( 1 , n + 1 ) :\n        count = int ( count * ( N + i - 1 ) )\n        count = int ( count / i )\n    return count", "target_program": " long long int countNonDecreasing ( int n ) {\n  int N = 10;\n  long long count = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    count *= ( N + i - 1 );\n    count /= i;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static long countNonDecreasing ( int n ) {\n  int N = 10 ;\n  long count = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    count *= ( N + i - 1 ) ;\n    count /= i ;\n  }\n  return count ;\n}", "target_program": " def countNonDecreasing ( n ) :\n    N = 10\n    count = 1\n    for i in range ( 1 , n + 1 ) :\n        count = int ( count * ( N + i - 1 ) )\n        count = int ( count / i )\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static long countNonDecreasing ( int n ) {\n  int N = 10 ;\n  long count = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    count *= ( N + i - 1 ) ;\n    count /= i ;\n  }\n  return count ;\n}", "target_program": " long long int countNonDecreasing ( int n ) {\n  int N = 10;\n  long long count = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    count *= ( N + i - 1 );\n    count /= i;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int countNonDecreasing ( int n ) {\n  int N = 10;\n  long long count = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    count *= ( N + i - 1 );\n    count /= i;\n  }\n  return count;\n}", "target_program": " static long countNonDecreasing ( int n ) {\n  int N = 10 ;\n  long count = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    count *= ( N + i - 1 ) ;\n    count /= i ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int countNonDecreasing ( int n ) {\n  int N = 10;\n  long long count = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    count *= ( N + i - 1 );\n    count /= i;\n  }\n  return count;\n}", "target_program": " def countNonDecreasing ( n ) :\n    N = 10\n    count = 1\n    for i in range ( 1 , n + 1 ) :\n        count = int ( count * ( N + i - 1 ) )\n        count = int ( count / i )\n    return count"}
{"source": "python", "target": "java", "source_program": " def countStrs ( n ) :\n    dp = [ [ 0 for j in range ( 27 ) ] for i in range ( n + 1 ) ]\n    for i in range ( 0 , 26 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 0 , 26 ) :\n            if ( j == 0 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n    sum = 0\n    for i in range ( 0 , 26 ) :\n        sum = sum + dp [ n ] [ i ]\n    return sum", "target_program": " static long countStrs ( int n ) {\n  long [ ] [ ] dp = new long [ n + 1 ] [ 27 ] ;\n  for ( int i = 0 ;\n  i < n + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < 27 ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    dp [ 1 ] [ i ] = 1 ;\n  }\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= 25 ;\n    j ++ ) {\n      if ( j == 0 ) {\n        dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n      }\n      else {\n        dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] ) ;\n      }\n    }\n  }\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    sum = ( sum + dp [ n ] [ i ] ) ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countStrs ( n ) :\n    dp = [ [ 0 for j in range ( 27 ) ] for i in range ( n + 1 ) ]\n    for i in range ( 0 , 26 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 0 , 26 ) :\n            if ( j == 0 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n    sum = 0\n    for i in range ( 0 , 26 ) :\n        sum = sum + dp [ n ] [ i ]\n    return sum", "target_program": " int countStrs ( int n ) {\n  long int dp [ n + 1 ] [ 27 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= 25;\n    j ++ ) if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ];\n    else dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] );\n  }\n  long int sum = 0;\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) sum = ( sum + dp [ n ] [ i ] );\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static long countStrs ( int n ) {\n  long [ ] [ ] dp = new long [ n + 1 ] [ 27 ] ;\n  for ( int i = 0 ;\n  i < n + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < 27 ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    dp [ 1 ] [ i ] = 1 ;\n  }\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= 25 ;\n    j ++ ) {\n      if ( j == 0 ) {\n        dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n      }\n      else {\n        dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] ) ;\n      }\n    }\n  }\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    sum = ( sum + dp [ n ] [ i ] ) ;\n  }\n  return sum ;\n}", "target_program": " def countStrs ( n ) :\n    dp = [ [ 0 for j in range ( 27 ) ] for i in range ( n + 1 ) ]\n    for i in range ( 0 , 26 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 0 , 26 ) :\n            if ( j == 0 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n    sum = 0\n    for i in range ( 0 , 26 ) :\n        sum = sum + dp [ n ] [ i ]\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static long countStrs ( int n ) {\n  long [ ] [ ] dp = new long [ n + 1 ] [ 27 ] ;\n  for ( int i = 0 ;\n  i < n + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < 27 ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    dp [ 1 ] [ i ] = 1 ;\n  }\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= 25 ;\n    j ++ ) {\n      if ( j == 0 ) {\n        dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n      }\n      else {\n        dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] ) ;\n      }\n    }\n  }\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    sum = ( sum + dp [ n ] [ i ] ) ;\n  }\n  return sum ;\n}", "target_program": " int countStrs ( int n ) {\n  long int dp [ n + 1 ] [ 27 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= 25;\n    j ++ ) if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ];\n    else dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] );\n  }\n  long int sum = 0;\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) sum = ( sum + dp [ n ] [ i ] );\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countStrs ( int n ) {\n  long int dp [ n + 1 ] [ 27 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= 25;\n    j ++ ) if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ];\n    else dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] );\n  }\n  long int sum = 0;\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) sum = ( sum + dp [ n ] [ i ] );\n  return sum;\n}", "target_program": " static long countStrs ( int n ) {\n  long [ ] [ ] dp = new long [ n + 1 ] [ 27 ] ;\n  for ( int i = 0 ;\n  i < n + 1 ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < 27 ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    dp [ 1 ] [ i ] = 1 ;\n  }\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= 25 ;\n    j ++ ) {\n      if ( j == 0 ) {\n        dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n      }\n      else {\n        dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] ) ;\n      }\n    }\n  }\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i <= 25 ;\n  i ++ ) {\n    sum = ( sum + dp [ n ] [ i ] ) ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countStrs ( int n ) {\n  long int dp [ n + 1 ] [ 27 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= 25;\n    j ++ ) if ( j == 0 ) dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ];\n    else dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] );\n  }\n  long int sum = 0;\n  for ( int i = 0;\n  i <= 25;\n  i ++ ) sum = ( sum + dp [ n ] [ i ] );\n  return sum;\n}", "target_program": " def countStrs ( n ) :\n    dp = [ [ 0 for j in range ( 27 ) ] for i in range ( n + 1 ) ]\n    for i in range ( 0 , 26 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 0 , 26 ) :\n            if ( j == 0 ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j + 1 ] ;\n            else :\n                dp [ i ] [ j ] = ( dp [ i - 1 ] [ j - 1 ] + dp [ i - 1 ] [ j + 1 ] )\n    sum = 0\n    for i in range ( 0 , 26 ) :\n        sum = sum + dp [ n ] [ i ]\n    return sum"}
{"source": "python", "target": "java", "source_program": " def exponential ( n , x ) :\n    sum = 1.0\n    for i in range ( n , 0 , - 1 ) :\n        sum = 1 + x * sum / i\n    print ( \"e^x =\" , sum )", "target_program": " static float exponential ( int n , float x ) {\n  float sum = 1 ;\n  for ( int i = n - 1 ;\n  i > 0 ;\n  -- i ) sum = 1 + x * sum / i ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def exponential ( n , x ) :\n    sum = 1.0\n    for i in range ( n , 0 , - 1 ) :\n        sum = 1 + x * sum / i\n    print ( \"e^x =\" , sum )", "target_program": " float exponential ( int n, float x ) {\n  float sum = 1.0f;\n  for ( int i = n - 1;\n  i > 0;\n  -- i ) sum = 1 + x * sum / i;\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static float exponential ( int n , float x ) {\n  float sum = 1 ;\n  for ( int i = n - 1 ;\n  i > 0 ;\n  -- i ) sum = 1 + x * sum / i ;\n  return sum ;\n}", "target_program": " def exponential ( n , x ) :\n    sum = 1.0\n    for i in range ( n , 0 , - 1 ) :\n        sum = 1 + x * sum / i\n    print ( \"e^x =\" , sum )"}
{"source": "java", "target": "cpp", "source_program": " static float exponential ( int n , float x ) {\n  float sum = 1 ;\n  for ( int i = n - 1 ;\n  i > 0 ;\n  -- i ) sum = 1 + x * sum / i ;\n  return sum ;\n}", "target_program": " float exponential ( int n, float x ) {\n  float sum = 1.0f;\n  for ( int i = n - 1;\n  i > 0;\n  -- i ) sum = 1 + x * sum / i;\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " float exponential ( int n, float x ) {\n  float sum = 1.0f;\n  for ( int i = n - 1;\n  i > 0;\n  -- i ) sum = 1 + x * sum / i;\n  return sum;\n}", "target_program": " static float exponential ( int n , float x ) {\n  float sum = 1 ;\n  for ( int i = n - 1 ;\n  i > 0 ;\n  -- i ) sum = 1 + x * sum / i ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float exponential ( int n, float x ) {\n  float sum = 1.0f;\n  for ( int i = n - 1;\n  i > 0;\n  -- i ) sum = 1 + x * sum / i;\n  return sum;\n}", "target_program": " def exponential ( n , x ) :\n    sum = 1.0\n    for i in range ( n , 0 , - 1 ) :\n        sum = 1 + x * sum / i\n    print ( \"e^x =\" , sum )"}
{"source": "python", "target": "java", "source_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0\n    for i in range ( 0 , n ) :\n        principal += mat [ i ] [ i ]\n        secondary += mat [ i ] [ n - i - 1 ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )", "target_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    principal += mat [ i ] [ i ] ;\n    secondary += mat [ i ] [ n - i - 1 ] ;\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0\n    for i in range ( 0 , n ) :\n        principal += mat [ i ] [ i ]\n        secondary += mat [ i ] [ n - i - 1 ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )", "target_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    principal += mat [ i ] [ i ];\n    secondary += mat [ i ] [ n - i - 1 ];\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    principal += mat [ i ] [ i ] ;\n    secondary += mat [ i ] [ n - i - 1 ] ;\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}", "target_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0\n    for i in range ( 0 , n ) :\n        principal += mat [ i ] [ i ]\n        secondary += mat [ i ] [ n - i - 1 ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )"}
{"source": "java", "target": "cpp", "source_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    principal += mat [ i ] [ i ] ;\n    secondary += mat [ i ] [ n - i - 1 ] ;\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}", "target_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    principal += mat [ i ] [ i ];\n    secondary += mat [ i ] [ n - i - 1 ];\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    principal += mat [ i ] [ i ];\n    secondary += mat [ i ] [ n - i - 1 ];\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}", "target_program": " static void printDiagonalSums ( int [ ] [ ] mat , int n ) {\n  int principal = 0 , secondary = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    principal += mat [ i ] [ i ] ;\n    secondary += mat [ i ] [ n - i - 1 ] ;\n  }\n  System . out . println ( \"Principal Diagonal:\" + principal ) ;\n  System . out . println ( \"Secondary Diagonal:\" + secondary ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDiagonalSums ( int mat [ ] [ MAX ], int n ) {\n  int principal = 0, secondary = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    principal += mat [ i ] [ i ];\n    secondary += mat [ i ] [ n - i - 1 ];\n  }\n  cout << \"Principal Diagonal:\" << principal << endl;\n  cout << \"Secondary Diagonal:\" << secondary << endl;\n}", "target_program": " def printDiagonalSums ( mat , n ) :\n    principal = 0\n    secondary = 0\n    for i in range ( 0 , n ) :\n        principal += mat [ i ] [ i ]\n        secondary += mat [ i ] [ n - i - 1 ]\n    print ( \"Principal Diagonal:\" , principal )\n    print ( \"Secondary Diagonal:\" , secondary )"}
{"source": "python", "target": "java", "source_program": " def findCombinations ( string , index , out ) :\n    if index == len ( string ) :\n        print ( out )\n    for i in range ( index , len ( string ) , 1 ) :\n        findCombinations ( string , i + 1 , out + \"(\" + string [ index : i + 1 ] + \")\" )", "target_program": " static void findCombinations ( String str , int index , String out ) {\n  if ( index == str . length ( ) ) System . out . println ( out ) ;\n  for ( int i = index ;\n  i < str . length ( ) ;\n  i ++ ) findCombinations ( str , i + 1 , out + \"(\" + str . substring ( index , i + 1 ) + \")\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findCombinations ( string , index , out ) :\n    if index == len ( string ) :\n        print ( out )\n    for i in range ( index , len ( string ) , 1 ) :\n        findCombinations ( string , i + 1 , out + \"(\" + string [ index : i + 1 ] + \")\" )", "target_program": " void findCombinations ( string str, int index, string out ) {\n  if ( index == str . length ( ) ) cout << out << endl;\n  for ( int i = index;\n  i < str . length ( );\n  i ++ ) findCombinations ( str, i + 1, out + \"(\" + str . substr ( index, i + 1 - index ) + \")\" );\n}"}
{"source": "java", "target": "python", "source_program": " static void findCombinations ( String str , int index , String out ) {\n  if ( index == str . length ( ) ) System . out . println ( out ) ;\n  for ( int i = index ;\n  i < str . length ( ) ;\n  i ++ ) findCombinations ( str , i + 1 , out + \"(\" + str . substring ( index , i + 1 ) + \")\" ) ;\n}", "target_program": " def findCombinations ( string , index , out ) :\n    if index == len ( string ) :\n        print ( out )\n    for i in range ( index , len ( string ) , 1 ) :\n        findCombinations ( string , i + 1 , out + \"(\" + string [ index : i + 1 ] + \")\" )"}
{"source": "java", "target": "cpp", "source_program": " static void findCombinations ( String str , int index , String out ) {\n  if ( index == str . length ( ) ) System . out . println ( out ) ;\n  for ( int i = index ;\n  i < str . length ( ) ;\n  i ++ ) findCombinations ( str , i + 1 , out + \"(\" + str . substring ( index , i + 1 ) + \")\" ) ;\n}", "target_program": " void findCombinations ( string str, int index, string out ) {\n  if ( index == str . length ( ) ) cout << out << endl;\n  for ( int i = index;\n  i < str . length ( );\n  i ++ ) findCombinations ( str, i + 1, out + \"(\" + str . substr ( index, i + 1 - index ) + \")\" );\n}"}
{"source": "cpp", "target": "java", "source_program": " void findCombinations ( string str, int index, string out ) {\n  if ( index == str . length ( ) ) cout << out << endl;\n  for ( int i = index;\n  i < str . length ( );\n  i ++ ) findCombinations ( str, i + 1, out + \"(\" + str . substr ( index, i + 1 - index ) + \")\" );\n}", "target_program": " static void findCombinations ( String str , int index , String out ) {\n  if ( index == str . length ( ) ) System . out . println ( out ) ;\n  for ( int i = index ;\n  i < str . length ( ) ;\n  i ++ ) findCombinations ( str , i + 1 , out + \"(\" + str . substring ( index , i + 1 ) + \")\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findCombinations ( string str, int index, string out ) {\n  if ( index == str . length ( ) ) cout << out << endl;\n  for ( int i = index;\n  i < str . length ( );\n  i ++ ) findCombinations ( str, i + 1, out + \"(\" + str . substr ( index, i + 1 - index ) + \")\" );\n}", "target_program": " def findCombinations ( string , index , out ) :\n    if index == len ( string ) :\n        print ( out )\n    for i in range ( index , len ( string ) , 1 ) :\n        findCombinations ( string , i + 1 , out + \"(\" + string [ index : i + 1 ] + \")\" )"}
{"source": "python", "target": "java", "source_program": " def search ( arr , n , x ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == x ) :\n            return i ;\n    return - 1 ;", "target_program": " public static int search ( int arr [ ] , int x ) {\n  int n = arr . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , n , x ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == x ) :\n            return i ;\n    return - 1 ;", "target_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == x ) return i;\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " public static int search ( int arr [ ] , int x ) {\n  int n = arr . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}", "target_program": " def search ( arr , n , x ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == x ) :\n            return i ;\n    return - 1 ;"}
{"source": "java", "target": "cpp", "source_program": " public static int search ( int arr [ ] , int x ) {\n  int n = arr . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}", "target_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == x ) return i;\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == x ) return i;\n  return - 1;\n}", "target_program": " public static int search ( int arr [ ] , int x ) {\n  int n = arr . length ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] == x ) return i;\n  return - 1;\n}", "target_program": " def search ( arr , n , x ) :\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == x ) :\n            return i ;\n    return - 1 ;"}
{"source": "python", "target": "java", "source_program": " def singleNumber ( nums ) :\n    return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2", "target_program": " static int singleNumber ( int a [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i : a ) {\n    s . add ( i ) ;\n  }\n  int arr_sum = 0 ;\n  for ( int i : a ) {\n    arr_sum += i ;\n  }\n  int set_sum = 0 ;\n  for ( int i : s ) {\n    set_sum += i ;\n  }\n  return ( 3 * set_sum - arr_sum ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def singleNumber ( nums ) :\n    return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2", "target_program": " int singleNumber ( int a [ ], int n ) {\n  unordered_set < int > s ( a, a + n );\n  int arr_sum = accumulate ( a, a + n, 0 );\n  int set_sum = accumulate ( s . begin ( ), s . end ( ), 0 );\n  return ( 3 * set_sum - arr_sum ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int singleNumber ( int a [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i : a ) {\n    s . add ( i ) ;\n  }\n  int arr_sum = 0 ;\n  for ( int i : a ) {\n    arr_sum += i ;\n  }\n  int set_sum = 0 ;\n  for ( int i : s ) {\n    set_sum += i ;\n  }\n  return ( 3 * set_sum - arr_sum ) / 2 ;\n}", "target_program": " def singleNumber ( nums ) :\n    return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2"}
{"source": "java", "target": "cpp", "source_program": " static int singleNumber ( int a [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i : a ) {\n    s . add ( i ) ;\n  }\n  int arr_sum = 0 ;\n  for ( int i : a ) {\n    arr_sum += i ;\n  }\n  int set_sum = 0 ;\n  for ( int i : s ) {\n    set_sum += i ;\n  }\n  return ( 3 * set_sum - arr_sum ) / 2 ;\n}", "target_program": " int singleNumber ( int a [ ], int n ) {\n  unordered_set < int > s ( a, a + n );\n  int arr_sum = accumulate ( a, a + n, 0 );\n  int set_sum = accumulate ( s . begin ( ), s . end ( ), 0 );\n  return ( 3 * set_sum - arr_sum ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int singleNumber ( int a [ ], int n ) {\n  unordered_set < int > s ( a, a + n );\n  int arr_sum = accumulate ( a, a + n, 0 );\n  int set_sum = accumulate ( s . begin ( ), s . end ( ), 0 );\n  return ( 3 * set_sum - arr_sum ) / 2;\n}", "target_program": " static int singleNumber ( int a [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i : a ) {\n    s . add ( i ) ;\n  }\n  int arr_sum = 0 ;\n  for ( int i : a ) {\n    arr_sum += i ;\n  }\n  int set_sum = 0 ;\n  for ( int i : s ) {\n    set_sum += i ;\n  }\n  return ( 3 * set_sum - arr_sum ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int singleNumber ( int a [ ], int n ) {\n  unordered_set < int > s ( a, a + n );\n  int arr_sum = accumulate ( a, a + n, 0 );\n  int set_sum = accumulate ( s . begin ( ), s . end ( ), 0 );\n  return ( 3 * set_sum - arr_sum ) / 2;\n}", "target_program": " def singleNumber ( nums ) :\n    return ( 3 * sum ( set ( nums ) ) - sum ( nums ) ) / 2"}
{"source": "python", "target": "java", "source_program": " def binarySearch ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / 2 )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - 1 ] == x ) :\n            return ( mid - 1 )\n        if ( mid < r and arr [ mid + 1 ] == x ) :\n            return ( mid + 1 )\n        if ( arr [ mid ] > x ) :\n            return binarySearch ( arr , l , mid - 2 , x )\n        return binarySearch ( arr , mid + 2 , r , x )\n    return - 1", "target_program": " int binarySearch ( int arr [ ] , int l , int r , int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2 ;\n    if ( arr [ mid ] == x ) return mid ;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) ;\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) ;\n    if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 2 , x ) ;\n    return binarySearch ( arr , mid + 2 , r , x ) ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def binarySearch ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / 2 )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - 1 ] == x ) :\n            return ( mid - 1 )\n        if ( mid < r and arr [ mid + 1 ] == x ) :\n            return ( mid + 1 )\n        if ( arr [ mid ] > x ) :\n            return binarySearch ( arr , l , mid - 2 , x )\n        return binarySearch ( arr , mid + 2 , r , x )\n    return - 1", "target_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2;\n    if ( arr [ mid ] == x ) return mid;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 );\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 );\n    if ( arr [ mid ] > x ) return binarySearch ( arr, l, mid - 2, x );\n    return binarySearch ( arr, mid + 2, r, x );\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " int binarySearch ( int arr [ ] , int l , int r , int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2 ;\n    if ( arr [ mid ] == x ) return mid ;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) ;\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) ;\n    if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 2 , x ) ;\n    return binarySearch ( arr , mid + 2 , r , x ) ;\n  }\n  return - 1 ;\n}", "target_program": " def binarySearch ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / 2 )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - 1 ] == x ) :\n            return ( mid - 1 )\n        if ( mid < r and arr [ mid + 1 ] == x ) :\n            return ( mid + 1 )\n        if ( arr [ mid ] > x ) :\n            return binarySearch ( arr , l , mid - 2 , x )\n        return binarySearch ( arr , mid + 2 , r , x )\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " int binarySearch ( int arr [ ] , int l , int r , int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2 ;\n    if ( arr [ mid ] == x ) return mid ;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) ;\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) ;\n    if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 2 , x ) ;\n    return binarySearch ( arr , mid + 2 , r , x ) ;\n  }\n  return - 1 ;\n}", "target_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2;\n    if ( arr [ mid ] == x ) return mid;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 );\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 );\n    if ( arr [ mid ] > x ) return binarySearch ( arr, l, mid - 2, x );\n    return binarySearch ( arr, mid + 2, r, x );\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2;\n    if ( arr [ mid ] == x ) return mid;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 );\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 );\n    if ( arr [ mid ] > x ) return binarySearch ( arr, l, mid - 2, x );\n    return binarySearch ( arr, mid + 2, r, x );\n  }\n  return - 1;\n}", "target_program": " int binarySearch ( int arr [ ] , int l , int r , int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2 ;\n    if ( arr [ mid ] == x ) return mid ;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 ) ;\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 ) ;\n    if ( arr [ mid ] > x ) return binarySearch ( arr , l , mid - 2 , x ) ;\n    return binarySearch ( arr , mid + 2 , r , x ) ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  if ( r >= l ) {\n    int mid = l + ( r - l ) / 2;\n    if ( arr [ mid ] == x ) return mid;\n    if ( mid > l && arr [ mid - 1 ] == x ) return ( mid - 1 );\n    if ( mid < r && arr [ mid + 1 ] == x ) return ( mid + 1 );\n    if ( arr [ mid ] > x ) return binarySearch ( arr, l, mid - 2, x );\n    return binarySearch ( arr, mid + 2, r, x );\n  }\n  return - 1;\n}", "target_program": " def binarySearch ( arr , l , r , x ) :\n    if ( r >= l ) :\n        mid = int ( l + ( r - l ) / 2 )\n        if ( arr [ mid ] == x ) : return mid\n        if ( mid > l and arr [ mid - 1 ] == x ) :\n            return ( mid - 1 )\n        if ( mid < r and arr [ mid + 1 ] == x ) :\n            return ( mid + 1 )\n        if ( arr [ mid ] > x ) :\n            return binarySearch ( arr , l , mid - 2 , x )\n        return binarySearch ( arr , mid + 2 , r , x )\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def computeTotient ( n ) :\n    phi = [ ]\n    for i in range ( n + 2 ) :\n        phi.append ( 0 )\n    for i in range ( 1 , n + 1 ) :\n        phi [ i ] = i\n    for p in range ( 2 , n + 1 ) :\n        if ( phi [ p ] == p ) :\n            phi [ p ] = p - 1\n            for i in range ( 2 * p , n + 1 , p ) :\n                phi [ i ] = ( phi [ i ] // p ) * ( p - 1 )\n    for i in range ( 1 , n + 1 ) :\n        print ( \"Totient of \" , i , \" is \" , phi [ i ] )", "target_program": " static void computeTotient ( int n ) {\n  long phi [ ] = new long [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) phi [ i ] = i ;\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1 ;\n      for ( int i = 2 * p ;\n      i <= n ;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 ) ;\n      }\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . println ( \"Totient of \" + i + \" is \" + phi [ i ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def computeTotient ( n ) :\n    phi = [ ]\n    for i in range ( n + 2 ) :\n        phi.append ( 0 )\n    for i in range ( 1 , n + 1 ) :\n        phi [ i ] = i\n    for p in range ( 2 , n + 1 ) :\n        if ( phi [ p ] == p ) :\n            phi [ p ] = p - 1\n            for i in range ( 2 * p , n + 1 , p ) :\n                phi [ i ] = ( phi [ i ] // p ) * ( p - 1 )\n    for i in range ( 1 , n + 1 ) :\n        print ( \"Totient of \" , i , \" is \" , phi [ i ] )", "target_program": " void computeTotient ( int n ) {\n  long long phi [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) phi [ i ] = i;\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1;\n      for ( int i = 2 * p;\n      i <= n;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 );\n      }\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << \"Totient of \" << i << \" is \" << phi [ i ] << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void computeTotient ( int n ) {\n  long phi [ ] = new long [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) phi [ i ] = i ;\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1 ;\n      for ( int i = 2 * p ;\n      i <= n ;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 ) ;\n      }\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . println ( \"Totient of \" + i + \" is \" + phi [ i ] ) ;\n}", "target_program": " def computeTotient ( n ) :\n    phi = [ ]\n    for i in range ( n + 2 ) :\n        phi.append ( 0 )\n    for i in range ( 1 , n + 1 ) :\n        phi [ i ] = i\n    for p in range ( 2 , n + 1 ) :\n        if ( phi [ p ] == p ) :\n            phi [ p ] = p - 1\n            for i in range ( 2 * p , n + 1 , p ) :\n                phi [ i ] = ( phi [ i ] // p ) * ( p - 1 )\n    for i in range ( 1 , n + 1 ) :\n        print ( \"Totient of \" , i , \" is \" , phi [ i ] )"}
{"source": "java", "target": "cpp", "source_program": " static void computeTotient ( int n ) {\n  long phi [ ] = new long [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) phi [ i ] = i ;\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1 ;\n      for ( int i = 2 * p ;\n      i <= n ;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 ) ;\n      }\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . println ( \"Totient of \" + i + \" is \" + phi [ i ] ) ;\n}", "target_program": " void computeTotient ( int n ) {\n  long long phi [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) phi [ i ] = i;\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1;\n      for ( int i = 2 * p;\n      i <= n;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 );\n      }\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << \"Totient of \" << i << \" is \" << phi [ i ] << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void computeTotient ( int n ) {\n  long long phi [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) phi [ i ] = i;\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1;\n      for ( int i = 2 * p;\n      i <= n;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 );\n      }\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << \"Totient of \" << i << \" is \" << phi [ i ] << endl;\n}", "target_program": " static void computeTotient ( int n ) {\n  long phi [ ] = new long [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) phi [ i ] = i ;\n  for ( int p = 2 ;\n  p <= n ;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1 ;\n      for ( int i = 2 * p ;\n      i <= n ;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 ) ;\n      }\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . println ( \"Totient of \" + i + \" is \" + phi [ i ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void computeTotient ( int n ) {\n  long long phi [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) phi [ i ] = i;\n  for ( int p = 2;\n  p <= n;\n  p ++ ) {\n    if ( phi [ p ] == p ) {\n      phi [ p ] = p - 1;\n      for ( int i = 2 * p;\n      i <= n;\n      i += p ) {\n        phi [ i ] = ( phi [ i ] / p ) * ( p - 1 );\n      }\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << \"Totient of \" << i << \" is \" << phi [ i ] << endl;\n}", "target_program": " def computeTotient ( n ) :\n    phi = [ ]\n    for i in range ( n + 2 ) :\n        phi.append ( 0 )\n    for i in range ( 1 , n + 1 ) :\n        phi [ i ] = i\n    for p in range ( 2 , n + 1 ) :\n        if ( phi [ p ] == p ) :\n            phi [ p ] = p - 1\n            for i in range ( 2 * p , n + 1 , p ) :\n                phi [ i ] = ( phi [ i ] // p ) * ( p - 1 )\n    for i in range ( 1 , n + 1 ) :\n        print ( \"Totient of \" , i , \" is \" , phi [ i ] )"}
{"source": "python", "target": "java", "source_program": " def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 ) :\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n    if n > 2 :\n        ans *= n\n    return ans", "target_program": " static int findMinNumber ( int n ) {\n  int count = 0 , ans = 1 ;\n  while ( n % 2 == 0 ) {\n    count ++ ;\n    n /= 2 ;\n  }\n  if ( count % 2 == 1 ) ans *= 2 ;\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i += 2 ) {\n    count = 0 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n /= i ;\n    }\n    if ( count % 2 == 1 ) ans *= i ;\n  }\n  if ( n > 2 ) ans *= n ;\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 ) :\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n    if n > 2 :\n        ans *= n\n    return ans", "target_program": " int findMinNumber ( int n ) {\n  int count = 0, ans = 1;\n  while ( n % 2 == 0 ) {\n    count ++;\n    n /= 2;\n  }\n  if ( count % 2 ) ans *= 2;\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i += 2 ) {\n    count = 0;\n    while ( n % i == 0 ) {\n      count ++;\n      n /= i;\n    }\n    if ( count % 2 ) ans *= i;\n  }\n  if ( n > 2 ) ans *= n;\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMinNumber ( int n ) {\n  int count = 0 , ans = 1 ;\n  while ( n % 2 == 0 ) {\n    count ++ ;\n    n /= 2 ;\n  }\n  if ( count % 2 == 1 ) ans *= 2 ;\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i += 2 ) {\n    count = 0 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n /= i ;\n    }\n    if ( count % 2 == 1 ) ans *= i ;\n  }\n  if ( n > 2 ) ans *= n ;\n  return ans ;\n}", "target_program": " def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 ) :\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n    if n > 2 :\n        ans *= n\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findMinNumber ( int n ) {\n  int count = 0 , ans = 1 ;\n  while ( n % 2 == 0 ) {\n    count ++ ;\n    n /= 2 ;\n  }\n  if ( count % 2 == 1 ) ans *= 2 ;\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i += 2 ) {\n    count = 0 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n /= i ;\n    }\n    if ( count % 2 == 1 ) ans *= i ;\n  }\n  if ( n > 2 ) ans *= n ;\n  return ans ;\n}", "target_program": " int findMinNumber ( int n ) {\n  int count = 0, ans = 1;\n  while ( n % 2 == 0 ) {\n    count ++;\n    n /= 2;\n  }\n  if ( count % 2 ) ans *= 2;\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i += 2 ) {\n    count = 0;\n    while ( n % i == 0 ) {\n      count ++;\n      n /= i;\n    }\n    if ( count % 2 ) ans *= i;\n  }\n  if ( n > 2 ) ans *= n;\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMinNumber ( int n ) {\n  int count = 0, ans = 1;\n  while ( n % 2 == 0 ) {\n    count ++;\n    n /= 2;\n  }\n  if ( count % 2 ) ans *= 2;\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i += 2 ) {\n    count = 0;\n    while ( n % i == 0 ) {\n      count ++;\n      n /= i;\n    }\n    if ( count % 2 ) ans *= i;\n  }\n  if ( n > 2 ) ans *= n;\n  return ans;\n}", "target_program": " static int findMinNumber ( int n ) {\n  int count = 0 , ans = 1 ;\n  while ( n % 2 == 0 ) {\n    count ++ ;\n    n /= 2 ;\n  }\n  if ( count % 2 == 1 ) ans *= 2 ;\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i += 2 ) {\n    count = 0 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n /= i ;\n    }\n    if ( count % 2 == 1 ) ans *= i ;\n  }\n  if ( n > 2 ) ans *= n ;\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMinNumber ( int n ) {\n  int count = 0, ans = 1;\n  while ( n % 2 == 0 ) {\n    count ++;\n    n /= 2;\n  }\n  if ( count % 2 ) ans *= 2;\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i += 2 ) {\n    count = 0;\n    while ( n % i == 0 ) {\n      count ++;\n      n /= i;\n    }\n    if ( count % 2 ) ans *= i;\n  }\n  if ( n > 2 ) ans *= n;\n  return ans;\n}", "target_program": " def findMinNumber ( n ) :\n    count = 0\n    ans = 1\n    while n % 2 == 0 :\n        count += 1\n        n //= 2\n    if count % 2 is not 0 :\n        ans *= 2\n    for i in range ( 3 , ( int ) ( math.sqrt ( n ) ) + 1 , 2 ) :\n        count = 0\n        while n % i == 0 :\n            count += 1\n            n //= i\n        if count % 2 is not 0 :\n            ans *= i\n    if n > 2 :\n        ans *= n\n    return ans"}
{"source": "python", "target": "java", "source_program": " def countWaysToJump ( arr , n ) :\n    count_jump = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] >= n - i - 1 ) :\n            count_jump [ i ] += 1\n        j = i + 1\n        while ( j < n - 1 and j <= arr [ i ] + i ) :\n            if ( count_jump [ j ] != - 1 ) :\n                count_jump [ i ] += count_jump [ j ]\n            j += 1\n        if ( count_jump [ i ] == 0 ) :\n            count_jump [ i ] = - 1\n    for i in range ( n ) :\n        print ( count_jump [ i ] , end = \" \" )", "target_program": " static void countWaysToJump ( int arr [ ] , int n ) {\n  int count_jump [ ] = new int [ n ] ;\n  Arrays . fill ( count_jump , 0 ) ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;\n    for ( int j = i + 1 ;\n    j < n - 1 && j <= arr [ i ] + i ;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ;\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( count_jump [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWaysToJump ( arr , n ) :\n    count_jump = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] >= n - i - 1 ) :\n            count_jump [ i ] += 1\n        j = i + 1\n        while ( j < n - 1 and j <= arr [ i ] + i ) :\n            if ( count_jump [ j ] != - 1 ) :\n                count_jump [ i ] += count_jump [ j ]\n            j += 1\n        if ( count_jump [ i ] == 0 ) :\n            count_jump [ i ] = - 1\n    for i in range ( n ) :\n        print ( count_jump [ i ] , end = \" \" )", "target_program": " void countWaysToJump ( int arr [ ], int n ) {\n  int count_jump [ n ];\n  memset ( count_jump, 0, sizeof ( count_jump ) );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++;\n    for ( int j = i + 1;\n    j < n - 1 && j <= arr [ i ] + i;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ];\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << count_jump [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void countWaysToJump ( int arr [ ] , int n ) {\n  int count_jump [ ] = new int [ n ] ;\n  Arrays . fill ( count_jump , 0 ) ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;\n    for ( int j = i + 1 ;\n    j < n - 1 && j <= arr [ i ] + i ;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ;\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( count_jump [ i ] + \" \" ) ;\n}", "target_program": " def countWaysToJump ( arr , n ) :\n    count_jump = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] >= n - i - 1 ) :\n            count_jump [ i ] += 1\n        j = i + 1\n        while ( j < n - 1 and j <= arr [ i ] + i ) :\n            if ( count_jump [ j ] != - 1 ) :\n                count_jump [ i ] += count_jump [ j ]\n            j += 1\n        if ( count_jump [ i ] == 0 ) :\n            count_jump [ i ] = - 1\n    for i in range ( n ) :\n        print ( count_jump [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void countWaysToJump ( int arr [ ] , int n ) {\n  int count_jump [ ] = new int [ n ] ;\n  Arrays . fill ( count_jump , 0 ) ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;\n    for ( int j = i + 1 ;\n    j < n - 1 && j <= arr [ i ] + i ;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ;\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( count_jump [ i ] + \" \" ) ;\n}", "target_program": " void countWaysToJump ( int arr [ ], int n ) {\n  int count_jump [ n ];\n  memset ( count_jump, 0, sizeof ( count_jump ) );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++;\n    for ( int j = i + 1;\n    j < n - 1 && j <= arr [ i ] + i;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ];\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << count_jump [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void countWaysToJump ( int arr [ ], int n ) {\n  int count_jump [ n ];\n  memset ( count_jump, 0, sizeof ( count_jump ) );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++;\n    for ( int j = i + 1;\n    j < n - 1 && j <= arr [ i ] + i;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ];\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << count_jump [ i ] << \" \";\n}", "target_program": " static void countWaysToJump ( int arr [ ] , int n ) {\n  int count_jump [ ] = new int [ n ] ;\n  Arrays . fill ( count_jump , 0 ) ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++ ;\n    for ( int j = i + 1 ;\n    j < n - 1 && j <= arr [ i ] + i ;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ] ;\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( count_jump [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void countWaysToJump ( int arr [ ], int n ) {\n  int count_jump [ n ];\n  memset ( count_jump, 0, sizeof ( count_jump ) );\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] >= n - i - 1 ) count_jump [ i ] ++;\n    for ( int j = i + 1;\n    j < n - 1 && j <= arr [ i ] + i;\n    j ++ ) if ( count_jump [ j ] != - 1 ) count_jump [ i ] += count_jump [ j ];\n    if ( count_jump [ i ] == 0 ) count_jump [ i ] = - 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << count_jump [ i ] << \" \";\n}", "target_program": " def countWaysToJump ( arr , n ) :\n    count_jump = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] >= n - i - 1 ) :\n            count_jump [ i ] += 1\n        j = i + 1\n        while ( j < n - 1 and j <= arr [ i ] + i ) :\n            if ( count_jump [ j ] != - 1 ) :\n                count_jump [ i ] += count_jump [ j ]\n            j += 1\n        if ( count_jump [ i ] == 0 ) :\n            count_jump [ i ] = - 1\n    for i in range ( n ) :\n        print ( count_jump [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def substringConversions ( str1 , k , b ) :\n    for i in range ( 0 , len ( str1 ) - k + 1 ) :\n        sub = str1 [ i : k + i ]\n        Sum = 0\n        counter = 0\n        for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :\n            Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) ) * pow ( b , counter ) ) )\n            counter += 1\n        print ( Sum , end = \" \" )", "target_program": " static void substringConversions ( String str , int k , int b ) {\n  int i = 0 , sum = 0 , counter = k - 1 ;\n  for ( i = 0 ;\n  i < k ;\n  i ++ ) {\n    sum = ( int ) ( sum + ( ( str . charAt ( i ) - '0' ) * Math . pow ( b , counter ) ) ) ;\n    counter -- ;\n  }\n  System . out . print ( sum + \" \" ) ;\n  int prev = sum ;\n  sum = 0 ;\n  counter = 0 ;\n  for ( ;\n  i < str . length ( ) ;\n  i ++ ) {\n    sum = ( int ) ( prev - ( ( str . charAt ( i - k ) - '0' ) * Math . pow ( b , k - 1 ) ) ) ;\n    sum = sum * b ;\n    sum = sum + ( str . charAt ( i ) - '0' ) ;\n    System . out . print ( sum + \" \" ) ;\n    prev = sum ;\n    counter ++ ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def substringConversions ( str1 , k , b ) :\n    for i in range ( 0 , len ( str1 ) - k + 1 ) :\n        sub = str1 [ i : k + i ]\n        Sum = 0\n        counter = 0\n        for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :\n            Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) ) * pow ( b , counter ) ) )\n            counter += 1\n        print ( Sum , end = \" \" )", "target_program": " int substringConversions ( string str, int k, int b ) {\n  int i = 0, sum = 0, counter = k - 1;\n  for ( i;\n  i < k;\n  i ++ ) {\n    sum = sum + ( ( str . at ( i ) - '0' ) * pow ( b, counter ) );\n    counter --;\n  }\n  cout << sum << \" \";\n  int prev = sum;\n  sum = 0, counter = 0;\n  for ( i;\n  i < str . size ( );\n  i ++ ) {\n    sum = prev - ( ( str . at ( i - k ) - '0' ) * pow ( b, k - 1 ) );\n    sum = sum * b;\n    sum = sum + ( str . at ( i ) - '0' );\n    cout << sum << \" \";\n    prev = sum;\n    counter ++;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void substringConversions ( String str , int k , int b ) {\n  int i = 0 , sum = 0 , counter = k - 1 ;\n  for ( i = 0 ;\n  i < k ;\n  i ++ ) {\n    sum = ( int ) ( sum + ( ( str . charAt ( i ) - '0' ) * Math . pow ( b , counter ) ) ) ;\n    counter -- ;\n  }\n  System . out . print ( sum + \" \" ) ;\n  int prev = sum ;\n  sum = 0 ;\n  counter = 0 ;\n  for ( ;\n  i < str . length ( ) ;\n  i ++ ) {\n    sum = ( int ) ( prev - ( ( str . charAt ( i - k ) - '0' ) * Math . pow ( b , k - 1 ) ) ) ;\n    sum = sum * b ;\n    sum = sum + ( str . charAt ( i ) - '0' ) ;\n    System . out . print ( sum + \" \" ) ;\n    prev = sum ;\n    counter ++ ;\n  }\n}", "target_program": " def substringConversions ( str1 , k , b ) :\n    for i in range ( 0 , len ( str1 ) - k + 1 ) :\n        sub = str1 [ i : k + i ]\n        Sum = 0\n        counter = 0\n        for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :\n            Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) ) * pow ( b , counter ) ) )\n            counter += 1\n        print ( Sum , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void substringConversions ( String str , int k , int b ) {\n  int i = 0 , sum = 0 , counter = k - 1 ;\n  for ( i = 0 ;\n  i < k ;\n  i ++ ) {\n    sum = ( int ) ( sum + ( ( str . charAt ( i ) - '0' ) * Math . pow ( b , counter ) ) ) ;\n    counter -- ;\n  }\n  System . out . print ( sum + \" \" ) ;\n  int prev = sum ;\n  sum = 0 ;\n  counter = 0 ;\n  for ( ;\n  i < str . length ( ) ;\n  i ++ ) {\n    sum = ( int ) ( prev - ( ( str . charAt ( i - k ) - '0' ) * Math . pow ( b , k - 1 ) ) ) ;\n    sum = sum * b ;\n    sum = sum + ( str . charAt ( i ) - '0' ) ;\n    System . out . print ( sum + \" \" ) ;\n    prev = sum ;\n    counter ++ ;\n  }\n}", "target_program": " int substringConversions ( string str, int k, int b ) {\n  int i = 0, sum = 0, counter = k - 1;\n  for ( i;\n  i < k;\n  i ++ ) {\n    sum = sum + ( ( str . at ( i ) - '0' ) * pow ( b, counter ) );\n    counter --;\n  }\n  cout << sum << \" \";\n  int prev = sum;\n  sum = 0, counter = 0;\n  for ( i;\n  i < str . size ( );\n  i ++ ) {\n    sum = prev - ( ( str . at ( i - k ) - '0' ) * pow ( b, k - 1 ) );\n    sum = sum * b;\n    sum = sum + ( str . at ( i ) - '0' );\n    cout << sum << \" \";\n    prev = sum;\n    counter ++;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int substringConversions ( string str, int k, int b ) {\n  int i = 0, sum = 0, counter = k - 1;\n  for ( i;\n  i < k;\n  i ++ ) {\n    sum = sum + ( ( str . at ( i ) - '0' ) * pow ( b, counter ) );\n    counter --;\n  }\n  cout << sum << \" \";\n  int prev = sum;\n  sum = 0, counter = 0;\n  for ( i;\n  i < str . size ( );\n  i ++ ) {\n    sum = prev - ( ( str . at ( i - k ) - '0' ) * pow ( b, k - 1 ) );\n    sum = sum * b;\n    sum = sum + ( str . at ( i ) - '0' );\n    cout << sum << \" \";\n    prev = sum;\n    counter ++;\n  }\n}", "target_program": " static void substringConversions ( String str , int k , int b ) {\n  int i = 0 , sum = 0 , counter = k - 1 ;\n  for ( i = 0 ;\n  i < k ;\n  i ++ ) {\n    sum = ( int ) ( sum + ( ( str . charAt ( i ) - '0' ) * Math . pow ( b , counter ) ) ) ;\n    counter -- ;\n  }\n  System . out . print ( sum + \" \" ) ;\n  int prev = sum ;\n  sum = 0 ;\n  counter = 0 ;\n  for ( ;\n  i < str . length ( ) ;\n  i ++ ) {\n    sum = ( int ) ( prev - ( ( str . charAt ( i - k ) - '0' ) * Math . pow ( b , k - 1 ) ) ) ;\n    sum = sum * b ;\n    sum = sum + ( str . charAt ( i ) - '0' ) ;\n    System . out . print ( sum + \" \" ) ;\n    prev = sum ;\n    counter ++ ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int substringConversions ( string str, int k, int b ) {\n  int i = 0, sum = 0, counter = k - 1;\n  for ( i;\n  i < k;\n  i ++ ) {\n    sum = sum + ( ( str . at ( i ) - '0' ) * pow ( b, counter ) );\n    counter --;\n  }\n  cout << sum << \" \";\n  int prev = sum;\n  sum = 0, counter = 0;\n  for ( i;\n  i < str . size ( );\n  i ++ ) {\n    sum = prev - ( ( str . at ( i - k ) - '0' ) * pow ( b, k - 1 ) );\n    sum = sum * b;\n    sum = sum + ( str . at ( i ) - '0' );\n    cout << sum << \" \";\n    prev = sum;\n    counter ++;\n  }\n}", "target_program": " def substringConversions ( str1 , k , b ) :\n    for i in range ( 0 , len ( str1 ) - k + 1 ) :\n        sub = str1 [ i : k + i ]\n        Sum = 0\n        counter = 0\n        for i in range ( len ( sub ) - 1 , - 1 , - 1 ) :\n            Sum = ( Sum + ( ( ord ( sub [ i ] ) - ord ( '0' ) ) * pow ( b , counter ) ) )\n            counter += 1\n        print ( Sum , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def minAbsSumPair ( arr , arr_size ) :\n    inv_count = 0\n    if arr_size < 2 :\n        print ( \"Invalid Input\" )\n        return\n    min_l = 0\n    min_r = 1\n    min_sum = arr [ 0 ] + arr [ 1 ]\n    for l in range ( 0 , arr_size - 1 ) :\n        for r in range ( l + 1 , arr_size ) :\n            sum = arr [ l ] + arr [ r ]\n            if abs ( min_sum ) > abs ( sum ) :\n                min_sum = sum\n                min_l = l\n                min_r = r\n    print ( \"The two elements whose sum is minimum are\" , arr [ min_l ] , \"and \" , arr [ min_r ] )", "target_program": " static void minAbsSumPair ( int arr [ ] , int arr_size ) {\n  int inv_count = 0 ;\n  int l , r , min_sum , sum , min_l , min_r ;\n  if ( arr_size < 2 ) {\n    System . out . println ( \"Invalid Input\" ) ;\n    return ;\n  }\n  min_l = 0 ;\n  min_r = 1 ;\n  min_sum = arr [ 0 ] + arr [ 1 ] ;\n  for ( l = 0 ;\n  l < arr_size - 1 ;\n  l ++ ) {\n    for ( r = l + 1 ;\n    r < arr_size ;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ] ;\n      if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) {\n        min_sum = sum ;\n        min_l = l ;\n        min_r = r ;\n      }\n    }\n  }\n  System . out . println ( \" The two elements whose \" + \"sum is minimum are \" + arr [ min_l ] + \" and \" + arr [ min_r ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minAbsSumPair ( arr , arr_size ) :\n    inv_count = 0\n    if arr_size < 2 :\n        print ( \"Invalid Input\" )\n        return\n    min_l = 0\n    min_r = 1\n    min_sum = arr [ 0 ] + arr [ 1 ]\n    for l in range ( 0 , arr_size - 1 ) :\n        for r in range ( l + 1 , arr_size ) :\n            sum = arr [ l ] + arr [ r ]\n            if abs ( min_sum ) > abs ( sum ) :\n                min_sum = sum\n                min_l = l\n                min_r = r\n    print ( \"The two elements whose sum is minimum are\" , arr [ min_l ] , \"and \" , arr [ min_r ] )", "target_program": " void minAbsSumPair ( int arr [ ], int arr_size ) {\n  int inv_count = 0;\n  int l, r, min_sum, sum, min_l, min_r;\n  if ( arr_size < 2 ) {\n    cout << \"Invalid Input\";\n    return;\n  }\n  min_l = 0;\n  min_r = 1;\n  min_sum = arr [ 0 ] + arr [ 1 ];\n  for ( l = 0;\n  l < arr_size - 1;\n  l ++ ) {\n    for ( r = l + 1;\n    r < arr_size;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ];\n      if ( abs ( min_sum ) > abs ( sum ) ) {\n        min_sum = sum;\n        min_l = l;\n        min_r = r;\n      }\n    }\n  }\n  cout << \"The two elements whose sum is minimum are \" << arr [ min_l ] << \" and \" << arr [ min_r ];\n}"}
{"source": "java", "target": "python", "source_program": " static void minAbsSumPair ( int arr [ ] , int arr_size ) {\n  int inv_count = 0 ;\n  int l , r , min_sum , sum , min_l , min_r ;\n  if ( arr_size < 2 ) {\n    System . out . println ( \"Invalid Input\" ) ;\n    return ;\n  }\n  min_l = 0 ;\n  min_r = 1 ;\n  min_sum = arr [ 0 ] + arr [ 1 ] ;\n  for ( l = 0 ;\n  l < arr_size - 1 ;\n  l ++ ) {\n    for ( r = l + 1 ;\n    r < arr_size ;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ] ;\n      if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) {\n        min_sum = sum ;\n        min_l = l ;\n        min_r = r ;\n      }\n    }\n  }\n  System . out . println ( \" The two elements whose \" + \"sum is minimum are \" + arr [ min_l ] + \" and \" + arr [ min_r ] ) ;\n}", "target_program": " def minAbsSumPair ( arr , arr_size ) :\n    inv_count = 0\n    if arr_size < 2 :\n        print ( \"Invalid Input\" )\n        return\n    min_l = 0\n    min_r = 1\n    min_sum = arr [ 0 ] + arr [ 1 ]\n    for l in range ( 0 , arr_size - 1 ) :\n        for r in range ( l + 1 , arr_size ) :\n            sum = arr [ l ] + arr [ r ]\n            if abs ( min_sum ) > abs ( sum ) :\n                min_sum = sum\n                min_l = l\n                min_r = r\n    print ( \"The two elements whose sum is minimum are\" , arr [ min_l ] , \"and \" , arr [ min_r ] )"}
{"source": "java", "target": "cpp", "source_program": " static void minAbsSumPair ( int arr [ ] , int arr_size ) {\n  int inv_count = 0 ;\n  int l , r , min_sum , sum , min_l , min_r ;\n  if ( arr_size < 2 ) {\n    System . out . println ( \"Invalid Input\" ) ;\n    return ;\n  }\n  min_l = 0 ;\n  min_r = 1 ;\n  min_sum = arr [ 0 ] + arr [ 1 ] ;\n  for ( l = 0 ;\n  l < arr_size - 1 ;\n  l ++ ) {\n    for ( r = l + 1 ;\n    r < arr_size ;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ] ;\n      if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) {\n        min_sum = sum ;\n        min_l = l ;\n        min_r = r ;\n      }\n    }\n  }\n  System . out . println ( \" The two elements whose \" + \"sum is minimum are \" + arr [ min_l ] + \" and \" + arr [ min_r ] ) ;\n}", "target_program": " void minAbsSumPair ( int arr [ ], int arr_size ) {\n  int inv_count = 0;\n  int l, r, min_sum, sum, min_l, min_r;\n  if ( arr_size < 2 ) {\n    cout << \"Invalid Input\";\n    return;\n  }\n  min_l = 0;\n  min_r = 1;\n  min_sum = arr [ 0 ] + arr [ 1 ];\n  for ( l = 0;\n  l < arr_size - 1;\n  l ++ ) {\n    for ( r = l + 1;\n    r < arr_size;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ];\n      if ( abs ( min_sum ) > abs ( sum ) ) {\n        min_sum = sum;\n        min_l = l;\n        min_r = r;\n      }\n    }\n  }\n  cout << \"The two elements whose sum is minimum are \" << arr [ min_l ] << \" and \" << arr [ min_r ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void minAbsSumPair ( int arr [ ], int arr_size ) {\n  int inv_count = 0;\n  int l, r, min_sum, sum, min_l, min_r;\n  if ( arr_size < 2 ) {\n    cout << \"Invalid Input\";\n    return;\n  }\n  min_l = 0;\n  min_r = 1;\n  min_sum = arr [ 0 ] + arr [ 1 ];\n  for ( l = 0;\n  l < arr_size - 1;\n  l ++ ) {\n    for ( r = l + 1;\n    r < arr_size;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ];\n      if ( abs ( min_sum ) > abs ( sum ) ) {\n        min_sum = sum;\n        min_l = l;\n        min_r = r;\n      }\n    }\n  }\n  cout << \"The two elements whose sum is minimum are \" << arr [ min_l ] << \" and \" << arr [ min_r ];\n}", "target_program": " static void minAbsSumPair ( int arr [ ] , int arr_size ) {\n  int inv_count = 0 ;\n  int l , r , min_sum , sum , min_l , min_r ;\n  if ( arr_size < 2 ) {\n    System . out . println ( \"Invalid Input\" ) ;\n    return ;\n  }\n  min_l = 0 ;\n  min_r = 1 ;\n  min_sum = arr [ 0 ] + arr [ 1 ] ;\n  for ( l = 0 ;\n  l < arr_size - 1 ;\n  l ++ ) {\n    for ( r = l + 1 ;\n    r < arr_size ;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ] ;\n      if ( Math . abs ( min_sum ) > Math . abs ( sum ) ) {\n        min_sum = sum ;\n        min_l = l ;\n        min_r = r ;\n      }\n    }\n  }\n  System . out . println ( \" The two elements whose \" + \"sum is minimum are \" + arr [ min_l ] + \" and \" + arr [ min_r ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void minAbsSumPair ( int arr [ ], int arr_size ) {\n  int inv_count = 0;\n  int l, r, min_sum, sum, min_l, min_r;\n  if ( arr_size < 2 ) {\n    cout << \"Invalid Input\";\n    return;\n  }\n  min_l = 0;\n  min_r = 1;\n  min_sum = arr [ 0 ] + arr [ 1 ];\n  for ( l = 0;\n  l < arr_size - 1;\n  l ++ ) {\n    for ( r = l + 1;\n    r < arr_size;\n    r ++ ) {\n      sum = arr [ l ] + arr [ r ];\n      if ( abs ( min_sum ) > abs ( sum ) ) {\n        min_sum = sum;\n        min_l = l;\n        min_r = r;\n      }\n    }\n  }\n  cout << \"The two elements whose sum is minimum are \" << arr [ min_l ] << \" and \" << arr [ min_r ];\n}", "target_program": " def minAbsSumPair ( arr , arr_size ) :\n    inv_count = 0\n    if arr_size < 2 :\n        print ( \"Invalid Input\" )\n        return\n    min_l = 0\n    min_r = 1\n    min_sum = arr [ 0 ] + arr [ 1 ]\n    for l in range ( 0 , arr_size - 1 ) :\n        for r in range ( l + 1 , arr_size ) :\n            sum = arr [ l ] + arr [ r ]\n            if abs ( min_sum ) > abs ( sum ) :\n                min_sum = sum\n                min_l = l\n                min_r = r\n    print ( \"The two elements whose sum is minimum are\" , arr [ min_l ] , \"and \" , arr [ min_r ] )"}
{"source": "python", "target": "java", "source_program": " def findoptimal ( N ) :\n    if ( N <= 6 ) :\n        return N\n    screen = [ 0 ] * N\n    for n in range ( 1 , 7 ) :\n        screen [ n - 1 ] = n\n    for n in range ( 7 , N + 1 ) :\n        screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n    return screen [ N - 1 ]", "target_program": " static int findoptimal ( int N ) {\n  if ( N <= 6 ) return N ;\n  int [ ] screen = new int [ N ] ;\n  int b ;\n  int n ;\n  for ( n = 1 ;\n  n <= 6 ;\n  n ++ ) screen [ n - 1 ] = n ;\n  for ( n = 7 ;\n  n <= N ;\n  n ++ ) {\n    screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Math . max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n  }\n  return screen [ N - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findoptimal ( N ) :\n    if ( N <= 6 ) :\n        return N\n    screen = [ 0 ] * N\n    for n in range ( 1 , 7 ) :\n        screen [ n - 1 ] = n\n    for n in range ( 7 , N + 1 ) :\n        screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n    return screen [ N - 1 ]", "target_program": " int findoptimal ( int N ) {\n  if ( N <= 6 ) return N;\n  int screen [ N ];\n  int b;\n  int n;\n  for ( n = 1;\n  n <= 6;\n  n ++ ) screen [ n - 1 ] = n;\n  for ( n = 7;\n  n <= N;\n  n ++ ) {\n    screen [ n - 1 ] = max ( 2 * screen [ n - 4 ], max ( 3 * screen [ n - 5 ], 4 * screen [ n - 6 ] ) );\n  }\n  return screen [ N - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int findoptimal ( int N ) {\n  if ( N <= 6 ) return N ;\n  int [ ] screen = new int [ N ] ;\n  int b ;\n  int n ;\n  for ( n = 1 ;\n  n <= 6 ;\n  n ++ ) screen [ n - 1 ] = n ;\n  for ( n = 7 ;\n  n <= N ;\n  n ++ ) {\n    screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Math . max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n  }\n  return screen [ N - 1 ] ;\n}", "target_program": " def findoptimal ( N ) :\n    if ( N <= 6 ) :\n        return N\n    screen = [ 0 ] * N\n    for n in range ( 1 , 7 ) :\n        screen [ n - 1 ] = n\n    for n in range ( 7 , N + 1 ) :\n        screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n    return screen [ N - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int findoptimal ( int N ) {\n  if ( N <= 6 ) return N ;\n  int [ ] screen = new int [ N ] ;\n  int b ;\n  int n ;\n  for ( n = 1 ;\n  n <= 6 ;\n  n ++ ) screen [ n - 1 ] = n ;\n  for ( n = 7 ;\n  n <= N ;\n  n ++ ) {\n    screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Math . max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n  }\n  return screen [ N - 1 ] ;\n}", "target_program": " int findoptimal ( int N ) {\n  if ( N <= 6 ) return N;\n  int screen [ N ];\n  int b;\n  int n;\n  for ( n = 1;\n  n <= 6;\n  n ++ ) screen [ n - 1 ] = n;\n  for ( n = 7;\n  n <= N;\n  n ++ ) {\n    screen [ n - 1 ] = max ( 2 * screen [ n - 4 ], max ( 3 * screen [ n - 5 ], 4 * screen [ n - 6 ] ) );\n  }\n  return screen [ N - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int findoptimal ( int N ) {\n  if ( N <= 6 ) return N;\n  int screen [ N ];\n  int b;\n  int n;\n  for ( n = 1;\n  n <= 6;\n  n ++ ) screen [ n - 1 ] = n;\n  for ( n = 7;\n  n <= N;\n  n ++ ) {\n    screen [ n - 1 ] = max ( 2 * screen [ n - 4 ], max ( 3 * screen [ n - 5 ], 4 * screen [ n - 6 ] ) );\n  }\n  return screen [ N - 1 ];\n}", "target_program": " static int findoptimal ( int N ) {\n  if ( N <= 6 ) return N ;\n  int [ ] screen = new int [ N ] ;\n  int b ;\n  int n ;\n  for ( n = 1 ;\n  n <= 6 ;\n  n ++ ) screen [ n - 1 ] = n ;\n  for ( n = 7 ;\n  n <= N ;\n  n ++ ) {\n    screen [ n - 1 ] = Math . max ( 2 * screen [ n - 4 ] , Math . max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n  }\n  return screen [ N - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findoptimal ( int N ) {\n  if ( N <= 6 ) return N;\n  int screen [ N ];\n  int b;\n  int n;\n  for ( n = 1;\n  n <= 6;\n  n ++ ) screen [ n - 1 ] = n;\n  for ( n = 7;\n  n <= N;\n  n ++ ) {\n    screen [ n - 1 ] = max ( 2 * screen [ n - 4 ], max ( 3 * screen [ n - 5 ], 4 * screen [ n - 6 ] ) );\n  }\n  return screen [ N - 1 ];\n}", "target_program": " def findoptimal ( N ) :\n    if ( N <= 6 ) :\n        return N\n    screen = [ 0 ] * N\n    for n in range ( 1 , 7 ) :\n        screen [ n - 1 ] = n\n    for n in range ( 7 , N + 1 ) :\n        screen [ n - 1 ] = max ( 2 * screen [ n - 4 ] , max ( 3 * screen [ n - 5 ] , 4 * screen [ n - 6 ] ) ) ;\n    return screen [ N - 1 ]"}
{"source": "python", "target": "java", "source_program": " def decimalToBinary ( N ) :\n    B_Number = 0\n    cnt = 0\n    while ( N != 0 ) :\n        rem = N % 2\n        c = pow ( 10 , cnt )\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number", "target_program": " static int decimalToBinary ( int N ) {\n  int B_Number = 0 ;\n  int cnt = 0 ;\n  while ( N != 0 ) {\n    int rem = N % 2 ;\n    double c = Math . pow ( 10 , cnt ) ;\n    B_Number += rem * c ;\n    N /= 2 ;\n    cnt ++ ;\n  }\n  return B_Number ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def decimalToBinary ( N ) :\n    B_Number = 0\n    cnt = 0\n    while ( N != 0 ) :\n        rem = N % 2\n        c = pow ( 10 , cnt )\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number", "target_program": " unsigned long long int int decimalToBinary ( int N ) {\n  ull B_Number = 0;\n  int cnt = 0;\n  while ( N != 0 ) {\n    int rem = N % 2;\n    ull c = pow ( 10, cnt );\n    B_Number += rem * c;\n    N /= 2;\n    cnt ++;\n  }\n  return B_Number;\n}"}
{"source": "java", "target": "python", "source_program": " static int decimalToBinary ( int N ) {\n  int B_Number = 0 ;\n  int cnt = 0 ;\n  while ( N != 0 ) {\n    int rem = N % 2 ;\n    double c = Math . pow ( 10 , cnt ) ;\n    B_Number += rem * c ;\n    N /= 2 ;\n    cnt ++ ;\n  }\n  return B_Number ;\n}", "target_program": " def decimalToBinary ( N ) :\n    B_Number = 0\n    cnt = 0\n    while ( N != 0 ) :\n        rem = N % 2\n        c = pow ( 10 , cnt )\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number"}
{"source": "java", "target": "cpp", "source_program": " static int decimalToBinary ( int N ) {\n  int B_Number = 0 ;\n  int cnt = 0 ;\n  while ( N != 0 ) {\n    int rem = N % 2 ;\n    double c = Math . pow ( 10 , cnt ) ;\n    B_Number += rem * c ;\n    N /= 2 ;\n    cnt ++ ;\n  }\n  return B_Number ;\n}", "target_program": " unsigned long long int int decimalToBinary ( int N ) {\n  ull B_Number = 0;\n  int cnt = 0;\n  while ( N != 0 ) {\n    int rem = N % 2;\n    ull c = pow ( 10, cnt );\n    B_Number += rem * c;\n    N /= 2;\n    cnt ++;\n  }\n  return B_Number;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned long long int int decimalToBinary ( int N ) {\n  ull B_Number = 0;\n  int cnt = 0;\n  while ( N != 0 ) {\n    int rem = N % 2;\n    ull c = pow ( 10, cnt );\n    B_Number += rem * c;\n    N /= 2;\n    cnt ++;\n  }\n  return B_Number;\n}", "target_program": " static int decimalToBinary ( int N ) {\n  int B_Number = 0 ;\n  int cnt = 0 ;\n  while ( N != 0 ) {\n    int rem = N % 2 ;\n    double c = Math . pow ( 10 , cnt ) ;\n    B_Number += rem * c ;\n    N /= 2 ;\n    cnt ++ ;\n  }\n  return B_Number ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned long long int int decimalToBinary ( int N ) {\n  ull B_Number = 0;\n  int cnt = 0;\n  while ( N != 0 ) {\n    int rem = N % 2;\n    ull c = pow ( 10, cnt );\n    B_Number += rem * c;\n    N /= 2;\n    cnt ++;\n  }\n  return B_Number;\n}", "target_program": " def decimalToBinary ( N ) :\n    B_Number = 0\n    cnt = 0\n    while ( N != 0 ) :\n        rem = N % 2\n        c = pow ( 10 , cnt )\n        B_Number += rem * c\n        N //= 2\n        cnt += 1\n    return B_Number"}
{"source": "python", "target": "java", "source_program": " def countPaths ( n , m ) :\n    if ( n == 0 or m == 0 ) :\n        return 1\n    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) )", "target_program": " static int countPaths ( int n , int m ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) dp [ 0 ] [ i ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ;\n  return dp [ n ] [ m ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPaths ( n , m ) :\n    if ( n == 0 or m == 0 ) :\n        return 1\n    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) )", "target_program": " int countPaths ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ];\n  return dp [ n ] [ m ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countPaths ( int n , int m ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) dp [ 0 ] [ i ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ;\n  return dp [ n ] [ m ] ;\n}", "target_program": " def countPaths ( n , m ) :\n    if ( n == 0 or m == 0 ) :\n        return 1\n    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int countPaths ( int n , int m ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) dp [ 0 ] [ i ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ;\n  return dp [ n ] [ m ] ;\n}", "target_program": " int countPaths ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ];\n  return dp [ n ] [ m ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPaths ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ];\n  return dp [ n ] [ m ];\n}", "target_program": " static int countPaths ( int n , int m ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ m + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) dp [ i ] [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) dp [ 0 ] [ i ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= m ;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ] ;\n  return dp [ n ] [ m ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPaths ( int n, int m ) {\n  int dp [ n + 1 ] [ m + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= m;\n  j ++ ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] + dp [ i ] [ j - 1 ];\n  return dp [ n ] [ m ];\n}", "target_program": " def countPaths ( n , m ) :\n    if ( n == 0 or m == 0 ) :\n        return 1\n    return ( countPaths ( n - 1 , m ) + countPaths ( n , m - 1 ) )"}
{"source": "python", "target": "java", "source_program": " def sumBetweenTwoKth ( arr , n , k1 , k2 ) :\n    arr.sort ( )\n    result = 0\n    for i in range ( k1 , k2 - 1 ) :\n        result += arr [ i ]\n    return result", "target_program": " static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) {\n  Arrays . sort ( arr ) ;\n  int result = 0 ;\n  for ( int i = k1 ;\n  i < k2 - 1 ;\n  i ++ ) result += arr [ i ] ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumBetweenTwoKth ( arr , n , k1 , k2 ) :\n    arr.sort ( )\n    result = 0\n    for i in range ( k1 , k2 - 1 ) :\n        result += arr [ i ]\n    return result", "target_program": " int sumBetweenTwoKth ( int arr [ ], int n, int k1, int k2 ) {\n  sort ( arr, arr + n );\n  return accumulate ( arr + k1, arr + k2 - 1, 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) {\n  Arrays . sort ( arr ) ;\n  int result = 0 ;\n  for ( int i = k1 ;\n  i < k2 - 1 ;\n  i ++ ) result += arr [ i ] ;\n  return result ;\n}", "target_program": " def sumBetweenTwoKth ( arr , n , k1 , k2 ) :\n    arr.sort ( )\n    result = 0\n    for i in range ( k1 , k2 - 1 ) :\n        result += arr [ i ]\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) {\n  Arrays . sort ( arr ) ;\n  int result = 0 ;\n  for ( int i = k1 ;\n  i < k2 - 1 ;\n  i ++ ) result += arr [ i ] ;\n  return result ;\n}", "target_program": " int sumBetweenTwoKth ( int arr [ ], int n, int k1, int k2 ) {\n  sort ( arr, arr + n );\n  return accumulate ( arr + k1, arr + k2 - 1, 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumBetweenTwoKth ( int arr [ ], int n, int k1, int k2 ) {\n  sort ( arr, arr + n );\n  return accumulate ( arr + k1, arr + k2 - 1, 0 );\n}", "target_program": " static int sumBetweenTwoKth ( int arr [ ] , int k1 , int k2 ) {\n  Arrays . sort ( arr ) ;\n  int result = 0 ;\n  for ( int i = k1 ;\n  i < k2 - 1 ;\n  i ++ ) result += arr [ i ] ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumBetweenTwoKth ( int arr [ ], int n, int k1, int k2 ) {\n  sort ( arr, arr + n );\n  return accumulate ( arr + k1, arr + k2 - 1, 0 );\n}", "target_program": " def sumBetweenTwoKth ( arr , n , k1 , k2 ) :\n    arr.sort ( )\n    result = 0\n    for i in range ( k1 , k2 - 1 ) :\n        result += arr [ i ]\n    return result"}
{"source": "python", "target": "java", "source_program": " def minRange ( arr , n , k ) :\n    l = 0\n    r = n\n    for i in range ( n ) :\n        s = [ ]\n        for j in range ( i , n ) :\n            s.append ( arr [ j ] )\n            if ( len ( s ) == k ) :\n                if ( ( j - i ) < ( r - l ) ) :\n                    r = j\n                    l = i\n                break\n        if ( j == n ) :\n            break\n    if ( l == 0 and r == n ) :\n        print ( \"Invalid k\" )\n    else :\n        print ( l , r )", "target_program": " static void minRange ( int arr [ ] , int n , int k ) {\n  int l = 0 , r = n ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Set < Integer > s = new HashSet < Integer > ( ) ;\n    int j ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      s . add ( arr [ j ] ) ;\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j ;\n          l = i ;\n        }\n        break ;\n      }\n    }\n    if ( j == n ) break ;\n  }\n  if ( l == 0 && r == n ) System . out . println ( \"Invalid k\" ) ;\n  else System . out . println ( l + \" \" + r ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minRange ( arr , n , k ) :\n    l = 0\n    r = n\n    for i in range ( n ) :\n        s = [ ]\n        for j in range ( i , n ) :\n            s.append ( arr [ j ] )\n            if ( len ( s ) == k ) :\n                if ( ( j - i ) < ( r - l ) ) :\n                    r = j\n                    l = i\n                break\n        if ( j == n ) :\n            break\n    if ( l == 0 and r == n ) :\n        print ( \"Invalid k\" )\n    else :\n        print ( l , r )", "target_program": " void minRange ( int arr [ ], int n, int k ) {\n  int l = 0, r = n;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    unordered_set < int > s;\n    int j;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      s . insert ( arr [ j ] );\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j;\n          l = i;\n        }\n        break;\n      }\n    }\n    if ( j == n ) break;\n  }\n  if ( l == 0 && r == n ) cout << \"Invalid k\";\n  else cout << l << \" \" << r;\n}"}
{"source": "java", "target": "python", "source_program": " static void minRange ( int arr [ ] , int n , int k ) {\n  int l = 0 , r = n ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Set < Integer > s = new HashSet < Integer > ( ) ;\n    int j ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      s . add ( arr [ j ] ) ;\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j ;\n          l = i ;\n        }\n        break ;\n      }\n    }\n    if ( j == n ) break ;\n  }\n  if ( l == 0 && r == n ) System . out . println ( \"Invalid k\" ) ;\n  else System . out . println ( l + \" \" + r ) ;\n}", "target_program": " def minRange ( arr , n , k ) :\n    l = 0\n    r = n\n    for i in range ( n ) :\n        s = [ ]\n        for j in range ( i , n ) :\n            s.append ( arr [ j ] )\n            if ( len ( s ) == k ) :\n                if ( ( j - i ) < ( r - l ) ) :\n                    r = j\n                    l = i\n                break\n        if ( j == n ) :\n            break\n    if ( l == 0 and r == n ) :\n        print ( \"Invalid k\" )\n    else :\n        print ( l , r )"}
{"source": "java", "target": "cpp", "source_program": " static void minRange ( int arr [ ] , int n , int k ) {\n  int l = 0 , r = n ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Set < Integer > s = new HashSet < Integer > ( ) ;\n    int j ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      s . add ( arr [ j ] ) ;\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j ;\n          l = i ;\n        }\n        break ;\n      }\n    }\n    if ( j == n ) break ;\n  }\n  if ( l == 0 && r == n ) System . out . println ( \"Invalid k\" ) ;\n  else System . out . println ( l + \" \" + r ) ;\n}", "target_program": " void minRange ( int arr [ ], int n, int k ) {\n  int l = 0, r = n;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    unordered_set < int > s;\n    int j;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      s . insert ( arr [ j ] );\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j;\n          l = i;\n        }\n        break;\n      }\n    }\n    if ( j == n ) break;\n  }\n  if ( l == 0 && r == n ) cout << \"Invalid k\";\n  else cout << l << \" \" << r;\n}"}
{"source": "cpp", "target": "java", "source_program": " void minRange ( int arr [ ], int n, int k ) {\n  int l = 0, r = n;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    unordered_set < int > s;\n    int j;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      s . insert ( arr [ j ] );\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j;\n          l = i;\n        }\n        break;\n      }\n    }\n    if ( j == n ) break;\n  }\n  if ( l == 0 && r == n ) cout << \"Invalid k\";\n  else cout << l << \" \" << r;\n}", "target_program": " static void minRange ( int arr [ ] , int n , int k ) {\n  int l = 0 , r = n ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    Set < Integer > s = new HashSet < Integer > ( ) ;\n    int j ;\n    for ( j = i ;\n    j < n ;\n    j ++ ) {\n      s . add ( arr [ j ] ) ;\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j ;\n          l = i ;\n        }\n        break ;\n      }\n    }\n    if ( j == n ) break ;\n  }\n  if ( l == 0 && r == n ) System . out . println ( \"Invalid k\" ) ;\n  else System . out . println ( l + \" \" + r ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void minRange ( int arr [ ], int n, int k ) {\n  int l = 0, r = n;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    unordered_set < int > s;\n    int j;\n    for ( j = i;\n    j < n;\n    j ++ ) {\n      s . insert ( arr [ j ] );\n      if ( s . size ( ) == k ) {\n        if ( ( j - i ) < ( r - l ) ) {\n          r = j;\n          l = i;\n        }\n        break;\n      }\n    }\n    if ( j == n ) break;\n  }\n  if ( l == 0 && r == n ) cout << \"Invalid k\";\n  else cout << l << \" \" << r;\n}", "target_program": " def minRange ( arr , n , k ) :\n    l = 0\n    r = n\n    for i in range ( n ) :\n        s = [ ]\n        for j in range ( i , n ) :\n            s.append ( arr [ j ] )\n            if ( len ( s ) == k ) :\n                if ( ( j - i ) < ( r - l ) ) :\n                    r = j\n                    l = i\n                break\n        if ( j == n ) :\n            break\n    if ( l == 0 and r == n ) :\n        print ( \"Invalid k\" )\n    else :\n        print ( l , r )"}
{"source": "python", "target": "java", "source_program": " def hexagonArea ( s ) :\n    return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;", "target_program": " public static double hexagonArea ( double s ) {\n  return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def hexagonArea ( s ) :\n    return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;", "target_program": " double hexagonArea ( double s ) {\n  return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 );\n}"}
{"source": "java", "target": "python", "source_program": " public static double hexagonArea ( double s ) {\n  return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;\n}", "target_program": " def hexagonArea ( s ) :\n    return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;"}
{"source": "java", "target": "cpp", "source_program": " public static double hexagonArea ( double s ) {\n  return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;\n}", "target_program": " double hexagonArea ( double s ) {\n  return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " double hexagonArea ( double s ) {\n  return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 );\n}", "target_program": " public static double hexagonArea ( double s ) {\n  return ( ( 3 * Math . sqrt ( 3 ) * ( s * s ) ) / 2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double hexagonArea ( double s ) {\n  return ( ( 3 * sqrt ( 3 ) * ( s * s ) ) / 2 );\n}", "target_program": " def hexagonArea ( s ) :\n    return ( ( 3 * math.sqrt ( 3 ) * ( s * s ) ) / 2 ) ;"}
{"source": "python", "target": "java", "source_program": " def check_duck ( num ) :\n    l = len ( num )\n    count_zero = 0\n    i = 1\n    while i < l :\n        ch = num [ i ]\n        if ( ch == \"0\" ) :\n            count_zero = count_zero + 1\n        i = i + 1\n    return count_zero", "target_program": " static int check_duck ( String num ) {\n  int len = num . length ( ) ;\n  int count_zero = 0 ;\n  char ch ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    ch = num . charAt ( i ) ;\n    if ( ch == '0' ) count_zero ++ ;\n  }\n  return count_zero ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check_duck ( num ) :\n    l = len ( num )\n    count_zero = 0\n    i = 1\n    while i < l :\n        ch = num [ i ]\n        if ( ch == \"0\" ) :\n            count_zero = count_zero + 1\n        i = i + 1\n    return count_zero", "target_program": " int check_duck ( char * num ) {\n  int len = strlen ( num );\n  int count_zero = 0;\n  char ch;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    ch = num [ i ];\n    if ( ch == '0' ) count_zero ++;\n  }\n  return count_zero;\n}"}
{"source": "java", "target": "python", "source_program": " static int check_duck ( String num ) {\n  int len = num . length ( ) ;\n  int count_zero = 0 ;\n  char ch ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    ch = num . charAt ( i ) ;\n    if ( ch == '0' ) count_zero ++ ;\n  }\n  return count_zero ;\n}", "target_program": " def check_duck ( num ) :\n    l = len ( num )\n    count_zero = 0\n    i = 1\n    while i < l :\n        ch = num [ i ]\n        if ( ch == \"0\" ) :\n            count_zero = count_zero + 1\n        i = i + 1\n    return count_zero"}
{"source": "java", "target": "cpp", "source_program": " static int check_duck ( String num ) {\n  int len = num . length ( ) ;\n  int count_zero = 0 ;\n  char ch ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    ch = num . charAt ( i ) ;\n    if ( ch == '0' ) count_zero ++ ;\n  }\n  return count_zero ;\n}", "target_program": " int check_duck ( char * num ) {\n  int len = strlen ( num );\n  int count_zero = 0;\n  char ch;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    ch = num [ i ];\n    if ( ch == '0' ) count_zero ++;\n  }\n  return count_zero;\n}"}
{"source": "cpp", "target": "java", "source_program": " int check_duck ( char * num ) {\n  int len = strlen ( num );\n  int count_zero = 0;\n  char ch;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    ch = num [ i ];\n    if ( ch == '0' ) count_zero ++;\n  }\n  return count_zero;\n}", "target_program": " static int check_duck ( String num ) {\n  int len = num . length ( ) ;\n  int count_zero = 0 ;\n  char ch ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    ch = num . charAt ( i ) ;\n    if ( ch == '0' ) count_zero ++ ;\n  }\n  return count_zero ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int check_duck ( char * num ) {\n  int len = strlen ( num );\n  int count_zero = 0;\n  char ch;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    ch = num [ i ];\n    if ( ch == '0' ) count_zero ++;\n  }\n  return count_zero;\n}", "target_program": " def check_duck ( num ) :\n    l = len ( num )\n    count_zero = 0\n    i = 1\n    while i < l :\n        ch = num [ i ]\n        if ( ch == \"0\" ) :\n            count_zero = count_zero + 1\n        i = i + 1\n    return count_zero"}
{"source": "python", "target": "java", "source_program": " def countIntegralSolutions ( n ) :\n    return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )", "target_program": " static int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countIntegralSolutions ( n ) :\n    return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )", "target_program": " int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;\n}", "target_program": " def countIntegralSolutions ( n ) :\n    return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )"}
{"source": "java", "target": "cpp", "source_program": " static int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;\n}", "target_program": " int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2;\n}", "target_program": " static int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countIntegralSolutions ( int n ) {\n  return ( ( n + 1 ) * ( n + 2 ) ) / 2;\n}", "target_program": " def countIntegralSolutions ( n ) :\n    return int ( ( ( n + 1 ) * ( n + 2 ) ) / 2 )"}
{"source": "python", "target": "java", "source_program": " def maxProfit ( price , n , k ) :\n    profit = [ [ 0 for i in range ( n + 1 ) ] for j in range ( k + 1 ) ]\n    for i in range ( 1 , k + 1 ) :\n        prevDiff = float ( '-inf' )\n        for j in range ( 1 , n ) :\n            prevDiff = max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] )\n            profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff )\n    return profit [ k ] [ n - 1 ]", "target_program": " static int maxProfit ( int price [ ] , int n , int k ) {\n  int profit [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= k ;\n  i ++ ) profit [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) profit [ 0 ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int prevDiff = Integer . MIN_VALUE ;\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ;\n      profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ;\n    }\n  }\n  return profit [ k ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxProfit ( price , n , k ) :\n    profit = [ [ 0 for i in range ( n + 1 ) ] for j in range ( k + 1 ) ]\n    for i in range ( 1 , k + 1 ) :\n        prevDiff = float ( '-inf' )\n        for j in range ( 1 , n ) :\n            prevDiff = max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] )\n            profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff )\n    return profit [ k ] [ n - 1 ]", "target_program": " int maxProfit ( int price [ ], int n, int k ) {\n  int profit [ k + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= k;\n  i ++ ) profit [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) profit [ 0 ] [ j ] = 0;\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int prevDiff = INT_MIN;\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      prevDiff = max ( prevDiff, profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] );\n      profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ], price [ j ] + prevDiff );\n    }\n  }\n  return profit [ k ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxProfit ( int price [ ] , int n , int k ) {\n  int profit [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= k ;\n  i ++ ) profit [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) profit [ 0 ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int prevDiff = Integer . MIN_VALUE ;\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ;\n      profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ;\n    }\n  }\n  return profit [ k ] [ n - 1 ] ;\n}", "target_program": " def maxProfit ( price , n , k ) :\n    profit = [ [ 0 for i in range ( n + 1 ) ] for j in range ( k + 1 ) ]\n    for i in range ( 1 , k + 1 ) :\n        prevDiff = float ( '-inf' )\n        for j in range ( 1 , n ) :\n            prevDiff = max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] )\n            profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff )\n    return profit [ k ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxProfit ( int price [ ] , int n , int k ) {\n  int profit [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= k ;\n  i ++ ) profit [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) profit [ 0 ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int prevDiff = Integer . MIN_VALUE ;\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ;\n      profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ;\n    }\n  }\n  return profit [ k ] [ n - 1 ] ;\n}", "target_program": " int maxProfit ( int price [ ], int n, int k ) {\n  int profit [ k + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= k;\n  i ++ ) profit [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) profit [ 0 ] [ j ] = 0;\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int prevDiff = INT_MIN;\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      prevDiff = max ( prevDiff, profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] );\n      profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ], price [ j ] + prevDiff );\n    }\n  }\n  return profit [ k ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxProfit ( int price [ ], int n, int k ) {\n  int profit [ k + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= k;\n  i ++ ) profit [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) profit [ 0 ] [ j ] = 0;\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int prevDiff = INT_MIN;\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      prevDiff = max ( prevDiff, profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] );\n      profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ], price [ j ] + prevDiff );\n    }\n  }\n  return profit [ k ] [ n - 1 ];\n}", "target_program": " static int maxProfit ( int price [ ] , int n , int k ) {\n  int profit [ ] [ ] = new int [ k + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= k ;\n  i ++ ) profit [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) profit [ 0 ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= k ;\n  i ++ ) {\n    int prevDiff = Integer . MIN_VALUE ;\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      prevDiff = Math . max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] ) ;\n      profit [ i ] [ j ] = Math . max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff ) ;\n    }\n  }\n  return profit [ k ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxProfit ( int price [ ], int n, int k ) {\n  int profit [ k + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= k;\n  i ++ ) profit [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) profit [ 0 ] [ j ] = 0;\n  for ( int i = 1;\n  i <= k;\n  i ++ ) {\n    int prevDiff = INT_MIN;\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      prevDiff = max ( prevDiff, profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] );\n      profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ], price [ j ] + prevDiff );\n    }\n  }\n  return profit [ k ] [ n - 1 ];\n}", "target_program": " def maxProfit ( price , n , k ) :\n    profit = [ [ 0 for i in range ( n + 1 ) ] for j in range ( k + 1 ) ]\n    for i in range ( 1 , k + 1 ) :\n        prevDiff = float ( '-inf' )\n        for j in range ( 1 , n ) :\n            prevDiff = max ( prevDiff , profit [ i - 1 ] [ j - 1 ] - price [ j - 1 ] )\n            profit [ i ] [ j ] = max ( profit [ i ] [ j - 1 ] , price [ j ] + prevDiff )\n    return profit [ k ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def countSubsequence ( s , n ) :\n    cntG = 0\n    cntF = 0\n    result = 0\n    C = 0\n    for i in range ( n ) :\n        if ( s [ i ] == 'G' ) :\n            cntG += 1\n            result += C\n            continue\n        if ( s [ i ] == 'F' ) :\n            cntF += 1\n            C += cntG\n            continue\n        else :\n            continue\n    print ( result )", "target_program": " static void countSubsequence ( String s , int n ) {\n  int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    switch ( s . charAt ( i ) ) {\n      case 'G' : cntG ++ ;\n      result += C ;\n      break ;\n      case 'F' : cntF ++ ;\n      C += cntG ;\n      break ;\n      default : continue ;\n    }\n  }\n  System . out . println ( result ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSubsequence ( s , n ) :\n    cntG = 0\n    cntF = 0\n    result = 0\n    C = 0\n    for i in range ( n ) :\n        if ( s [ i ] == 'G' ) :\n            cntG += 1\n            result += C\n            continue\n        if ( s [ i ] == 'F' ) :\n            cntF += 1\n            C += cntG\n            continue\n        else :\n            continue\n    print ( result )", "target_program": " void countSubsequence ( char s [ ], int n ) {\n  int cntG = 0, cntF = 0, result = 0, C = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    switch ( s [ i ] ) {\n      case 'G' : cntG ++;\n      result += C;\n      break;\n      case 'F' : cntF ++;\n      C += cntG;\n      break;\n      default : continue;\n    }\n  }\n  cout << result << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void countSubsequence ( String s , int n ) {\n  int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    switch ( s . charAt ( i ) ) {\n      case 'G' : cntG ++ ;\n      result += C ;\n      break ;\n      case 'F' : cntF ++ ;\n      C += cntG ;\n      break ;\n      default : continue ;\n    }\n  }\n  System . out . println ( result ) ;\n}", "target_program": " def countSubsequence ( s , n ) :\n    cntG = 0\n    cntF = 0\n    result = 0\n    C = 0\n    for i in range ( n ) :\n        if ( s [ i ] == 'G' ) :\n            cntG += 1\n            result += C\n            continue\n        if ( s [ i ] == 'F' ) :\n            cntF += 1\n            C += cntG\n            continue\n        else :\n            continue\n    print ( result )"}
{"source": "java", "target": "cpp", "source_program": " static void countSubsequence ( String s , int n ) {\n  int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    switch ( s . charAt ( i ) ) {\n      case 'G' : cntG ++ ;\n      result += C ;\n      break ;\n      case 'F' : cntF ++ ;\n      C += cntG ;\n      break ;\n      default : continue ;\n    }\n  }\n  System . out . println ( result ) ;\n}", "target_program": " void countSubsequence ( char s [ ], int n ) {\n  int cntG = 0, cntF = 0, result = 0, C = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    switch ( s [ i ] ) {\n      case 'G' : cntG ++;\n      result += C;\n      break;\n      case 'F' : cntF ++;\n      C += cntG;\n      break;\n      default : continue;\n    }\n  }\n  cout << result << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void countSubsequence ( char s [ ], int n ) {\n  int cntG = 0, cntF = 0, result = 0, C = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    switch ( s [ i ] ) {\n      case 'G' : cntG ++;\n      result += C;\n      break;\n      case 'F' : cntF ++;\n      C += cntG;\n      break;\n      default : continue;\n    }\n  }\n  cout << result << endl;\n}", "target_program": " static void countSubsequence ( String s , int n ) {\n  int cntG = 0 , cntF = 0 , result = 0 , C = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    switch ( s . charAt ( i ) ) {\n      case 'G' : cntG ++ ;\n      result += C ;\n      break ;\n      case 'F' : cntF ++ ;\n      C += cntG ;\n      break ;\n      default : continue ;\n    }\n  }\n  System . out . println ( result ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void countSubsequence ( char s [ ], int n ) {\n  int cntG = 0, cntF = 0, result = 0, C = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    switch ( s [ i ] ) {\n      case 'G' : cntG ++;\n      result += C;\n      break;\n      case 'F' : cntF ++;\n      C += cntG;\n      break;\n      default : continue;\n    }\n  }\n  cout << result << endl;\n}", "target_program": " def countSubsequence ( s , n ) :\n    cntG = 0\n    cntF = 0\n    result = 0\n    C = 0\n    for i in range ( n ) :\n        if ( s [ i ] == 'G' ) :\n            cntG += 1\n            result += C\n            continue\n        if ( s [ i ] == 'F' ) :\n            cntF += 1\n            C += cntG\n            continue\n        else :\n            continue\n    print ( result )"}
{"source": "python", "target": "java", "source_program": " def findSmallest ( arr , n ) :\n    res = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] <= res :\n            res = res + arr [ i ]\n        else :\n            break\n    return res", "target_program": " int findSmallest ( int arr [ ] , int n ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < n && arr [ i ] <= res ;\n  i ++ ) res = res + arr [ i ] ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSmallest ( arr , n ) :\n    res = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] <= res :\n            res = res + arr [ i ]\n        else :\n            break\n    return res", "target_program": " int findSmallest ( int arr [ ], int n ) {\n  int res = 1;\n  for ( int i = 0;\n  i < n && arr [ i ] <= res;\n  i ++ ) res = res + arr [ i ];\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " int findSmallest ( int arr [ ] , int n ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < n && arr [ i ] <= res ;\n  i ++ ) res = res + arr [ i ] ;\n  return res ;\n}", "target_program": " def findSmallest ( arr , n ) :\n    res = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] <= res :\n            res = res + arr [ i ]\n        else :\n            break\n    return res"}
{"source": "java", "target": "cpp", "source_program": " int findSmallest ( int arr [ ] , int n ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < n && arr [ i ] <= res ;\n  i ++ ) res = res + arr [ i ] ;\n  return res ;\n}", "target_program": " int findSmallest ( int arr [ ], int n ) {\n  int res = 1;\n  for ( int i = 0;\n  i < n && arr [ i ] <= res;\n  i ++ ) res = res + arr [ i ];\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSmallest ( int arr [ ], int n ) {\n  int res = 1;\n  for ( int i = 0;\n  i < n && arr [ i ] <= res;\n  i ++ ) res = res + arr [ i ];\n  return res;\n}", "target_program": " int findSmallest ( int arr [ ] , int n ) {\n  int res = 1 ;\n  for ( int i = 0 ;\n  i < n && arr [ i ] <= res ;\n  i ++ ) res = res + arr [ i ] ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSmallest ( int arr [ ], int n ) {\n  int res = 1;\n  for ( int i = 0;\n  i < n && arr [ i ] <= res;\n  i ++ ) res = res + arr [ i ];\n  return res;\n}", "target_program": " def findSmallest ( arr , n ) :\n    res = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] <= res :\n            res = res + arr [ i ]\n        else :\n            break\n    return res"}
{"source": "python", "target": "java", "source_program": " def findMaxPoints ( A ) :\n    P1S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P1E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    ans = 0\n    for i in range ( 2 , N ) :\n        for j in range ( 2 , M ) :\n            op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + \\\n                P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ]\n            op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + \\\n                P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ]\n            ans = max ( ans , max ( op1 , op2 ) )\n    return ans", "target_program": " static int findMaxPoints ( int A [ ] [ ] ) {\n  int [ ] [ ] P1S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P1E = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2E = new int [ M + 2 ] [ N + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P1S [ i ] [ j ] = Math . max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P1E [ i ] [ j ] = Math . max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P2S [ i ] [ j ] = Math . max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P2E [ i ] [ j ] = Math . max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  int ans = 0 ;\n  for ( int i = 2 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 2 ;\n    j < M ;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ] ;\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ] ;\n      ans = Math . max ( ans , Math . max ( op1 , op2 ) ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxPoints ( A ) :\n    P1S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P1E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    ans = 0\n    for i in range ( 2 , N ) :\n        for j in range ( 2 , M ) :\n            op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + \\\n                P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ]\n            op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + \\\n                P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ]\n            ans = max ( ans , max ( op1 , op2 ) )\n    return ans", "target_program": " int findMaxPoints ( int A [ ] [ M ] ) {\n  int P1S [ M + 1 ] [ N + 1 ], P1E [ M + 1 ] [ N + 1 ];\n  memset ( P1S, 0, sizeof ( P1S ) );\n  memset ( P1E, 0, sizeof ( P1E ) );\n  int P2S [ M + 1 ] [ N + 1 ], P2E [ M + 1 ] [ N + 1 ];\n  memset ( P2S, 0, sizeof ( P2S ) );\n  memset ( P2E, 0, sizeof ( P2E ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 1;\n  j <= M;\n  j ++ ) P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ], P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = M;\n  j >= 1;\n  j -- ) P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ], P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = 1;\n  j <= M;\n  j ++ ) P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ], P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = M;\n  j >= 1;\n  j -- ) P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ], P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  int ans = 0;\n  for ( int i = 2;\n  i < N;\n  i ++ ) {\n    for ( int j = 2;\n    j < M;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ];\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ];\n      ans = max ( ans, max ( op1, op2 ) );\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxPoints ( int A [ ] [ ] ) {\n  int [ ] [ ] P1S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P1E = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2E = new int [ M + 2 ] [ N + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P1S [ i ] [ j ] = Math . max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P1E [ i ] [ j ] = Math . max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P2S [ i ] [ j ] = Math . max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P2E [ i ] [ j ] = Math . max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  int ans = 0 ;\n  for ( int i = 2 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 2 ;\n    j < M ;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ] ;\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ] ;\n      ans = Math . max ( ans , Math . max ( op1 , op2 ) ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " def findMaxPoints ( A ) :\n    P1S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P1E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    ans = 0\n    for i in range ( 2 , N ) :\n        for j in range ( 2 , M ) :\n            op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + \\\n                P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ]\n            op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + \\\n                P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ]\n            ans = max ( ans , max ( op1 , op2 ) )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxPoints ( int A [ ] [ ] ) {\n  int [ ] [ ] P1S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P1E = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2E = new int [ M + 2 ] [ N + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P1S [ i ] [ j ] = Math . max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P1E [ i ] [ j ] = Math . max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P2S [ i ] [ j ] = Math . max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P2E [ i ] [ j ] = Math . max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  int ans = 0 ;\n  for ( int i = 2 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 2 ;\n    j < M ;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ] ;\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ] ;\n      ans = Math . max ( ans , Math . max ( op1 , op2 ) ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " int findMaxPoints ( int A [ ] [ M ] ) {\n  int P1S [ M + 1 ] [ N + 1 ], P1E [ M + 1 ] [ N + 1 ];\n  memset ( P1S, 0, sizeof ( P1S ) );\n  memset ( P1E, 0, sizeof ( P1E ) );\n  int P2S [ M + 1 ] [ N + 1 ], P2E [ M + 1 ] [ N + 1 ];\n  memset ( P2S, 0, sizeof ( P2S ) );\n  memset ( P2E, 0, sizeof ( P2E ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 1;\n  j <= M;\n  j ++ ) P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ], P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = M;\n  j >= 1;\n  j -- ) P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ], P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = 1;\n  j <= M;\n  j ++ ) P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ], P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = M;\n  j >= 1;\n  j -- ) P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ], P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  int ans = 0;\n  for ( int i = 2;\n  i < N;\n  i ++ ) {\n    for ( int j = 2;\n    j < M;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ];\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ];\n      ans = max ( ans, max ( op1, op2 ) );\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxPoints ( int A [ ] [ M ] ) {\n  int P1S [ M + 1 ] [ N + 1 ], P1E [ M + 1 ] [ N + 1 ];\n  memset ( P1S, 0, sizeof ( P1S ) );\n  memset ( P1E, 0, sizeof ( P1E ) );\n  int P2S [ M + 1 ] [ N + 1 ], P2E [ M + 1 ] [ N + 1 ];\n  memset ( P2S, 0, sizeof ( P2S ) );\n  memset ( P2E, 0, sizeof ( P2E ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 1;\n  j <= M;\n  j ++ ) P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ], P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = M;\n  j >= 1;\n  j -- ) P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ], P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = 1;\n  j <= M;\n  j ++ ) P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ], P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = M;\n  j >= 1;\n  j -- ) P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ], P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  int ans = 0;\n  for ( int i = 2;\n  i < N;\n  i ++ ) {\n    for ( int j = 2;\n    j < M;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ];\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ];\n      ans = max ( ans, max ( op1, op2 ) );\n    }\n  }\n  return ans;\n}", "target_program": " static int findMaxPoints ( int A [ ] [ ] ) {\n  int [ ] [ ] P1S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P1E = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2S = new int [ M + 2 ] [ N + 2 ] ;\n  int [ ] [ ] P2E = new int [ M + 2 ] [ N + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P1S [ i ] [ j ] = Math . max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P1E [ i ] [ j ] = Math . max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) for ( int j = 1 ;\n  j <= M ;\n  j ++ ) P2S [ i ] [ j ] = Math . max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = M ;\n  j >= 1 ;\n  j -- ) P2E [ i ] [ j ] = Math . max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ] ;\n  int ans = 0 ;\n  for ( int i = 2 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 2 ;\n    j < M ;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ] ;\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ] ;\n      ans = Math . max ( ans , Math . max ( op1 , op2 ) ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxPoints ( int A [ ] [ M ] ) {\n  int P1S [ M + 1 ] [ N + 1 ], P1E [ M + 1 ] [ N + 1 ];\n  memset ( P1S, 0, sizeof ( P1S ) );\n  memset ( P1E, 0, sizeof ( P1E ) );\n  int P2S [ M + 1 ] [ N + 1 ], P2E [ M + 1 ] [ N + 1 ];\n  memset ( P2S, 0, sizeof ( P2S ) );\n  memset ( P2E, 0, sizeof ( P2E ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 1;\n  j <= M;\n  j ++ ) P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ], P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = M;\n  j >= 1;\n  j -- ) P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ], P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = N;\n  i >= 1;\n  i -- ) for ( int j = 1;\n  j <= M;\n  j ++ ) P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ], P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = M;\n  j >= 1;\n  j -- ) P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ], P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ];\n  int ans = 0;\n  for ( int i = 2;\n  i < N;\n  i ++ ) {\n    for ( int j = 2;\n    j < M;\n    j ++ ) {\n      int op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ];\n      int op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ];\n      ans = max ( ans, max ( op1, op2 ) );\n    }\n  }\n  return ans;\n}", "target_program": " def findMaxPoints ( A ) :\n    P1S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P1E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2S = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    P2E = [ [ 0 for i in range ( N + 2 ) ] for j in range ( M + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P1S [ i ] [ j ] = max ( P1S [ i - 1 ] [ j ] , P1S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P1E [ i ] [ j ] = max ( P1E [ i + 1 ] [ j ] , P1E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            P2S [ i ] [ j ] = max ( P2S [ i + 1 ] [ j ] , P2S [ i ] [ j - 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            P2E [ i ] [ j ] = max ( P2E [ i - 1 ] [ j ] , P2E [ i ] [ j + 1 ] ) + A [ i - 1 ] [ j - 1 ]\n    ans = 0\n    for i in range ( 2 , N ) :\n        for j in range ( 2 , M ) :\n            op1 = P1S [ i ] [ j - 1 ] + P1E [ i ] [ j + 1 ] + \\\n                P2S [ i + 1 ] [ j ] + P2E [ i - 1 ] [ j ]\n            op2 = P1S [ i - 1 ] [ j ] + P1E [ i + 1 ] [ j ] + \\\n                P2S [ i ] [ j - 1 ] + P2E [ i ] [ j + 1 ]\n            ans = max ( ans , max ( op1 , op2 ) )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def circumference ( r ) :\n    return ( 2 * PI * r )", "target_program": " static double circumference ( double r ) {\n  double PI = 3.1415 ;\n  double cir = 2 * PI * r ;\n  return cir ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def circumference ( r ) :\n    return ( 2 * PI * r )", "target_program": " double circumference ( double r ) {\n  double cir = 2 * PI * r;\n  return cir;\n}"}
{"source": "java", "target": "python", "source_program": " static double circumference ( double r ) {\n  double PI = 3.1415 ;\n  double cir = 2 * PI * r ;\n  return cir ;\n}", "target_program": " def circumference ( r ) :\n    return ( 2 * PI * r )"}
{"source": "java", "target": "cpp", "source_program": " static double circumference ( double r ) {\n  double PI = 3.1415 ;\n  double cir = 2 * PI * r ;\n  return cir ;\n}", "target_program": " double circumference ( double r ) {\n  double cir = 2 * PI * r;\n  return cir;\n}"}
{"source": "cpp", "target": "java", "source_program": " double circumference ( double r ) {\n  double cir = 2 * PI * r;\n  return cir;\n}", "target_program": " static double circumference ( double r ) {\n  double PI = 3.1415 ;\n  double cir = 2 * PI * r ;\n  return cir ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double circumference ( double r ) {\n  double cir = 2 * PI * r;\n  return cir;\n}", "target_program": " def circumference ( r ) :\n    return ( 2 * PI * r )"}
{"source": "python", "target": "java", "source_program": " def leftRotate ( arr , n , k ) :\n    for i in range ( k , k + n ) :\n        print ( str ( arr [ i % n ] ) , end = \" \" )", "target_program": " static void leftRotate ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < k + n ;\n  i ++ ) System . out . print ( arr [ i % n ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def leftRotate ( arr , n , k ) :\n    for i in range ( k , k + n ) :\n        print ( str ( arr [ i % n ] ) , end = \" \" )", "target_program": " void leftRotate ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < k + n;\n  i ++ ) cout << arr [ i % n ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void leftRotate ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < k + n ;\n  i ++ ) System . out . print ( arr [ i % n ] + \" \" ) ;\n}", "target_program": " def leftRotate ( arr , n , k ) :\n    for i in range ( k , k + n ) :\n        print ( str ( arr [ i % n ] ) , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void leftRotate ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < k + n ;\n  i ++ ) System . out . print ( arr [ i % n ] + \" \" ) ;\n}", "target_program": " void leftRotate ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < k + n;\n  i ++ ) cout << arr [ i % n ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void leftRotate ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < k + n;\n  i ++ ) cout << arr [ i % n ] << \" \";\n}", "target_program": " static void leftRotate ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < k + n ;\n  i ++ ) System . out . print ( arr [ i % n ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void leftRotate ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < k + n;\n  i ++ ) cout << arr [ i % n ] << \" \";\n}", "target_program": " def leftRotate ( arr , n , k ) :\n    for i in range ( k , k + n ) :\n        print ( str ( arr [ i % n ] ) , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def minSum ( A ) :\n    min_val = min ( A ) ;\n    return min_val * ( len ( A ) - 1 )", "target_program": " static int minSum ( int [ ] A , int n ) {\n  int min_val = Arrays . stream ( A ) . min ( ) . getAsInt ( ) ;\n  return ( min_val * ( n - 1 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minSum ( A ) :\n    min_val = min ( A ) ;\n    return min_val * ( len ( A ) - 1 )", "target_program": " int minSum ( int A [ ], int n ) {\n  int min_val = * min_element ( A, A + n );\n  return ( min_val * ( n - 1 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int minSum ( int [ ] A , int n ) {\n  int min_val = Arrays . stream ( A ) . min ( ) . getAsInt ( ) ;\n  return ( min_val * ( n - 1 ) ) ;\n}", "target_program": " def minSum ( A ) :\n    min_val = min ( A ) ;\n    return min_val * ( len ( A ) - 1 )"}
{"source": "java", "target": "cpp", "source_program": " static int minSum ( int [ ] A , int n ) {\n  int min_val = Arrays . stream ( A ) . min ( ) . getAsInt ( ) ;\n  return ( min_val * ( n - 1 ) ) ;\n}", "target_program": " int minSum ( int A [ ], int n ) {\n  int min_val = * min_element ( A, A + n );\n  return ( min_val * ( n - 1 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int minSum ( int A [ ], int n ) {\n  int min_val = * min_element ( A, A + n );\n  return ( min_val * ( n - 1 ) );\n}", "target_program": " static int minSum ( int [ ] A , int n ) {\n  int min_val = Arrays . stream ( A ) . min ( ) . getAsInt ( ) ;\n  return ( min_val * ( n - 1 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minSum ( int A [ ], int n ) {\n  int min_val = * min_element ( A, A + n );\n  return ( min_val * ( n - 1 ) );\n}", "target_program": " def minSum ( A ) :\n    min_val = min ( A ) ;\n    return min_val * ( len ( A ) - 1 )"}
{"source": "python", "target": "java", "source_program": " def isPrime ( n , i = 2 ) :\n    if ( n <= 2 ) :\n        return True if ( n == 2 ) else False\n    if ( n % i == 0 ) :\n        return False\n    if ( i * i > n ) :\n        return true\n    return isPrime ( n , i + 1 )", "target_program": " static boolean isPrime ( int n , int i ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false ;\n  if ( n % i == 0 ) return false ;\n  if ( i * i > n ) return true ;\n  return isPrime ( n , i + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPrime ( n , i = 2 ) :\n    if ( n <= 2 ) :\n        return True if ( n == 2 ) else False\n    if ( n % i == 0 ) :\n        return False\n    if ( i * i > n ) :\n        return true\n    return isPrime ( n , i + 1 )", "target_program": " bool isPrime ( int n, int i = 2 ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false;\n  if ( n % i == 0 ) return false;\n  if ( i * i > n ) return true;\n  return isPrime ( n, i + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPrime ( int n , int i ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false ;\n  if ( n % i == 0 ) return false ;\n  if ( i * i > n ) return true ;\n  return isPrime ( n , i + 1 ) ;\n}", "target_program": " def isPrime ( n , i = 2 ) :\n    if ( n <= 2 ) :\n        return True if ( n == 2 ) else False\n    if ( n % i == 0 ) :\n        return False\n    if ( i * i > n ) :\n        return true\n    return isPrime ( n , i + 1 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPrime ( int n , int i ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false ;\n  if ( n % i == 0 ) return false ;\n  if ( i * i > n ) return true ;\n  return isPrime ( n , i + 1 ) ;\n}", "target_program": " bool isPrime ( int n, int i = 2 ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false;\n  if ( n % i == 0 ) return false;\n  if ( i * i > n ) return true;\n  return isPrime ( n, i + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPrime ( int n, int i = 2 ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false;\n  if ( n % i == 0 ) return false;\n  if ( i * i > n ) return true;\n  return isPrime ( n, i + 1 );\n}", "target_program": " static boolean isPrime ( int n , int i ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false ;\n  if ( n % i == 0 ) return false ;\n  if ( i * i > n ) return true ;\n  return isPrime ( n , i + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPrime ( int n, int i = 2 ) {\n  if ( n <= 2 ) return ( n == 2 ) ? true : false;\n  if ( n % i == 0 ) return false;\n  if ( i * i > n ) return true;\n  return isPrime ( n, i + 1 );\n}", "target_program": " def isPrime ( n , i = 2 ) :\n    if ( n <= 2 ) :\n        return True if ( n == 2 ) else False\n    if ( n % i == 0 ) :\n        return False\n    if ( i * i > n ) :\n        return true\n    return isPrime ( n , i + 1 )"}
{"source": "python", "target": "java", "source_program": " def sparseSearch ( arr , key , low , high ) :\n    left = 0 ; right = 0\n    while low <= high :\n        mid = ( low + high ) // 2\n        if arr [ mid ] == '' :\n            left = mid - 1\n            right = mid + 1\n            if left < low and right > high :\n                return - 1\n            elif right <= high and arr [ right ] != '' :\n                mid = right\n            elif left >= low and arr [ left ] != '' :\n                mid = left\n        if arr [ mid ] == key :\n            print ( 'Found string {} at index {}'.format ( arr [ mid ] , mid ) )\n            return\n        elif arr [ mid ] > key :\n            high = mid - 1\n        elif arr [ mid ] < key :\n            low = mid + 1\n        left -= 1\n        right += 1\n    return - 1", "target_program": " static int sparseSearch ( String arr [ ] , String x , int n ) {\n  return binarySearch ( arr , 0 , n - 1 , x ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sparseSearch ( arr , key , low , high ) :\n    left = 0 ; right = 0\n    while low <= high :\n        mid = ( low + high ) // 2\n        if arr [ mid ] == '' :\n            left = mid - 1\n            right = mid + 1\n            if left < low and right > high :\n                return - 1\n            elif right <= high and arr [ right ] != '' :\n                mid = right\n            elif left >= low and arr [ left ] != '' :\n                mid = left\n        if arr [ mid ] == key :\n            print ( 'Found string {} at index {}'.format ( arr [ mid ] , mid ) )\n            return\n        elif arr [ mid ] > key :\n            high = mid - 1\n        elif arr [ mid ] < key :\n            low = mid + 1\n        left -= 1\n        right += 1\n    return - 1", "target_program": " int sparseSearch ( string arr [ ], string x, int n ) {\n  return binarySearch ( arr, 0, n - 1, x );\n}"}
{"source": "java", "target": "python", "source_program": " static int sparseSearch ( String arr [ ] , String x , int n ) {\n  return binarySearch ( arr , 0 , n - 1 , x ) ;\n}", "target_program": " def sparseSearch ( arr , key , low , high ) :\n    left = 0 ; right = 0\n    while low <= high :\n        mid = ( low + high ) // 2\n        if arr [ mid ] == '' :\n            left = mid - 1\n            right = mid + 1\n            if left < low and right > high :\n                return - 1\n            elif right <= high and arr [ right ] != '' :\n                mid = right\n            elif left >= low and arr [ left ] != '' :\n                mid = left\n        if arr [ mid ] == key :\n            print ( 'Found string {} at index {}'.format ( arr [ mid ] , mid ) )\n            return\n        elif arr [ mid ] > key :\n            high = mid - 1\n        elif arr [ mid ] < key :\n            low = mid + 1\n        left -= 1\n        right += 1\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int sparseSearch ( String arr [ ] , String x , int n ) {\n  return binarySearch ( arr , 0 , n - 1 , x ) ;\n}", "target_program": " int sparseSearch ( string arr [ ], string x, int n ) {\n  return binarySearch ( arr, 0, n - 1, x );\n}"}
{"source": "cpp", "target": "java", "source_program": " int sparseSearch ( string arr [ ], string x, int n ) {\n  return binarySearch ( arr, 0, n - 1, x );\n}", "target_program": " static int sparseSearch ( String arr [ ] , String x , int n ) {\n  return binarySearch ( arr , 0 , n - 1 , x ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sparseSearch ( string arr [ ], string x, int n ) {\n  return binarySearch ( arr, 0, n - 1, x );\n}", "target_program": " def sparseSearch ( arr , key , low , high ) :\n    left = 0 ; right = 0\n    while low <= high :\n        mid = ( low + high ) // 2\n        if arr [ mid ] == '' :\n            left = mid - 1\n            right = mid + 1\n            if left < low and right > high :\n                return - 1\n            elif right <= high and arr [ right ] != '' :\n                mid = right\n            elif left >= low and arr [ left ] != '' :\n                mid = left\n        if arr [ mid ] == key :\n            print ( 'Found string {} at index {}'.format ( arr [ mid ] , mid ) )\n            return\n        elif arr [ mid ] > key :\n            high = mid - 1\n        elif arr [ mid ] < key :\n            low = mid + 1\n        left -= 1\n        right += 1\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def maxOnesIndex ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index", "target_program": " static int maxOnesIndex ( int arr [ ] , int n ) {\n  int max_count = 0 ;\n  int max_index = 0 ;\n  int prev_zero = - 1 ;\n  int prev_prev_zero = - 1 ;\n  for ( int curr = 0 ;\n  curr < n ;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero ;\n        max_index = prev_zero ;\n      }\n      prev_prev_zero = prev_zero ;\n      prev_zero = curr ;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero ;\n  return max_index ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxOnesIndex ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index", "target_program": " int maxOnesIndex ( bool arr [ ], int n ) {\n  int max_count = 0;\n  int max_index;\n  int prev_zero = - 1;\n  int prev_prev_zero = - 1;\n  for ( int curr = 0;\n  curr < n;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero;\n        max_index = prev_zero;\n      }\n      prev_prev_zero = prev_zero;\n      prev_zero = curr;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero;\n  return max_index;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxOnesIndex ( int arr [ ] , int n ) {\n  int max_count = 0 ;\n  int max_index = 0 ;\n  int prev_zero = - 1 ;\n  int prev_prev_zero = - 1 ;\n  for ( int curr = 0 ;\n  curr < n ;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero ;\n        max_index = prev_zero ;\n      }\n      prev_prev_zero = prev_zero ;\n      prev_zero = curr ;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero ;\n  return max_index ;\n}", "target_program": " def maxOnesIndex ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index"}
{"source": "java", "target": "cpp", "source_program": " static int maxOnesIndex ( int arr [ ] , int n ) {\n  int max_count = 0 ;\n  int max_index = 0 ;\n  int prev_zero = - 1 ;\n  int prev_prev_zero = - 1 ;\n  for ( int curr = 0 ;\n  curr < n ;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero ;\n        max_index = prev_zero ;\n      }\n      prev_prev_zero = prev_zero ;\n      prev_zero = curr ;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero ;\n  return max_index ;\n}", "target_program": " int maxOnesIndex ( bool arr [ ], int n ) {\n  int max_count = 0;\n  int max_index;\n  int prev_zero = - 1;\n  int prev_prev_zero = - 1;\n  for ( int curr = 0;\n  curr < n;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero;\n        max_index = prev_zero;\n      }\n      prev_prev_zero = prev_zero;\n      prev_zero = curr;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero;\n  return max_index;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxOnesIndex ( bool arr [ ], int n ) {\n  int max_count = 0;\n  int max_index;\n  int prev_zero = - 1;\n  int prev_prev_zero = - 1;\n  for ( int curr = 0;\n  curr < n;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero;\n        max_index = prev_zero;\n      }\n      prev_prev_zero = prev_zero;\n      prev_zero = curr;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero;\n  return max_index;\n}", "target_program": " static int maxOnesIndex ( int arr [ ] , int n ) {\n  int max_count = 0 ;\n  int max_index = 0 ;\n  int prev_zero = - 1 ;\n  int prev_prev_zero = - 1 ;\n  for ( int curr = 0 ;\n  curr < n ;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero ;\n        max_index = prev_zero ;\n      }\n      prev_prev_zero = prev_zero ;\n      prev_zero = curr ;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero ;\n  return max_index ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxOnesIndex ( bool arr [ ], int n ) {\n  int max_count = 0;\n  int max_index;\n  int prev_zero = - 1;\n  int prev_prev_zero = - 1;\n  for ( int curr = 0;\n  curr < n;\n  ++ curr ) {\n    if ( arr [ curr ] == 0 ) {\n      if ( curr - prev_prev_zero > max_count ) {\n        max_count = curr - prev_prev_zero;\n        max_index = prev_zero;\n      }\n      prev_prev_zero = prev_zero;\n      prev_zero = curr;\n    }\n  }\n  if ( n - prev_prev_zero > max_count ) max_index = prev_zero;\n  return max_index;\n}", "target_program": " def maxOnesIndex ( arr , n ) :\n    max_count = 0\n    max_index = 0\n    prev_zero = - 1\n    prev_prev_zero = - 1\n    for curr in range ( n ) :\n        if ( arr [ curr ] == 0 ) :\n            if ( curr - prev_prev_zero > max_count ) :\n                max_count = curr - prev_prev_zero\n                max_index = prev_zero\n            prev_prev_zero = prev_zero\n            prev_zero = curr\n    if ( n - prev_prev_zero > max_count ) :\n        max_index = prev_zero\n    return max_index"}
{"source": "python", "target": "java", "source_program": " def maxProduct ( arr , n ) :\n    if n < 3 :\n        return - 1\n    arr.sort ( )\n    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] )", "target_program": " static int maxProduct ( int arr [ ] , int n ) {\n  if ( n < 3 ) {\n    return - 1 ;\n  }\n  Arrays . sort ( arr ) ;\n  return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxProduct ( arr , n ) :\n    if n < 3 :\n        return - 1\n    arr.sort ( )\n    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] )", "target_program": " int maxProduct ( int arr [ ], int n ) {\n  if ( n < 3 ) return - 1;\n  sort ( arr, arr + n );\n  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ], arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] );\n}"}
{"source": "java", "target": "python", "source_program": " static int maxProduct ( int arr [ ] , int n ) {\n  if ( n < 3 ) {\n    return - 1 ;\n  }\n  Arrays . sort ( arr ) ;\n  return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ;\n}", "target_program": " def maxProduct ( arr , n ) :\n    if n < 3 :\n        return - 1\n    arr.sort ( )\n    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] )"}
{"source": "java", "target": "cpp", "source_program": " static int maxProduct ( int arr [ ] , int n ) {\n  if ( n < 3 ) {\n    return - 1 ;\n  }\n  Arrays . sort ( arr ) ;\n  return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ;\n}", "target_program": " int maxProduct ( int arr [ ], int n ) {\n  if ( n < 3 ) return - 1;\n  sort ( arr, arr + n );\n  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ], arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxProduct ( int arr [ ], int n ) {\n  if ( n < 3 ) return - 1;\n  sort ( arr, arr + n );\n  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ], arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] );\n}", "target_program": " static int maxProduct ( int arr [ ] , int n ) {\n  if ( n < 3 ) {\n    return - 1 ;\n  }\n  Arrays . sort ( arr ) ;\n  return Math . max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxProduct ( int arr [ ], int n ) {\n  if ( n < 3 ) return - 1;\n  sort ( arr, arr + n );\n  return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ], arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] );\n}", "target_program": " def maxProduct ( arr , n ) :\n    if n < 3 :\n        return - 1\n    arr.sort ( )\n    return max ( arr [ 0 ] * arr [ 1 ] * arr [ n - 1 ] , arr [ n - 1 ] * arr [ n - 2 ] * arr [ n - 3 ] )"}
{"source": "python", "target": "java", "source_program": " def printRect ( X , Y , n ) :\n    Xmax = max ( X )\n    Xmin = min ( X )\n    Ymax = max ( Y )\n    Ymin = min ( Y )\n    print ( \"{\" , Xmin , \", \" , Ymin , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmin , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymin , \"}\" , sep = \"\" )", "target_program": " static void printRect ( Integer X [ ] , Integer Y [ ] , int n ) {\n  int Xmax = Collections . max ( Arrays . asList ( X ) ) ;\n  int Xmin = Collections . min ( Arrays . asList ( X ) ) ;\n  int Ymax = Collections . max ( Arrays . asList ( Y ) ) ;\n  int Ymin = Collections . min ( Arrays . asList ( Y ) ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymin + \"}\" ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymin + \"}\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printRect ( X , Y , n ) :\n    Xmax = max ( X )\n    Xmin = min ( X )\n    Ymax = max ( Y )\n    Ymin = min ( Y )\n    print ( \"{\" , Xmin , \", \" , Ymin , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmin , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymin , \"}\" , sep = \"\" )", "target_program": " void printRect ( int X [ ], int Y [ ], int n ) {\n  int Xmax = * max_element ( X, X + n );\n  int Xmin = * min_element ( X, X + n );\n  int Ymax = * max_element ( Y, Y + n );\n  int Ymin = * min_element ( Y, Y + n );\n  cout << \"{\" << Xmin << \", \" << Ymin << \"}\" << endl;\n  cout << \"{\" << Xmin << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymin << \"}\" << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void printRect ( Integer X [ ] , Integer Y [ ] , int n ) {\n  int Xmax = Collections . max ( Arrays . asList ( X ) ) ;\n  int Xmin = Collections . min ( Arrays . asList ( X ) ) ;\n  int Ymax = Collections . max ( Arrays . asList ( Y ) ) ;\n  int Ymin = Collections . min ( Arrays . asList ( Y ) ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymin + \"}\" ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymin + \"}\" ) ;\n}", "target_program": " def printRect ( X , Y , n ) :\n    Xmax = max ( X )\n    Xmin = min ( X )\n    Ymax = max ( Y )\n    Ymin = min ( Y )\n    print ( \"{\" , Xmin , \", \" , Ymin , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmin , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymin , \"}\" , sep = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printRect ( Integer X [ ] , Integer Y [ ] , int n ) {\n  int Xmax = Collections . max ( Arrays . asList ( X ) ) ;\n  int Xmin = Collections . min ( Arrays . asList ( X ) ) ;\n  int Ymax = Collections . max ( Arrays . asList ( Y ) ) ;\n  int Ymin = Collections . min ( Arrays . asList ( Y ) ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymin + \"}\" ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymin + \"}\" ) ;\n}", "target_program": " void printRect ( int X [ ], int Y [ ], int n ) {\n  int Xmax = * max_element ( X, X + n );\n  int Xmin = * min_element ( X, X + n );\n  int Ymax = * max_element ( Y, Y + n );\n  int Ymin = * min_element ( Y, Y + n );\n  cout << \"{\" << Xmin << \", \" << Ymin << \"}\" << endl;\n  cout << \"{\" << Xmin << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymin << \"}\" << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void printRect ( int X [ ], int Y [ ], int n ) {\n  int Xmax = * max_element ( X, X + n );\n  int Xmin = * min_element ( X, X + n );\n  int Ymax = * max_element ( Y, Y + n );\n  int Ymin = * min_element ( Y, Y + n );\n  cout << \"{\" << Xmin << \", \" << Ymin << \"}\" << endl;\n  cout << \"{\" << Xmin << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymin << \"}\" << endl;\n}", "target_program": " static void printRect ( Integer X [ ] , Integer Y [ ] , int n ) {\n  int Xmax = Collections . max ( Arrays . asList ( X ) ) ;\n  int Xmin = Collections . min ( Arrays . asList ( X ) ) ;\n  int Ymax = Collections . max ( Arrays . asList ( Y ) ) ;\n  int Ymin = Collections . min ( Arrays . asList ( Y ) ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymin + \"}\" ) ;\n  System . out . println ( \"{\" + Xmin + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymax + \"}\" ) ;\n  System . out . println ( \"{\" + Xmax + \", \" + Ymin + \"}\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printRect ( int X [ ], int Y [ ], int n ) {\n  int Xmax = * max_element ( X, X + n );\n  int Xmin = * min_element ( X, X + n );\n  int Ymax = * max_element ( Y, Y + n );\n  int Ymin = * min_element ( Y, Y + n );\n  cout << \"{\" << Xmin << \", \" << Ymin << \"}\" << endl;\n  cout << \"{\" << Xmin << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymax << \"}\" << endl;\n  cout << \"{\" << Xmax << \", \" << Ymin << \"}\" << endl;\n}", "target_program": " def printRect ( X , Y , n ) :\n    Xmax = max ( X )\n    Xmin = min ( X )\n    Ymax = max ( Y )\n    Ymin = min ( Y )\n    print ( \"{\" , Xmin , \", \" , Ymin , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmin , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymax , \"}\" , sep = \"\" )\n    print ( \"{\" , Xmax , \", \" , Ymin , \"}\" , sep = \"\" )"}
{"source": "python", "target": "java", "source_program": " def countOfBinaryNumberLessThanN ( N ) :\n    q = deque ( )\n    q.append ( 1 )\n    cnt = 0\n    while ( q ) :\n        t = q.popleft ( )\n        if ( t <= N ) :\n            cnt = cnt + 1\n            q.append ( t * 10 )\n            q.append ( t * 10 + 1 )\n    return cnt", "target_program": " static int countOfBinaryNumberLessThanN ( int N ) {\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 1 ) ;\n  int cnt = 0 ;\n  int t ;\n  while ( q . size ( ) > 0 ) {\n    t = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( t <= N ) {\n      cnt ++ ;\n      q . add ( t * 10 ) ;\n      q . add ( t * 10 + 1 ) ;\n    }\n  }\n  return cnt ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countOfBinaryNumberLessThanN ( N ) :\n    q = deque ( )\n    q.append ( 1 )\n    cnt = 0\n    while ( q ) :\n        t = q.popleft ( )\n        if ( t <= N ) :\n            cnt = cnt + 1\n            q.append ( t * 10 )\n            q.append ( t * 10 + 1 )\n    return cnt", "target_program": " int countOfBinaryNumberLessThanN ( int N ) {\n  queue < int > q;\n  q . push ( 1 );\n  int cnt = 0;\n  int t;\n  while ( ! q . empty ( ) ) {\n    t = q . front ( );\n    q . pop ( );\n    if ( t <= N ) {\n      cnt ++;\n      q . push ( t * 10 );\n      q . push ( t * 10 + 1 );\n    }\n  }\n  return cnt;\n}"}
{"source": "java", "target": "python", "source_program": " static int countOfBinaryNumberLessThanN ( int N ) {\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 1 ) ;\n  int cnt = 0 ;\n  int t ;\n  while ( q . size ( ) > 0 ) {\n    t = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( t <= N ) {\n      cnt ++ ;\n      q . add ( t * 10 ) ;\n      q . add ( t * 10 + 1 ) ;\n    }\n  }\n  return cnt ;\n}", "target_program": " def countOfBinaryNumberLessThanN ( N ) :\n    q = deque ( )\n    q.append ( 1 )\n    cnt = 0\n    while ( q ) :\n        t = q.popleft ( )\n        if ( t <= N ) :\n            cnt = cnt + 1\n            q.append ( t * 10 )\n            q.append ( t * 10 + 1 )\n    return cnt"}
{"source": "java", "target": "cpp", "source_program": " static int countOfBinaryNumberLessThanN ( int N ) {\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 1 ) ;\n  int cnt = 0 ;\n  int t ;\n  while ( q . size ( ) > 0 ) {\n    t = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( t <= N ) {\n      cnt ++ ;\n      q . add ( t * 10 ) ;\n      q . add ( t * 10 + 1 ) ;\n    }\n  }\n  return cnt ;\n}", "target_program": " int countOfBinaryNumberLessThanN ( int N ) {\n  queue < int > q;\n  q . push ( 1 );\n  int cnt = 0;\n  int t;\n  while ( ! q . empty ( ) ) {\n    t = q . front ( );\n    q . pop ( );\n    if ( t <= N ) {\n      cnt ++;\n      q . push ( t * 10 );\n      q . push ( t * 10 + 1 );\n    }\n  }\n  return cnt;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countOfBinaryNumberLessThanN ( int N ) {\n  queue < int > q;\n  q . push ( 1 );\n  int cnt = 0;\n  int t;\n  while ( ! q . empty ( ) ) {\n    t = q . front ( );\n    q . pop ( );\n    if ( t <= N ) {\n      cnt ++;\n      q . push ( t * 10 );\n      q . push ( t * 10 + 1 );\n    }\n  }\n  return cnt;\n}", "target_program": " static int countOfBinaryNumberLessThanN ( int N ) {\n  Queue < Integer > q = new LinkedList < > ( ) ;\n  q . add ( 1 ) ;\n  int cnt = 0 ;\n  int t ;\n  while ( q . size ( ) > 0 ) {\n    t = q . peek ( ) ;\n    q . remove ( ) ;\n    if ( t <= N ) {\n      cnt ++ ;\n      q . add ( t * 10 ) ;\n      q . add ( t * 10 + 1 ) ;\n    }\n  }\n  return cnt ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countOfBinaryNumberLessThanN ( int N ) {\n  queue < int > q;\n  q . push ( 1 );\n  int cnt = 0;\n  int t;\n  while ( ! q . empty ( ) ) {\n    t = q . front ( );\n    q . pop ( );\n    if ( t <= N ) {\n      cnt ++;\n      q . push ( t * 10 );\n      q . push ( t * 10 + 1 );\n    }\n  }\n  return cnt;\n}", "target_program": " def countOfBinaryNumberLessThanN ( N ) :\n    q = deque ( )\n    q.append ( 1 )\n    cnt = 0\n    while ( q ) :\n        t = q.popleft ( )\n        if ( t <= N ) :\n            cnt = cnt + 1\n            q.append ( t * 10 )\n            q.append ( t * 10 + 1 )\n    return cnt"}
{"source": "python", "target": "java", "source_program": " def decimalToBinary ( num , k_prec ) :\n    binary = \"\"\n    Integral = int ( num )\n    fractional = num - Integral\n    while ( Integral ) :\n        rem = Integral % 2\n        binary += str ( rem ) ;\n        Integral //= 2\n    binary = binary [ : : - 1 ]\n    binary += '.'\n    while ( k_prec ) :\n        fractional *= 2\n        fract_bit = int ( fractional )\n        if ( fract_bit == 1 ) :\n            fractional -= fract_bit\n            binary += '1'\n        else :\n            binary += '0'\n        k_prec -= 1\n    return binary", "target_program": " static String decimalToBinary ( double num , int k_prec ) {\n  String binary = \"\" ;\n  int Integral = ( int ) num ;\n  double fractional = num - Integral ;\n  while ( Integral > 0 ) {\n    int rem = Integral % 2 ;\n    binary += ( ( char ) ( rem + '0' ) ) ;\n    Integral /= 2 ;\n  }\n  binary = reverse ( binary ) ;\n  binary += ( '.' ) ;\n  while ( k_prec -- > 0 ) {\n    fractional *= 2 ;\n    int fract_bit = ( int ) fractional ;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit ;\n      binary += ( char ) ( 1 + '0' ) ;\n    }\n    else {\n      binary += ( char ) ( 0 + '0' ) ;\n    }\n  }\n  return binary ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def decimalToBinary ( num , k_prec ) :\n    binary = \"\"\n    Integral = int ( num )\n    fractional = num - Integral\n    while ( Integral ) :\n        rem = Integral % 2\n        binary += str ( rem ) ;\n        Integral //= 2\n    binary = binary [ : : - 1 ]\n    binary += '.'\n    while ( k_prec ) :\n        fractional *= 2\n        fract_bit = int ( fractional )\n        if ( fract_bit == 1 ) :\n            fractional -= fract_bit\n            binary += '1'\n        else :\n            binary += '0'\n        k_prec -= 1\n    return binary", "target_program": " string decimalToBinary ( double num, int k_prec ) {\n  string binary = \"\";\n  int Integral = num;\n  double fractional = num - Integral;\n  while ( Integral ) {\n    int rem = Integral % 2;\n    binary . push_back ( rem + '0' );\n    Integral /= 2;\n  }\n  reverse ( binary . begin ( ), binary . end ( ) );\n  binary . push_back ( '.' );\n  while ( k_prec -- ) {\n    fractional *= 2;\n    int fract_bit = fractional;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit;\n      binary . push_back ( 1 + '0' );\n    }\n    else binary . push_back ( 0 + '0' );\n  }\n  return binary;\n}"}
{"source": "java", "target": "python", "source_program": " static String decimalToBinary ( double num , int k_prec ) {\n  String binary = \"\" ;\n  int Integral = ( int ) num ;\n  double fractional = num - Integral ;\n  while ( Integral > 0 ) {\n    int rem = Integral % 2 ;\n    binary += ( ( char ) ( rem + '0' ) ) ;\n    Integral /= 2 ;\n  }\n  binary = reverse ( binary ) ;\n  binary += ( '.' ) ;\n  while ( k_prec -- > 0 ) {\n    fractional *= 2 ;\n    int fract_bit = ( int ) fractional ;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit ;\n      binary += ( char ) ( 1 + '0' ) ;\n    }\n    else {\n      binary += ( char ) ( 0 + '0' ) ;\n    }\n  }\n  return binary ;\n}", "target_program": " def decimalToBinary ( num , k_prec ) :\n    binary = \"\"\n    Integral = int ( num )\n    fractional = num - Integral\n    while ( Integral ) :\n        rem = Integral % 2\n        binary += str ( rem ) ;\n        Integral //= 2\n    binary = binary [ : : - 1 ]\n    binary += '.'\n    while ( k_prec ) :\n        fractional *= 2\n        fract_bit = int ( fractional )\n        if ( fract_bit == 1 ) :\n            fractional -= fract_bit\n            binary += '1'\n        else :\n            binary += '0'\n        k_prec -= 1\n    return binary"}
{"source": "java", "target": "cpp", "source_program": " static String decimalToBinary ( double num , int k_prec ) {\n  String binary = \"\" ;\n  int Integral = ( int ) num ;\n  double fractional = num - Integral ;\n  while ( Integral > 0 ) {\n    int rem = Integral % 2 ;\n    binary += ( ( char ) ( rem + '0' ) ) ;\n    Integral /= 2 ;\n  }\n  binary = reverse ( binary ) ;\n  binary += ( '.' ) ;\n  while ( k_prec -- > 0 ) {\n    fractional *= 2 ;\n    int fract_bit = ( int ) fractional ;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit ;\n      binary += ( char ) ( 1 + '0' ) ;\n    }\n    else {\n      binary += ( char ) ( 0 + '0' ) ;\n    }\n  }\n  return binary ;\n}", "target_program": " string decimalToBinary ( double num, int k_prec ) {\n  string binary = \"\";\n  int Integral = num;\n  double fractional = num - Integral;\n  while ( Integral ) {\n    int rem = Integral % 2;\n    binary . push_back ( rem + '0' );\n    Integral /= 2;\n  }\n  reverse ( binary . begin ( ), binary . end ( ) );\n  binary . push_back ( '.' );\n  while ( k_prec -- ) {\n    fractional *= 2;\n    int fract_bit = fractional;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit;\n      binary . push_back ( 1 + '0' );\n    }\n    else binary . push_back ( 0 + '0' );\n  }\n  return binary;\n}"}
{"source": "cpp", "target": "java", "source_program": " string decimalToBinary ( double num, int k_prec ) {\n  string binary = \"\";\n  int Integral = num;\n  double fractional = num - Integral;\n  while ( Integral ) {\n    int rem = Integral % 2;\n    binary . push_back ( rem + '0' );\n    Integral /= 2;\n  }\n  reverse ( binary . begin ( ), binary . end ( ) );\n  binary . push_back ( '.' );\n  while ( k_prec -- ) {\n    fractional *= 2;\n    int fract_bit = fractional;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit;\n      binary . push_back ( 1 + '0' );\n    }\n    else binary . push_back ( 0 + '0' );\n  }\n  return binary;\n}", "target_program": " static String decimalToBinary ( double num , int k_prec ) {\n  String binary = \"\" ;\n  int Integral = ( int ) num ;\n  double fractional = num - Integral ;\n  while ( Integral > 0 ) {\n    int rem = Integral % 2 ;\n    binary += ( ( char ) ( rem + '0' ) ) ;\n    Integral /= 2 ;\n  }\n  binary = reverse ( binary ) ;\n  binary += ( '.' ) ;\n  while ( k_prec -- > 0 ) {\n    fractional *= 2 ;\n    int fract_bit = ( int ) fractional ;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit ;\n      binary += ( char ) ( 1 + '0' ) ;\n    }\n    else {\n      binary += ( char ) ( 0 + '0' ) ;\n    }\n  }\n  return binary ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string decimalToBinary ( double num, int k_prec ) {\n  string binary = \"\";\n  int Integral = num;\n  double fractional = num - Integral;\n  while ( Integral ) {\n    int rem = Integral % 2;\n    binary . push_back ( rem + '0' );\n    Integral /= 2;\n  }\n  reverse ( binary . begin ( ), binary . end ( ) );\n  binary . push_back ( '.' );\n  while ( k_prec -- ) {\n    fractional *= 2;\n    int fract_bit = fractional;\n    if ( fract_bit == 1 ) {\n      fractional -= fract_bit;\n      binary . push_back ( 1 + '0' );\n    }\n    else binary . push_back ( 0 + '0' );\n  }\n  return binary;\n}", "target_program": " def decimalToBinary ( num , k_prec ) :\n    binary = \"\"\n    Integral = int ( num )\n    fractional = num - Integral\n    while ( Integral ) :\n        rem = Integral % 2\n        binary += str ( rem ) ;\n        Integral //= 2\n    binary = binary [ : : - 1 ]\n    binary += '.'\n    while ( k_prec ) :\n        fractional *= 2\n        fract_bit = int ( fractional )\n        if ( fract_bit == 1 ) :\n            fractional -= fract_bit\n            binary += '1'\n        else :\n            binary += '0'\n        k_prec -= 1\n    return binary"}
{"source": "python", "target": "java", "source_program": " def maximumZeros ( arr , n , k ) :\n    global MAX5\n    subset = [ [ - 1 ] * ( MAX5 + 5 ) for _ in range ( k + 1 ) ]\n    subset [ 0 ] [ 0 ] = 0\n    for p in arr :\n        pw2 , pw5 = 0 , 0\n        while not p % 2 :\n            pw2 += 1\n            p //= 2\n        while not p % 5 :\n            pw5 += 1\n            p //= 5\n        for i in range ( k - 1 , - 1 , - 1 ) :\n            for j in range ( MAX5 ) :\n                if subset [ i ] [ j ] != - 1 :\n                    subset [ i + 1 ] [ j + pw5 ] = ( max ( subset [ i + 1 ] [ j + pw5 ] , ( subset [ i ] [ j ] + pw2 ) ) )\n    ans = 0\n    for i in range ( MAX5 ) :\n        ans = max ( ans , min ( i , subset [ k ] [ i ] ) )\n    return ans", "target_program": " static int maximumZeros ( int arr [ ] , int n , int k ) {\n  int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;\n  for ( int [ ] row : subset ) {\n    Arrays . fill ( row , - 1 ) ;\n  }\n  subset [ 0 ] [ 0 ] = 0 ;\n  for ( int p = 0 ;\n  p < n ;\n  p ++ ) {\n    int pw2 = 0 , pw5 = 0 ;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++ ;\n      arr [ p ] /= 2 ;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++ ;\n      arr [ p ] /= 5 ;\n    }\n    for ( int i = k - 1 ;\n    i >= 0 ;\n    i -- ) {\n      for ( int j = 0 ;\n      j < MAX5 ;\n      j ++ ) {\n        if ( subset [ i ] [ j ] != - 1 ) {\n          subset [ i + 1 ] [ j + pw5 ] = Math . max ( subset [ i + 1 ] [ j + pw5 ] , subset [ i ] [ j ] + pw2 ) ;\n        }\n      }\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < MAX5 ;\n  i ++ ) {\n    ans = Math . max ( ans , Math . min ( i , subset [ k ] [ i ] ) ) ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumZeros ( arr , n , k ) :\n    global MAX5\n    subset = [ [ - 1 ] * ( MAX5 + 5 ) for _ in range ( k + 1 ) ]\n    subset [ 0 ] [ 0 ] = 0\n    for p in arr :\n        pw2 , pw5 = 0 , 0\n        while not p % 2 :\n            pw2 += 1\n            p //= 2\n        while not p % 5 :\n            pw5 += 1\n            p //= 5\n        for i in range ( k - 1 , - 1 , - 1 ) :\n            for j in range ( MAX5 ) :\n                if subset [ i ] [ j ] != - 1 :\n                    subset [ i + 1 ] [ j + pw5 ] = ( max ( subset [ i + 1 ] [ j + pw5 ] , ( subset [ i ] [ j ] + pw2 ) ) )\n    ans = 0\n    for i in range ( MAX5 ) :\n        ans = max ( ans , min ( i , subset [ k ] [ i ] ) )\n    return ans", "target_program": " int maximumZeros ( int * arr, int n, int k ) {\n  int subset [ k + 1 ] [ MAX5 + 5 ];\n  memset ( subset, - 1, sizeof ( subset ) );\n  subset [ 0 ] [ 0 ] = 0;\n  for ( int p = 0;\n  p < n;\n  p ++ ) {\n    int pw2 = 0, pw5 = 0;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++;\n      arr [ p ] /= 2;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++;\n      arr [ p ] /= 5;\n    }\n    for ( int i = k - 1;\n    i >= 0;\n    i -- ) for ( int j = 0;\n    j < MAX5;\n    j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw5 ] = max ( subset [ i + 1 ] [ j + pw5 ], subset [ i ] [ j ] + pw2 );\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i < MAX5;\n  i ++ ) ans = max ( ans, min ( i, subset [ k ] [ i ] ) );\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumZeros ( int arr [ ] , int n , int k ) {\n  int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;\n  for ( int [ ] row : subset ) {\n    Arrays . fill ( row , - 1 ) ;\n  }\n  subset [ 0 ] [ 0 ] = 0 ;\n  for ( int p = 0 ;\n  p < n ;\n  p ++ ) {\n    int pw2 = 0 , pw5 = 0 ;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++ ;\n      arr [ p ] /= 2 ;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++ ;\n      arr [ p ] /= 5 ;\n    }\n    for ( int i = k - 1 ;\n    i >= 0 ;\n    i -- ) {\n      for ( int j = 0 ;\n      j < MAX5 ;\n      j ++ ) {\n        if ( subset [ i ] [ j ] != - 1 ) {\n          subset [ i + 1 ] [ j + pw5 ] = Math . max ( subset [ i + 1 ] [ j + pw5 ] , subset [ i ] [ j ] + pw2 ) ;\n        }\n      }\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < MAX5 ;\n  i ++ ) {\n    ans = Math . max ( ans , Math . min ( i , subset [ k ] [ i ] ) ) ;\n  }\n  return ans ;\n}", "target_program": " def maximumZeros ( arr , n , k ) :\n    global MAX5\n    subset = [ [ - 1 ] * ( MAX5 + 5 ) for _ in range ( k + 1 ) ]\n    subset [ 0 ] [ 0 ] = 0\n    for p in arr :\n        pw2 , pw5 = 0 , 0\n        while not p % 2 :\n            pw2 += 1\n            p //= 2\n        while not p % 5 :\n            pw5 += 1\n            p //= 5\n        for i in range ( k - 1 , - 1 , - 1 ) :\n            for j in range ( MAX5 ) :\n                if subset [ i ] [ j ] != - 1 :\n                    subset [ i + 1 ] [ j + pw5 ] = ( max ( subset [ i + 1 ] [ j + pw5 ] , ( subset [ i ] [ j ] + pw2 ) ) )\n    ans = 0\n    for i in range ( MAX5 ) :\n        ans = max ( ans , min ( i , subset [ k ] [ i ] ) )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int maximumZeros ( int arr [ ] , int n , int k ) {\n  int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;\n  for ( int [ ] row : subset ) {\n    Arrays . fill ( row , - 1 ) ;\n  }\n  subset [ 0 ] [ 0 ] = 0 ;\n  for ( int p = 0 ;\n  p < n ;\n  p ++ ) {\n    int pw2 = 0 , pw5 = 0 ;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++ ;\n      arr [ p ] /= 2 ;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++ ;\n      arr [ p ] /= 5 ;\n    }\n    for ( int i = k - 1 ;\n    i >= 0 ;\n    i -- ) {\n      for ( int j = 0 ;\n      j < MAX5 ;\n      j ++ ) {\n        if ( subset [ i ] [ j ] != - 1 ) {\n          subset [ i + 1 ] [ j + pw5 ] = Math . max ( subset [ i + 1 ] [ j + pw5 ] , subset [ i ] [ j ] + pw2 ) ;\n        }\n      }\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < MAX5 ;\n  i ++ ) {\n    ans = Math . max ( ans , Math . min ( i , subset [ k ] [ i ] ) ) ;\n  }\n  return ans ;\n}", "target_program": " int maximumZeros ( int * arr, int n, int k ) {\n  int subset [ k + 1 ] [ MAX5 + 5 ];\n  memset ( subset, - 1, sizeof ( subset ) );\n  subset [ 0 ] [ 0 ] = 0;\n  for ( int p = 0;\n  p < n;\n  p ++ ) {\n    int pw2 = 0, pw5 = 0;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++;\n      arr [ p ] /= 2;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++;\n      arr [ p ] /= 5;\n    }\n    for ( int i = k - 1;\n    i >= 0;\n    i -- ) for ( int j = 0;\n    j < MAX5;\n    j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw5 ] = max ( subset [ i + 1 ] [ j + pw5 ], subset [ i ] [ j ] + pw2 );\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i < MAX5;\n  i ++ ) ans = max ( ans, min ( i, subset [ k ] [ i ] ) );\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumZeros ( int * arr, int n, int k ) {\n  int subset [ k + 1 ] [ MAX5 + 5 ];\n  memset ( subset, - 1, sizeof ( subset ) );\n  subset [ 0 ] [ 0 ] = 0;\n  for ( int p = 0;\n  p < n;\n  p ++ ) {\n    int pw2 = 0, pw5 = 0;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++;\n      arr [ p ] /= 2;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++;\n      arr [ p ] /= 5;\n    }\n    for ( int i = k - 1;\n    i >= 0;\n    i -- ) for ( int j = 0;\n    j < MAX5;\n    j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw5 ] = max ( subset [ i + 1 ] [ j + pw5 ], subset [ i ] [ j ] + pw2 );\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i < MAX5;\n  i ++ ) ans = max ( ans, min ( i, subset [ k ] [ i ] ) );\n  return ans;\n}", "target_program": " static int maximumZeros ( int arr [ ] , int n , int k ) {\n  int subset [ ] [ ] = new int [ k + 1 ] [ MAX5 + 5 ] ;\n  for ( int [ ] row : subset ) {\n    Arrays . fill ( row , - 1 ) ;\n  }\n  subset [ 0 ] [ 0 ] = 0 ;\n  for ( int p = 0 ;\n  p < n ;\n  p ++ ) {\n    int pw2 = 0 , pw5 = 0 ;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++ ;\n      arr [ p ] /= 2 ;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++ ;\n      arr [ p ] /= 5 ;\n    }\n    for ( int i = k - 1 ;\n    i >= 0 ;\n    i -- ) {\n      for ( int j = 0 ;\n      j < MAX5 ;\n      j ++ ) {\n        if ( subset [ i ] [ j ] != - 1 ) {\n          subset [ i + 1 ] [ j + pw5 ] = Math . max ( subset [ i + 1 ] [ j + pw5 ] , subset [ i ] [ j ] + pw2 ) ;\n        }\n      }\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < MAX5 ;\n  i ++ ) {\n    ans = Math . max ( ans , Math . min ( i , subset [ k ] [ i ] ) ) ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumZeros ( int * arr, int n, int k ) {\n  int subset [ k + 1 ] [ MAX5 + 5 ];\n  memset ( subset, - 1, sizeof ( subset ) );\n  subset [ 0 ] [ 0 ] = 0;\n  for ( int p = 0;\n  p < n;\n  p ++ ) {\n    int pw2 = 0, pw5 = 0;\n    while ( arr [ p ] % 2 == 0 ) {\n      pw2 ++;\n      arr [ p ] /= 2;\n    }\n    while ( arr [ p ] % 5 == 0 ) {\n      pw5 ++;\n      arr [ p ] /= 5;\n    }\n    for ( int i = k - 1;\n    i >= 0;\n    i -- ) for ( int j = 0;\n    j < MAX5;\n    j ++ ) if ( subset [ i ] [ j ] != - 1 ) subset [ i + 1 ] [ j + pw5 ] = max ( subset [ i + 1 ] [ j + pw5 ], subset [ i ] [ j ] + pw2 );\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i < MAX5;\n  i ++ ) ans = max ( ans, min ( i, subset [ k ] [ i ] ) );\n  return ans;\n}", "target_program": " def maximumZeros ( arr , n , k ) :\n    global MAX5\n    subset = [ [ - 1 ] * ( MAX5 + 5 ) for _ in range ( k + 1 ) ]\n    subset [ 0 ] [ 0 ] = 0\n    for p in arr :\n        pw2 , pw5 = 0 , 0\n        while not p % 2 :\n            pw2 += 1\n            p //= 2\n        while not p % 5 :\n            pw5 += 1\n            p //= 5\n        for i in range ( k - 1 , - 1 , - 1 ) :\n            for j in range ( MAX5 ) :\n                if subset [ i ] [ j ] != - 1 :\n                    subset [ i + 1 ] [ j + pw5 ] = ( max ( subset [ i + 1 ] [ j + pw5 ] , ( subset [ i ] [ j ] + pw2 ) ) )\n    ans = 0\n    for i in range ( MAX5 ) :\n        ans = max ( ans , min ( i , subset [ k ] [ i ] ) )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def search ( arr , l , h , key ) :\n    if l > h :\n        return - 1\n    mid = ( l + h ) // 2\n    if arr [ mid ] == key :\n        return mid\n    if arr [ l ] <= arr [ mid ] :\n        if key >= arr [ l ] and key <= arr [ mid ] :\n            return search ( arr , l , mid - 1 , key )\n        return search ( arr , mid + 1 , h , key )\n    if key >= arr [ mid ] and key <= arr [ h ] :\n        return search ( a , mid + 1 , h , key )\n    return search ( arr , l , mid - 1 , key )", "target_program": " static int search ( int arr [ ] , int l , int h , int key ) {\n  if ( l > h ) return - 1 ;\n  int mid = ( l + h ) / 2 ;\n  if ( arr [ mid ] == key ) return mid ;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ;\n    return search ( arr , mid + 1 , h , key ) ;\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ;\n  return search ( arr , l , mid - 1 , key ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , l , h , key ) :\n    if l > h :\n        return - 1\n    mid = ( l + h ) // 2\n    if arr [ mid ] == key :\n        return mid\n    if arr [ l ] <= arr [ mid ] :\n        if key >= arr [ l ] and key <= arr [ mid ] :\n            return search ( arr , l , mid - 1 , key )\n        return search ( arr , mid + 1 , h , key )\n    if key >= arr [ mid ] and key <= arr [ h ] :\n        return search ( a , mid + 1 , h , key )\n    return search ( arr , l , mid - 1 , key )", "target_program": " int search ( int arr [ ], int l, int h, int key ) {\n  if ( l > h ) return - 1;\n  int mid = ( l + h ) / 2;\n  if ( arr [ mid ] == key ) return mid;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr, l, mid - 1, key );\n    return search ( arr, mid + 1, h, key );\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr, mid + 1, h, key );\n  return search ( arr, l, mid - 1, key );\n}"}
{"source": "java", "target": "python", "source_program": " static int search ( int arr [ ] , int l , int h , int key ) {\n  if ( l > h ) return - 1 ;\n  int mid = ( l + h ) / 2 ;\n  if ( arr [ mid ] == key ) return mid ;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ;\n    return search ( arr , mid + 1 , h , key ) ;\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ;\n  return search ( arr , l , mid - 1 , key ) ;\n}", "target_program": " def search ( arr , l , h , key ) :\n    if l > h :\n        return - 1\n    mid = ( l + h ) // 2\n    if arr [ mid ] == key :\n        return mid\n    if arr [ l ] <= arr [ mid ] :\n        if key >= arr [ l ] and key <= arr [ mid ] :\n            return search ( arr , l , mid - 1 , key )\n        return search ( arr , mid + 1 , h , key )\n    if key >= arr [ mid ] and key <= arr [ h ] :\n        return search ( a , mid + 1 , h , key )\n    return search ( arr , l , mid - 1 , key )"}
{"source": "java", "target": "cpp", "source_program": " static int search ( int arr [ ] , int l , int h , int key ) {\n  if ( l > h ) return - 1 ;\n  int mid = ( l + h ) / 2 ;\n  if ( arr [ mid ] == key ) return mid ;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ;\n    return search ( arr , mid + 1 , h , key ) ;\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ;\n  return search ( arr , l , mid - 1 , key ) ;\n}", "target_program": " int search ( int arr [ ], int l, int h, int key ) {\n  if ( l > h ) return - 1;\n  int mid = ( l + h ) / 2;\n  if ( arr [ mid ] == key ) return mid;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr, l, mid - 1, key );\n    return search ( arr, mid + 1, h, key );\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr, mid + 1, h, key );\n  return search ( arr, l, mid - 1, key );\n}"}
{"source": "cpp", "target": "java", "source_program": " int search ( int arr [ ], int l, int h, int key ) {\n  if ( l > h ) return - 1;\n  int mid = ( l + h ) / 2;\n  if ( arr [ mid ] == key ) return mid;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr, l, mid - 1, key );\n    return search ( arr, mid + 1, h, key );\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr, mid + 1, h, key );\n  return search ( arr, l, mid - 1, key );\n}", "target_program": " static int search ( int arr [ ] , int l , int h , int key ) {\n  if ( l > h ) return - 1 ;\n  int mid = ( l + h ) / 2 ;\n  if ( arr [ mid ] == key ) return mid ;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr , l , mid - 1 , key ) ;\n    return search ( arr , mid + 1 , h , key ) ;\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr , mid + 1 , h , key ) ;\n  return search ( arr , l , mid - 1 , key ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int search ( int arr [ ], int l, int h, int key ) {\n  if ( l > h ) return - 1;\n  int mid = ( l + h ) / 2;\n  if ( arr [ mid ] == key ) return mid;\n  if ( arr [ l ] <= arr [ mid ] ) {\n    if ( key >= arr [ l ] && key <= arr [ mid ] ) return search ( arr, l, mid - 1, key );\n    return search ( arr, mid + 1, h, key );\n  }\n  if ( key >= arr [ mid ] && key <= arr [ h ] ) return search ( arr, mid + 1, h, key );\n  return search ( arr, l, mid - 1, key );\n}", "target_program": " def search ( arr , l , h , key ) :\n    if l > h :\n        return - 1\n    mid = ( l + h ) // 2\n    if arr [ mid ] == key :\n        return mid\n    if arr [ l ] <= arr [ mid ] :\n        if key >= arr [ l ] and key <= arr [ mid ] :\n            return search ( arr , l , mid - 1 , key )\n        return search ( arr , mid + 1 , h , key )\n    if key >= arr [ mid ] and key <= arr [ h ] :\n        return search ( a , mid + 1 , h , key )\n    return search ( arr , l , mid - 1 , key )"}
{"source": "python", "target": "java", "source_program": " def area_of_segment ( radius , angle ) :\n    area_of_sector = pi *\n        ( radius * radius )\n        * ( angle / 360 )\n    area_of_triangle = 1 / 2 *\n        ( radius * radius ) *\n        math.sin ( ( angle * pi ) / 180 )\n    return area_of_sector - area_of_triangle ;", "target_program": " static float area_of_segment ( float radius , float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 ) ;\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * ( float ) Math . sin ( ( angle * pi ) / 180 ) ;\n  return area_of_sector - area_of_triangle ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def area_of_segment ( radius , angle ) :\n    area_of_sector = pi *\n        ( radius * radius )\n        * ( angle / 360 )\n    area_of_triangle = 1 / 2 *\n        ( radius * radius ) *\n        math.sin ( ( angle * pi ) / 180 )\n    return area_of_sector - area_of_triangle ;", "target_program": " float area_of_segment ( float radius, float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 );\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * sin ( ( angle * pi ) / 180 );\n  return area_of_sector - area_of_triangle;\n}"}
{"source": "java", "target": "python", "source_program": " static float area_of_segment ( float radius , float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 ) ;\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * ( float ) Math . sin ( ( angle * pi ) / 180 ) ;\n  return area_of_sector - area_of_triangle ;\n}", "target_program": " def area_of_segment ( radius , angle ) :\n    area_of_sector = pi *\n        ( radius * radius )\n        * ( angle / 360 )\n    area_of_triangle = 1 / 2 *\n        ( radius * radius ) *\n        math.sin ( ( angle * pi ) / 180 )\n    return area_of_sector - area_of_triangle ;"}
{"source": "java", "target": "cpp", "source_program": " static float area_of_segment ( float radius , float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 ) ;\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * ( float ) Math . sin ( ( angle * pi ) / 180 ) ;\n  return area_of_sector - area_of_triangle ;\n}", "target_program": " float area_of_segment ( float radius, float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 );\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * sin ( ( angle * pi ) / 180 );\n  return area_of_sector - area_of_triangle;\n}"}
{"source": "cpp", "target": "java", "source_program": " float area_of_segment ( float radius, float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 );\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * sin ( ( angle * pi ) / 180 );\n  return area_of_sector - area_of_triangle;\n}", "target_program": " static float area_of_segment ( float radius , float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 ) ;\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * ( float ) Math . sin ( ( angle * pi ) / 180 ) ;\n  return area_of_sector - area_of_triangle ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float area_of_segment ( float radius, float angle ) {\n  float area_of_sector = pi * ( radius * radius ) * ( angle / 360 );\n  float area_of_triangle = ( float ) 1 / 2 * ( radius * radius ) * sin ( ( angle * pi ) / 180 );\n  return area_of_sector - area_of_triangle;\n}", "target_program": " def area_of_segment ( radius , angle ) :\n    area_of_sector = pi *\n        ( radius * radius )\n        * ( angle / 360 )\n    area_of_triangle = 1 / 2 *\n        ( radius * radius ) *\n        math.sin ( ( angle * pi ) / 180 )\n    return area_of_sector - area_of_triangle ;"}
{"source": "python", "target": "java", "source_program": " def printSmall ( arr , n , k ) :\n    for i in range ( k , n ) :\n        max_var = arr [ k - 1 ]\n        pos = k - 1\n        for j in range ( k - 2 , - 1 , - 1 ) :\n            if ( arr [ j ] > max_var ) :\n                max_var = arr [ j ]\n                pos = j\n        if ( max_var > arr [ i ] ) :\n            j = pos\n            while ( j < k - 1 ) :\n                arr [ j ] = arr [ j + 1 ]\n                j += 1\n            arr [ k - 1 ] = arr [ i ]\n    for i in range ( 0 , k ) :\n        print ( arr [ i ] , end = \" \" )", "target_program": " public static void printSmall ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < n ;\n  ++ i ) {\n    int max_var = arr [ k - 1 ] ;\n    int pos = k - 1 ;\n    for ( int j = k - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ] ;\n        pos = j ;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos ;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ] ;\n        j ++ ;\n      }\n      arr [ k - 1 ] = arr [ i ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSmall ( arr , n , k ) :\n    for i in range ( k , n ) :\n        max_var = arr [ k - 1 ]\n        pos = k - 1\n        for j in range ( k - 2 , - 1 , - 1 ) :\n            if ( arr [ j ] > max_var ) :\n                max_var = arr [ j ]\n                pos = j\n        if ( max_var > arr [ i ] ) :\n            j = pos\n            while ( j < k - 1 ) :\n                arr [ j ] = arr [ j + 1 ]\n                j += 1\n            arr [ k - 1 ] = arr [ i ]\n    for i in range ( 0 , k ) :\n        print ( arr [ i ] , end = \" \" )", "target_program": " void printSmall ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < n;\n  ++ i ) {\n    int max_var = arr [ k - 1 ];\n    int pos = k - 1;\n    for ( int j = k - 2;\n    j >= 0;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ];\n        pos = j;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ];\n        j ++;\n      }\n      arr [ k - 1 ] = arr [ i ];\n    }\n  }\n  for ( int i = 0;\n  i < k;\n  i ++ ) cout << arr [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " public static void printSmall ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < n ;\n  ++ i ) {\n    int max_var = arr [ k - 1 ] ;\n    int pos = k - 1 ;\n    for ( int j = k - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ] ;\n        pos = j ;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos ;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ] ;\n        j ++ ;\n      }\n      arr [ k - 1 ] = arr [ i ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}", "target_program": " def printSmall ( arr , n , k ) :\n    for i in range ( k , n ) :\n        max_var = arr [ k - 1 ]\n        pos = k - 1\n        for j in range ( k - 2 , - 1 , - 1 ) :\n            if ( arr [ j ] > max_var ) :\n                max_var = arr [ j ]\n                pos = j\n        if ( max_var > arr [ i ] ) :\n            j = pos\n            while ( j < k - 1 ) :\n                arr [ j ] = arr [ j + 1 ]\n                j += 1\n            arr [ k - 1 ] = arr [ i ]\n    for i in range ( 0 , k ) :\n        print ( arr [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " public static void printSmall ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < n ;\n  ++ i ) {\n    int max_var = arr [ k - 1 ] ;\n    int pos = k - 1 ;\n    for ( int j = k - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ] ;\n        pos = j ;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos ;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ] ;\n        j ++ ;\n      }\n      arr [ k - 1 ] = arr [ i ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}", "target_program": " void printSmall ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < n;\n  ++ i ) {\n    int max_var = arr [ k - 1 ];\n    int pos = k - 1;\n    for ( int j = k - 2;\n    j >= 0;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ];\n        pos = j;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ];\n        j ++;\n      }\n      arr [ k - 1 ] = arr [ i ];\n    }\n  }\n  for ( int i = 0;\n  i < k;\n  i ++ ) cout << arr [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSmall ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < n;\n  ++ i ) {\n    int max_var = arr [ k - 1 ];\n    int pos = k - 1;\n    for ( int j = k - 2;\n    j >= 0;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ];\n        pos = j;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ];\n        j ++;\n      }\n      arr [ k - 1 ] = arr [ i ];\n    }\n  }\n  for ( int i = 0;\n  i < k;\n  i ++ ) cout << arr [ i ] << \" \";\n}", "target_program": " public static void printSmall ( int arr [ ] , int n , int k ) {\n  for ( int i = k ;\n  i < n ;\n  ++ i ) {\n    int max_var = arr [ k - 1 ] ;\n    int pos = k - 1 ;\n    for ( int j = k - 2 ;\n    j >= 0 ;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ] ;\n        pos = j ;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos ;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ] ;\n        j ++ ;\n      }\n      arr [ k - 1 ] = arr [ i ] ;\n    }\n  }\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSmall ( int arr [ ], int n, int k ) {\n  for ( int i = k;\n  i < n;\n  ++ i ) {\n    int max_var = arr [ k - 1 ];\n    int pos = k - 1;\n    for ( int j = k - 2;\n    j >= 0;\n    j -- ) {\n      if ( arr [ j ] > max_var ) {\n        max_var = arr [ j ];\n        pos = j;\n      }\n    }\n    if ( max_var > arr [ i ] ) {\n      int j = pos;\n      while ( j < k - 1 ) {\n        arr [ j ] = arr [ j + 1 ];\n        j ++;\n      }\n      arr [ k - 1 ] = arr [ i ];\n    }\n  }\n  for ( int i = 0;\n  i < k;\n  i ++ ) cout << arr [ i ] << \" \";\n}", "target_program": " def printSmall ( arr , n , k ) :\n    for i in range ( k , n ) :\n        max_var = arr [ k - 1 ]\n        pos = k - 1\n        for j in range ( k - 2 , - 1 , - 1 ) :\n            if ( arr [ j ] > max_var ) :\n                max_var = arr [ j ]\n                pos = j\n        if ( max_var > arr [ i ] ) :\n            j = pos\n            while ( j < k - 1 ) :\n                arr [ j ] = arr [ j + 1 ]\n                j += 1\n            arr [ k - 1 ] = arr [ i ]\n    for i in range ( 0 , k ) :\n        print ( arr [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def nonFibonacci ( n ) :\n    prevPrev = 1\n    prev = 2\n    curr = 3\n    while n > 0 :\n        prevPrev = prev\n        prev = curr\n        curr = prevPrev + prev\n        n = n - ( curr - prev - 1 )\n    n = n + ( curr - prev - 1 )\n    return prev + n", "target_program": " static int nonFibonacci ( int n ) {\n  int prevPrev = 1 , prev = 2 , curr = 3 ;\n  while ( n > 0 ) {\n    prevPrev = prev ;\n    prev = curr ;\n    curr = prevPrev + prev ;\n    n = n - ( curr - prev - 1 ) ;\n  }\n  n = n + ( curr - prev - 1 ) ;\n  return prev + n ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def nonFibonacci ( n ) :\n    prevPrev = 1\n    prev = 2\n    curr = 3\n    while n > 0 :\n        prevPrev = prev\n        prev = curr\n        curr = prevPrev + prev\n        n = n - ( curr - prev - 1 )\n    n = n + ( curr - prev - 1 )\n    return prev + n", "target_program": " int nonFibonacci ( int n ) {\n  int prevPrev = 1, prev = 2, curr = 3;\n  while ( n > 0 ) {\n    prevPrev = prev;\n    prev = curr;\n    curr = prevPrev + prev;\n    n = n - ( curr - prev - 1 );\n  }\n  n = n + ( curr - prev - 1 );\n  return prev + n;\n}"}
{"source": "java", "target": "python", "source_program": " static int nonFibonacci ( int n ) {\n  int prevPrev = 1 , prev = 2 , curr = 3 ;\n  while ( n > 0 ) {\n    prevPrev = prev ;\n    prev = curr ;\n    curr = prevPrev + prev ;\n    n = n - ( curr - prev - 1 ) ;\n  }\n  n = n + ( curr - prev - 1 ) ;\n  return prev + n ;\n}", "target_program": " def nonFibonacci ( n ) :\n    prevPrev = 1\n    prev = 2\n    curr = 3\n    while n > 0 :\n        prevPrev = prev\n        prev = curr\n        curr = prevPrev + prev\n        n = n - ( curr - prev - 1 )\n    n = n + ( curr - prev - 1 )\n    return prev + n"}
{"source": "java", "target": "cpp", "source_program": " static int nonFibonacci ( int n ) {\n  int prevPrev = 1 , prev = 2 , curr = 3 ;\n  while ( n > 0 ) {\n    prevPrev = prev ;\n    prev = curr ;\n    curr = prevPrev + prev ;\n    n = n - ( curr - prev - 1 ) ;\n  }\n  n = n + ( curr - prev - 1 ) ;\n  return prev + n ;\n}", "target_program": " int nonFibonacci ( int n ) {\n  int prevPrev = 1, prev = 2, curr = 3;\n  while ( n > 0 ) {\n    prevPrev = prev;\n    prev = curr;\n    curr = prevPrev + prev;\n    n = n - ( curr - prev - 1 );\n  }\n  n = n + ( curr - prev - 1 );\n  return prev + n;\n}"}
{"source": "cpp", "target": "java", "source_program": " int nonFibonacci ( int n ) {\n  int prevPrev = 1, prev = 2, curr = 3;\n  while ( n > 0 ) {\n    prevPrev = prev;\n    prev = curr;\n    curr = prevPrev + prev;\n    n = n - ( curr - prev - 1 );\n  }\n  n = n + ( curr - prev - 1 );\n  return prev + n;\n}", "target_program": " static int nonFibonacci ( int n ) {\n  int prevPrev = 1 , prev = 2 , curr = 3 ;\n  while ( n > 0 ) {\n    prevPrev = prev ;\n    prev = curr ;\n    curr = prevPrev + prev ;\n    n = n - ( curr - prev - 1 ) ;\n  }\n  n = n + ( curr - prev - 1 ) ;\n  return prev + n ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int nonFibonacci ( int n ) {\n  int prevPrev = 1, prev = 2, curr = 3;\n  while ( n > 0 ) {\n    prevPrev = prev;\n    prev = curr;\n    curr = prevPrev + prev;\n    n = n - ( curr - prev - 1 );\n  }\n  n = n + ( curr - prev - 1 );\n  return prev + n;\n}", "target_program": " def nonFibonacci ( n ) :\n    prevPrev = 1\n    prev = 2\n    curr = 3\n    while n > 0 :\n        prevPrev = prev\n        prev = curr\n        curr = prevPrev + prev\n        n = n - ( curr - prev - 1 )\n    n = n + ( curr - prev - 1 )\n    return prev + n"}
{"source": "python", "target": "java", "source_program": " def search ( arr , n , x ) :\n    i = 0\n    for i in range ( i , n ) :\n        if ( arr [ i ] == x ) :\n            return i\n    return - 1", "target_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) {\n      return i ;\n    }\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , n , x ) :\n    i = 0\n    for i in range ( i , n ) :\n        if ( arr [ i ] == x ) :\n            return i\n    return - 1", "target_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) {\n      return i ;\n    }\n  }\n  return - 1 ;\n}", "target_program": " def search ( arr , n , x ) :\n    i = 0\n    for i in range ( i , n ) :\n        if ( arr [ i ] == x ) :\n            return i\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) {\n      return i ;\n    }\n  }\n  return - 1 ;\n}", "target_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}", "target_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) {\n      return i ;\n    }\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int search ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}", "target_program": " def search ( arr , n , x ) :\n    i = 0\n    for i in range ( i , n ) :\n        if ( arr [ i ] == x ) :\n            return i\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def find_maximum ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = 10 ** 9\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans", "target_program": " static int find_maximum ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > b = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    int d = Math . min ( 1 + i , n - i ) ;\n    if ( ! b . containsKey ( x ) ) b . put ( x , d ) ;\n    else {\n      b . put ( x , Math . min ( d , b . get ( x ) ) ) ;\n    }\n  }\n  int ans = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( x != k - x && b . containsKey ( k - x ) ) ans = Math . min ( Math . max ( b . get ( x ) , b . get ( k - x ) ) , ans ) ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def find_maximum ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = 10 ** 9\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans", "target_program": " int find_maximum ( int a [ ], int n, int k ) {\n  unordered_map < int, int > b;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    int d = min ( 1 + i, n - i );\n    if ( b . find ( x ) == b . end ( ) ) b [ x ] = d;\n    else b [ x ] = min ( d, b [ x ] );\n  }\n  int ans = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( x != k - x && b . find ( k - x ) != b . end ( ) ) ans = min ( max ( b [ x ], b [ k - x ] ), ans );\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int find_maximum ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > b = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    int d = Math . min ( 1 + i , n - i ) ;\n    if ( ! b . containsKey ( x ) ) b . put ( x , d ) ;\n    else {\n      b . put ( x , Math . min ( d , b . get ( x ) ) ) ;\n    }\n  }\n  int ans = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( x != k - x && b . containsKey ( k - x ) ) ans = Math . min ( Math . max ( b . get ( x ) , b . get ( k - x ) ) , ans ) ;\n  }\n  return ans ;\n}", "target_program": " def find_maximum ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = 10 ** 9\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int find_maximum ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > b = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    int d = Math . min ( 1 + i , n - i ) ;\n    if ( ! b . containsKey ( x ) ) b . put ( x , d ) ;\n    else {\n      b . put ( x , Math . min ( d , b . get ( x ) ) ) ;\n    }\n  }\n  int ans = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( x != k - x && b . containsKey ( k - x ) ) ans = Math . min ( Math . max ( b . get ( x ) , b . get ( k - x ) ) , ans ) ;\n  }\n  return ans ;\n}", "target_program": " int find_maximum ( int a [ ], int n, int k ) {\n  unordered_map < int, int > b;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    int d = min ( 1 + i, n - i );\n    if ( b . find ( x ) == b . end ( ) ) b [ x ] = d;\n    else b [ x ] = min ( d, b [ x ] );\n  }\n  int ans = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( x != k - x && b . find ( k - x ) != b . end ( ) ) ans = min ( max ( b [ x ], b [ k - x ] ), ans );\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int find_maximum ( int a [ ], int n, int k ) {\n  unordered_map < int, int > b;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    int d = min ( 1 + i, n - i );\n    if ( b . find ( x ) == b . end ( ) ) b [ x ] = d;\n    else b [ x ] = min ( d, b [ x ] );\n  }\n  int ans = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( x != k - x && b . find ( k - x ) != b . end ( ) ) ans = min ( max ( b [ x ], b [ k - x ] ), ans );\n  }\n  return ans;\n}", "target_program": " static int find_maximum ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > b = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    int d = Math . min ( 1 + i , n - i ) ;\n    if ( ! b . containsKey ( x ) ) b . put ( x , d ) ;\n    else {\n      b . put ( x , Math . min ( d , b . get ( x ) ) ) ;\n    }\n  }\n  int ans = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( x != k - x && b . containsKey ( k - x ) ) ans = Math . min ( Math . max ( b . get ( x ) , b . get ( k - x ) ) , ans ) ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int find_maximum ( int a [ ], int n, int k ) {\n  unordered_map < int, int > b;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    int d = min ( 1 + i, n - i );\n    if ( b . find ( x ) == b . end ( ) ) b [ x ] = d;\n    else b [ x ] = min ( d, b [ x ] );\n  }\n  int ans = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( x != k - x && b . find ( k - x ) != b . end ( ) ) ans = min ( max ( b [ x ], b [ k - x ] ), ans );\n  }\n  return ans;\n}", "target_program": " def find_maximum ( a , n , k ) :\n    b = dict ( )\n    for i in range ( n ) :\n        x = a [ i ]\n        d = min ( 1 + i , n - i )\n        if x not in b.keys ( ) :\n            b [ x ] = d\n        else :\n            b [ x ] = min ( d , b [ x ] )\n    ans = 10 ** 9\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x != ( k - x ) and ( k - x ) in b.keys ( ) ) :\n            ans = min ( max ( b [ x ] , b [ k - x ] ) , ans )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def generate ( st , s ) :\n    if len ( s ) == 0 :\n        return\n    if s not in st :\n        st.add ( s )\n        for i in range ( len ( s ) ) :\n            t = list ( s ).copy ( )\n            t.remove ( s [ i ] )\n            t = ''.join ( t )\n            generate ( st , t )\n    return", "target_program": " static void generate ( Set < String > st , String s ) {\n  if ( s . length ( ) == 0 ) {\n    return ;\n  }\n  if ( ! st . contains ( s ) ) {\n    st . add ( s ) ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      String t = s ;\n      t = t . substring ( 0 , i ) + t . substring ( i + 1 ) ;\n      generate ( st , t ) ;\n    }\n  }\n  return ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def generate ( st , s ) :\n    if len ( s ) == 0 :\n        return\n    if s not in st :\n        st.add ( s )\n        for i in range ( len ( s ) ) :\n            t = list ( s ).copy ( )\n            t.remove ( s [ i ] )\n            t = ''.join ( t )\n            generate ( st , t )\n    return", "target_program": " void generate ( set < string > & st, string s ) {\n  if ( s . size ( ) == 0 ) return;\n  if ( st . find ( s ) == st . end ( ) ) {\n    st . insert ( s );\n    for ( int i = 0;\n    i < s . size ( );\n    i ++ ) {\n      string t = s;\n      t . erase ( i, 1 );\n      generate ( st, t );\n    }\n  }\n  return;\n}"}
{"source": "java", "target": "python", "source_program": " static void generate ( Set < String > st , String s ) {\n  if ( s . length ( ) == 0 ) {\n    return ;\n  }\n  if ( ! st . contains ( s ) ) {\n    st . add ( s ) ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      String t = s ;\n      t = t . substring ( 0 , i ) + t . substring ( i + 1 ) ;\n      generate ( st , t ) ;\n    }\n  }\n  return ;\n}", "target_program": " def generate ( st , s ) :\n    if len ( s ) == 0 :\n        return\n    if s not in st :\n        st.add ( s )\n        for i in range ( len ( s ) ) :\n            t = list ( s ).copy ( )\n            t.remove ( s [ i ] )\n            t = ''.join ( t )\n            generate ( st , t )\n    return"}
{"source": "java", "target": "cpp", "source_program": " static void generate ( Set < String > st , String s ) {\n  if ( s . length ( ) == 0 ) {\n    return ;\n  }\n  if ( ! st . contains ( s ) ) {\n    st . add ( s ) ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      String t = s ;\n      t = t . substring ( 0 , i ) + t . substring ( i + 1 ) ;\n      generate ( st , t ) ;\n    }\n  }\n  return ;\n}", "target_program": " void generate ( set < string > & st, string s ) {\n  if ( s . size ( ) == 0 ) return;\n  if ( st . find ( s ) == st . end ( ) ) {\n    st . insert ( s );\n    for ( int i = 0;\n    i < s . size ( );\n    i ++ ) {\n      string t = s;\n      t . erase ( i, 1 );\n      generate ( st, t );\n    }\n  }\n  return;\n}"}
{"source": "cpp", "target": "java", "source_program": " void generate ( set < string > & st, string s ) {\n  if ( s . size ( ) == 0 ) return;\n  if ( st . find ( s ) == st . end ( ) ) {\n    st . insert ( s );\n    for ( int i = 0;\n    i < s . size ( );\n    i ++ ) {\n      string t = s;\n      t . erase ( i, 1 );\n      generate ( st, t );\n    }\n  }\n  return;\n}", "target_program": " static void generate ( Set < String > st , String s ) {\n  if ( s . length ( ) == 0 ) {\n    return ;\n  }\n  if ( ! st . contains ( s ) ) {\n    st . add ( s ) ;\n    for ( int i = 0 ;\n    i < s . length ( ) ;\n    i ++ ) {\n      String t = s ;\n      t = t . substring ( 0 , i ) + t . substring ( i + 1 ) ;\n      generate ( st , t ) ;\n    }\n  }\n  return ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void generate ( set < string > & st, string s ) {\n  if ( s . size ( ) == 0 ) return;\n  if ( st . find ( s ) == st . end ( ) ) {\n    st . insert ( s );\n    for ( int i = 0;\n    i < s . size ( );\n    i ++ ) {\n      string t = s;\n      t . erase ( i, 1 );\n      generate ( st, t );\n    }\n  }\n  return;\n}", "target_program": " def generate ( st , s ) :\n    if len ( s ) == 0 :\n        return\n    if s not in st :\n        st.add ( s )\n        for i in range ( len ( s ) ) :\n            t = list ( s ).copy ( )\n            t.remove ( s [ i ] )\n            t = ''.join ( t )\n            generate ( st , t )\n    return"}
{"source": "python", "target": "java", "source_program": " def pow ( a , b ) :\n    if ( b == 0 ) :\n        return 1\n    answer = a\n    increment = a\n    for i in range ( 1 , b ) :\n        for j in range ( 1 , a ) :\n            answer += increment\n        increment = answer\n    return answer", "target_program": " static int pow ( int a , int b ) {\n  if ( b == 0 ) return 1 ;\n  int answer = a ;\n  int increment = a ;\n  int i , j ;\n  for ( i = 1 ;\n  i < b ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < a ;\n    j ++ ) {\n      answer += increment ;\n    }\n    increment = answer ;\n  }\n  return answer ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pow ( a , b ) :\n    if ( b == 0 ) :\n        return 1\n    answer = a\n    increment = a\n    for i in range ( 1 , b ) :\n        for j in range ( 1 , a ) :\n            answer += increment\n        increment = answer\n    return answer", "target_program": " int pow ( int a, int b ) {\n  if ( b == 0 ) return 1;\n  int answer = a;\n  int increment = a;\n  int i, j;\n  for ( i = 1;\n  i < b;\n  i ++ ) {\n    for ( j = 1;\n    j < a;\n    j ++ ) {\n      answer += increment;\n    }\n    increment = answer;\n  }\n  return answer;\n}"}
{"source": "java", "target": "python", "source_program": " static int pow ( int a , int b ) {\n  if ( b == 0 ) return 1 ;\n  int answer = a ;\n  int increment = a ;\n  int i , j ;\n  for ( i = 1 ;\n  i < b ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < a ;\n    j ++ ) {\n      answer += increment ;\n    }\n    increment = answer ;\n  }\n  return answer ;\n}", "target_program": " def pow ( a , b ) :\n    if ( b == 0 ) :\n        return 1\n    answer = a\n    increment = a\n    for i in range ( 1 , b ) :\n        for j in range ( 1 , a ) :\n            answer += increment\n        increment = answer\n    return answer"}
{"source": "java", "target": "cpp", "source_program": " static int pow ( int a , int b ) {\n  if ( b == 0 ) return 1 ;\n  int answer = a ;\n  int increment = a ;\n  int i , j ;\n  for ( i = 1 ;\n  i < b ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < a ;\n    j ++ ) {\n      answer += increment ;\n    }\n    increment = answer ;\n  }\n  return answer ;\n}", "target_program": " int pow ( int a, int b ) {\n  if ( b == 0 ) return 1;\n  int answer = a;\n  int increment = a;\n  int i, j;\n  for ( i = 1;\n  i < b;\n  i ++ ) {\n    for ( j = 1;\n    j < a;\n    j ++ ) {\n      answer += increment;\n    }\n    increment = answer;\n  }\n  return answer;\n}"}
{"source": "cpp", "target": "java", "source_program": " int pow ( int a, int b ) {\n  if ( b == 0 ) return 1;\n  int answer = a;\n  int increment = a;\n  int i, j;\n  for ( i = 1;\n  i < b;\n  i ++ ) {\n    for ( j = 1;\n    j < a;\n    j ++ ) {\n      answer += increment;\n    }\n    increment = answer;\n  }\n  return answer;\n}", "target_program": " static int pow ( int a , int b ) {\n  if ( b == 0 ) return 1 ;\n  int answer = a ;\n  int increment = a ;\n  int i , j ;\n  for ( i = 1 ;\n  i < b ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < a ;\n    j ++ ) {\n      answer += increment ;\n    }\n    increment = answer ;\n  }\n  return answer ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int pow ( int a, int b ) {\n  if ( b == 0 ) return 1;\n  int answer = a;\n  int increment = a;\n  int i, j;\n  for ( i = 1;\n  i < b;\n  i ++ ) {\n    for ( j = 1;\n    j < a;\n    j ++ ) {\n      answer += increment;\n    }\n    increment = answer;\n  }\n  return answer;\n}", "target_program": " def pow ( a , b ) :\n    if ( b == 0 ) :\n        return 1\n    answer = a\n    increment = a\n    for i in range ( 1 , b ) :\n        for j in range ( 1 , a ) :\n            answer += increment\n        increment = answer\n    return answer"}
{"source": "python", "target": "java", "source_program": " def maxvolume ( s ) :\n    length = int ( s / 3 )\n    s -= length\n    breadth = s / 2\n    height = s - breadth\n    return int ( length * breadth * height )", "target_program": " static int maxvolume ( int s ) {\n  int length = s / 3 ;\n  s -= length ;\n  int breadth = s / 2 ;\n  int height = s - breadth ;\n  return length * breadth * height ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxvolume ( s ) :\n    length = int ( s / 3 )\n    s -= length\n    breadth = s / 2\n    height = s - breadth\n    return int ( length * breadth * height )", "target_program": " int maxvolume ( int s ) {\n  int length = s / 3;\n  s -= length;\n  int breadth = s / 2;\n  int height = s - breadth;\n  return length * breadth * height;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxvolume ( int s ) {\n  int length = s / 3 ;\n  s -= length ;\n  int breadth = s / 2 ;\n  int height = s - breadth ;\n  return length * breadth * height ;\n}", "target_program": " def maxvolume ( s ) :\n    length = int ( s / 3 )\n    s -= length\n    breadth = s / 2\n    height = s - breadth\n    return int ( length * breadth * height )"}
{"source": "java", "target": "cpp", "source_program": " static int maxvolume ( int s ) {\n  int length = s / 3 ;\n  s -= length ;\n  int breadth = s / 2 ;\n  int height = s - breadth ;\n  return length * breadth * height ;\n}", "target_program": " int maxvolume ( int s ) {\n  int length = s / 3;\n  s -= length;\n  int breadth = s / 2;\n  int height = s - breadth;\n  return length * breadth * height;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxvolume ( int s ) {\n  int length = s / 3;\n  s -= length;\n  int breadth = s / 2;\n  int height = s - breadth;\n  return length * breadth * height;\n}", "target_program": " static int maxvolume ( int s ) {\n  int length = s / 3 ;\n  s -= length ;\n  int breadth = s / 2 ;\n  int height = s - breadth ;\n  return length * breadth * height ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxvolume ( int s ) {\n  int length = s / 3;\n  s -= length;\n  int breadth = s / 2;\n  int height = s - breadth;\n  return length * breadth * height;\n}", "target_program": " def maxvolume ( s ) :\n    length = int ( s / 3 )\n    s -= length\n    breadth = s / 2\n    height = s - breadth\n    return int ( length * breadth * height )"}
{"source": "python", "target": "java", "source_program": " def horner ( poly , n , x ) :\n    result = poly [ 0 ]\n    for i in range ( 1 , n ) :\n        result = result * x + poly [ i ]\n    return result", "target_program": " static int horner ( int poly [ ] , int n , int x ) {\n  int result = poly [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) result = result * x + poly [ i ] ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def horner ( poly , n , x ) :\n    result = poly [ 0 ]\n    for i in range ( 1 , n ) :\n        result = result * x + poly [ i ]\n    return result", "target_program": " int horner ( int poly [ ], int n, int x ) {\n  int result = poly [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) result = result * x + poly [ i ];\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int horner ( int poly [ ] , int n , int x ) {\n  int result = poly [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) result = result * x + poly [ i ] ;\n  return result ;\n}", "target_program": " def horner ( poly , n , x ) :\n    result = poly [ 0 ]\n    for i in range ( 1 , n ) :\n        result = result * x + poly [ i ]\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int horner ( int poly [ ] , int n , int x ) {\n  int result = poly [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) result = result * x + poly [ i ] ;\n  return result ;\n}", "target_program": " int horner ( int poly [ ], int n, int x ) {\n  int result = poly [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) result = result * x + poly [ i ];\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int horner ( int poly [ ], int n, int x ) {\n  int result = poly [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) result = result * x + poly [ i ];\n  return result;\n}", "target_program": " static int horner ( int poly [ ] , int n , int x ) {\n  int result = poly [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) result = result * x + poly [ i ] ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int horner ( int poly [ ], int n, int x ) {\n  int result = poly [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) result = result * x + poly [ i ];\n  return result;\n}", "target_program": " def horner ( poly , n , x ) :\n    result = poly [ 0 ]\n    for i in range ( 1 , n ) :\n        result = result * x + poly [ i ]\n    return result"}
{"source": "python", "target": "java", "source_program": " def minTime ( arr , n , m ) :\n    t = 0\n    while ( 1 ) :\n        items = 0\n        for i in range ( n ) :\n            items += ( t // arr [ i ] )\n        if ( items >= m ) :\n            return t\n        t += 1", "target_program": " static int minTime ( int [ ] arr , int n , int m ) {\n  int t = 0 ;\n  while ( true ) {\n    int items = 0 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) items += ( t / arr [ i ] ) ;\n    if ( items >= m ) return t ;\n    t ++ ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def minTime ( arr , n , m ) :\n    t = 0\n    while ( 1 ) :\n        items = 0\n        for i in range ( n ) :\n            items += ( t // arr [ i ] )\n        if ( items >= m ) :\n            return t\n        t += 1", "target_program": " int minTime ( int arr [ ], int n, int m ) {\n  int t = 0;\n  while ( 1 ) {\n    int items = 0;\n    for ( int i = 0;\n    i < n;\n    i ++ ) items += ( t / arr [ i ] );\n    if ( items >= m ) return t;\n    t ++;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static int minTime ( int [ ] arr , int n , int m ) {\n  int t = 0 ;\n  while ( true ) {\n    int items = 0 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) items += ( t / arr [ i ] ) ;\n    if ( items >= m ) return t ;\n    t ++ ;\n  }\n}", "target_program": " def minTime ( arr , n , m ) :\n    t = 0\n    while ( 1 ) :\n        items = 0\n        for i in range ( n ) :\n            items += ( t // arr [ i ] )\n        if ( items >= m ) :\n            return t\n        t += 1"}
{"source": "java", "target": "cpp", "source_program": " static int minTime ( int [ ] arr , int n , int m ) {\n  int t = 0 ;\n  while ( true ) {\n    int items = 0 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) items += ( t / arr [ i ] ) ;\n    if ( items >= m ) return t ;\n    t ++ ;\n  }\n}", "target_program": " int minTime ( int arr [ ], int n, int m ) {\n  int t = 0;\n  while ( 1 ) {\n    int items = 0;\n    for ( int i = 0;\n    i < n;\n    i ++ ) items += ( t / arr [ i ] );\n    if ( items >= m ) return t;\n    t ++;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int minTime ( int arr [ ], int n, int m ) {\n  int t = 0;\n  while ( 1 ) {\n    int items = 0;\n    for ( int i = 0;\n    i < n;\n    i ++ ) items += ( t / arr [ i ] );\n    if ( items >= m ) return t;\n    t ++;\n  }\n}", "target_program": " static int minTime ( int [ ] arr , int n , int m ) {\n  int t = 0 ;\n  while ( true ) {\n    int items = 0 ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) items += ( t / arr [ i ] ) ;\n    if ( items >= m ) return t ;\n    t ++ ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int minTime ( int arr [ ], int n, int m ) {\n  int t = 0;\n  while ( 1 ) {\n    int items = 0;\n    for ( int i = 0;\n    i < n;\n    i ++ ) items += ( t / arr [ i ] );\n    if ( items >= m ) return t;\n    t ++;\n  }\n}", "target_program": " def minTime ( arr , n , m ) :\n    t = 0\n    while ( 1 ) :\n        items = 0\n        for i in range ( n ) :\n            items += ( t // arr [ i ] )\n        if ( items >= m ) :\n            return t\n        t += 1"}
{"source": "python", "target": "java", "source_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                d1 += arr [ i ] [ j ]\n            if ( i == n - j - 1 ) :\n                d2 += arr [ i ] [ j ]\n    return abs ( d1 - d2 ) ;", "target_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ] ;\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ] ;\n    }\n  }\n  return Math . abs ( d1 - d2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                d1 += arr [ i ] [ j ]\n            if ( i == n - j - 1 ) :\n                d2 += arr [ i ] [ j ]\n    return abs ( d1 - d2 ) ;", "target_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ];\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ];\n    }\n  }\n  return abs ( d1 - d2 );\n}"}
{"source": "java", "target": "python", "source_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ] ;\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ] ;\n    }\n  }\n  return Math . abs ( d1 - d2 ) ;\n}", "target_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                d1 += arr [ i ] [ j ]\n            if ( i == n - j - 1 ) :\n                d2 += arr [ i ] [ j ]\n    return abs ( d1 - d2 ) ;"}
{"source": "java", "target": "cpp", "source_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ] ;\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ] ;\n    }\n  }\n  return Math . abs ( d1 - d2 ) ;\n}", "target_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ];\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ];\n    }\n  }\n  return abs ( d1 - d2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ];\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ];\n    }\n  }\n  return abs ( d1 - d2 );\n}", "target_program": " public static int difference ( int arr [ ] [ ] , int n ) {\n  int d1 = 0 , d2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ] ;\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ] ;\n    }\n  }\n  return Math . abs ( d1 - d2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int difference ( int arr [ ] [ MAX ], int n ) {\n  int d1 = 0, d2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) d1 += arr [ i ] [ j ];\n      if ( i == n - j - 1 ) d2 += arr [ i ] [ j ];\n    }\n  }\n  return abs ( d1 - d2 );\n}", "target_program": " def difference ( arr , n ) :\n    d1 = 0\n    d2 = 0\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                d1 += arr [ i ] [ j ]\n            if ( i == n - j - 1 ) :\n                d2 += arr [ i ] [ j ]\n    return abs ( d1 - d2 ) ;"}
{"source": "python", "target": "java", "source_program": " def shortestSeq ( S : list , T : list ) :\n    m = len ( S )\n    n = len ( T )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        dp [ i ] [ 0 ] = 1\n    for i in range ( n + 1 ) :\n        dp [ 0 ] [ i ] = MAX\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            ch = S [ i - 1 ]\n            k = j - 1\n            while k >= 0 :\n                if T [ k ] == ch :\n                    break\n                k -= 1\n            if k == - 1 :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 )\n    ans = dp [ m ] [ n ]\n    if ans >= MAX :\n        ans = - 1\n    return ans", "target_program": " static int shortestSeq ( char [ ] S , char [ ] T ) {\n  int m = S . length , n = T . length ;\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = MAX ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      char ch = S [ i - 1 ] ;\n      int k ;\n      for ( k = j - 1 ;\n      k >= 0 ;\n      k -- ) {\n        if ( T [ k ] == ch ) {\n          break ;\n        }\n      }\n      if ( k == - 1 ) {\n        dp [ i ] [ j ] = 1 ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 ) ;\n      }\n    }\n  }\n  int ans = dp [ m ] [ n ] ;\n  if ( ans >= MAX ) {\n    ans = - 1 ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def shortestSeq ( S : list , T : list ) :\n    m = len ( S )\n    n = len ( T )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        dp [ i ] [ 0 ] = 1\n    for i in range ( n + 1 ) :\n        dp [ 0 ] [ i ] = MAX\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            ch = S [ i - 1 ]\n            k = j - 1\n            while k >= 0 :\n                if T [ k ] == ch :\n                    break\n                k -= 1\n            if k == - 1 :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 )\n    ans = dp [ m ] [ n ]\n    if ans >= MAX :\n        ans = - 1\n    return ans", "target_program": " int shortestSeq ( char * S, char * T ) {\n  int m = strlen ( S ), n = strlen ( T );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ 0 ] [ i ] = MAX;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      char ch = S [ i - 1 ];\n      int k;\n      for ( k = j - 1;\n      k >= 0;\n      k -- ) if ( T [ k ] == ch ) break;\n      if ( k == - 1 ) dp [ i ] [ j ] = 1;\n      else dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ k ] + 1 );\n    }\n  }\n  int ans = dp [ m ] [ n ];\n  if ( ans >= MAX ) ans = - 1;\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int shortestSeq ( char [ ] S , char [ ] T ) {\n  int m = S . length , n = T . length ;\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = MAX ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      char ch = S [ i - 1 ] ;\n      int k ;\n      for ( k = j - 1 ;\n      k >= 0 ;\n      k -- ) {\n        if ( T [ k ] == ch ) {\n          break ;\n        }\n      }\n      if ( k == - 1 ) {\n        dp [ i ] [ j ] = 1 ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 ) ;\n      }\n    }\n  }\n  int ans = dp [ m ] [ n ] ;\n  if ( ans >= MAX ) {\n    ans = - 1 ;\n  }\n  return ans ;\n}", "target_program": " def shortestSeq ( S : list , T : list ) :\n    m = len ( S )\n    n = len ( T )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        dp [ i ] [ 0 ] = 1\n    for i in range ( n + 1 ) :\n        dp [ 0 ] [ i ] = MAX\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            ch = S [ i - 1 ]\n            k = j - 1\n            while k >= 0 :\n                if T [ k ] == ch :\n                    break\n                k -= 1\n            if k == - 1 :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 )\n    ans = dp [ m ] [ n ]\n    if ans >= MAX :\n        ans = - 1\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int shortestSeq ( char [ ] S , char [ ] T ) {\n  int m = S . length , n = T . length ;\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = MAX ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      char ch = S [ i - 1 ] ;\n      int k ;\n      for ( k = j - 1 ;\n      k >= 0 ;\n      k -- ) {\n        if ( T [ k ] == ch ) {\n          break ;\n        }\n      }\n      if ( k == - 1 ) {\n        dp [ i ] [ j ] = 1 ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 ) ;\n      }\n    }\n  }\n  int ans = dp [ m ] [ n ] ;\n  if ( ans >= MAX ) {\n    ans = - 1 ;\n  }\n  return ans ;\n}", "target_program": " int shortestSeq ( char * S, char * T ) {\n  int m = strlen ( S ), n = strlen ( T );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ 0 ] [ i ] = MAX;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      char ch = S [ i - 1 ];\n      int k;\n      for ( k = j - 1;\n      k >= 0;\n      k -- ) if ( T [ k ] == ch ) break;\n      if ( k == - 1 ) dp [ i ] [ j ] = 1;\n      else dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ k ] + 1 );\n    }\n  }\n  int ans = dp [ m ] [ n ];\n  if ( ans >= MAX ) ans = - 1;\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int shortestSeq ( char * S, char * T ) {\n  int m = strlen ( S ), n = strlen ( T );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ 0 ] [ i ] = MAX;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      char ch = S [ i - 1 ];\n      int k;\n      for ( k = j - 1;\n      k >= 0;\n      k -- ) if ( T [ k ] == ch ) break;\n      if ( k == - 1 ) dp [ i ] [ j ] = 1;\n      else dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ k ] + 1 );\n    }\n  }\n  int ans = dp [ m ] [ n ];\n  if ( ans >= MAX ) ans = - 1;\n  return ans;\n}", "target_program": " static int shortestSeq ( char [ ] S , char [ ] T ) {\n  int m = S . length , n = T . length ;\n  int dp [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = MAX ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      char ch = S [ i - 1 ] ;\n      int k ;\n      for ( k = j - 1 ;\n      k >= 0 ;\n      k -- ) {\n        if ( T [ k ] == ch ) {\n          break ;\n        }\n      }\n      if ( k == - 1 ) {\n        dp [ i ] [ j ] = 1 ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 ) ;\n      }\n    }\n  }\n  int ans = dp [ m ] [ n ] ;\n  if ( ans >= MAX ) {\n    ans = - 1 ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int shortestSeq ( char * S, char * T ) {\n  int m = strlen ( S ), n = strlen ( T );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) dp [ i ] [ 0 ] = 1;\n  for ( int i = 0;\n  i <= n;\n  i ++ ) dp [ 0 ] [ i ] = MAX;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      char ch = S [ i - 1 ];\n      int k;\n      for ( k = j - 1;\n      k >= 0;\n      k -- ) if ( T [ k ] == ch ) break;\n      if ( k == - 1 ) dp [ i ] [ j ] = 1;\n      else dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ], dp [ i - 1 ] [ k ] + 1 );\n    }\n  }\n  int ans = dp [ m ] [ n ];\n  if ( ans >= MAX ) ans = - 1;\n  return ans;\n}", "target_program": " def shortestSeq ( S : list , T : list ) :\n    m = len ( S )\n    n = len ( T )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( m + 1 ) ]\n    for i in range ( m + 1 ) :\n        dp [ i ] [ 0 ] = 1\n    for i in range ( n + 1 ) :\n        dp [ 0 ] [ i ] = MAX\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            ch = S [ i - 1 ]\n            k = j - 1\n            while k >= 0 :\n                if T [ k ] == ch :\n                    break\n                k -= 1\n            if k == - 1 :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = min ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ k ] + 1 )\n    ans = dp [ m ] [ n ]\n    if ans >= MAX :\n        ans = - 1\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findFlips ( str , n ) :\n    last = ' '\n    res = 0\n    for i in range ( n ) :\n        if ( last != str [ i ] ) :\n            res += 1\n        last = str [ i ]\n    return res // 2", "target_program": " static int findFlips ( String str , int n ) {\n  char last = ' ' ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( last != str . charAt ( i ) ) res ++ ;\n    last = str . charAt ( i ) ;\n  }\n  return res / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findFlips ( str , n ) :\n    last = ' '\n    res = 0\n    for i in range ( n ) :\n        if ( last != str [ i ] ) :\n            res += 1\n        last = str [ i ]\n    return res // 2", "target_program": " int findFlips ( char str [ ], int n ) {\n  char last = ' ';\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( last != str [ i ] ) res ++;\n    last = str [ i ];\n  }\n  return res / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int findFlips ( String str , int n ) {\n  char last = ' ' ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( last != str . charAt ( i ) ) res ++ ;\n    last = str . charAt ( i ) ;\n  }\n  return res / 2 ;\n}", "target_program": " def findFlips ( str , n ) :\n    last = ' '\n    res = 0\n    for i in range ( n ) :\n        if ( last != str [ i ] ) :\n            res += 1\n        last = str [ i ]\n    return res // 2"}
{"source": "java", "target": "cpp", "source_program": " static int findFlips ( String str , int n ) {\n  char last = ' ' ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( last != str . charAt ( i ) ) res ++ ;\n    last = str . charAt ( i ) ;\n  }\n  return res / 2 ;\n}", "target_program": " int findFlips ( char str [ ], int n ) {\n  char last = ' ';\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( last != str [ i ] ) res ++;\n    last = str [ i ];\n  }\n  return res / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findFlips ( char str [ ], int n ) {\n  char last = ' ';\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( last != str [ i ] ) res ++;\n    last = str [ i ];\n  }\n  return res / 2;\n}", "target_program": " static int findFlips ( String str , int n ) {\n  char last = ' ' ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( last != str . charAt ( i ) ) res ++ ;\n    last = str . charAt ( i ) ;\n  }\n  return res / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findFlips ( char str [ ], int n ) {\n  char last = ' ';\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( last != str [ i ] ) res ++;\n    last = str [ i ];\n  }\n  return res / 2;\n}", "target_program": " def findFlips ( str , n ) :\n    last = ' '\n    res = 0\n    for i in range ( n ) :\n        if ( last != str [ i ] ) :\n            res += 1\n        last = str [ i ]\n    return res // 2"}
{"source": "python", "target": "java", "source_program": " def findMinInsertions ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return 0\n    if ( l == h - 1 ) :\n        return 0 if ( str [ l ] == str [ h ] ) else 1\n    if ( str [ l ] == str [ h ] ) :\n        return findMinInsertions ( str , l + 1 , h - 1 )\n    else :\n        return ( min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 )", "target_program": " static int findMinInsertions ( char str [ ] , int l , int h ) {\n  if ( l > h ) return Integer . MAX_VALUE ;\n  if ( l == h ) return 0 ;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 ;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str , l + 1 , h - 1 ) : ( Integer . min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinInsertions ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return 0\n    if ( l == h - 1 ) :\n        return 0 if ( str [ l ] == str [ h ] ) else 1\n    if ( str [ l ] == str [ h ] ) :\n        return findMinInsertions ( str , l + 1 , h - 1 )\n    else :\n        return ( min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 )", "target_program": " int findMinInsertions ( char str [ ], int l, int h ) {\n  if ( l > h ) return INT_MAX;\n  if ( l == h ) return 0;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str, l + 1, h - 1 ) : ( min ( findMinInsertions ( str, l, h - 1 ), findMinInsertions ( str, l + 1, h ) ) + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int findMinInsertions ( char str [ ] , int l , int h ) {\n  if ( l > h ) return Integer . MAX_VALUE ;\n  if ( l == h ) return 0 ;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 ;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str , l + 1 , h - 1 ) : ( Integer . min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 ) ;\n}", "target_program": " def findMinInsertions ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return 0\n    if ( l == h - 1 ) :\n        return 0 if ( str [ l ] == str [ h ] ) else 1\n    if ( str [ l ] == str [ h ] ) :\n        return findMinInsertions ( str , l + 1 , h - 1 )\n    else :\n        return ( min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 )"}
{"source": "java", "target": "cpp", "source_program": " static int findMinInsertions ( char str [ ] , int l , int h ) {\n  if ( l > h ) return Integer . MAX_VALUE ;\n  if ( l == h ) return 0 ;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 ;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str , l + 1 , h - 1 ) : ( Integer . min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 ) ;\n}", "target_program": " int findMinInsertions ( char str [ ], int l, int h ) {\n  if ( l > h ) return INT_MAX;\n  if ( l == h ) return 0;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str, l + 1, h - 1 ) : ( min ( findMinInsertions ( str, l, h - 1 ), findMinInsertions ( str, l + 1, h ) ) + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMinInsertions ( char str [ ], int l, int h ) {\n  if ( l > h ) return INT_MAX;\n  if ( l == h ) return 0;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str, l + 1, h - 1 ) : ( min ( findMinInsertions ( str, l, h - 1 ), findMinInsertions ( str, l + 1, h ) ) + 1 );\n}", "target_program": " static int findMinInsertions ( char str [ ] , int l , int h ) {\n  if ( l > h ) return Integer . MAX_VALUE ;\n  if ( l == h ) return 0 ;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1 ;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str , l + 1 , h - 1 ) : ( Integer . min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMinInsertions ( char str [ ], int l, int h ) {\n  if ( l > h ) return INT_MAX;\n  if ( l == h ) return 0;\n  if ( l == h - 1 ) return ( str [ l ] == str [ h ] ) ? 0 : 1;\n  return ( str [ l ] == str [ h ] ) ? findMinInsertions ( str, l + 1, h - 1 ) : ( min ( findMinInsertions ( str, l, h - 1 ), findMinInsertions ( str, l + 1, h ) ) + 1 );\n}", "target_program": " def findMinInsertions ( str , l , h ) :\n    if ( l > h ) :\n        return sys.maxsize\n    if ( l == h ) :\n        return 0\n    if ( l == h - 1 ) :\n        return 0 if ( str [ l ] == str [ h ] ) else 1\n    if ( str [ l ] == str [ h ] ) :\n        return findMinInsertions ( str , l + 1 , h - 1 )\n    else :\n        return ( min ( findMinInsertions ( str , l , h - 1 ) , findMinInsertions ( str , l + 1 , h ) ) + 1 )"}
{"source": "python", "target": "java", "source_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n    return result ;", "target_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n    return result ;", "target_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++;\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ;\n  return result ;\n}", "target_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n    return result ;"}
{"source": "java", "target": "cpp", "source_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ;\n  return result ;\n}", "target_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++;\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++;\n  return result;\n}", "target_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( Math . abs ( str . charAt ( i ) - str . charAt ( j ) ) == Math . abs ( i - j ) ) result ++ ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( abs ( str [ i ] - str [ j ] ) == abs ( i - j ) ) result ++;\n  return result;\n}", "target_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            if ( abs ( ord ( str1 [ i ] ) - ord ( str1 [ j ] ) ) == abs ( i - j ) ) :\n                result += 1 ;\n    return result ;"}
{"source": "python", "target": "java", "source_program": " def shortestDist ( graph ) :\n    global INF\n    dist = [ 0 ] * N\n    dist [ N - 1 ] = 0\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        dist [ i ] = INF\n        for j in range ( N ) :\n            if graph [ i ] [ j ] == INF :\n                continue\n            dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] )\n    return dist [ 0 ]", "target_program": " public static int shortestDist ( int [ ] [ ] graph ) {\n  int [ ] dist = new int [ N ] ;\n  dist [ N - 1 ] = 0 ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    dist [ i ] = INF ;\n    for ( int j = i ;\n    j < N ;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) {\n        continue ;\n      }\n      dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ;\n    }\n  }\n  return dist [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def shortestDist ( graph ) :\n    global INF\n    dist = [ 0 ] * N\n    dist [ N - 1 ] = 0\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        dist [ i ] = INF\n        for j in range ( N ) :\n            if graph [ i ] [ j ] == INF :\n                continue\n            dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] )\n    return dist [ 0 ]", "target_program": " INT_MAX int shortestDist ( int graph [ N ] [ N ] ) {\n  int dist [ N ];\n  dist [ N - 1 ] = 0;\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    dist [ i ] = INF;\n    for ( int j = i;\n    j < N;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) continue;\n      dist [ i ] = min ( dist [ i ], graph [ i ] [ j ] + dist [ j ] );\n    }\n  }\n  return dist [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " public static int shortestDist ( int [ ] [ ] graph ) {\n  int [ ] dist = new int [ N ] ;\n  dist [ N - 1 ] = 0 ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    dist [ i ] = INF ;\n    for ( int j = i ;\n    j < N ;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) {\n        continue ;\n      }\n      dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ;\n    }\n  }\n  return dist [ 0 ] ;\n}", "target_program": " def shortestDist ( graph ) :\n    global INF\n    dist = [ 0 ] * N\n    dist [ N - 1 ] = 0\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        dist [ i ] = INF\n        for j in range ( N ) :\n            if graph [ i ] [ j ] == INF :\n                continue\n            dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] )\n    return dist [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " public static int shortestDist ( int [ ] [ ] graph ) {\n  int [ ] dist = new int [ N ] ;\n  dist [ N - 1 ] = 0 ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    dist [ i ] = INF ;\n    for ( int j = i ;\n    j < N ;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) {\n        continue ;\n      }\n      dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ;\n    }\n  }\n  return dist [ 0 ] ;\n}", "target_program": " INT_MAX int shortestDist ( int graph [ N ] [ N ] ) {\n  int dist [ N ];\n  dist [ N - 1 ] = 0;\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    dist [ i ] = INF;\n    for ( int j = i;\n    j < N;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) continue;\n      dist [ i ] = min ( dist [ i ], graph [ i ] [ j ] + dist [ j ] );\n    }\n  }\n  return dist [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " INT_MAX int shortestDist ( int graph [ N ] [ N ] ) {\n  int dist [ N ];\n  dist [ N - 1 ] = 0;\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    dist [ i ] = INF;\n    for ( int j = i;\n    j < N;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) continue;\n      dist [ i ] = min ( dist [ i ], graph [ i ] [ j ] + dist [ j ] );\n    }\n  }\n  return dist [ 0 ];\n}", "target_program": " public static int shortestDist ( int [ ] [ ] graph ) {\n  int [ ] dist = new int [ N ] ;\n  dist [ N - 1 ] = 0 ;\n  for ( int i = N - 2 ;\n  i >= 0 ;\n  i -- ) {\n    dist [ i ] = INF ;\n    for ( int j = i ;\n    j < N ;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) {\n        continue ;\n      }\n      dist [ i ] = Math . min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] ) ;\n    }\n  }\n  return dist [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " INT_MAX int shortestDist ( int graph [ N ] [ N ] ) {\n  int dist [ N ];\n  dist [ N - 1 ] = 0;\n  for ( int i = N - 2;\n  i >= 0;\n  i -- ) {\n    dist [ i ] = INF;\n    for ( int j = i;\n    j < N;\n    j ++ ) {\n      if ( graph [ i ] [ j ] == INF ) continue;\n      dist [ i ] = min ( dist [ i ], graph [ i ] [ j ] + dist [ j ] );\n    }\n  }\n  return dist [ 0 ];\n}", "target_program": " def shortestDist ( graph ) :\n    global INF\n    dist = [ 0 ] * N\n    dist [ N - 1 ] = 0\n    for i in range ( N - 2 , - 1 , - 1 ) :\n        dist [ i ] = INF\n        for j in range ( N ) :\n            if graph [ i ] [ j ] == INF :\n                continue\n            dist [ i ] = min ( dist [ i ] , graph [ i ] [ j ] + dist [ j ] )\n    return dist [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def printMaxSubSquare ( M ) :\n    R = len ( M )\n    C = len ( M [ 0 ] )\n    S = [ [ 0 for k in range ( C ) ] for l in range ( R ) ]\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            if ( M [ i ] [ j ] == 1 ) :\n                S [ i ] [ j ] = min ( S [ i ] [ j - 1 ] , S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) + 1\n            else :\n                S [ i ] [ j ] = 0\n    max_of_s = S [ 0 ] [ 0 ]\n    max_i = 0\n    max_j = 0\n    for i in range ( R ) :\n        for j in range ( C ) :\n            if ( max_of_s < S [ i ] [ j ] ) :\n                max_of_s = S [ i ] [ j ]\n                max_i = i\n                max_j = j\n    print ( \"Maximum size sub-matrix is: \" )\n    for i in range ( max_i , max_i - max_of_s , - 1 ) :\n        for j in range ( max_j , max_j - max_of_s , - 1 ) :\n            print ( M [ i ] [ j ] , end = \"\" )\n        print ( \"\" )", "target_program": " static void printMaxSubSquare ( int M [ ] [ ] ) {\n  int i , j ;\n  int R = M . length ;\n  int C = M [ 0 ] . length ;\n  int S [ ] [ ] = new int [ R ] [ C ] ;\n  int max_of_s , max_i , max_j ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ] ;\n  for ( j = 0 ;\n  j < C ;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < C ;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = Math . min ( S [ i ] [ j - 1 ] , Math . min ( S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) ) + 1 ;\n      else S [ i ] [ j ] = 0 ;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ] ;\n  max_i = 0 ;\n  max_j = 0 ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < C ;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ] ;\n        max_i = i ;\n        max_j = j ;\n      }\n    }\n  }\n  System . out . println ( \"Maximum size sub-matrix is: \" ) ;\n  for ( i = max_i ;\n  i > max_i - max_of_s ;\n  i -- ) {\n    for ( j = max_j ;\n    j > max_j - max_of_s ;\n    j -- ) {\n      System . out . print ( M [ i ] [ j ] + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printMaxSubSquare ( M ) :\n    R = len ( M )\n    C = len ( M [ 0 ] )\n    S = [ [ 0 for k in range ( C ) ] for l in range ( R ) ]\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            if ( M [ i ] [ j ] == 1 ) :\n                S [ i ] [ j ] = min ( S [ i ] [ j - 1 ] , S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) + 1\n            else :\n                S [ i ] [ j ] = 0\n    max_of_s = S [ 0 ] [ 0 ]\n    max_i = 0\n    max_j = 0\n    for i in range ( R ) :\n        for j in range ( C ) :\n            if ( max_of_s < S [ i ] [ j ] ) :\n                max_of_s = S [ i ] [ j ]\n                max_i = i\n                max_j = j\n    print ( \"Maximum size sub-matrix is: \" )\n    for i in range ( max_i , max_i - max_of_s , - 1 ) :\n        for j in range ( max_j , max_j - max_of_s , - 1 ) :\n            print ( M [ i ] [ j ] , end = \"\" )\n        print ( \"\" )", "target_program": " void printMaxSubSquare ( bool M [ R ] [ C ] ) {\n  int i, j;\n  int S [ R ] [ C ];\n  int max_of_s, max_i, max_j;\n  for ( i = 0;\n  i < R;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ];\n  for ( j = 0;\n  j < C;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ];\n  for ( i = 1;\n  i < R;\n  i ++ ) {\n    for ( j = 1;\n    j < C;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = min ( S [ i ] [ j - 1 ], min ( S [ i - 1 ] [ j ], S [ i - 1 ] [ j - 1 ] ) ) + 1;\n      else S [ i ] [ j ] = 0;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ];\n  max_i = 0;\n  max_j = 0;\n  for ( i = 0;\n  i < R;\n  i ++ ) {\n    for ( j = 0;\n    j < C;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ];\n        max_i = i;\n        max_j = j;\n      }\n    }\n  }\n  cout << \"Maximum size sub-matrix is: \\n\";\n  for ( i = max_i;\n  i > max_i - max_of_s;\n  i -- ) {\n    for ( j = max_j;\n    j > max_j - max_of_s;\n    j -- ) {\n      cout << M [ i ] [ j ] << \" \";\n    }\n    cout << \"\\n\";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printMaxSubSquare ( int M [ ] [ ] ) {\n  int i , j ;\n  int R = M . length ;\n  int C = M [ 0 ] . length ;\n  int S [ ] [ ] = new int [ R ] [ C ] ;\n  int max_of_s , max_i , max_j ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ] ;\n  for ( j = 0 ;\n  j < C ;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < C ;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = Math . min ( S [ i ] [ j - 1 ] , Math . min ( S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) ) + 1 ;\n      else S [ i ] [ j ] = 0 ;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ] ;\n  max_i = 0 ;\n  max_j = 0 ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < C ;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ] ;\n        max_i = i ;\n        max_j = j ;\n      }\n    }\n  }\n  System . out . println ( \"Maximum size sub-matrix is: \" ) ;\n  for ( i = max_i ;\n  i > max_i - max_of_s ;\n  i -- ) {\n    for ( j = max_j ;\n    j > max_j - max_of_s ;\n    j -- ) {\n      System . out . print ( M [ i ] [ j ] + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " def printMaxSubSquare ( M ) :\n    R = len ( M )\n    C = len ( M [ 0 ] )\n    S = [ [ 0 for k in range ( C ) ] for l in range ( R ) ]\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            if ( M [ i ] [ j ] == 1 ) :\n                S [ i ] [ j ] = min ( S [ i ] [ j - 1 ] , S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) + 1\n            else :\n                S [ i ] [ j ] = 0\n    max_of_s = S [ 0 ] [ 0 ]\n    max_i = 0\n    max_j = 0\n    for i in range ( R ) :\n        for j in range ( C ) :\n            if ( max_of_s < S [ i ] [ j ] ) :\n                max_of_s = S [ i ] [ j ]\n                max_i = i\n                max_j = j\n    print ( \"Maximum size sub-matrix is: \" )\n    for i in range ( max_i , max_i - max_of_s , - 1 ) :\n        for j in range ( max_j , max_j - max_of_s , - 1 ) :\n            print ( M [ i ] [ j ] , end = \"\" )\n        print ( \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printMaxSubSquare ( int M [ ] [ ] ) {\n  int i , j ;\n  int R = M . length ;\n  int C = M [ 0 ] . length ;\n  int S [ ] [ ] = new int [ R ] [ C ] ;\n  int max_of_s , max_i , max_j ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ] ;\n  for ( j = 0 ;\n  j < C ;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < C ;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = Math . min ( S [ i ] [ j - 1 ] , Math . min ( S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) ) + 1 ;\n      else S [ i ] [ j ] = 0 ;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ] ;\n  max_i = 0 ;\n  max_j = 0 ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < C ;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ] ;\n        max_i = i ;\n        max_j = j ;\n      }\n    }\n  }\n  System . out . println ( \"Maximum size sub-matrix is: \" ) ;\n  for ( i = max_i ;\n  i > max_i - max_of_s ;\n  i -- ) {\n    for ( j = max_j ;\n    j > max_j - max_of_s ;\n    j -- ) {\n      System . out . print ( M [ i ] [ j ] + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " void printMaxSubSquare ( bool M [ R ] [ C ] ) {\n  int i, j;\n  int S [ R ] [ C ];\n  int max_of_s, max_i, max_j;\n  for ( i = 0;\n  i < R;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ];\n  for ( j = 0;\n  j < C;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ];\n  for ( i = 1;\n  i < R;\n  i ++ ) {\n    for ( j = 1;\n    j < C;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = min ( S [ i ] [ j - 1 ], min ( S [ i - 1 ] [ j ], S [ i - 1 ] [ j - 1 ] ) ) + 1;\n      else S [ i ] [ j ] = 0;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ];\n  max_i = 0;\n  max_j = 0;\n  for ( i = 0;\n  i < R;\n  i ++ ) {\n    for ( j = 0;\n    j < C;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ];\n        max_i = i;\n        max_j = j;\n      }\n    }\n  }\n  cout << \"Maximum size sub-matrix is: \\n\";\n  for ( i = max_i;\n  i > max_i - max_of_s;\n  i -- ) {\n    for ( j = max_j;\n    j > max_j - max_of_s;\n    j -- ) {\n      cout << M [ i ] [ j ] << \" \";\n    }\n    cout << \"\\n\";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printMaxSubSquare ( bool M [ R ] [ C ] ) {\n  int i, j;\n  int S [ R ] [ C ];\n  int max_of_s, max_i, max_j;\n  for ( i = 0;\n  i < R;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ];\n  for ( j = 0;\n  j < C;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ];\n  for ( i = 1;\n  i < R;\n  i ++ ) {\n    for ( j = 1;\n    j < C;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = min ( S [ i ] [ j - 1 ], min ( S [ i - 1 ] [ j ], S [ i - 1 ] [ j - 1 ] ) ) + 1;\n      else S [ i ] [ j ] = 0;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ];\n  max_i = 0;\n  max_j = 0;\n  for ( i = 0;\n  i < R;\n  i ++ ) {\n    for ( j = 0;\n    j < C;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ];\n        max_i = i;\n        max_j = j;\n      }\n    }\n  }\n  cout << \"Maximum size sub-matrix is: \\n\";\n  for ( i = max_i;\n  i > max_i - max_of_s;\n  i -- ) {\n    for ( j = max_j;\n    j > max_j - max_of_s;\n    j -- ) {\n      cout << M [ i ] [ j ] << \" \";\n    }\n    cout << \"\\n\";\n  }\n}", "target_program": " static void printMaxSubSquare ( int M [ ] [ ] ) {\n  int i , j ;\n  int R = M . length ;\n  int C = M [ 0 ] . length ;\n  int S [ ] [ ] = new int [ R ] [ C ] ;\n  int max_of_s , max_i , max_j ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ] ;\n  for ( j = 0 ;\n  j < C ;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 1 ;\n    j < C ;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = Math . min ( S [ i ] [ j - 1 ] , Math . min ( S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) ) + 1 ;\n      else S [ i ] [ j ] = 0 ;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ] ;\n  max_i = 0 ;\n  max_j = 0 ;\n  for ( i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < C ;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ] ;\n        max_i = i ;\n        max_j = j ;\n      }\n    }\n  }\n  System . out . println ( \"Maximum size sub-matrix is: \" ) ;\n  for ( i = max_i ;\n  i > max_i - max_of_s ;\n  i -- ) {\n    for ( j = max_j ;\n    j > max_j - max_of_s ;\n    j -- ) {\n      System . out . print ( M [ i ] [ j ] + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printMaxSubSquare ( bool M [ R ] [ C ] ) {\n  int i, j;\n  int S [ R ] [ C ];\n  int max_of_s, max_i, max_j;\n  for ( i = 0;\n  i < R;\n  i ++ ) S [ i ] [ 0 ] = M [ i ] [ 0 ];\n  for ( j = 0;\n  j < C;\n  j ++ ) S [ 0 ] [ j ] = M [ 0 ] [ j ];\n  for ( i = 1;\n  i < R;\n  i ++ ) {\n    for ( j = 1;\n    j < C;\n    j ++ ) {\n      if ( M [ i ] [ j ] == 1 ) S [ i ] [ j ] = min ( S [ i ] [ j - 1 ], min ( S [ i - 1 ] [ j ], S [ i - 1 ] [ j - 1 ] ) ) + 1;\n      else S [ i ] [ j ] = 0;\n    }\n  }\n  max_of_s = S [ 0 ] [ 0 ];\n  max_i = 0;\n  max_j = 0;\n  for ( i = 0;\n  i < R;\n  i ++ ) {\n    for ( j = 0;\n    j < C;\n    j ++ ) {\n      if ( max_of_s < S [ i ] [ j ] ) {\n        max_of_s = S [ i ] [ j ];\n        max_i = i;\n        max_j = j;\n      }\n    }\n  }\n  cout << \"Maximum size sub-matrix is: \\n\";\n  for ( i = max_i;\n  i > max_i - max_of_s;\n  i -- ) {\n    for ( j = max_j;\n    j > max_j - max_of_s;\n    j -- ) {\n      cout << M [ i ] [ j ] << \" \";\n    }\n    cout << \"\\n\";\n  }\n}", "target_program": " def printMaxSubSquare ( M ) :\n    R = len ( M )\n    C = len ( M [ 0 ] )\n    S = [ [ 0 for k in range ( C ) ] for l in range ( R ) ]\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            if ( M [ i ] [ j ] == 1 ) :\n                S [ i ] [ j ] = min ( S [ i ] [ j - 1 ] , S [ i - 1 ] [ j ] , S [ i - 1 ] [ j - 1 ] ) + 1\n            else :\n                S [ i ] [ j ] = 0\n    max_of_s = S [ 0 ] [ 0 ]\n    max_i = 0\n    max_j = 0\n    for i in range ( R ) :\n        for j in range ( C ) :\n            if ( max_of_s < S [ i ] [ j ] ) :\n                max_of_s = S [ i ] [ j ]\n                max_i = i\n                max_j = j\n    print ( \"Maximum size sub-matrix is: \" )\n    for i in range ( max_i , max_i - max_of_s , - 1 ) :\n        for j in range ( max_j , max_j - max_of_s , - 1 ) :\n            print ( M [ i ] [ j ] , end = \"\" )\n        print ( \"\" )"}
{"source": "python", "target": "java", "source_program": " def printClosest ( arr , n , x ) :\n    res_l , res_r = 0 , 0\n    l , r , diff = 0 , n - 1 , MAX_VAL\n    while r > l :\n        if abs ( arr [ l ] + arr [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( arr [ l ] + arr [ r ] - x )\n        if arr [ l ] + arr [ r ] > x :\n            r -= 1\n        else :\n            l += 1\n    print ( 'The closest pair is {} and {}'.format ( arr [ res_l ] , arr [ res_r ] ) )", "target_program": " static void printClosest ( int arr [ ] , int n , int x ) {\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;\n  while ( r > l ) {\n    if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . println ( \" The closest pair is \" + arr [ res_l ] + \" and \" + arr [ res_r ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printClosest ( arr , n , x ) :\n    res_l , res_r = 0 , 0\n    l , r , diff = 0 , n - 1 , MAX_VAL\n    while r > l :\n        if abs ( arr [ l ] + arr [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( arr [ l ] + arr [ r ] - x )\n        if arr [ l ] + arr [ r ] > x :\n            r -= 1\n        else :\n            l += 1\n    print ( 'The closest pair is {} and {}'.format ( arr [ res_l ] , arr [ res_r ] ) )", "target_program": " void printClosest ( int arr [ ], int n, int x ) {\n  int res_l, res_r;\n  int l = 0, r = n - 1, diff = INT_MAX;\n  while ( r > l ) {\n    if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( arr [ l ] + arr [ r ] - x );\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \" The closest pair is \" << arr [ res_l ] << \" and \" << arr [ res_r ];\n}"}
{"source": "java", "target": "python", "source_program": " static void printClosest ( int arr [ ] , int n , int x ) {\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;\n  while ( r > l ) {\n    if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . println ( \" The closest pair is \" + arr [ res_l ] + \" and \" + arr [ res_r ] ) ;\n}", "target_program": " def printClosest ( arr , n , x ) :\n    res_l , res_r = 0 , 0\n    l , r , diff = 0 , n - 1 , MAX_VAL\n    while r > l :\n        if abs ( arr [ l ] + arr [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( arr [ l ] + arr [ r ] - x )\n        if arr [ l ] + arr [ r ] > x :\n            r -= 1\n        else :\n            l += 1\n    print ( 'The closest pair is {} and {}'.format ( arr [ res_l ] , arr [ res_r ] ) )"}
{"source": "java", "target": "cpp", "source_program": " static void printClosest ( int arr [ ] , int n , int x ) {\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;\n  while ( r > l ) {\n    if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . println ( \" The closest pair is \" + arr [ res_l ] + \" and \" + arr [ res_r ] ) ;\n}", "target_program": " void printClosest ( int arr [ ], int n, int x ) {\n  int res_l, res_r;\n  int l = 0, r = n - 1, diff = INT_MAX;\n  while ( r > l ) {\n    if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( arr [ l ] + arr [ r ] - x );\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \" The closest pair is \" << arr [ res_l ] << \" and \" << arr [ res_r ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void printClosest ( int arr [ ], int n, int x ) {\n  int res_l, res_r;\n  int l = 0, r = n - 1, diff = INT_MAX;\n  while ( r > l ) {\n    if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( arr [ l ] + arr [ r ] - x );\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \" The closest pair is \" << arr [ res_l ] << \" and \" << arr [ res_r ];\n}", "target_program": " static void printClosest ( int arr [ ] , int n , int x ) {\n  int res_l = 0 , res_r = 0 ;\n  int l = 0 , r = n - 1 , diff = Integer . MAX_VALUE ;\n  while ( r > l ) {\n    if ( Math . abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l ;\n      res_r = r ;\n      diff = Math . abs ( arr [ l ] + arr [ r ] - x ) ;\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r -- ;\n    else l ++ ;\n  }\n  System . out . println ( \" The closest pair is \" + arr [ res_l ] + \" and \" + arr [ res_r ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printClosest ( int arr [ ], int n, int x ) {\n  int res_l, res_r;\n  int l = 0, r = n - 1, diff = INT_MAX;\n  while ( r > l ) {\n    if ( abs ( arr [ l ] + arr [ r ] - x ) < diff ) {\n      res_l = l;\n      res_r = r;\n      diff = abs ( arr [ l ] + arr [ r ] - x );\n    }\n    if ( arr [ l ] + arr [ r ] > x ) r --;\n    else l ++;\n  }\n  cout << \" The closest pair is \" << arr [ res_l ] << \" and \" << arr [ res_r ];\n}", "target_program": " def printClosest ( arr , n , x ) :\n    res_l , res_r = 0 , 0\n    l , r , diff = 0 , n - 1 , MAX_VAL\n    while r > l :\n        if abs ( arr [ l ] + arr [ r ] - x ) < diff :\n            res_l = l\n            res_r = r\n            diff = abs ( arr [ l ] + arr [ r ] - x )\n        if arr [ l ] + arr [ r ] > x :\n            r -= 1\n        else :\n            l += 1\n    print ( 'The closest pair is {} and {}'.format ( arr [ res_l ] , arr [ res_r ] ) )"}
{"source": "python", "target": "java", "source_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if B [ i ] :\n            if A [ i ] != i + 1 :\n                A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ]\n    for i in range ( n ) :\n        if A [ i ] != i + 1 :\n            return False\n    return True", "target_program": " static int sortedAfterSwap ( int [ ] A , int [ ] B , int n ) {\n  int t = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] != 0 ) {\n      if ( A [ i ] != i + 1 ) t = A [ i ] ;\n      A [ i ] = A [ i + 1 ] ;\n      A [ i + 1 ] = t ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return 0 ;\n  }\n  return 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if B [ i ] :\n            if A [ i ] != i + 1 :\n                A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ]\n    for i in range ( n ) :\n        if A [ i ] != i + 1 :\n            return False\n    return True", "target_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      if ( A [ i ] != i + 1 ) swap ( A [ i ], A [ i + 1 ] );\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static int sortedAfterSwap ( int [ ] A , int [ ] B , int n ) {\n  int t = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] != 0 ) {\n      if ( A [ i ] != i + 1 ) t = A [ i ] ;\n      A [ i ] = A [ i + 1 ] ;\n      A [ i + 1 ] = t ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return 0 ;\n  }\n  return 1 ;\n}", "target_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if B [ i ] :\n            if A [ i ] != i + 1 :\n                A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ]\n    for i in range ( n ) :\n        if A [ i ] != i + 1 :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static int sortedAfterSwap ( int [ ] A , int [ ] B , int n ) {\n  int t = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] != 0 ) {\n      if ( A [ i ] != i + 1 ) t = A [ i ] ;\n      A [ i ] = A [ i + 1 ] ;\n      A [ i + 1 ] = t ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return 0 ;\n  }\n  return 1 ;\n}", "target_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      if ( A [ i ] != i + 1 ) swap ( A [ i ], A [ i + 1 ] );\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      if ( A [ i ] != i + 1 ) swap ( A [ i ], A [ i + 1 ] );\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}", "target_program": " static int sortedAfterSwap ( int [ ] A , int [ ] B , int n ) {\n  int t = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] != 0 ) {\n      if ( A [ i ] != i + 1 ) t = A [ i ] ;\n      A [ i ] = A [ i + 1 ] ;\n      A [ i + 1 ] = t ;\n    }\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return 0 ;\n  }\n  return 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      if ( A [ i ] != i + 1 ) swap ( A [ i ], A [ i + 1 ] );\n    }\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}", "target_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if B [ i ] :\n            if A [ i ] != i + 1 :\n                A [ i ] , A [ i + 1 ] = A [ i + 1 ] , A [ i ]\n    for i in range ( n ) :\n        if A [ i ] != i + 1 :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def possibleWays ( n , m , k ) :\n    dp = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    presum = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , n + 1 ) :\n        dp [ 0 ] [ i ] = 0\n        presum [ 0 ] [ i ] = 1\n    for i in range ( 0 , m + 1 ) :\n        presum [ i ] [ 0 ] = 1\n        dp [ i ] [ 0 ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            dp [ i ] [ j ] = presum [ i - 1 ] [ j ]\n            if j > k :\n                dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ]\n        for j in range ( 1 , n + 1 ) :\n            presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ]\n    return dp [ m ] [ n ]", "target_program": " static int possibleWays ( int n , int m , int k ) {\n  int [ ] [ ] dp = new int [ N ] [ N ] ;\n  int [ ] [ ] presum = new int [ N ] [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      presum [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n + 1 ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0 ;\n    presum [ 0 ] [ i ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) {\n    presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < m + 1 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ] ;\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ] ;\n      }\n    }\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ] ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def possibleWays ( n , m , k ) :\n    dp = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    presum = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , n + 1 ) :\n        dp [ 0 ] [ i ] = 0\n        presum [ 0 ] [ i ] = 1\n    for i in range ( 0 , m + 1 ) :\n        presum [ i ] [ 0 ] = 1\n        dp [ i ] [ 0 ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            dp [ i ] [ j ] = presum [ i - 1 ] [ j ]\n            if j > k :\n                dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ]\n        for j in range ( 1 , n + 1 ) :\n            presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ]\n    return dp [ m ] [ n ]", "target_program": " int possibleWays ( int n, int m, int k ) {\n  int dp [ N ] [ N ];\n  int presum [ N ] [ N ];\n  memset ( dp, 0, sizeof dp );\n  memset ( presum, 0, sizeof presum );\n  for ( int i = 1;\n  i < n + 1;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0;\n    presum [ 0 ] [ i ] = 1;\n  }\n  for ( int i = 0;\n  i < m + 1;\n  i ++ ) presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < m + 1;\n  i ++ ) {\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ];\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ];\n      }\n    }\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ];\n  }\n  return dp [ m ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int possibleWays ( int n , int m , int k ) {\n  int [ ] [ ] dp = new int [ N ] [ N ] ;\n  int [ ] [ ] presum = new int [ N ] [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      presum [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n + 1 ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0 ;\n    presum [ 0 ] [ i ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) {\n    presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < m + 1 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ] ;\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ] ;\n      }\n    }\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ] ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}", "target_program": " def possibleWays ( n , m , k ) :\n    dp = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    presum = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , n + 1 ) :\n        dp [ 0 ] [ i ] = 0\n        presum [ 0 ] [ i ] = 1\n    for i in range ( 0 , m + 1 ) :\n        presum [ i ] [ 0 ] = 1\n        dp [ i ] [ 0 ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            dp [ i ] [ j ] = presum [ i - 1 ] [ j ]\n            if j > k :\n                dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ]\n        for j in range ( 1 , n + 1 ) :\n            presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ]\n    return dp [ m ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int possibleWays ( int n , int m , int k ) {\n  int [ ] [ ] dp = new int [ N ] [ N ] ;\n  int [ ] [ ] presum = new int [ N ] [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      presum [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n + 1 ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0 ;\n    presum [ 0 ] [ i ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) {\n    presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < m + 1 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ] ;\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ] ;\n      }\n    }\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ] ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}", "target_program": " int possibleWays ( int n, int m, int k ) {\n  int dp [ N ] [ N ];\n  int presum [ N ] [ N ];\n  memset ( dp, 0, sizeof dp );\n  memset ( presum, 0, sizeof presum );\n  for ( int i = 1;\n  i < n + 1;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0;\n    presum [ 0 ] [ i ] = 1;\n  }\n  for ( int i = 0;\n  i < m + 1;\n  i ++ ) presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < m + 1;\n  i ++ ) {\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ];\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ];\n      }\n    }\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ];\n  }\n  return dp [ m ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int possibleWays ( int n, int m, int k ) {\n  int dp [ N ] [ N ];\n  int presum [ N ] [ N ];\n  memset ( dp, 0, sizeof dp );\n  memset ( presum, 0, sizeof presum );\n  for ( int i = 1;\n  i < n + 1;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0;\n    presum [ 0 ] [ i ] = 1;\n  }\n  for ( int i = 0;\n  i < m + 1;\n  i ++ ) presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < m + 1;\n  i ++ ) {\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ];\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ];\n      }\n    }\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ];\n  }\n  return dp [ m ] [ n ];\n}", "target_program": " static int possibleWays ( int n , int m , int k ) {\n  int [ ] [ ] dp = new int [ N ] [ N ] ;\n  int [ ] [ ] presum = new int [ N ] [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      presum [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n + 1 ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0 ;\n    presum [ 0 ] [ i ] = 1 ;\n  }\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) {\n    presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < m + 1 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ] ;\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ] ;\n      }\n    }\n    for ( int j = 1 ;\n    j < n + 1 ;\n    j ++ ) {\n      presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ] ;\n    }\n  }\n  return dp [ m ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int possibleWays ( int n, int m, int k ) {\n  int dp [ N ] [ N ];\n  int presum [ N ] [ N ];\n  memset ( dp, 0, sizeof dp );\n  memset ( presum, 0, sizeof presum );\n  for ( int i = 1;\n  i < n + 1;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 0;\n    presum [ 0 ] [ i ] = 1;\n  }\n  for ( int i = 0;\n  i < m + 1;\n  i ++ ) presum [ i ] [ 0 ] = dp [ i ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < m + 1;\n  i ++ ) {\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) {\n      dp [ i ] [ j ] = presum [ i - 1 ] [ j ];\n      if ( j > k ) {\n        dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ];\n      }\n    }\n    for ( int j = 1;\n    j < n + 1;\n    j ++ ) presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ];\n  }\n  return dp [ m ] [ n ];\n}", "target_program": " def possibleWays ( n , m , k ) :\n    dp = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    presum = [ [ 0 for i in range ( 10 ) ] for j in range ( 10 ) ]\n    for i in range ( 1 , n + 1 ) :\n        dp [ 0 ] [ i ] = 0\n        presum [ 0 ] [ i ] = 1\n    for i in range ( 0 , m + 1 ) :\n        presum [ i ] [ 0 ] = 1\n        dp [ i ] [ 0 ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            dp [ i ] [ j ] = presum [ i - 1 ] [ j ]\n            if j > k :\n                dp [ i ] [ j ] -= presum [ i - 1 ] [ j - k - 1 ]\n        for j in range ( 1 , n + 1 ) :\n            presum [ i ] [ j ] = dp [ i ] [ j ] + presum [ i ] [ j - 1 ]\n    return dp [ m ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt", "target_program": " static int sumEqualProduct ( int a [ ] , int n ) {\n  int zero = 0 , two = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++ ;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++ ;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2 ;\n  return cnt ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt", "target_program": " int sumEqualProduct ( int a [ ], int n ) {\n  int zero = 0, two = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2;\n  return cnt;\n}"}
{"source": "java", "target": "python", "source_program": " static int sumEqualProduct ( int a [ ] , int n ) {\n  int zero = 0 , two = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++ ;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++ ;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2 ;\n  return cnt ;\n}", "target_program": " def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt"}
{"source": "java", "target": "cpp", "source_program": " static int sumEqualProduct ( int a [ ] , int n ) {\n  int zero = 0 , two = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++ ;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++ ;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2 ;\n  return cnt ;\n}", "target_program": " int sumEqualProduct ( int a [ ], int n ) {\n  int zero = 0, two = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2;\n  return cnt;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumEqualProduct ( int a [ ], int n ) {\n  int zero = 0, two = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2;\n  return cnt;\n}", "target_program": " static int sumEqualProduct ( int a [ ] , int n ) {\n  int zero = 0 , two = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++ ;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++ ;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2 ;\n  return cnt ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumEqualProduct ( int a [ ], int n ) {\n  int zero = 0, two = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] == 0 ) {\n      zero ++;\n    }\n    if ( a [ i ] == 2 ) {\n      two ++;\n    }\n  }\n  int cnt = ( zero * ( zero - 1 ) ) / 2 + ( two * ( two - 1 ) ) / 2;\n  return cnt;\n}", "target_program": " def sumEqualProduct ( a , n ) :\n    zero = 0\n    two = 0\n    for i in range ( n ) :\n        if a [ i ] == 0 :\n            zero += 1\n        if a [ i ] == 2 :\n            two += 1\n    cnt = ( zero * ( zero - 1 ) ) // 2 + \\\n        ( two * ( two - 1 ) ) // 2\n    return cnt"}
{"source": "python", "target": "java", "source_program": " def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n        C [ i ] [ i ] = 0 ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1\n            if L == 2 :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                for k in range ( i , j ) :\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n    return C [ 0 ] [ n - 1 ]", "target_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] C = new int [ n ] [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n    C [ i ] [ i ] = 0 ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;\n      else {\n        C [ i ] [ j ] = Integer . MAX_VALUE ;\n        for ( k = i ;\n        k <= j - 1 ;\n        k ++ ) C [ i ] [ j ] = Integer . min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n        C [ i ] [ i ] = 0 ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1\n            if L == 2 :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                for k in range ( i , j ) :\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n    return C [ 0 ] [ n - 1 ]", "target_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ] [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n    C [ i ] [ i ] = 0;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0;\n      else {\n        C [ i ] [ j ] = INT_MAX;\n        for ( k = i;\n        k <= j - 1;\n        k ++ ) C [ i ] [ j ] = min ( C [ i ] [ j ], C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 );\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] C = new int [ n ] [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n    C [ i ] [ i ] = 0 ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;\n      else {\n        C [ i ] [ j ] = Integer . MAX_VALUE ;\n        for ( k = i ;\n        k <= j - 1 ;\n        k ++ ) C [ i ] [ j ] = Integer . min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ] ;\n}", "target_program": " def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n        C [ i ] [ i ] = 0 ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1\n            if L == 2 :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                for k in range ( i , j ) :\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n    return C [ 0 ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] C = new int [ n ] [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n    C [ i ] [ i ] = 0 ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;\n      else {\n        C [ i ] [ j ] = Integer . MAX_VALUE ;\n        for ( k = i ;\n        k <= j - 1 ;\n        k ++ ) C [ i ] [ j ] = Integer . min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ] ;\n}", "target_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ] [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n    C [ i ] [ i ] = 0;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0;\n      else {\n        C [ i ] [ j ] = INT_MAX;\n        for ( k = i;\n        k <= j - 1;\n        k ++ ) C [ i ] [ j ] = min ( C [ i ] [ j ], C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 );\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ] [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n    C [ i ] [ i ] = 0;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0;\n      else {\n        C [ i ] [ j ] = INT_MAX;\n        for ( k = i;\n        k <= j - 1;\n        k ++ ) C [ i ] [ j ] = min ( C [ i ] [ j ], C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 );\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ];\n}", "target_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] C = new int [ n ] [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n    C [ i ] [ i ] = 0 ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0 ;\n      else {\n        C [ i ] [ j ] = Integer . MAX_VALUE ;\n        for ( k = i ;\n        k <= j - 1 ;\n        k ++ ) C [ i ] [ j ] = Integer . min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 ) ;\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ] [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n    C [ i ] [ i ] = 0;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n      if ( P [ i ] [ j ] == true ) C [ i ] [ j ] = 0;\n      else {\n        C [ i ] [ j ] = INT_MAX;\n        for ( k = i;\n        k <= j - 1;\n        k ++ ) C [ i ] [ j ] = min ( C [ i ] [ j ], C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 );\n      }\n    }\n  }\n  return C [ 0 ] [ n - 1 ];\n}", "target_program": " def minPalPartion ( str ) :\n    n = len ( str )\n    C = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    P = [ [ False for i in range ( n ) ] for i in range ( n ) ]\n    j = 0\n    k = 0\n    L = 0\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n        C [ i ] [ i ] = 0 ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1\n            if L == 2 :\n                P [ i ] [ j ] = ( str [ i ] == str [ j ] )\n            else :\n                P [ i ] [ j ] = ( ( str [ i ] == str [ j ] ) and P [ i + 1 ] [ j - 1 ] )\n            if P [ i ] [ j ] == True :\n                C [ i ] [ j ] = 0\n            else :\n                C [ i ] [ j ] = 100000000\n                for k in range ( i , j ) :\n                    C [ i ] [ j ] = min ( C [ i ] [ j ] , C [ i ] [ k ] + C [ k + 1 ] [ j ] + 1 )\n    return C [ 0 ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def getSum ( n ) :\n    sum = 0\n    while ( n > 0 ) :\n        sum += int ( n % 10 )\n        n = int ( n / 10 )\n    return sum", "target_program": " static int getSum ( int n ) {\n  int sum ;\n  for ( sum = 0 ;\n  n > 0 ;\n  sum += n % 10 , n /= 10 ) ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getSum ( n ) :\n    sum = 0\n    while ( n > 0 ) :\n        sum += int ( n % 10 )\n        n = int ( n / 10 )\n    return sum", "target_program": " public : int getSum ( int n ) {\n  int sum;\n  for ( sum = 0;\n  n > 0;\n  sum += n % 10, n /= 10 );\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int getSum ( int n ) {\n  int sum ;\n  for ( sum = 0 ;\n  n > 0 ;\n  sum += n % 10 , n /= 10 ) ;\n  return sum ;\n}", "target_program": " def getSum ( n ) :\n    sum = 0\n    while ( n > 0 ) :\n        sum += int ( n % 10 )\n        n = int ( n / 10 )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int getSum ( int n ) {\n  int sum ;\n  for ( sum = 0 ;\n  n > 0 ;\n  sum += n % 10 , n /= 10 ) ;\n  return sum ;\n}", "target_program": " public : int getSum ( int n ) {\n  int sum;\n  for ( sum = 0;\n  n > 0;\n  sum += n % 10, n /= 10 );\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " public : int getSum ( int n ) {\n  int sum;\n  for ( sum = 0;\n  n > 0;\n  sum += n % 10, n /= 10 );\n  return sum;\n}", "target_program": " static int getSum ( int n ) {\n  int sum ;\n  for ( sum = 0 ;\n  n > 0 ;\n  sum += n % 10 , n /= 10 ) ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : int getSum ( int n ) {\n  int sum;\n  for ( sum = 0;\n  n > 0;\n  sum += n % 10, n /= 10 );\n  return sum;\n}", "target_program": " def getSum ( n ) :\n    sum = 0\n    while ( n > 0 ) :\n        sum += int ( n % 10 )\n        n = int ( n / 10 )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def printFun ( test ) :\n    if ( test < 1 ) :\n        return\n    else :\n        print ( test , end = \" \" )\n        printFun ( test - 1 )\n        print ( test , end = \" \" )\n        return", "target_program": " static void printFun ( int test ) {\n  if ( test < 1 ) return ;\n  else {\n    System . out . printf ( \"%d \" , test ) ;\n    printFun ( test - 1 ) ;\n    System . out . printf ( \"%d \" , test ) ;\n    return ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printFun ( test ) :\n    if ( test < 1 ) :\n        return\n    else :\n        print ( test , end = \" \" )\n        printFun ( test - 1 )\n        print ( test , end = \" \" )\n        return", "target_program": " void printFun ( int test ) {\n  if ( test < 1 ) return;\n  else {\n    cout << test << \" \";\n    printFun ( test - 1 );\n    cout << test << \" \";\n    return;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printFun ( int test ) {\n  if ( test < 1 ) return ;\n  else {\n    System . out . printf ( \"%d \" , test ) ;\n    printFun ( test - 1 ) ;\n    System . out . printf ( \"%d \" , test ) ;\n    return ;\n  }\n}", "target_program": " def printFun ( test ) :\n    if ( test < 1 ) :\n        return\n    else :\n        print ( test , end = \" \" )\n        printFun ( test - 1 )\n        print ( test , end = \" \" )\n        return"}
{"source": "java", "target": "cpp", "source_program": " static void printFun ( int test ) {\n  if ( test < 1 ) return ;\n  else {\n    System . out . printf ( \"%d \" , test ) ;\n    printFun ( test - 1 ) ;\n    System . out . printf ( \"%d \" , test ) ;\n    return ;\n  }\n}", "target_program": " void printFun ( int test ) {\n  if ( test < 1 ) return;\n  else {\n    cout << test << \" \";\n    printFun ( test - 1 );\n    cout << test << \" \";\n    return;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printFun ( int test ) {\n  if ( test < 1 ) return;\n  else {\n    cout << test << \" \";\n    printFun ( test - 1 );\n    cout << test << \" \";\n    return;\n  }\n}", "target_program": " static void printFun ( int test ) {\n  if ( test < 1 ) return ;\n  else {\n    System . out . printf ( \"%d \" , test ) ;\n    printFun ( test - 1 ) ;\n    System . out . printf ( \"%d \" , test ) ;\n    return ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printFun ( int test ) {\n  if ( test < 1 ) return;\n  else {\n    cout << test << \" \";\n    printFun ( test - 1 );\n    cout << test << \" \";\n    return;\n  }\n}", "target_program": " def printFun ( test ) :\n    if ( test < 1 ) :\n        return\n    else :\n        print ( test , end = \" \" )\n        printFun ( test - 1 )\n        print ( test , end = \" \" )\n        return"}
{"source": "python", "target": "java", "source_program": " def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n    return sm", "target_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int sum = - 1000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ] ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n    return sm", "target_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int sum = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ];\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int sum = - 1000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ] ;\n  return sum ;\n}", "target_program": " def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n    return sm"}
{"source": "java", "target": "cpp", "source_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int sum = - 1000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ] ;\n  return sum ;\n}", "target_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int sum = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ];\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int sum = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ];\n  return sum;\n}", "target_program": " static int maxTripletSum ( int arr [ ] , int n ) {\n  int sum = - 1000000 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) for ( int k = j + 1 ;\n  k < n ;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ] ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxTripletSum ( int arr [ ], int n ) {\n  int sum = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) for ( int k = j + 1;\n  k < n;\n  k ++ ) if ( sum < arr [ i ] + arr [ j ] + arr [ k ] ) sum = arr [ i ] + arr [ j ] + arr [ k ];\n  return sum;\n}", "target_program": " def maxTripletSum ( arr , n ) :\n    sm = - 1000000\n    for i in range ( 0 , n ) :\n        for j in range ( i + 1 , n ) :\n            for k in range ( j + 1 , n ) :\n                if ( sm < ( arr [ i ] + arr [ j ] + arr [ k ] ) ) :\n                    sm = arr [ i ] + arr [ j ] + arr [ k ]\n    return sm"}
{"source": "python", "target": "java", "source_program": " def Resources ( process , need ) :\n    minResources = 0\n    minResources = process * ( need - 1 ) + 1\n    return minResources", "target_program": " static int Resources ( int process , int need ) {\n  int minResources = 0 ;\n  minResources = process * ( need - 1 ) + 1 ;\n  return minResources ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def Resources ( process , need ) :\n    minResources = 0\n    minResources = process * ( need - 1 ) + 1\n    return minResources", "target_program": " int Resources ( int process, int need ) {\n  int minResources = 0;\n  minResources = process * ( need - 1 ) + 1;\n  return minResources;\n}"}
{"source": "java", "target": "python", "source_program": " static int Resources ( int process , int need ) {\n  int minResources = 0 ;\n  minResources = process * ( need - 1 ) + 1 ;\n  return minResources ;\n}", "target_program": " def Resources ( process , need ) :\n    minResources = 0\n    minResources = process * ( need - 1 ) + 1\n    return minResources"}
{"source": "java", "target": "cpp", "source_program": " static int Resources ( int process , int need ) {\n  int minResources = 0 ;\n  minResources = process * ( need - 1 ) + 1 ;\n  return minResources ;\n}", "target_program": " int Resources ( int process, int need ) {\n  int minResources = 0;\n  minResources = process * ( need - 1 ) + 1;\n  return minResources;\n}"}
{"source": "cpp", "target": "java", "source_program": " int Resources ( int process, int need ) {\n  int minResources = 0;\n  minResources = process * ( need - 1 ) + 1;\n  return minResources;\n}", "target_program": " static int Resources ( int process , int need ) {\n  int minResources = 0 ;\n  minResources = process * ( need - 1 ) + 1 ;\n  return minResources ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int Resources ( int process, int need ) {\n  int minResources = 0;\n  minResources = process * ( need - 1 ) + 1;\n  return minResources;\n}", "target_program": " def Resources ( process , need ) :\n    minResources = 0\n    minResources = process * ( need - 1 ) + 1\n    return minResources"}
{"source": "python", "target": "java", "source_program": " def countDigits ( a , b ) :\n    count = 0\n    p = abs ( a * b )\n    if ( p == 0 ) :\n        return 1\n    while ( p > 0 ) :\n        count = count + 1\n        p = p // 10\n    return count", "target_program": " static int countDigits ( int a , int b ) {\n  int count = 0 ;\n  int p = Math . abs ( a * b ) ;\n  if ( p == 0 ) return 1 ;\n  while ( p > 0 ) {\n    count ++ ;\n    p = p / 10 ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countDigits ( a , b ) :\n    count = 0\n    p = abs ( a * b )\n    if ( p == 0 ) :\n        return 1\n    while ( p > 0 ) :\n        count = count + 1\n        p = p // 10\n    return count", "target_program": " int countDigits ( int a, int b ) {\n  int count = 0;\n  int p = abs ( a * b );\n  if ( p == 0 ) return 1;\n  while ( p > 0 ) {\n    count ++;\n    p = p / 10;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countDigits ( int a , int b ) {\n  int count = 0 ;\n  int p = Math . abs ( a * b ) ;\n  if ( p == 0 ) return 1 ;\n  while ( p > 0 ) {\n    count ++ ;\n    p = p / 10 ;\n  }\n  return count ;\n}", "target_program": " def countDigits ( a , b ) :\n    count = 0\n    p = abs ( a * b )\n    if ( p == 0 ) :\n        return 1\n    while ( p > 0 ) :\n        count = count + 1\n        p = p // 10\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countDigits ( int a , int b ) {\n  int count = 0 ;\n  int p = Math . abs ( a * b ) ;\n  if ( p == 0 ) return 1 ;\n  while ( p > 0 ) {\n    count ++ ;\n    p = p / 10 ;\n  }\n  return count ;\n}", "target_program": " int countDigits ( int a, int b ) {\n  int count = 0;\n  int p = abs ( a * b );\n  if ( p == 0 ) return 1;\n  while ( p > 0 ) {\n    count ++;\n    p = p / 10;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countDigits ( int a, int b ) {\n  int count = 0;\n  int p = abs ( a * b );\n  if ( p == 0 ) return 1;\n  while ( p > 0 ) {\n    count ++;\n    p = p / 10;\n  }\n  return count;\n}", "target_program": " static int countDigits ( int a , int b ) {\n  int count = 0 ;\n  int p = Math . abs ( a * b ) ;\n  if ( p == 0 ) return 1 ;\n  while ( p > 0 ) {\n    count ++ ;\n    p = p / 10 ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countDigits ( int a, int b ) {\n  int count = 0;\n  int p = abs ( a * b );\n  if ( p == 0 ) return 1;\n  while ( p > 0 ) {\n    count ++;\n    p = p / 10;\n  }\n  return count;\n}", "target_program": " def countDigits ( a , b ) :\n    count = 0\n    p = abs ( a * b )\n    if ( p == 0 ) :\n        return 1\n    while ( p > 0 ) :\n        count = count + 1\n        p = p // 10\n    return count"}
{"source": "python", "target": "java", "source_program": " def floorSearch ( arr , low , high , x ) :\n    if ( low > high ) :\n        return - 1\n    if ( x >= arr [ high ] ) :\n        return high\n    mid = int ( ( low + high ) / 2 )\n    if ( arr [ mid ] == x ) :\n        return mid\n    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] ) :\n        return mid - 1\n    if ( x < arr [ mid ] ) :\n        return floorSearch ( arr , low , mid - 1 , x )\n    return floorSearch ( arr , mid + 1 , high , x )", "target_program": " static int floorSearch ( int arr [ ] , int n , int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1 ;\n  if ( x < arr [ 0 ] ) return - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def floorSearch ( arr , low , high , x ) :\n    if ( low > high ) :\n        return - 1\n    if ( x >= arr [ high ] ) :\n        return high\n    mid = int ( ( low + high ) / 2 )\n    if ( arr [ mid ] == x ) :\n        return mid\n    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] ) :\n        return mid - 1\n    if ( x < arr [ mid ] ) :\n        return floorSearch ( arr , low , mid - 1 , x )\n    return floorSearch ( arr , mid + 1 , high , x )", "target_program": " int floorSearch ( int arr [ ], int n, int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1;\n  if ( x < arr [ 0 ] ) return - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 );\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int floorSearch ( int arr [ ] , int n , int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1 ;\n  if ( x < arr [ 0 ] ) return - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;\n  return - 1 ;\n}", "target_program": " def floorSearch ( arr , low , high , x ) :\n    if ( low > high ) :\n        return - 1\n    if ( x >= arr [ high ] ) :\n        return high\n    mid = int ( ( low + high ) / 2 )\n    if ( arr [ mid ] == x ) :\n        return mid\n    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] ) :\n        return mid - 1\n    if ( x < arr [ mid ] ) :\n        return floorSearch ( arr , low , mid - 1 , x )\n    return floorSearch ( arr , mid + 1 , high , x )"}
{"source": "java", "target": "cpp", "source_program": " static int floorSearch ( int arr [ ] , int n , int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1 ;\n  if ( x < arr [ 0 ] ) return - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;\n  return - 1 ;\n}", "target_program": " int floorSearch ( int arr [ ], int n, int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1;\n  if ( x < arr [ 0 ] ) return - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 );\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int floorSearch ( int arr [ ], int n, int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1;\n  if ( x < arr [ 0 ] ) return - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 );\n  return - 1;\n}", "target_program": " static int floorSearch ( int arr [ ] , int n , int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1 ;\n  if ( x < arr [ 0 ] ) return - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 ) ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int floorSearch ( int arr [ ], int n, int x ) {\n  if ( x >= arr [ n - 1 ] ) return n - 1;\n  if ( x < arr [ 0 ] ) return - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > x ) return ( i - 1 );\n  return - 1;\n}", "target_program": " def floorSearch ( arr , low , high , x ) :\n    if ( low > high ) :\n        return - 1\n    if ( x >= arr [ high ] ) :\n        return high\n    mid = int ( ( low + high ) / 2 )\n    if ( arr [ mid ] == x ) :\n        return mid\n    if ( mid > 0 and arr [ mid - 1 ] <= x and x < arr [ mid ] ) :\n        return mid - 1\n    if ( x < arr [ mid ] ) :\n        return floorSearch ( arr , low , mid - 1 , x )\n    return floorSearch ( arr , mid + 1 , high , x )"}
{"source": "python", "target": "java", "source_program": " def printSpiral ( n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 - j ) )\n            if ( i <= j ) :\n                print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) , end = \"\\t\" )\n            else :\n                print ( ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) ) , end = \"\\t\" )\n        print ( )", "target_program": " static void printSpiral ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      int x ;\n      x = Math . min ( Math . min ( i , j ) , Math . min ( n - 1 - i , n - 1 - j ) ) ;\n      if ( i <= j ) System . out . print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) + \"\\t\" ) ;\n      else System . out . print ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) + \"\\t\" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSpiral ( n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 - j ) )\n            if ( i <= j ) :\n                print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) , end = \"\\t\" )\n            else :\n                print ( ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) ) , end = \"\\t\" )\n        print ( )", "target_program": " void printSpiral ( int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      int x;\n      x = min ( min ( i, j ), min ( n - 1 - i, n - 1 - j ) );\n      if ( i <= j ) printf ( \"%d\\t \", ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) );\n      else printf ( \"%d\\t \", ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) );\n    }\n    printf ( \"\\n\" );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printSpiral ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      int x ;\n      x = Math . min ( Math . min ( i , j ) , Math . min ( n - 1 - i , n - 1 - j ) ) ;\n      if ( i <= j ) System . out . print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) + \"\\t\" ) ;\n      else System . out . print ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) + \"\\t\" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " def printSpiral ( n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 - j ) )\n            if ( i <= j ) :\n                print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) , end = \"\\t\" )\n            else :\n                print ( ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) ) , end = \"\\t\" )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void printSpiral ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      int x ;\n      x = Math . min ( Math . min ( i , j ) , Math . min ( n - 1 - i , n - 1 - j ) ) ;\n      if ( i <= j ) System . out . print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) + \"\\t\" ) ;\n      else System . out . print ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) + \"\\t\" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " void printSpiral ( int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      int x;\n      x = min ( min ( i, j ), min ( n - 1 - i, n - 1 - j ) );\n      if ( i <= j ) printf ( \"%d\\t \", ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) );\n      else printf ( \"%d\\t \", ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) );\n    }\n    printf ( \"\\n\" );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSpiral ( int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      int x;\n      x = min ( min ( i, j ), min ( n - 1 - i, n - 1 - j ) );\n      if ( i <= j ) printf ( \"%d\\t \", ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) );\n      else printf ( \"%d\\t \", ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) );\n    }\n    printf ( \"\\n\" );\n  }\n}", "target_program": " static void printSpiral ( int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      int x ;\n      x = Math . min ( Math . min ( i , j ) , Math . min ( n - 1 - i , n - 1 - j ) ) ;\n      if ( i <= j ) System . out . print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) + \"\\t\" ) ;\n      else System . out . print ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) + \"\\t\" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSpiral ( int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      int x;\n      x = min ( min ( i, j ), min ( n - 1 - i, n - 1 - j ) );\n      if ( i <= j ) printf ( \"%d\\t \", ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) );\n      else printf ( \"%d\\t \", ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) );\n    }\n    printf ( \"\\n\" );\n  }\n}", "target_program": " def printSpiral ( n ) :\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            x = min ( min ( i , j ) , min ( n - 1 - i , n - 1 - j ) )\n            if ( i <= j ) :\n                print ( ( n - 2 * x ) * ( n - 2 * x ) - ( i - x ) - ( j - x ) , end = \"\\t\" )\n            else :\n                print ( ( ( n - 2 * x - 2 ) * ( n - 2 * x - 2 ) + ( i - x ) + ( j - x ) ) , end = \"\\t\" )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def getIndexInSortedArray ( arr , n , idx ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] < arr [ idx ] ) :\n            result += 1\n        if ( arr [ i ] == arr [ idx ] and i < idx ) :\n            result += 1\n    return result ;", "target_program": " static int getIndexInSortedArray ( int arr [ ] , int n , int idx ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++ ;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getIndexInSortedArray ( arr , n , idx ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] < arr [ idx ] ) :\n            result += 1\n        if ( arr [ i ] == arr [ idx ] and i < idx ) :\n            result += 1\n    return result ;", "target_program": " int getIndexInSortedArray ( int arr [ ], int n, int idx ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++;\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int getIndexInSortedArray ( int arr [ ] , int n , int idx ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++ ;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;\n  }\n  return result ;\n}", "target_program": " def getIndexInSortedArray ( arr , n , idx ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] < arr [ idx ] ) :\n            result += 1\n        if ( arr [ i ] == arr [ idx ] and i < idx ) :\n            result += 1\n    return result ;"}
{"source": "java", "target": "cpp", "source_program": " static int getIndexInSortedArray ( int arr [ ] , int n , int idx ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++ ;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;\n  }\n  return result ;\n}", "target_program": " int getIndexInSortedArray ( int arr [ ], int n, int idx ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++;\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getIndexInSortedArray ( int arr [ ], int n, int idx ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++;\n  }\n  return result;\n}", "target_program": " static int getIndexInSortedArray ( int arr [ ] , int n , int idx ) {\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++ ;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++ ;\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getIndexInSortedArray ( int arr [ ], int n, int idx ) {\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < arr [ idx ] ) result ++;\n    if ( arr [ i ] == arr [ idx ] && i < idx ) result ++;\n  }\n  return result;\n}", "target_program": " def getIndexInSortedArray ( arr , n , idx ) :\n    result = 0\n    for i in range ( n ) :\n        if ( arr [ i ] < arr [ idx ] ) :\n            result += 1\n        if ( arr [ i ] == arr [ idx ] and i < idx ) :\n            result += 1\n    return result ;"}
{"source": "python", "target": "java", "source_program": " def findMaxSegment ( s , k ) :\n    seg_len = len ( s ) - k\n    res = 0\n    for i in range ( seg_len ) :\n        res = res * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    seg_len_pow = pow ( 10 , seg_len - 1 )\n    curr_val = res\n    for i in range ( 1 , len ( s ) - seg_len ) :\n        curr_val = curr_val - ( ord ( s [ i - 1 ] ) - ord ( '0' ) ) * seg_len_pow\n        curr_val = ( curr_val * 10 + ( ord ( s [ i + seg_len - 1 ] ) - ord ( '0' ) ) )\n        res = max ( res , curr_val )\n    return res", "target_program": " static int findMaxSegment ( String s , int k ) {\n  int seg_len = s . length ( ) - k ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < seg_len ;\n  i ++ ) res = res * 10 + ( s . charAt ( i ) - '0' ) ;\n  int seg_len_pow = ( int ) Math . pow ( 10 , seg_len - 1 ) ;\n  int curr_val = res ;\n  for ( int i = 1 ;\n  i <= ( s . length ( ) - seg_len ) ;\n  i ++ ) {\n    curr_val = curr_val - ( s . charAt ( i - 1 ) - '0' ) * seg_len_pow ;\n    curr_val = curr_val * 10 + ( s . charAt ( i + seg_len - 1 ) - '0' ) ;\n    res = Math . max ( res , curr_val ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxSegment ( s , k ) :\n    seg_len = len ( s ) - k\n    res = 0\n    for i in range ( seg_len ) :\n        res = res * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    seg_len_pow = pow ( 10 , seg_len - 1 )\n    curr_val = res\n    for i in range ( 1 , len ( s ) - seg_len ) :\n        curr_val = curr_val - ( ord ( s [ i - 1 ] ) - ord ( '0' ) ) * seg_len_pow\n        curr_val = ( curr_val * 10 + ( ord ( s [ i + seg_len - 1 ] ) - ord ( '0' ) ) )\n        res = max ( res , curr_val )\n    return res", "target_program": " int findMaxSegment ( string & s, int k ) {\n  int seg_len = s . length ( ) - k;\n  int res = 0;\n  for ( int i = 0;\n  i < seg_len;\n  i ++ ) res = res * 10 + ( s [ i ] - '0' );\n  int seg_len_pow = pow ( 10, seg_len - 1 );\n  int curr_val = res;\n  for ( int i = 1;\n  i <= ( s . length ( ) - seg_len );\n  i ++ ) {\n    curr_val = curr_val - ( s [ i - 1 ] - '0' ) * seg_len_pow;\n    curr_val = curr_val * 10 + ( s [ i + seg_len - 1 ] - '0' );\n    res = max ( res, curr_val );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxSegment ( String s , int k ) {\n  int seg_len = s . length ( ) - k ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < seg_len ;\n  i ++ ) res = res * 10 + ( s . charAt ( i ) - '0' ) ;\n  int seg_len_pow = ( int ) Math . pow ( 10 , seg_len - 1 ) ;\n  int curr_val = res ;\n  for ( int i = 1 ;\n  i <= ( s . length ( ) - seg_len ) ;\n  i ++ ) {\n    curr_val = curr_val - ( s . charAt ( i - 1 ) - '0' ) * seg_len_pow ;\n    curr_val = curr_val * 10 + ( s . charAt ( i + seg_len - 1 ) - '0' ) ;\n    res = Math . max ( res , curr_val ) ;\n  }\n  return res ;\n}", "target_program": " def findMaxSegment ( s , k ) :\n    seg_len = len ( s ) - k\n    res = 0\n    for i in range ( seg_len ) :\n        res = res * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    seg_len_pow = pow ( 10 , seg_len - 1 )\n    curr_val = res\n    for i in range ( 1 , len ( s ) - seg_len ) :\n        curr_val = curr_val - ( ord ( s [ i - 1 ] ) - ord ( '0' ) ) * seg_len_pow\n        curr_val = ( curr_val * 10 + ( ord ( s [ i + seg_len - 1 ] ) - ord ( '0' ) ) )\n        res = max ( res , curr_val )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxSegment ( String s , int k ) {\n  int seg_len = s . length ( ) - k ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < seg_len ;\n  i ++ ) res = res * 10 + ( s . charAt ( i ) - '0' ) ;\n  int seg_len_pow = ( int ) Math . pow ( 10 , seg_len - 1 ) ;\n  int curr_val = res ;\n  for ( int i = 1 ;\n  i <= ( s . length ( ) - seg_len ) ;\n  i ++ ) {\n    curr_val = curr_val - ( s . charAt ( i - 1 ) - '0' ) * seg_len_pow ;\n    curr_val = curr_val * 10 + ( s . charAt ( i + seg_len - 1 ) - '0' ) ;\n    res = Math . max ( res , curr_val ) ;\n  }\n  return res ;\n}", "target_program": " int findMaxSegment ( string & s, int k ) {\n  int seg_len = s . length ( ) - k;\n  int res = 0;\n  for ( int i = 0;\n  i < seg_len;\n  i ++ ) res = res * 10 + ( s [ i ] - '0' );\n  int seg_len_pow = pow ( 10, seg_len - 1 );\n  int curr_val = res;\n  for ( int i = 1;\n  i <= ( s . length ( ) - seg_len );\n  i ++ ) {\n    curr_val = curr_val - ( s [ i - 1 ] - '0' ) * seg_len_pow;\n    curr_val = curr_val * 10 + ( s [ i + seg_len - 1 ] - '0' );\n    res = max ( res, curr_val );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxSegment ( string & s, int k ) {\n  int seg_len = s . length ( ) - k;\n  int res = 0;\n  for ( int i = 0;\n  i < seg_len;\n  i ++ ) res = res * 10 + ( s [ i ] - '0' );\n  int seg_len_pow = pow ( 10, seg_len - 1 );\n  int curr_val = res;\n  for ( int i = 1;\n  i <= ( s . length ( ) - seg_len );\n  i ++ ) {\n    curr_val = curr_val - ( s [ i - 1 ] - '0' ) * seg_len_pow;\n    curr_val = curr_val * 10 + ( s [ i + seg_len - 1 ] - '0' );\n    res = max ( res, curr_val );\n  }\n  return res;\n}", "target_program": " static int findMaxSegment ( String s , int k ) {\n  int seg_len = s . length ( ) - k ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < seg_len ;\n  i ++ ) res = res * 10 + ( s . charAt ( i ) - '0' ) ;\n  int seg_len_pow = ( int ) Math . pow ( 10 , seg_len - 1 ) ;\n  int curr_val = res ;\n  for ( int i = 1 ;\n  i <= ( s . length ( ) - seg_len ) ;\n  i ++ ) {\n    curr_val = curr_val - ( s . charAt ( i - 1 ) - '0' ) * seg_len_pow ;\n    curr_val = curr_val * 10 + ( s . charAt ( i + seg_len - 1 ) - '0' ) ;\n    res = Math . max ( res , curr_val ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxSegment ( string & s, int k ) {\n  int seg_len = s . length ( ) - k;\n  int res = 0;\n  for ( int i = 0;\n  i < seg_len;\n  i ++ ) res = res * 10 + ( s [ i ] - '0' );\n  int seg_len_pow = pow ( 10, seg_len - 1 );\n  int curr_val = res;\n  for ( int i = 1;\n  i <= ( s . length ( ) - seg_len );\n  i ++ ) {\n    curr_val = curr_val - ( s [ i - 1 ] - '0' ) * seg_len_pow;\n    curr_val = curr_val * 10 + ( s [ i + seg_len - 1 ] - '0' );\n    res = max ( res, curr_val );\n  }\n  return res;\n}", "target_program": " def findMaxSegment ( s , k ) :\n    seg_len = len ( s ) - k\n    res = 0\n    for i in range ( seg_len ) :\n        res = res * 10 + ( ord ( s [ i ] ) - ord ( '0' ) )\n    seg_len_pow = pow ( 10 , seg_len - 1 )\n    curr_val = res\n    for i in range ( 1 , len ( s ) - seg_len ) :\n        curr_val = curr_val - ( ord ( s [ i - 1 ] ) - ord ( '0' ) ) * seg_len_pow\n        curr_val = ( curr_val * 10 + ( ord ( s [ i + seg_len - 1 ] ) - ord ( '0' ) ) )\n        res = max ( res , curr_val )\n    return res"}
{"source": "python", "target": "java", "source_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0\n    temp = p\n    while ( temp <= n ) :\n        ans += n / temp\n        temp = temp * p\n    return int ( ans )", "target_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  int temp = p ;\n  while ( temp <= n ) {\n    ans += n / temp ;\n    temp = temp * p ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0\n    temp = p\n    while ( temp <= n ) :\n        ans += n / temp\n        temp = temp * p\n    return int ( ans )", "target_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  int temp = p ;\n  while ( temp <= n ) {\n    ans += n / temp ;\n    temp = temp * p ;\n  }\n  return ans ;\n}", "target_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0\n    temp = p\n    while ( temp <= n ) :\n        ans += n / temp\n        temp = temp * p\n    return int ( ans )"}
{"source": "java", "target": "cpp", "source_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  int temp = p ;\n  while ( temp <= n ) {\n    ans += n / temp ;\n    temp = temp * p ;\n  }\n  return ans ;\n}", "target_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}", "target_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  int temp = p ;\n  while ( temp <= n ) {\n    ans += n / temp ;\n    temp = temp * p ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}", "target_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0\n    temp = p\n    while ( temp <= n ) :\n        ans += n / temp\n        temp = temp * p\n    return int ( ans )"}
{"source": "python", "target": "java", "source_program": " def Identity ( size ) :\n    for row in range ( 0 , size ) :\n        for col in range ( 0 , size ) :\n            if ( row == col ) :\n                print ( \"1 \" , end = \" \" )\n            else :\n                print ( \"0 \" , end = \" \" )\n        print ( )", "target_program": " static int identity ( int num ) {\n  int row , col ;\n  for ( row = 0 ;\n  row < num ;\n  row ++ ) {\n    for ( col = 0 ;\n    col < num ;\n    col ++ ) {\n      if ( row == col ) System . out . print ( 1 + \" \" ) ;\n      else System . out . print ( 0 + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n  return 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def Identity ( size ) :\n    for row in range ( 0 , size ) :\n        for col in range ( 0 , size ) :\n            if ( row == col ) :\n                print ( \"1 \" , end = \" \" )\n            else :\n                print ( \"0 \" , end = \" \" )\n        print ( )", "target_program": " int Identity ( int num ) {\n  int row, col;\n  for ( row = 0;\n  row < num;\n  row ++ ) {\n    for ( col = 0;\n    col < num;\n    col ++ ) {\n      if ( row == col ) cout << 1 << \" \";\n      else cout << 0 << \" \";\n    }\n    cout << endl;\n  }\n  return 0;\n}"}
{"source": "java", "target": "python", "source_program": " static int identity ( int num ) {\n  int row , col ;\n  for ( row = 0 ;\n  row < num ;\n  row ++ ) {\n    for ( col = 0 ;\n    col < num ;\n    col ++ ) {\n      if ( row == col ) System . out . print ( 1 + \" \" ) ;\n      else System . out . print ( 0 + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n  return 0 ;\n}", "target_program": " def Identity ( size ) :\n    for row in range ( 0 , size ) :\n        for col in range ( 0 , size ) :\n            if ( row == col ) :\n                print ( \"1 \" , end = \" \" )\n            else :\n                print ( \"0 \" , end = \" \" )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " static int identity ( int num ) {\n  int row , col ;\n  for ( row = 0 ;\n  row < num ;\n  row ++ ) {\n    for ( col = 0 ;\n    col < num ;\n    col ++ ) {\n      if ( row == col ) System . out . print ( 1 + \" \" ) ;\n      else System . out . print ( 0 + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n  return 0 ;\n}", "target_program": " int Identity ( int num ) {\n  int row, col;\n  for ( row = 0;\n  row < num;\n  row ++ ) {\n    for ( col = 0;\n    col < num;\n    col ++ ) {\n      if ( row == col ) cout << 1 << \" \";\n      else cout << 0 << \" \";\n    }\n    cout << endl;\n  }\n  return 0;\n}"}
{"source": "cpp", "target": "java", "source_program": " int Identity ( int num ) {\n  int row, col;\n  for ( row = 0;\n  row < num;\n  row ++ ) {\n    for ( col = 0;\n    col < num;\n    col ++ ) {\n      if ( row == col ) cout << 1 << \" \";\n      else cout << 0 << \" \";\n    }\n    cout << endl;\n  }\n  return 0;\n}", "target_program": " static int identity ( int num ) {\n  int row , col ;\n  for ( row = 0 ;\n  row < num ;\n  row ++ ) {\n    for ( col = 0 ;\n    col < num ;\n    col ++ ) {\n      if ( row == col ) System . out . print ( 1 + \" \" ) ;\n      else System . out . print ( 0 + \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n  return 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int Identity ( int num ) {\n  int row, col;\n  for ( row = 0;\n  row < num;\n  row ++ ) {\n    for ( col = 0;\n    col < num;\n    col ++ ) {\n      if ( row == col ) cout << 1 << \" \";\n      else cout << 0 << \" \";\n    }\n    cout << endl;\n  }\n  return 0;\n}", "target_program": " def Identity ( size ) :\n    for row in range ( 0 , size ) :\n        for col in range ( 0 , size ) :\n            if ( row == col ) :\n                print ( \"1 \" , end = \" \" )\n            else :\n                print ( \"0 \" , end = \" \" )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def findSum ( N ) :\n    ans = 0\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , N + 1 ) :\n            ans += i // j\n    return ans", "target_program": " static int findSum ( int n ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) ans += ( i / j ) ;\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSum ( N ) :\n    ans = 0\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , N + 1 ) :\n            ans += i // j\n    return ans", "target_program": " int findSum ( int n ) {\n  int ans = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) ans += ( i / j );\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findSum ( int n ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) ans += ( i / j ) ;\n  return ans ;\n}", "target_program": " def findSum ( N ) :\n    ans = 0\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , N + 1 ) :\n            ans += i // j\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findSum ( int n ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) ans += ( i / j ) ;\n  return ans ;\n}", "target_program": " int findSum ( int n ) {\n  int ans = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) ans += ( i / j );\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSum ( int n ) {\n  int ans = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) ans += ( i / j );\n  return ans;\n}", "target_program": " static int findSum ( int n ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) ans += ( i / j ) ;\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSum ( int n ) {\n  int ans = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) ans += ( i / j );\n  return ans;\n}", "target_program": " def findSum ( N ) :\n    ans = 0\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , N + 1 ) :\n            ans += i // j\n    return ans"}
{"source": "python", "target": "java", "source_program": " def countWays ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n    return A [ n ]", "target_program": " static int countWays ( int n ) {\n  int [ ] A = new int [ n + 1 ] ;\n  int [ ] B = new int [ n + 1 ] ;\n  A [ 0 ] = 1 ;\n  A [ 1 ] = 0 ;\n  B [ 0 ] = 0 ;\n  B [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;\n  }\n  return A [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWays ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n    return A [ n ]", "target_program": " int countWays ( int n ) {\n  int A [ n + 1 ], B [ n + 1 ];\n  A [ 0 ] = 1, A [ 1 ] = 0, B [ 0 ] = 0, B [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ];\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ];\n  }\n  return A [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countWays ( int n ) {\n  int [ ] A = new int [ n + 1 ] ;\n  int [ ] B = new int [ n + 1 ] ;\n  A [ 0 ] = 1 ;\n  A [ 1 ] = 0 ;\n  B [ 0 ] = 0 ;\n  B [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;\n  }\n  return A [ n ] ;\n}", "target_program": " def countWays ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n    return A [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countWays ( int n ) {\n  int [ ] A = new int [ n + 1 ] ;\n  int [ ] B = new int [ n + 1 ] ;\n  A [ 0 ] = 1 ;\n  A [ 1 ] = 0 ;\n  B [ 0 ] = 0 ;\n  B [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;\n  }\n  return A [ n ] ;\n}", "target_program": " int countWays ( int n ) {\n  int A [ n + 1 ], B [ n + 1 ];\n  A [ 0 ] = 1, A [ 1 ] = 0, B [ 0 ] = 0, B [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ];\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ];\n  }\n  return A [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countWays ( int n ) {\n  int A [ n + 1 ], B [ n + 1 ];\n  A [ 0 ] = 1, A [ 1 ] = 0, B [ 0 ] = 0, B [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ];\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ];\n  }\n  return A [ n ];\n}", "target_program": " static int countWays ( int n ) {\n  int [ ] A = new int [ n + 1 ] ;\n  int [ ] B = new int [ n + 1 ] ;\n  A [ 0 ] = 1 ;\n  A [ 1 ] = 0 ;\n  B [ 0 ] = 0 ;\n  B [ 1 ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ] ;\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ] ;\n  }\n  return A [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countWays ( int n ) {\n  int A [ n + 1 ], B [ n + 1 ];\n  A [ 0 ] = 1, A [ 1 ] = 0, B [ 0 ] = 0, B [ 1 ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ];\n    B [ i ] = A [ i - 1 ] + B [ i - 2 ];\n  }\n  return A [ n ];\n}", "target_program": " def countWays ( n ) :\n    A = [ 0 ] * ( n + 1 )\n    B = [ 0 ] * ( n + 1 )\n    A [ 0 ] = 1\n    A [ 1 ] = 0\n    B [ 0 ] = 0\n    B [ 1 ] = 1\n    for i in range ( 2 , n + 1 ) :\n        A [ i ] = A [ i - 2 ] + 2 * B [ i - 1 ]\n        B [ i ] = A [ i - 1 ] + B [ i - 2 ]\n    return A [ n ]"}
{"source": "python", "target": "java", "source_program": " def countDer ( n ) :\n    if ( n == 1 ) : return 0\n    if ( n == 0 ) : return 1\n    if ( n == 2 ) : return 1\n    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) )", "target_program": " static int countDer ( int n ) {\n  if ( n == 1 ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 2 ) return 1 ;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countDer ( n ) :\n    if ( n == 1 ) : return 0\n    if ( n == 0 ) : return 1\n    if ( n == 2 ) : return 1\n    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) )", "target_program": " int countDer ( int n ) {\n  if ( n == 1 ) return 0;\n  if ( n == 0 ) return 1;\n  if ( n == 2 ) return 1;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int countDer ( int n ) {\n  if ( n == 1 ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 2 ) return 1 ;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) ) ;\n}", "target_program": " def countDer ( n ) :\n    if ( n == 1 ) : return 0\n    if ( n == 0 ) : return 1\n    if ( n == 2 ) : return 1\n    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int countDer ( int n ) {\n  if ( n == 1 ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 2 ) return 1 ;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) ) ;\n}", "target_program": " int countDer ( int n ) {\n  if ( n == 1 ) return 0;\n  if ( n == 0 ) return 1;\n  if ( n == 2 ) return 1;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countDer ( int n ) {\n  if ( n == 1 ) return 0;\n  if ( n == 0 ) return 1;\n  if ( n == 2 ) return 1;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) );\n}", "target_program": " static int countDer ( int n ) {\n  if ( n == 1 ) return 0 ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 2 ) return 1 ;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countDer ( int n ) {\n  if ( n == 1 ) return 0;\n  if ( n == 0 ) return 1;\n  if ( n == 2 ) return 1;\n  return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) );\n}", "target_program": " def countDer ( n ) :\n    if ( n == 1 ) : return 0\n    if ( n == 0 ) : return 1\n    if ( n == 2 ) : return 1\n    return ( n - 1 ) * ( countDer ( n - 1 ) + countDer ( n - 2 ) )"}
{"source": "python", "target": "java", "source_program": " def countFreq ( a , n ) :\n    hm = dict ( )\n    for i in range ( n ) :\n        hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1\n    cumul = 0\n    for i in range ( n ) :\n        cumul += hm [ a [ i ] ]\n        if ( hm [ a [ i ] ] > 0 ) :\n            print ( a [ i ] , \"->\" , cumul )\n        hm [ a [ i ] ] = 0", "target_program": " static void countFreq ( int a [ ] , int n ) {\n  int hm [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) hm [ a [ i ] ] ++ ;\n  int cumul = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    cumul += hm [ a [ i ] ] ;\n    if ( hm [ a [ i ] ] != 0 ) {\n      System . out . println ( a [ i ] + \"->\" + cumul ) ;\n    }\n    hm [ a [ i ] ] = 0 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def countFreq ( a , n ) :\n    hm = dict ( )\n    for i in range ( n ) :\n        hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1\n    cumul = 0\n    for i in range ( n ) :\n        cumul += hm [ a [ i ] ]\n        if ( hm [ a [ i ] ] > 0 ) :\n            print ( a [ i ] , \"->\" , cumul )\n        hm [ a [ i ] ] = 0", "target_program": " void countFreq ( int a [ ], int n ) {\n  unordered_map < int, int > hm;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hm [ a [ i ] ] ++;\n  int cumul = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cumul += hm [ a [ i ] ];\n    if ( hm [ a [ i ] ] ) {\n      cout << a [ i ] << \"->\" << cumul << endl;\n    }\n    hm [ a [ i ] ] = 0;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void countFreq ( int a [ ] , int n ) {\n  int hm [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) hm [ a [ i ] ] ++ ;\n  int cumul = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    cumul += hm [ a [ i ] ] ;\n    if ( hm [ a [ i ] ] != 0 ) {\n      System . out . println ( a [ i ] + \"->\" + cumul ) ;\n    }\n    hm [ a [ i ] ] = 0 ;\n  }\n}", "target_program": " def countFreq ( a , n ) :\n    hm = dict ( )\n    for i in range ( n ) :\n        hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1\n    cumul = 0\n    for i in range ( n ) :\n        cumul += hm [ a [ i ] ]\n        if ( hm [ a [ i ] ] > 0 ) :\n            print ( a [ i ] , \"->\" , cumul )\n        hm [ a [ i ] ] = 0"}
{"source": "java", "target": "cpp", "source_program": " static void countFreq ( int a [ ] , int n ) {\n  int hm [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) hm [ a [ i ] ] ++ ;\n  int cumul = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    cumul += hm [ a [ i ] ] ;\n    if ( hm [ a [ i ] ] != 0 ) {\n      System . out . println ( a [ i ] + \"->\" + cumul ) ;\n    }\n    hm [ a [ i ] ] = 0 ;\n  }\n}", "target_program": " void countFreq ( int a [ ], int n ) {\n  unordered_map < int, int > hm;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hm [ a [ i ] ] ++;\n  int cumul = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cumul += hm [ a [ i ] ];\n    if ( hm [ a [ i ] ] ) {\n      cout << a [ i ] << \"->\" << cumul << endl;\n    }\n    hm [ a [ i ] ] = 0;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void countFreq ( int a [ ], int n ) {\n  unordered_map < int, int > hm;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hm [ a [ i ] ] ++;\n  int cumul = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cumul += hm [ a [ i ] ];\n    if ( hm [ a [ i ] ] ) {\n      cout << a [ i ] << \"->\" << cumul << endl;\n    }\n    hm [ a [ i ] ] = 0;\n  }\n}", "target_program": " static void countFreq ( int a [ ] , int n ) {\n  int hm [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) hm [ a [ i ] ] ++ ;\n  int cumul = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    cumul += hm [ a [ i ] ] ;\n    if ( hm [ a [ i ] ] != 0 ) {\n      System . out . println ( a [ i ] + \"->\" + cumul ) ;\n    }\n    hm [ a [ i ] ] = 0 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void countFreq ( int a [ ], int n ) {\n  unordered_map < int, int > hm;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hm [ a [ i ] ] ++;\n  int cumul = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cumul += hm [ a [ i ] ];\n    if ( hm [ a [ i ] ] ) {\n      cout << a [ i ] << \"->\" << cumul << endl;\n    }\n    hm [ a [ i ] ] = 0;\n  }\n}", "target_program": " def countFreq ( a , n ) :\n    hm = dict ( )\n    for i in range ( n ) :\n        hm [ a [ i ] ] = hm.get ( a [ i ] , 0 ) + 1\n    cumul = 0\n    for i in range ( n ) :\n        cumul += hm [ a [ i ] ]\n        if ( hm [ a [ i ] ] > 0 ) :\n            print ( a [ i ] , \"->\" , cumul )\n        hm [ a [ i ] ] = 0"}
{"source": "python", "target": "java", "source_program": " def minSum ( n ) :\n    sum = 0 ;\n    while ( n > 0 ) :\n        sum += ( n % 10 ) ;\n        n //= 10 ;\n    if ( sum == 1 ) :\n        return 10 ;\n    return sum ;", "target_program": " static int minSum ( int n ) {\n  int sum = 0 ;\n  while ( n > 0 ) {\n    sum += ( n % 10 ) ;\n    n /= 10 ;\n  }\n  if ( sum == 1 ) return 10 ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minSum ( n ) :\n    sum = 0 ;\n    while ( n > 0 ) :\n        sum += ( n % 10 ) ;\n        n //= 10 ;\n    if ( sum == 1 ) :\n        return 10 ;\n    return sum ;", "target_program": " int minSum ( int n ) {\n  int sum = 0;\n  while ( n > 0 ) {\n    sum += ( n % 10 );\n    n /= 10;\n  }\n  if ( sum == 1 ) return 10;\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int minSum ( int n ) {\n  int sum = 0 ;\n  while ( n > 0 ) {\n    sum += ( n % 10 ) ;\n    n /= 10 ;\n  }\n  if ( sum == 1 ) return 10 ;\n  return sum ;\n}", "target_program": " def minSum ( n ) :\n    sum = 0 ;\n    while ( n > 0 ) :\n        sum += ( n % 10 ) ;\n        n //= 10 ;\n    if ( sum == 1 ) :\n        return 10 ;\n    return sum ;"}
{"source": "java", "target": "cpp", "source_program": " static int minSum ( int n ) {\n  int sum = 0 ;\n  while ( n > 0 ) {\n    sum += ( n % 10 ) ;\n    n /= 10 ;\n  }\n  if ( sum == 1 ) return 10 ;\n  return sum ;\n}", "target_program": " int minSum ( int n ) {\n  int sum = 0;\n  while ( n > 0 ) {\n    sum += ( n % 10 );\n    n /= 10;\n  }\n  if ( sum == 1 ) return 10;\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minSum ( int n ) {\n  int sum = 0;\n  while ( n > 0 ) {\n    sum += ( n % 10 );\n    n /= 10;\n  }\n  if ( sum == 1 ) return 10;\n  return sum;\n}", "target_program": " static int minSum ( int n ) {\n  int sum = 0 ;\n  while ( n > 0 ) {\n    sum += ( n % 10 ) ;\n    n /= 10 ;\n  }\n  if ( sum == 1 ) return 10 ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minSum ( int n ) {\n  int sum = 0;\n  while ( n > 0 ) {\n    sum += ( n % 10 );\n    n /= 10;\n  }\n  if ( sum == 1 ) return 10;\n  return sum;\n}", "target_program": " def minSum ( n ) :\n    sum = 0 ;\n    while ( n > 0 ) :\n        sum += ( n % 10 ) ;\n        n //= 10 ;\n    if ( sum == 1 ) :\n        return 10 ;\n    return sum ;"}
{"source": "python", "target": "java", "source_program": " def maximizecube ( l , b , h ) :\n    side = gcd ( l , gcd ( b , h ) )\n    num = int ( l / side )\n    num = int ( num * b / side )\n    num = int ( num * h / side )\n    print ( side , num )", "target_program": " static void maximizecube ( int l , int b , int h ) {\n  int side = gcd ( l , gcd ( b , h ) ) ;\n  int num = l / side ;\n  num = ( num * b / side ) ;\n  num = ( num * h / side ) ;\n  System . out . println ( side + \" \" + num ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximizecube ( l , b , h ) :\n    side = gcd ( l , gcd ( b , h ) )\n    num = int ( l / side )\n    num = int ( num * b / side )\n    num = int ( num * h / side )\n    print ( side , num )", "target_program": " void maximizecube ( int l, int b, int h ) {\n  int side = __gcd ( l, __gcd ( b, h ) );\n  int num = l / side;\n  num = ( num * b / side );\n  num = ( num * h / side );\n  cout << side << \" \" << num << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void maximizecube ( int l , int b , int h ) {\n  int side = gcd ( l , gcd ( b , h ) ) ;\n  int num = l / side ;\n  num = ( num * b / side ) ;\n  num = ( num * h / side ) ;\n  System . out . println ( side + \" \" + num ) ;\n}", "target_program": " def maximizecube ( l , b , h ) :\n    side = gcd ( l , gcd ( b , h ) )\n    num = int ( l / side )\n    num = int ( num * b / side )\n    num = int ( num * h / side )\n    print ( side , num )"}
{"source": "java", "target": "cpp", "source_program": " static void maximizecube ( int l , int b , int h ) {\n  int side = gcd ( l , gcd ( b , h ) ) ;\n  int num = l / side ;\n  num = ( num * b / side ) ;\n  num = ( num * h / side ) ;\n  System . out . println ( side + \" \" + num ) ;\n}", "target_program": " void maximizecube ( int l, int b, int h ) {\n  int side = __gcd ( l, __gcd ( b, h ) );\n  int num = l / side;\n  num = ( num * b / side );\n  num = ( num * h / side );\n  cout << side << \" \" << num << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void maximizecube ( int l, int b, int h ) {\n  int side = __gcd ( l, __gcd ( b, h ) );\n  int num = l / side;\n  num = ( num * b / side );\n  num = ( num * h / side );\n  cout << side << \" \" << num << endl;\n}", "target_program": " static void maximizecube ( int l , int b , int h ) {\n  int side = gcd ( l , gcd ( b , h ) ) ;\n  int num = l / side ;\n  num = ( num * b / side ) ;\n  num = ( num * h / side ) ;\n  System . out . println ( side + \" \" + num ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void maximizecube ( int l, int b, int h ) {\n  int side = __gcd ( l, __gcd ( b, h ) );\n  int num = l / side;\n  num = ( num * b / side );\n  num = ( num * h / side );\n  cout << side << \" \" << num << endl;\n}", "target_program": " def maximizecube ( l , b , h ) :\n    side = gcd ( l , gcd ( b , h ) )\n    num = int ( l / side )\n    num = int ( num * b / side )\n    num = int ( num * h / side )\n    print ( side , num )"}
{"source": "python", "target": "java", "source_program": " def isPowerOfK ( n , k ) :\n    oneSeen = False\n    while ( n > 0 ) :\n        digit = n % k\n        if ( digit > 1 ) :\n            return False\n        if ( digit == 1 ) :\n            if ( oneSeen ) :\n                return False\n            oneSeen = True\n        n //= k\n    return True", "target_program": " static boolean isPowerOfK ( int n , int k ) {\n  boolean oneSeen = false ;\n  while ( n > 0 ) {\n    int digit = n % k ;\n    if ( digit > 1 ) return false ;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false ;\n      oneSeen = true ;\n    }\n    n /= k ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPowerOfK ( n , k ) :\n    oneSeen = False\n    while ( n > 0 ) :\n        digit = n % k\n        if ( digit > 1 ) :\n            return False\n        if ( digit == 1 ) :\n            if ( oneSeen ) :\n                return False\n            oneSeen = True\n        n //= k\n    return True", "target_program": " bool isPowerOfK ( unsigned int n, unsigned int k ) {\n  bool oneSeen = false;\n  while ( n > 0 ) {\n    int digit = n % k;\n    if ( digit > 1 ) return false;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false;\n      oneSeen = true;\n    }\n    n /= k;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPowerOfK ( int n , int k ) {\n  boolean oneSeen = false ;\n  while ( n > 0 ) {\n    int digit = n % k ;\n    if ( digit > 1 ) return false ;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false ;\n      oneSeen = true ;\n    }\n    n /= k ;\n  }\n  return true ;\n}", "target_program": " def isPowerOfK ( n , k ) :\n    oneSeen = False\n    while ( n > 0 ) :\n        digit = n % k\n        if ( digit > 1 ) :\n            return False\n        if ( digit == 1 ) :\n            if ( oneSeen ) :\n                return False\n            oneSeen = True\n        n //= k\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPowerOfK ( int n , int k ) {\n  boolean oneSeen = false ;\n  while ( n > 0 ) {\n    int digit = n % k ;\n    if ( digit > 1 ) return false ;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false ;\n      oneSeen = true ;\n    }\n    n /= k ;\n  }\n  return true ;\n}", "target_program": " bool isPowerOfK ( unsigned int n, unsigned int k ) {\n  bool oneSeen = false;\n  while ( n > 0 ) {\n    int digit = n % k;\n    if ( digit > 1 ) return false;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false;\n      oneSeen = true;\n    }\n    n /= k;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPowerOfK ( unsigned int n, unsigned int k ) {\n  bool oneSeen = false;\n  while ( n > 0 ) {\n    int digit = n % k;\n    if ( digit > 1 ) return false;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false;\n      oneSeen = true;\n    }\n    n /= k;\n  }\n  return true;\n}", "target_program": " static boolean isPowerOfK ( int n , int k ) {\n  boolean oneSeen = false ;\n  while ( n > 0 ) {\n    int digit = n % k ;\n    if ( digit > 1 ) return false ;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false ;\n      oneSeen = true ;\n    }\n    n /= k ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPowerOfK ( unsigned int n, unsigned int k ) {\n  bool oneSeen = false;\n  while ( n > 0 ) {\n    int digit = n % k;\n    if ( digit > 1 ) return false;\n    if ( digit == 1 ) {\n      if ( oneSeen ) return false;\n      oneSeen = true;\n    }\n    n /= k;\n  }\n  return true;\n}", "target_program": " def isPowerOfK ( n , k ) :\n    oneSeen = False\n    while ( n > 0 ) :\n        digit = n % k\n        if ( digit > 1 ) :\n            return False\n        if ( digit == 1 ) :\n            if ( oneSeen ) :\n                return False\n            oneSeen = True\n        n //= k\n    return True"}
{"source": "python", "target": "java", "source_program": " def PositionRightmostSetbit ( n ) :\n    position = 1\n    m = 1\n    while ( not ( n & m ) ) :\n        m = m << 1\n        position += 1\n    return position", "target_program": " static int PositionRightmostSetbit ( int n ) {\n  int position = 1 ;\n  int m = 1 ;\n  while ( ( n & m ) == 0 ) {\n    m = m << 1 ;\n    position ++ ;\n  }\n  return position ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def PositionRightmostSetbit ( n ) :\n    position = 1\n    m = 1\n    while ( not ( n & m ) ) :\n        m = m << 1\n        position += 1\n    return position", "target_program": " int PositionRightmostSetbit ( int n ) {\n  int position = 1;\n  int m = 1;\n  while ( ! ( n & m ) ) {\n    m = m << 1;\n    position ++;\n  }\n  return position;\n}"}
{"source": "java", "target": "python", "source_program": " static int PositionRightmostSetbit ( int n ) {\n  int position = 1 ;\n  int m = 1 ;\n  while ( ( n & m ) == 0 ) {\n    m = m << 1 ;\n    position ++ ;\n  }\n  return position ;\n}", "target_program": " def PositionRightmostSetbit ( n ) :\n    position = 1\n    m = 1\n    while ( not ( n & m ) ) :\n        m = m << 1\n        position += 1\n    return position"}
{"source": "java", "target": "cpp", "source_program": " static int PositionRightmostSetbit ( int n ) {\n  int position = 1 ;\n  int m = 1 ;\n  while ( ( n & m ) == 0 ) {\n    m = m << 1 ;\n    position ++ ;\n  }\n  return position ;\n}", "target_program": " int PositionRightmostSetbit ( int n ) {\n  int position = 1;\n  int m = 1;\n  while ( ! ( n & m ) ) {\n    m = m << 1;\n    position ++;\n  }\n  return position;\n}"}
{"source": "cpp", "target": "java", "source_program": " int PositionRightmostSetbit ( int n ) {\n  int position = 1;\n  int m = 1;\n  while ( ! ( n & m ) ) {\n    m = m << 1;\n    position ++;\n  }\n  return position;\n}", "target_program": " static int PositionRightmostSetbit ( int n ) {\n  int position = 1 ;\n  int m = 1 ;\n  while ( ( n & m ) == 0 ) {\n    m = m << 1 ;\n    position ++ ;\n  }\n  return position ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int PositionRightmostSetbit ( int n ) {\n  int position = 1;\n  int m = 1;\n  while ( ! ( n & m ) ) {\n    m = m << 1;\n    position ++;\n  }\n  return position;\n}", "target_program": " def PositionRightmostSetbit ( n ) :\n    position = 1\n    m = 1\n    while ( not ( n & m ) ) :\n        m = m << 1\n        position += 1\n    return position"}
{"source": "python", "target": "java", "source_program": " def insertSorted ( arr , n , key , capacity ) :\n    if ( n >= capacity ) :\n        return n\n    i = n - 1\n    while i >= 0 and arr [ i ] > key :\n        arr [ i + 1 ] = arr [ i ]\n        i -= 1\n    arr [ i + 1 ] = key\n    return ( n + 1 )", "target_program": " static int insertSorted ( int arr [ ] , int n , int key , int capacity ) {\n  if ( n >= capacity ) return n ;\n  int i ;\n  for ( i = n - 1 ;\n  ( i >= 0 && arr [ i ] > key ) ;\n  i -- ) arr [ i + 1 ] = arr [ i ] ;\n  arr [ i + 1 ] = key ;\n  return ( n + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def insertSorted ( arr , n , key , capacity ) :\n    if ( n >= capacity ) :\n        return n\n    i = n - 1\n    while i >= 0 and arr [ i ] > key :\n        arr [ i + 1 ] = arr [ i ]\n        i -= 1\n    arr [ i + 1 ] = key\n    return ( n + 1 )", "target_program": " int insertSorted ( int arr [ ], int n, int key, int capacity ) {\n  if ( n >= capacity ) return n;\n  int i;\n  for ( i = n - 1;\n  ( i >= 0 && arr [ i ] > key );\n  i -- ) arr [ i + 1 ] = arr [ i ];\n  arr [ i + 1 ] = key;\n  return ( n + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int insertSorted ( int arr [ ] , int n , int key , int capacity ) {\n  if ( n >= capacity ) return n ;\n  int i ;\n  for ( i = n - 1 ;\n  ( i >= 0 && arr [ i ] > key ) ;\n  i -- ) arr [ i + 1 ] = arr [ i ] ;\n  arr [ i + 1 ] = key ;\n  return ( n + 1 ) ;\n}", "target_program": " def insertSorted ( arr , n , key , capacity ) :\n    if ( n >= capacity ) :\n        return n\n    i = n - 1\n    while i >= 0 and arr [ i ] > key :\n        arr [ i + 1 ] = arr [ i ]\n        i -= 1\n    arr [ i + 1 ] = key\n    return ( n + 1 )"}
{"source": "java", "target": "cpp", "source_program": " static int insertSorted ( int arr [ ] , int n , int key , int capacity ) {\n  if ( n >= capacity ) return n ;\n  int i ;\n  for ( i = n - 1 ;\n  ( i >= 0 && arr [ i ] > key ) ;\n  i -- ) arr [ i + 1 ] = arr [ i ] ;\n  arr [ i + 1 ] = key ;\n  return ( n + 1 ) ;\n}", "target_program": " int insertSorted ( int arr [ ], int n, int key, int capacity ) {\n  if ( n >= capacity ) return n;\n  int i;\n  for ( i = n - 1;\n  ( i >= 0 && arr [ i ] > key );\n  i -- ) arr [ i + 1 ] = arr [ i ];\n  arr [ i + 1 ] = key;\n  return ( n + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int insertSorted ( int arr [ ], int n, int key, int capacity ) {\n  if ( n >= capacity ) return n;\n  int i;\n  for ( i = n - 1;\n  ( i >= 0 && arr [ i ] > key );\n  i -- ) arr [ i + 1 ] = arr [ i ];\n  arr [ i + 1 ] = key;\n  return ( n + 1 );\n}", "target_program": " static int insertSorted ( int arr [ ] , int n , int key , int capacity ) {\n  if ( n >= capacity ) return n ;\n  int i ;\n  for ( i = n - 1 ;\n  ( i >= 0 && arr [ i ] > key ) ;\n  i -- ) arr [ i + 1 ] = arr [ i ] ;\n  arr [ i + 1 ] = key ;\n  return ( n + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int insertSorted ( int arr [ ], int n, int key, int capacity ) {\n  if ( n >= capacity ) return n;\n  int i;\n  for ( i = n - 1;\n  ( i >= 0 && arr [ i ] > key );\n  i -- ) arr [ i + 1 ] = arr [ i ];\n  arr [ i + 1 ] = key;\n  return ( n + 1 );\n}", "target_program": " def insertSorted ( arr , n , key , capacity ) :\n    if ( n >= capacity ) :\n        return n\n    i = n - 1\n    while i >= 0 and arr [ i ] > key :\n        arr [ i + 1 ] = arr [ i ]\n        i -= 1\n    arr [ i + 1 ] = key\n    return ( n + 1 )"}
{"source": "python", "target": "java", "source_program": " def printMaxOfMin ( arr , n ) :\n    s = [ ]\n    left = [ - 1 ] * ( n + 1 )\n    right = [ n ] * ( n + 1 )\n    for i in range ( n ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            left [ i ] = s [ - 1 ]\n        s.append ( i )\n    while ( len ( s ) != 0 ) :\n        s.pop ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            right [ i ] = s [ - 1 ]\n        s.append ( i )\n    ans = [ 0 ] * ( n + 1 )\n    for i in range ( n + 1 ) :\n        ans [ i ] = 0\n    for i in range ( n ) :\n        Len = right [ i ] - left [ i ] - 1\n        ans [ Len ] = max ( ans [ Len ] , arr [ i ] )\n    for i in range ( n - 1 , 0 , - 1 ) :\n        ans [ i ] = max ( ans [ i ] , ans [ i + 1 ] )\n    for i in range ( 1 , n + 1 ) :\n        print ( ans [ i ] , end = \" \" )", "target_program": " static void printMaxOfMin ( int n ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  int left [ ] = new int [ n + 1 ] ;\n  int right [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    left [ i ] = - 1 ;\n    right [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) left [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  while ( ! s . empty ( ) ) s . pop ( ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) right [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  int ans [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) ans [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1 ;\n    ans [ len ] = Math . max ( ans [ len ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 1 ;\n  i -- ) ans [ i ] = Math . max ( ans [ i ] , ans [ i + 1 ] ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printMaxOfMin ( arr , n ) :\n    s = [ ]\n    left = [ - 1 ] * ( n + 1 )\n    right = [ n ] * ( n + 1 )\n    for i in range ( n ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            left [ i ] = s [ - 1 ]\n        s.append ( i )\n    while ( len ( s ) != 0 ) :\n        s.pop ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            right [ i ] = s [ - 1 ]\n        s.append ( i )\n    ans = [ 0 ] * ( n + 1 )\n    for i in range ( n + 1 ) :\n        ans [ i ] = 0\n    for i in range ( n ) :\n        Len = right [ i ] - left [ i ] - 1\n        ans [ Len ] = max ( ans [ Len ] , arr [ i ] )\n    for i in range ( n - 1 , 0 , - 1 ) :\n        ans [ i ] = max ( ans [ i ] , ans [ i + 1 ] )\n    for i in range ( 1 , n + 1 ) :\n        print ( ans [ i ] , end = \" \" )", "target_program": " void printMaxOfMin ( int arr [ ], int n ) {\n  stack < int > s;\n  int left [ n + 1 ];\n  int right [ n + 1 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    left [ i ] = - 1;\n    right [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) left [ i ] = s . top ( );\n    s . push ( i );\n  }\n  while ( ! s . empty ( ) ) s . pop ( );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) right [ i ] = s . top ( );\n    s . push ( i );\n  }\n  int ans [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) ans [ i ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1;\n    ans [ len ] = max ( ans [ len ], arr [ i ] );\n  }\n  for ( int i = n - 1;\n  i >= 1;\n  i -- ) ans [ i ] = max ( ans [ i ], ans [ i + 1 ] );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << ans [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void printMaxOfMin ( int n ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  int left [ ] = new int [ n + 1 ] ;\n  int right [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    left [ i ] = - 1 ;\n    right [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) left [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  while ( ! s . empty ( ) ) s . pop ( ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) right [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  int ans [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) ans [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1 ;\n    ans [ len ] = Math . max ( ans [ len ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 1 ;\n  i -- ) ans [ i ] = Math . max ( ans [ i ] , ans [ i + 1 ] ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}", "target_program": " def printMaxOfMin ( arr , n ) :\n    s = [ ]\n    left = [ - 1 ] * ( n + 1 )\n    right = [ n ] * ( n + 1 )\n    for i in range ( n ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            left [ i ] = s [ - 1 ]\n        s.append ( i )\n    while ( len ( s ) != 0 ) :\n        s.pop ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            right [ i ] = s [ - 1 ]\n        s.append ( i )\n    ans = [ 0 ] * ( n + 1 )\n    for i in range ( n + 1 ) :\n        ans [ i ] = 0\n    for i in range ( n ) :\n        Len = right [ i ] - left [ i ] - 1\n        ans [ Len ] = max ( ans [ Len ] , arr [ i ] )\n    for i in range ( n - 1 , 0 , - 1 ) :\n        ans [ i ] = max ( ans [ i ] , ans [ i + 1 ] )\n    for i in range ( 1 , n + 1 ) :\n        print ( ans [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void printMaxOfMin ( int n ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  int left [ ] = new int [ n + 1 ] ;\n  int right [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    left [ i ] = - 1 ;\n    right [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) left [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  while ( ! s . empty ( ) ) s . pop ( ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) right [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  int ans [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) ans [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1 ;\n    ans [ len ] = Math . max ( ans [ len ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 1 ;\n  i -- ) ans [ i ] = Math . max ( ans [ i ] , ans [ i + 1 ] ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}", "target_program": " void printMaxOfMin ( int arr [ ], int n ) {\n  stack < int > s;\n  int left [ n + 1 ];\n  int right [ n + 1 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    left [ i ] = - 1;\n    right [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) left [ i ] = s . top ( );\n    s . push ( i );\n  }\n  while ( ! s . empty ( ) ) s . pop ( );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) right [ i ] = s . top ( );\n    s . push ( i );\n  }\n  int ans [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) ans [ i ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1;\n    ans [ len ] = max ( ans [ len ], arr [ i ] );\n  }\n  for ( int i = n - 1;\n  i >= 1;\n  i -- ) ans [ i ] = max ( ans [ i ], ans [ i + 1 ] );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << ans [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printMaxOfMin ( int arr [ ], int n ) {\n  stack < int > s;\n  int left [ n + 1 ];\n  int right [ n + 1 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    left [ i ] = - 1;\n    right [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) left [ i ] = s . top ( );\n    s . push ( i );\n  }\n  while ( ! s . empty ( ) ) s . pop ( );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) right [ i ] = s . top ( );\n    s . push ( i );\n  }\n  int ans [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) ans [ i ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1;\n    ans [ len ] = max ( ans [ len ], arr [ i ] );\n  }\n  for ( int i = n - 1;\n  i >= 1;\n  i -- ) ans [ i ] = max ( ans [ i ], ans [ i + 1 ] );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << ans [ i ] << \" \";\n}", "target_program": " static void printMaxOfMin ( int n ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  int left [ ] = new int [ n + 1 ] ;\n  int right [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    left [ i ] = - 1 ;\n    right [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) left [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  while ( ! s . empty ( ) ) s . pop ( ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . peek ( ) ] >= arr [ i ] ) s . pop ( ) ;\n    if ( ! s . empty ( ) ) right [ i ] = s . peek ( ) ;\n    s . push ( i ) ;\n  }\n  int ans [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) ans [ i ] = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1 ;\n    ans [ len ] = Math . max ( ans [ len ] , arr [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 1 ;\n  i -- ) ans [ i ] = Math . max ( ans [ i ] , ans [ i + 1 ] ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printMaxOfMin ( int arr [ ], int n ) {\n  stack < int > s;\n  int left [ n + 1 ];\n  int right [ n + 1 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    left [ i ] = - 1;\n    right [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) left [ i ] = s . top ( );\n    s . push ( i );\n  }\n  while ( ! s . empty ( ) ) s . pop ( );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    while ( ! s . empty ( ) && arr [ s . top ( ) ] >= arr [ i ] ) s . pop ( );\n    if ( ! s . empty ( ) ) right [ i ] = s . top ( );\n    s . push ( i );\n  }\n  int ans [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) ans [ i ] = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = right [ i ] - left [ i ] - 1;\n    ans [ len ] = max ( ans [ len ], arr [ i ] );\n  }\n  for ( int i = n - 1;\n  i >= 1;\n  i -- ) ans [ i ] = max ( ans [ i ], ans [ i + 1 ] );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) cout << ans [ i ] << \" \";\n}", "target_program": " def printMaxOfMin ( arr , n ) :\n    s = [ ]\n    left = [ - 1 ] * ( n + 1 )\n    right = [ n ] * ( n + 1 )\n    for i in range ( n ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            left [ i ] = s [ - 1 ]\n        s.append ( i )\n    while ( len ( s ) != 0 ) :\n        s.pop ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        while ( len ( s ) != 0 and arr [ s [ - 1 ] ] >= arr [ i ] ) :\n            s.pop ( )\n        if ( len ( s ) != 0 ) :\n            right [ i ] = s [ - 1 ]\n        s.append ( i )\n    ans = [ 0 ] * ( n + 1 )\n    for i in range ( n + 1 ) :\n        ans [ i ] = 0\n    for i in range ( n ) :\n        Len = right [ i ] - left [ i ] - 1\n        ans [ Len ] = max ( ans [ Len ] , arr [ i ] )\n    for i in range ( n - 1 , 0 , - 1 ) :\n        ans [ i ] = max ( ans [ i ] , ans [ i + 1 ] )\n    for i in range ( 1 , n + 1 ) :\n        print ( ans [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def MaximumDecimalValue ( mat , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    if ( mat [ 0 ] [ 0 ] == 1 ) :\n        dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        if ( mat [ 0 ] [ i ] == 1 ) :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i\n        else :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ]\n    for i in range ( 1 , n ) :\n        if ( mat [ i ] [ 0 ] == 1 ) :\n            dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 ** i\n    else :\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) )\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n - 1 ] [ n - 1 ]", "target_program": " static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  if ( mat [ 0 ] [ 0 ] == 1 ) {\n    dp [ 0 ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) {\n      dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) {\n      dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) {\n        dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + Math . pow ( 2 , i + j ) ) ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MaximumDecimalValue ( mat , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    if ( mat [ 0 ] [ 0 ] == 1 ) :\n        dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        if ( mat [ 0 ] [ i ] == 1 ) :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i\n        else :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ]\n    for i in range ( 1 , n ) :\n        if ( mat [ i ] [ 0 ] == 1 ) :\n            dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 ** i\n    else :\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) )\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n - 1 ] [ n - 1 ]", "target_program": " long long int MaximumDecimalValue ( int mat [ ] [ N ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + pow ( 2, i );\n    else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + pow ( 2, i );\n    else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] ) + pow ( 2, i + j );\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  if ( mat [ 0 ] [ 0 ] == 1 ) {\n    dp [ 0 ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) {\n      dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) {\n      dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) {\n        dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + Math . pow ( 2 , i + j ) ) ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ] ;\n}", "target_program": " def MaximumDecimalValue ( mat , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    if ( mat [ 0 ] [ 0 ] == 1 ) :\n        dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        if ( mat [ 0 ] [ i ] == 1 ) :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i\n        else :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ]\n    for i in range ( 1 , n ) :\n        if ( mat [ i ] [ 0 ] == 1 ) :\n            dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 ** i\n    else :\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) )\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n - 1 ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  if ( mat [ 0 ] [ 0 ] == 1 ) {\n    dp [ 0 ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) {\n      dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) {\n      dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) {\n        dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + Math . pow ( 2 , i + j ) ) ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ] ;\n}", "target_program": " long long int MaximumDecimalValue ( int mat [ ] [ N ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + pow ( 2, i );\n    else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + pow ( 2, i );\n    else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] ) + pow ( 2, i + j );\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int MaximumDecimalValue ( int mat [ ] [ N ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + pow ( 2, i );\n    else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + pow ( 2, i );\n    else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] ) + pow ( 2, i + j );\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ];\n}", "target_program": " static int MaximumDecimalValue ( int mat [ ] [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  if ( mat [ 0 ] [ 0 ] == 1 ) {\n    dp [ 0 ] [ 0 ] = 1 ;\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) {\n      dp [ 0 ] [ i ] = ( int ) ( dp [ 0 ] [ i - 1 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) {\n      dp [ i ] [ 0 ] = ( int ) ( dp [ i - 1 ] [ 0 ] + Math . pow ( 2 , i ) ) ;\n    }\n    else {\n      dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j < n ;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) {\n        dp [ i ] [ j ] = ( int ) ( Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + Math . pow ( 2 , i + j ) ) ;\n      }\n      else {\n        dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int MaximumDecimalValue ( int mat [ ] [ N ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  if ( mat [ 0 ] [ 0 ] == 1 ) dp [ 0 ] [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ 0 ] [ i ] == 1 ) dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + pow ( 2, i );\n    else dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( mat [ i ] [ 0 ] == 1 ) dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + pow ( 2, i );\n    else dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ];\n  }\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    for ( int j = 1;\n    j < n;\n    j ++ ) {\n      if ( mat [ i ] [ j ] == 1 ) dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] ) + pow ( 2, i + j );\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n - 1 ] [ n - 1 ];\n}", "target_program": " def MaximumDecimalValue ( mat , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    if ( mat [ 0 ] [ 0 ] == 1 ) :\n        dp [ 0 ] [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        if ( mat [ 0 ] [ i ] == 1 ) :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ] + 2 ** i\n        else :\n            dp [ 0 ] [ i ] = dp [ 0 ] [ i - 1 ]\n    for i in range ( 1 , n ) :\n        if ( mat [ i ] [ 0 ] == 1 ) :\n            dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ] + 2 ** i\n    else :\n        dp [ i ] [ 0 ] = dp [ i - 1 ] [ 0 ]\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( mat [ i ] [ j ] == 1 ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) + ( 2 ** ( i + j ) )\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n - 1 ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def printCountRec ( dist ) :\n    if dist < 0 :\n        return 0\n    if dist == 0 :\n        return 1\n    return ( printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) )", "target_program": " static int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0 ;\n  if ( dist == 0 ) return 1 ;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printCountRec ( dist ) :\n    if dist < 0 :\n        return 0\n    if dist == 0 :\n        return 1\n    return ( printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) )", "target_program": " int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0;\n  if ( dist == 0 ) return 1;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 );\n}"}
{"source": "java", "target": "python", "source_program": " static int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0 ;\n  if ( dist == 0 ) return 1 ;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) ;\n}", "target_program": " def printCountRec ( dist ) :\n    if dist < 0 :\n        return 0\n    if dist == 0 :\n        return 1\n    return ( printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0 ;\n  if ( dist == 0 ) return 1 ;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) ;\n}", "target_program": " int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0;\n  if ( dist == 0 ) return 1;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0;\n  if ( dist == 0 ) return 1;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 );\n}", "target_program": " static int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0 ;\n  if ( dist == 0 ) return 1 ;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int printCountRec ( int dist ) {\n  if ( dist < 0 ) return 0;\n  if ( dist == 0 ) return 1;\n  return printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 );\n}", "target_program": " def printCountRec ( dist ) :\n    if dist < 0 :\n        return 0\n    if dist == 0 :\n        return 1\n    return ( printCountRec ( dist - 1 ) + printCountRec ( dist - 2 ) + printCountRec ( dist - 3 ) )"}
{"source": "python", "target": "java", "source_program": " def minPerimeter ( n ) :\n    l = math.sqrt ( n )\n    sq = l * l\n    if ( sq == n ) :\n        return l * 4\n    else :\n        row = n / l\n        perimeter = 2 * ( l + row )\n        if ( n % l != 0 ) :\n            perimeter += 2\n        return perimeter", "target_program": " public static long minPerimeter ( int n ) {\n  int l = ( int ) Math . sqrt ( n ) ;\n  int sq = l * l ;\n  if ( sq == n ) return l * 4 ;\n  else {\n    long row = n / l ;\n    long perimeter = 2 * ( l + row ) ;\n    if ( n % l != 0 ) perimeter += 2 ;\n    return perimeter ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def minPerimeter ( n ) :\n    l = math.sqrt ( n )\n    sq = l * l\n    if ( sq == n ) :\n        return l * 4\n    else :\n        row = n / l\n        perimeter = 2 * ( l + row )\n        if ( n % l != 0 ) :\n            perimeter += 2\n        return perimeter", "target_program": " int minPerimeter ( int n ) {\n  int l = sqrt ( n );\n  int sq = l * l;\n  if ( sq == n ) return l * 4;\n  else {\n    long long int row = n / l;\n    long long int perimeter = 2 * ( l + row );\n    if ( n % l != 0 ) perimeter += 2;\n    return perimeter;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static long minPerimeter ( int n ) {\n  int l = ( int ) Math . sqrt ( n ) ;\n  int sq = l * l ;\n  if ( sq == n ) return l * 4 ;\n  else {\n    long row = n / l ;\n    long perimeter = 2 * ( l + row ) ;\n    if ( n % l != 0 ) perimeter += 2 ;\n    return perimeter ;\n  }\n}", "target_program": " def minPerimeter ( n ) :\n    l = math.sqrt ( n )\n    sq = l * l\n    if ( sq == n ) :\n        return l * 4\n    else :\n        row = n / l\n        perimeter = 2 * ( l + row )\n        if ( n % l != 0 ) :\n            perimeter += 2\n        return perimeter"}
{"source": "java", "target": "cpp", "source_program": " public static long minPerimeter ( int n ) {\n  int l = ( int ) Math . sqrt ( n ) ;\n  int sq = l * l ;\n  if ( sq == n ) return l * 4 ;\n  else {\n    long row = n / l ;\n    long perimeter = 2 * ( l + row ) ;\n    if ( n % l != 0 ) perimeter += 2 ;\n    return perimeter ;\n  }\n}", "target_program": " int minPerimeter ( int n ) {\n  int l = sqrt ( n );\n  int sq = l * l;\n  if ( sq == n ) return l * 4;\n  else {\n    long long int row = n / l;\n    long long int perimeter = 2 * ( l + row );\n    if ( n % l != 0 ) perimeter += 2;\n    return perimeter;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int minPerimeter ( int n ) {\n  int l = sqrt ( n );\n  int sq = l * l;\n  if ( sq == n ) return l * 4;\n  else {\n    long long int row = n / l;\n    long long int perimeter = 2 * ( l + row );\n    if ( n % l != 0 ) perimeter += 2;\n    return perimeter;\n  }\n}", "target_program": " public static long minPerimeter ( int n ) {\n  int l = ( int ) Math . sqrt ( n ) ;\n  int sq = l * l ;\n  if ( sq == n ) return l * 4 ;\n  else {\n    long row = n / l ;\n    long perimeter = 2 * ( l + row ) ;\n    if ( n % l != 0 ) perimeter += 2 ;\n    return perimeter ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int minPerimeter ( int n ) {\n  int l = sqrt ( n );\n  int sq = l * l;\n  if ( sq == n ) return l * 4;\n  else {\n    long long int row = n / l;\n    long long int perimeter = 2 * ( l + row );\n    if ( n % l != 0 ) perimeter += 2;\n    return perimeter;\n  }\n}", "target_program": " def minPerimeter ( n ) :\n    l = math.sqrt ( n )\n    sq = l * l\n    if ( sq == n ) :\n        return l * 4\n    else :\n        row = n / l\n        perimeter = 2 * ( l + row )\n        if ( n % l != 0 ) :\n            perimeter += 2\n        return perimeter"}
{"source": "python", "target": "java", "source_program": " def isPalindrome ( string ) :\n    l = 0\n    h = len ( string ) - 1\n    while h > l :\n        l += 1\n        h -= 1\n        if string [ l - 1 ] != string [ h + 1 ] :\n            return False\n    return True", "target_program": " static boolean isPalindrome ( String str ) {\n  int l = 0 ;\n  int h = str . length ( ) - 1 ;\n  while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt ( h -- ) ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPalindrome ( string ) :\n    l = 0\n    h = len ( string ) - 1\n    while h > l :\n        l += 1\n        h -= 1\n        if string [ l - 1 ] != string [ h + 1 ] :\n            return False\n    return True", "target_program": " bool isPalindrome ( string str ) {\n  int l = 0;\n  int h = str . length ( ) - 1;\n  while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPalindrome ( String str ) {\n  int l = 0 ;\n  int h = str . length ( ) - 1 ;\n  while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt ( h -- ) ) return false ;\n  return true ;\n}", "target_program": " def isPalindrome ( string ) :\n    l = 0\n    h = len ( string ) - 1\n    while h > l :\n        l += 1\n        h -= 1\n        if string [ l - 1 ] != string [ h + 1 ] :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPalindrome ( String str ) {\n  int l = 0 ;\n  int h = str . length ( ) - 1 ;\n  while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt ( h -- ) ) return false ;\n  return true ;\n}", "target_program": " bool isPalindrome ( string str ) {\n  int l = 0;\n  int h = str . length ( ) - 1;\n  while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPalindrome ( string str ) {\n  int l = 0;\n  int h = str . length ( ) - 1;\n  while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false;\n  return true;\n}", "target_program": " static boolean isPalindrome ( String str ) {\n  int l = 0 ;\n  int h = str . length ( ) - 1 ;\n  while ( h > l ) if ( str . charAt ( l ++ ) != str . charAt ( h -- ) ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPalindrome ( string str ) {\n  int l = 0;\n  int h = str . length ( ) - 1;\n  while ( h > l ) if ( str [ l ++ ] != str [ h -- ] ) return false;\n  return true;\n}", "target_program": " def isPalindrome ( string ) :\n    l = 0\n    h = len ( string ) - 1\n    while h > l :\n        l += 1\n        h -= 1\n        if string [ l - 1 ] != string [ h + 1 ] :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def countSol ( coeff , n , rhs ) :\n    dp = [ 0 for i in range ( rhs + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( n ) :\n        for j in range ( coeff [ i ] , rhs + 1 ) :\n            dp [ j ] += dp [ j - coeff [ i ] ]\n    return dp [ rhs ]", "target_program": " static int countSol ( int coeff [ ] , int n , int rhs ) {\n  int dp [ ] = new int [ rhs + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = coeff [ i ] ;\n  j <= rhs ;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;\n  return dp [ rhs ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSol ( coeff , n , rhs ) :\n    dp = [ 0 for i in range ( rhs + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( n ) :\n        for j in range ( coeff [ i ] , rhs + 1 ) :\n            dp [ j ] += dp [ j - coeff [ i ] ]\n    return dp [ rhs ]", "target_program": " int countSol ( int coeff [ ], int n, int rhs ) {\n  int dp [ rhs + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] = 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = coeff [ i ];\n  j <= rhs;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ];\n  return dp [ rhs ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countSol ( int coeff [ ] , int n , int rhs ) {\n  int dp [ ] = new int [ rhs + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = coeff [ i ] ;\n  j <= rhs ;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;\n  return dp [ rhs ] ;\n}", "target_program": " def countSol ( coeff , n , rhs ) :\n    dp = [ 0 for i in range ( rhs + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( n ) :\n        for j in range ( coeff [ i ] , rhs + 1 ) :\n            dp [ j ] += dp [ j - coeff [ i ] ]\n    return dp [ rhs ]"}
{"source": "java", "target": "cpp", "source_program": " static int countSol ( int coeff [ ] , int n , int rhs ) {\n  int dp [ ] = new int [ rhs + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = coeff [ i ] ;\n  j <= rhs ;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;\n  return dp [ rhs ] ;\n}", "target_program": " int countSol ( int coeff [ ], int n, int rhs ) {\n  int dp [ rhs + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] = 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = coeff [ i ];\n  j <= rhs;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ];\n  return dp [ rhs ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSol ( int coeff [ ], int n, int rhs ) {\n  int dp [ rhs + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] = 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = coeff [ i ];\n  j <= rhs;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ];\n  return dp [ rhs ];\n}", "target_program": " static int countSol ( int coeff [ ] , int n , int rhs ) {\n  int dp [ ] = new int [ rhs + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  dp [ 0 ] = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = coeff [ i ] ;\n  j <= rhs ;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ] ;\n  return dp [ rhs ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSol ( int coeff [ ], int n, int rhs ) {\n  int dp [ rhs + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] = 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = coeff [ i ];\n  j <= rhs;\n  j ++ ) dp [ j ] += dp [ j - coeff [ i ] ];\n  return dp [ rhs ];\n}", "target_program": " def countSol ( coeff , n , rhs ) :\n    dp = [ 0 for i in range ( rhs + 1 ) ]\n    dp [ 0 ] = 1\n    for i in range ( n ) :\n        for j in range ( coeff [ i ] , rhs + 1 ) :\n            dp [ j ] += dp [ j - coeff [ i ] ]\n    return dp [ rhs ]"}
{"source": "python", "target": "java", "source_program": " def findLargestSumPair ( arr , n ) :\n    if arr [ 0 ] > arr [ 1 ] :\n        first = arr [ 0 ]\n        second = arr [ 1 ]\n    else :\n        first = arr [ 1 ]\n        second = arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if arr [ i ] > first :\n            second = first\n            first = arr [ i ]\n        elif arr [ i ] > second and arr [ i ] != first :\n            second = arr [ i ]\n    return ( first + second )", "target_program": " static int findLargestSumPair ( ) {\n  int first , second ;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ] ;\n    second = arr [ 1 ] ;\n  }\n  else {\n    first = arr [ 1 ] ;\n    second = arr [ 0 ] ;\n  }\n  for ( int i = 2 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first ;\n      first = arr [ i ] ;\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ;\n  }\n  return ( first + second ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLargestSumPair ( arr , n ) :\n    if arr [ 0 ] > arr [ 1 ] :\n        first = arr [ 0 ]\n        second = arr [ 1 ]\n    else :\n        first = arr [ 1 ]\n        second = arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if arr [ i ] > first :\n            second = first\n            first = arr [ i ]\n        elif arr [ i ] > second and arr [ i ] != first :\n            second = arr [ i ]\n    return ( first + second )", "target_program": " int findLargestSumPair ( int arr [ ], int n ) {\n  int first, second;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ];\n    second = arr [ 1 ];\n  }\n  else {\n    first = arr [ 1 ];\n    second = arr [ 0 ];\n  }\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first;\n      first = arr [ i ];\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ];\n  }\n  return ( first + second );\n}"}
{"source": "java", "target": "python", "source_program": " static int findLargestSumPair ( ) {\n  int first , second ;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ] ;\n    second = arr [ 1 ] ;\n  }\n  else {\n    first = arr [ 1 ] ;\n    second = arr [ 0 ] ;\n  }\n  for ( int i = 2 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first ;\n      first = arr [ i ] ;\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ;\n  }\n  return ( first + second ) ;\n}", "target_program": " def findLargestSumPair ( arr , n ) :\n    if arr [ 0 ] > arr [ 1 ] :\n        first = arr [ 0 ]\n        second = arr [ 1 ]\n    else :\n        first = arr [ 1 ]\n        second = arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if arr [ i ] > first :\n            second = first\n            first = arr [ i ]\n        elif arr [ i ] > second and arr [ i ] != first :\n            second = arr [ i ]\n    return ( first + second )"}
{"source": "java", "target": "cpp", "source_program": " static int findLargestSumPair ( ) {\n  int first , second ;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ] ;\n    second = arr [ 1 ] ;\n  }\n  else {\n    first = arr [ 1 ] ;\n    second = arr [ 0 ] ;\n  }\n  for ( int i = 2 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first ;\n      first = arr [ i ] ;\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ;\n  }\n  return ( first + second ) ;\n}", "target_program": " int findLargestSumPair ( int arr [ ], int n ) {\n  int first, second;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ];\n    second = arr [ 1 ];\n  }\n  else {\n    first = arr [ 1 ];\n    second = arr [ 0 ];\n  }\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first;\n      first = arr [ i ];\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ];\n  }\n  return ( first + second );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLargestSumPair ( int arr [ ], int n ) {\n  int first, second;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ];\n    second = arr [ 1 ];\n  }\n  else {\n    first = arr [ 1 ];\n    second = arr [ 0 ];\n  }\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first;\n      first = arr [ i ];\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ];\n  }\n  return ( first + second );\n}", "target_program": " static int findLargestSumPair ( ) {\n  int first , second ;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ] ;\n    second = arr [ 1 ] ;\n  }\n  else {\n    first = arr [ 1 ] ;\n    second = arr [ 0 ] ;\n  }\n  for ( int i = 2 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first ;\n      first = arr [ i ] ;\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ] ;\n  }\n  return ( first + second ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLargestSumPair ( int arr [ ], int n ) {\n  int first, second;\n  if ( arr [ 0 ] > arr [ 1 ] ) {\n    first = arr [ 0 ];\n    second = arr [ 1 ];\n  }\n  else {\n    first = arr [ 1 ];\n    second = arr [ 0 ];\n  }\n  for ( int i = 2;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > first ) {\n      second = first;\n      first = arr [ i ];\n    }\n    else if ( arr [ i ] > second && arr [ i ] != first ) second = arr [ i ];\n  }\n  return ( first + second );\n}", "target_program": " def findLargestSumPair ( arr , n ) :\n    if arr [ 0 ] > arr [ 1 ] :\n        first = arr [ 0 ]\n        second = arr [ 1 ]\n    else :\n        first = arr [ 1 ]\n        second = arr [ 0 ]\n    for i in range ( 2 , n ) :\n        if arr [ i ] > first :\n            second = first\n            first = arr [ i ]\n        elif arr [ i ] > second and arr [ i ] != first :\n            second = arr [ i ]\n    return ( first + second )"}
{"source": "python", "target": "java", "source_program": " def binarySearch ( arr , left , right ) :\n    if ( left <= right ) :\n        mid = ( left + right ) // 2 ;\n        if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] > arr [ mid + 1 ] ) :\n            return mid ;\n        if ( arr [ mid ] < arr [ mid + 1 ] ) :\n            return binarySearch ( arr , mid + 1 , right ) ;\n        else :\n            return binarySearch ( arr , left , mid - 1 ) ;\n    return - 1 ;", "target_program": " static int binarySearch ( int arr [ ] , int left , int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2 ;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid ;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr , mid + 1 , right ) ;\n    else return binarySearch ( arr , left , mid - 1 ) ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def binarySearch ( arr , left , right ) :\n    if ( left <= right ) :\n        mid = ( left + right ) // 2 ;\n        if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] > arr [ mid + 1 ] ) :\n            return mid ;\n        if ( arr [ mid ] < arr [ mid + 1 ] ) :\n            return binarySearch ( arr , mid + 1 , right ) ;\n        else :\n            return binarySearch ( arr , left , mid - 1 ) ;\n    return - 1 ;", "target_program": " int binarySearch ( int arr [ ], int left, int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr, mid + 1, right );\n    else return binarySearch ( arr, left, mid - 1 );\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int binarySearch ( int arr [ ] , int left , int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2 ;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid ;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr , mid + 1 , right ) ;\n    else return binarySearch ( arr , left , mid - 1 ) ;\n  }\n  return - 1 ;\n}", "target_program": " def binarySearch ( arr , left , right ) :\n    if ( left <= right ) :\n        mid = ( left + right ) // 2 ;\n        if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] > arr [ mid + 1 ] ) :\n            return mid ;\n        if ( arr [ mid ] < arr [ mid + 1 ] ) :\n            return binarySearch ( arr , mid + 1 , right ) ;\n        else :\n            return binarySearch ( arr , left , mid - 1 ) ;\n    return - 1 ;"}
{"source": "java", "target": "cpp", "source_program": " static int binarySearch ( int arr [ ] , int left , int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2 ;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid ;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr , mid + 1 , right ) ;\n    else return binarySearch ( arr , left , mid - 1 ) ;\n  }\n  return - 1 ;\n}", "target_program": " int binarySearch ( int arr [ ], int left, int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr, mid + 1, right );\n    else return binarySearch ( arr, left, mid - 1 );\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int binarySearch ( int arr [ ], int left, int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr, mid + 1, right );\n    else return binarySearch ( arr, left, mid - 1 );\n  }\n  return - 1;\n}", "target_program": " static int binarySearch ( int arr [ ] , int left , int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2 ;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid ;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr , mid + 1 , right ) ;\n    else return binarySearch ( arr , left , mid - 1 ) ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int binarySearch ( int arr [ ], int left, int right ) {\n  if ( left <= right ) {\n    int mid = ( left + right ) / 2;\n    if ( arr [ mid - 1 ] < arr [ mid ] && arr [ mid ] > arr [ mid + 1 ] ) return mid;\n    if ( arr [ mid ] < arr [ mid + 1 ] ) return binarySearch ( arr, mid + 1, right );\n    else return binarySearch ( arr, left, mid - 1 );\n  }\n  return - 1;\n}", "target_program": " def binarySearch ( arr , left , right ) :\n    if ( left <= right ) :\n        mid = ( left + right ) // 2 ;\n        if ( arr [ mid - 1 ] < arr [ mid ] and arr [ mid ] > arr [ mid + 1 ] ) :\n            return mid ;\n        if ( arr [ mid ] < arr [ mid + 1 ] ) :\n            return binarySearch ( arr , mid + 1 , right ) ;\n        else :\n            return binarySearch ( arr , left , mid - 1 ) ;\n    return - 1 ;"}
{"source": "python", "target": "java", "source_program": " def printDistinct ( Str ) :\n    n = len ( Str )\n    count = [ 0 for i in range ( MAX_CHAR ) ]\n    index = [ n for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        x = ord ( Str [ i ] )\n        count [ x ] += 1\n        if ( count [ x ] == 1 and x != ' ' ) :\n            index [ x ] = i\n        if ( count [ x ] == 2 ) :\n            index [ x ] = n\n    index = sorted ( index )\n    for i in range ( MAX_CHAR ) :\n        if index [ i ] == n :\n            break\n        print ( Str [ index [ i ] ] , end = \"\" )", "target_program": " static void printDistinct ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] count = new int [ MAX_CHAR ] ;\n  int [ ] index = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) {\n    count [ i ] = 0 ;\n    index [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    char x = str . charAt ( i ) ;\n    ++ count [ x ] ;\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i ;\n    if ( count [ x ] == 2 ) index [ x ] = n ;\n  }\n  Arrays . sort ( index ) ;\n  for ( int i = 0 ;\n  i < MAX_CHAR && index [ i ] != n ;\n  i ++ ) System . out . print ( str . charAt ( index [ i ] ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printDistinct ( Str ) :\n    n = len ( Str )\n    count = [ 0 for i in range ( MAX_CHAR ) ]\n    index = [ n for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        x = ord ( Str [ i ] )\n        count [ x ] += 1\n        if ( count [ x ] == 1 and x != ' ' ) :\n            index [ x ] = i\n        if ( count [ x ] == 2 ) :\n            index [ x ] = n\n    index = sorted ( index )\n    for i in range ( MAX_CHAR ) :\n        if index [ i ] == n :\n            break\n        print ( Str [ index [ i ] ] , end = \"\" )", "target_program": " void printDistinct ( string str ) {\n  int n = str . length ( );\n  int count [ MAX_CHAR ];\n  int index [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) {\n    count [ i ] = 0;\n    index [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    char x = str [ i ];\n    ++ count [ x ];\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i;\n    if ( count [ x ] == 2 ) index [ x ] = n;\n  }\n  sort ( index, index + MAX_CHAR );\n  for ( int i = 0;\n  i < MAX_CHAR && index [ i ] != n;\n  i ++ ) cout << str [ index [ i ] ];\n}"}
{"source": "java", "target": "python", "source_program": " static void printDistinct ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] count = new int [ MAX_CHAR ] ;\n  int [ ] index = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) {\n    count [ i ] = 0 ;\n    index [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    char x = str . charAt ( i ) ;\n    ++ count [ x ] ;\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i ;\n    if ( count [ x ] == 2 ) index [ x ] = n ;\n  }\n  Arrays . sort ( index ) ;\n  for ( int i = 0 ;\n  i < MAX_CHAR && index [ i ] != n ;\n  i ++ ) System . out . print ( str . charAt ( index [ i ] ) ) ;\n}", "target_program": " def printDistinct ( Str ) :\n    n = len ( Str )\n    count = [ 0 for i in range ( MAX_CHAR ) ]\n    index = [ n for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        x = ord ( Str [ i ] )\n        count [ x ] += 1\n        if ( count [ x ] == 1 and x != ' ' ) :\n            index [ x ] = i\n        if ( count [ x ] == 2 ) :\n            index [ x ] = n\n    index = sorted ( index )\n    for i in range ( MAX_CHAR ) :\n        if index [ i ] == n :\n            break\n        print ( Str [ index [ i ] ] , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printDistinct ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] count = new int [ MAX_CHAR ] ;\n  int [ ] index = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) {\n    count [ i ] = 0 ;\n    index [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    char x = str . charAt ( i ) ;\n    ++ count [ x ] ;\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i ;\n    if ( count [ x ] == 2 ) index [ x ] = n ;\n  }\n  Arrays . sort ( index ) ;\n  for ( int i = 0 ;\n  i < MAX_CHAR && index [ i ] != n ;\n  i ++ ) System . out . print ( str . charAt ( index [ i ] ) ) ;\n}", "target_program": " void printDistinct ( string str ) {\n  int n = str . length ( );\n  int count [ MAX_CHAR ];\n  int index [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) {\n    count [ i ] = 0;\n    index [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    char x = str [ i ];\n    ++ count [ x ];\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i;\n    if ( count [ x ] == 2 ) index [ x ] = n;\n  }\n  sort ( index, index + MAX_CHAR );\n  for ( int i = 0;\n  i < MAX_CHAR && index [ i ] != n;\n  i ++ ) cout << str [ index [ i ] ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void printDistinct ( string str ) {\n  int n = str . length ( );\n  int count [ MAX_CHAR ];\n  int index [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) {\n    count [ i ] = 0;\n    index [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    char x = str [ i ];\n    ++ count [ x ];\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i;\n    if ( count [ x ] == 2 ) index [ x ] = n;\n  }\n  sort ( index, index + MAX_CHAR );\n  for ( int i = 0;\n  i < MAX_CHAR && index [ i ] != n;\n  i ++ ) cout << str [ index [ i ] ];\n}", "target_program": " static void printDistinct ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] count = new int [ MAX_CHAR ] ;\n  int [ ] index = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) {\n    count [ i ] = 0 ;\n    index [ i ] = n ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    char x = str . charAt ( i ) ;\n    ++ count [ x ] ;\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i ;\n    if ( count [ x ] == 2 ) index [ x ] = n ;\n  }\n  Arrays . sort ( index ) ;\n  for ( int i = 0 ;\n  i < MAX_CHAR && index [ i ] != n ;\n  i ++ ) System . out . print ( str . charAt ( index [ i ] ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printDistinct ( string str ) {\n  int n = str . length ( );\n  int count [ MAX_CHAR ];\n  int index [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) {\n    count [ i ] = 0;\n    index [ i ] = n;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    char x = str [ i ];\n    ++ count [ x ];\n    if ( count [ x ] == 1 && x != ' ' ) index [ x ] = i;\n    if ( count [ x ] == 2 ) index [ x ] = n;\n  }\n  sort ( index, index + MAX_CHAR );\n  for ( int i = 0;\n  i < MAX_CHAR && index [ i ] != n;\n  i ++ ) cout << str [ index [ i ] ];\n}", "target_program": " def printDistinct ( Str ) :\n    n = len ( Str )\n    count = [ 0 for i in range ( MAX_CHAR ) ]\n    index = [ n for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        x = ord ( Str [ i ] )\n        count [ x ] += 1\n        if ( count [ x ] == 1 and x != ' ' ) :\n            index [ x ] = i\n        if ( count [ x ] == 2 ) :\n            index [ x ] = n\n    index = sorted ( index )\n    for i in range ( MAX_CHAR ) :\n        if index [ i ] == n :\n            break\n        print ( Str [ index [ i ] ] , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def printOtherSides ( n ) :\n    if ( n & 1 ) :\n        if ( n == 1 ) :\n            print ( - 1 )\n        else :\n            b = ( n * n - 1 ) // 2\n            c = ( n * n + 1 ) // 2\n            print ( \"b =\" , b , \", c =\" , c )\n    else :\n        if ( n == 2 ) :\n            print ( - 1 )\n        else :\n            b = n * n // 4 - 1\n            c = n * n // 4 + 1\n            print ( \"b =\" , b \", c =\" , c )", "target_program": " static void printOtherSides ( int n ) {\n  if ( n % 2 != 0 ) {\n    if ( n == 1 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = ( n * n - 1 ) / 2 ;\n      int c = ( n * n + 1 ) / 2 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n  else {\n    if ( n == 2 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = n * n / 4 - 1 ;\n      int c = n * n / 4 + 1 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printOtherSides ( n ) :\n    if ( n & 1 ) :\n        if ( n == 1 ) :\n            print ( - 1 )\n        else :\n            b = ( n * n - 1 ) // 2\n            c = ( n * n + 1 ) // 2\n            print ( \"b =\" , b , \", c =\" , c )\n    else :\n        if ( n == 2 ) :\n            print ( - 1 )\n        else :\n            b = n * n // 4 - 1\n            c = n * n // 4 + 1\n            print ( \"b =\" , b \", c =\" , c )", "target_program": " void printOtherSides ( int n ) {\n  if ( n & 1 ) {\n    if ( n == 1 ) cout << - 1 << endl;\n    else {\n      int b = ( n * n - 1 ) / 2;\n      int c = ( n * n + 1 ) / 2;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n  else {\n    if ( n == 2 ) cout << - 1 << endl;\n    else {\n      int b = n * n / 4 - 1;\n      int c = n * n / 4 + 1;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printOtherSides ( int n ) {\n  if ( n % 2 != 0 ) {\n    if ( n == 1 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = ( n * n - 1 ) / 2 ;\n      int c = ( n * n + 1 ) / 2 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n  else {\n    if ( n == 2 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = n * n / 4 - 1 ;\n      int c = n * n / 4 + 1 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n}", "target_program": " def printOtherSides ( n ) :\n    if ( n & 1 ) :\n        if ( n == 1 ) :\n            print ( - 1 )\n        else :\n            b = ( n * n - 1 ) // 2\n            c = ( n * n + 1 ) // 2\n            print ( \"b =\" , b , \", c =\" , c )\n    else :\n        if ( n == 2 ) :\n            print ( - 1 )\n        else :\n            b = n * n // 4 - 1\n            c = n * n // 4 + 1\n            print ( \"b =\" , b \", c =\" , c )"}
{"source": "java", "target": "cpp", "source_program": " static void printOtherSides ( int n ) {\n  if ( n % 2 != 0 ) {\n    if ( n == 1 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = ( n * n - 1 ) / 2 ;\n      int c = ( n * n + 1 ) / 2 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n  else {\n    if ( n == 2 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = n * n / 4 - 1 ;\n      int c = n * n / 4 + 1 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n}", "target_program": " void printOtherSides ( int n ) {\n  if ( n & 1 ) {\n    if ( n == 1 ) cout << - 1 << endl;\n    else {\n      int b = ( n * n - 1 ) / 2;\n      int c = ( n * n + 1 ) / 2;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n  else {\n    if ( n == 2 ) cout << - 1 << endl;\n    else {\n      int b = n * n / 4 - 1;\n      int c = n * n / 4 + 1;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printOtherSides ( int n ) {\n  if ( n & 1 ) {\n    if ( n == 1 ) cout << - 1 << endl;\n    else {\n      int b = ( n * n - 1 ) / 2;\n      int c = ( n * n + 1 ) / 2;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n  else {\n    if ( n == 2 ) cout << - 1 << endl;\n    else {\n      int b = n * n / 4 - 1;\n      int c = n * n / 4 + 1;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n}", "target_program": " static void printOtherSides ( int n ) {\n  if ( n % 2 != 0 ) {\n    if ( n == 1 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = ( n * n - 1 ) / 2 ;\n      int c = ( n * n + 1 ) / 2 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n  else {\n    if ( n == 2 ) System . out . println ( \"-1\" ) ;\n    else {\n      int b = n * n / 4 - 1 ;\n      int c = n * n / 4 + 1 ;\n      System . out . println ( \"b = \" + b + \", c = \" + c ) ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printOtherSides ( int n ) {\n  if ( n & 1 ) {\n    if ( n == 1 ) cout << - 1 << endl;\n    else {\n      int b = ( n * n - 1 ) / 2;\n      int c = ( n * n + 1 ) / 2;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n  else {\n    if ( n == 2 ) cout << - 1 << endl;\n    else {\n      int b = n * n / 4 - 1;\n      int c = n * n / 4 + 1;\n      cout << \"b = \" << b << \", c = \" << c << endl;\n    }\n  }\n}", "target_program": " def printOtherSides ( n ) :\n    if ( n & 1 ) :\n        if ( n == 1 ) :\n            print ( - 1 )\n        else :\n            b = ( n * n - 1 ) // 2\n            c = ( n * n + 1 ) // 2\n            print ( \"b =\" , b , \", c =\" , c )\n    else :\n        if ( n == 2 ) :\n            print ( - 1 )\n        else :\n            b = n * n // 4 - 1\n            c = n * n // 4 + 1\n            print ( \"b =\" , b \", c =\" , c )"}
{"source": "python", "target": "java", "source_program": " def possibleStrings ( n , r , b , g ) :\n    fact = [ 0 for i in range ( n + 1 ) ]\n    fact [ 0 ] = 1\n    for i in range ( 1 , n + 1 , 1 ) :\n        fact [ i ] = fact [ i - 1 ] * i\n    left = n - ( r + g + b )\n    sum = 0\n    for i in range ( 0 , left + 1 , 1 ) :\n        for j in range ( 0 , left - i + 1 , 1 ) :\n            k = left - ( i + j )\n            sum = ( sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) )\n    return sum", "target_program": " static int possibleStrings ( int n , int r , int b , int g ) {\n  int fact [ ] = new int [ n + 1 ] ;\n  fact [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i ;\n  int left = n - ( r + g + b ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i <= left ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= left - i ;\n    j ++ ) {\n      int k = left - ( i + j ) ;\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ;\n    }\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def possibleStrings ( n , r , b , g ) :\n    fact = [ 0 for i in range ( n + 1 ) ]\n    fact [ 0 ] = 1\n    for i in range ( 1 , n + 1 , 1 ) :\n        fact [ i ] = fact [ i - 1 ] * i\n    left = n - ( r + g + b )\n    sum = 0\n    for i in range ( 0 , left + 1 , 1 ) :\n        for j in range ( 0 , left - i + 1 , 1 ) :\n            k = left - ( i + j )\n            sum = ( sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) )\n    return sum", "target_program": " int possibleStrings ( int n, int r, int b, int g ) {\n  int fact [ n + 1 ];\n  fact [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i;\n  int left = n - ( r + g + b );\n  int sum = 0;\n  for ( int i = 0;\n  i <= left;\n  i ++ ) {\n    for ( int j = 0;\n    j <= left - i;\n    j ++ ) {\n      int k = left - ( i + j );\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] );\n    }\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int possibleStrings ( int n , int r , int b , int g ) {\n  int fact [ ] = new int [ n + 1 ] ;\n  fact [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i ;\n  int left = n - ( r + g + b ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i <= left ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= left - i ;\n    j ++ ) {\n      int k = left - ( i + j ) ;\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ;\n    }\n  }\n  return sum ;\n}", "target_program": " def possibleStrings ( n , r , b , g ) :\n    fact = [ 0 for i in range ( n + 1 ) ]\n    fact [ 0 ] = 1\n    for i in range ( 1 , n + 1 , 1 ) :\n        fact [ i ] = fact [ i - 1 ] * i\n    left = n - ( r + g + b )\n    sum = 0\n    for i in range ( 0 , left + 1 , 1 ) :\n        for j in range ( 0 , left - i + 1 , 1 ) :\n            k = left - ( i + j )\n            sum = ( sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int possibleStrings ( int n , int r , int b , int g ) {\n  int fact [ ] = new int [ n + 1 ] ;\n  fact [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i ;\n  int left = n - ( r + g + b ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i <= left ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= left - i ;\n    j ++ ) {\n      int k = left - ( i + j ) ;\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ;\n    }\n  }\n  return sum ;\n}", "target_program": " int possibleStrings ( int n, int r, int b, int g ) {\n  int fact [ n + 1 ];\n  fact [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i;\n  int left = n - ( r + g + b );\n  int sum = 0;\n  for ( int i = 0;\n  i <= left;\n  i ++ ) {\n    for ( int j = 0;\n    j <= left - i;\n    j ++ ) {\n      int k = left - ( i + j );\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] );\n    }\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int possibleStrings ( int n, int r, int b, int g ) {\n  int fact [ n + 1 ];\n  fact [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i;\n  int left = n - ( r + g + b );\n  int sum = 0;\n  for ( int i = 0;\n  i <= left;\n  i ++ ) {\n    for ( int j = 0;\n    j <= left - i;\n    j ++ ) {\n      int k = left - ( i + j );\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] );\n    }\n  }\n  return sum;\n}", "target_program": " static int possibleStrings ( int n , int r , int b , int g ) {\n  int fact [ ] = new int [ n + 1 ] ;\n  fact [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i ;\n  int left = n - ( r + g + b ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i <= left ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= left - i ;\n    j ++ ) {\n      int k = left - ( i + j ) ;\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) ;\n    }\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int possibleStrings ( int n, int r, int b, int g ) {\n  int fact [ n + 1 ];\n  fact [ 0 ] = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) fact [ i ] = fact [ i - 1 ] * i;\n  int left = n - ( r + g + b );\n  int sum = 0;\n  for ( int i = 0;\n  i <= left;\n  i ++ ) {\n    for ( int j = 0;\n    j <= left - i;\n    j ++ ) {\n      int k = left - ( i + j );\n      sum = sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] );\n    }\n  }\n  return sum;\n}", "target_program": " def possibleStrings ( n , r , b , g ) :\n    fact = [ 0 for i in range ( n + 1 ) ]\n    fact [ 0 ] = 1\n    for i in range ( 1 , n + 1 , 1 ) :\n        fact [ i ] = fact [ i - 1 ] * i\n    left = n - ( r + g + b )\n    sum = 0\n    for i in range ( 0 , left + 1 , 1 ) :\n        for j in range ( 0 , left - i + 1 , 1 ) :\n            k = left - ( i + j )\n            sum = ( sum + fact [ n ] / ( fact [ i + r ] * fact [ j + b ] * fact [ k + g ] ) )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def rearrange ( arr , n ) :\n    max_ele = arr [ n - 1 ]\n    min_ele = arr [ 0 ]\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            arr [ i ] = max_ele\n            max_ele -= 1\n        else :\n            arr [ i ] = min_ele\n            min_ele += 1", "target_program": " public static void rearrange ( int arr [ ] , int n ) {\n  int max_ele = arr [ n - 1 ] ;\n  int min_ele = arr [ 0 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele ;\n      max_ele -= 1 ;\n    }\n    else {\n      arr [ i ] = min_ele ;\n      min_ele += 1 ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def rearrange ( arr , n ) :\n    max_ele = arr [ n - 1 ]\n    min_ele = arr [ 0 ]\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            arr [ i ] = max_ele\n            max_ele -= 1\n        else :\n            arr [ i ] = min_ele\n            min_ele += 1", "target_program": " void rearrange ( int arr [ ], int n ) {\n  int max_ele = arr [ n - 1 ];\n  int min_ele = arr [ 0 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele;\n      max_ele -= 1;\n    }\n    else {\n      arr [ i ] = min_ele;\n      min_ele += 1;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void rearrange ( int arr [ ] , int n ) {\n  int max_ele = arr [ n - 1 ] ;\n  int min_ele = arr [ 0 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele ;\n      max_ele -= 1 ;\n    }\n    else {\n      arr [ i ] = min_ele ;\n      min_ele += 1 ;\n    }\n  }\n}", "target_program": " def rearrange ( arr , n ) :\n    max_ele = arr [ n - 1 ]\n    min_ele = arr [ 0 ]\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            arr [ i ] = max_ele\n            max_ele -= 1\n        else :\n            arr [ i ] = min_ele\n            min_ele += 1"}
{"source": "java", "target": "cpp", "source_program": " public static void rearrange ( int arr [ ] , int n ) {\n  int max_ele = arr [ n - 1 ] ;\n  int min_ele = arr [ 0 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele ;\n      max_ele -= 1 ;\n    }\n    else {\n      arr [ i ] = min_ele ;\n      min_ele += 1 ;\n    }\n  }\n}", "target_program": " void rearrange ( int arr [ ], int n ) {\n  int max_ele = arr [ n - 1 ];\n  int min_ele = arr [ 0 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele;\n      max_ele -= 1;\n    }\n    else {\n      arr [ i ] = min_ele;\n      min_ele += 1;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void rearrange ( int arr [ ], int n ) {\n  int max_ele = arr [ n - 1 ];\n  int min_ele = arr [ 0 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele;\n      max_ele -= 1;\n    }\n    else {\n      arr [ i ] = min_ele;\n      min_ele += 1;\n    }\n  }\n}", "target_program": " public static void rearrange ( int arr [ ] , int n ) {\n  int max_ele = arr [ n - 1 ] ;\n  int min_ele = arr [ 0 ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele ;\n      max_ele -= 1 ;\n    }\n    else {\n      arr [ i ] = min_ele ;\n      min_ele += 1 ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void rearrange ( int arr [ ], int n ) {\n  int max_ele = arr [ n - 1 ];\n  int min_ele = arr [ 0 ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( i % 2 == 0 ) {\n      arr [ i ] = max_ele;\n      max_ele -= 1;\n    }\n    else {\n      arr [ i ] = min_ele;\n      min_ele += 1;\n    }\n  }\n}", "target_program": " def rearrange ( arr , n ) :\n    max_ele = arr [ n - 1 ]\n    min_ele = arr [ 0 ]\n    for i in range ( n ) :\n        if i % 2 == 0 :\n            arr [ i ] = max_ele\n            max_ele -= 1\n        else :\n            arr [ i ] = min_ele\n            min_ele += 1"}
{"source": "python", "target": "java", "source_program": " def calculateSum ( arr , n ) :\n    if ( n == 0 ) :\n        return 0\n    s = arr [ 0 ]\n    value = int ( s )\n    sum = value\n    for i in range ( 2 , n , 2 ) :\n        s = arr [ i ]\n        value = int ( s )\n        operation = arr [ i - 1 ] [ 0 ]\n        if ( operation == '+' ) :\n            sum += value\n        else :\n            sum -= value\n    return sum", "target_program": " public static int calculateSum ( String arr [ ] , int n ) {\n  if ( n == 0 ) return 0 ;\n  String s = arr [ 0 ] ;\n  int value = Integer . parseInt ( s ) ;\n  int sum = value ;\n  for ( int i = 2 ;\n  i < n ;\n  i = i + 2 ) {\n    s = arr [ i ] ;\n    value = Integer . parseInt ( s ) ;\n    char operation = arr [ i - 1 ] . charAt ( 0 ) ;\n    if ( operation == '+' ) sum += value ;\n    else sum -= value ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def calculateSum ( arr , n ) :\n    if ( n == 0 ) :\n        return 0\n    s = arr [ 0 ]\n    value = int ( s )\n    sum = value\n    for i in range ( 2 , n , 2 ) :\n        s = arr [ i ]\n        value = int ( s )\n        operation = arr [ i - 1 ] [ 0 ]\n        if ( operation == '+' ) :\n            sum += value\n        else :\n            sum -= value\n    return sum", "target_program": " int calculateSum ( string arr [ ], int n ) {\n  if ( n == 0 ) return 0;\n  string s = arr [ 0 ];\n  int value = stoi ( s );\n  int sum = value;\n  for ( int i = 2;\n  i < n;\n  i = i + 2 ) {\n    s = arr [ i ];\n    int value = stoi ( s );\n    char operation = arr [ i - 1 ] [ 0 ];\n    if ( operation == '+' ) sum += value;\n    else sum -= value;\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " public static int calculateSum ( String arr [ ] , int n ) {\n  if ( n == 0 ) return 0 ;\n  String s = arr [ 0 ] ;\n  int value = Integer . parseInt ( s ) ;\n  int sum = value ;\n  for ( int i = 2 ;\n  i < n ;\n  i = i + 2 ) {\n    s = arr [ i ] ;\n    value = Integer . parseInt ( s ) ;\n    char operation = arr [ i - 1 ] . charAt ( 0 ) ;\n    if ( operation == '+' ) sum += value ;\n    else sum -= value ;\n  }\n  return sum ;\n}", "target_program": " def calculateSum ( arr , n ) :\n    if ( n == 0 ) :\n        return 0\n    s = arr [ 0 ]\n    value = int ( s )\n    sum = value\n    for i in range ( 2 , n , 2 ) :\n        s = arr [ i ]\n        value = int ( s )\n        operation = arr [ i - 1 ] [ 0 ]\n        if ( operation == '+' ) :\n            sum += value\n        else :\n            sum -= value\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " public static int calculateSum ( String arr [ ] , int n ) {\n  if ( n == 0 ) return 0 ;\n  String s = arr [ 0 ] ;\n  int value = Integer . parseInt ( s ) ;\n  int sum = value ;\n  for ( int i = 2 ;\n  i < n ;\n  i = i + 2 ) {\n    s = arr [ i ] ;\n    value = Integer . parseInt ( s ) ;\n    char operation = arr [ i - 1 ] . charAt ( 0 ) ;\n    if ( operation == '+' ) sum += value ;\n    else sum -= value ;\n  }\n  return sum ;\n}", "target_program": " int calculateSum ( string arr [ ], int n ) {\n  if ( n == 0 ) return 0;\n  string s = arr [ 0 ];\n  int value = stoi ( s );\n  int sum = value;\n  for ( int i = 2;\n  i < n;\n  i = i + 2 ) {\n    s = arr [ i ];\n    int value = stoi ( s );\n    char operation = arr [ i - 1 ] [ 0 ];\n    if ( operation == '+' ) sum += value;\n    else sum -= value;\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int calculateSum ( string arr [ ], int n ) {\n  if ( n == 0 ) return 0;\n  string s = arr [ 0 ];\n  int value = stoi ( s );\n  int sum = value;\n  for ( int i = 2;\n  i < n;\n  i = i + 2 ) {\n    s = arr [ i ];\n    int value = stoi ( s );\n    char operation = arr [ i - 1 ] [ 0 ];\n    if ( operation == '+' ) sum += value;\n    else sum -= value;\n  }\n  return sum;\n}", "target_program": " public static int calculateSum ( String arr [ ] , int n ) {\n  if ( n == 0 ) return 0 ;\n  String s = arr [ 0 ] ;\n  int value = Integer . parseInt ( s ) ;\n  int sum = value ;\n  for ( int i = 2 ;\n  i < n ;\n  i = i + 2 ) {\n    s = arr [ i ] ;\n    value = Integer . parseInt ( s ) ;\n    char operation = arr [ i - 1 ] . charAt ( 0 ) ;\n    if ( operation == '+' ) sum += value ;\n    else sum -= value ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int calculateSum ( string arr [ ], int n ) {\n  if ( n == 0 ) return 0;\n  string s = arr [ 0 ];\n  int value = stoi ( s );\n  int sum = value;\n  for ( int i = 2;\n  i < n;\n  i = i + 2 ) {\n    s = arr [ i ];\n    int value = stoi ( s );\n    char operation = arr [ i - 1 ] [ 0 ];\n    if ( operation == '+' ) sum += value;\n    else sum -= value;\n  }\n  return sum;\n}", "target_program": " def calculateSum ( arr , n ) :\n    if ( n == 0 ) :\n        return 0\n    s = arr [ 0 ]\n    value = int ( s )\n    sum = value\n    for i in range ( 2 , n , 2 ) :\n        s = arr [ i ]\n        value = int ( s )\n        operation = arr [ i - 1 ] [ 0 ]\n        if ( operation == '+' ) :\n            sum += value\n        else :\n            sum -= value\n    return sum"}
{"source": "python", "target": "java", "source_program": " def findSum ( n ) :\n    ans = 0 ; temp = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        if temp < n :\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n    return ans", "target_program": " static int findSum ( int n ) {\n  int ans = 0 , temp = 0 , num ;\n  for ( int i = 1 ;\n  i <= n && temp < n ;\n  i ++ ) {\n    temp = i - 1 ;\n    num = 1 ;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num ) ;\n      else ans += ( ( n - temp ) * num ) ;\n      temp += i ;\n      num ++ ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSum ( n ) :\n    ans = 0 ; temp = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        if temp < n :\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n    return ans", "target_program": " int findSum ( int n ) {\n  int ans = 0, temp = 0, num;\n  for ( int i = 1;\n  i <= n && temp < n;\n  i ++ ) {\n    temp = i - 1;\n    num = 1;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num );\n      else ans += ( ( n - temp ) * num );\n      temp += i;\n      num ++;\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findSum ( int n ) {\n  int ans = 0 , temp = 0 , num ;\n  for ( int i = 1 ;\n  i <= n && temp < n ;\n  i ++ ) {\n    temp = i - 1 ;\n    num = 1 ;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num ) ;\n      else ans += ( ( n - temp ) * num ) ;\n      temp += i ;\n      num ++ ;\n    }\n  }\n  return ans ;\n}", "target_program": " def findSum ( n ) :\n    ans = 0 ; temp = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        if temp < n :\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findSum ( int n ) {\n  int ans = 0 , temp = 0 , num ;\n  for ( int i = 1 ;\n  i <= n && temp < n ;\n  i ++ ) {\n    temp = i - 1 ;\n    num = 1 ;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num ) ;\n      else ans += ( ( n - temp ) * num ) ;\n      temp += i ;\n      num ++ ;\n    }\n  }\n  return ans ;\n}", "target_program": " int findSum ( int n ) {\n  int ans = 0, temp = 0, num;\n  for ( int i = 1;\n  i <= n && temp < n;\n  i ++ ) {\n    temp = i - 1;\n    num = 1;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num );\n      else ans += ( ( n - temp ) * num );\n      temp += i;\n      num ++;\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSum ( int n ) {\n  int ans = 0, temp = 0, num;\n  for ( int i = 1;\n  i <= n && temp < n;\n  i ++ ) {\n    temp = i - 1;\n    num = 1;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num );\n      else ans += ( ( n - temp ) * num );\n      temp += i;\n      num ++;\n    }\n  }\n  return ans;\n}", "target_program": " static int findSum ( int n ) {\n  int ans = 0 , temp = 0 , num ;\n  for ( int i = 1 ;\n  i <= n && temp < n ;\n  i ++ ) {\n    temp = i - 1 ;\n    num = 1 ;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num ) ;\n      else ans += ( ( n - temp ) * num ) ;\n      temp += i ;\n      num ++ ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSum ( int n ) {\n  int ans = 0, temp = 0, num;\n  for ( int i = 1;\n  i <= n && temp < n;\n  i ++ ) {\n    temp = i - 1;\n    num = 1;\n    while ( temp < n ) {\n      if ( temp + i <= n ) ans += ( i * num );\n      else ans += ( ( n - temp ) * num );\n      temp += i;\n      num ++;\n    }\n  }\n  return ans;\n}", "target_program": " def findSum ( n ) :\n    ans = 0 ; temp = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        if temp < n :\n            temp = i - 1\n            num = 1\n            while temp < n :\n                if temp + i <= n :\n                    ans += i * num\n                else :\n                    ans += ( n - temp ) * num\n                temp += i\n                num += 1\n    return ans"}
{"source": "python", "target": "java", "source_program": " def shuffle ( card , n ) :\n    for i in range ( n ) :\n        r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )\n        tmp = card [ i ]\n        card [ i ] = card [ r ]\n        card [ r ] = tmp", "target_program": " public static void shuffle ( int card [ ] , int n ) {\n  Random rand = new Random ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int r = i + rand . nextInt ( 52 - i ) ;\n    int temp = card [ r ] ;\n    card [ r ] = card [ i ] ;\n    card [ i ] = temp ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def shuffle ( card , n ) :\n    for i in range ( n ) :\n        r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )\n        tmp = card [ i ]\n        card [ i ] = card [ r ]\n        card [ r ] = tmp", "target_program": " void shuffle ( int card [ ], int n ) {\n  srand ( time ( 0 ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int r = i + ( rand ( ) % ( 52 - i ) );\n    swap ( card [ i ], card [ r ] );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void shuffle ( int card [ ] , int n ) {\n  Random rand = new Random ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int r = i + rand . nextInt ( 52 - i ) ;\n    int temp = card [ r ] ;\n    card [ r ] = card [ i ] ;\n    card [ i ] = temp ;\n  }\n}", "target_program": " def shuffle ( card , n ) :\n    for i in range ( n ) :\n        r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )\n        tmp = card [ i ]\n        card [ i ] = card [ r ]\n        card [ r ] = tmp"}
{"source": "java", "target": "cpp", "source_program": " public static void shuffle ( int card [ ] , int n ) {\n  Random rand = new Random ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int r = i + rand . nextInt ( 52 - i ) ;\n    int temp = card [ r ] ;\n    card [ r ] = card [ i ] ;\n    card [ i ] = temp ;\n  }\n}", "target_program": " void shuffle ( int card [ ], int n ) {\n  srand ( time ( 0 ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int r = i + ( rand ( ) % ( 52 - i ) );\n    swap ( card [ i ], card [ r ] );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void shuffle ( int card [ ], int n ) {\n  srand ( time ( 0 ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int r = i + ( rand ( ) % ( 52 - i ) );\n    swap ( card [ i ], card [ r ] );\n  }\n}", "target_program": " public static void shuffle ( int card [ ] , int n ) {\n  Random rand = new Random ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int r = i + rand . nextInt ( 52 - i ) ;\n    int temp = card [ r ] ;\n    card [ r ] = card [ i ] ;\n    card [ i ] = temp ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void shuffle ( int card [ ], int n ) {\n  srand ( time ( 0 ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int r = i + ( rand ( ) % ( 52 - i ) );\n    swap ( card [ i ], card [ r ] );\n  }\n}", "target_program": " def shuffle ( card , n ) :\n    for i in range ( n ) :\n        r = i + ( random.randint ( 0 , 55 ) % ( 52 - i ) )\n        tmp = card [ i ]\n        card [ i ] = card [ r ]\n        card [ r ] = tmp"}
{"source": "python", "target": "java", "source_program": " def luDecomposition ( mat , n ) :\n    lower = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    upper = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    for i in range ( n ) :\n        for k in range ( i , n ) :\n            sum = 0 ;\n            for j in range ( i ) :\n                sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n            upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n        for k in range ( i , n ) :\n            if ( i == k ) :\n                lower [ i ] [ i ] = 1 ;\n            else :\n                sum = 0 ;\n                for j in range ( i ) :\n                    sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n                lower [ k ] [ i ] = int ( ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ) ;\n    print ( \"Lower Triangular\\t\\tUpper Triangular\" ) ;\n    for i in range ( n ) :\n        for j in range ( n ) :\n            print ( lower [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" , end = \"\\t\" ) ;\n        for j in range ( n ) :\n            print ( upper [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" ) ;", "target_program": " static void luDecomposition ( int [ ] [ ] mat , int n ) {\n  int [ ] [ ] lower = new int [ n ] [ n ] ;\n  int [ ] [ ] upper = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      int sum = 0 ;\n      for ( int j = 0 ;\n      j < i ;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n    }\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1 ;\n      else {\n        int sum = 0 ;\n        for ( int j = 0 ;\n        j < i ;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ;\n      }\n    }\n  }\n  System . out . println ( setw ( 2 ) + \"     Lower Triangular\" + setw ( 10 ) + \"Upper Triangular\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + lower [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\t\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + upper [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def luDecomposition ( mat , n ) :\n    lower = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    upper = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    for i in range ( n ) :\n        for k in range ( i , n ) :\n            sum = 0 ;\n            for j in range ( i ) :\n                sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n            upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n        for k in range ( i , n ) :\n            if ( i == k ) :\n                lower [ i ] [ i ] = 1 ;\n            else :\n                sum = 0 ;\n                for j in range ( i ) :\n                    sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n                lower [ k ] [ i ] = int ( ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ) ;\n    print ( \"Lower Triangular\\t\\tUpper Triangular\" ) ;\n    for i in range ( n ) :\n        for j in range ( n ) :\n            print ( lower [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" , end = \"\\t\" ) ;\n        for j in range ( n ) :\n            print ( upper [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" ) ;", "target_program": " void luDecomposition ( int mat [ ] [ MAX ], int n ) {\n  int lower [ n ] [ n ], upper [ n ] [ n ];\n  memset ( lower, 0, sizeof ( lower ) );\n  memset ( upper, 0, sizeof ( upper ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      int sum = 0;\n      for ( int j = 0;\n      j < i;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] );\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum;\n    }\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1;\n      else {\n        int sum = 0;\n        for ( int j = 0;\n        j < i;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] );\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ];\n      }\n    }\n  }\n  cout << setw ( 6 ) << \"      Lower Triangular\" << setw ( 32 ) << \"Upper Triangular\" << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << lower [ i ] [ j ] << \"\\t\";\n    cout << \"\\t\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << upper [ i ] [ j ] << \"\\t\";\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void luDecomposition ( int [ ] [ ] mat , int n ) {\n  int [ ] [ ] lower = new int [ n ] [ n ] ;\n  int [ ] [ ] upper = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      int sum = 0 ;\n      for ( int j = 0 ;\n      j < i ;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n    }\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1 ;\n      else {\n        int sum = 0 ;\n        for ( int j = 0 ;\n        j < i ;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ;\n      }\n    }\n  }\n  System . out . println ( setw ( 2 ) + \"     Lower Triangular\" + setw ( 10 ) + \"Upper Triangular\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + lower [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\t\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + upper [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}", "target_program": " def luDecomposition ( mat , n ) :\n    lower = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    upper = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    for i in range ( n ) :\n        for k in range ( i , n ) :\n            sum = 0 ;\n            for j in range ( i ) :\n                sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n            upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n        for k in range ( i , n ) :\n            if ( i == k ) :\n                lower [ i ] [ i ] = 1 ;\n            else :\n                sum = 0 ;\n                for j in range ( i ) :\n                    sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n                lower [ k ] [ i ] = int ( ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ) ;\n    print ( \"Lower Triangular\\t\\tUpper Triangular\" ) ;\n    for i in range ( n ) :\n        for j in range ( n ) :\n            print ( lower [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" , end = \"\\t\" ) ;\n        for j in range ( n ) :\n            print ( upper [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void luDecomposition ( int [ ] [ ] mat , int n ) {\n  int [ ] [ ] lower = new int [ n ] [ n ] ;\n  int [ ] [ ] upper = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      int sum = 0 ;\n      for ( int j = 0 ;\n      j < i ;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n    }\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1 ;\n      else {\n        int sum = 0 ;\n        for ( int j = 0 ;\n        j < i ;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ;\n      }\n    }\n  }\n  System . out . println ( setw ( 2 ) + \"     Lower Triangular\" + setw ( 10 ) + \"Upper Triangular\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + lower [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\t\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + upper [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}", "target_program": " void luDecomposition ( int mat [ ] [ MAX ], int n ) {\n  int lower [ n ] [ n ], upper [ n ] [ n ];\n  memset ( lower, 0, sizeof ( lower ) );\n  memset ( upper, 0, sizeof ( upper ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      int sum = 0;\n      for ( int j = 0;\n      j < i;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] );\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum;\n    }\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1;\n      else {\n        int sum = 0;\n        for ( int j = 0;\n        j < i;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] );\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ];\n      }\n    }\n  }\n  cout << setw ( 6 ) << \"      Lower Triangular\" << setw ( 32 ) << \"Upper Triangular\" << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << lower [ i ] [ j ] << \"\\t\";\n    cout << \"\\t\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << upper [ i ] [ j ] << \"\\t\";\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void luDecomposition ( int mat [ ] [ MAX ], int n ) {\n  int lower [ n ] [ n ], upper [ n ] [ n ];\n  memset ( lower, 0, sizeof ( lower ) );\n  memset ( upper, 0, sizeof ( upper ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      int sum = 0;\n      for ( int j = 0;\n      j < i;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] );\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum;\n    }\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1;\n      else {\n        int sum = 0;\n        for ( int j = 0;\n        j < i;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] );\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ];\n      }\n    }\n  }\n  cout << setw ( 6 ) << \"      Lower Triangular\" << setw ( 32 ) << \"Upper Triangular\" << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << lower [ i ] [ j ] << \"\\t\";\n    cout << \"\\t\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << upper [ i ] [ j ] << \"\\t\";\n    cout << endl;\n  }\n}", "target_program": " static void luDecomposition ( int [ ] [ ] mat , int n ) {\n  int [ ] [ ] lower = new int [ n ] [ n ] ;\n  int [ ] [ ] upper = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      int sum = 0 ;\n      for ( int j = 0 ;\n      j < i ;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n    }\n    for ( int k = i ;\n    k < n ;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1 ;\n      else {\n        int sum = 0 ;\n        for ( int j = 0 ;\n        j < i ;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ;\n      }\n    }\n  }\n  System . out . println ( setw ( 2 ) + \"     Lower Triangular\" + setw ( 10 ) + \"Upper Triangular\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + lower [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\t\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 4 ) + upper [ i ] [ j ] + \"\\t\" ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void luDecomposition ( int mat [ ] [ MAX ], int n ) {\n  int lower [ n ] [ n ], upper [ n ] [ n ];\n  memset ( lower, 0, sizeof ( lower ) );\n  memset ( upper, 0, sizeof ( upper ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      int sum = 0;\n      for ( int j = 0;\n      j < i;\n      j ++ ) sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] );\n      upper [ i ] [ k ] = mat [ i ] [ k ] - sum;\n    }\n    for ( int k = i;\n    k < n;\n    k ++ ) {\n      if ( i == k ) lower [ i ] [ i ] = 1;\n      else {\n        int sum = 0;\n        for ( int j = 0;\n        j < i;\n        j ++ ) sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] );\n        lower [ k ] [ i ] = ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ];\n      }\n    }\n  }\n  cout << setw ( 6 ) << \"      Lower Triangular\" << setw ( 32 ) << \"Upper Triangular\" << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << lower [ i ] [ j ] << \"\\t\";\n    cout << \"\\t\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 6 ) << upper [ i ] [ j ] << \"\\t\";\n    cout << endl;\n  }\n}", "target_program": " def luDecomposition ( mat , n ) :\n    lower = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    upper = [ [ 0 for x in range ( n ) ] for y in range ( n ) ] ;\n    for i in range ( n ) :\n        for k in range ( i , n ) :\n            sum = 0 ;\n            for j in range ( i ) :\n                sum += ( lower [ i ] [ j ] * upper [ j ] [ k ] ) ;\n            upper [ i ] [ k ] = mat [ i ] [ k ] - sum ;\n        for k in range ( i , n ) :\n            if ( i == k ) :\n                lower [ i ] [ i ] = 1 ;\n            else :\n                sum = 0 ;\n                for j in range ( i ) :\n                    sum += ( lower [ k ] [ j ] * upper [ j ] [ i ] ) ;\n                lower [ k ] [ i ] = int ( ( mat [ k ] [ i ] - sum ) / upper [ i ] [ i ] ) ;\n    print ( \"Lower Triangular\\t\\tUpper Triangular\" ) ;\n    for i in range ( n ) :\n        for j in range ( n ) :\n            print ( lower [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" , end = \"\\t\" ) ;\n        for j in range ( n ) :\n            print ( upper [ i ] [ j ] , end = \"\\t\" ) ;\n        print ( \"\" ) ;"}
{"source": "python", "target": "java", "source_program": " def catalan ( n ) :\n    if n <= 1 :\n        return 1\n    res = 0\n    for i in range ( n ) :\n        res += catalan ( i ) * catalan ( n - i - 1 )\n    return res", "target_program": " int catalan ( int n ) {\n  int res = 0 ;\n  if ( n <= 1 ) {\n    return 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res += catalan ( i ) * catalan ( n - i - 1 ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def catalan ( n ) :\n    if n <= 1 :\n        return 1\n    res = 0\n    for i in range ( n ) :\n        res += catalan ( i ) * catalan ( n - i - 1 )\n    return res", "target_program": " unsigned long int catalan ( unsigned int n ) {\n  if ( n <= 1 ) return 1;\n  unsigned long int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) res += catalan ( i ) * catalan ( n - i - 1 );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " int catalan ( int n ) {\n  int res = 0 ;\n  if ( n <= 1 ) {\n    return 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res += catalan ( i ) * catalan ( n - i - 1 ) ;\n  }\n  return res ;\n}", "target_program": " def catalan ( n ) :\n    if n <= 1 :\n        return 1\n    res = 0\n    for i in range ( n ) :\n        res += catalan ( i ) * catalan ( n - i - 1 )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " int catalan ( int n ) {\n  int res = 0 ;\n  if ( n <= 1 ) {\n    return 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res += catalan ( i ) * catalan ( n - i - 1 ) ;\n  }\n  return res ;\n}", "target_program": " unsigned long int catalan ( unsigned int n ) {\n  if ( n <= 1 ) return 1;\n  unsigned long int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) res += catalan ( i ) * catalan ( n - i - 1 );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned long int catalan ( unsigned int n ) {\n  if ( n <= 1 ) return 1;\n  unsigned long int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) res += catalan ( i ) * catalan ( n - i - 1 );\n  return res;\n}", "target_program": " int catalan ( int n ) {\n  int res = 0 ;\n  if ( n <= 1 ) {\n    return 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res += catalan ( i ) * catalan ( n - i - 1 ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned long int catalan ( unsigned int n ) {\n  if ( n <= 1 ) return 1;\n  unsigned long int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) res += catalan ( i ) * catalan ( n - i - 1 );\n  return res;\n}", "target_program": " def catalan ( n ) :\n    if n <= 1 :\n        return 1\n    res = 0\n    for i in range ( n ) :\n        res += catalan ( i ) * catalan ( n - i - 1 )\n    return res"}
{"source": "python", "target": "java", "source_program": " def divisible ( num ) :\n    n = len ( num ) ;\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += int ( num [ i ] ) ;\n    if ( sum % 3 == 0 ) :\n        return 0 ;\n    if ( n == 1 ) :\n        return - 1 ;\n    for i in range ( n ) :\n        if ( sum % 3 == int ( num [ i ] ) % 3 ) :\n            return 1 ;\n    if ( n == 2 ) :\n        return - 1 ;\n    return 2 ;", "target_program": " static int divisible ( String num ) {\n  int n = num . length ( ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( int ) ( num . charAt ( i ) ) ;\n  if ( sum % 3 == 0 ) return 0 ;\n  if ( n == 1 ) return - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) return 1 ;\n  if ( n == 2 ) return - 1 ;\n  return 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def divisible ( num ) :\n    n = len ( num ) ;\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += int ( num [ i ] ) ;\n    if ( sum % 3 == 0 ) :\n        return 0 ;\n    if ( n == 1 ) :\n        return - 1 ;\n    for i in range ( n ) :\n        if ( sum % 3 == int ( num [ i ] ) % 3 ) :\n            return 1 ;\n    if ( n == 2 ) :\n        return - 1 ;\n    return 2 ;", "target_program": " int divisible ( string num ) {\n  int n = num . length ( );\n  int sum = accumulate ( begin ( num ), end ( num ), 0 ) - '0' * 1;\n  if ( sum % 3 == 0 ) return 0;\n  if ( n == 1 ) return - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( sum % 3 == ( num [ i ] - '0' ) % 3 ) return 1;\n  if ( n == 2 ) return - 1;\n  return 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int divisible ( String num ) {\n  int n = num . length ( ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( int ) ( num . charAt ( i ) ) ;\n  if ( sum % 3 == 0 ) return 0 ;\n  if ( n == 1 ) return - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) return 1 ;\n  if ( n == 2 ) return - 1 ;\n  return 2 ;\n}", "target_program": " def divisible ( num ) :\n    n = len ( num ) ;\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += int ( num [ i ] ) ;\n    if ( sum % 3 == 0 ) :\n        return 0 ;\n    if ( n == 1 ) :\n        return - 1 ;\n    for i in range ( n ) :\n        if ( sum % 3 == int ( num [ i ] ) % 3 ) :\n            return 1 ;\n    if ( n == 2 ) :\n        return - 1 ;\n    return 2 ;"}
{"source": "java", "target": "cpp", "source_program": " static int divisible ( String num ) {\n  int n = num . length ( ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( int ) ( num . charAt ( i ) ) ;\n  if ( sum % 3 == 0 ) return 0 ;\n  if ( n == 1 ) return - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) return 1 ;\n  if ( n == 2 ) return - 1 ;\n  return 2 ;\n}", "target_program": " int divisible ( string num ) {\n  int n = num . length ( );\n  int sum = accumulate ( begin ( num ), end ( num ), 0 ) - '0' * 1;\n  if ( sum % 3 == 0 ) return 0;\n  if ( n == 1 ) return - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( sum % 3 == ( num [ i ] - '0' ) % 3 ) return 1;\n  if ( n == 2 ) return - 1;\n  return 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int divisible ( string num ) {\n  int n = num . length ( );\n  int sum = accumulate ( begin ( num ), end ( num ), 0 ) - '0' * 1;\n  if ( sum % 3 == 0 ) return 0;\n  if ( n == 1 ) return - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( sum % 3 == ( num [ i ] - '0' ) % 3 ) return 1;\n  if ( n == 2 ) return - 1;\n  return 2;\n}", "target_program": " static int divisible ( String num ) {\n  int n = num . length ( ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( int ) ( num . charAt ( i ) ) ;\n  if ( sum % 3 == 0 ) return 0 ;\n  if ( n == 1 ) return - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( sum % 3 == ( num . charAt ( i ) - '0' ) % 3 ) return 1 ;\n  if ( n == 2 ) return - 1 ;\n  return 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int divisible ( string num ) {\n  int n = num . length ( );\n  int sum = accumulate ( begin ( num ), end ( num ), 0 ) - '0' * 1;\n  if ( sum % 3 == 0 ) return 0;\n  if ( n == 1 ) return - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( sum % 3 == ( num [ i ] - '0' ) % 3 ) return 1;\n  if ( n == 2 ) return - 1;\n  return 2;\n}", "target_program": " def divisible ( num ) :\n    n = len ( num ) ;\n    sum = 0 ;\n    for i in range ( n ) :\n        sum += int ( num [ i ] ) ;\n    if ( sum % 3 == 0 ) :\n        return 0 ;\n    if ( n == 1 ) :\n        return - 1 ;\n    for i in range ( n ) :\n        if ( sum % 3 == int ( num [ i ] ) % 3 ) :\n            return 1 ;\n    if ( n == 2 ) :\n        return - 1 ;\n    return 2 ;"}
{"source": "python", "target": "java", "source_program": " def isPower ( x , y ) :\n    res1 = math.log ( y ) / math.log ( x ) ;\n    res2 = math.log ( y ) / math.log ( x ) ;\n    return 1 if ( res1 == res2 ) else 0 ;", "target_program": " static boolean isPower ( int x , int y ) {\n  int res1 = ( int ) Math . log ( y ) / ( int ) Math . log ( x ) ;\n  double res2 = Math . log ( y ) / Math . log ( x ) ;\n  return ( res1 == res2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPower ( x , y ) :\n    res1 = math.log ( y ) / math.log ( x ) ;\n    res2 = math.log ( y ) / math.log ( x ) ;\n    return 1 if ( res1 == res2 ) else 0 ;", "target_program": " bool isPower ( int x, int y ) {\n  int res1 = log ( y ) / log ( x );\n  double res2 = log ( y ) / log ( x );\n  return ( res1 == res2 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPower ( int x , int y ) {\n  int res1 = ( int ) Math . log ( y ) / ( int ) Math . log ( x ) ;\n  double res2 = Math . log ( y ) / Math . log ( x ) ;\n  return ( res1 == res2 ) ;\n}", "target_program": " def isPower ( x , y ) :\n    res1 = math.log ( y ) / math.log ( x ) ;\n    res2 = math.log ( y ) / math.log ( x ) ;\n    return 1 if ( res1 == res2 ) else 0 ;"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPower ( int x , int y ) {\n  int res1 = ( int ) Math . log ( y ) / ( int ) Math . log ( x ) ;\n  double res2 = Math . log ( y ) / Math . log ( x ) ;\n  return ( res1 == res2 ) ;\n}", "target_program": " bool isPower ( int x, int y ) {\n  int res1 = log ( y ) / log ( x );\n  double res2 = log ( y ) / log ( x );\n  return ( res1 == res2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPower ( int x, int y ) {\n  int res1 = log ( y ) / log ( x );\n  double res2 = log ( y ) / log ( x );\n  return ( res1 == res2 );\n}", "target_program": " static boolean isPower ( int x , int y ) {\n  int res1 = ( int ) Math . log ( y ) / ( int ) Math . log ( x ) ;\n  double res2 = Math . log ( y ) / Math . log ( x ) ;\n  return ( res1 == res2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPower ( int x, int y ) {\n  int res1 = log ( y ) / log ( x );\n  double res2 = log ( y ) / log ( x );\n  return ( res1 == res2 );\n}", "target_program": " def isPower ( x , y ) :\n    res1 = math.log ( y ) / math.log ( x ) ;\n    res2 = math.log ( y ) / math.log ( x ) ;\n    return 1 if ( res1 == res2 ) else 0 ;"}
{"source": "python", "target": "java", "source_program": " def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    for i in range ( 2 , maxele + 1 ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr [ j ] % i == 0 ) :\n                count += 1\n        ans = max ( ans , count )\n    return ans", "target_program": " static int largestGCDSubsequence ( int arr [ ] , int n ) {\n  int ans = 0 ;\n  int maxele = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ;\n  ;\n  for ( int i = 2 ;\n  i <= maxele ;\n  ++ i ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < n ;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count ;\n    }\n    ans = Math . max ( ans , count ) ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    for i in range ( 2 , maxele + 1 ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr [ j ] % i == 0 ) :\n                count += 1\n        ans = max ( ans , count )\n    return ans", "target_program": " int largestGCDSubsequence ( int arr [ ], int n ) {\n  int ans = 0;\n  int maxele = * max_element ( arr, arr + n );\n  for ( int i = 2;\n  i <= maxele;\n  ++ i ) {\n    int count = 0;\n    for ( int j = 0;\n    j < n;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count;\n    }\n    ans = max ( ans, count );\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int largestGCDSubsequence ( int arr [ ] , int n ) {\n  int ans = 0 ;\n  int maxele = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ;\n  ;\n  for ( int i = 2 ;\n  i <= maxele ;\n  ++ i ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < n ;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count ;\n    }\n    ans = Math . max ( ans , count ) ;\n  }\n  return ans ;\n}", "target_program": " def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    for i in range ( 2 , maxele + 1 ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr [ j ] % i == 0 ) :\n                count += 1\n        ans = max ( ans , count )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int largestGCDSubsequence ( int arr [ ] , int n ) {\n  int ans = 0 ;\n  int maxele = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ;\n  ;\n  for ( int i = 2 ;\n  i <= maxele ;\n  ++ i ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < n ;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count ;\n    }\n    ans = Math . max ( ans , count ) ;\n  }\n  return ans ;\n}", "target_program": " int largestGCDSubsequence ( int arr [ ], int n ) {\n  int ans = 0;\n  int maxele = * max_element ( arr, arr + n );\n  for ( int i = 2;\n  i <= maxele;\n  ++ i ) {\n    int count = 0;\n    for ( int j = 0;\n    j < n;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count;\n    }\n    ans = max ( ans, count );\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int largestGCDSubsequence ( int arr [ ], int n ) {\n  int ans = 0;\n  int maxele = * max_element ( arr, arr + n );\n  for ( int i = 2;\n  i <= maxele;\n  ++ i ) {\n    int count = 0;\n    for ( int j = 0;\n    j < n;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count;\n    }\n    ans = max ( ans, count );\n  }\n  return ans;\n}", "target_program": " static int largestGCDSubsequence ( int arr [ ] , int n ) {\n  int ans = 0 ;\n  int maxele = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ;\n  ;\n  for ( int i = 2 ;\n  i <= maxele ;\n  ++ i ) {\n    int count = 0 ;\n    for ( int j = 0 ;\n    j < n ;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count ;\n    }\n    ans = Math . max ( ans , count ) ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int largestGCDSubsequence ( int arr [ ], int n ) {\n  int ans = 0;\n  int maxele = * max_element ( arr, arr + n );\n  for ( int i = 2;\n  i <= maxele;\n  ++ i ) {\n    int count = 0;\n    for ( int j = 0;\n    j < n;\n    ++ j ) {\n      if ( arr [ j ] % i == 0 ) ++ count;\n    }\n    ans = max ( ans, count );\n  }\n  return ans;\n}", "target_program": " def largestGCDSubsequence ( arr , n ) :\n    ans = 0\n    maxele = max ( arr )\n    for i in range ( 2 , maxele + 1 ) :\n        count = 0\n        for j in range ( n ) :\n            if ( arr [ j ] % i == 0 ) :\n                count += 1\n        ans = max ( ans , count )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findCommon ( mat ) :\n    column = [ N - 1 ] * M\n    min_row = 0\n    while ( column [ min_row ] >= 0 ) :\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) :\n                min_row = i\n        eq_count = 0\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) :\n                if ( column [ i ] == 0 ) :\n                    return - 1\n                column [ i ] -= 1\n            else :\n                eq_count += 1\n        if ( eq_count == M ) :\n            return mat [ min_row ] [ column [ min_row ] ]\n    return - 1", "target_program": " static int findCommon ( int mat [ ] [ ] ) {\n  int column [ ] = new int [ M ] ;\n  int min_row ;\n  int i ;\n  for ( i = 0 ;\n  i < M ;\n  i ++ ) column [ i ] = N - 1 ;\n  min_row = 0 ;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i ;\n    }\n    int eq_count = 0 ;\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1 ;\n        column [ i ] -= 1 ;\n      }\n      else eq_count ++ ;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ] ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findCommon ( mat ) :\n    column = [ N - 1 ] * M\n    min_row = 0\n    while ( column [ min_row ] >= 0 ) :\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) :\n                min_row = i\n        eq_count = 0\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) :\n                if ( column [ i ] == 0 ) :\n                    return - 1\n                column [ i ] -= 1\n            else :\n                eq_count += 1\n        if ( eq_count == M ) :\n            return mat [ min_row ] [ column [ min_row ] ]\n    return - 1", "target_program": " int findCommon ( int mat [ M ] [ N ] ) {\n  int column [ M ];\n  int min_row;\n  int i;\n  for ( i = 0;\n  i < M;\n  i ++ ) column [ i ] = N - 1;\n  min_row = 0;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i;\n    }\n    int eq_count = 0;\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1;\n        column [ i ] -= 1;\n      }\n      else eq_count ++;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ];\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findCommon ( int mat [ ] [ ] ) {\n  int column [ ] = new int [ M ] ;\n  int min_row ;\n  int i ;\n  for ( i = 0 ;\n  i < M ;\n  i ++ ) column [ i ] = N - 1 ;\n  min_row = 0 ;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i ;\n    }\n    int eq_count = 0 ;\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1 ;\n        column [ i ] -= 1 ;\n      }\n      else eq_count ++ ;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ] ;\n  }\n  return - 1 ;\n}", "target_program": " def findCommon ( mat ) :\n    column = [ N - 1 ] * M\n    min_row = 0\n    while ( column [ min_row ] >= 0 ) :\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) :\n                min_row = i\n        eq_count = 0\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) :\n                if ( column [ i ] == 0 ) :\n                    return - 1\n                column [ i ] -= 1\n            else :\n                eq_count += 1\n        if ( eq_count == M ) :\n            return mat [ min_row ] [ column [ min_row ] ]\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findCommon ( int mat [ ] [ ] ) {\n  int column [ ] = new int [ M ] ;\n  int min_row ;\n  int i ;\n  for ( i = 0 ;\n  i < M ;\n  i ++ ) column [ i ] = N - 1 ;\n  min_row = 0 ;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i ;\n    }\n    int eq_count = 0 ;\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1 ;\n        column [ i ] -= 1 ;\n      }\n      else eq_count ++ ;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ] ;\n  }\n  return - 1 ;\n}", "target_program": " int findCommon ( int mat [ M ] [ N ] ) {\n  int column [ M ];\n  int min_row;\n  int i;\n  for ( i = 0;\n  i < M;\n  i ++ ) column [ i ] = N - 1;\n  min_row = 0;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i;\n    }\n    int eq_count = 0;\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1;\n        column [ i ] -= 1;\n      }\n      else eq_count ++;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ];\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findCommon ( int mat [ M ] [ N ] ) {\n  int column [ M ];\n  int min_row;\n  int i;\n  for ( i = 0;\n  i < M;\n  i ++ ) column [ i ] = N - 1;\n  min_row = 0;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i;\n    }\n    int eq_count = 0;\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1;\n        column [ i ] -= 1;\n      }\n      else eq_count ++;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ];\n  }\n  return - 1;\n}", "target_program": " static int findCommon ( int mat [ ] [ ] ) {\n  int column [ ] = new int [ M ] ;\n  int min_row ;\n  int i ;\n  for ( i = 0 ;\n  i < M ;\n  i ++ ) column [ i ] = N - 1 ;\n  min_row = 0 ;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i ;\n    }\n    int eq_count = 0 ;\n    for ( i = 0 ;\n    i < M ;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1 ;\n        column [ i ] -= 1 ;\n      }\n      else eq_count ++ ;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ] ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findCommon ( int mat [ M ] [ N ] ) {\n  int column [ M ];\n  int min_row;\n  int i;\n  for ( i = 0;\n  i < M;\n  i ++ ) column [ i ] = N - 1;\n  min_row = 0;\n  while ( column [ min_row ] >= 0 ) {\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) min_row = i;\n    }\n    int eq_count = 0;\n    for ( i = 0;\n    i < M;\n    i ++ ) {\n      if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) {\n        if ( column [ i ] == 0 ) return - 1;\n        column [ i ] -= 1;\n      }\n      else eq_count ++;\n    }\n    if ( eq_count == M ) return mat [ min_row ] [ column [ min_row ] ];\n  }\n  return - 1;\n}", "target_program": " def findCommon ( mat ) :\n    column = [ N - 1 ] * M\n    min_row = 0\n    while ( column [ min_row ] >= 0 ) :\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] < mat [ min_row ] [ column [ min_row ] ] ) :\n                min_row = i\n        eq_count = 0\n        for i in range ( M ) :\n            if ( mat [ i ] [ column [ i ] ] > mat [ min_row ] [ column [ min_row ] ] ) :\n                if ( column [ i ] == 0 ) :\n                    return - 1\n                column [ i ] -= 1\n            else :\n                eq_count += 1\n        if ( eq_count == M ) :\n            return mat [ min_row ] [ column [ min_row ] ]\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def checkcircle ( r , R , r1 , x1 , y1 ) :\n    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )\n    return ( dis - r1 >= R and dis + r1 <= r )", "target_program": " public static boolean checkcircle ( int r , int R , int r1 , int x1 , int y1 ) {\n  int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;\n  return ( dis - r1 >= R && dis + r1 <= r ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkcircle ( r , R , r1 , x1 , y1 ) :\n    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )\n    return ( dis - r1 >= R and dis + r1 <= r )", "target_program": " bool checkcircle ( int r, int R, int r1, int x1, int y1 ) {\n  int dis = sqrt ( x1 * x1 + y1 * y1 );\n  return ( dis - r1 >= R && dis + r1 <= r );\n}"}
{"source": "java", "target": "python", "source_program": " public static boolean checkcircle ( int r , int R , int r1 , int x1 , int y1 ) {\n  int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;\n  return ( dis - r1 >= R && dis + r1 <= r ) ;\n}", "target_program": " def checkcircle ( r , R , r1 , x1 , y1 ) :\n    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )\n    return ( dis - r1 >= R and dis + r1 <= r )"}
{"source": "java", "target": "cpp", "source_program": " public static boolean checkcircle ( int r , int R , int r1 , int x1 , int y1 ) {\n  int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;\n  return ( dis - r1 >= R && dis + r1 <= r ) ;\n}", "target_program": " bool checkcircle ( int r, int R, int r1, int x1, int y1 ) {\n  int dis = sqrt ( x1 * x1 + y1 * y1 );\n  return ( dis - r1 >= R && dis + r1 <= r );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkcircle ( int r, int R, int r1, int x1, int y1 ) {\n  int dis = sqrt ( x1 * x1 + y1 * y1 );\n  return ( dis - r1 >= R && dis + r1 <= r );\n}", "target_program": " public static boolean checkcircle ( int r , int R , int r1 , int x1 , int y1 ) {\n  int dis = ( int ) Math . sqrt ( x1 * x1 + y1 * y1 ) ;\n  return ( dis - r1 >= R && dis + r1 <= r ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkcircle ( int r, int R, int r1, int x1, int y1 ) {\n  int dis = sqrt ( x1 * x1 + y1 * y1 );\n  return ( dis - r1 >= R && dis + r1 <= r );\n}", "target_program": " def checkcircle ( r , R , r1 , x1 , y1 ) :\n    dis = int ( math.sqrt ( x1 * x1 + y1 * y1 ) )\n    return ( dis - r1 >= R and dis + r1 <= r )"}
{"source": "python", "target": "java", "source_program": " def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        for j in range ( 0 , n + 1 ) :\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n        i += 1\n    return ans", "target_program": " static int countSetBits ( int n ) {\n  int i = 0 ;\n  int ans = 0 ;\n  while ( ( 1 << i ) <= n ) {\n    boolean k = false ;\n    int change = 1 << i ;\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( k == true ) ans += 1 ;\n      else ans += 0 ;\n      if ( change == 1 ) {\n        k = ! k ;\n        change = 1 << i ;\n      }\n      else {\n        change -- ;\n      }\n    }\n    i ++ ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        for j in range ( 0 , n + 1 ) :\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n        i += 1\n    return ans", "target_program": " int countSetBits ( int n ) {\n  int i = 0;\n  int ans = 0;\n  while ( ( 1 << i ) <= n ) {\n    bool k = 0;\n    int change = 1 << i;\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      ans += k;\n      if ( change == 1 ) {\n        k = ! k;\n        change = 1 << i;\n      }\n      else {\n        change --;\n      }\n    }\n    i ++;\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSetBits ( int n ) {\n  int i = 0 ;\n  int ans = 0 ;\n  while ( ( 1 << i ) <= n ) {\n    boolean k = false ;\n    int change = 1 << i ;\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( k == true ) ans += 1 ;\n      else ans += 0 ;\n      if ( change == 1 ) {\n        k = ! k ;\n        change = 1 << i ;\n      }\n      else {\n        change -- ;\n      }\n    }\n    i ++ ;\n  }\n  return ans ;\n}", "target_program": " def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        for j in range ( 0 , n + 1 ) :\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n        i += 1\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int countSetBits ( int n ) {\n  int i = 0 ;\n  int ans = 0 ;\n  while ( ( 1 << i ) <= n ) {\n    boolean k = false ;\n    int change = 1 << i ;\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( k == true ) ans += 1 ;\n      else ans += 0 ;\n      if ( change == 1 ) {\n        k = ! k ;\n        change = 1 << i ;\n      }\n      else {\n        change -- ;\n      }\n    }\n    i ++ ;\n  }\n  return ans ;\n}", "target_program": " int countSetBits ( int n ) {\n  int i = 0;\n  int ans = 0;\n  while ( ( 1 << i ) <= n ) {\n    bool k = 0;\n    int change = 1 << i;\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      ans += k;\n      if ( change == 1 ) {\n        k = ! k;\n        change = 1 << i;\n      }\n      else {\n        change --;\n      }\n    }\n    i ++;\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSetBits ( int n ) {\n  int i = 0;\n  int ans = 0;\n  while ( ( 1 << i ) <= n ) {\n    bool k = 0;\n    int change = 1 << i;\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      ans += k;\n      if ( change == 1 ) {\n        k = ! k;\n        change = 1 << i;\n      }\n      else {\n        change --;\n      }\n    }\n    i ++;\n  }\n  return ans;\n}", "target_program": " static int countSetBits ( int n ) {\n  int i = 0 ;\n  int ans = 0 ;\n  while ( ( 1 << i ) <= n ) {\n    boolean k = false ;\n    int change = 1 << i ;\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( k == true ) ans += 1 ;\n      else ans += 0 ;\n      if ( change == 1 ) {\n        k = ! k ;\n        change = 1 << i ;\n      }\n      else {\n        change -- ;\n      }\n    }\n    i ++ ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSetBits ( int n ) {\n  int i = 0;\n  int ans = 0;\n  while ( ( 1 << i ) <= n ) {\n    bool k = 0;\n    int change = 1 << i;\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      ans += k;\n      if ( change == 1 ) {\n        k = ! k;\n        change = 1 << i;\n      }\n      else {\n        change --;\n      }\n    }\n    i ++;\n  }\n  return ans;\n}", "target_program": " def countSetBits ( n ) :\n    i = 0\n    ans = 0\n    while ( ( 1 << i ) <= n ) :\n        k = 0\n        change = 1 << i\n        for j in range ( 0 , n + 1 ) :\n            ans += k\n            if change == 1 :\n                k = not k\n                change = 1 << i\n            else :\n                change -= 1\n        i += 1\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n ] [ n ]", "target_program": " static int findLongestRepeatingSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ n ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n ] [ n ]", "target_program": " int findLongestRepeatingSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int findLongestRepeatingSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ n ] [ n ] ;\n}", "target_program": " def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int findLongestRepeatingSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ n ] [ n ] ;\n}", "target_program": " int findLongestRepeatingSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLongestRepeatingSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n ] [ n ];\n}", "target_program": " static int findLongestRepeatingSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ n ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLongestRepeatingSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n    }\n  }\n  return dp [ n ] [ n ];\n}", "target_program": " def findLongestRepeatingSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 ] * ( n + 1 ) ] * ( n + 1 )\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    return dp [ n ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def findFirstMissing ( array , start , end ) :\n    if ( start > end ) :\n        return end + 1\n    if ( start != array [ start ] ) :\n        return start ;\n    mid = int ( ( start + end ) / 2 )\n    if ( array [ mid ] == mid ) :\n        return findFirstMissing ( array , mid + 1 , end )\n    return findFirstMissing ( array , start , mid )", "target_program": " int findFirstMissing ( int array [ ] , int start , int end ) {\n  if ( start > end ) return end + 1 ;\n  if ( start != array [ start ] ) return start ;\n  int mid = ( start + end ) / 2 ;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ;\n  return findFirstMissing ( array , start , mid ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findFirstMissing ( array , start , end ) :\n    if ( start > end ) :\n        return end + 1\n    if ( start != array [ start ] ) :\n        return start ;\n    mid = int ( ( start + end ) / 2 )\n    if ( array [ mid ] == mid ) :\n        return findFirstMissing ( array , mid + 1 , end )\n    return findFirstMissing ( array , start , mid )", "target_program": " int findFirstMissing ( int array [ ], int start, int end ) {\n  if ( start > end ) return end + 1;\n  if ( start != array [ start ] ) return start;\n  int mid = ( start + end ) / 2;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array, mid + 1, end );\n  return findFirstMissing ( array, start, mid );\n}"}
{"source": "java", "target": "python", "source_program": " int findFirstMissing ( int array [ ] , int start , int end ) {\n  if ( start > end ) return end + 1 ;\n  if ( start != array [ start ] ) return start ;\n  int mid = ( start + end ) / 2 ;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ;\n  return findFirstMissing ( array , start , mid ) ;\n}", "target_program": " def findFirstMissing ( array , start , end ) :\n    if ( start > end ) :\n        return end + 1\n    if ( start != array [ start ] ) :\n        return start ;\n    mid = int ( ( start + end ) / 2 )\n    if ( array [ mid ] == mid ) :\n        return findFirstMissing ( array , mid + 1 , end )\n    return findFirstMissing ( array , start , mid )"}
{"source": "java", "target": "cpp", "source_program": " int findFirstMissing ( int array [ ] , int start , int end ) {\n  if ( start > end ) return end + 1 ;\n  if ( start != array [ start ] ) return start ;\n  int mid = ( start + end ) / 2 ;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ;\n  return findFirstMissing ( array , start , mid ) ;\n}", "target_program": " int findFirstMissing ( int array [ ], int start, int end ) {\n  if ( start > end ) return end + 1;\n  if ( start != array [ start ] ) return start;\n  int mid = ( start + end ) / 2;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array, mid + 1, end );\n  return findFirstMissing ( array, start, mid );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findFirstMissing ( int array [ ], int start, int end ) {\n  if ( start > end ) return end + 1;\n  if ( start != array [ start ] ) return start;\n  int mid = ( start + end ) / 2;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array, mid + 1, end );\n  return findFirstMissing ( array, start, mid );\n}", "target_program": " int findFirstMissing ( int array [ ] , int start , int end ) {\n  if ( start > end ) return end + 1 ;\n  if ( start != array [ start ] ) return start ;\n  int mid = ( start + end ) / 2 ;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array , mid + 1 , end ) ;\n  return findFirstMissing ( array , start , mid ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findFirstMissing ( int array [ ], int start, int end ) {\n  if ( start > end ) return end + 1;\n  if ( start != array [ start ] ) return start;\n  int mid = ( start + end ) / 2;\n  if ( array [ mid ] == mid ) return findFirstMissing ( array, mid + 1, end );\n  return findFirstMissing ( array, start, mid );\n}", "target_program": " def findFirstMissing ( array , start , end ) :\n    if ( start > end ) :\n        return end + 1\n    if ( start != array [ start ] ) :\n        return start ;\n    mid = int ( ( start + end ) / 2 )\n    if ( array [ mid ] == mid ) :\n        return findFirstMissing ( array , mid + 1 , end )\n    return findFirstMissing ( array , start , mid )"}
{"source": "python", "target": "java", "source_program": " def sortSquares ( arr , n ) :\n    K = 0\n    for K in range ( n ) :\n        if ( arr [ K ] >= 0 ) :\n            break\n    i = K - 1\n    j = K\n    ind = 0\n    temp = [ 0 ] * n\n    while ( i >= 0 and j < n ) :\n        if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) :\n            temp [ ind ] = arr [ i ] * arr [ i ]\n            i -= 1\n        else :\n            temp [ ind ] = arr [ j ] * arr [ j ]\n            j += 1\n        ind += 1\n    while ( i >= 0 ) :\n        temp [ ind ] = arr [ i ] * arr [ i ]\n        i -= 1\n        ind += 1\n    while ( j < n ) :\n        temp [ ind ] = arr [ j ] * arr [ j ]\n        j += 1\n        ind += 1\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]", "target_program": " public static void sortSquares ( int arr [ ] ) {\n  int n = arr . length ;\n  int k ;\n  for ( k = 0 ;\n  k < n ;\n  k ++ ) {\n    if ( arr [ k ] >= 0 ) break ;\n  }\n  int i = k - 1 ;\n  int j = k ;\n  int ind = 0 ;\n  int [ ] temp = new int [ n ] ;\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ] ;\n      i -- ;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ] ;\n      j ++ ;\n    }\n    ind ++ ;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ++ ] = arr [ i ] * arr [ i ] ;\n    i -- ;\n  }\n  while ( j < n ) {\n    temp [ ind ++ ] = arr [ j ] * arr [ j ] ;\n    j ++ ;\n  }\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) arr [ x ] = temp [ x ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sortSquares ( arr , n ) :\n    K = 0\n    for K in range ( n ) :\n        if ( arr [ K ] >= 0 ) :\n            break\n    i = K - 1\n    j = K\n    ind = 0\n    temp = [ 0 ] * n\n    while ( i >= 0 and j < n ) :\n        if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) :\n            temp [ ind ] = arr [ i ] * arr [ i ]\n            i -= 1\n        else :\n            temp [ ind ] = arr [ j ] * arr [ j ]\n            j += 1\n        ind += 1\n    while ( i >= 0 ) :\n        temp [ ind ] = arr [ i ] * arr [ i ]\n        i -= 1\n        ind += 1\n    while ( j < n ) :\n        temp [ ind ] = arr [ j ] * arr [ j ]\n        j += 1\n        ind += 1\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]", "target_program": " void sortSquares ( int arr [ ], int n ) {\n  int K = 0;\n  for ( K = 0;\n  K < n;\n  K ++ ) if ( arr [ K ] >= 0 ) break;\n  int i = K - 1;\n  int j = K;\n  int ind = 0;\n  int temp [ n ];\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ];\n      i --;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ];\n      j ++;\n    }\n    ind ++;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ] = arr [ i ] * arr [ i ];\n    i --;\n    ind ++;\n  }\n  while ( j < n ) {\n    temp [ ind ] = arr [ j ] * arr [ j ];\n    j ++;\n    ind ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}"}
{"source": "java", "target": "python", "source_program": " public static void sortSquares ( int arr [ ] ) {\n  int n = arr . length ;\n  int k ;\n  for ( k = 0 ;\n  k < n ;\n  k ++ ) {\n    if ( arr [ k ] >= 0 ) break ;\n  }\n  int i = k - 1 ;\n  int j = k ;\n  int ind = 0 ;\n  int [ ] temp = new int [ n ] ;\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ] ;\n      i -- ;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ] ;\n      j ++ ;\n    }\n    ind ++ ;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ++ ] = arr [ i ] * arr [ i ] ;\n    i -- ;\n  }\n  while ( j < n ) {\n    temp [ ind ++ ] = arr [ j ] * arr [ j ] ;\n    j ++ ;\n  }\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) arr [ x ] = temp [ x ] ;\n}", "target_program": " def sortSquares ( arr , n ) :\n    K = 0\n    for K in range ( n ) :\n        if ( arr [ K ] >= 0 ) :\n            break\n    i = K - 1\n    j = K\n    ind = 0\n    temp = [ 0 ] * n\n    while ( i >= 0 and j < n ) :\n        if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) :\n            temp [ ind ] = arr [ i ] * arr [ i ]\n            i -= 1\n        else :\n            temp [ ind ] = arr [ j ] * arr [ j ]\n            j += 1\n        ind += 1\n    while ( i >= 0 ) :\n        temp [ ind ] = arr [ i ] * arr [ i ]\n        i -= 1\n        ind += 1\n    while ( j < n ) :\n        temp [ ind ] = arr [ j ] * arr [ j ]\n        j += 1\n        ind += 1\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]"}
{"source": "java", "target": "cpp", "source_program": " public static void sortSquares ( int arr [ ] ) {\n  int n = arr . length ;\n  int k ;\n  for ( k = 0 ;\n  k < n ;\n  k ++ ) {\n    if ( arr [ k ] >= 0 ) break ;\n  }\n  int i = k - 1 ;\n  int j = k ;\n  int ind = 0 ;\n  int [ ] temp = new int [ n ] ;\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ] ;\n      i -- ;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ] ;\n      j ++ ;\n    }\n    ind ++ ;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ++ ] = arr [ i ] * arr [ i ] ;\n    i -- ;\n  }\n  while ( j < n ) {\n    temp [ ind ++ ] = arr [ j ] * arr [ j ] ;\n    j ++ ;\n  }\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) arr [ x ] = temp [ x ] ;\n}", "target_program": " void sortSquares ( int arr [ ], int n ) {\n  int K = 0;\n  for ( K = 0;\n  K < n;\n  K ++ ) if ( arr [ K ] >= 0 ) break;\n  int i = K - 1;\n  int j = K;\n  int ind = 0;\n  int temp [ n ];\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ];\n      i --;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ];\n      j ++;\n    }\n    ind ++;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ] = arr [ i ] * arr [ i ];\n    i --;\n    ind ++;\n  }\n  while ( j < n ) {\n    temp [ ind ] = arr [ j ] * arr [ j ];\n    j ++;\n    ind ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void sortSquares ( int arr [ ], int n ) {\n  int K = 0;\n  for ( K = 0;\n  K < n;\n  K ++ ) if ( arr [ K ] >= 0 ) break;\n  int i = K - 1;\n  int j = K;\n  int ind = 0;\n  int temp [ n ];\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ];\n      i --;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ];\n      j ++;\n    }\n    ind ++;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ] = arr [ i ] * arr [ i ];\n    i --;\n    ind ++;\n  }\n  while ( j < n ) {\n    temp [ ind ] = arr [ j ] * arr [ j ];\n    j ++;\n    ind ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}", "target_program": " public static void sortSquares ( int arr [ ] ) {\n  int n = arr . length ;\n  int k ;\n  for ( k = 0 ;\n  k < n ;\n  k ++ ) {\n    if ( arr [ k ] >= 0 ) break ;\n  }\n  int i = k - 1 ;\n  int j = k ;\n  int ind = 0 ;\n  int [ ] temp = new int [ n ] ;\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ] ;\n      i -- ;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ] ;\n      j ++ ;\n    }\n    ind ++ ;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ++ ] = arr [ i ] * arr [ i ] ;\n    i -- ;\n  }\n  while ( j < n ) {\n    temp [ ind ++ ] = arr [ j ] * arr [ j ] ;\n    j ++ ;\n  }\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) arr [ x ] = temp [ x ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void sortSquares ( int arr [ ], int n ) {\n  int K = 0;\n  for ( K = 0;\n  K < n;\n  K ++ ) if ( arr [ K ] >= 0 ) break;\n  int i = K - 1;\n  int j = K;\n  int ind = 0;\n  int temp [ n ];\n  while ( i >= 0 && j < n ) {\n    if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) {\n      temp [ ind ] = arr [ i ] * arr [ i ];\n      i --;\n    }\n    else {\n      temp [ ind ] = arr [ j ] * arr [ j ];\n      j ++;\n    }\n    ind ++;\n  }\n  while ( i >= 0 ) {\n    temp [ ind ] = arr [ i ] * arr [ i ];\n    i --;\n    ind ++;\n  }\n  while ( j < n ) {\n    temp [ ind ] = arr [ j ] * arr [ j ];\n    j ++;\n    ind ++;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = temp [ i ];\n}", "target_program": " def sortSquares ( arr , n ) :\n    K = 0\n    for K in range ( n ) :\n        if ( arr [ K ] >= 0 ) :\n            break\n    i = K - 1\n    j = K\n    ind = 0\n    temp = [ 0 ] * n\n    while ( i >= 0 and j < n ) :\n        if ( arr [ i ] * arr [ i ] < arr [ j ] * arr [ j ] ) :\n            temp [ ind ] = arr [ i ] * arr [ i ]\n            i -= 1\n        else :\n            temp [ ind ] = arr [ j ] * arr [ j ]\n            j += 1\n        ind += 1\n    while ( i >= 0 ) :\n        temp [ ind ] = arr [ i ] * arr [ i ]\n        i -= 1\n        ind += 1\n    while ( j < n ) :\n        temp [ ind ] = arr [ j ] * arr [ j ]\n        j += 1\n        ind += 1\n    for i in range ( n ) :\n        arr [ i ] = temp [ i ]"}
{"source": "python", "target": "java", "source_program": " def getRemainder ( num , divisor ) :\n    return ( num - divisor * ( num // divisor ) )", "target_program": " static int getRemainder ( int num , int divisor ) {\n  return ( num - divisor * ( num / divisor ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getRemainder ( num , divisor ) :\n    return ( num - divisor * ( num // divisor ) )", "target_program": " int getRemainder ( int num, int divisor ) {\n  return ( num - divisor * ( num / divisor ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int getRemainder ( int num , int divisor ) {\n  return ( num - divisor * ( num / divisor ) ) ;\n}", "target_program": " def getRemainder ( num , divisor ) :\n    return ( num - divisor * ( num // divisor ) )"}
{"source": "java", "target": "cpp", "source_program": " static int getRemainder ( int num , int divisor ) {\n  return ( num - divisor * ( num / divisor ) ) ;\n}", "target_program": " int getRemainder ( int num, int divisor ) {\n  return ( num - divisor * ( num / divisor ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int getRemainder ( int num, int divisor ) {\n  return ( num - divisor * ( num / divisor ) );\n}", "target_program": " static int getRemainder ( int num , int divisor ) {\n  return ( num - divisor * ( num / divisor ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getRemainder ( int num, int divisor ) {\n  return ( num - divisor * ( num / divisor ) );\n}", "target_program": " def getRemainder ( num , divisor ) :\n    return ( num - divisor * ( num // divisor ) )"}
{"source": "python", "target": "java", "source_program": " def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    for i in range ( n ) :\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( W + 1 ) :\n        min_cost [ 0 ] [ i ] = INF\n    for i in range ( 1 , n + 1 ) :\n        min_cost [ i ] [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , W + 1 ) :\n            if ( wt [ i - 1 ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]", "target_program": " public static int MinimumCost ( int cost [ ] , int n , int W ) {\n  Vector < Integer > val = new Vector < Integer > ( ) ;\n  Vector < Integer > wt = new Vector < Integer > ( ) ;\n  int size = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . add ( cost [ i ] ) ;\n      wt . add ( i + 1 ) ;\n      size ++ ;\n    }\n  }\n  n = size ;\n  int min_cost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) min_cost [ 0 ] [ i ] = Integer . MAX_VALUE ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) min_cost [ i ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= W ;\n    j ++ ) {\n      if ( wt . get ( i - 1 ) > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ] ;\n      else min_cost [ i ] [ j ] = Math . min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt . get ( i - 1 ) ] + val . get ( i - 1 ) ) ;\n    }\n  }\n  return ( min_cost [ n ] [ W ] == Integer . MAX_VALUE ) ? - 1 : min_cost [ n ] [ W ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    for i in range ( n ) :\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( W + 1 ) :\n        min_cost [ 0 ] [ i ] = INF\n    for i in range ( 1 , n + 1 ) :\n        min_cost [ i ] [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , W + 1 ) :\n            if ( wt [ i - 1 ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]", "target_program": " int MinimumCost ( int cost [ ], int n, int W ) {\n  vector < int > val, wt;\n  int size = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . push_back ( cost [ i ] );\n      wt . push_back ( i + 1 );\n      size ++;\n    }\n  }\n  n = size;\n  int min_cost [ n + 1 ] [ W + 1 ];\n  for ( int i = 0;\n  i <= W;\n  i ++ ) min_cost [ 0 ] [ i ] = INF;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) min_cost [ i ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= W;\n    j ++ ) {\n      if ( wt [ i - 1 ] > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ];\n      else min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ], min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] );\n    }\n  }\n  return ( min_cost [ n ] [ W ] == INF ) ? - 1 : min_cost [ n ] [ W ];\n}"}
{"source": "java", "target": "python", "source_program": " public static int MinimumCost ( int cost [ ] , int n , int W ) {\n  Vector < Integer > val = new Vector < Integer > ( ) ;\n  Vector < Integer > wt = new Vector < Integer > ( ) ;\n  int size = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . add ( cost [ i ] ) ;\n      wt . add ( i + 1 ) ;\n      size ++ ;\n    }\n  }\n  n = size ;\n  int min_cost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) min_cost [ 0 ] [ i ] = Integer . MAX_VALUE ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) min_cost [ i ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= W ;\n    j ++ ) {\n      if ( wt . get ( i - 1 ) > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ] ;\n      else min_cost [ i ] [ j ] = Math . min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt . get ( i - 1 ) ] + val . get ( i - 1 ) ) ;\n    }\n  }\n  return ( min_cost [ n ] [ W ] == Integer . MAX_VALUE ) ? - 1 : min_cost [ n ] [ W ] ;\n}", "target_program": " def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    for i in range ( n ) :\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( W + 1 ) :\n        min_cost [ 0 ] [ i ] = INF\n    for i in range ( 1 , n + 1 ) :\n        min_cost [ i ] [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , W + 1 ) :\n            if ( wt [ i - 1 ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]"}
{"source": "java", "target": "cpp", "source_program": " public static int MinimumCost ( int cost [ ] , int n , int W ) {\n  Vector < Integer > val = new Vector < Integer > ( ) ;\n  Vector < Integer > wt = new Vector < Integer > ( ) ;\n  int size = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . add ( cost [ i ] ) ;\n      wt . add ( i + 1 ) ;\n      size ++ ;\n    }\n  }\n  n = size ;\n  int min_cost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) min_cost [ 0 ] [ i ] = Integer . MAX_VALUE ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) min_cost [ i ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= W ;\n    j ++ ) {\n      if ( wt . get ( i - 1 ) > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ] ;\n      else min_cost [ i ] [ j ] = Math . min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt . get ( i - 1 ) ] + val . get ( i - 1 ) ) ;\n    }\n  }\n  return ( min_cost [ n ] [ W ] == Integer . MAX_VALUE ) ? - 1 : min_cost [ n ] [ W ] ;\n}", "target_program": " int MinimumCost ( int cost [ ], int n, int W ) {\n  vector < int > val, wt;\n  int size = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . push_back ( cost [ i ] );\n      wt . push_back ( i + 1 );\n      size ++;\n    }\n  }\n  n = size;\n  int min_cost [ n + 1 ] [ W + 1 ];\n  for ( int i = 0;\n  i <= W;\n  i ++ ) min_cost [ 0 ] [ i ] = INF;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) min_cost [ i ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= W;\n    j ++ ) {\n      if ( wt [ i - 1 ] > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ];\n      else min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ], min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] );\n    }\n  }\n  return ( min_cost [ n ] [ W ] == INF ) ? - 1 : min_cost [ n ] [ W ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int MinimumCost ( int cost [ ], int n, int W ) {\n  vector < int > val, wt;\n  int size = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . push_back ( cost [ i ] );\n      wt . push_back ( i + 1 );\n      size ++;\n    }\n  }\n  n = size;\n  int min_cost [ n + 1 ] [ W + 1 ];\n  for ( int i = 0;\n  i <= W;\n  i ++ ) min_cost [ 0 ] [ i ] = INF;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) min_cost [ i ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= W;\n    j ++ ) {\n      if ( wt [ i - 1 ] > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ];\n      else min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ], min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] );\n    }\n  }\n  return ( min_cost [ n ] [ W ] == INF ) ? - 1 : min_cost [ n ] [ W ];\n}", "target_program": " public static int MinimumCost ( int cost [ ] , int n , int W ) {\n  Vector < Integer > val = new Vector < Integer > ( ) ;\n  Vector < Integer > wt = new Vector < Integer > ( ) ;\n  int size = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . add ( cost [ i ] ) ;\n      wt . add ( i + 1 ) ;\n      size ++ ;\n    }\n  }\n  n = size ;\n  int min_cost [ ] [ ] = new int [ n + 1 ] [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) min_cost [ 0 ] [ i ] = Integer . MAX_VALUE ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) min_cost [ i ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= W ;\n    j ++ ) {\n      if ( wt . get ( i - 1 ) > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ] ;\n      else min_cost [ i ] [ j ] = Math . min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt . get ( i - 1 ) ] + val . get ( i - 1 ) ) ;\n    }\n  }\n  return ( min_cost [ n ] [ W ] == Integer . MAX_VALUE ) ? - 1 : min_cost [ n ] [ W ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int MinimumCost ( int cost [ ], int n, int W ) {\n  vector < int > val, wt;\n  int size = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( cost [ i ] != - 1 ) {\n      val . push_back ( cost [ i ] );\n      wt . push_back ( i + 1 );\n      size ++;\n    }\n  }\n  n = size;\n  int min_cost [ n + 1 ] [ W + 1 ];\n  for ( int i = 0;\n  i <= W;\n  i ++ ) min_cost [ 0 ] [ i ] = INF;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) min_cost [ i ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= W;\n    j ++ ) {\n      if ( wt [ i - 1 ] > j ) min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ];\n      else min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ], min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] );\n    }\n  }\n  return ( min_cost [ n ] [ W ] == INF ) ? - 1 : min_cost [ n ] [ W ];\n}", "target_program": " def MinimumCost ( cost , n , W ) :\n    val = list ( )\n    wt = list ( )\n    size = 0\n    for i in range ( n ) :\n        if ( cost [ i ] != - 1 ) :\n            val.append ( cost [ i ] )\n            wt.append ( i + 1 )\n            size += 1\n    n = size\n    min_cost = [ [ 0 for i in range ( W + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( W + 1 ) :\n        min_cost [ 0 ] [ i ] = INF\n    for i in range ( 1 , n + 1 ) :\n        min_cost [ i ] [ 0 ] = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , W + 1 ) :\n            if ( wt [ i - 1 ] > j ) :\n                min_cost [ i ] [ j ] = min_cost [ i - 1 ] [ j ]\n            else :\n                min_cost [ i ] [ j ] = min ( min_cost [ i - 1 ] [ j ] , min_cost [ i ] [ j - wt [ i - 1 ] ] + val [ i - 1 ] )\n    if ( min_cost [ n ] [ W ] == INF ) :\n        return - 1\n    else :\n        return min_cost [ n ] [ W ]"}
{"source": "python", "target": "java", "source_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( 1 , MAX_CHAR + 1 ) :\n            if ( ( i + j ) < n ) :\n                if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( str1 [ i ] ) ) == j ) ) :\n                    result += 1 ;\n    return result", "target_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  ( i + j ) < n && j <= MAX_CHAR ;\n  j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) ) result ++ ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( 1 , MAX_CHAR + 1 ) :\n            if ( ( i + j ) < n ) :\n                if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( str1 [ i ] ) ) == j ) ) :\n                    result += 1 ;\n    return result", "target_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 1;\n  ( i + j ) < n && j <= MAX_CHAR;\n  j ++ ) if ( ( abs ( str [ i + j ] - str [ i ] ) == j ) ) result ++;\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  ( i + j ) < n && j <= MAX_CHAR ;\n  j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) ) result ++ ;\n  return result ;\n}", "target_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( 1 , MAX_CHAR + 1 ) :\n            if ( ( i + j ) < n ) :\n                if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( str1 [ i ] ) ) == j ) ) :\n                    result += 1 ;\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  ( i + j ) < n && j <= MAX_CHAR ;\n  j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) ) result ++ ;\n  return result ;\n}", "target_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 1;\n  ( i + j ) < n && j <= MAX_CHAR;\n  j ++ ) if ( ( abs ( str [ i + j ] - str [ i ] ) == j ) ) result ++;\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 1;\n  ( i + j ) < n && j <= MAX_CHAR;\n  j ++ ) if ( ( abs ( str [ i + j ] - str [ i ] ) == j ) ) result ++;\n  return result;\n}", "target_program": " static int countPairs ( String str ) {\n  int result = 0 ;\n  int n = str . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  ( i + j ) < n && j <= MAX_CHAR ;\n  j ++ ) if ( ( Math . abs ( str . charAt ( i + j ) - str . charAt ( i ) ) == j ) ) result ++ ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairs ( string str ) {\n  int result = 0;\n  int n = str . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 1;\n  ( i + j ) < n && j <= MAX_CHAR;\n  j ++ ) if ( ( abs ( str [ i + j ] - str [ i ] ) == j ) ) result ++;\n  return result;\n}", "target_program": " def countPairs ( str1 ) :\n    result = 0 ;\n    n = len ( str1 )\n    for i in range ( 0 , n ) :\n        for j in range ( 1 , MAX_CHAR + 1 ) :\n            if ( ( i + j ) < n ) :\n                if ( ( abs ( ord ( str1 [ i + j ] ) - ord ( str1 [ i ] ) ) == j ) ) :\n                    result += 1 ;\n    return result"}
{"source": "python", "target": "java", "source_program": " def productArray ( arr , n ) :\n    if ( n == 1 ) :\n        print ( 0 )\n        return\n    left = [ 0 ] * n\n    right = [ 0 ] * n\n    prod = [ 0 ] * n\n    left [ 0 ] = 1\n    right [ n - 1 ] = 1\n    for i in range ( 1 , n ) :\n        left [ i ] = arr [ i - 1 ] * left [ i - 1 ]\n    for j in range ( n - 2 , - 1 , - 1 ) :\n        right [ j ] = arr [ j + 1 ] * right [ j + 1 ]\n    for i in range ( n ) :\n        prod [ i ] = left [ i ] * right [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = ' ' )", "target_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( 0 ) ;\n    return ;\n  }\n  int left [ ] = new int [ n ] ;\n  int right [ ] = new int [ n ] ;\n  int prod [ ] = new int [ n ] ;\n  int i , j ;\n  left [ 0 ] = 1 ;\n  right [ n - 1 ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ] ;\n  for ( j = n - 2 ;\n  j >= 0 ;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def productArray ( arr , n ) :\n    if ( n == 1 ) :\n        print ( 0 )\n        return\n    left = [ 0 ] * n\n    right = [ 0 ] * n\n    prod = [ 0 ] * n\n    left [ 0 ] = 1\n    right [ n - 1 ] = 1\n    for i in range ( 1 , n ) :\n        left [ i ] = arr [ i - 1 ] * left [ i - 1 ]\n    for j in range ( n - 2 , - 1 , - 1 ) :\n        right [ j ] = arr [ j + 1 ] * right [ j + 1 ]\n    for i in range ( n ) :\n        prod [ i ] = left [ i ] * right [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = ' ' )", "target_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int * left = new int [ sizeof ( int ) * n ];\n  int * right = new int [ sizeof ( int ) * n ];\n  int * prod = new int [ sizeof ( int ) * n ];\n  int i, j;\n  left [ 0 ] = 1;\n  right [ n - 1 ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ];\n  for ( j = n - 2;\n  j >= 0;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ];\n  for ( i = 0;\n  i < n;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ];\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}"}
{"source": "java", "target": "python", "source_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( 0 ) ;\n    return ;\n  }\n  int left [ ] = new int [ n ] ;\n  int right [ ] = new int [ n ] ;\n  int prod [ ] = new int [ n ] ;\n  int i , j ;\n  left [ 0 ] = 1 ;\n  right [ n - 1 ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ] ;\n  for ( j = n - 2 ;\n  j >= 0 ;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}", "target_program": " def productArray ( arr , n ) :\n    if ( n == 1 ) :\n        print ( 0 )\n        return\n    left = [ 0 ] * n\n    right = [ 0 ] * n\n    prod = [ 0 ] * n\n    left [ 0 ] = 1\n    right [ n - 1 ] = 1\n    for i in range ( 1 , n ) :\n        left [ i ] = arr [ i - 1 ] * left [ i - 1 ]\n    for j in range ( n - 2 , - 1 , - 1 ) :\n        right [ j ] = arr [ j + 1 ] * right [ j + 1 ]\n    for i in range ( n ) :\n        prod [ i ] = left [ i ] * right [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = ' ' )"}
{"source": "java", "target": "cpp", "source_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( 0 ) ;\n    return ;\n  }\n  int left [ ] = new int [ n ] ;\n  int right [ ] = new int [ n ] ;\n  int prod [ ] = new int [ n ] ;\n  int i , j ;\n  left [ 0 ] = 1 ;\n  right [ n - 1 ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ] ;\n  for ( j = n - 2 ;\n  j >= 0 ;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}", "target_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int * left = new int [ sizeof ( int ) * n ];\n  int * right = new int [ sizeof ( int ) * n ];\n  int * prod = new int [ sizeof ( int ) * n ];\n  int i, j;\n  left [ 0 ] = 1;\n  right [ n - 1 ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ];\n  for ( j = n - 2;\n  j >= 0;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ];\n  for ( i = 0;\n  i < n;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ];\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}"}
{"source": "cpp", "target": "java", "source_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int * left = new int [ sizeof ( int ) * n ];\n  int * right = new int [ sizeof ( int ) * n ];\n  int * prod = new int [ sizeof ( int ) * n ];\n  int i, j;\n  left [ 0 ] = 1;\n  right [ n - 1 ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ];\n  for ( j = n - 2;\n  j >= 0;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ];\n  for ( i = 0;\n  i < n;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ];\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}", "target_program": " void productArray ( int arr [ ] , int n ) {\n  if ( n == 1 ) {\n    System . out . print ( 0 ) ;\n    return ;\n  }\n  int left [ ] = new int [ n ] ;\n  int right [ ] = new int [ n ] ;\n  int prod [ ] = new int [ n ] ;\n  int i , j ;\n  left [ 0 ] = 1 ;\n  right [ n - 1 ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ] ;\n  for ( j = n - 2 ;\n  j >= 0 ;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ] ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( prod [ i ] + \" \" ) ;\n  return ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void productArray ( int arr [ ], int n ) {\n  if ( n == 1 ) {\n    cout << 0;\n    return;\n  }\n  int * left = new int [ sizeof ( int ) * n ];\n  int * right = new int [ sizeof ( int ) * n ];\n  int * prod = new int [ sizeof ( int ) * n ];\n  int i, j;\n  left [ 0 ] = 1;\n  right [ n - 1 ] = 1;\n  for ( i = 1;\n  i < n;\n  i ++ ) left [ i ] = arr [ i - 1 ] * left [ i - 1 ];\n  for ( j = n - 2;\n  j >= 0;\n  j -- ) right [ j ] = arr [ j + 1 ] * right [ j + 1 ];\n  for ( i = 0;\n  i < n;\n  i ++ ) prod [ i ] = left [ i ] * right [ i ];\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << prod [ i ] << \" \";\n  return;\n}", "target_program": " def productArray ( arr , n ) :\n    if ( n == 1 ) :\n        print ( 0 )\n        return\n    left = [ 0 ] * n\n    right = [ 0 ] * n\n    prod = [ 0 ] * n\n    left [ 0 ] = 1\n    right [ n - 1 ] = 1\n    for i in range ( 1 , n ) :\n        left [ i ] = arr [ i - 1 ] * left [ i - 1 ]\n    for j in range ( n - 2 , - 1 , - 1 ) :\n        right [ j ] = arr [ j + 1 ] * right [ j + 1 ]\n    for i in range ( n ) :\n        prod [ i ] = left [ i ] * right [ i ]\n    for i in range ( n ) :\n        print ( prod [ i ] , end = ' ' )"}
{"source": "python", "target": "java", "source_program": " def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n    max_count = 0\n    res = - 1\n    for i in Hash :\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n    return res", "target_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int key = arr [ i ] ;\n    if ( hp . containsKey ( key ) ) {\n      int freq = hp . get ( key ) ;\n      freq ++ ;\n      hp . put ( key , freq ) ;\n    }\n    else {\n      hp . put ( key , 1 ) ;\n    }\n  }\n  int max_count = 0 , res = - 1 ;\n  for ( Entry < Integer , Integer > val : hp . entrySet ( ) ) {\n    if ( max_count < val . getValue ( ) ) {\n      res = val . getKey ( ) ;\n      max_count = val . getValue ( ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n    max_count = 0\n    res = - 1\n    for i in Hash :\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n    return res", "target_program": " int mostFrequent ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash [ arr [ i ] ] ++;\n  int max_count = 0, res = - 1;\n  for ( auto i : hash ) {\n    if ( max_count < i . second ) {\n      res = i . first;\n      max_count = i . second;\n    }\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int key = arr [ i ] ;\n    if ( hp . containsKey ( key ) ) {\n      int freq = hp . get ( key ) ;\n      freq ++ ;\n      hp . put ( key , freq ) ;\n    }\n    else {\n      hp . put ( key , 1 ) ;\n    }\n  }\n  int max_count = 0 , res = - 1 ;\n  for ( Entry < Integer , Integer > val : hp . entrySet ( ) ) {\n    if ( max_count < val . getValue ( ) ) {\n      res = val . getKey ( ) ;\n      max_count = val . getValue ( ) ;\n    }\n  }\n  return res ;\n}", "target_program": " def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n    max_count = 0\n    res = - 1\n    for i in Hash :\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int key = arr [ i ] ;\n    if ( hp . containsKey ( key ) ) {\n      int freq = hp . get ( key ) ;\n      freq ++ ;\n      hp . put ( key , freq ) ;\n    }\n    else {\n      hp . put ( key , 1 ) ;\n    }\n  }\n  int max_count = 0 , res = - 1 ;\n  for ( Entry < Integer , Integer > val : hp . entrySet ( ) ) {\n    if ( max_count < val . getValue ( ) ) {\n      res = val . getKey ( ) ;\n      max_count = val . getValue ( ) ;\n    }\n  }\n  return res ;\n}", "target_program": " int mostFrequent ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash [ arr [ i ] ] ++;\n  int max_count = 0, res = - 1;\n  for ( auto i : hash ) {\n    if ( max_count < i . second ) {\n      res = i . first;\n      max_count = i . second;\n    }\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int mostFrequent ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash [ arr [ i ] ] ++;\n  int max_count = 0, res = - 1;\n  for ( auto i : hash ) {\n    if ( max_count < i . second ) {\n      res = i . first;\n      max_count = i . second;\n    }\n  }\n  return res;\n}", "target_program": " static int mostFrequent ( int arr [ ] , int n ) {\n  Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int key = arr [ i ] ;\n    if ( hp . containsKey ( key ) ) {\n      int freq = hp . get ( key ) ;\n      freq ++ ;\n      hp . put ( key , freq ) ;\n    }\n    else {\n      hp . put ( key , 1 ) ;\n    }\n  }\n  int max_count = 0 , res = - 1 ;\n  for ( Entry < Integer , Integer > val : hp . entrySet ( ) ) {\n    if ( max_count < val . getValue ( ) ) {\n      res = val . getKey ( ) ;\n      max_count = val . getValue ( ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int mostFrequent ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash [ arr [ i ] ] ++;\n  int max_count = 0, res = - 1;\n  for ( auto i : hash ) {\n    if ( max_count < i . second ) {\n      res = i . first;\n      max_count = i . second;\n    }\n  }\n  return res;\n}", "target_program": " def mostFrequent ( arr , n ) :\n    Hash = dict ( )\n    for i in range ( n ) :\n        if arr [ i ] in Hash.keys ( ) :\n            Hash [ arr [ i ] ] += 1\n        else :\n            Hash [ arr [ i ] ] = 1\n    max_count = 0\n    res = - 1\n    for i in Hash :\n        if ( max_count < Hash [ i ] ) :\n            res = i\n            max_count = Hash [ i ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def printArray ( matrix ) :\n    rowCount = len ( matrix )\n    if rowCount == 0 :\n        return\n    columnCount = len ( matrix [ 0 ] )\n    if columnCount == 0 :\n        return\n    row_output_format = \" \".join ( [ \"%s\" ] * columnCount )\n    printed = { }\n    for row in matrix :\n        routput = row_output_format % tuple ( row )\n        if routput not in printed :\n            printed [ routput ] = True\n            print ( routput )", "target_program": " public static void printArray ( int arr [ ] [ ] , int row , int col ) {\n  HashSet < String > set = new HashSet < String > ( ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    String s = \"\" ;\n    for ( int j = 0 ;\n    j < col ;\n    j ++ ) s += String . valueOf ( arr [ i ] [ j ] ) ;\n    if ( ! set . contains ( s ) ) {\n      set . add ( s ) ;\n      System . out . println ( s ) ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printArray ( matrix ) :\n    rowCount = len ( matrix )\n    if rowCount == 0 :\n        return\n    columnCount = len ( matrix [ 0 ] )\n    if columnCount == 0 :\n        return\n    row_output_format = \" \".join ( [ \"%s\" ] * columnCount )\n    printed = { }\n    for row in matrix :\n        routput = row_output_format % tuple ( row )\n        if routput not in printed :\n            printed [ routput ] = True\n            print ( routput )", "target_program": " void printArray ( int arr [ ] [ 5 ], int row, int col ) {\n  unordered_set < string > uset;\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    string s = \"\";\n    for ( int j = 0;\n    j < col;\n    j ++ ) s += to_string ( arr [ i ] [ j ] );\n    if ( uset . count ( s ) == 0 ) {\n      uset . insert ( s );\n      cout << s << endl;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void printArray ( int arr [ ] [ ] , int row , int col ) {\n  HashSet < String > set = new HashSet < String > ( ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    String s = \"\" ;\n    for ( int j = 0 ;\n    j < col ;\n    j ++ ) s += String . valueOf ( arr [ i ] [ j ] ) ;\n    if ( ! set . contains ( s ) ) {\n      set . add ( s ) ;\n      System . out . println ( s ) ;\n    }\n  }\n}", "target_program": " def printArray ( matrix ) :\n    rowCount = len ( matrix )\n    if rowCount == 0 :\n        return\n    columnCount = len ( matrix [ 0 ] )\n    if columnCount == 0 :\n        return\n    row_output_format = \" \".join ( [ \"%s\" ] * columnCount )\n    printed = { }\n    for row in matrix :\n        routput = row_output_format % tuple ( row )\n        if routput not in printed :\n            printed [ routput ] = True\n            print ( routput )"}
{"source": "java", "target": "cpp", "source_program": " public static void printArray ( int arr [ ] [ ] , int row , int col ) {\n  HashSet < String > set = new HashSet < String > ( ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    String s = \"\" ;\n    for ( int j = 0 ;\n    j < col ;\n    j ++ ) s += String . valueOf ( arr [ i ] [ j ] ) ;\n    if ( ! set . contains ( s ) ) {\n      set . add ( s ) ;\n      System . out . println ( s ) ;\n    }\n  }\n}", "target_program": " void printArray ( int arr [ ] [ 5 ], int row, int col ) {\n  unordered_set < string > uset;\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    string s = \"\";\n    for ( int j = 0;\n    j < col;\n    j ++ ) s += to_string ( arr [ i ] [ j ] );\n    if ( uset . count ( s ) == 0 ) {\n      uset . insert ( s );\n      cout << s << endl;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printArray ( int arr [ ] [ 5 ], int row, int col ) {\n  unordered_set < string > uset;\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    string s = \"\";\n    for ( int j = 0;\n    j < col;\n    j ++ ) s += to_string ( arr [ i ] [ j ] );\n    if ( uset . count ( s ) == 0 ) {\n      uset . insert ( s );\n      cout << s << endl;\n    }\n  }\n}", "target_program": " public static void printArray ( int arr [ ] [ ] , int row , int col ) {\n  HashSet < String > set = new HashSet < String > ( ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    String s = \"\" ;\n    for ( int j = 0 ;\n    j < col ;\n    j ++ ) s += String . valueOf ( arr [ i ] [ j ] ) ;\n    if ( ! set . contains ( s ) ) {\n      set . add ( s ) ;\n      System . out . println ( s ) ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printArray ( int arr [ ] [ 5 ], int row, int col ) {\n  unordered_set < string > uset;\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    string s = \"\";\n    for ( int j = 0;\n    j < col;\n    j ++ ) s += to_string ( arr [ i ] [ j ] );\n    if ( uset . count ( s ) == 0 ) {\n      uset . insert ( s );\n      cout << s << endl;\n    }\n  }\n}", "target_program": " def printArray ( matrix ) :\n    rowCount = len ( matrix )\n    if rowCount == 0 :\n        return\n    columnCount = len ( matrix [ 0 ] )\n    if columnCount == 0 :\n        return\n    row_output_format = \" \".join ( [ \"%s\" ] * columnCount )\n    printed = { }\n    for row in matrix :\n        routput = row_output_format % tuple ( row )\n        if routput not in printed :\n            printed [ routput ] = True\n            print ( routput )"}
{"source": "python", "target": "java", "source_program": " def encodedChar ( str , k ) :\n    expand = \"\"\n    freq = 0\n    i = 0\n    while ( i < len ( str ) ) :\n        temp = \"\"\n        freq = 0\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( 'a' ) and ord ( str [ i ] ) <= ord ( 'z' ) ) :\n            temp += str [ i ]\n            i += 1\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( '1' ) and ord ( str [ i ] ) <= ord ( '9' ) ) :\n            freq = freq * 10 + ord ( str [ i ] ) - ord ( '0' )\n            i += 1\n        for j in range ( 1 , freq + 1 , 1 ) :\n            expand += temp\n    if ( freq == 0 ) :\n        expand += temp\n    return expand [ k - 1 ]", "target_program": " static char encodedChar ( String str , int k ) {\n  String expand = \"\" ;\n  String temp = \"\" ;\n  int freq = 0 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ) {\n    temp = \"\" ;\n    freq = 0 ;\n    while ( i < str . length ( ) && str . charAt ( i ) >= 'a' && str . charAt ( i ) <= 'z' ) {\n      temp += str . charAt ( i ) ;\n      i ++ ;\n    }\n    while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) {\n      freq = freq * 10 + str . charAt ( i ) - '0' ;\n      i ++ ;\n    }\n    for ( int j = 1 ;\n    j <= freq ;\n    j ++ ) expand += temp ;\n  }\n  if ( freq == 0 ) expand += temp ;\n  return expand . charAt ( k - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def encodedChar ( str , k ) :\n    expand = \"\"\n    freq = 0\n    i = 0\n    while ( i < len ( str ) ) :\n        temp = \"\"\n        freq = 0\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( 'a' ) and ord ( str [ i ] ) <= ord ( 'z' ) ) :\n            temp += str [ i ]\n            i += 1\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( '1' ) and ord ( str [ i ] ) <= ord ( '9' ) ) :\n            freq = freq * 10 + ord ( str [ i ] ) - ord ( '0' )\n            i += 1\n        for j in range ( 1 , freq + 1 , 1 ) :\n            expand += temp\n    if ( freq == 0 ) :\n        expand += temp\n    return expand [ k - 1 ]", "target_program": " char encodedChar ( string str, int k ) {\n  string expand = \"\";\n  string temp;\n  int freq = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  ) {\n    temp = \"\";\n    freq = 0;\n    while ( str [ i ] >= 'a' && str [ i ] <= 'z' ) {\n      temp . push_back ( str [ i ] );\n      i ++;\n    }\n    while ( str [ i ] >= '1' && str [ i ] <= '9' ) {\n      freq = freq * 10 + str [ i ] - '0';\n      i ++;\n    }\n    for ( int j = 1;\n    j <= freq;\n    j ++ ) expand . append ( temp );\n  }\n  if ( freq == 0 ) expand . append ( temp );\n  return expand [ k - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static char encodedChar ( String str , int k ) {\n  String expand = \"\" ;\n  String temp = \"\" ;\n  int freq = 0 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ) {\n    temp = \"\" ;\n    freq = 0 ;\n    while ( i < str . length ( ) && str . charAt ( i ) >= 'a' && str . charAt ( i ) <= 'z' ) {\n      temp += str . charAt ( i ) ;\n      i ++ ;\n    }\n    while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) {\n      freq = freq * 10 + str . charAt ( i ) - '0' ;\n      i ++ ;\n    }\n    for ( int j = 1 ;\n    j <= freq ;\n    j ++ ) expand += temp ;\n  }\n  if ( freq == 0 ) expand += temp ;\n  return expand . charAt ( k - 1 ) ;\n}", "target_program": " def encodedChar ( str , k ) :\n    expand = \"\"\n    freq = 0\n    i = 0\n    while ( i < len ( str ) ) :\n        temp = \"\"\n        freq = 0\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( 'a' ) and ord ( str [ i ] ) <= ord ( 'z' ) ) :\n            temp += str [ i ]\n            i += 1\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( '1' ) and ord ( str [ i ] ) <= ord ( '9' ) ) :\n            freq = freq * 10 + ord ( str [ i ] ) - ord ( '0' )\n            i += 1\n        for j in range ( 1 , freq + 1 , 1 ) :\n            expand += temp\n    if ( freq == 0 ) :\n        expand += temp\n    return expand [ k - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static char encodedChar ( String str , int k ) {\n  String expand = \"\" ;\n  String temp = \"\" ;\n  int freq = 0 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ) {\n    temp = \"\" ;\n    freq = 0 ;\n    while ( i < str . length ( ) && str . charAt ( i ) >= 'a' && str . charAt ( i ) <= 'z' ) {\n      temp += str . charAt ( i ) ;\n      i ++ ;\n    }\n    while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) {\n      freq = freq * 10 + str . charAt ( i ) - '0' ;\n      i ++ ;\n    }\n    for ( int j = 1 ;\n    j <= freq ;\n    j ++ ) expand += temp ;\n  }\n  if ( freq == 0 ) expand += temp ;\n  return expand . charAt ( k - 1 ) ;\n}", "target_program": " char encodedChar ( string str, int k ) {\n  string expand = \"\";\n  string temp;\n  int freq = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  ) {\n    temp = \"\";\n    freq = 0;\n    while ( str [ i ] >= 'a' && str [ i ] <= 'z' ) {\n      temp . push_back ( str [ i ] );\n      i ++;\n    }\n    while ( str [ i ] >= '1' && str [ i ] <= '9' ) {\n      freq = freq * 10 + str [ i ] - '0';\n      i ++;\n    }\n    for ( int j = 1;\n    j <= freq;\n    j ++ ) expand . append ( temp );\n  }\n  if ( freq == 0 ) expand . append ( temp );\n  return expand [ k - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " char encodedChar ( string str, int k ) {\n  string expand = \"\";\n  string temp;\n  int freq = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  ) {\n    temp = \"\";\n    freq = 0;\n    while ( str [ i ] >= 'a' && str [ i ] <= 'z' ) {\n      temp . push_back ( str [ i ] );\n      i ++;\n    }\n    while ( str [ i ] >= '1' && str [ i ] <= '9' ) {\n      freq = freq * 10 + str [ i ] - '0';\n      i ++;\n    }\n    for ( int j = 1;\n    j <= freq;\n    j ++ ) expand . append ( temp );\n  }\n  if ( freq == 0 ) expand . append ( temp );\n  return expand [ k - 1 ];\n}", "target_program": " static char encodedChar ( String str , int k ) {\n  String expand = \"\" ;\n  String temp = \"\" ;\n  int freq = 0 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ) {\n    temp = \"\" ;\n    freq = 0 ;\n    while ( i < str . length ( ) && str . charAt ( i ) >= 'a' && str . charAt ( i ) <= 'z' ) {\n      temp += str . charAt ( i ) ;\n      i ++ ;\n    }\n    while ( i < str . length ( ) && str . charAt ( i ) >= '1' && str . charAt ( i ) <= '9' ) {\n      freq = freq * 10 + str . charAt ( i ) - '0' ;\n      i ++ ;\n    }\n    for ( int j = 1 ;\n    j <= freq ;\n    j ++ ) expand += temp ;\n  }\n  if ( freq == 0 ) expand += temp ;\n  return expand . charAt ( k - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " char encodedChar ( string str, int k ) {\n  string expand = \"\";\n  string temp;\n  int freq = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  ) {\n    temp = \"\";\n    freq = 0;\n    while ( str [ i ] >= 'a' && str [ i ] <= 'z' ) {\n      temp . push_back ( str [ i ] );\n      i ++;\n    }\n    while ( str [ i ] >= '1' && str [ i ] <= '9' ) {\n      freq = freq * 10 + str [ i ] - '0';\n      i ++;\n    }\n    for ( int j = 1;\n    j <= freq;\n    j ++ ) expand . append ( temp );\n  }\n  if ( freq == 0 ) expand . append ( temp );\n  return expand [ k - 1 ];\n}", "target_program": " def encodedChar ( str , k ) :\n    expand = \"\"\n    freq = 0\n    i = 0\n    while ( i < len ( str ) ) :\n        temp = \"\"\n        freq = 0\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( 'a' ) and ord ( str [ i ] ) <= ord ( 'z' ) ) :\n            temp += str [ i ]\n            i += 1\n        while ( i < len ( str ) and ord ( str [ i ] ) >= ord ( '1' ) and ord ( str [ i ] ) <= ord ( '9' ) ) :\n            freq = freq * 10 + ord ( str [ i ] ) - ord ( '0' )\n            i += 1\n        for j in range ( 1 , freq + 1 , 1 ) :\n            expand += temp\n    if ( freq == 0 ) :\n        expand += temp\n    return expand [ k - 1 ]"}
{"source": "python", "target": "java", "source_program": " def search ( arr , n , x ) :\n    i = 0\n    while ( i <= n - 1 ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - 1", "target_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i = 0 ;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i ;\n    i += Math . abs ( arr [ i ] - x ) ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , n , x ) :\n    i = 0\n    while ( i <= n - 1 ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - 1", "target_program": " int search ( int arr [ ], int n, int x ) {\n  int i = 0;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i;\n    i += abs ( arr [ i ] - x );\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i = 0 ;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i ;\n    i += Math . abs ( arr [ i ] - x ) ;\n  }\n  return - 1 ;\n}", "target_program": " def search ( arr , n , x ) :\n    i = 0\n    while ( i <= n - 1 ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i = 0 ;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i ;\n    i += Math . abs ( arr [ i ] - x ) ;\n  }\n  return - 1 ;\n}", "target_program": " int search ( int arr [ ], int n, int x ) {\n  int i = 0;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i;\n    i += abs ( arr [ i ] - x );\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int search ( int arr [ ], int n, int x ) {\n  int i = 0;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i;\n    i += abs ( arr [ i ] - x );\n  }\n  return - 1;\n}", "target_program": " static int search ( int arr [ ] , int n , int x ) {\n  int i = 0 ;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i ;\n    i += Math . abs ( arr [ i ] - x ) ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int search ( int arr [ ], int n, int x ) {\n  int i = 0;\n  while ( i <= n - 1 ) {\n    if ( arr [ i ] == x ) return i;\n    i += abs ( arr [ i ] - x );\n  }\n  return - 1;\n}", "target_program": " def search ( arr , n , x ) :\n    i = 0\n    while ( i <= n - 1 ) :\n        if ( arr [ i ] == x ) :\n            return i\n        i += abs ( arr [ i ] - x )\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = 0\n    curr_sum = curr_begin = 0\n    for i in range ( 0 , n ) :\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += 1\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n    return result", "target_program": " static int returnMaxSum ( int A [ ] , int B [ ] , int n ) {\n  Set < Integer > mp = new HashSet < Integer > ( ) ;\n  int result = 0 ;\n  int curr_sum = 0 , curr_begin = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    while ( mp . contains ( A [ i ] ) ) {\n      mp . remove ( A [ curr_begin ] ) ;\n      curr_sum -= B [ curr_begin ] ;\n      curr_begin ++ ;\n    }\n    mp . add ( A [ i ] ) ;\n    curr_sum += B [ i ] ;\n    result = Integer . max ( result , curr_sum ) ;\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = 0\n    curr_sum = curr_begin = 0\n    for i in range ( 0 , n ) :\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += 1\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n    return result", "target_program": " int returnMaxSum ( int A [ ], int B [ ], int n ) {\n  unordered_set < int > mp;\n  int result = 0;\n  int curr_sum = 0, curr_begin = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    while ( mp . find ( A [ i ] ) != mp . end ( ) ) {\n      mp . erase ( A [ curr_begin ] );\n      curr_sum -= B [ curr_begin ];\n      curr_begin ++;\n    }\n    mp . insert ( A [ i ] );\n    curr_sum += B [ i ];\n    result = max ( result, curr_sum );\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int returnMaxSum ( int A [ ] , int B [ ] , int n ) {\n  Set < Integer > mp = new HashSet < Integer > ( ) ;\n  int result = 0 ;\n  int curr_sum = 0 , curr_begin = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    while ( mp . contains ( A [ i ] ) ) {\n      mp . remove ( A [ curr_begin ] ) ;\n      curr_sum -= B [ curr_begin ] ;\n      curr_begin ++ ;\n    }\n    mp . add ( A [ i ] ) ;\n    curr_sum += B [ i ] ;\n    result = Integer . max ( result , curr_sum ) ;\n  }\n  return result ;\n}", "target_program": " def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = 0\n    curr_sum = curr_begin = 0\n    for i in range ( 0 , n ) :\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += 1\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int returnMaxSum ( int A [ ] , int B [ ] , int n ) {\n  Set < Integer > mp = new HashSet < Integer > ( ) ;\n  int result = 0 ;\n  int curr_sum = 0 , curr_begin = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    while ( mp . contains ( A [ i ] ) ) {\n      mp . remove ( A [ curr_begin ] ) ;\n      curr_sum -= B [ curr_begin ] ;\n      curr_begin ++ ;\n    }\n    mp . add ( A [ i ] ) ;\n    curr_sum += B [ i ] ;\n    result = Integer . max ( result , curr_sum ) ;\n  }\n  return result ;\n}", "target_program": " int returnMaxSum ( int A [ ], int B [ ], int n ) {\n  unordered_set < int > mp;\n  int result = 0;\n  int curr_sum = 0, curr_begin = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    while ( mp . find ( A [ i ] ) != mp . end ( ) ) {\n      mp . erase ( A [ curr_begin ] );\n      curr_sum -= B [ curr_begin ];\n      curr_begin ++;\n    }\n    mp . insert ( A [ i ] );\n    curr_sum += B [ i ];\n    result = max ( result, curr_sum );\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int returnMaxSum ( int A [ ], int B [ ], int n ) {\n  unordered_set < int > mp;\n  int result = 0;\n  int curr_sum = 0, curr_begin = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    while ( mp . find ( A [ i ] ) != mp . end ( ) ) {\n      mp . erase ( A [ curr_begin ] );\n      curr_sum -= B [ curr_begin ];\n      curr_begin ++;\n    }\n    mp . insert ( A [ i ] );\n    curr_sum += B [ i ];\n    result = max ( result, curr_sum );\n  }\n  return result;\n}", "target_program": " static int returnMaxSum ( int A [ ] , int B [ ] , int n ) {\n  Set < Integer > mp = new HashSet < Integer > ( ) ;\n  int result = 0 ;\n  int curr_sum = 0 , curr_begin = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    while ( mp . contains ( A [ i ] ) ) {\n      mp . remove ( A [ curr_begin ] ) ;\n      curr_sum -= B [ curr_begin ] ;\n      curr_begin ++ ;\n    }\n    mp . add ( A [ i ] ) ;\n    curr_sum += B [ i ] ;\n    result = Integer . max ( result , curr_sum ) ;\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int returnMaxSum ( int A [ ], int B [ ], int n ) {\n  unordered_set < int > mp;\n  int result = 0;\n  int curr_sum = 0, curr_begin = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    while ( mp . find ( A [ i ] ) != mp . end ( ) ) {\n      mp . erase ( A [ curr_begin ] );\n      curr_sum -= B [ curr_begin ];\n      curr_begin ++;\n    }\n    mp . insert ( A [ i ] );\n    curr_sum += B [ i ];\n    result = max ( result, curr_sum );\n  }\n  return result;\n}", "target_program": " def returnMaxSum ( A , B , n ) :\n    mp = set ( )\n    result = 0\n    curr_sum = curr_begin = 0\n    for i in range ( 0 , n ) :\n        while A [ i ] in mp :\n            mp.remove ( A [ curr_begin ] )\n            curr_sum -= B [ curr_begin ]\n            curr_begin += 1\n        mp.add ( A [ i ] )\n        curr_sum += B [ i ]\n        result = max ( result , curr_sum )\n    return result"}
{"source": "python", "target": "java", "source_program": " def isMultipleOf3 ( n ) :\n    odd_count = 0\n    even_count = 0\n    if ( n < 0 ) :\n        n = - n\n    if ( n == 0 ) :\n        return 1\n    if ( n == 1 ) :\n        return 0\n    while ( n ) :\n        if ( n & 1 ) :\n            odd_count += 1\n        if ( n & 2 ) :\n            even_count += 1\n        n = n >> 2\n    return isMultipleOf3 ( abs ( odd_count - even_count ) )", "target_program": " static int isMultipleOf3 ( int n ) {\n  int odd_count = 0 ;\n  int even_count = 0 ;\n  if ( n < 0 ) n = - n ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 1 ) return 0 ;\n  while ( n != 0 ) {\n    if ( ( n & 1 ) != 0 ) odd_count ++ ;\n    if ( ( n & 2 ) != 0 ) even_count ++ ;\n    n = n >> 2 ;\n  }\n  return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isMultipleOf3 ( n ) :\n    odd_count = 0\n    even_count = 0\n    if ( n < 0 ) :\n        n = - n\n    if ( n == 0 ) :\n        return 1\n    if ( n == 1 ) :\n        return 0\n    while ( n ) :\n        if ( n & 1 ) :\n            odd_count += 1\n        if ( n & 2 ) :\n            even_count += 1\n        n = n >> 2\n    return isMultipleOf3 ( abs ( odd_count - even_count ) )", "target_program": " int isMultipleOf3 ( int n ) {\n  int odd_count = 0;\n  int even_count = 0;\n  if ( n < 0 ) n = - n;\n  if ( n == 0 ) return 1;\n  if ( n == 1 ) return 0;\n  while ( n ) {\n    if ( n & 1 ) odd_count ++;\n    if ( n & 2 ) even_count ++;\n    n = n >> 2;\n  }\n  return isMultipleOf3 ( abs ( odd_count - even_count ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int isMultipleOf3 ( int n ) {\n  int odd_count = 0 ;\n  int even_count = 0 ;\n  if ( n < 0 ) n = - n ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 1 ) return 0 ;\n  while ( n != 0 ) {\n    if ( ( n & 1 ) != 0 ) odd_count ++ ;\n    if ( ( n & 2 ) != 0 ) even_count ++ ;\n    n = n >> 2 ;\n  }\n  return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ;\n}", "target_program": " def isMultipleOf3 ( n ) :\n    odd_count = 0\n    even_count = 0\n    if ( n < 0 ) :\n        n = - n\n    if ( n == 0 ) :\n        return 1\n    if ( n == 1 ) :\n        return 0\n    while ( n ) :\n        if ( n & 1 ) :\n            odd_count += 1\n        if ( n & 2 ) :\n            even_count += 1\n        n = n >> 2\n    return isMultipleOf3 ( abs ( odd_count - even_count ) )"}
{"source": "java", "target": "cpp", "source_program": " static int isMultipleOf3 ( int n ) {\n  int odd_count = 0 ;\n  int even_count = 0 ;\n  if ( n < 0 ) n = - n ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 1 ) return 0 ;\n  while ( n != 0 ) {\n    if ( ( n & 1 ) != 0 ) odd_count ++ ;\n    if ( ( n & 2 ) != 0 ) even_count ++ ;\n    n = n >> 2 ;\n  }\n  return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ;\n}", "target_program": " int isMultipleOf3 ( int n ) {\n  int odd_count = 0;\n  int even_count = 0;\n  if ( n < 0 ) n = - n;\n  if ( n == 0 ) return 1;\n  if ( n == 1 ) return 0;\n  while ( n ) {\n    if ( n & 1 ) odd_count ++;\n    if ( n & 2 ) even_count ++;\n    n = n >> 2;\n  }\n  return isMultipleOf3 ( abs ( odd_count - even_count ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int isMultipleOf3 ( int n ) {\n  int odd_count = 0;\n  int even_count = 0;\n  if ( n < 0 ) n = - n;\n  if ( n == 0 ) return 1;\n  if ( n == 1 ) return 0;\n  while ( n ) {\n    if ( n & 1 ) odd_count ++;\n    if ( n & 2 ) even_count ++;\n    n = n >> 2;\n  }\n  return isMultipleOf3 ( abs ( odd_count - even_count ) );\n}", "target_program": " static int isMultipleOf3 ( int n ) {\n  int odd_count = 0 ;\n  int even_count = 0 ;\n  if ( n < 0 ) n = - n ;\n  if ( n == 0 ) return 1 ;\n  if ( n == 1 ) return 0 ;\n  while ( n != 0 ) {\n    if ( ( n & 1 ) != 0 ) odd_count ++ ;\n    if ( ( n & 2 ) != 0 ) even_count ++ ;\n    n = n >> 2 ;\n  }\n  return isMultipleOf3 ( Math . abs ( odd_count - even_count ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int isMultipleOf3 ( int n ) {\n  int odd_count = 0;\n  int even_count = 0;\n  if ( n < 0 ) n = - n;\n  if ( n == 0 ) return 1;\n  if ( n == 1 ) return 0;\n  while ( n ) {\n    if ( n & 1 ) odd_count ++;\n    if ( n & 2 ) even_count ++;\n    n = n >> 2;\n  }\n  return isMultipleOf3 ( abs ( odd_count - even_count ) );\n}", "target_program": " def isMultipleOf3 ( n ) :\n    odd_count = 0\n    even_count = 0\n    if ( n < 0 ) :\n        n = - n\n    if ( n == 0 ) :\n        return 1\n    if ( n == 1 ) :\n        return 0\n    while ( n ) :\n        if ( n & 1 ) :\n            odd_count += 1\n        if ( n & 2 ) :\n            even_count += 1\n        n = n >> 2\n    return isMultipleOf3 ( abs ( odd_count - even_count ) )"}
{"source": "python", "target": "java", "source_program": " def maxSum ( arr , n ) :\n    cum_sum = 0\n    for i in range ( 0 , n ) :\n        cum_sum += arr [ i ]\n    curr_val = 0\n    for i in range ( 0 , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( 1 , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res", "target_program": " static int maxSum ( int arr [ ] , int n ) {\n  int cum_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) cum_sum += arr [ i ] ;\n  int curr_val = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) curr_val += i * arr [ i ] ;\n  int res = curr_val ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) ;\n    curr_val = next_val ;\n    res = Math . max ( res , next_val ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSum ( arr , n ) :\n    cum_sum = 0\n    for i in range ( 0 , n ) :\n        cum_sum += arr [ i ]\n    curr_val = 0\n    for i in range ( 0 , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( 1 , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res", "target_program": " int maxSum ( int arr [ ], int n ) {\n  int cum_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) cum_sum += arr [ i ];\n  int curr_val = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) curr_val += i * arr [ i ];\n  int res = curr_val;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 );\n    curr_val = next_val;\n    res = max ( res, next_val );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSum ( int arr [ ] , int n ) {\n  int cum_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) cum_sum += arr [ i ] ;\n  int curr_val = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) curr_val += i * arr [ i ] ;\n  int res = curr_val ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) ;\n    curr_val = next_val ;\n    res = Math . max ( res , next_val ) ;\n  }\n  return res ;\n}", "target_program": " def maxSum ( arr , n ) :\n    cum_sum = 0\n    for i in range ( 0 , n ) :\n        cum_sum += arr [ i ]\n    curr_val = 0\n    for i in range ( 0 , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( 1 , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int maxSum ( int arr [ ] , int n ) {\n  int cum_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) cum_sum += arr [ i ] ;\n  int curr_val = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) curr_val += i * arr [ i ] ;\n  int res = curr_val ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) ;\n    curr_val = next_val ;\n    res = Math . max ( res , next_val ) ;\n  }\n  return res ;\n}", "target_program": " int maxSum ( int arr [ ], int n ) {\n  int cum_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) cum_sum += arr [ i ];\n  int curr_val = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) curr_val += i * arr [ i ];\n  int res = curr_val;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 );\n    curr_val = next_val;\n    res = max ( res, next_val );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSum ( int arr [ ], int n ) {\n  int cum_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) cum_sum += arr [ i ];\n  int curr_val = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) curr_val += i * arr [ i ];\n  int res = curr_val;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 );\n    curr_val = next_val;\n    res = max ( res, next_val );\n  }\n  return res;\n}", "target_program": " static int maxSum ( int arr [ ] , int n ) {\n  int cum_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) cum_sum += arr [ i ] ;\n  int curr_val = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) curr_val += i * arr [ i ] ;\n  int res = curr_val ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) ;\n    curr_val = next_val ;\n    res = Math . max ( res , next_val ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSum ( int arr [ ], int n ) {\n  int cum_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) cum_sum += arr [ i ];\n  int curr_val = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) curr_val += i * arr [ i ];\n  int res = curr_val;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    int next_val = curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 );\n    curr_val = next_val;\n    res = max ( res, next_val );\n  }\n  return res;\n}", "target_program": " def maxSum ( arr , n ) :\n    cum_sum = 0\n    for i in range ( 0 , n ) :\n        cum_sum += arr [ i ]\n    curr_val = 0\n    for i in range ( 0 , n ) :\n        curr_val += i * arr [ i ]\n    res = curr_val\n    for i in range ( 1 , n ) :\n        next_val = ( curr_val - ( cum_sum - arr [ i - 1 ] ) + arr [ i - 1 ] * ( n - 1 ) )\n        curr_val = next_val\n        res = max ( res , next_val )\n    return res"}
{"source": "python", "target": "java", "source_program": " def carAssembly ( a , t , e , x ) :\n    NUM_STATION = len ( a [ 0 ] )\n    T1 = [ 0 for i in range ( NUM_STATION ) ]\n    T2 = [ 0 for i in range ( NUM_STATION ) ]\n    T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ]\n    T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ]\n    for i in range ( 1 , NUM_STATION ) :\n        T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] )\n        T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] )\n    return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] )", "target_program": " static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) {\n  int T1 [ ] = new int [ NUM_STATION ] ;\n  int T2 [ ] = new int [ NUM_STATION ] ;\n  int i ;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;\n  for ( i = 1 ;\n  i < NUM_STATION ;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ;\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ;\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def carAssembly ( a , t , e , x ) :\n    NUM_STATION = len ( a [ 0 ] )\n    T1 = [ 0 for i in range ( NUM_STATION ) ]\n    T2 = [ 0 for i in range ( NUM_STATION ) ]\n    T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ]\n    T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ]\n    for i in range ( 1 , NUM_STATION ) :\n        T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] )\n        T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] )\n    return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] )", "target_program": " int carAssembly ( int a [ ] [ NUM_STATION ], int t [ ] [ NUM_STATION ], int * e, int * x ) {\n  int T1 [ NUM_STATION ], T2 [ NUM_STATION ], i;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ];\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ];\n  for ( i = 1;\n  i < NUM_STATION;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ], T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] );\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ], T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] );\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ], T2 [ NUM_STATION - 1 ] + x [ 1 ] );\n}"}
{"source": "java", "target": "python", "source_program": " static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) {\n  int T1 [ ] = new int [ NUM_STATION ] ;\n  int T2 [ ] = new int [ NUM_STATION ] ;\n  int i ;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;\n  for ( i = 1 ;\n  i < NUM_STATION ;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ;\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ;\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ;\n}", "target_program": " def carAssembly ( a , t , e , x ) :\n    NUM_STATION = len ( a [ 0 ] )\n    T1 = [ 0 for i in range ( NUM_STATION ) ]\n    T2 = [ 0 for i in range ( NUM_STATION ) ]\n    T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ]\n    T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ]\n    for i in range ( 1 , NUM_STATION ) :\n        T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] )\n        T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] )\n    return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] )"}
{"source": "java", "target": "cpp", "source_program": " static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) {\n  int T1 [ ] = new int [ NUM_STATION ] ;\n  int T2 [ ] = new int [ NUM_STATION ] ;\n  int i ;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;\n  for ( i = 1 ;\n  i < NUM_STATION ;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ;\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ;\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ;\n}", "target_program": " int carAssembly ( int a [ ] [ NUM_STATION ], int t [ ] [ NUM_STATION ], int * e, int * x ) {\n  int T1 [ NUM_STATION ], T2 [ NUM_STATION ], i;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ];\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ];\n  for ( i = 1;\n  i < NUM_STATION;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ], T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] );\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ], T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] );\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ], T2 [ NUM_STATION - 1 ] + x [ 1 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " int carAssembly ( int a [ ] [ NUM_STATION ], int t [ ] [ NUM_STATION ], int * e, int * x ) {\n  int T1 [ NUM_STATION ], T2 [ NUM_STATION ], i;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ];\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ];\n  for ( i = 1;\n  i < NUM_STATION;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ], T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] );\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ], T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] );\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ], T2 [ NUM_STATION - 1 ] + x [ 1 ] );\n}", "target_program": " static int carAssembly ( int a [ ] [ ] , int t [ ] [ ] , int e [ ] , int x [ ] ) {\n  int T1 [ ] = new int [ NUM_STATION ] ;\n  int T2 [ ] = new int [ NUM_STATION ] ;\n  int i ;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ] ;\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ] ;\n  for ( i = 1 ;\n  i < NUM_STATION ;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] ) ;\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] ) ;\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int carAssembly ( int a [ ] [ NUM_STATION ], int t [ ] [ NUM_STATION ], int * e, int * x ) {\n  int T1 [ NUM_STATION ], T2 [ NUM_STATION ], i;\n  T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ];\n  T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ];\n  for ( i = 1;\n  i < NUM_STATION;\n  ++ i ) {\n    T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ], T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] );\n    T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ], T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] );\n  }\n  return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ], T2 [ NUM_STATION - 1 ] + x [ 1 ] );\n}", "target_program": " def carAssembly ( a , t , e , x ) :\n    NUM_STATION = len ( a [ 0 ] )\n    T1 = [ 0 for i in range ( NUM_STATION ) ]\n    T2 = [ 0 for i in range ( NUM_STATION ) ]\n    T1 [ 0 ] = e [ 0 ] + a [ 0 ] [ 0 ]\n    T2 [ 0 ] = e [ 1 ] + a [ 1 ] [ 0 ]\n    for i in range ( 1 , NUM_STATION ) :\n        T1 [ i ] = min ( T1 [ i - 1 ] + a [ 0 ] [ i ] , T2 [ i - 1 ] + t [ 1 ] [ i ] + a [ 0 ] [ i ] )\n        T2 [ i ] = min ( T2 [ i - 1 ] + a [ 1 ] [ i ] , T1 [ i - 1 ] + t [ 0 ] [ i ] + a [ 1 ] [ i ] )\n    return min ( T1 [ NUM_STATION - 1 ] + x [ 0 ] , T2 [ NUM_STATION - 1 ] + x [ 1 ] )"}
{"source": "python", "target": "java", "source_program": " def printSpiral ( mat , r , c ) :\n    a = 0\n    b = 2\n    low_row = 0 if ( 0 > a ) else a\n    low_column = 0 if ( 0 > b ) else b - 1\n    high_row = r - 1 if ( ( a + 1 ) >= r ) else a + 1\n    high_column = c - 1 if ( ( b + 1 ) >= c ) else b + 1\n    while ( ( low_row > 0 - r and low_column > 0 - c ) ) :\n        i = low_column + 1\n        while ( i <= high_column and i < c and low_row >= 0 ) :\n            print ( mat [ low_row ] [ i ] , end = \" \" )\n            i += 1\n        low_row -= 1\n        i = low_row + 2\n        while ( i <= high_row and i < r and high_column < c ) :\n            print ( mat [ i ] [ high_column ] , end = \" \" )\n            i += 1\n        high_column += 1\n        i = high_column - 2\n        while ( i >= low_column and i >= 0 and high_row < r ) :\n            print ( mat [ high_row ] [ i ] , end = \" \" )\n            i -= 1\n        high_row += 1\n        i = high_row - 2\n        while ( i > low_row and i >= 0 and low_column >= 0 ) :\n            print ( mat [ i ] [ low_column ] , end = \" \" )\n            i -= 1\n        low_column -= 1\n    print ( )", "target_program": " static void printSpiral ( int [ ] [ ] mat , int r , int c ) {\n  int i , a = 0 , b = 2 ;\n  int low_row = ( 0 > a ) ? 0 : a ;\n  int low_column = ( 0 > b ) ? 0 : b - 1 ;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1 ;\n    i <= high_column && i < c && low_row >= 0 ;\n    ++ i ) System . out . print ( mat [ low_row ] [ i ] + \" \" ) ;\n    low_row -= 1 ;\n    for ( i = low_row + 2 ;\n    i <= high_row && i < r && high_column < c ;\n    ++ i ) System . out . print ( mat [ i ] [ high_column ] + \" \" ) ;\n    high_column += 1 ;\n    for ( i = high_column - 2 ;\n    i >= low_column && i >= 0 && high_row < r ;\n    -- i ) System . out . print ( mat [ high_row ] [ i ] + \" \" ) ;\n    high_row += 1 ;\n    for ( i = high_row - 2 ;\n    i > low_row && i >= 0 && low_column >= 0 ;\n    -- i ) System . out . print ( mat [ i ] [ low_column ] + \" \" ) ;\n    low_column -= 1 ;\n  }\n  System . out . println ( ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSpiral ( mat , r , c ) :\n    a = 0\n    b = 2\n    low_row = 0 if ( 0 > a ) else a\n    low_column = 0 if ( 0 > b ) else b - 1\n    high_row = r - 1 if ( ( a + 1 ) >= r ) else a + 1\n    high_column = c - 1 if ( ( b + 1 ) >= c ) else b + 1\n    while ( ( low_row > 0 - r and low_column > 0 - c ) ) :\n        i = low_column + 1\n        while ( i <= high_column and i < c and low_row >= 0 ) :\n            print ( mat [ low_row ] [ i ] , end = \" \" )\n            i += 1\n        low_row -= 1\n        i = low_row + 2\n        while ( i <= high_row and i < r and high_column < c ) :\n            print ( mat [ i ] [ high_column ] , end = \" \" )\n            i += 1\n        high_column += 1\n        i = high_column - 2\n        while ( i >= low_column and i >= 0 and high_row < r ) :\n            print ( mat [ high_row ] [ i ] , end = \" \" )\n            i -= 1\n        high_row += 1\n        i = high_row - 2\n        while ( i > low_row and i >= 0 and low_column >= 0 ) :\n            print ( mat [ i ] [ low_column ] , end = \" \" )\n            i -= 1\n        low_column -= 1\n    print ( )", "target_program": " void printSpiral ( int mat [ ] [ MAX ], int r, int c ) {\n  int i, a = 0, b = 2;\n  int low_row = ( 0 > a ) ? 0 : a;\n  int low_column = ( 0 > b ) ? 0 : b - 1;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1;\n    i <= high_column && i < c && low_row >= 0;\n    ++ i ) cout << mat [ low_row ] [ i ] << \" \";\n    low_row -= 1;\n    for ( i = low_row + 2;\n    i <= high_row && i < r && high_column < c;\n    ++ i ) cout << mat [ i ] [ high_column ] << \" \";\n    high_column += 1;\n    for ( i = high_column - 2;\n    i >= low_column && i >= 0 && high_row < r;\n    -- i ) cout << mat [ high_row ] [ i ] << \" \";\n    high_row += 1;\n    for ( i = high_row - 2;\n    i > low_row && i >= 0 && low_column >= 0;\n    -- i ) cout << mat [ i ] [ low_column ] << \" \";\n    low_column -= 1;\n  }\n  cout << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void printSpiral ( int [ ] [ ] mat , int r , int c ) {\n  int i , a = 0 , b = 2 ;\n  int low_row = ( 0 > a ) ? 0 : a ;\n  int low_column = ( 0 > b ) ? 0 : b - 1 ;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1 ;\n    i <= high_column && i < c && low_row >= 0 ;\n    ++ i ) System . out . print ( mat [ low_row ] [ i ] + \" \" ) ;\n    low_row -= 1 ;\n    for ( i = low_row + 2 ;\n    i <= high_row && i < r && high_column < c ;\n    ++ i ) System . out . print ( mat [ i ] [ high_column ] + \" \" ) ;\n    high_column += 1 ;\n    for ( i = high_column - 2 ;\n    i >= low_column && i >= 0 && high_row < r ;\n    -- i ) System . out . print ( mat [ high_row ] [ i ] + \" \" ) ;\n    high_row += 1 ;\n    for ( i = high_row - 2 ;\n    i > low_row && i >= 0 && low_column >= 0 ;\n    -- i ) System . out . print ( mat [ i ] [ low_column ] + \" \" ) ;\n    low_column -= 1 ;\n  }\n  System . out . println ( ) ;\n}", "target_program": " def printSpiral ( mat , r , c ) :\n    a = 0\n    b = 2\n    low_row = 0 if ( 0 > a ) else a\n    low_column = 0 if ( 0 > b ) else b - 1\n    high_row = r - 1 if ( ( a + 1 ) >= r ) else a + 1\n    high_column = c - 1 if ( ( b + 1 ) >= c ) else b + 1\n    while ( ( low_row > 0 - r and low_column > 0 - c ) ) :\n        i = low_column + 1\n        while ( i <= high_column and i < c and low_row >= 0 ) :\n            print ( mat [ low_row ] [ i ] , end = \" \" )\n            i += 1\n        low_row -= 1\n        i = low_row + 2\n        while ( i <= high_row and i < r and high_column < c ) :\n            print ( mat [ i ] [ high_column ] , end = \" \" )\n            i += 1\n        high_column += 1\n        i = high_column - 2\n        while ( i >= low_column and i >= 0 and high_row < r ) :\n            print ( mat [ high_row ] [ i ] , end = \" \" )\n            i -= 1\n        high_row += 1\n        i = high_row - 2\n        while ( i > low_row and i >= 0 and low_column >= 0 ) :\n            print ( mat [ i ] [ low_column ] , end = \" \" )\n            i -= 1\n        low_column -= 1\n    print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void printSpiral ( int [ ] [ ] mat , int r , int c ) {\n  int i , a = 0 , b = 2 ;\n  int low_row = ( 0 > a ) ? 0 : a ;\n  int low_column = ( 0 > b ) ? 0 : b - 1 ;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1 ;\n    i <= high_column && i < c && low_row >= 0 ;\n    ++ i ) System . out . print ( mat [ low_row ] [ i ] + \" \" ) ;\n    low_row -= 1 ;\n    for ( i = low_row + 2 ;\n    i <= high_row && i < r && high_column < c ;\n    ++ i ) System . out . print ( mat [ i ] [ high_column ] + \" \" ) ;\n    high_column += 1 ;\n    for ( i = high_column - 2 ;\n    i >= low_column && i >= 0 && high_row < r ;\n    -- i ) System . out . print ( mat [ high_row ] [ i ] + \" \" ) ;\n    high_row += 1 ;\n    for ( i = high_row - 2 ;\n    i > low_row && i >= 0 && low_column >= 0 ;\n    -- i ) System . out . print ( mat [ i ] [ low_column ] + \" \" ) ;\n    low_column -= 1 ;\n  }\n  System . out . println ( ) ;\n}", "target_program": " void printSpiral ( int mat [ ] [ MAX ], int r, int c ) {\n  int i, a = 0, b = 2;\n  int low_row = ( 0 > a ) ? 0 : a;\n  int low_column = ( 0 > b ) ? 0 : b - 1;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1;\n    i <= high_column && i < c && low_row >= 0;\n    ++ i ) cout << mat [ low_row ] [ i ] << \" \";\n    low_row -= 1;\n    for ( i = low_row + 2;\n    i <= high_row && i < r && high_column < c;\n    ++ i ) cout << mat [ i ] [ high_column ] << \" \";\n    high_column += 1;\n    for ( i = high_column - 2;\n    i >= low_column && i >= 0 && high_row < r;\n    -- i ) cout << mat [ high_row ] [ i ] << \" \";\n    high_row += 1;\n    for ( i = high_row - 2;\n    i > low_row && i >= 0 && low_column >= 0;\n    -- i ) cout << mat [ i ] [ low_column ] << \" \";\n    low_column -= 1;\n  }\n  cout << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSpiral ( int mat [ ] [ MAX ], int r, int c ) {\n  int i, a = 0, b = 2;\n  int low_row = ( 0 > a ) ? 0 : a;\n  int low_column = ( 0 > b ) ? 0 : b - 1;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1;\n    i <= high_column && i < c && low_row >= 0;\n    ++ i ) cout << mat [ low_row ] [ i ] << \" \";\n    low_row -= 1;\n    for ( i = low_row + 2;\n    i <= high_row && i < r && high_column < c;\n    ++ i ) cout << mat [ i ] [ high_column ] << \" \";\n    high_column += 1;\n    for ( i = high_column - 2;\n    i >= low_column && i >= 0 && high_row < r;\n    -- i ) cout << mat [ high_row ] [ i ] << \" \";\n    high_row += 1;\n    for ( i = high_row - 2;\n    i > low_row && i >= 0 && low_column >= 0;\n    -- i ) cout << mat [ i ] [ low_column ] << \" \";\n    low_column -= 1;\n  }\n  cout << endl;\n}", "target_program": " static void printSpiral ( int [ ] [ ] mat , int r , int c ) {\n  int i , a = 0 , b = 2 ;\n  int low_row = ( 0 > a ) ? 0 : a ;\n  int low_column = ( 0 > b ) ? 0 : b - 1 ;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1 ;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1 ;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1 ;\n    i <= high_column && i < c && low_row >= 0 ;\n    ++ i ) System . out . print ( mat [ low_row ] [ i ] + \" \" ) ;\n    low_row -= 1 ;\n    for ( i = low_row + 2 ;\n    i <= high_row && i < r && high_column < c ;\n    ++ i ) System . out . print ( mat [ i ] [ high_column ] + \" \" ) ;\n    high_column += 1 ;\n    for ( i = high_column - 2 ;\n    i >= low_column && i >= 0 && high_row < r ;\n    -- i ) System . out . print ( mat [ high_row ] [ i ] + \" \" ) ;\n    high_row += 1 ;\n    for ( i = high_row - 2 ;\n    i > low_row && i >= 0 && low_column >= 0 ;\n    -- i ) System . out . print ( mat [ i ] [ low_column ] + \" \" ) ;\n    low_column -= 1 ;\n  }\n  System . out . println ( ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSpiral ( int mat [ ] [ MAX ], int r, int c ) {\n  int i, a = 0, b = 2;\n  int low_row = ( 0 > a ) ? 0 : a;\n  int low_column = ( 0 > b ) ? 0 : b - 1;\n  int high_row = ( ( a + 1 ) >= r ) ? r - 1 : a + 1;\n  int high_column = ( ( b + 1 ) >= c ) ? c - 1 : b + 1;\n  while ( ( low_row > 0 - r && low_column > 0 - c ) ) {\n    for ( i = low_column + 1;\n    i <= high_column && i < c && low_row >= 0;\n    ++ i ) cout << mat [ low_row ] [ i ] << \" \";\n    low_row -= 1;\n    for ( i = low_row + 2;\n    i <= high_row && i < r && high_column < c;\n    ++ i ) cout << mat [ i ] [ high_column ] << \" \";\n    high_column += 1;\n    for ( i = high_column - 2;\n    i >= low_column && i >= 0 && high_row < r;\n    -- i ) cout << mat [ high_row ] [ i ] << \" \";\n    high_row += 1;\n    for ( i = high_row - 2;\n    i > low_row && i >= 0 && low_column >= 0;\n    -- i ) cout << mat [ i ] [ low_column ] << \" \";\n    low_column -= 1;\n  }\n  cout << endl;\n}", "target_program": " def printSpiral ( mat , r , c ) :\n    a = 0\n    b = 2\n    low_row = 0 if ( 0 > a ) else a\n    low_column = 0 if ( 0 > b ) else b - 1\n    high_row = r - 1 if ( ( a + 1 ) >= r ) else a + 1\n    high_column = c - 1 if ( ( b + 1 ) >= c ) else b + 1\n    while ( ( low_row > 0 - r and low_column > 0 - c ) ) :\n        i = low_column + 1\n        while ( i <= high_column and i < c and low_row >= 0 ) :\n            print ( mat [ low_row ] [ i ] , end = \" \" )\n            i += 1\n        low_row -= 1\n        i = low_row + 2\n        while ( i <= high_row and i < r and high_column < c ) :\n            print ( mat [ i ] [ high_column ] , end = \" \" )\n            i += 1\n        high_column += 1\n        i = high_column - 2\n        while ( i >= low_column and i >= 0 and high_row < r ) :\n            print ( mat [ high_row ] [ i ] , end = \" \" )\n            i -= 1\n        high_row += 1\n        i = high_row - 2\n        while ( i > low_row and i >= 0 and low_column >= 0 ) :\n            print ( mat [ i ] [ low_column ] , end = \" \" )\n            i -= 1\n        low_column -= 1\n    print ( )"}
{"source": "python", "target": "java", "source_program": " def midPointCircleDraw ( x_centre , y_centre , r ) :\n    x = r\n    y = 0\n    print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n    if ( r > 0 ) :\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" )\n    P = 1 - r\n    while ( x > y ) :\n        y += 1\n        if ( P <= 0 ) :\n            P = P + 2 * y + 1\n        else :\n            x -= 1\n            P = P + 2 * y - 2 * x + 1\n        if ( x < y ) :\n            break\n        print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" )\n        if ( x != y ) :\n            print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" )", "target_program": " static void midPointCircleDraw ( int x_centre , int y_centre , int r ) {\n  int x = r , y = 0 ;\n  System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n  if ( r > 0 ) {\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n  }\n  int P = 1 - r ;\n  while ( x > y ) {\n    y ++ ;\n    if ( P <= 0 ) P = P + 2 * y + 1 ;\n    else {\n      x -- ;\n      P = P + 2 * y - 2 * x + 1 ;\n    }\n    if ( x < y ) break ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( - x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    if ( x != y ) {\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n      System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def midPointCircleDraw ( x_centre , y_centre , r ) :\n    x = r\n    y = 0\n    print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n    if ( r > 0 ) :\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" )\n    P = 1 - r\n    while ( x > y ) :\n        y += 1\n        if ( P <= 0 ) :\n            P = P + 2 * y + 1\n        else :\n            x -= 1\n            P = P + 2 * y - 2 * x + 1\n        if ( x < y ) :\n            break\n        print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" )\n        if ( x != y ) :\n            print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" )", "target_program": " void midPointCircleDraw ( int x_centre, int y_centre, int r ) {\n  int x = r, y = 0;\n  cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n  if ( r > 0 ) {\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n    cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \")\\n\";\n  }\n  int P = 1 - r;\n  while ( x > y ) {\n    y ++;\n    if ( P <= 0 ) P = P + 2 * y + 1;\n    else {\n      x --;\n      P = P + 2 * y - 2 * x + 1;\n    }\n    if ( x < y ) break;\n    cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << - y + y_centre << \")\\n\";\n    if ( x != y ) {\n      cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << y + x_centre << \", \" << - x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << - x + y_centre << \")\\n\";\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void midPointCircleDraw ( int x_centre , int y_centre , int r ) {\n  int x = r , y = 0 ;\n  System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n  if ( r > 0 ) {\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n  }\n  int P = 1 - r ;\n  while ( x > y ) {\n    y ++ ;\n    if ( P <= 0 ) P = P + 2 * y + 1 ;\n    else {\n      x -- ;\n      P = P + 2 * y - 2 * x + 1 ;\n    }\n    if ( x < y ) break ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( - x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    if ( x != y ) {\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n      System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n    }\n  }\n}", "target_program": " def midPointCircleDraw ( x_centre , y_centre , r ) :\n    x = r\n    y = 0\n    print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n    if ( r > 0 ) :\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" )\n    P = 1 - r\n    while ( x > y ) :\n        y += 1\n        if ( P <= 0 ) :\n            P = P + 2 * y + 1\n        else :\n            x -= 1\n            P = P + 2 * y - 2 * x + 1\n        if ( x < y ) :\n            break\n        print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" )\n        if ( x != y ) :\n            print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void midPointCircleDraw ( int x_centre , int y_centre , int r ) {\n  int x = r , y = 0 ;\n  System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n  if ( r > 0 ) {\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n  }\n  int P = 1 - r ;\n  while ( x > y ) {\n    y ++ ;\n    if ( P <= 0 ) P = P + 2 * y + 1 ;\n    else {\n      x -- ;\n      P = P + 2 * y - 2 * x + 1 ;\n    }\n    if ( x < y ) break ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( - x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    if ( x != y ) {\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n      System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n    }\n  }\n}", "target_program": " void midPointCircleDraw ( int x_centre, int y_centre, int r ) {\n  int x = r, y = 0;\n  cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n  if ( r > 0 ) {\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n    cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \")\\n\";\n  }\n  int P = 1 - r;\n  while ( x > y ) {\n    y ++;\n    if ( P <= 0 ) P = P + 2 * y + 1;\n    else {\n      x --;\n      P = P + 2 * y - 2 * x + 1;\n    }\n    if ( x < y ) break;\n    cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << - y + y_centre << \")\\n\";\n    if ( x != y ) {\n      cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << y + x_centre << \", \" << - x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << - x + y_centre << \")\\n\";\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void midPointCircleDraw ( int x_centre, int y_centre, int r ) {\n  int x = r, y = 0;\n  cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n  if ( r > 0 ) {\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n    cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \")\\n\";\n  }\n  int P = 1 - r;\n  while ( x > y ) {\n    y ++;\n    if ( P <= 0 ) P = P + 2 * y + 1;\n    else {\n      x --;\n      P = P + 2 * y - 2 * x + 1;\n    }\n    if ( x < y ) break;\n    cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << - y + y_centre << \")\\n\";\n    if ( x != y ) {\n      cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << y + x_centre << \", \" << - x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << - x + y_centre << \")\\n\";\n    }\n  }\n}", "target_program": " static void midPointCircleDraw ( int x_centre , int y_centre , int r ) {\n  int x = r , y = 0 ;\n  System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n  if ( r > 0 ) {\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n  }\n  int P = 1 - r ;\n  while ( x > y ) {\n    y ++ ;\n    if ( P <= 0 ) P = P + 2 * y + 1 ;\n    else {\n      x -- ;\n      P = P + 2 * y - 2 * x + 1 ;\n    }\n    if ( x < y ) break ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( - x + x_centre ) + \", \" + ( y + y_centre ) + \")\" ) ;\n    System . out . print ( \"(\" + ( x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    System . out . println ( \"(\" + ( - x + x_centre ) + \", \" + ( - y + y_centre ) + \")\" ) ;\n    if ( x != y ) {\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( - y + x_centre ) + \", \" + ( x + y_centre ) + \")\" ) ;\n      System . out . print ( \"(\" + ( y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n      System . out . println ( \"(\" + ( - y + x_centre ) + \", \" + ( - x + y_centre ) + \")\" ) ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void midPointCircleDraw ( int x_centre, int y_centre, int r ) {\n  int x = r, y = 0;\n  cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n  if ( r > 0 ) {\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n    cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \")\\n\";\n  }\n  int P = 1 - r;\n  while ( x > y ) {\n    y ++;\n    if ( P <= 0 ) P = P + 2 * y + 1;\n    else {\n      x --;\n      P = P + 2 * y - 2 * x + 1;\n    }\n    if ( x < y ) break;\n    cout << \"(\" << x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << y + y_centre << \") \";\n    cout << \"(\" << x + x_centre << \", \" << - y + y_centre << \") \";\n    cout << \"(\" << - x + x_centre << \", \" << - y + y_centre << \")\\n\";\n    if ( x != y ) {\n      cout << \"(\" << y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << x + y_centre << \") \";\n      cout << \"(\" << y + x_centre << \", \" << - x + y_centre << \") \";\n      cout << \"(\" << - y + x_centre << \", \" << - x + y_centre << \")\\n\";\n    }\n  }\n}", "target_program": " def midPointCircleDraw ( x_centre , y_centre , r ) :\n    x = r\n    y = 0\n    print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n    if ( r > 0 ) :\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" )\n    P = 1 - r\n    while ( x > y ) :\n        y += 1\n        if ( P <= 0 ) :\n            P = P + 2 * y + 1\n        else :\n            x -= 1\n            P = P + 2 * y - 2 * x + 1\n        if ( x < y ) :\n            break\n        print ( \"(\" , x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" , end = \"\" )\n        print ( \"(\" , - x + x_centre , \", \" , - y + y_centre , \")\" , sep = \"\" )\n        if ( x != y ) :\n            print ( \"(\" , y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" , end = \"\" )\n            print ( \"(\" , - y + x_centre , \", \" , - x + y_centre , \")\" , sep = \"\" )"}
{"source": "python", "target": "java", "source_program": " def smallestKFreq ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1\n    res = sys.maxsize\n    res1 = sys.maxsize\n    for key , values in mp.items ( ) :\n        if values == k :\n            res = min ( res , key )\n    return res if res != res1 else - 1", "target_program": " public static int smallestKFreq ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( m . containsKey ( a [ i ] ) ) m . put ( a [ i ] , m . get ( a [ i ] ) + 1 ) ;\n  else m . put ( a [ i ] , 1 ) ;\n  int res = Integer . MAX_VALUE ;\n  Set < Integer > s = m . keySet ( ) ;\n  for ( int temp : s ) if ( m . get ( temp ) == k ) res = Math . min ( res , temp ) ;\n  return ( res != Integer . MAX_VALUE ) ? res : - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def smallestKFreq ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1\n    res = sys.maxsize\n    res1 = sys.maxsize\n    for key , values in mp.items ( ) :\n        if values == k :\n            res = min ( res , key )\n    return res if res != res1 else - 1", "target_program": " int smallestKFreq ( int a [ ], int n, int k ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ a [ i ] ] ++;\n  int res = INT_MAX;\n  for ( auto it = m . begin ( );\n  it != m . end ( );\n  ++ it ) if ( it -> second == k ) res = min ( res, it -> first );\n  return ( res != INT_MAX ) ? res : - 1;\n}"}
{"source": "java", "target": "python", "source_program": " public static int smallestKFreq ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( m . containsKey ( a [ i ] ) ) m . put ( a [ i ] , m . get ( a [ i ] ) + 1 ) ;\n  else m . put ( a [ i ] , 1 ) ;\n  int res = Integer . MAX_VALUE ;\n  Set < Integer > s = m . keySet ( ) ;\n  for ( int temp : s ) if ( m . get ( temp ) == k ) res = Math . min ( res , temp ) ;\n  return ( res != Integer . MAX_VALUE ) ? res : - 1 ;\n}", "target_program": " def smallestKFreq ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1\n    res = sys.maxsize\n    res1 = sys.maxsize\n    for key , values in mp.items ( ) :\n        if values == k :\n            res = min ( res , key )\n    return res if res != res1 else - 1"}
{"source": "java", "target": "cpp", "source_program": " public static int smallestKFreq ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( m . containsKey ( a [ i ] ) ) m . put ( a [ i ] , m . get ( a [ i ] ) + 1 ) ;\n  else m . put ( a [ i ] , 1 ) ;\n  int res = Integer . MAX_VALUE ;\n  Set < Integer > s = m . keySet ( ) ;\n  for ( int temp : s ) if ( m . get ( temp ) == k ) res = Math . min ( res , temp ) ;\n  return ( res != Integer . MAX_VALUE ) ? res : - 1 ;\n}", "target_program": " int smallestKFreq ( int a [ ], int n, int k ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ a [ i ] ] ++;\n  int res = INT_MAX;\n  for ( auto it = m . begin ( );\n  it != m . end ( );\n  ++ it ) if ( it -> second == k ) res = min ( res, it -> first );\n  return ( res != INT_MAX ) ? res : - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int smallestKFreq ( int a [ ], int n, int k ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ a [ i ] ] ++;\n  int res = INT_MAX;\n  for ( auto it = m . begin ( );\n  it != m . end ( );\n  ++ it ) if ( it -> second == k ) res = min ( res, it -> first );\n  return ( res != INT_MAX ) ? res : - 1;\n}", "target_program": " public static int smallestKFreq ( int a [ ] , int n , int k ) {\n  HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( m . containsKey ( a [ i ] ) ) m . put ( a [ i ] , m . get ( a [ i ] ) + 1 ) ;\n  else m . put ( a [ i ] , 1 ) ;\n  int res = Integer . MAX_VALUE ;\n  Set < Integer > s = m . keySet ( ) ;\n  for ( int temp : s ) if ( m . get ( temp ) == k ) res = Math . min ( res , temp ) ;\n  return ( res != Integer . MAX_VALUE ) ? res : - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int smallestKFreq ( int a [ ], int n, int k ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ a [ i ] ] ++;\n  int res = INT_MAX;\n  for ( auto it = m . begin ( );\n  it != m . end ( );\n  ++ it ) if ( it -> second == k ) res = min ( res, it -> first );\n  return ( res != INT_MAX ) ? res : - 1;\n}", "target_program": " def smallestKFreq ( arr , n , k ) :\n    mp = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        mp [ arr [ i ] ] += 1\n    res = sys.maxsize\n    res1 = sys.maxsize\n    for key , values in mp.items ( ) :\n        if values == k :\n            res = min ( res , key )\n    return res if res != res1 else - 1"}
{"source": "python", "target": "java", "source_program": " def minXOR ( arr , n ) :\n    arr.sort ( ) ;\n    min_xor = 999999\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n    return min_xor", "target_program": " static int minXOR ( int arr [ ] , int n ) {\n  int min_xor = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j ] ) ;\n  return min_xor ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minXOR ( arr , n ) :\n    arr.sort ( ) ;\n    min_xor = 999999\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n    return min_xor", "target_program": " int minXOR ( int arr [ ], int n ) {\n  int min_xor = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) min_xor = min ( min_xor, arr [ i ] ^ arr [ j ] );\n  return min_xor;\n}"}
{"source": "java", "target": "python", "source_program": " static int minXOR ( int arr [ ] , int n ) {\n  int min_xor = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j ] ) ;\n  return min_xor ;\n}", "target_program": " def minXOR ( arr , n ) :\n    arr.sort ( ) ;\n    min_xor = 999999\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n    return min_xor"}
{"source": "java", "target": "cpp", "source_program": " static int minXOR ( int arr [ ] , int n ) {\n  int min_xor = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j ] ) ;\n  return min_xor ;\n}", "target_program": " int minXOR ( int arr [ ], int n ) {\n  int min_xor = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) min_xor = min ( min_xor, arr [ i ] ^ arr [ j ] );\n  return min_xor;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minXOR ( int arr [ ], int n ) {\n  int min_xor = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) min_xor = min ( min_xor, arr [ i ] ^ arr [ j ] );\n  return min_xor;\n}", "target_program": " static int minXOR ( int arr [ ] , int n ) {\n  int min_xor = Integer . MAX_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) min_xor = Math . min ( min_xor , arr [ i ] ^ arr [ j ] ) ;\n  return min_xor ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minXOR ( int arr [ ], int n ) {\n  int min_xor = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) min_xor = min ( min_xor, arr [ i ] ^ arr [ j ] );\n  return min_xor;\n}", "target_program": " def minXOR ( arr , n ) :\n    arr.sort ( ) ;\n    min_xor = 999999\n    val = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            val = arr [ i ] ^ arr [ j ]\n            min_xor = min ( min_xor , val )\n    return min_xor"}
{"source": "python", "target": "java", "source_program": " def compute ( st , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( st )\n    answer = \"\"\n    for i in range ( 0 , n ) :\n        answer = answer + st [ i ] ;\n    for i in range ( n , l ) :\n        answer = ( answer + reverseAlphabet [ ord ( st [ i ] ) - ord ( 'a' ) ] ) ;\n    return answer ;", "target_program": " static String compute ( String str , int n ) {\n  String reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\" ;\n  int l = str . length ( ) ;\n  String answer = \"\" ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) answer = answer + str . charAt ( i ) ;\n  for ( int i = n ;\n  i < l ;\n  i ++ ) answer = answer + reverseAlphabet . charAt ( str . charAt ( i ) - 'a' ) ;\n  return answer ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def compute ( st , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( st )\n    answer = \"\"\n    for i in range ( 0 , n ) :\n        answer = answer + st [ i ] ;\n    for i in range ( n , l ) :\n        answer = ( answer + reverseAlphabet [ ord ( st [ i ] ) - ord ( 'a' ) ] ) ;\n    return answer ;", "target_program": " string compute ( string str, int n ) {\n  string reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\";\n  int l = str . length ( );\n  for ( int i = n;\n  i < l;\n  i ++ ) str [ i ] = reverseAlphabet [ str [ i ] - 'a' ];\n  return str;\n}"}
{"source": "java", "target": "python", "source_program": " static String compute ( String str , int n ) {\n  String reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\" ;\n  int l = str . length ( ) ;\n  String answer = \"\" ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) answer = answer + str . charAt ( i ) ;\n  for ( int i = n ;\n  i < l ;\n  i ++ ) answer = answer + reverseAlphabet . charAt ( str . charAt ( i ) - 'a' ) ;\n  return answer ;\n}", "target_program": " def compute ( st , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( st )\n    answer = \"\"\n    for i in range ( 0 , n ) :\n        answer = answer + st [ i ] ;\n    for i in range ( n , l ) :\n        answer = ( answer + reverseAlphabet [ ord ( st [ i ] ) - ord ( 'a' ) ] ) ;\n    return answer ;"}
{"source": "java", "target": "cpp", "source_program": " static String compute ( String str , int n ) {\n  String reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\" ;\n  int l = str . length ( ) ;\n  String answer = \"\" ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) answer = answer + str . charAt ( i ) ;\n  for ( int i = n ;\n  i < l ;\n  i ++ ) answer = answer + reverseAlphabet . charAt ( str . charAt ( i ) - 'a' ) ;\n  return answer ;\n}", "target_program": " string compute ( string str, int n ) {\n  string reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\";\n  int l = str . length ( );\n  for ( int i = n;\n  i < l;\n  i ++ ) str [ i ] = reverseAlphabet [ str [ i ] - 'a' ];\n  return str;\n}"}
{"source": "cpp", "target": "java", "source_program": " string compute ( string str, int n ) {\n  string reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\";\n  int l = str . length ( );\n  for ( int i = n;\n  i < l;\n  i ++ ) str [ i ] = reverseAlphabet [ str [ i ] - 'a' ];\n  return str;\n}", "target_program": " static String compute ( String str , int n ) {\n  String reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\" ;\n  int l = str . length ( ) ;\n  String answer = \"\" ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) answer = answer + str . charAt ( i ) ;\n  for ( int i = n ;\n  i < l ;\n  i ++ ) answer = answer + reverseAlphabet . charAt ( str . charAt ( i ) - 'a' ) ;\n  return answer ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string compute ( string str, int n ) {\n  string reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\";\n  int l = str . length ( );\n  for ( int i = n;\n  i < l;\n  i ++ ) str [ i ] = reverseAlphabet [ str [ i ] - 'a' ];\n  return str;\n}", "target_program": " def compute ( st , n ) :\n    reverseAlphabet = \"zyxwvutsrqponmlkjihgfedcba\"\n    l = len ( st )\n    answer = \"\"\n    for i in range ( 0 , n ) :\n        answer = answer + st [ i ] ;\n    for i in range ( n , l ) :\n        answer = ( answer + reverseAlphabet [ ord ( st [ i ] ) - ord ( 'a' ) ] ) ;\n    return answer ;"}
{"source": "python", "target": "java", "source_program": " def checkplusperfect ( x ) :\n    temp = x\n    n = 0\n    while ( x != 0 ) :\n        x = x // 10\n        n = n + 1\n    x = temp\n    sm = 0\n    while ( x != 0 ) :\n        sm = sm + ( int ) ( math.pow ( x % 10 , n ) )\n        x = x // 10\n    return ( sm == temp )", "target_program": " static boolean checkplusperfect ( int x ) {\n  int temp = x ;\n  int n = 0 ;\n  while ( x != 0 ) {\n    x /= 10 ;\n    n ++ ;\n  }\n  x = temp ;\n  int sum = 0 ;\n  while ( x != 0 ) {\n    sum += Math . pow ( x % 10 , n ) ;\n    x /= 10 ;\n  }\n  return ( sum == temp ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkplusperfect ( x ) :\n    temp = x\n    n = 0\n    while ( x != 0 ) :\n        x = x // 10\n        n = n + 1\n    x = temp\n    sm = 0\n    while ( x != 0 ) :\n        sm = sm + ( int ) ( math.pow ( x % 10 , n ) )\n        x = x // 10\n    return ( sm == temp )", "target_program": " bool checkplusperfect ( int x ) {\n  int temp = x;\n  int n = 0;\n  while ( x != 0 ) {\n    x /= 10;\n    n ++;\n  }\n  x = temp;\n  int sum = 0;\n  while ( x != 0 ) {\n    sum += pow ( x % 10, n );\n    x /= 10;\n  }\n  return ( sum == temp );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkplusperfect ( int x ) {\n  int temp = x ;\n  int n = 0 ;\n  while ( x != 0 ) {\n    x /= 10 ;\n    n ++ ;\n  }\n  x = temp ;\n  int sum = 0 ;\n  while ( x != 0 ) {\n    sum += Math . pow ( x % 10 , n ) ;\n    x /= 10 ;\n  }\n  return ( sum == temp ) ;\n}", "target_program": " def checkplusperfect ( x ) :\n    temp = x\n    n = 0\n    while ( x != 0 ) :\n        x = x // 10\n        n = n + 1\n    x = temp\n    sm = 0\n    while ( x != 0 ) :\n        sm = sm + ( int ) ( math.pow ( x % 10 , n ) )\n        x = x // 10\n    return ( sm == temp )"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkplusperfect ( int x ) {\n  int temp = x ;\n  int n = 0 ;\n  while ( x != 0 ) {\n    x /= 10 ;\n    n ++ ;\n  }\n  x = temp ;\n  int sum = 0 ;\n  while ( x != 0 ) {\n    sum += Math . pow ( x % 10 , n ) ;\n    x /= 10 ;\n  }\n  return ( sum == temp ) ;\n}", "target_program": " bool checkplusperfect ( int x ) {\n  int temp = x;\n  int n = 0;\n  while ( x != 0 ) {\n    x /= 10;\n    n ++;\n  }\n  x = temp;\n  int sum = 0;\n  while ( x != 0 ) {\n    sum += pow ( x % 10, n );\n    x /= 10;\n  }\n  return ( sum == temp );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkplusperfect ( int x ) {\n  int temp = x;\n  int n = 0;\n  while ( x != 0 ) {\n    x /= 10;\n    n ++;\n  }\n  x = temp;\n  int sum = 0;\n  while ( x != 0 ) {\n    sum += pow ( x % 10, n );\n    x /= 10;\n  }\n  return ( sum == temp );\n}", "target_program": " static boolean checkplusperfect ( int x ) {\n  int temp = x ;\n  int n = 0 ;\n  while ( x != 0 ) {\n    x /= 10 ;\n    n ++ ;\n  }\n  x = temp ;\n  int sum = 0 ;\n  while ( x != 0 ) {\n    sum += Math . pow ( x % 10 , n ) ;\n    x /= 10 ;\n  }\n  return ( sum == temp ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkplusperfect ( int x ) {\n  int temp = x;\n  int n = 0;\n  while ( x != 0 ) {\n    x /= 10;\n    n ++;\n  }\n  x = temp;\n  int sum = 0;\n  while ( x != 0 ) {\n    sum += pow ( x % 10, n );\n    x /= 10;\n  }\n  return ( sum == temp );\n}", "target_program": " def checkplusperfect ( x ) :\n    temp = x\n    n = 0\n    while ( x != 0 ) :\n        x = x // 10\n        n = n + 1\n    x = temp\n    sm = 0\n    while ( x != 0 ) :\n        sm = sm + ( int ) ( math.pow ( x % 10 , n ) )\n        x = x // 10\n    return ( sm == temp )"}
{"source": "python", "target": "java", "source_program": " def arcLength ( diameter , angle ) :\n    if angle >= 360 :\n        print ( \"Angle cannot be formed\" )\n        return 0\n    else :\n        arc = ( 3.142857142857143 * diameter ) * ( angle / 360.0 )\n        return arc", "target_program": " static double arcLength ( double diameter , double angle ) {\n  double pi = 22.0 / 7.0 ;\n  double arc ;\n  if ( angle >= 360 ) {\n    System . out . println ( \"Angle cannot\" + \" be formed\" ) ;\n    return 0 ;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 ) ;\n    return arc ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def arcLength ( diameter , angle ) :\n    if angle >= 360 :\n        print ( \"Angle cannot be formed\" )\n        return 0\n    else :\n        arc = ( 3.142857142857143 * diameter ) * ( angle / 360.0 )\n        return arc", "target_program": " double arcLength ( double diameter, double angle ) {\n  double pi = 22.0 / 7.0;\n  double arc;\n  if ( angle >= 360 ) {\n    cout << \"Angle cannot\", \" be formed\";\n    return 0;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 );\n    return arc;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static double arcLength ( double diameter , double angle ) {\n  double pi = 22.0 / 7.0 ;\n  double arc ;\n  if ( angle >= 360 ) {\n    System . out . println ( \"Angle cannot\" + \" be formed\" ) ;\n    return 0 ;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 ) ;\n    return arc ;\n  }\n}", "target_program": " def arcLength ( diameter , angle ) :\n    if angle >= 360 :\n        print ( \"Angle cannot be formed\" )\n        return 0\n    else :\n        arc = ( 3.142857142857143 * diameter ) * ( angle / 360.0 )\n        return arc"}
{"source": "java", "target": "cpp", "source_program": " static double arcLength ( double diameter , double angle ) {\n  double pi = 22.0 / 7.0 ;\n  double arc ;\n  if ( angle >= 360 ) {\n    System . out . println ( \"Angle cannot\" + \" be formed\" ) ;\n    return 0 ;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 ) ;\n    return arc ;\n  }\n}", "target_program": " double arcLength ( double diameter, double angle ) {\n  double pi = 22.0 / 7.0;\n  double arc;\n  if ( angle >= 360 ) {\n    cout << \"Angle cannot\", \" be formed\";\n    return 0;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 );\n    return arc;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " double arcLength ( double diameter, double angle ) {\n  double pi = 22.0 / 7.0;\n  double arc;\n  if ( angle >= 360 ) {\n    cout << \"Angle cannot\", \" be formed\";\n    return 0;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 );\n    return arc;\n  }\n}", "target_program": " static double arcLength ( double diameter , double angle ) {\n  double pi = 22.0 / 7.0 ;\n  double arc ;\n  if ( angle >= 360 ) {\n    System . out . println ( \"Angle cannot\" + \" be formed\" ) ;\n    return 0 ;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 ) ;\n    return arc ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " double arcLength ( double diameter, double angle ) {\n  double pi = 22.0 / 7.0;\n  double arc;\n  if ( angle >= 360 ) {\n    cout << \"Angle cannot\", \" be formed\";\n    return 0;\n  }\n  else {\n    arc = ( pi * diameter ) * ( angle / 360.0 );\n    return arc;\n  }\n}", "target_program": " def arcLength ( diameter , angle ) :\n    if angle >= 360 :\n        print ( \"Angle cannot be formed\" )\n        return 0\n    else :\n        arc = ( 3.142857142857143 * diameter ) * ( angle / 360.0 )\n        return arc"}
{"source": "python", "target": "java", "source_program": " def findLastIndex ( str , x ) :\n    index = - 1\n    for i in range ( 0 , len ( str ) ) :\n        if str [ i ] == x :\n            index = i\n    return index", "target_program": " static int findLastIndex ( String str , Character x ) {\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) if ( str . charAt ( i ) == x ) index = i ;\n  return index ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLastIndex ( str , x ) :\n    index = - 1\n    for i in range ( 0 , len ( str ) ) :\n        if str [ i ] == x :\n            index = i\n    return index", "target_program": " int findLastIndex ( string & str, char x ) {\n  int index = - 1;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) if ( str [ i ] == x ) index = i;\n  return index;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLastIndex ( String str , Character x ) {\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) if ( str . charAt ( i ) == x ) index = i ;\n  return index ;\n}", "target_program": " def findLastIndex ( str , x ) :\n    index = - 1\n    for i in range ( 0 , len ( str ) ) :\n        if str [ i ] == x :\n            index = i\n    return index"}
{"source": "java", "target": "cpp", "source_program": " static int findLastIndex ( String str , Character x ) {\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) if ( str . charAt ( i ) == x ) index = i ;\n  return index ;\n}", "target_program": " int findLastIndex ( string & str, char x ) {\n  int index = - 1;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) if ( str [ i ] == x ) index = i;\n  return index;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLastIndex ( string & str, char x ) {\n  int index = - 1;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) if ( str [ i ] == x ) index = i;\n  return index;\n}", "target_program": " static int findLastIndex ( String str , Character x ) {\n  int index = - 1 ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) if ( str . charAt ( i ) == x ) index = i ;\n  return index ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLastIndex ( string & str, char x ) {\n  int index = - 1;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) if ( str [ i ] == x ) index = i;\n  return index;\n}", "target_program": " def findLastIndex ( str , x ) :\n    index = - 1\n    for i in range ( 0 , len ( str ) ) :\n        if str [ i ] == x :\n            index = i\n    return index"}
{"source": "python", "target": "java", "source_program": " def findTrailingZeros ( n ) :\n    count = 0\n    i = 5\n    while ( n / i >= 1 ) :\n        count += int ( n / i )\n        i *= 5\n    return int ( count )", "target_program": " static int findTrailingZeros ( int n ) {\n  int count = 0 ;\n  for ( int i = 5 ;\n  n / i >= 1 ;\n  i *= 5 ) count += n / i ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findTrailingZeros ( n ) :\n    count = 0\n    i = 5\n    while ( n / i >= 1 ) :\n        count += int ( n / i )\n        i *= 5\n    return int ( count )", "target_program": " int findTrailingZeros ( int n ) {\n  int count = 0;\n  for ( int i = 5;\n  n / i >= 1;\n  i *= 5 ) count += n / i;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int findTrailingZeros ( int n ) {\n  int count = 0 ;\n  for ( int i = 5 ;\n  n / i >= 1 ;\n  i *= 5 ) count += n / i ;\n  return count ;\n}", "target_program": " def findTrailingZeros ( n ) :\n    count = 0\n    i = 5\n    while ( n / i >= 1 ) :\n        count += int ( n / i )\n        i *= 5\n    return int ( count )"}
{"source": "java", "target": "cpp", "source_program": " static int findTrailingZeros ( int n ) {\n  int count = 0 ;\n  for ( int i = 5 ;\n  n / i >= 1 ;\n  i *= 5 ) count += n / i ;\n  return count ;\n}", "target_program": " int findTrailingZeros ( int n ) {\n  int count = 0;\n  for ( int i = 5;\n  n / i >= 1;\n  i *= 5 ) count += n / i;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findTrailingZeros ( int n ) {\n  int count = 0;\n  for ( int i = 5;\n  n / i >= 1;\n  i *= 5 ) count += n / i;\n  return count;\n}", "target_program": " static int findTrailingZeros ( int n ) {\n  int count = 0 ;\n  for ( int i = 5 ;\n  n / i >= 1 ;\n  i *= 5 ) count += n / i ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findTrailingZeros ( int n ) {\n  int count = 0;\n  for ( int i = 5;\n  n / i >= 1;\n  i *= 5 ) count += n / i;\n  return count;\n}", "target_program": " def findTrailingZeros ( n ) :\n    count = 0\n    i = 5\n    while ( n / i >= 1 ) :\n        count += int ( n / i )\n        i *= 5\n    return int ( count )"}
{"source": "python", "target": "java", "source_program": " def rotateMatrix ( mat ) :\n    i = N - 1 ;\n    while ( i >= 0 ) :\n        j = N - 1 ;\n        while ( j >= 0 ) :\n            print ( mat [ i ] [ j ] , end = \" \" ) ;\n            j = j - 1 ;\n        print ( ) ;\n        i = i - 1 ;", "target_program": " static void rotateMatrix ( int mat [ ] [ ] ) {\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 1 ;\n    j >= 0 ;\n    j -- ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def rotateMatrix ( mat ) :\n    i = N - 1 ;\n    while ( i >= 0 ) :\n        j = N - 1 ;\n        while ( j >= 0 ) :\n            print ( mat [ i ] [ j ] , end = \" \" ) ;\n            j = j - 1 ;\n        print ( ) ;\n        i = i - 1 ;", "target_program": " void rotateMatrix ( int mat [ ] [ N ] ) {\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 1;\n    j >= 0;\n    j -- ) printf ( \"%d \", mat [ i ] [ j ] );\n    printf ( \"\\n\" );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void rotateMatrix ( int mat [ ] [ ] ) {\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 1 ;\n    j >= 0 ;\n    j -- ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " def rotateMatrix ( mat ) :\n    i = N - 1 ;\n    while ( i >= 0 ) :\n        j = N - 1 ;\n        while ( j >= 0 ) :\n            print ( mat [ i ] [ j ] , end = \" \" ) ;\n            j = j - 1 ;\n        print ( ) ;\n        i = i - 1 ;"}
{"source": "java", "target": "cpp", "source_program": " static void rotateMatrix ( int mat [ ] [ ] ) {\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 1 ;\n    j >= 0 ;\n    j -- ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " void rotateMatrix ( int mat [ ] [ N ] ) {\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 1;\n    j >= 0;\n    j -- ) printf ( \"%d \", mat [ i ] [ j ] );\n    printf ( \"\\n\" );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void rotateMatrix ( int mat [ ] [ N ] ) {\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 1;\n    j >= 0;\n    j -- ) printf ( \"%d \", mat [ i ] [ j ] );\n    printf ( \"\\n\" );\n  }\n}", "target_program": " static void rotateMatrix ( int mat [ ] [ ] ) {\n  for ( int i = N - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = N - 1 ;\n    j >= 0 ;\n    j -- ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void rotateMatrix ( int mat [ ] [ N ] ) {\n  for ( int i = N - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = N - 1;\n    j >= 0;\n    j -- ) printf ( \"%d \", mat [ i ] [ j ] );\n    printf ( \"\\n\" );\n  }\n}", "target_program": " def rotateMatrix ( mat ) :\n    i = N - 1 ;\n    while ( i >= 0 ) :\n        j = N - 1 ;\n        while ( j >= 0 ) :\n            print ( mat [ i ] [ j ] , end = \" \" ) ;\n            j = j - 1 ;\n        print ( ) ;\n        i = i - 1 ;"}
{"source": "python", "target": "java", "source_program": " def calculateSum ( n ) :\n    if ( n <= 0 ) :\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    for i in range ( 2 , n + 1 ) :\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n    return sm", "target_program": " static int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0 ;\n  int fibo [ ] = new int [ n + 1 ] ;\n  fibo [ 0 ] = 0 ;\n  fibo [ 1 ] = 1 ;\n  int sum = fibo [ 0 ] + fibo [ 1 ] ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;\n    sum += fibo [ i ] ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def calculateSum ( n ) :\n    if ( n <= 0 ) :\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    for i in range ( 2 , n + 1 ) :\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n    return sm", "target_program": " int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0;\n  int fibo [ n + 1 ];\n  fibo [ 0 ] = 0, fibo [ 1 ] = 1;\n  int sum = fibo [ 0 ] + fibo [ 1 ];\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ];\n    sum += fibo [ i ];\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0 ;\n  int fibo [ ] = new int [ n + 1 ] ;\n  fibo [ 0 ] = 0 ;\n  fibo [ 1 ] = 1 ;\n  int sum = fibo [ 0 ] + fibo [ 1 ] ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;\n    sum += fibo [ i ] ;\n  }\n  return sum ;\n}", "target_program": " def calculateSum ( n ) :\n    if ( n <= 0 ) :\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    for i in range ( 2 , n + 1 ) :\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n    return sm"}
{"source": "java", "target": "cpp", "source_program": " static int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0 ;\n  int fibo [ ] = new int [ n + 1 ] ;\n  fibo [ 0 ] = 0 ;\n  fibo [ 1 ] = 1 ;\n  int sum = fibo [ 0 ] + fibo [ 1 ] ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;\n    sum += fibo [ i ] ;\n  }\n  return sum ;\n}", "target_program": " int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0;\n  int fibo [ n + 1 ];\n  fibo [ 0 ] = 0, fibo [ 1 ] = 1;\n  int sum = fibo [ 0 ] + fibo [ 1 ];\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ];\n    sum += fibo [ i ];\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0;\n  int fibo [ n + 1 ];\n  fibo [ 0 ] = 0, fibo [ 1 ] = 1;\n  int sum = fibo [ 0 ] + fibo [ 1 ];\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ];\n    sum += fibo [ i ];\n  }\n  return sum;\n}", "target_program": " static int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0 ;\n  int fibo [ ] = new int [ n + 1 ] ;\n  fibo [ 0 ] = 0 ;\n  fibo [ 1 ] = 1 ;\n  int sum = fibo [ 0 ] + fibo [ 1 ] ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ] ;\n    sum += fibo [ i ] ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int calculateSum ( int n ) {\n  if ( n <= 0 ) return 0;\n  int fibo [ n + 1 ];\n  fibo [ 0 ] = 0, fibo [ 1 ] = 1;\n  int sum = fibo [ 0 ] + fibo [ 1 ];\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ];\n    sum += fibo [ i ];\n  }\n  return sum;\n}", "target_program": " def calculateSum ( n ) :\n    if ( n <= 0 ) :\n        return 0\n    fibo = [ 0 ] * ( n + 1 )\n    fibo [ 1 ] = 1\n    sm = fibo [ 0 ] + fibo [ 1 ]\n    for i in range ( 2 , n + 1 ) :\n        fibo [ i ] = fibo [ i - 1 ] + fibo [ i - 2 ]\n        sm = sm + fibo [ i ]\n    return sm"}
{"source": "python", "target": "java", "source_program": " def KSwapMaximum ( n , k ) :\n    global arr\n    for i in range ( 0 , n - 1 ) :\n        if ( k > 0 ) :\n            indexPosition = i\n            for j in range ( i + 1 , n ) :\n                if ( k <= j - i ) :\n                    break\n                if ( arr [ j ] > arr [ indexPosition ] ) :\n                    indexPosition = j\n            for j in range ( indexPosition , i , - 1 ) :\n                t = arr [ j ]\n                arr [ j ] = arr [ j - 1 ]\n                arr [ j - 1 ] = t\n            k = k - indexPosition - i", "target_program": " static void KSwapMaximum ( int [ ] arr , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int indexPosition = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( k <= j - i ) break ;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j ;\n    }\n    for ( int j = indexPosition ;\n    j > i ;\n    -- j ) SwapInts ( arr , j , j - 1 ) ;\n    k -= indexPosition - i ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def KSwapMaximum ( n , k ) :\n    global arr\n    for i in range ( 0 , n - 1 ) :\n        if ( k > 0 ) :\n            indexPosition = i\n            for j in range ( i + 1 , n ) :\n                if ( k <= j - i ) :\n                    break\n                if ( arr [ j ] > arr [ indexPosition ] ) :\n                    indexPosition = j\n            for j in range ( indexPosition , i , - 1 ) :\n                t = arr [ j ]\n                arr [ j ] = arr [ j - 1 ]\n                arr [ j - 1 ] = t\n            k = k - indexPosition - i", "target_program": " void KSwapMaximum ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int indexPosition = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( k <= j - i ) break;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j;\n    }\n    for ( int j = indexPosition;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= indexPosition - i;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void KSwapMaximum ( int [ ] arr , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int indexPosition = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( k <= j - i ) break ;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j ;\n    }\n    for ( int j = indexPosition ;\n    j > i ;\n    -- j ) SwapInts ( arr , j , j - 1 ) ;\n    k -= indexPosition - i ;\n  }\n}", "target_program": " def KSwapMaximum ( n , k ) :\n    global arr\n    for i in range ( 0 , n - 1 ) :\n        if ( k > 0 ) :\n            indexPosition = i\n            for j in range ( i + 1 , n ) :\n                if ( k <= j - i ) :\n                    break\n                if ( arr [ j ] > arr [ indexPosition ] ) :\n                    indexPosition = j\n            for j in range ( indexPosition , i , - 1 ) :\n                t = arr [ j ]\n                arr [ j ] = arr [ j - 1 ]\n                arr [ j - 1 ] = t\n            k = k - indexPosition - i"}
{"source": "java", "target": "cpp", "source_program": " static void KSwapMaximum ( int [ ] arr , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int indexPosition = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( k <= j - i ) break ;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j ;\n    }\n    for ( int j = indexPosition ;\n    j > i ;\n    -- j ) SwapInts ( arr , j , j - 1 ) ;\n    k -= indexPosition - i ;\n  }\n}", "target_program": " void KSwapMaximum ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int indexPosition = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( k <= j - i ) break;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j;\n    }\n    for ( int j = indexPosition;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= indexPosition - i;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void KSwapMaximum ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int indexPosition = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( k <= j - i ) break;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j;\n    }\n    for ( int j = indexPosition;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= indexPosition - i;\n  }\n}", "target_program": " static void KSwapMaximum ( int [ ] arr , int n , int k ) {\n  for ( int i = 0 ;\n  i < n - 1 && k > 0 ;\n  ++ i ) {\n    int indexPosition = i ;\n    for ( int j = i + 1 ;\n    j < n ;\n    ++ j ) {\n      if ( k <= j - i ) break ;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j ;\n    }\n    for ( int j = indexPosition ;\n    j > i ;\n    -- j ) SwapInts ( arr , j , j - 1 ) ;\n    k -= indexPosition - i ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void KSwapMaximum ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < n - 1 && k > 0;\n  ++ i ) {\n    int indexPosition = i;\n    for ( int j = i + 1;\n    j < n;\n    ++ j ) {\n      if ( k <= j - i ) break;\n      if ( arr [ j ] > arr [ indexPosition ] ) indexPosition = j;\n    }\n    for ( int j = indexPosition;\n    j > i;\n    -- j ) swap ( arr [ j ], arr [ j - 1 ] );\n    k -= indexPosition - i;\n  }\n}", "target_program": " def KSwapMaximum ( n , k ) :\n    global arr\n    for i in range ( 0 , n - 1 ) :\n        if ( k > 0 ) :\n            indexPosition = i\n            for j in range ( i + 1 , n ) :\n                if ( k <= j - i ) :\n                    break\n                if ( arr [ j ] > arr [ indexPosition ] ) :\n                    indexPosition = j\n            for j in range ( indexPosition , i , - 1 ) :\n                t = arr [ j ]\n                arr [ j ] = arr [ j - 1 ]\n                arr [ j - 1 ] = t\n            k = k - indexPosition - i"}
{"source": "python", "target": "java", "source_program": " def check ( n ) :\n    return 1162261467 % n == 0", "target_program": " static boolean check ( int n ) {\n  return 1162261467 % n == 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check ( n ) :\n    return 1162261467 % n == 0", "target_program": " bool check ( int n ) {\n  return 1162261467 % n == 0;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean check ( int n ) {\n  return 1162261467 % n == 0 ;\n}", "target_program": " def check ( n ) :\n    return 1162261467 % n == 0"}
{"source": "java", "target": "cpp", "source_program": " static boolean check ( int n ) {\n  return 1162261467 % n == 0 ;\n}", "target_program": " bool check ( int n ) {\n  return 1162261467 % n == 0;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool check ( int n ) {\n  return 1162261467 % n == 0;\n}", "target_program": " static boolean check ( int n ) {\n  return 1162261467 % n == 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool check ( int n ) {\n  return 1162261467 % n == 0;\n}", "target_program": " def check ( n ) :\n    return 1162261467 % n == 0"}
{"source": "python", "target": "java", "source_program": " def printRepeating ( arr , size ) :\n    print ( \"Repeating elements are \" , end = '' )\n    for i in range ( 0 , size ) :\n        for j in range ( i + 1 , size ) :\n            if arr [ i ] == arr [ j ] :\n                print ( arr [ i ] , end = ' ' )", "target_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i , j ;\n  System . out . println ( \"Repeated Elements are :\" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < size ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) System . out . print ( arr [ i ] + \" \" ) ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printRepeating ( arr , size ) :\n    print ( \"Repeating elements are \" , end = '' )\n    for i in range ( 0 , size ) :\n        for j in range ( i + 1 , size ) :\n            if arr [ i ] == arr [ j ] :\n                print ( arr [ i ] , end = ' ' )", "target_program": " void printRepeating ( int arr [ ], int size ) {\n  int i, j;\n  printf ( \" Repeating elements are \" );\n  for ( i = 0;\n  i < size;\n  i ++ ) for ( j = i + 1;\n  j < size;\n  j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i , j ;\n  System . out . println ( \"Repeated Elements are :\" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < size ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) System . out . print ( arr [ i ] + \" \" ) ;\n    }\n  }\n}", "target_program": " def printRepeating ( arr , size ) :\n    print ( \"Repeating elements are \" , end = '' )\n    for i in range ( 0 , size ) :\n        for j in range ( i + 1 , size ) :\n            if arr [ i ] == arr [ j ] :\n                print ( arr [ i ] , end = ' ' )"}
{"source": "java", "target": "cpp", "source_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i , j ;\n  System . out . println ( \"Repeated Elements are :\" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < size ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) System . out . print ( arr [ i ] + \" \" ) ;\n    }\n  }\n}", "target_program": " void printRepeating ( int arr [ ], int size ) {\n  int i, j;\n  printf ( \" Repeating elements are \" );\n  for ( i = 0;\n  i < size;\n  i ++ ) for ( j = i + 1;\n  j < size;\n  j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printRepeating ( int arr [ ], int size ) {\n  int i, j;\n  printf ( \" Repeating elements are \" );\n  for ( i = 0;\n  i < size;\n  i ++ ) for ( j = i + 1;\n  j < size;\n  j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << \" \";\n}", "target_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i , j ;\n  System . out . println ( \"Repeated Elements are :\" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < size ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) System . out . print ( arr [ i ] + \" \" ) ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printRepeating ( int arr [ ], int size ) {\n  int i, j;\n  printf ( \" Repeating elements are \" );\n  for ( i = 0;\n  i < size;\n  i ++ ) for ( j = i + 1;\n  j < size;\n  j ++ ) if ( arr [ i ] == arr [ j ] ) cout << arr [ i ] << \" \";\n}", "target_program": " def printRepeating ( arr , size ) :\n    print ( \"Repeating elements are \" , end = '' )\n    for i in range ( 0 , size ) :\n        for j in range ( i + 1 , size ) :\n            if arr [ i ] == arr [ j ] :\n                print ( arr [ i ] , end = ' ' )"}
{"source": "python", "target": "java", "source_program": " def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        arr [ i ] = int ( str [ i - 1 ] ) ;\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n        for j in range ( 8 ) :\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) :\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n    for i in range ( 1 , n + 1 ) :\n        if ( dp [ i ] [ 0 ] == 1 ) :\n            return True\n    return False", "target_program": " static boolean isSubSeqDivisible ( String str ) {\n  int n = str . length ( ) ;\n  int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;\n  int arr [ ] = new int [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) arr [ i ] = ( int ) ( str . charAt ( i - 1 ) - '0' ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n    for ( int j = 0 ;\n    j < 8 ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ;\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true ;\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        arr [ i ] = int ( str [ i - 1 ] ) ;\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n        for j in range ( 8 ) :\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) :\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n    for i in range ( 1 , n + 1 ) :\n        if ( dp [ i ] [ 0 ] == 1 ) :\n            return True\n    return False", "target_program": " bool isSubSeqDivisible ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ 10 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int arr [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) arr [ i ] = str [ i - 1 ] - '0';\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1;\n    for ( int j = 0;\n    j < 8;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ];\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ];\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true;\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isSubSeqDivisible ( String str ) {\n  int n = str . length ( ) ;\n  int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;\n  int arr [ ] = new int [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) arr [ i ] = ( int ) ( str . charAt ( i - 1 ) - '0' ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n    for ( int j = 0 ;\n    j < 8 ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ;\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true ;\n  }\n  return false ;\n}", "target_program": " def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        arr [ i ] = int ( str [ i - 1 ] ) ;\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n        for j in range ( 8 ) :\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) :\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n    for i in range ( 1 , n + 1 ) :\n        if ( dp [ i ] [ 0 ] == 1 ) :\n            return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isSubSeqDivisible ( String str ) {\n  int n = str . length ( ) ;\n  int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;\n  int arr [ ] = new int [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) arr [ i ] = ( int ) ( str . charAt ( i - 1 ) - '0' ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n    for ( int j = 0 ;\n    j < 8 ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ;\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true ;\n  }\n  return false ;\n}", "target_program": " bool isSubSeqDivisible ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ 10 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int arr [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) arr [ i ] = str [ i - 1 ] - '0';\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1;\n    for ( int j = 0;\n    j < 8;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ];\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ];\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true;\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isSubSeqDivisible ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ 10 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int arr [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) arr [ i ] = str [ i - 1 ] - '0';\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1;\n    for ( int j = 0;\n    j < 8;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ];\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ];\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true;\n  }\n  return false;\n}", "target_program": " static boolean isSubSeqDivisible ( String str ) {\n  int n = str . length ( ) ;\n  int dp [ ] [ ] = new int [ n + 1 ] [ 10 ] ;\n  int arr [ ] = new int [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) arr [ i ] = ( int ) ( str . charAt ( i - 1 ) - '0' ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n    for ( int j = 0 ;\n    j < 8 ;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ] ;\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ] ;\n    }\n  }\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true ;\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isSubSeqDivisible ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ 10 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  int arr [ n + 1 ];\n  for ( int i = 1;\n  i <= n;\n  i ++ ) arr [ i ] = str [ i - 1 ] - '0';\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    dp [ i ] [ arr [ i ] % 8 ] = 1;\n    for ( int j = 0;\n    j < 8;\n    j ++ ) {\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ];\n      if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) dp [ i ] [ j ] = dp [ i - 1 ] [ j ];\n    }\n  }\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    if ( dp [ i ] [ 0 ] == 1 ) return true;\n  }\n  return false;\n}", "target_program": " def isSubSeqDivisible ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( 10 ) ] for i in range ( n + 1 ) ]\n    arr = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        arr [ i ] = int ( str [ i - 1 ] ) ;\n    for i in range ( 1 , n + 1 ) :\n        dp [ i ] [ arr [ i ] % 8 ] = 1 ;\n        for j in range ( 8 ) :\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] ) :\n                dp [ i ] [ ( j * 10 + arr [ i ] ) % 8 ] = dp [ i - 1 ] [ j ]\n            if ( dp [ i - 1 ] [ j ] > dp [ i ] [ j ] ) :\n                dp [ i ] [ j ] = dp [ i - 1 ] [ j ]\n    for i in range ( 1 , n + 1 ) :\n        if ( dp [ i ] [ 0 ] == 1 ) :\n            return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def deleteElements ( arr , n , k ) :\n    st = [ ]\n    st.append ( arr [ 0 ] )\n    top = 0\n    count = 0\n    for i in range ( 1 , n ) :\n        while ( len ( st ) != 0 and count < k and st [ top ] < arr [ i ] ) :\n            st.pop ( )\n            count += 1\n            top -= 1\n        st.append ( arr [ i ] )\n        top += 1\n    for i in range ( 0 , len ( st ) ) :\n        print ( st [ i ] , \"\" , end = \"\" )", "target_program": " static void deleteElements ( int arr [ ] , int n , int k ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  s . push ( arr [ 0 ] ) ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . peek ( ) < arr [ i ] && count < k ) {\n      s . pop ( ) ;\n      count ++ ;\n    }\n    s . push ( arr [ i ] ) ;\n  }\n  int m = s . size ( ) ;\n  Integer [ ] v = new Integer [ m ] ;\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . peek ( ) ;\n    s . pop ( ) ;\n  }\n  for ( Integer x : v ) {\n    System . out . print ( x + \"\" ) ;\n  };\n  System . out . println ( \"\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def deleteElements ( arr , n , k ) :\n    st = [ ]\n    st.append ( arr [ 0 ] )\n    top = 0\n    count = 0\n    for i in range ( 1 , n ) :\n        while ( len ( st ) != 0 and count < k and st [ top ] < arr [ i ] ) :\n            st.pop ( )\n            count += 1\n            top -= 1\n        st.append ( arr [ i ] )\n        top += 1\n    for i in range ( 0 , len ( st ) ) :\n        print ( st [ i ] , \"\" , end = \"\" )", "target_program": " void deleteElements ( int arr [ ], int n, int k ) {\n  stack < int > s;\n  s . push ( arr [ 0 ] );\n  int count = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . top ( ) < arr [ i ] && count < k ) {\n      s . pop ( );\n      count ++;\n    }\n    s . push ( arr [ i ] );\n  }\n  int m = s . size ( );\n  vector < int > v ( m );\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . top ( );\n    s . pop ( );\n  }\n  for ( auto x : v ) cout << x << \" \";\n  cout << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void deleteElements ( int arr [ ] , int n , int k ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  s . push ( arr [ 0 ] ) ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . peek ( ) < arr [ i ] && count < k ) {\n      s . pop ( ) ;\n      count ++ ;\n    }\n    s . push ( arr [ i ] ) ;\n  }\n  int m = s . size ( ) ;\n  Integer [ ] v = new Integer [ m ] ;\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . peek ( ) ;\n    s . pop ( ) ;\n  }\n  for ( Integer x : v ) {\n    System . out . print ( x + \"\" ) ;\n  };\n  System . out . println ( \"\" ) ;\n}", "target_program": " def deleteElements ( arr , n , k ) :\n    st = [ ]\n    st.append ( arr [ 0 ] )\n    top = 0\n    count = 0\n    for i in range ( 1 , n ) :\n        while ( len ( st ) != 0 and count < k and st [ top ] < arr [ i ] ) :\n            st.pop ( )\n            count += 1\n            top -= 1\n        st.append ( arr [ i ] )\n        top += 1\n    for i in range ( 0 , len ( st ) ) :\n        print ( st [ i ] , \"\" , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void deleteElements ( int arr [ ] , int n , int k ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  s . push ( arr [ 0 ] ) ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . peek ( ) < arr [ i ] && count < k ) {\n      s . pop ( ) ;\n      count ++ ;\n    }\n    s . push ( arr [ i ] ) ;\n  }\n  int m = s . size ( ) ;\n  Integer [ ] v = new Integer [ m ] ;\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . peek ( ) ;\n    s . pop ( ) ;\n  }\n  for ( Integer x : v ) {\n    System . out . print ( x + \"\" ) ;\n  };\n  System . out . println ( \"\" ) ;\n}", "target_program": " void deleteElements ( int arr [ ], int n, int k ) {\n  stack < int > s;\n  s . push ( arr [ 0 ] );\n  int count = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . top ( ) < arr [ i ] && count < k ) {\n      s . pop ( );\n      count ++;\n    }\n    s . push ( arr [ i ] );\n  }\n  int m = s . size ( );\n  vector < int > v ( m );\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . top ( );\n    s . pop ( );\n  }\n  for ( auto x : v ) cout << x << \" \";\n  cout << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void deleteElements ( int arr [ ], int n, int k ) {\n  stack < int > s;\n  s . push ( arr [ 0 ] );\n  int count = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . top ( ) < arr [ i ] && count < k ) {\n      s . pop ( );\n      count ++;\n    }\n    s . push ( arr [ i ] );\n  }\n  int m = s . size ( );\n  vector < int > v ( m );\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . top ( );\n    s . pop ( );\n  }\n  for ( auto x : v ) cout << x << \" \";\n  cout << endl;\n}", "target_program": " static void deleteElements ( int arr [ ] , int n , int k ) {\n  Stack < Integer > s = new Stack < > ( ) ;\n  s . push ( arr [ 0 ] ) ;\n  int count = 0 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . peek ( ) < arr [ i ] && count < k ) {\n      s . pop ( ) ;\n      count ++ ;\n    }\n    s . push ( arr [ i ] ) ;\n  }\n  int m = s . size ( ) ;\n  Integer [ ] v = new Integer [ m ] ;\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . peek ( ) ;\n    s . pop ( ) ;\n  }\n  for ( Integer x : v ) {\n    System . out . print ( x + \"\" ) ;\n  };\n  System . out . println ( \"\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void deleteElements ( int arr [ ], int n, int k ) {\n  stack < int > s;\n  s . push ( arr [ 0 ] );\n  int count = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    while ( ! s . empty ( ) && s . top ( ) < arr [ i ] && count < k ) {\n      s . pop ( );\n      count ++;\n    }\n    s . push ( arr [ i ] );\n  }\n  int m = s . size ( );\n  vector < int > v ( m );\n  while ( ! s . empty ( ) ) {\n    v [ -- m ] = s . top ( );\n    s . pop ( );\n  }\n  for ( auto x : v ) cout << x << \" \";\n  cout << endl;\n}", "target_program": " def deleteElements ( arr , n , k ) :\n    st = [ ]\n    st.append ( arr [ 0 ] )\n    top = 0\n    count = 0\n    for i in range ( 1 , n ) :\n        while ( len ( st ) != 0 and count < k and st [ top ] < arr [ i ] ) :\n            st.pop ( )\n            count += 1\n            top -= 1\n        st.append ( arr [ i ] )\n        top += 1\n    for i in range ( 0 , len ( st ) ) :\n        print ( st [ i ] , \"\" , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def smallestSubWithSum ( arr , n , x ) :\n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    while ( end < n ) :\n        while ( curr_sum <= x and end < n ) :\n            curr_sum += arr [ end ]\n            end += 1\n        while ( curr_sum > x and start < n ) :\n            if ( end - start < min_len ) :\n                min_len = end - start\n            curr_sum -= arr [ start ]\n            start += 1\n    return min_len", "target_program": " static int smallestSubWithSum ( int arr [ ] , int n , int x ) {\n  int curr_sum = 0 , min_len = n + 1 ;\n  int start = 0 , end = 0 ;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ] ;\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start ;\n      curr_sum -= arr [ start ++ ] ;\n    }\n  }\n  return min_len ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def smallestSubWithSum ( arr , n , x ) :\n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    while ( end < n ) :\n        while ( curr_sum <= x and end < n ) :\n            curr_sum += arr [ end ]\n            end += 1\n        while ( curr_sum > x and start < n ) :\n            if ( end - start < min_len ) :\n                min_len = end - start\n            curr_sum -= arr [ start ]\n            start += 1\n    return min_len", "target_program": " int smallestSubWithSum ( int arr [ ], int n, int x ) {\n  int curr_sum = 0, min_len = n + 1;\n  int start = 0, end = 0;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ];\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start;\n      curr_sum -= arr [ start ++ ];\n    }\n  }\n  return min_len;\n}"}
{"source": "java", "target": "python", "source_program": " static int smallestSubWithSum ( int arr [ ] , int n , int x ) {\n  int curr_sum = 0 , min_len = n + 1 ;\n  int start = 0 , end = 0 ;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ] ;\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start ;\n      curr_sum -= arr [ start ++ ] ;\n    }\n  }\n  return min_len ;\n}", "target_program": " def smallestSubWithSum ( arr , n , x ) :\n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    while ( end < n ) :\n        while ( curr_sum <= x and end < n ) :\n            curr_sum += arr [ end ]\n            end += 1\n        while ( curr_sum > x and start < n ) :\n            if ( end - start < min_len ) :\n                min_len = end - start\n            curr_sum -= arr [ start ]\n            start += 1\n    return min_len"}
{"source": "java", "target": "cpp", "source_program": " static int smallestSubWithSum ( int arr [ ] , int n , int x ) {\n  int curr_sum = 0 , min_len = n + 1 ;\n  int start = 0 , end = 0 ;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ] ;\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start ;\n      curr_sum -= arr [ start ++ ] ;\n    }\n  }\n  return min_len ;\n}", "target_program": " int smallestSubWithSum ( int arr [ ], int n, int x ) {\n  int curr_sum = 0, min_len = n + 1;\n  int start = 0, end = 0;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ];\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start;\n      curr_sum -= arr [ start ++ ];\n    }\n  }\n  return min_len;\n}"}
{"source": "cpp", "target": "java", "source_program": " int smallestSubWithSum ( int arr [ ], int n, int x ) {\n  int curr_sum = 0, min_len = n + 1;\n  int start = 0, end = 0;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ];\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start;\n      curr_sum -= arr [ start ++ ];\n    }\n  }\n  return min_len;\n}", "target_program": " static int smallestSubWithSum ( int arr [ ] , int n , int x ) {\n  int curr_sum = 0 , min_len = n + 1 ;\n  int start = 0 , end = 0 ;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ] ;\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start ;\n      curr_sum -= arr [ start ++ ] ;\n    }\n  }\n  return min_len ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int smallestSubWithSum ( int arr [ ], int n, int x ) {\n  int curr_sum = 0, min_len = n + 1;\n  int start = 0, end = 0;\n  while ( end < n ) {\n    while ( curr_sum <= x && end < n ) curr_sum += arr [ end ++ ];\n    while ( curr_sum > x && start < n ) {\n      if ( end - start < min_len ) min_len = end - start;\n      curr_sum -= arr [ start ++ ];\n    }\n  }\n  return min_len;\n}", "target_program": " def smallestSubWithSum ( arr , n , x ) :\n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    while ( end < n ) :\n        while ( curr_sum <= x and end < n ) :\n            curr_sum += arr [ end ]\n            end += 1\n        while ( curr_sum > x and start < n ) :\n            if ( end - start < min_len ) :\n                min_len = end - start\n            curr_sum -= arr [ start ]\n            start += 1\n    return min_len"}
{"source": "python", "target": "java", "source_program": " def findPair ( arr , n ) :\n    s = { i : 1 for i in arr }\n    found = False\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] + arr [ j ] in s.keys ( ) :\n                print ( arr [ i ] , arr [ j ] )\n                found = True\n    if found == False :\n        print ( \"Not exist\" )", "target_program": " public static void findPair ( int [ ] arr , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( Integer i : arr ) {\n    s . add ( i ) ;\n  }\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int sum = arr [ i ] + arr [ j ] ;\n      if ( s . contains ( sum ) ) {\n        found = true ;\n        System . out . println ( arr [ i ] + \" \" + arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \"Not Exist \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findPair ( arr , n ) :\n    s = { i : 1 for i in arr }\n    found = False\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] + arr [ j ] in s.keys ( ) :\n                print ( arr [ i ] , arr [ j ] )\n                found = True\n    if found == False :\n        print ( \"Not exist\" )", "target_program": " void findPair ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) s . insert ( arr [ i ] );\n  bool found = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( s . find ( arr [ i ] + arr [ j ] ) != s . end ( ) ) {\n        cout << arr [ i ] << \" \" << arr [ j ] << endl;\n        found = true;\n      }\n    }\n  }\n  if ( found == false ) cout << \"Not exist\" << endl;\n}"}
{"source": "java", "target": "python", "source_program": " public static void findPair ( int [ ] arr , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( Integer i : arr ) {\n    s . add ( i ) ;\n  }\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int sum = arr [ i ] + arr [ j ] ;\n      if ( s . contains ( sum ) ) {\n        found = true ;\n        System . out . println ( arr [ i ] + \" \" + arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \"Not Exist \" ) ;\n}", "target_program": " def findPair ( arr , n ) :\n    s = { i : 1 for i in arr }\n    found = False\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] + arr [ j ] in s.keys ( ) :\n                print ( arr [ i ] , arr [ j ] )\n                found = True\n    if found == False :\n        print ( \"Not exist\" )"}
{"source": "java", "target": "cpp", "source_program": " public static void findPair ( int [ ] arr , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( Integer i : arr ) {\n    s . add ( i ) ;\n  }\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int sum = arr [ i ] + arr [ j ] ;\n      if ( s . contains ( sum ) ) {\n        found = true ;\n        System . out . println ( arr [ i ] + \" \" + arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \"Not Exist \" ) ;\n}", "target_program": " void findPair ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) s . insert ( arr [ i ] );\n  bool found = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( s . find ( arr [ i ] + arr [ j ] ) != s . end ( ) ) {\n        cout << arr [ i ] << \" \" << arr [ j ] << endl;\n        found = true;\n      }\n    }\n  }\n  if ( found == false ) cout << \"Not exist\" << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findPair ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) s . insert ( arr [ i ] );\n  bool found = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( s . find ( arr [ i ] + arr [ j ] ) != s . end ( ) ) {\n        cout << arr [ i ] << \" \" << arr [ j ] << endl;\n        found = true;\n      }\n    }\n  }\n  if ( found == false ) cout << \"Not exist\" << endl;\n}", "target_program": " public static void findPair ( int [ ] arr , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( Integer i : arr ) {\n    s . add ( i ) ;\n  }\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int sum = arr [ i ] + arr [ j ] ;\n      if ( s . contains ( sum ) ) {\n        found = true ;\n        System . out . println ( arr [ i ] + \" \" + arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \"Not Exist \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findPair ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) s . insert ( arr [ i ] );\n  bool found = false;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( s . find ( arr [ i ] + arr [ j ] ) != s . end ( ) ) {\n        cout << arr [ i ] << \" \" << arr [ j ] << endl;\n        found = true;\n      }\n    }\n  }\n  if ( found == false ) cout << \"Not exist\" << endl;\n}", "target_program": " def findPair ( arr , n ) :\n    s = { i : 1 for i in arr }\n    found = False\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] + arr [ j ] in s.keys ( ) :\n                print ( arr [ i ] , arr [ j ] )\n                found = True\n    if found == False :\n        print ( \"Not exist\" )"}
{"source": "python", "target": "java", "source_program": " def numofAP ( a , n ) :\n    minarr = + 2147483647\n    maxarr = - 2147483648\n    for i in range ( n ) :\n        minarr = min ( minarr , a [ i ] )\n        maxarr = max ( maxarr , a [ i ] )\n    dp = [ 0 for i in range ( n + 1 ) ]\n    ans = n + 1\n    for d in range ( ( minarr - maxarr ) , ( maxarr - minarr ) + 1 ) :\n        sum = [ 0 for i in range ( MAX + 1 ) ]\n        for i in range ( n ) :\n            dp [ i ] = 1\n            if ( a [ i ] - d >= 1 and a [ i ] - d <= 1000000 ) :\n                dp [ i ] += sum [ a [ i ] - d ]\n            ans += dp [ i ] - 1\n            sum [ a [ i ] ] += dp [ i ]\n    return ans", "target_program": " static int numofAP ( int a [ ] , int n ) {\n  int minarr = + 2147483647 ;\n  int maxarr = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    minarr = Math . min ( minarr , a [ i ] ) ;\n    maxarr = Math . max ( maxarr , a [ i ] ) ;\n  }\n  int dp [ ] = new int [ n ] ;\n  int sum [ ] = new int [ MAX ] ;\n  int ans = n + 1 ;\n  for ( int d = ( minarr - maxarr ) ;\n  d <= ( maxarr - minarr ) ;\n  d ++ ) {\n    Arrays . fill ( sum , 0 ) ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      dp [ i ] = 1 ;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ;\n      ans += dp [ i ] - 1 ;\n      sum [ a [ i ] ] += dp [ i ] ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numofAP ( a , n ) :\n    minarr = + 2147483647\n    maxarr = - 2147483648\n    for i in range ( n ) :\n        minarr = min ( minarr , a [ i ] )\n        maxarr = max ( maxarr , a [ i ] )\n    dp = [ 0 for i in range ( n + 1 ) ]\n    ans = n + 1\n    for d in range ( ( minarr - maxarr ) , ( maxarr - minarr ) + 1 ) :\n        sum = [ 0 for i in range ( MAX + 1 ) ]\n        for i in range ( n ) :\n            dp [ i ] = 1\n            if ( a [ i ] - d >= 1 and a [ i ] - d <= 1000000 ) :\n                dp [ i ] += sum [ a [ i ] - d ]\n            ans += dp [ i ] - 1\n            sum [ a [ i ] ] += dp [ i ]\n    return ans", "target_program": " int numofAP ( int a [ ], int n ) {\n  int minarr = INT_MAX, maxarr = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    minarr = min ( minarr, a [ i ] );\n    maxarr = max ( maxarr, a [ i ] );\n  }\n  int dp [ n ], sum [ MAX ];\n  int ans = n + 1;\n  for ( int d = ( minarr - maxarr );\n  d <= ( maxarr - minarr );\n  d ++ ) {\n    memset ( sum, 0, sizeof sum );\n    for ( int i = 0;\n    i < n;\n    i ++ ) {\n      dp [ i ] = 1;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ];\n      ans += dp [ i ] - 1;\n      sum [ a [ i ] ] += dp [ i ];\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int numofAP ( int a [ ] , int n ) {\n  int minarr = + 2147483647 ;\n  int maxarr = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    minarr = Math . min ( minarr , a [ i ] ) ;\n    maxarr = Math . max ( maxarr , a [ i ] ) ;\n  }\n  int dp [ ] = new int [ n ] ;\n  int sum [ ] = new int [ MAX ] ;\n  int ans = n + 1 ;\n  for ( int d = ( minarr - maxarr ) ;\n  d <= ( maxarr - minarr ) ;\n  d ++ ) {\n    Arrays . fill ( sum , 0 ) ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      dp [ i ] = 1 ;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ;\n      ans += dp [ i ] - 1 ;\n      sum [ a [ i ] ] += dp [ i ] ;\n    }\n  }\n  return ans ;\n}", "target_program": " def numofAP ( a , n ) :\n    minarr = + 2147483647\n    maxarr = - 2147483648\n    for i in range ( n ) :\n        minarr = min ( minarr , a [ i ] )\n        maxarr = max ( maxarr , a [ i ] )\n    dp = [ 0 for i in range ( n + 1 ) ]\n    ans = n + 1\n    for d in range ( ( minarr - maxarr ) , ( maxarr - minarr ) + 1 ) :\n        sum = [ 0 for i in range ( MAX + 1 ) ]\n        for i in range ( n ) :\n            dp [ i ] = 1\n            if ( a [ i ] - d >= 1 and a [ i ] - d <= 1000000 ) :\n                dp [ i ] += sum [ a [ i ] - d ]\n            ans += dp [ i ] - 1\n            sum [ a [ i ] ] += dp [ i ]\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int numofAP ( int a [ ] , int n ) {\n  int minarr = + 2147483647 ;\n  int maxarr = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    minarr = Math . min ( minarr , a [ i ] ) ;\n    maxarr = Math . max ( maxarr , a [ i ] ) ;\n  }\n  int dp [ ] = new int [ n ] ;\n  int sum [ ] = new int [ MAX ] ;\n  int ans = n + 1 ;\n  for ( int d = ( minarr - maxarr ) ;\n  d <= ( maxarr - minarr ) ;\n  d ++ ) {\n    Arrays . fill ( sum , 0 ) ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      dp [ i ] = 1 ;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ;\n      ans += dp [ i ] - 1 ;\n      sum [ a [ i ] ] += dp [ i ] ;\n    }\n  }\n  return ans ;\n}", "target_program": " int numofAP ( int a [ ], int n ) {\n  int minarr = INT_MAX, maxarr = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    minarr = min ( minarr, a [ i ] );\n    maxarr = max ( maxarr, a [ i ] );\n  }\n  int dp [ n ], sum [ MAX ];\n  int ans = n + 1;\n  for ( int d = ( minarr - maxarr );\n  d <= ( maxarr - minarr );\n  d ++ ) {\n    memset ( sum, 0, sizeof sum );\n    for ( int i = 0;\n    i < n;\n    i ++ ) {\n      dp [ i ] = 1;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ];\n      ans += dp [ i ] - 1;\n      sum [ a [ i ] ] += dp [ i ];\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numofAP ( int a [ ], int n ) {\n  int minarr = INT_MAX, maxarr = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    minarr = min ( minarr, a [ i ] );\n    maxarr = max ( maxarr, a [ i ] );\n  }\n  int dp [ n ], sum [ MAX ];\n  int ans = n + 1;\n  for ( int d = ( minarr - maxarr );\n  d <= ( maxarr - minarr );\n  d ++ ) {\n    memset ( sum, 0, sizeof sum );\n    for ( int i = 0;\n    i < n;\n    i ++ ) {\n      dp [ i ] = 1;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ];\n      ans += dp [ i ] - 1;\n      sum [ a [ i ] ] += dp [ i ];\n    }\n  }\n  return ans;\n}", "target_program": " static int numofAP ( int a [ ] , int n ) {\n  int minarr = + 2147483647 ;\n  int maxarr = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    minarr = Math . min ( minarr , a [ i ] ) ;\n    maxarr = Math . max ( maxarr , a [ i ] ) ;\n  }\n  int dp [ ] = new int [ n ] ;\n  int sum [ ] = new int [ MAX ] ;\n  int ans = n + 1 ;\n  for ( int d = ( minarr - maxarr ) ;\n  d <= ( maxarr - minarr ) ;\n  d ++ ) {\n    Arrays . fill ( sum , 0 ) ;\n    for ( int i = 0 ;\n    i < n ;\n    i ++ ) {\n      dp [ i ] = 1 ;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ] ;\n      ans += dp [ i ] - 1 ;\n      sum [ a [ i ] ] += dp [ i ] ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numofAP ( int a [ ], int n ) {\n  int minarr = INT_MAX, maxarr = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    minarr = min ( minarr, a [ i ] );\n    maxarr = max ( maxarr, a [ i ] );\n  }\n  int dp [ n ], sum [ MAX ];\n  int ans = n + 1;\n  for ( int d = ( minarr - maxarr );\n  d <= ( maxarr - minarr );\n  d ++ ) {\n    memset ( sum, 0, sizeof sum );\n    for ( int i = 0;\n    i < n;\n    i ++ ) {\n      dp [ i ] = 1;\n      if ( a [ i ] - d >= 1 && a [ i ] - d <= 1000000 ) dp [ i ] += sum [ a [ i ] - d ];\n      ans += dp [ i ] - 1;\n      sum [ a [ i ] ] += dp [ i ];\n    }\n  }\n  return ans;\n}", "target_program": " def numofAP ( a , n ) :\n    minarr = + 2147483647\n    maxarr = - 2147483648\n    for i in range ( n ) :\n        minarr = min ( minarr , a [ i ] )\n        maxarr = max ( maxarr , a [ i ] )\n    dp = [ 0 for i in range ( n + 1 ) ]\n    ans = n + 1\n    for d in range ( ( minarr - maxarr ) , ( maxarr - minarr ) + 1 ) :\n        sum = [ 0 for i in range ( MAX + 1 ) ]\n        for i in range ( n ) :\n            dp [ i ] = 1\n            if ( a [ i ] - d >= 1 and a [ i ] - d <= 1000000 ) :\n                dp [ i ] += sum [ a [ i ] - d ]\n            ans += dp [ i ] - 1\n            sum [ a [ i ] ] += dp [ i ]\n    return ans"}
{"source": "python", "target": "java", "source_program": " def count ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po )\n    else :\n        return count ( msd * po - 1 )", "target_program": " static int count ( int n ) {\n  if ( n < 3 ) return n ;\n  if ( n >= 3 && n < 10 ) return n - 1 ;\n  int po = 1 ;\n  while ( n / po > 9 ) po = po * 10 ;\n  int msd = n / po ;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ;\n  else return count ( msd * po - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def count ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po )\n    else :\n        return count ( msd * po - 1 )", "target_program": " int count ( int n ) {\n  if ( n < 3 ) return n;\n  if ( n >= 3 && n < 10 ) return n - 1;\n  int po = 1;\n  while ( n / po > 9 ) po = po * 10;\n  int msd = n / po;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po );\n  else return count ( msd * po - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int count ( int n ) {\n  if ( n < 3 ) return n ;\n  if ( n >= 3 && n < 10 ) return n - 1 ;\n  int po = 1 ;\n  while ( n / po > 9 ) po = po * 10 ;\n  int msd = n / po ;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ;\n  else return count ( msd * po - 1 ) ;\n}", "target_program": " def count ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po )\n    else :\n        return count ( msd * po - 1 )"}
{"source": "java", "target": "cpp", "source_program": " static int count ( int n ) {\n  if ( n < 3 ) return n ;\n  if ( n >= 3 && n < 10 ) return n - 1 ;\n  int po = 1 ;\n  while ( n / po > 9 ) po = po * 10 ;\n  int msd = n / po ;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ;\n  else return count ( msd * po - 1 ) ;\n}", "target_program": " int count ( int n ) {\n  if ( n < 3 ) return n;\n  if ( n >= 3 && n < 10 ) return n - 1;\n  int po = 1;\n  while ( n / po > 9 ) po = po * 10;\n  int msd = n / po;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po );\n  else return count ( msd * po - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int count ( int n ) {\n  if ( n < 3 ) return n;\n  if ( n >= 3 && n < 10 ) return n - 1;\n  int po = 1;\n  while ( n / po > 9 ) po = po * 10;\n  int msd = n / po;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po );\n  else return count ( msd * po - 1 );\n}", "target_program": " static int count ( int n ) {\n  if ( n < 3 ) return n ;\n  if ( n >= 3 && n < 10 ) return n - 1 ;\n  int po = 1 ;\n  while ( n / po > 9 ) po = po * 10 ;\n  int msd = n / po ;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po ) ;\n  else return count ( msd * po - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int count ( int n ) {\n  if ( n < 3 ) return n;\n  if ( n >= 3 && n < 10 ) return n - 1;\n  int po = 1;\n  while ( n / po > 9 ) po = po * 10;\n  int msd = n / po;\n  if ( msd != 3 ) return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po );\n  else return count ( msd * po - 1 );\n}", "target_program": " def count ( n ) :\n    if n < 3 :\n        return n\n    elif n >= 3 and n < 10 :\n        return n - 1\n    po = 1\n    while n / po > 9 :\n        po = po * 10\n    msd = n / po\n    if msd != 3 :\n        return count ( msd ) * count ( po - 1 ) + count ( msd ) + count ( n % po )\n    else :\n        return count ( msd * po - 1 )"}
{"source": "python", "target": "java", "source_program": " def transpose ( A ) :\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A [ i ] [ j ]", "target_program": " static void transpose ( int A [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) {\n    int temp = A [ i ] [ j ] ;\n    A [ i ] [ j ] = A [ j ] [ i ] ;\n    A [ j ] [ i ] = temp ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def transpose ( A ) :\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A [ i ] [ j ]", "target_program": " void transpose ( int A [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) swap ( A [ i ] [ j ], A [ j ] [ i ] );\n}"}
{"source": "java", "target": "python", "source_program": " static void transpose ( int A [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) {\n    int temp = A [ i ] [ j ] ;\n    A [ i ] [ j ] = A [ j ] [ i ] ;\n    A [ j ] [ i ] = temp ;\n  }\n}", "target_program": " def transpose ( A ) :\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A [ i ] [ j ]"}
{"source": "java", "target": "cpp", "source_program": " static void transpose ( int A [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) {\n    int temp = A [ i ] [ j ] ;\n    A [ i ] [ j ] = A [ j ] [ i ] ;\n    A [ j ] [ i ] = temp ;\n  }\n}", "target_program": " void transpose ( int A [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) swap ( A [ i ] [ j ], A [ j ] [ i ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void transpose ( int A [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) swap ( A [ i ] [ j ], A [ j ] [ i ] );\n}", "target_program": " static void transpose ( int A [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = i + 1 ;\n  j < N ;\n  j ++ ) {\n    int temp = A [ i ] [ j ] ;\n    A [ i ] [ j ] = A [ j ] [ i ] ;\n    A [ j ] [ i ] = temp ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void transpose ( int A [ ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = i + 1;\n  j < N;\n  j ++ ) swap ( A [ i ] [ j ], A [ j ] [ i ] );\n}", "target_program": " def transpose ( A ) :\n    for i in range ( N ) :\n        for j in range ( i + 1 , N ) :\n            A [ i ] [ j ] , A [ j ] [ i ] = A [ j ] [ i ] , A [ i ] [ j ]"}
{"source": "python", "target": "java", "source_program": " def spiralDiaSum ( n ) :\n    if n == 1 :\n        return 1\n    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) )", "target_program": " static int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def spiralDiaSum ( n ) :\n    if n == 1 :\n        return 1\n    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) )", "target_program": " int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;\n}", "target_program": " def spiralDiaSum ( n ) :\n    if n == 1 :\n        return 1\n    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;\n}", "target_program": " int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) );\n}", "target_program": " static int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1 ;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int spiralDiaSum ( int n ) {\n  if ( n == 1 ) return 1;\n  return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) );\n}", "target_program": " def spiralDiaSum ( n ) :\n    if n == 1 :\n        return 1\n    return ( 4 * n * n - 6 * n + 6 + spiralDiaSum ( n - 2 ) )"}
{"source": "python", "target": "java", "source_program": " def getInvCount ( arr ) :\n    n = len ( arr )\n    invcount = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] > arr [ j ] :\n                for k in range ( j + 1 , n ) :\n                    if arr [ j ] > arr [ k ] :\n                        invcount += 1\n    return invcount", "target_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1 ;\n        k < n ;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++ ;\n        }\n      }\n    }\n  }\n  return invcount ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getInvCount ( arr ) :\n    n = len ( arr )\n    invcount = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] > arr [ j ] :\n                for k in range ( j + 1 , n ) :\n                    if arr [ j ] > arr [ k ] :\n                        invcount += 1\n    return invcount", "target_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1;\n        k < n;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++;\n        }\n      }\n    }\n  }\n  return invcount;\n}"}
{"source": "java", "target": "python", "source_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1 ;\n        k < n ;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++ ;\n        }\n      }\n    }\n  }\n  return invcount ;\n}", "target_program": " def getInvCount ( arr ) :\n    n = len ( arr )\n    invcount = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] > arr [ j ] :\n                for k in range ( j + 1 , n ) :\n                    if arr [ j ] > arr [ k ] :\n                        invcount += 1\n    return invcount"}
{"source": "java", "target": "cpp", "source_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1 ;\n        k < n ;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++ ;\n        }\n      }\n    }\n  }\n  return invcount ;\n}", "target_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1;\n        k < n;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++;\n        }\n      }\n    }\n  }\n  return invcount;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1;\n        k < n;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++;\n        }\n      }\n    }\n  }\n  return invcount;\n}", "target_program": " int getInvCount ( int arr [ ] , int n ) {\n  int invcount = 0 ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1 ;\n        k < n ;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++ ;\n        }\n      }\n    }\n  }\n  return invcount ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getInvCount ( int arr [ ], int n ) {\n  int invcount = 0;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      if ( arr [ i ] > arr [ j ] ) {\n        for ( int k = j + 1;\n        k < n;\n        k ++ ) {\n          if ( arr [ j ] > arr [ k ] ) invcount ++;\n        }\n      }\n    }\n  }\n  return invcount;\n}", "target_program": " def getInvCount ( arr ) :\n    n = len ( arr )\n    invcount = 0\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            if arr [ i ] > arr [ j ] :\n                for k in range ( j + 1 , n ) :\n                    if arr [ j ] > arr [ k ] :\n                        invcount += 1\n    return invcount"}
{"source": "python", "target": "java", "source_program": " def SumNodes ( l ) :\n    leafNodeCount = pow ( 2 , l - 1 )\n    vec = [ [ ] for i in range ( l ) ]\n    for i in range ( 1 , leafNodeCount + 1 ) :\n        vec [ l - 1 ].append ( i )\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        k = 0\n        while ( k < len ( vec [ i + 1 ] ) - 1 ) :\n            vec [ i ].append ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] )\n            k += 2\n    Sum = 0\n    for i in range ( l ) :\n        for j in range ( len ( vec [ i ] ) ) :\n            Sum += vec [ i ] [ j ]\n    return Sum", "target_program": " static int sumNodes ( int l ) {\n  int leafNodeCount = ( int ) Math . pow ( 2 , l - 1 ) ;\n  Vector < Vector < Integer >> vec = new Vector < Vector < Integer >> ( ) ;\n  for ( int i = 1 ;\n  i <= l ;\n  i ++ ) vec . add ( new Vector < Integer > ( ) ) ;\n  for ( int i = 1 ;\n  i <= leafNodeCount ;\n  i ++ ) vec . get ( l - 1 ) . add ( i ) ;\n  for ( int i = l - 2 ;\n  i >= 0 ;\n  i -- ) {\n    int k = 0 ;\n    while ( k < vec . get ( i + 1 ) . size ( ) - 1 ) {\n      vec . get ( i ) . add ( vec . get ( i + 1 ) . get ( k ) + vec . get ( i + 1 ) . get ( k + 1 ) ) ;\n      k += 2 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < l ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < vec . get ( i ) . size ( ) ;\n    j ++ ) sum += vec . get ( i ) . get ( j ) ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def SumNodes ( l ) :\n    leafNodeCount = pow ( 2 , l - 1 )\n    vec = [ [ ] for i in range ( l ) ]\n    for i in range ( 1 , leafNodeCount + 1 ) :\n        vec [ l - 1 ].append ( i )\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        k = 0\n        while ( k < len ( vec [ i + 1 ] ) - 1 ) :\n            vec [ i ].append ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] )\n            k += 2\n    Sum = 0\n    for i in range ( l ) :\n        for j in range ( len ( vec [ i ] ) ) :\n            Sum += vec [ i ] [ j ]\n    return Sum", "target_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  vector < int > vec [ l ];\n  for ( int i = 1;\n  i <= leafNodeCount;\n  i ++ ) vec [ l - 1 ] . push_back ( i );\n  for ( int i = l - 2;\n  i >= 0;\n  i -- ) {\n    int k = 0;\n    while ( k < vec [ i + 1 ] . size ( ) - 1 ) {\n      vec [ i ] . push_back ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] );\n      k += 2;\n    }\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < l;\n  i ++ ) {\n    for ( int j = 0;\n    j < vec [ i ] . size ( );\n    j ++ ) sum += vec [ i ] [ j ];\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int sumNodes ( int l ) {\n  int leafNodeCount = ( int ) Math . pow ( 2 , l - 1 ) ;\n  Vector < Vector < Integer >> vec = new Vector < Vector < Integer >> ( ) ;\n  for ( int i = 1 ;\n  i <= l ;\n  i ++ ) vec . add ( new Vector < Integer > ( ) ) ;\n  for ( int i = 1 ;\n  i <= leafNodeCount ;\n  i ++ ) vec . get ( l - 1 ) . add ( i ) ;\n  for ( int i = l - 2 ;\n  i >= 0 ;\n  i -- ) {\n    int k = 0 ;\n    while ( k < vec . get ( i + 1 ) . size ( ) - 1 ) {\n      vec . get ( i ) . add ( vec . get ( i + 1 ) . get ( k ) + vec . get ( i + 1 ) . get ( k + 1 ) ) ;\n      k += 2 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < l ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < vec . get ( i ) . size ( ) ;\n    j ++ ) sum += vec . get ( i ) . get ( j ) ;\n  }\n  return sum ;\n}", "target_program": " def SumNodes ( l ) :\n    leafNodeCount = pow ( 2 , l - 1 )\n    vec = [ [ ] for i in range ( l ) ]\n    for i in range ( 1 , leafNodeCount + 1 ) :\n        vec [ l - 1 ].append ( i )\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        k = 0\n        while ( k < len ( vec [ i + 1 ] ) - 1 ) :\n            vec [ i ].append ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] )\n            k += 2\n    Sum = 0\n    for i in range ( l ) :\n        for j in range ( len ( vec [ i ] ) ) :\n            Sum += vec [ i ] [ j ]\n    return Sum"}
{"source": "java", "target": "cpp", "source_program": " static int sumNodes ( int l ) {\n  int leafNodeCount = ( int ) Math . pow ( 2 , l - 1 ) ;\n  Vector < Vector < Integer >> vec = new Vector < Vector < Integer >> ( ) ;\n  for ( int i = 1 ;\n  i <= l ;\n  i ++ ) vec . add ( new Vector < Integer > ( ) ) ;\n  for ( int i = 1 ;\n  i <= leafNodeCount ;\n  i ++ ) vec . get ( l - 1 ) . add ( i ) ;\n  for ( int i = l - 2 ;\n  i >= 0 ;\n  i -- ) {\n    int k = 0 ;\n    while ( k < vec . get ( i + 1 ) . size ( ) - 1 ) {\n      vec . get ( i ) . add ( vec . get ( i + 1 ) . get ( k ) + vec . get ( i + 1 ) . get ( k + 1 ) ) ;\n      k += 2 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < l ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < vec . get ( i ) . size ( ) ;\n    j ++ ) sum += vec . get ( i ) . get ( j ) ;\n  }\n  return sum ;\n}", "target_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  vector < int > vec [ l ];\n  for ( int i = 1;\n  i <= leafNodeCount;\n  i ++ ) vec [ l - 1 ] . push_back ( i );\n  for ( int i = l - 2;\n  i >= 0;\n  i -- ) {\n    int k = 0;\n    while ( k < vec [ i + 1 ] . size ( ) - 1 ) {\n      vec [ i ] . push_back ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] );\n      k += 2;\n    }\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < l;\n  i ++ ) {\n    for ( int j = 0;\n    j < vec [ i ] . size ( );\n    j ++ ) sum += vec [ i ] [ j ];\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  vector < int > vec [ l ];\n  for ( int i = 1;\n  i <= leafNodeCount;\n  i ++ ) vec [ l - 1 ] . push_back ( i );\n  for ( int i = l - 2;\n  i >= 0;\n  i -- ) {\n    int k = 0;\n    while ( k < vec [ i + 1 ] . size ( ) - 1 ) {\n      vec [ i ] . push_back ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] );\n      k += 2;\n    }\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < l;\n  i ++ ) {\n    for ( int j = 0;\n    j < vec [ i ] . size ( );\n    j ++ ) sum += vec [ i ] [ j ];\n  }\n  return sum;\n}", "target_program": " static int sumNodes ( int l ) {\n  int leafNodeCount = ( int ) Math . pow ( 2 , l - 1 ) ;\n  Vector < Vector < Integer >> vec = new Vector < Vector < Integer >> ( ) ;\n  for ( int i = 1 ;\n  i <= l ;\n  i ++ ) vec . add ( new Vector < Integer > ( ) ) ;\n  for ( int i = 1 ;\n  i <= leafNodeCount ;\n  i ++ ) vec . get ( l - 1 ) . add ( i ) ;\n  for ( int i = l - 2 ;\n  i >= 0 ;\n  i -- ) {\n    int k = 0 ;\n    while ( k < vec . get ( i + 1 ) . size ( ) - 1 ) {\n      vec . get ( i ) . add ( vec . get ( i + 1 ) . get ( k ) + vec . get ( i + 1 ) . get ( k + 1 ) ) ;\n      k += 2 ;\n    }\n  }\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < l ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < vec . get ( i ) . size ( ) ;\n    j ++ ) sum += vec . get ( i ) . get ( j ) ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumNodes ( int l ) {\n  int leafNodeCount = pow ( 2, l - 1 );\n  vector < int > vec [ l ];\n  for ( int i = 1;\n  i <= leafNodeCount;\n  i ++ ) vec [ l - 1 ] . push_back ( i );\n  for ( int i = l - 2;\n  i >= 0;\n  i -- ) {\n    int k = 0;\n    while ( k < vec [ i + 1 ] . size ( ) - 1 ) {\n      vec [ i ] . push_back ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] );\n      k += 2;\n    }\n  }\n  int sum = 0;\n  for ( int i = 0;\n  i < l;\n  i ++ ) {\n    for ( int j = 0;\n    j < vec [ i ] . size ( );\n    j ++ ) sum += vec [ i ] [ j ];\n  }\n  return sum;\n}", "target_program": " def SumNodes ( l ) :\n    leafNodeCount = pow ( 2 , l - 1 )\n    vec = [ [ ] for i in range ( l ) ]\n    for i in range ( 1 , leafNodeCount + 1 ) :\n        vec [ l - 1 ].append ( i )\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        k = 0\n        while ( k < len ( vec [ i + 1 ] ) - 1 ) :\n            vec [ i ].append ( vec [ i + 1 ] [ k ] + vec [ i + 1 ] [ k + 1 ] )\n            k += 2\n    Sum = 0\n    for i in range ( l ) :\n        for j in range ( len ( vec [ i ] ) ) :\n            Sum += vec [ i ] [ j ]\n    return Sum"}
{"source": "python", "target": "java", "source_program": " def divSum ( num ) :\n    result = 0\n    i = 2\n    while i <= ( math.sqrt ( num ) ) :\n        if ( num % i == 0 ) :\n            if ( i == ( num / i ) ) :\n                result = result + i ;\n            else :\n                result = result + ( i + num / i ) ;\n        i = i + 1\n    return ( result + 1 ) ;", "target_program": " static int divSum ( int num ) {\n  int result = 0 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( num ) ;\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i ;\n      else result += ( i + num / i ) ;\n    }\n  }\n  return ( result + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def divSum ( num ) :\n    result = 0\n    i = 2\n    while i <= ( math.sqrt ( num ) ) :\n        if ( num % i == 0 ) :\n            if ( i == ( num / i ) ) :\n                result = result + i ;\n            else :\n                result = result + ( i + num / i ) ;\n        i = i + 1\n    return ( result + 1 ) ;", "target_program": " int divSum ( int num ) {\n  int result = 0;\n  for ( int i = 2;\n  i <= sqrt ( num );\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i;\n      else result += ( i + num / i );\n    }\n  }\n  return ( result + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int divSum ( int num ) {\n  int result = 0 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( num ) ;\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i ;\n      else result += ( i + num / i ) ;\n    }\n  }\n  return ( result + 1 ) ;\n}", "target_program": " def divSum ( num ) :\n    result = 0\n    i = 2\n    while i <= ( math.sqrt ( num ) ) :\n        if ( num % i == 0 ) :\n            if ( i == ( num / i ) ) :\n                result = result + i ;\n            else :\n                result = result + ( i + num / i ) ;\n        i = i + 1\n    return ( result + 1 ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int divSum ( int num ) {\n  int result = 0 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( num ) ;\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i ;\n      else result += ( i + num / i ) ;\n    }\n  }\n  return ( result + 1 ) ;\n}", "target_program": " int divSum ( int num ) {\n  int result = 0;\n  for ( int i = 2;\n  i <= sqrt ( num );\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i;\n      else result += ( i + num / i );\n    }\n  }\n  return ( result + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int divSum ( int num ) {\n  int result = 0;\n  for ( int i = 2;\n  i <= sqrt ( num );\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i;\n      else result += ( i + num / i );\n    }\n  }\n  return ( result + 1 );\n}", "target_program": " static int divSum ( int num ) {\n  int result = 0 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( num ) ;\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i ;\n      else result += ( i + num / i ) ;\n    }\n  }\n  return ( result + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int divSum ( int num ) {\n  int result = 0;\n  for ( int i = 2;\n  i <= sqrt ( num );\n  i ++ ) {\n    if ( num % i == 0 ) {\n      if ( i == ( num / i ) ) result += i;\n      else result += ( i + num / i );\n    }\n  }\n  return ( result + 1 );\n}", "target_program": " def divSum ( num ) :\n    result = 0\n    i = 2\n    while i <= ( math.sqrt ( num ) ) :\n        if ( num % i == 0 ) :\n            if ( i == ( num / i ) ) :\n                result = result + i ;\n            else :\n                result = result + ( i + num / i ) ;\n        i = i + 1\n    return ( result + 1 ) ;"}
{"source": "python", "target": "java", "source_program": " def find3Numbers ( A , arr_size , sum ) :\n    for i in range ( 0 , arr_size - 1 ) :\n        s = set ( )\n        curr_sum = sum - A [ i ]\n        for j in range ( i + 1 , arr_size ) :\n            if ( curr_sum - A [ j ] ) in s :\n                print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , curr_sum - A [ j ] )\n                return True\n            s.add ( A [ j ] )\n    return False", "target_program": " static boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    int curr_sum = sum - A [ i ] ;\n    for ( int j = i + 1 ;\n    j < arr_size ;\n    j ++ ) {\n      if ( s . contains ( curr_sum - A [ j ] ) && curr_sum - A [ j ] != ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n        System . out . printf ( \"Triplet is %d, %d, %d\" , A [ i ] , A [ j ] , curr_sum - A [ j ] ) ;\n        return true ;\n      }\n      s . add ( A [ j ] ) ;\n    }\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def find3Numbers ( A , arr_size , sum ) :\n    for i in range ( 0 , arr_size - 1 ) :\n        s = set ( )\n        curr_sum = sum - A [ i ]\n        for j in range ( i + 1 , arr_size ) :\n            if ( curr_sum - A [ j ] ) in s :\n                print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , curr_sum - A [ j ] )\n                return True\n            s.add ( A [ j ] )\n    return False", "target_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    unordered_set < int > s;\n    int curr_sum = sum - A [ i ];\n    for ( int j = i + 1;\n    j < arr_size;\n    j ++ ) {\n      if ( s . find ( curr_sum - A [ j ] ) != s . end ( ) ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ j ], curr_sum - A [ j ] );\n        return true;\n      }\n      s . insert ( A [ j ] );\n    }\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    int curr_sum = sum - A [ i ] ;\n    for ( int j = i + 1 ;\n    j < arr_size ;\n    j ++ ) {\n      if ( s . contains ( curr_sum - A [ j ] ) && curr_sum - A [ j ] != ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n        System . out . printf ( \"Triplet is %d, %d, %d\" , A [ i ] , A [ j ] , curr_sum - A [ j ] ) ;\n        return true ;\n      }\n      s . add ( A [ j ] ) ;\n    }\n  }\n  return false ;\n}", "target_program": " def find3Numbers ( A , arr_size , sum ) :\n    for i in range ( 0 , arr_size - 1 ) :\n        s = set ( )\n        curr_sum = sum - A [ i ]\n        for j in range ( i + 1 , arr_size ) :\n            if ( curr_sum - A [ j ] ) in s :\n                print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , curr_sum - A [ j ] )\n                return True\n            s.add ( A [ j ] )\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    int curr_sum = sum - A [ i ] ;\n    for ( int j = i + 1 ;\n    j < arr_size ;\n    j ++ ) {\n      if ( s . contains ( curr_sum - A [ j ] ) && curr_sum - A [ j ] != ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n        System . out . printf ( \"Triplet is %d, %d, %d\" , A [ i ] , A [ j ] , curr_sum - A [ j ] ) ;\n        return true ;\n      }\n      s . add ( A [ j ] ) ;\n    }\n  }\n  return false ;\n}", "target_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    unordered_set < int > s;\n    int curr_sum = sum - A [ i ];\n    for ( int j = i + 1;\n    j < arr_size;\n    j ++ ) {\n      if ( s . find ( curr_sum - A [ j ] ) != s . end ( ) ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ j ], curr_sum - A [ j ] );\n        return true;\n      }\n      s . insert ( A [ j ] );\n    }\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    unordered_set < int > s;\n    int curr_sum = sum - A [ i ];\n    for ( int j = i + 1;\n    j < arr_size;\n    j ++ ) {\n      if ( s . find ( curr_sum - A [ j ] ) != s . end ( ) ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ j ], curr_sum - A [ j ] );\n        return true;\n      }\n      s . insert ( A [ j ] );\n    }\n  }\n  return false;\n}", "target_program": " static boolean find3Numbers ( int A [ ] , int arr_size , int sum ) {\n  for ( int i = 0 ;\n  i < arr_size - 2 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    int curr_sum = sum - A [ i ] ;\n    for ( int j = i + 1 ;\n    j < arr_size ;\n    j ++ ) {\n      if ( s . contains ( curr_sum - A [ j ] ) && curr_sum - A [ j ] != ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n        System . out . printf ( \"Triplet is %d, %d, %d\" , A [ i ] , A [ j ] , curr_sum - A [ j ] ) ;\n        return true ;\n      }\n      s . add ( A [ j ] ) ;\n    }\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool find3Numbers ( int A [ ], int arr_size, int sum ) {\n  for ( int i = 0;\n  i < arr_size - 2;\n  i ++ ) {\n    unordered_set < int > s;\n    int curr_sum = sum - A [ i ];\n    for ( int j = i + 1;\n    j < arr_size;\n    j ++ ) {\n      if ( s . find ( curr_sum - A [ j ] ) != s . end ( ) ) {\n        printf ( \"Triplet is %d, %d, %d\", A [ i ], A [ j ], curr_sum - A [ j ] );\n        return true;\n      }\n      s . insert ( A [ j ] );\n    }\n  }\n  return false;\n}", "target_program": " def find3Numbers ( A , arr_size , sum ) :\n    for i in range ( 0 , arr_size - 1 ) :\n        s = set ( )\n        curr_sum = sum - A [ i ]\n        for j in range ( i + 1 , arr_size ) :\n            if ( curr_sum - A [ j ] ) in s :\n                print ( \"Triplet is\" , A [ i ] , \", \" , A [ j ] , \", \" , curr_sum - A [ j ] )\n                return True\n            s.add ( A [ j ] )\n    return False"}
{"source": "python", "target": "java", "source_program": " def evenlength ( n ) :\n    res = n\n    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :\n        res += n [ j ]\n    return res", "target_program": " static String evenlength ( String n ) {\n  String res = n ;\n  for ( int j = n . length ( ) - 1 ;\n  j >= 0 ;\n  -- j ) res += n . charAt ( j ) ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def evenlength ( n ) :\n    res = n\n    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :\n        res += n [ j ]\n    return res", "target_program": " string evenlength ( string n ) {\n  string res = n;\n  for ( int j = n . length ( ) - 1;\n  j >= 0;\n  -- j ) res += n [ j ];\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static String evenlength ( String n ) {\n  String res = n ;\n  for ( int j = n . length ( ) - 1 ;\n  j >= 0 ;\n  -- j ) res += n . charAt ( j ) ;\n  return res ;\n}", "target_program": " def evenlength ( n ) :\n    res = n\n    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :\n        res += n [ j ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static String evenlength ( String n ) {\n  String res = n ;\n  for ( int j = n . length ( ) - 1 ;\n  j >= 0 ;\n  -- j ) res += n . charAt ( j ) ;\n  return res ;\n}", "target_program": " string evenlength ( string n ) {\n  string res = n;\n  for ( int j = n . length ( ) - 1;\n  j >= 0;\n  -- j ) res += n [ j ];\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " string evenlength ( string n ) {\n  string res = n;\n  for ( int j = n . length ( ) - 1;\n  j >= 0;\n  -- j ) res += n [ j ];\n  return res;\n}", "target_program": " static String evenlength ( String n ) {\n  String res = n ;\n  for ( int j = n . length ( ) - 1 ;\n  j >= 0 ;\n  -- j ) res += n . charAt ( j ) ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string evenlength ( string n ) {\n  string res = n;\n  for ( int j = n . length ( ) - 1;\n  j >= 0;\n  -- j ) res += n [ j ];\n  return res;\n}", "target_program": " def evenlength ( n ) :\n    res = n\n    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :\n        res += n [ j ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0 ;\n    temp = p ;\n    while ( temp <= n ) :\n        ans += n / temp ;\n        temp = temp * p ;\n    return ans ;", "target_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int count = 0 , temp = i ;\n    while ( temp % p == 0 ) {\n      count ++ ;\n      temp = temp / p ;\n    }\n    ans += count ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0 ;\n    temp = p ;\n    while ( temp <= n ) :\n        ans += n / temp ;\n        temp = temp * p ;\n    return ans ;", "target_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int count = 0 , temp = i ;\n    while ( temp % p == 0 ) {\n      count ++ ;\n      temp = temp / p ;\n    }\n    ans += count ;\n  }\n  return ans ;\n}", "target_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0 ;\n    temp = p ;\n    while ( temp <= n ) :\n        ans += n / temp ;\n        temp = temp * p ;\n    return ans ;"}
{"source": "java", "target": "cpp", "source_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int count = 0 , temp = i ;\n    while ( temp % p == 0 ) {\n      count ++ ;\n      temp = temp / p ;\n    }\n    ans += count ;\n  }\n  return ans ;\n}", "target_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}", "target_program": " static int PowerOFPINnfactorial ( int n , int p ) {\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    int count = 0 , temp = i ;\n    while ( temp % p == 0 ) {\n      count ++ ;\n      temp = temp / p ;\n    }\n    ans += count ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int PowerOFPINnfactorial ( int n, int p ) {\n  int ans = 0;\n  int temp = p;\n  while ( temp <= n ) {\n    ans += n / temp;\n    temp = temp * p;\n  }\n  return ans;\n}", "target_program": " def PowerOFPINnfactorial ( n , p ) :\n    ans = 0 ;\n    temp = p ;\n    while ( temp <= n ) :\n        ans += n / temp ;\n        temp = temp * p ;\n    return ans ;"}
{"source": "python", "target": "java", "source_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( B [ i ] == 1 ) :\n            j = i\n            while ( B [ j ] == 1 ) :\n                j = j + 1\n            A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A [ j + 1 : ]\n            i = j\n    for i in range ( 0 , n ) :\n        if ( A [ i ] != i + 1 ) :\n            return False\n    return True", "target_program": " static boolean sortedAfterSwap ( int A [ ] , boolean B [ ] , int n ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i ;\n      while ( B [ j ] ) {\n        j ++ ;\n      }\n      Arrays . sort ( A , i , 1 + j ) ;\n      i = j ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) {\n      return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( B [ i ] == 1 ) :\n            j = i\n            while ( B [ j ] == 1 ) :\n                j = j + 1\n            A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A [ j + 1 : ]\n            i = j\n    for i in range ( 0 , n ) :\n        if ( A [ i ] != i + 1 ) :\n            return False\n    return True", "target_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  int i, j;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i;\n      while ( B [ j ] ) j ++;\n      sort ( A + i, A + 1 + j );\n      i = j;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean sortedAfterSwap ( int A [ ] , boolean B [ ] , int n ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i ;\n      while ( B [ j ] ) {\n        j ++ ;\n      }\n      Arrays . sort ( A , i , 1 + j ) ;\n      i = j ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) {\n      return false ;\n    }\n  }\n  return true ;\n}", "target_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( B [ i ] == 1 ) :\n            j = i\n            while ( B [ j ] == 1 ) :\n                j = j + 1\n            A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A [ j + 1 : ]\n            i = j\n    for i in range ( 0 , n ) :\n        if ( A [ i ] != i + 1 ) :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean sortedAfterSwap ( int A [ ] , boolean B [ ] , int n ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i ;\n      while ( B [ j ] ) {\n        j ++ ;\n      }\n      Arrays . sort ( A , i , 1 + j ) ;\n      i = j ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) {\n      return false ;\n    }\n  }\n  return true ;\n}", "target_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  int i, j;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i;\n      while ( B [ j ] ) j ++;\n      sort ( A + i, A + 1 + j );\n      i = j;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  int i, j;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i;\n      while ( B [ j ] ) j ++;\n      sort ( A + i, A + 1 + j );\n      i = j;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}", "target_program": " static boolean sortedAfterSwap ( int A [ ] , boolean B [ ] , int n ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i ;\n      while ( B [ j ] ) {\n        j ++ ;\n      }\n      Arrays . sort ( A , i , 1 + j ) ;\n      i = j ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) {\n      return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool sortedAfterSwap ( int A [ ], bool B [ ], int n ) {\n  int i, j;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( B [ i ] ) {\n      j = i;\n      while ( B [ j ] ) j ++;\n      sort ( A + i, A + 1 + j );\n      i = j;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( A [ i ] != i + 1 ) return false;\n  }\n  return true;\n}", "target_program": " def sortedAfterSwap ( A , B , n ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( B [ i ] == 1 ) :\n            j = i\n            while ( B [ j ] == 1 ) :\n                j = j + 1\n            A = A [ 0 : i ] + sorted ( A [ i : j + 1 ] ) + A [ j + 1 : ]\n            i = j\n    for i in range ( 0 , n ) :\n        if ( A [ i ] != i + 1 ) :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def pythagoreanTriplets ( limits ) :\n    c , m = 0 , 2\n    while c < limits :\n        for n in range ( 1 , m ) :\n            a = m * m - n * n\n            b = 2 * m * n\n            c = m * m + n * n\n            if c > limits :\n                break\n            print ( a , b , c )\n        m = m + 1", "target_program": " static void pythagoreanTriplets ( int limit ) {\n  int a , b , c = 0 ;\n  int m = 2 ;\n  while ( c < limit ) {\n    for ( int n = 1 ;\n    n < m ;\n    ++ n ) {\n      a = m * m - n * n ;\n      b = 2 * m * n ;\n      c = m * m + n * n ;\n      if ( c > limit ) break ;\n      System . out . println ( a + \" \" + b + \" \" + c ) ;\n    }\n    m ++ ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def pythagoreanTriplets ( limits ) :\n    c , m = 0 , 2\n    while c < limits :\n        for n in range ( 1 , m ) :\n            a = m * m - n * n\n            b = 2 * m * n\n            c = m * m + n * n\n            if c > limits :\n                break\n            print ( a , b , c )\n        m = m + 1", "target_program": " void pythagoreanTriplets ( int limit ) {\n  int a, b, c = 0;\n  int m = 2;\n  while ( c < limit ) {\n    for ( int n = 1;\n    n < m;\n    ++ n ) {\n      a = m * m - n * n;\n      b = 2 * m * n;\n      c = m * m + n * n;\n      if ( c > limit ) break;\n      printf ( \"%d %d %d\\n\", a, b, c );\n    }\n    m ++;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void pythagoreanTriplets ( int limit ) {\n  int a , b , c = 0 ;\n  int m = 2 ;\n  while ( c < limit ) {\n    for ( int n = 1 ;\n    n < m ;\n    ++ n ) {\n      a = m * m - n * n ;\n      b = 2 * m * n ;\n      c = m * m + n * n ;\n      if ( c > limit ) break ;\n      System . out . println ( a + \" \" + b + \" \" + c ) ;\n    }\n    m ++ ;\n  }\n}", "target_program": " def pythagoreanTriplets ( limits ) :\n    c , m = 0 , 2\n    while c < limits :\n        for n in range ( 1 , m ) :\n            a = m * m - n * n\n            b = 2 * m * n\n            c = m * m + n * n\n            if c > limits :\n                break\n            print ( a , b , c )\n        m = m + 1"}
{"source": "java", "target": "cpp", "source_program": " static void pythagoreanTriplets ( int limit ) {\n  int a , b , c = 0 ;\n  int m = 2 ;\n  while ( c < limit ) {\n    for ( int n = 1 ;\n    n < m ;\n    ++ n ) {\n      a = m * m - n * n ;\n      b = 2 * m * n ;\n      c = m * m + n * n ;\n      if ( c > limit ) break ;\n      System . out . println ( a + \" \" + b + \" \" + c ) ;\n    }\n    m ++ ;\n  }\n}", "target_program": " void pythagoreanTriplets ( int limit ) {\n  int a, b, c = 0;\n  int m = 2;\n  while ( c < limit ) {\n    for ( int n = 1;\n    n < m;\n    ++ n ) {\n      a = m * m - n * n;\n      b = 2 * m * n;\n      c = m * m + n * n;\n      if ( c > limit ) break;\n      printf ( \"%d %d %d\\n\", a, b, c );\n    }\n    m ++;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void pythagoreanTriplets ( int limit ) {\n  int a, b, c = 0;\n  int m = 2;\n  while ( c < limit ) {\n    for ( int n = 1;\n    n < m;\n    ++ n ) {\n      a = m * m - n * n;\n      b = 2 * m * n;\n      c = m * m + n * n;\n      if ( c > limit ) break;\n      printf ( \"%d %d %d\\n\", a, b, c );\n    }\n    m ++;\n  }\n}", "target_program": " static void pythagoreanTriplets ( int limit ) {\n  int a , b , c = 0 ;\n  int m = 2 ;\n  while ( c < limit ) {\n    for ( int n = 1 ;\n    n < m ;\n    ++ n ) {\n      a = m * m - n * n ;\n      b = 2 * m * n ;\n      c = m * m + n * n ;\n      if ( c > limit ) break ;\n      System . out . println ( a + \" \" + b + \" \" + c ) ;\n    }\n    m ++ ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void pythagoreanTriplets ( int limit ) {\n  int a, b, c = 0;\n  int m = 2;\n  while ( c < limit ) {\n    for ( int n = 1;\n    n < m;\n    ++ n ) {\n      a = m * m - n * n;\n      b = 2 * m * n;\n      c = m * m + n * n;\n      if ( c > limit ) break;\n      printf ( \"%d %d %d\\n\", a, b, c );\n    }\n    m ++;\n  }\n}", "target_program": " def pythagoreanTriplets ( limits ) :\n    c , m = 0 , 2\n    while c < limits :\n        for n in range ( 1 , m ) :\n            a = m * m - n * n\n            b = 2 * m * n\n            c = m * m + n * n\n            if c > limits :\n                break\n            print ( a , b , c )\n        m = m + 1"}
{"source": "python", "target": "java", "source_program": " def countSeq ( n , diff ) :\n    if ( abs ( diff ) > n ) :\n        return 0\n    if ( n == 1 and diff == 0 ) :\n        return 2\n    if ( n == 1 and abs ( diff ) == 1 ) :\n        return 1\n    res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) )\n    return res", "target_program": " static int countSeq ( int n , int diff ) {\n  if ( Math . abs ( diff ) > n ) return 0 ;\n  if ( n == 1 && diff == 0 ) return 2 ;\n  if ( n == 1 && Math . abs ( diff ) == 1 ) return 1 ;\n  int res = countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSeq ( n , diff ) :\n    if ( abs ( diff ) > n ) :\n        return 0\n    if ( n == 1 and diff == 0 ) :\n        return 2\n    if ( n == 1 and abs ( diff ) == 1 ) :\n        return 1\n    res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) )\n    return res", "target_program": " int countSeq ( int n, int diff ) {\n  if ( abs ( diff ) > n ) return 0;\n  if ( n == 1 && diff == 0 ) return 2;\n  if ( n == 1 && abs ( diff ) == 1 ) return 1;\n  int res = countSeq ( n - 1, diff + 1 ) + 2 * countSeq ( n - 1, diff ) + countSeq ( n - 1, diff - 1 );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSeq ( int n , int diff ) {\n  if ( Math . abs ( diff ) > n ) return 0 ;\n  if ( n == 1 && diff == 0 ) return 2 ;\n  if ( n == 1 && Math . abs ( diff ) == 1 ) return 1 ;\n  int res = countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) ;\n  return res ;\n}", "target_program": " def countSeq ( n , diff ) :\n    if ( abs ( diff ) > n ) :\n        return 0\n    if ( n == 1 and diff == 0 ) :\n        return 2\n    if ( n == 1 and abs ( diff ) == 1 ) :\n        return 1\n    res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countSeq ( int n , int diff ) {\n  if ( Math . abs ( diff ) > n ) return 0 ;\n  if ( n == 1 && diff == 0 ) return 2 ;\n  if ( n == 1 && Math . abs ( diff ) == 1 ) return 1 ;\n  int res = countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) ;\n  return res ;\n}", "target_program": " int countSeq ( int n, int diff ) {\n  if ( abs ( diff ) > n ) return 0;\n  if ( n == 1 && diff == 0 ) return 2;\n  if ( n == 1 && abs ( diff ) == 1 ) return 1;\n  int res = countSeq ( n - 1, diff + 1 ) + 2 * countSeq ( n - 1, diff ) + countSeq ( n - 1, diff - 1 );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSeq ( int n, int diff ) {\n  if ( abs ( diff ) > n ) return 0;\n  if ( n == 1 && diff == 0 ) return 2;\n  if ( n == 1 && abs ( diff ) == 1 ) return 1;\n  int res = countSeq ( n - 1, diff + 1 ) + 2 * countSeq ( n - 1, diff ) + countSeq ( n - 1, diff - 1 );\n  return res;\n}", "target_program": " static int countSeq ( int n , int diff ) {\n  if ( Math . abs ( diff ) > n ) return 0 ;\n  if ( n == 1 && diff == 0 ) return 2 ;\n  if ( n == 1 && Math . abs ( diff ) == 1 ) return 1 ;\n  int res = countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSeq ( int n, int diff ) {\n  if ( abs ( diff ) > n ) return 0;\n  if ( n == 1 && diff == 0 ) return 2;\n  if ( n == 1 && abs ( diff ) == 1 ) return 1;\n  int res = countSeq ( n - 1, diff + 1 ) + 2 * countSeq ( n - 1, diff ) + countSeq ( n - 1, diff - 1 );\n  return res;\n}", "target_program": " def countSeq ( n , diff ) :\n    if ( abs ( diff ) > n ) :\n        return 0\n    if ( n == 1 and diff == 0 ) :\n        return 2\n    if ( n == 1 and abs ( diff ) == 1 ) :\n        return 1\n    res = ( countSeq ( n - 1 , diff + 1 ) + 2 * countSeq ( n - 1 , diff ) + countSeq ( n - 1 , diff - 1 ) )\n    return res"}
{"source": "python", "target": "java", "source_program": " def isPossibleTriangle ( arr , N ) :\n    if N < 3 :\n        return False\n    arr.sort ( )\n    for i in range ( N - 2 ) :\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :\n            return True", "target_program": " static boolean isPossibleTriangle ( int [ ] arr , int N ) {\n  if ( N < 3 ) return false ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < N - 2 ;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPossibleTriangle ( arr , N ) :\n    if N < 3 :\n        return False\n    arr.sort ( )\n    for i in range ( N - 2 ) :\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :\n            return True", "target_program": " bool isPossibleTriangle ( int arr [ ], int N ) {\n  if ( N < 3 ) return false;\n  sort ( arr, arr + N );\n  for ( int i = 0;\n  i < N - 2;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPossibleTriangle ( int [ ] arr , int N ) {\n  if ( N < 3 ) return false ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < N - 2 ;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ;\n  return false ;\n}", "target_program": " def isPossibleTriangle ( arr , N ) :\n    if N < 3 :\n        return False\n    arr.sort ( )\n    for i in range ( N - 2 ) :\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :\n            return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPossibleTriangle ( int [ ] arr , int N ) {\n  if ( N < 3 ) return false ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < N - 2 ;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ;\n  return false ;\n}", "target_program": " bool isPossibleTriangle ( int arr [ ], int N ) {\n  if ( N < 3 ) return false;\n  sort ( arr, arr + N );\n  for ( int i = 0;\n  i < N - 2;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPossibleTriangle ( int arr [ ], int N ) {\n  if ( N < 3 ) return false;\n  sort ( arr, arr + N );\n  for ( int i = 0;\n  i < N - 2;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true;\n}", "target_program": " static boolean isPossibleTriangle ( int [ ] arr , int N ) {\n  if ( N < 3 ) return false ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < N - 2 ;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPossibleTriangle ( int arr [ ], int N ) {\n  if ( N < 3 ) return false;\n  sort ( arr, arr + N );\n  for ( int i = 0;\n  i < N - 2;\n  i ++ ) if ( arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] ) return true;\n}", "target_program": " def isPossibleTriangle ( arr , N ) :\n    if N < 3 :\n        return False\n    arr.sort ( )\n    for i in range ( N - 2 ) :\n        if arr [ i ] + arr [ i + 1 ] > arr [ i + 2 ] :\n            return True"}
{"source": "python", "target": "java", "source_program": " def printInSortedOrder ( arr , n ) :\n    index = [ 0 ] * n\n    for i in range ( n ) :\n        index [ i ] = i\n    for i in range ( n - 1 ) :\n        min = i\n        for j in range ( i + 1 , n ) :\n            if ( arr [ index [ min ] ] > arr [ index [ j ] ] ) :\n                min = j\n        if ( min != i ) :\n            index [ min ] , index [ i ] = index [ i ] , index [ min ]\n    for i in range ( n ) :\n        print ( arr [ index [ i ] ] , end = \" \" )", "target_program": " static void printInSortedOrder ( String arr [ ] , int n ) {\n  int index [ ] = new int [ n ] ;\n  int i , j , min ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    index [ i ] = i ;\n  }\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    min = i ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compareTo ( arr [ index [ j ] ] ) > 0 ) {\n        min = j ;\n      }\n    }\n    if ( min != i ) {\n      int temp = index [ min ] ;\n      index [ min ] = index [ i ] ;\n      index [ i ] = temp ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( arr [ index [ i ] ] + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printInSortedOrder ( arr , n ) :\n    index = [ 0 ] * n\n    for i in range ( n ) :\n        index [ i ] = i\n    for i in range ( n - 1 ) :\n        min = i\n        for j in range ( i + 1 , n ) :\n            if ( arr [ index [ min ] ] > arr [ index [ j ] ] ) :\n                min = j\n        if ( min != i ) :\n            index [ min ] , index [ i ] = index [ i ] , index [ min ]\n    for i in range ( n ) :\n        print ( arr [ index [ i ] ] , end = \" \" )", "target_program": " void printInSortedOrder ( string arr [ ], int n ) {\n  int index [ n ];\n  int i, j, min;\n  for ( i = 0;\n  i < n;\n  i ++ ) index [ i ] = i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    min = i;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compare ( arr [ index [ j ] ] ) > 0 ) min = j;\n    }\n    if ( min != i ) {\n      int temp = index [ min ];\n      index [ min ] = index [ i ];\n      index [ i ] = temp;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << arr [ index [ i ] ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void printInSortedOrder ( String arr [ ] , int n ) {\n  int index [ ] = new int [ n ] ;\n  int i , j , min ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    index [ i ] = i ;\n  }\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    min = i ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compareTo ( arr [ index [ j ] ] ) > 0 ) {\n        min = j ;\n      }\n    }\n    if ( min != i ) {\n      int temp = index [ min ] ;\n      index [ min ] = index [ i ] ;\n      index [ i ] = temp ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( arr [ index [ i ] ] + \" \" ) ;\n  }\n}", "target_program": " def printInSortedOrder ( arr , n ) :\n    index = [ 0 ] * n\n    for i in range ( n ) :\n        index [ i ] = i\n    for i in range ( n - 1 ) :\n        min = i\n        for j in range ( i + 1 , n ) :\n            if ( arr [ index [ min ] ] > arr [ index [ j ] ] ) :\n                min = j\n        if ( min != i ) :\n            index [ min ] , index [ i ] = index [ i ] , index [ min ]\n    for i in range ( n ) :\n        print ( arr [ index [ i ] ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void printInSortedOrder ( String arr [ ] , int n ) {\n  int index [ ] = new int [ n ] ;\n  int i , j , min ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    index [ i ] = i ;\n  }\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    min = i ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compareTo ( arr [ index [ j ] ] ) > 0 ) {\n        min = j ;\n      }\n    }\n    if ( min != i ) {\n      int temp = index [ min ] ;\n      index [ min ] = index [ i ] ;\n      index [ i ] = temp ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( arr [ index [ i ] ] + \" \" ) ;\n  }\n}", "target_program": " void printInSortedOrder ( string arr [ ], int n ) {\n  int index [ n ];\n  int i, j, min;\n  for ( i = 0;\n  i < n;\n  i ++ ) index [ i ] = i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    min = i;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compare ( arr [ index [ j ] ] ) > 0 ) min = j;\n    }\n    if ( min != i ) {\n      int temp = index [ min ];\n      index [ min ] = index [ i ];\n      index [ i ] = temp;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << arr [ index [ i ] ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void printInSortedOrder ( string arr [ ], int n ) {\n  int index [ n ];\n  int i, j, min;\n  for ( i = 0;\n  i < n;\n  i ++ ) index [ i ] = i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    min = i;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compare ( arr [ index [ j ] ] ) > 0 ) min = j;\n    }\n    if ( min != i ) {\n      int temp = index [ min ];\n      index [ min ] = index [ i ];\n      index [ i ] = temp;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << arr [ index [ i ] ] << \" \";\n}", "target_program": " static void printInSortedOrder ( String arr [ ] , int n ) {\n  int index [ ] = new int [ n ] ;\n  int i , j , min ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    index [ i ] = i ;\n  }\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    min = i ;\n    for ( j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compareTo ( arr [ index [ j ] ] ) > 0 ) {\n        min = j ;\n      }\n    }\n    if ( min != i ) {\n      int temp = index [ min ] ;\n      index [ min ] = index [ i ] ;\n      index [ i ] = temp ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( arr [ index [ i ] ] + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printInSortedOrder ( string arr [ ], int n ) {\n  int index [ n ];\n  int i, j, min;\n  for ( i = 0;\n  i < n;\n  i ++ ) index [ i ] = i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) {\n    min = i;\n    for ( j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( arr [ index [ min ] ] . compare ( arr [ index [ j ] ] ) > 0 ) min = j;\n    }\n    if ( min != i ) {\n      int temp = index [ min ];\n      index [ min ] = index [ i ];\n      index [ i ] = temp;\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) cout << arr [ index [ i ] ] << \" \";\n}", "target_program": " def printInSortedOrder ( arr , n ) :\n    index = [ 0 ] * n\n    for i in range ( n ) :\n        index [ i ] = i\n    for i in range ( n - 1 ) :\n        min = i\n        for j in range ( i + 1 , n ) :\n            if ( arr [ index [ min ] ] > arr [ index [ j ] ] ) :\n                min = j\n        if ( min != i ) :\n            index [ min ] , index [ i ] = index [ i ] , index [ min ]\n    for i in range ( n ) :\n        print ( arr [ index [ i ] ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def playGame ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        s.add ( arr [ i ] )\n    return 1 if len ( s ) % 2 == 0 else 2", "target_program": " public static int playGame ( int arr [ ] ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i : arr ) set . add ( i ) ;\n  return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def playGame ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        s.add ( arr [ i ] )\n    return 1 if len ( s ) % 2 == 0 else 2", "target_program": " int playGame ( int arr [ ], int n ) {\n  unordered_set < int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash . insert ( arr [ i ] );\n  return ( hash . size ( ) % 2 == 0 ? 1 : 2 );\n}"}
{"source": "java", "target": "python", "source_program": " public static int playGame ( int arr [ ] ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i : arr ) set . add ( i ) ;\n  return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;\n}", "target_program": " def playGame ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        s.add ( arr [ i ] )\n    return 1 if len ( s ) % 2 == 0 else 2"}
{"source": "java", "target": "cpp", "source_program": " public static int playGame ( int arr [ ] ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i : arr ) set . add ( i ) ;\n  return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;\n}", "target_program": " int playGame ( int arr [ ], int n ) {\n  unordered_set < int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash . insert ( arr [ i ] );\n  return ( hash . size ( ) % 2 == 0 ? 1 : 2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int playGame ( int arr [ ], int n ) {\n  unordered_set < int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash . insert ( arr [ i ] );\n  return ( hash . size ( ) % 2 == 0 ? 1 : 2 );\n}", "target_program": " public static int playGame ( int arr [ ] ) {\n  HashSet < Integer > set = new HashSet < > ( ) ;\n  for ( int i : arr ) set . add ( i ) ;\n  return ( set . size ( ) % 2 == 0 ) ? 1 : 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int playGame ( int arr [ ], int n ) {\n  unordered_set < int > hash;\n  for ( int i = 0;\n  i < n;\n  i ++ ) hash . insert ( arr [ i ] );\n  return ( hash . size ( ) % 2 == 0 ? 1 : 2 );\n}", "target_program": " def playGame ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        s.add ( arr [ i ] )\n    return 1 if len ( s ) % 2 == 0 else 2"}
{"source": "python", "target": "java", "source_program": " def gcd ( a , b ) :\n    if a == 0 :\n        return b\n    return gcd ( b % a , a )", "target_program": " public static int gcd ( int a , int b ) {\n  if ( a == 0 ) return b ;\n  return gcd ( b % a , a ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def gcd ( a , b ) :\n    if a == 0 :\n        return b\n    return gcd ( b % a , a )", "target_program": " int gcd ( int a, int b ) {\n  if ( a == 0 ) return b;\n  return gcd ( b % a, a );\n}"}
{"source": "java", "target": "python", "source_program": " public static int gcd ( int a , int b ) {\n  if ( a == 0 ) return b ;\n  return gcd ( b % a , a ) ;\n}", "target_program": " def gcd ( a , b ) :\n    if a == 0 :\n        return b\n    return gcd ( b % a , a )"}
{"source": "java", "target": "cpp", "source_program": " public static int gcd ( int a , int b ) {\n  if ( a == 0 ) return b ;\n  return gcd ( b % a , a ) ;\n}", "target_program": " int gcd ( int a, int b ) {\n  if ( a == 0 ) return b;\n  return gcd ( b % a, a );\n}"}
{"source": "cpp", "target": "java", "source_program": " int gcd ( int a, int b ) {\n  if ( a == 0 ) return b;\n  return gcd ( b % a, a );\n}", "target_program": " public static int gcd ( int a , int b ) {\n  if ( a == 0 ) return b ;\n  return gcd ( b % a , a ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int gcd ( int a, int b ) {\n  if ( a == 0 ) return b;\n  return gcd ( b % a, a );\n}", "target_program": " def gcd ( a , b ) :\n    if a == 0 :\n        return b\n    return gcd ( b % a , a )"}
{"source": "python", "target": "java", "source_program": " def sortInWave ( arr , n ) :\n    for i in range ( 0 , n , 2 ) :\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]", "target_program": " void sortInWave ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( arr , i - 1 , i ) ;\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( arr , i , i + 1 ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def sortInWave ( arr , n ) :\n    for i in range ( 0 , n , 2 ) :\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]", "target_program": " void sortInWave ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( & arr [ i ], & arr [ i - 1 ] );\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( & arr [ i ], & arr [ i + 1 ] );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " void sortInWave ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( arr , i - 1 , i ) ;\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( arr , i , i + 1 ) ;\n  }\n}", "target_program": " def sortInWave ( arr , n ) :\n    for i in range ( 0 , n , 2 ) :\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]"}
{"source": "java", "target": "cpp", "source_program": " void sortInWave ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( arr , i - 1 , i ) ;\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( arr , i , i + 1 ) ;\n  }\n}", "target_program": " void sortInWave ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( & arr [ i ], & arr [ i - 1 ] );\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( & arr [ i ], & arr [ i + 1 ] );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void sortInWave ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( & arr [ i ], & arr [ i - 1 ] );\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( & arr [ i ], & arr [ i + 1 ] );\n  }\n}", "target_program": " void sortInWave ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( arr , i - 1 , i ) ;\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( arr , i , i + 1 ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void sortInWave ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i += 2 ) {\n    if ( i > 0 && arr [ i - 1 ] > arr [ i ] ) swap ( & arr [ i ], & arr [ i - 1 ] );\n    if ( i < n - 1 && arr [ i ] < arr [ i + 1 ] ) swap ( & arr [ i ], & arr [ i + 1 ] );\n  }\n}", "target_program": " def sortInWave ( arr , n ) :\n    for i in range ( 0 , n , 2 ) :\n        if ( i > 0 and arr [ i ] < arr [ i - 1 ] ) :\n            arr [ i ] , arr [ i - 1 ] = arr [ i - 1 ] , arr [ i ]\n        if ( i < n - 1 and arr [ i ] < arr [ i + 1 ] ) :\n            arr [ i ] , arr [ i + 1 ] = arr [ i + 1 ] , arr [ i ]"}
{"source": "python", "target": "java", "source_program": " def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = 0\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ] )\n    for i in range ( n ) :\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n    return res", "target_program": " static int maximumSumSubarray ( int arr [ ] , int n ) {\n  int min_prefix_sum = 0 ;\n  int res = Integer . MIN_VALUE ;\n  int prefix_sum [ ] = new int [ n ] ;\n  prefix_sum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res = Math . max ( res , prefix_sum [ i ] - min_prefix_sum ) ;\n    min_prefix_sum = Math . min ( min_prefix_sum , prefix_sum [ i ] ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = 0\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ] )\n    for i in range ( n ) :\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n    return res", "target_program": " int maximumSumSubarray ( int arr [ ], int n ) {\n  int min_prefix_sum = 0;\n  int res = numeric_limits < int > :: min ( );\n  int prefix_sum [ n ];\n  prefix_sum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    res = max ( res, prefix_sum [ i ] - min_prefix_sum );\n    min_prefix_sum = min ( min_prefix_sum, prefix_sum [ i ] );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumSumSubarray ( int arr [ ] , int n ) {\n  int min_prefix_sum = 0 ;\n  int res = Integer . MIN_VALUE ;\n  int prefix_sum [ ] = new int [ n ] ;\n  prefix_sum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res = Math . max ( res , prefix_sum [ i ] - min_prefix_sum ) ;\n    min_prefix_sum = Math . min ( min_prefix_sum , prefix_sum [ i ] ) ;\n  }\n  return res ;\n}", "target_program": " def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = 0\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ] )\n    for i in range ( n ) :\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int maximumSumSubarray ( int arr [ ] , int n ) {\n  int min_prefix_sum = 0 ;\n  int res = Integer . MIN_VALUE ;\n  int prefix_sum [ ] = new int [ n ] ;\n  prefix_sum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res = Math . max ( res , prefix_sum [ i ] - min_prefix_sum ) ;\n    min_prefix_sum = Math . min ( min_prefix_sum , prefix_sum [ i ] ) ;\n  }\n  return res ;\n}", "target_program": " int maximumSumSubarray ( int arr [ ], int n ) {\n  int min_prefix_sum = 0;\n  int res = numeric_limits < int > :: min ( );\n  int prefix_sum [ n ];\n  prefix_sum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    res = max ( res, prefix_sum [ i ] - min_prefix_sum );\n    min_prefix_sum = min ( min_prefix_sum, prefix_sum [ i ] );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumSumSubarray ( int arr [ ], int n ) {\n  int min_prefix_sum = 0;\n  int res = numeric_limits < int > :: min ( );\n  int prefix_sum [ n ];\n  prefix_sum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    res = max ( res, prefix_sum [ i ] - min_prefix_sum );\n    min_prefix_sum = min ( min_prefix_sum, prefix_sum [ i ] );\n  }\n  return res;\n}", "target_program": " static int maximumSumSubarray ( int arr [ ] , int n ) {\n  int min_prefix_sum = 0 ;\n  int res = Integer . MIN_VALUE ;\n  int prefix_sum [ ] = new int [ n ] ;\n  prefix_sum [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    res = Math . max ( res , prefix_sum [ i ] - min_prefix_sum ) ;\n    min_prefix_sum = Math . min ( min_prefix_sum , prefix_sum [ i ] ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumSumSubarray ( int arr [ ], int n ) {\n  int min_prefix_sum = 0;\n  int res = numeric_limits < int > :: min ( );\n  int prefix_sum [ n ];\n  prefix_sum [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) prefix_sum [ i ] = prefix_sum [ i - 1 ] + arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    res = max ( res, prefix_sum [ i ] - min_prefix_sum );\n    min_prefix_sum = min ( min_prefix_sum, prefix_sum [ i ] );\n  }\n  return res;\n}", "target_program": " def maximumSumSubarray ( arr , n ) :\n    min_prefix_sum = 0\n    res = - math.inf\n    prefix_sum = [ ]\n    prefix_sum.append ( arr [ 0 ] )\n    for i in range ( 1 , n ) :\n        prefix_sum.append ( prefix_sum [ i - 1 ] + arr [ i ] )\n    for i in range ( n ) :\n        res = max ( res , prefix_sum [ i ] - min_prefix_sum )\n        min_prefix_sum = min ( min_prefix_sum , prefix_sum [ i ] )\n    return res"}
{"source": "python", "target": "java", "source_program": " def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    for i in range ( len ( str ) ) :\n        if ( str [ i ] == ' ' ) :\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n    return result", "target_program": " static String firstLetterWord ( String str ) {\n  String result = \"\" ;\n  boolean v = true ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) {\n    if ( str . charAt ( i ) == ' ' ) {\n      v = true ;\n    }\n    else if ( str . charAt ( i ) != ' ' && v == true ) {\n      result += ( str . charAt ( i ) ) ;\n      v = false ;\n    }\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    for i in range ( len ( str ) ) :\n        if ( str [ i ] == ' ' ) :\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n    return result", "target_program": " string firstLetterWord ( string str ) {\n  string result = \"\";\n  bool v = true;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) {\n    if ( str [ i ] == ' ' ) v = true;\n    else if ( str [ i ] != ' ' && v == true ) {\n      result . push_back ( str [ i ] );\n      v = false;\n    }\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static String firstLetterWord ( String str ) {\n  String result = \"\" ;\n  boolean v = true ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) {\n    if ( str . charAt ( i ) == ' ' ) {\n      v = true ;\n    }\n    else if ( str . charAt ( i ) != ' ' && v == true ) {\n      result += ( str . charAt ( i ) ) ;\n      v = false ;\n    }\n  }\n  return result ;\n}", "target_program": " def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    for i in range ( len ( str ) ) :\n        if ( str [ i ] == ' ' ) :\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static String firstLetterWord ( String str ) {\n  String result = \"\" ;\n  boolean v = true ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) {\n    if ( str . charAt ( i ) == ' ' ) {\n      v = true ;\n    }\n    else if ( str . charAt ( i ) != ' ' && v == true ) {\n      result += ( str . charAt ( i ) ) ;\n      v = false ;\n    }\n  }\n  return result ;\n}", "target_program": " string firstLetterWord ( string str ) {\n  string result = \"\";\n  bool v = true;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) {\n    if ( str [ i ] == ' ' ) v = true;\n    else if ( str [ i ] != ' ' && v == true ) {\n      result . push_back ( str [ i ] );\n      v = false;\n    }\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " string firstLetterWord ( string str ) {\n  string result = \"\";\n  bool v = true;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) {\n    if ( str [ i ] == ' ' ) v = true;\n    else if ( str [ i ] != ' ' && v == true ) {\n      result . push_back ( str [ i ] );\n      v = false;\n    }\n  }\n  return result;\n}", "target_program": " static String firstLetterWord ( String str ) {\n  String result = \"\" ;\n  boolean v = true ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  i ++ ) {\n    if ( str . charAt ( i ) == ' ' ) {\n      v = true ;\n    }\n    else if ( str . charAt ( i ) != ' ' && v == true ) {\n      result += ( str . charAt ( i ) ) ;\n      v = false ;\n    }\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string firstLetterWord ( string str ) {\n  string result = \"\";\n  bool v = true;\n  for ( int i = 0;\n  i < str . length ( );\n  i ++ ) {\n    if ( str [ i ] == ' ' ) v = true;\n    else if ( str [ i ] != ' ' && v == true ) {\n      result . push_back ( str [ i ] );\n      v = false;\n    }\n  }\n  return result;\n}", "target_program": " def firstLetterWord ( str ) :\n    result = \"\"\n    v = True\n    for i in range ( len ( str ) ) :\n        if ( str [ i ] == ' ' ) :\n            v = True\n        elif ( str [ i ] != ' ' and v == True ) :\n            result += ( str [ i ] )\n            v = False\n    return result"}
{"source": "python", "target": "java", "source_program": " def findSum ( n ) :\n    multiTerms = n * ( n + 1 ) // 2\n    sm = multiTerms\n    for i in range ( 2 , n + 1 ) :\n        multiTerms = multiTerms - ( i - 1 )\n        sm = sm + multiTerms * i\n    return sm", "target_program": " static int findSum ( int n ) {\n  int multiTerms = n * ( n + 1 ) / 2 ;\n  int sum = multiTerms ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 ) ;\n    sum = sum + multiTerms * i ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSum ( n ) :\n    multiTerms = n * ( n + 1 ) // 2\n    sm = multiTerms\n    for i in range ( 2 , n + 1 ) :\n        multiTerms = multiTerms - ( i - 1 )\n        sm = sm + multiTerms * i\n    return sm", "target_program": " long long int findSum ( int n ) {\n  long long int multiTerms = n * ( n + 1 ) / 2;\n  long long int sum = multiTerms;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 );\n    sum = sum + multiTerms * i;\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int findSum ( int n ) {\n  int multiTerms = n * ( n + 1 ) / 2 ;\n  int sum = multiTerms ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 ) ;\n    sum = sum + multiTerms * i ;\n  }\n  return sum ;\n}", "target_program": " def findSum ( n ) :\n    multiTerms = n * ( n + 1 ) // 2\n    sm = multiTerms\n    for i in range ( 2 , n + 1 ) :\n        multiTerms = multiTerms - ( i - 1 )\n        sm = sm + multiTerms * i\n    return sm"}
{"source": "java", "target": "cpp", "source_program": " static int findSum ( int n ) {\n  int multiTerms = n * ( n + 1 ) / 2 ;\n  int sum = multiTerms ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 ) ;\n    sum = sum + multiTerms * i ;\n  }\n  return sum ;\n}", "target_program": " long long int findSum ( int n ) {\n  long long int multiTerms = n * ( n + 1 ) / 2;\n  long long int sum = multiTerms;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 );\n    sum = sum + multiTerms * i;\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int findSum ( int n ) {\n  long long int multiTerms = n * ( n + 1 ) / 2;\n  long long int sum = multiTerms;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 );\n    sum = sum + multiTerms * i;\n  }\n  return sum;\n}", "target_program": " static int findSum ( int n ) {\n  int multiTerms = n * ( n + 1 ) / 2 ;\n  int sum = multiTerms ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 ) ;\n    sum = sum + multiTerms * i ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int findSum ( int n ) {\n  long long int multiTerms = n * ( n + 1 ) / 2;\n  long long int sum = multiTerms;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    multiTerms = multiTerms - ( i - 1 );\n    sum = sum + multiTerms * i;\n  }\n  return sum;\n}", "target_program": " def findSum ( n ) :\n    multiTerms = n * ( n + 1 ) // 2\n    sm = multiTerms\n    for i in range ( 2 , n + 1 ) :\n        multiTerms = multiTerms - ( i - 1 )\n        sm = sm + multiTerms * i\n    return sm"}
{"source": "python", "target": "java", "source_program": " def minCost ( a , n , k ) :\n    dp = [ [ inf for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] ;\n    dp [ 0 ] [ 0 ] = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , k + 1 ) :\n            for m in range ( i - 1 , - 1 , - 1 ) :\n                dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n    return dp [ n ] [ k ] ;", "target_program": " static int minCost ( int a [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= k ;\n  j ++ ) dp [ i ] [ j ] = inf ;\n  dp [ 0 ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= k ;\n  j ++ ) for ( int m = i - 1 ;\n  m >= 0 ;\n  m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n  return dp [ n ] [ k ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minCost ( a , n , k ) :\n    dp = [ [ inf for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] ;\n    dp [ 0 ] [ 0 ] = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , k + 1 ) :\n            for m in range ( i - 1 , - 1 , - 1 ) :\n                dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n    return dp [ n ] [ k ] ;", "target_program": " int minCost ( int a [ ], int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= k;\n  j ++ ) dp [ i ] [ j ] = inf;\n  dp [ 0 ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= k;\n  j ++ ) for ( int m = i - 1;\n  m >= 0;\n  m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ], dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) );\n  return dp [ n ] [ k ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minCost ( int a [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= k ;\n  j ++ ) dp [ i ] [ j ] = inf ;\n  dp [ 0 ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= k ;\n  j ++ ) for ( int m = i - 1 ;\n  m >= 0 ;\n  m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n  return dp [ n ] [ k ] ;\n}", "target_program": " def minCost ( a , n , k ) :\n    dp = [ [ inf for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] ;\n    dp [ 0 ] [ 0 ] = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , k + 1 ) :\n            for m in range ( i - 1 , - 1 , - 1 ) :\n                dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n    return dp [ n ] [ k ] ;"}
{"source": "java", "target": "cpp", "source_program": " static int minCost ( int a [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= k ;\n  j ++ ) dp [ i ] [ j ] = inf ;\n  dp [ 0 ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= k ;\n  j ++ ) for ( int m = i - 1 ;\n  m >= 0 ;\n  m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n  return dp [ n ] [ k ] ;\n}", "target_program": " int minCost ( int a [ ], int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= k;\n  j ++ ) dp [ i ] [ j ] = inf;\n  dp [ 0 ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= k;\n  j ++ ) for ( int m = i - 1;\n  m >= 0;\n  m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ], dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) );\n  return dp [ n ] [ k ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minCost ( int a [ ], int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= k;\n  j ++ ) dp [ i ] [ j ] = inf;\n  dp [ 0 ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= k;\n  j ++ ) for ( int m = i - 1;\n  m >= 0;\n  m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ], dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) );\n  return dp [ n ] [ k ];\n}", "target_program": " static int minCost ( int a [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ n + 1 ] [ k + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= k ;\n  j ++ ) dp [ i ] [ j ] = inf ;\n  dp [ 0 ] [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= k ;\n  j ++ ) for ( int m = i - 1 ;\n  m >= 0 ;\n  m -- ) dp [ i ] [ j ] = Math . min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n  return dp [ n ] [ k ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minCost ( int a [ ], int n, int k ) {\n  int dp [ n + 1 ] [ k + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= k;\n  j ++ ) dp [ i ] [ j ] = inf;\n  dp [ 0 ] [ 0 ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= k;\n  j ++ ) for ( int m = i - 1;\n  m >= 0;\n  m -- ) dp [ i ] [ j ] = min ( dp [ i ] [ j ], dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) );\n  return dp [ n ] [ k ];\n}", "target_program": " def minCost ( a , n , k ) :\n    dp = [ [ inf for i in range ( k + 1 ) ] for j in range ( n + 1 ) ] ;\n    dp [ 0 ] [ 0 ] = 0 ;\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , k + 1 ) :\n            for m in range ( i - 1 , - 1 , - 1 ) :\n                dp [ i ] [ j ] = min ( dp [ i ] [ j ] , dp [ m ] [ j - 1 ] + ( a [ i - 1 ] - a [ m ] ) * ( a [ i - 1 ] - a [ m ] ) ) ;\n    return dp [ n ] [ k ] ;"}
{"source": "python", "target": "java", "source_program": " def findMinSum ( a , b , n ) :\n    a.sort ( )\n    b.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum = sum + abs ( a [ i ] - b [ i ] )\n    return sum", "target_program": " static long findMinSum ( long a [ ] , long b [ ] , long n ) {\n  Arrays . sort ( a ) ;\n  Arrays . sort ( b ) ;\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMinSum ( a , b , n ) :\n    a.sort ( )\n    b.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum = sum + abs ( a [ i ] - b [ i ] )\n    return sum", "target_program": " long long int findMinSum ( int a [ ], int b [ ], int n ) {\n  sort ( a, a + n );\n  sort ( b, b + n );\n  long long int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum = sum + abs ( a [ i ] - b [ i ] );\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static long findMinSum ( long a [ ] , long b [ ] , long n ) {\n  Arrays . sort ( a ) ;\n  Arrays . sort ( b ) ;\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;\n  return sum ;\n}", "target_program": " def findMinSum ( a , b , n ) :\n    a.sort ( )\n    b.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum = sum + abs ( a [ i ] - b [ i ] )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static long findMinSum ( long a [ ] , long b [ ] , long n ) {\n  Arrays . sort ( a ) ;\n  Arrays . sort ( b ) ;\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;\n  return sum ;\n}", "target_program": " long long int findMinSum ( int a [ ], int b [ ], int n ) {\n  sort ( a, a + n );\n  sort ( b, b + n );\n  long long int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum = sum + abs ( a [ i ] - b [ i ] );\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int findMinSum ( int a [ ], int b [ ], int n ) {\n  sort ( a, a + n );\n  sort ( b, b + n );\n  long long int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum = sum + abs ( a [ i ] - b [ i ] );\n  return sum;\n}", "target_program": " static long findMinSum ( long a [ ] , long b [ ] , long n ) {\n  Arrays . sort ( a ) ;\n  Arrays . sort ( b ) ;\n  long sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum = sum + Math . abs ( a [ i ] - b [ i ] ) ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int findMinSum ( int a [ ], int b [ ], int n ) {\n  sort ( a, a + n );\n  sort ( b, b + n );\n  long long int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum = sum + abs ( a [ i ] - b [ i ] );\n  return sum;\n}", "target_program": " def findMinSum ( a , b , n ) :\n    a.sort ( )\n    b.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum = sum + abs ( a [ i ] - b [ i ] )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def countSolutions ( n ) :\n    res = 0\n    x = 0\n    while ( x * x < n ) :\n        y = 0\n        while ( x * x + y * y < n ) :\n            res = res + 1\n            y = y + 1\n        x = x + 1\n    return res", "target_program": " static int countSolutions ( int n ) {\n  int res = 0 ;\n  for ( int x = 0 ;\n  x * x < n ;\n  x ++ ) for ( int y = 0 ;\n  x * x + y * y < n ;\n  y ++ ) res ++ ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSolutions ( n ) :\n    res = 0\n    x = 0\n    while ( x * x < n ) :\n        y = 0\n        while ( x * x + y * y < n ) :\n            res = res + 1\n            y = y + 1\n        x = x + 1\n    return res", "target_program": " int countSolutions ( int n ) {\n  int res = 0;\n  for ( int x = 0;\n  x * x < n;\n  x ++ ) for ( int y = 0;\n  x * x + y * y < n;\n  y ++ ) res ++;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSolutions ( int n ) {\n  int res = 0 ;\n  for ( int x = 0 ;\n  x * x < n ;\n  x ++ ) for ( int y = 0 ;\n  x * x + y * y < n ;\n  y ++ ) res ++ ;\n  return res ;\n}", "target_program": " def countSolutions ( n ) :\n    res = 0\n    x = 0\n    while ( x * x < n ) :\n        y = 0\n        while ( x * x + y * y < n ) :\n            res = res + 1\n            y = y + 1\n        x = x + 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countSolutions ( int n ) {\n  int res = 0 ;\n  for ( int x = 0 ;\n  x * x < n ;\n  x ++ ) for ( int y = 0 ;\n  x * x + y * y < n ;\n  y ++ ) res ++ ;\n  return res ;\n}", "target_program": " int countSolutions ( int n ) {\n  int res = 0;\n  for ( int x = 0;\n  x * x < n;\n  x ++ ) for ( int y = 0;\n  x * x + y * y < n;\n  y ++ ) res ++;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSolutions ( int n ) {\n  int res = 0;\n  for ( int x = 0;\n  x * x < n;\n  x ++ ) for ( int y = 0;\n  x * x + y * y < n;\n  y ++ ) res ++;\n  return res;\n}", "target_program": " static int countSolutions ( int n ) {\n  int res = 0 ;\n  for ( int x = 0 ;\n  x * x < n ;\n  x ++ ) for ( int y = 0 ;\n  x * x + y * y < n ;\n  y ++ ) res ++ ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSolutions ( int n ) {\n  int res = 0;\n  for ( int x = 0;\n  x * x < n;\n  x ++ ) for ( int y = 0;\n  x * x + y * y < n;\n  y ++ ) res ++;\n  return res;\n}", "target_program": " def countSolutions ( n ) :\n    res = 0\n    x = 0\n    while ( x * x < n ) :\n        y = 0\n        while ( x * x + y * y < n ) :\n            res = res + 1\n            y = y + 1\n        x = x + 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def countOps ( A , B , m , n ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            A [ i ] [ j ] -= B [ i ] [ j ] ;\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) :\n                return - 1 ;\n    result = 0 ;\n    for i in range ( n ) :\n        result += abs ( A [ i ] [ 0 ] ) ;\n    for j in range ( m ) :\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n    return ( result ) ;", "target_program": " static int countOps ( int A [ ] [ ] , int B [ ] [ ] , int m , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  j < m ;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n  return ( result ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countOps ( A , B , m , n ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            A [ i ] [ j ] -= B [ i ] [ j ] ;\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) :\n                return - 1 ;\n    result = 0 ;\n    for i in range ( n ) :\n        result += abs ( A [ i ] [ 0 ] ) ;\n    for j in range ( m ) :\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n    return ( result ) ;", "target_program": " int countOps ( int A [ ] [ MAX ], int B [ ] [ MAX ], int m, int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 1;\n  j < m;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1;\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) result += abs ( A [ i ] [ 0 ] );\n  for ( int j = 0;\n  j < m;\n  j ++ ) result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] );\n  return ( result );\n}"}
{"source": "java", "target": "python", "source_program": " static int countOps ( int A [ ] [ ] , int B [ ] [ ] , int m , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  j < m ;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n  return ( result ) ;\n}", "target_program": " def countOps ( A , B , m , n ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            A [ i ] [ j ] -= B [ i ] [ j ] ;\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) :\n                return - 1 ;\n    result = 0 ;\n    for i in range ( n ) :\n        result += abs ( A [ i ] [ 0 ] ) ;\n    for j in range ( m ) :\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n    return ( result ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int countOps ( int A [ ] [ ] , int B [ ] [ ] , int m , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  j < m ;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n  return ( result ) ;\n}", "target_program": " int countOps ( int A [ ] [ MAX ], int B [ ] [ MAX ], int m, int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 1;\n  j < m;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1;\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) result += abs ( A [ i ] [ 0 ] );\n  for ( int j = 0;\n  j < m;\n  j ++ ) result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] );\n  return ( result );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countOps ( int A [ ] [ MAX ], int B [ ] [ MAX ], int m, int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 1;\n  j < m;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1;\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) result += abs ( A [ i ] [ 0 ] );\n  for ( int j = 0;\n  j < m;\n  j ++ ) result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] );\n  return ( result );\n}", "target_program": " static int countOps ( int A [ ] [ ] , int B [ ] [ ] , int m , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = 0 ;\n  j < m ;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) for ( int j = 1 ;\n  j < m ;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1 ;\n  int result = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) result += Math . abs ( A [ i ] [ 0 ] ) ;\n  for ( int j = 0 ;\n  j < m ;\n  j ++ ) result += Math . abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n  return ( result ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countOps ( int A [ ] [ MAX ], int B [ ] [ MAX ], int m, int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) A [ i ] [ j ] -= B [ i ] [ j ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) for ( int j = 1;\n  j < m;\n  j ++ ) if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) return - 1;\n  int result = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) result += abs ( A [ i ] [ 0 ] );\n  for ( int j = 0;\n  j < m;\n  j ++ ) result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] );\n  return ( result );\n}", "target_program": " def countOps ( A , B , m , n ) :\n    for i in range ( n ) :\n        for j in range ( m ) :\n            A [ i ] [ j ] -= B [ i ] [ j ] ;\n    for i in range ( 1 , n ) :\n        for j in range ( 1 , n ) :\n            if ( A [ i ] [ j ] - A [ i ] [ 0 ] - A [ 0 ] [ j ] + A [ 0 ] [ 0 ] != 0 ) :\n                return - 1 ;\n    result = 0 ;\n    for i in range ( n ) :\n        result += abs ( A [ i ] [ 0 ] ) ;\n    for j in range ( m ) :\n        result += abs ( A [ 0 ] [ j ] - A [ 0 ] [ 0 ] ) ;\n    return ( result ) ;"}
{"source": "python", "target": "java", "source_program": " def find_max ( A , N , K ) :\n    Count = dict ( )\n    for i in range ( K - 1 ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n    Myset = dict ( )\n    for x in Count :\n        if ( Count [ x ] == 1 ) :\n            Myset [ x ] = 1\n    for i in range ( K - 1 , N ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n        if ( Count [ A [ i ] ] == 1 ) :\n            Myset [ A [ i ] ] = 1\n        else :\n            del Myset [ A [ i ] ]\n        if ( len ( Myset ) == 0 ) :\n            print ( \"Nothing\" )\n        else :\n            maxm = - 10 ** 9\n            for i in Myset :\n                maxm = max ( i , maxm )\n            print ( maxm )\n        x = A [ i - K + 1 ]\n        if x in Count.keys ( ) :\n            Count [ x ] -= 1\n            if ( Count [ x ] == 1 ) :\n                Myset [ x ] = 1\n            if ( Count [ x ] == 0 ) :\n                del Myset [ x ]", "target_program": " static void find_max ( int [ ] A , int N , int K ) {\n  HashMap < Integer , Integer > Count = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < K - 1 ;\n  i ++ ) if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n  else Count . put ( A [ i ] , 1 ) ;\n  TreeSet < Integer > Myset = new TreeSet < Integer > ( ) ;\n  for ( Map . Entry x : Count . entrySet ( ) ) {\n    if ( Integer . parseInt ( String . valueOf ( x . getValue ( ) ) ) == 1 ) Myset . add ( Integer . parseInt ( String . valueOf ( x . getKey ( ) ) ) ) ;\n  }\n  for ( int i = K - 1 ;\n  i < N ;\n  i ++ ) {\n    if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n    else Count . put ( A [ i ] , 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( A [ i ] ) ) ) == 1 ) Myset . add ( A [ i ] ) ;\n    else Myset . remove ( A [ i ] ) ;\n    if ( Myset . size ( ) == 0 ) System . out . println ( \"Nothing\" ) ;\n    else System . out . println ( Myset . last ( ) ) ;\n    int x = A [ i - K + 1 ] ;\n    Count . put ( x , Count . get ( x ) - 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 1 ) Myset . add ( x ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 0 ) Myset . remove ( x ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def find_max ( A , N , K ) :\n    Count = dict ( )\n    for i in range ( K - 1 ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n    Myset = dict ( )\n    for x in Count :\n        if ( Count [ x ] == 1 ) :\n            Myset [ x ] = 1\n    for i in range ( K - 1 , N ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n        if ( Count [ A [ i ] ] == 1 ) :\n            Myset [ A [ i ] ] = 1\n        else :\n            del Myset [ A [ i ] ]\n        if ( len ( Myset ) == 0 ) :\n            print ( \"Nothing\" )\n        else :\n            maxm = - 10 ** 9\n            for i in Myset :\n                maxm = max ( i , maxm )\n            print ( maxm )\n        x = A [ i - K + 1 ]\n        if x in Count.keys ( ) :\n            Count [ x ] -= 1\n            if ( Count [ x ] == 1 ) :\n                Myset [ x ] = 1\n            if ( Count [ x ] == 0 ) :\n                del Myset [ x ]", "target_program": " void find_max ( int A [ ], int N, int K ) {\n  map < int, int > Count;\n  for ( int i = 0;\n  i < K - 1;\n  i ++ ) Count [ A [ i ] ] ++;\n  set < int > Myset;\n  for ( auto x : Count ) if ( x . second == 1 ) Myset . insert ( x . first );\n  for ( int i = K - 1;\n  i < N;\n  i ++ ) {\n    Count [ A [ i ] ] ++;\n    if ( Count [ A [ i ] ] == 1 ) Myset . insert ( A [ i ] );\n    else Myset . erase ( A [ i ] );\n    if ( Myset . size ( ) == 0 ) printf ( \"Nothing\\n\" );\n    else printf ( \"%d\\n\", * Myset . rbegin ( ) );\n    int x = A [ i - K + 1 ];\n    Count [ x ] --;\n    if ( Count [ x ] == 1 ) Myset . insert ( x );\n    if ( Count [ x ] == 0 ) Myset . erase ( x );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void find_max ( int [ ] A , int N , int K ) {\n  HashMap < Integer , Integer > Count = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < K - 1 ;\n  i ++ ) if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n  else Count . put ( A [ i ] , 1 ) ;\n  TreeSet < Integer > Myset = new TreeSet < Integer > ( ) ;\n  for ( Map . Entry x : Count . entrySet ( ) ) {\n    if ( Integer . parseInt ( String . valueOf ( x . getValue ( ) ) ) == 1 ) Myset . add ( Integer . parseInt ( String . valueOf ( x . getKey ( ) ) ) ) ;\n  }\n  for ( int i = K - 1 ;\n  i < N ;\n  i ++ ) {\n    if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n    else Count . put ( A [ i ] , 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( A [ i ] ) ) ) == 1 ) Myset . add ( A [ i ] ) ;\n    else Myset . remove ( A [ i ] ) ;\n    if ( Myset . size ( ) == 0 ) System . out . println ( \"Nothing\" ) ;\n    else System . out . println ( Myset . last ( ) ) ;\n    int x = A [ i - K + 1 ] ;\n    Count . put ( x , Count . get ( x ) - 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 1 ) Myset . add ( x ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 0 ) Myset . remove ( x ) ;\n  }\n}", "target_program": " def find_max ( A , N , K ) :\n    Count = dict ( )\n    for i in range ( K - 1 ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n    Myset = dict ( )\n    for x in Count :\n        if ( Count [ x ] == 1 ) :\n            Myset [ x ] = 1\n    for i in range ( K - 1 , N ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n        if ( Count [ A [ i ] ] == 1 ) :\n            Myset [ A [ i ] ] = 1\n        else :\n            del Myset [ A [ i ] ]\n        if ( len ( Myset ) == 0 ) :\n            print ( \"Nothing\" )\n        else :\n            maxm = - 10 ** 9\n            for i in Myset :\n                maxm = max ( i , maxm )\n            print ( maxm )\n        x = A [ i - K + 1 ]\n        if x in Count.keys ( ) :\n            Count [ x ] -= 1\n            if ( Count [ x ] == 1 ) :\n                Myset [ x ] = 1\n            if ( Count [ x ] == 0 ) :\n                del Myset [ x ]"}
{"source": "java", "target": "cpp", "source_program": " static void find_max ( int [ ] A , int N , int K ) {\n  HashMap < Integer , Integer > Count = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < K - 1 ;\n  i ++ ) if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n  else Count . put ( A [ i ] , 1 ) ;\n  TreeSet < Integer > Myset = new TreeSet < Integer > ( ) ;\n  for ( Map . Entry x : Count . entrySet ( ) ) {\n    if ( Integer . parseInt ( String . valueOf ( x . getValue ( ) ) ) == 1 ) Myset . add ( Integer . parseInt ( String . valueOf ( x . getKey ( ) ) ) ) ;\n  }\n  for ( int i = K - 1 ;\n  i < N ;\n  i ++ ) {\n    if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n    else Count . put ( A [ i ] , 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( A [ i ] ) ) ) == 1 ) Myset . add ( A [ i ] ) ;\n    else Myset . remove ( A [ i ] ) ;\n    if ( Myset . size ( ) == 0 ) System . out . println ( \"Nothing\" ) ;\n    else System . out . println ( Myset . last ( ) ) ;\n    int x = A [ i - K + 1 ] ;\n    Count . put ( x , Count . get ( x ) - 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 1 ) Myset . add ( x ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 0 ) Myset . remove ( x ) ;\n  }\n}", "target_program": " void find_max ( int A [ ], int N, int K ) {\n  map < int, int > Count;\n  for ( int i = 0;\n  i < K - 1;\n  i ++ ) Count [ A [ i ] ] ++;\n  set < int > Myset;\n  for ( auto x : Count ) if ( x . second == 1 ) Myset . insert ( x . first );\n  for ( int i = K - 1;\n  i < N;\n  i ++ ) {\n    Count [ A [ i ] ] ++;\n    if ( Count [ A [ i ] ] == 1 ) Myset . insert ( A [ i ] );\n    else Myset . erase ( A [ i ] );\n    if ( Myset . size ( ) == 0 ) printf ( \"Nothing\\n\" );\n    else printf ( \"%d\\n\", * Myset . rbegin ( ) );\n    int x = A [ i - K + 1 ];\n    Count [ x ] --;\n    if ( Count [ x ] == 1 ) Myset . insert ( x );\n    if ( Count [ x ] == 0 ) Myset . erase ( x );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void find_max ( int A [ ], int N, int K ) {\n  map < int, int > Count;\n  for ( int i = 0;\n  i < K - 1;\n  i ++ ) Count [ A [ i ] ] ++;\n  set < int > Myset;\n  for ( auto x : Count ) if ( x . second == 1 ) Myset . insert ( x . first );\n  for ( int i = K - 1;\n  i < N;\n  i ++ ) {\n    Count [ A [ i ] ] ++;\n    if ( Count [ A [ i ] ] == 1 ) Myset . insert ( A [ i ] );\n    else Myset . erase ( A [ i ] );\n    if ( Myset . size ( ) == 0 ) printf ( \"Nothing\\n\" );\n    else printf ( \"%d\\n\", * Myset . rbegin ( ) );\n    int x = A [ i - K + 1 ];\n    Count [ x ] --;\n    if ( Count [ x ] == 1 ) Myset . insert ( x );\n    if ( Count [ x ] == 0 ) Myset . erase ( x );\n  }\n}", "target_program": " static void find_max ( int [ ] A , int N , int K ) {\n  HashMap < Integer , Integer > Count = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < K - 1 ;\n  i ++ ) if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n  else Count . put ( A [ i ] , 1 ) ;\n  TreeSet < Integer > Myset = new TreeSet < Integer > ( ) ;\n  for ( Map . Entry x : Count . entrySet ( ) ) {\n    if ( Integer . parseInt ( String . valueOf ( x . getValue ( ) ) ) == 1 ) Myset . add ( Integer . parseInt ( String . valueOf ( x . getKey ( ) ) ) ) ;\n  }\n  for ( int i = K - 1 ;\n  i < N ;\n  i ++ ) {\n    if ( Count . containsKey ( A [ i ] ) ) Count . put ( A [ i ] , 1 + Count . get ( A [ i ] ) ) ;\n    else Count . put ( A [ i ] , 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( A [ i ] ) ) ) == 1 ) Myset . add ( A [ i ] ) ;\n    else Myset . remove ( A [ i ] ) ;\n    if ( Myset . size ( ) == 0 ) System . out . println ( \"Nothing\" ) ;\n    else System . out . println ( Myset . last ( ) ) ;\n    int x = A [ i - K + 1 ] ;\n    Count . put ( x , Count . get ( x ) - 1 ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 1 ) Myset . add ( x ) ;\n    if ( Integer . parseInt ( String . valueOf ( Count . get ( x ) ) ) == 0 ) Myset . remove ( x ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void find_max ( int A [ ], int N, int K ) {\n  map < int, int > Count;\n  for ( int i = 0;\n  i < K - 1;\n  i ++ ) Count [ A [ i ] ] ++;\n  set < int > Myset;\n  for ( auto x : Count ) if ( x . second == 1 ) Myset . insert ( x . first );\n  for ( int i = K - 1;\n  i < N;\n  i ++ ) {\n    Count [ A [ i ] ] ++;\n    if ( Count [ A [ i ] ] == 1 ) Myset . insert ( A [ i ] );\n    else Myset . erase ( A [ i ] );\n    if ( Myset . size ( ) == 0 ) printf ( \"Nothing\\n\" );\n    else printf ( \"%d\\n\", * Myset . rbegin ( ) );\n    int x = A [ i - K + 1 ];\n    Count [ x ] --;\n    if ( Count [ x ] == 1 ) Myset . insert ( x );\n    if ( Count [ x ] == 0 ) Myset . erase ( x );\n  }\n}", "target_program": " def find_max ( A , N , K ) :\n    Count = dict ( )\n    for i in range ( K - 1 ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n    Myset = dict ( )\n    for x in Count :\n        if ( Count [ x ] == 1 ) :\n            Myset [ x ] = 1\n    for i in range ( K - 1 , N ) :\n        Count [ A [ i ] ] = Count.get ( A [ i ] , 0 ) + 1\n        if ( Count [ A [ i ] ] == 1 ) :\n            Myset [ A [ i ] ] = 1\n        else :\n            del Myset [ A [ i ] ]\n        if ( len ( Myset ) == 0 ) :\n            print ( \"Nothing\" )\n        else :\n            maxm = - 10 ** 9\n            for i in Myset :\n                maxm = max ( i , maxm )\n            print ( maxm )\n        x = A [ i - K + 1 ]\n        if x in Count.keys ( ) :\n            Count [ x ] -= 1\n            if ( Count [ x ] == 1 ) :\n                Myset [ x ] = 1\n            if ( Count [ x ] == 0 ) :\n                del Myset [ x ]"}
{"source": "python", "target": "java", "source_program": " def calculateEnergy ( mat , n ) :\n    tot_energy = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n    return tot_energy", "target_program": " public static int calculateEnergy ( int mat [ ] [ ] , int n ) {\n  int i_des , j_des , q ;\n  int tot_energy = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n ;\n      i_des = q ;\n      j_des = mat [ i ] [ j ] - ( n * q ) ;\n      tot_energy += Math . abs ( i_des - i ) + Math . abs ( j_des - j ) ;\n    }\n  }\n  return tot_energy ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def calculateEnergy ( mat , n ) :\n    tot_energy = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n    return tot_energy", "target_program": " int calculateEnergy ( int mat [ SIZE ] [ SIZE ], int n ) {\n  int i_des, j_des, q;\n  int tot_energy = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n;\n      i_des = q;\n      j_des = mat [ i ] [ j ] - ( n * q );\n      tot_energy += abs ( i_des - i ) + abs ( j_des - j );\n    }\n  }\n  return tot_energy;\n}"}
{"source": "java", "target": "python", "source_program": " public static int calculateEnergy ( int mat [ ] [ ] , int n ) {\n  int i_des , j_des , q ;\n  int tot_energy = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n ;\n      i_des = q ;\n      j_des = mat [ i ] [ j ] - ( n * q ) ;\n      tot_energy += Math . abs ( i_des - i ) + Math . abs ( j_des - j ) ;\n    }\n  }\n  return tot_energy ;\n}", "target_program": " def calculateEnergy ( mat , n ) :\n    tot_energy = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n    return tot_energy"}
{"source": "java", "target": "cpp", "source_program": " public static int calculateEnergy ( int mat [ ] [ ] , int n ) {\n  int i_des , j_des , q ;\n  int tot_energy = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n ;\n      i_des = q ;\n      j_des = mat [ i ] [ j ] - ( n * q ) ;\n      tot_energy += Math . abs ( i_des - i ) + Math . abs ( j_des - j ) ;\n    }\n  }\n  return tot_energy ;\n}", "target_program": " int calculateEnergy ( int mat [ SIZE ] [ SIZE ], int n ) {\n  int i_des, j_des, q;\n  int tot_energy = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n;\n      i_des = q;\n      j_des = mat [ i ] [ j ] - ( n * q );\n      tot_energy += abs ( i_des - i ) + abs ( j_des - j );\n    }\n  }\n  return tot_energy;\n}"}
{"source": "cpp", "target": "java", "source_program": " int calculateEnergy ( int mat [ SIZE ] [ SIZE ], int n ) {\n  int i_des, j_des, q;\n  int tot_energy = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n;\n      i_des = q;\n      j_des = mat [ i ] [ j ] - ( n * q );\n      tot_energy += abs ( i_des - i ) + abs ( j_des - j );\n    }\n  }\n  return tot_energy;\n}", "target_program": " public static int calculateEnergy ( int mat [ ] [ ] , int n ) {\n  int i_des , j_des , q ;\n  int tot_energy = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n ;\n      i_des = q ;\n      j_des = mat [ i ] [ j ] - ( n * q ) ;\n      tot_energy += Math . abs ( i_des - i ) + Math . abs ( j_des - j ) ;\n    }\n  }\n  return tot_energy ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int calculateEnergy ( int mat [ SIZE ] [ SIZE ], int n ) {\n  int i_des, j_des, q;\n  int tot_energy = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      q = mat [ i ] [ j ] / n;\n      i_des = q;\n      j_des = mat [ i ] [ j ] - ( n * q );\n      tot_energy += abs ( i_des - i ) + abs ( j_des - j );\n    }\n  }\n  return tot_energy;\n}", "target_program": " def calculateEnergy ( mat , n ) :\n    tot_energy = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            q = mat [ i ] [ j ] // n\n            i_des = q\n            j_des = mat [ i ] [ j ] - ( n * q )\n            tot_energy += ( abs ( i_des - i ) + abs ( j_des - j ) )\n    return tot_energy"}
{"source": "python", "target": "java", "source_program": " def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n    msds [ n - 1 ] = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n    for i in range ( n ) :\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n    return max_sum", "target_program": " static int maxSumBitonicSubArr ( int arr [ ] , int n ) {\n  int [ ] msis = new int [ n ] ;\n  int [ ] msds = new int [ n ] ;\n  int max_sum = Integer . MIN_VALUE ;\n  msis [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ;\n  else msis [ i ] = arr [ i ] ;\n  msds [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ;\n  else msds [ i ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ] ;\n  return max_sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n    msds [ n - 1 ] = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n    for i in range ( n ) :\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n    return max_sum", "target_program": " int maxSumBitonicSubArr ( int arr [ ], int n ) {\n  int msis [ n ], msds [ n ];\n  int max_sum = INT_MIN;\n  msis [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ];\n  else msis [ i ] = arr [ i ];\n  msds [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ];\n  else msds [ i ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ];\n  return max_sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSumBitonicSubArr ( int arr [ ] , int n ) {\n  int [ ] msis = new int [ n ] ;\n  int [ ] msds = new int [ n ] ;\n  int max_sum = Integer . MIN_VALUE ;\n  msis [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ;\n  else msis [ i ] = arr [ i ] ;\n  msds [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ;\n  else msds [ i ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ] ;\n  return max_sum ;\n}", "target_program": " def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n    msds [ n - 1 ] = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n    for i in range ( n ) :\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n    return max_sum"}
{"source": "java", "target": "cpp", "source_program": " static int maxSumBitonicSubArr ( int arr [ ] , int n ) {\n  int [ ] msis = new int [ n ] ;\n  int [ ] msds = new int [ n ] ;\n  int max_sum = Integer . MIN_VALUE ;\n  msis [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ;\n  else msis [ i ] = arr [ i ] ;\n  msds [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ;\n  else msds [ i ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ] ;\n  return max_sum ;\n}", "target_program": " int maxSumBitonicSubArr ( int arr [ ], int n ) {\n  int msis [ n ], msds [ n ];\n  int max_sum = INT_MIN;\n  msis [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ];\n  else msis [ i ] = arr [ i ];\n  msds [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ];\n  else msds [ i ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ];\n  return max_sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSumBitonicSubArr ( int arr [ ], int n ) {\n  int msis [ n ], msds [ n ];\n  int max_sum = INT_MIN;\n  msis [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ];\n  else msis [ i ] = arr [ i ];\n  msds [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ];\n  else msds [ i ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ];\n  return max_sum;\n}", "target_program": " static int maxSumBitonicSubArr ( int arr [ ] , int n ) {\n  int [ ] msis = new int [ n ] ;\n  int [ ] msds = new int [ n ] ;\n  int max_sum = Integer . MIN_VALUE ;\n  msis [ 0 ] = arr [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ] ;\n  else msis [ i ] = arr [ i ] ;\n  msds [ n - 1 ] = arr [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ] ;\n  else msds [ i ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ] ;\n  return max_sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSumBitonicSubArr ( int arr [ ], int n ) {\n  int msis [ n ], msds [ n ];\n  int max_sum = INT_MIN;\n  msis [ 0 ] = arr [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( arr [ i ] > arr [ i - 1 ] ) msis [ i ] = msis [ i - 1 ] + arr [ i ];\n  else msis [ i ] = arr [ i ];\n  msds [ n - 1 ] = arr [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) if ( arr [ i ] > arr [ i + 1 ] ) msds [ i ] = msds [ i + 1 ] + arr [ i ];\n  else msds [ i ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) max_sum = msis [ i ] + msds [ i ] - arr [ i ];\n  return max_sum;\n}", "target_program": " def maxSumBitonicSubArr ( arr , n ) :\n    msis = [ None ] * n\n    msds = [ None ] * n\n    max_sum = 0\n    msis [ 0 ] = arr [ 0 ]\n    for i in range ( 1 , n ) :\n        if ( arr [ i ] > arr [ i - 1 ] ) :\n            msis [ i ] = msis [ i - 1 ] + arr [ i ]\n        else :\n            msis [ i ] = arr [ i ]\n    msds [ n - 1 ] = arr [ n - 1 ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            msds [ i ] = msds [ i + 1 ] + arr [ i ]\n        else :\n            msds [ i ] = arr [ i ]\n    for i in range ( n ) :\n        if ( max_sum < ( msis [ i ] + msds [ i ] - arr [ i ] ) ) :\n            max_sum = ( msis [ i ] + msds [ i ] - arr [ i ] )\n    return max_sum"}
{"source": "python", "target": "java", "source_program": " def printAllAPTriplets ( arr , n ) :\n    s = [ ] ;\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            diff = arr [ j ] - arr [ i ] ;\n            if ( ( arr [ i ] - diff ) in arr ) :\n                print ( \"{} {} {}\".format ( ( arr [ i ] - diff ) , arr [ i ] , arr [ j ] ) , end = \"\\n\" ) ;\n    s.append ( arr [ i ] ) ;", "target_program": " static void printAllAPTriplets ( int [ ] arr , int n ) {\n  ArrayList < Integer > s = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ] ;\n      boolean exists = s . contains ( arr [ i ] - diff ) ;\n      if ( exists ) System . out . println ( arr [ i ] - diff + \" \" + arr [ i ] + \" \" + arr [ j ] ) ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printAllAPTriplets ( arr , n ) :\n    s = [ ] ;\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            diff = arr [ j ] - arr [ i ] ;\n            if ( ( arr [ i ] - diff ) in arr ) :\n                print ( \"{} {} {}\".format ( ( arr [ i ] - diff ) , arr [ i ] , arr [ j ] ) , end = \"\\n\" ) ;\n    s.append ( arr [ i ] ) ;", "target_program": " void printAllAPTriplets ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ];\n      if ( s . find ( arr [ i ] - diff ) != s . end ( ) ) cout << arr [ i ] - diff << \" \" << arr [ i ] << \" \" << arr [ j ] << endl;\n    }\n    s . insert ( arr [ i ] );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printAllAPTriplets ( int [ ] arr , int n ) {\n  ArrayList < Integer > s = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ] ;\n      boolean exists = s . contains ( arr [ i ] - diff ) ;\n      if ( exists ) System . out . println ( arr [ i ] - diff + \" \" + arr [ i ] + \" \" + arr [ j ] ) ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n}", "target_program": " def printAllAPTriplets ( arr , n ) :\n    s = [ ] ;\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            diff = arr [ j ] - arr [ i ] ;\n            if ( ( arr [ i ] - diff ) in arr ) :\n                print ( \"{} {} {}\".format ( ( arr [ i ] - diff ) , arr [ i ] , arr [ j ] ) , end = \"\\n\" ) ;\n    s.append ( arr [ i ] ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void printAllAPTriplets ( int [ ] arr , int n ) {\n  ArrayList < Integer > s = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ] ;\n      boolean exists = s . contains ( arr [ i ] - diff ) ;\n      if ( exists ) System . out . println ( arr [ i ] - diff + \" \" + arr [ i ] + \" \" + arr [ j ] ) ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n}", "target_program": " void printAllAPTriplets ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ];\n      if ( s . find ( arr [ i ] - diff ) != s . end ( ) ) cout << arr [ i ] - diff << \" \" << arr [ i ] << \" \" << arr [ j ] << endl;\n    }\n    s . insert ( arr [ i ] );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printAllAPTriplets ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ];\n      if ( s . find ( arr [ i ] - diff ) != s . end ( ) ) cout << arr [ i ] - diff << \" \" << arr [ i ] << \" \" << arr [ j ] << endl;\n    }\n    s . insert ( arr [ i ] );\n  }\n}", "target_program": " static void printAllAPTriplets ( int [ ] arr , int n ) {\n  ArrayList < Integer > s = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ] ;\n      boolean exists = s . contains ( arr [ i ] - diff ) ;\n      if ( exists ) System . out . println ( arr [ i ] - diff + \" \" + arr [ i ] + \" \" + arr [ j ] ) ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printAllAPTriplets ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int diff = arr [ j ] - arr [ i ];\n      if ( s . find ( arr [ i ] - diff ) != s . end ( ) ) cout << arr [ i ] - diff << \" \" << arr [ i ] << \" \" << arr [ j ] << endl;\n    }\n    s . insert ( arr [ i ] );\n  }\n}", "target_program": " def printAllAPTriplets ( arr , n ) :\n    s = [ ] ;\n    for i in range ( 0 , n - 1 ) :\n        for j in range ( i + 1 , n ) :\n            diff = arr [ j ] - arr [ i ] ;\n            if ( ( arr [ i ] - diff ) in arr ) :\n                print ( \"{} {} {}\".format ( ( arr [ i ] - diff ) , arr [ i ] , arr [ j ] ) , end = \"\\n\" ) ;\n    s.append ( arr [ i ] ) ;"}
{"source": "python", "target": "java", "source_program": " def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n    return count", "target_program": " static int countInRange ( int arr [ ] , int n , int x , int y ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n    return count", "target_program": " int countInRange ( int arr [ ], int n, int x, int y ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countInRange ( int arr [ ] , int n , int x , int y ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;\n  }\n  return count ;\n}", "target_program": " def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countInRange ( int arr [ ] , int n , int x , int y ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;\n  }\n  return count ;\n}", "target_program": " int countInRange ( int arr [ ], int n, int x, int y ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countInRange ( int arr [ ], int n, int x, int y ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++;\n  }\n  return count;\n}", "target_program": " static int countInRange ( int arr [ ] , int n , int x , int y ) {\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countInRange ( int arr [ ], int n, int x, int y ) {\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= x && arr [ i ] <= y ) count ++;\n  }\n  return count;\n}", "target_program": " def countInRange ( arr , n , x , y ) :\n    count = 0 ;\n    for i in range ( n ) :\n        if ( arr [ i ] >= x and arr [ i ] <= y ) :\n            count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0 ;\n    for i in range ( 1 , m + 1 ) :\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n    return maxRev [ m ]", "target_program": " static int maxRevenue ( int m , int [ ] x , int [ ] revenue , int n , int t ) {\n  int [ ] maxRev = new int [ m + 1 ] ;\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) maxRev [ i ] = 0 ;\n  int nxtbb = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] ;\n      else {\n        if ( i <= t ) maxRev [ i ] = Math . max ( maxRev [ i - 1 ] , revenue [ nxtbb ] ) ;\n        else maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n        nxtbb ++ ;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ] ;\n  }\n  return maxRev [ m ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0 ;\n    for i in range ( 1 , m + 1 ) :\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n    return maxRev [ m ]", "target_program": " int maxRevenue ( int m, int x [ ], int revenue [ ], int n, int t ) {\n  int maxRev [ m + 1 ];\n  memset ( maxRev, 0, sizeof ( maxRev ) );\n  int nxtbb = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ];\n      else {\n        if ( i <= t ) maxRev [ i ] = max ( maxRev [ i - 1 ], revenue [ nxtbb ] );\n        else maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ], maxRev [ i - 1 ] );\n        nxtbb ++;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ];\n  }\n  return maxRev [ m ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxRevenue ( int m , int [ ] x , int [ ] revenue , int n , int t ) {\n  int [ ] maxRev = new int [ m + 1 ] ;\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) maxRev [ i ] = 0 ;\n  int nxtbb = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] ;\n      else {\n        if ( i <= t ) maxRev [ i ] = Math . max ( maxRev [ i - 1 ] , revenue [ nxtbb ] ) ;\n        else maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n        nxtbb ++ ;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ] ;\n  }\n  return maxRev [ m ] ;\n}", "target_program": " def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0 ;\n    for i in range ( 1 , m + 1 ) :\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n    return maxRev [ m ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxRevenue ( int m , int [ ] x , int [ ] revenue , int n , int t ) {\n  int [ ] maxRev = new int [ m + 1 ] ;\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) maxRev [ i ] = 0 ;\n  int nxtbb = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] ;\n      else {\n        if ( i <= t ) maxRev [ i ] = Math . max ( maxRev [ i - 1 ] , revenue [ nxtbb ] ) ;\n        else maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n        nxtbb ++ ;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ] ;\n  }\n  return maxRev [ m ] ;\n}", "target_program": " int maxRevenue ( int m, int x [ ], int revenue [ ], int n, int t ) {\n  int maxRev [ m + 1 ];\n  memset ( maxRev, 0, sizeof ( maxRev ) );\n  int nxtbb = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ];\n      else {\n        if ( i <= t ) maxRev [ i ] = max ( maxRev [ i - 1 ], revenue [ nxtbb ] );\n        else maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ], maxRev [ i - 1 ] );\n        nxtbb ++;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ];\n  }\n  return maxRev [ m ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxRevenue ( int m, int x [ ], int revenue [ ], int n, int t ) {\n  int maxRev [ m + 1 ];\n  memset ( maxRev, 0, sizeof ( maxRev ) );\n  int nxtbb = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ];\n      else {\n        if ( i <= t ) maxRev [ i ] = max ( maxRev [ i - 1 ], revenue [ nxtbb ] );\n        else maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ], maxRev [ i - 1 ] );\n        nxtbb ++;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ];\n  }\n  return maxRev [ m ];\n}", "target_program": " static int maxRevenue ( int m , int [ ] x , int [ ] revenue , int n , int t ) {\n  int [ ] maxRev = new int [ m + 1 ] ;\n  for ( int i = 0 ;\n  i < m + 1 ;\n  i ++ ) maxRev [ i ] = 0 ;\n  int nxtbb = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ] ;\n      else {\n        if ( i <= t ) maxRev [ i ] = Math . max ( maxRev [ i - 1 ] , revenue [ nxtbb ] ) ;\n        else maxRev [ i ] = Math . max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n        nxtbb ++ ;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ] ;\n  }\n  return maxRev [ m ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxRevenue ( int m, int x [ ], int revenue [ ], int n, int t ) {\n  int maxRev [ m + 1 ];\n  memset ( maxRev, 0, sizeof ( maxRev ) );\n  int nxtbb = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    if ( nxtbb < n ) {\n      if ( x [ nxtbb ] != i ) maxRev [ i ] = maxRev [ i - 1 ];\n      else {\n        if ( i <= t ) maxRev [ i ] = max ( maxRev [ i - 1 ], revenue [ nxtbb ] );\n        else maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ], maxRev [ i - 1 ] );\n        nxtbb ++;\n      }\n    }\n    else maxRev [ i ] = maxRev [ i - 1 ];\n  }\n  return maxRev [ m ];\n}", "target_program": " def maxRevenue ( m , x , revenue , n , t ) :\n    maxRev = [ 0 ] * ( m + 1 )\n    nxtbb = 0 ;\n    for i in range ( 1 , m + 1 ) :\n        if ( nxtbb < n ) :\n            if ( x [ nxtbb ] != i ) :\n                maxRev [ i ] = maxRev [ i - 1 ]\n            else :\n                if ( i <= t ) :\n                    maxRev [ i ] = max ( maxRev [ i - 1 ] , revenue [ nxtbb ] )\n                else :\n                    maxRev [ i ] = max ( maxRev [ i - t - 1 ] + revenue [ nxtbb ] , maxRev [ i - 1 ] ) ;\n                nxtbb += 1\n        else :\n            maxRev [ i ] = maxRev [ i - 1 ]\n    return maxRev [ m ]"}
{"source": "python", "target": "java", "source_program": " def printMat ( degseq , n ) :\n    mat = [ [ 0 ] * n for i in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( degseq [ i ] > 0 and degseq [ j ] > 0 ) :\n                degseq [ i ] -= 1\n                degseq [ j ] -= 1\n                mat [ i ] [ j ] = 1\n                mat [ j ] [ i ] = 1\n    print ( \"      \" , end = \"\" )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n    print ( )\n    print ( )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n        for j in range ( n ) :\n            print ( \"     \" , mat [ i ] [ j ] , end = \"\" )\n        print ( )", "target_program": " static void printMat ( int degseq [ ] , int n ) {\n  int [ ] [ ] mat = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] -- ;\n        degseq [ j ] -- ;\n        mat [ i ] [ j ] = 1 ;\n        mat [ j ] [ i ] = 1 ;\n      }\n    }\n  }\n  System . out . print ( \"\\n\" + setw ( 3 ) + \"     \" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( setw ( 3 ) + \"(\" + i + \")\" ) ;\n  System . out . print ( \"\\n\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( setw ( 4 ) + \"(\" + i + \")\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 5 ) + mat [ i ] [ j ] ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printMat ( degseq , n ) :\n    mat = [ [ 0 ] * n for i in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( degseq [ i ] > 0 and degseq [ j ] > 0 ) :\n                degseq [ i ] -= 1\n                degseq [ j ] -= 1\n                mat [ i ] [ j ] = 1\n                mat [ j ] [ i ] = 1\n    print ( \"      \" , end = \"\" )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n    print ( )\n    print ( )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n        for j in range ( n ) :\n            print ( \"     \" , mat [ i ] [ j ] , end = \"\" )\n        print ( )", "target_program": " void printMat ( int degseq [ ], int n ) {\n  int mat [ n ] [ n ];\n  memset ( mat, 0, sizeof ( mat ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] --;\n        degseq [ j ] --;\n        mat [ i ] [ j ] = 1;\n        mat [ j ] [ i ] = 1;\n      }\n    }\n  }\n  cout << \"\\n\" << setw ( 3 ) << \"     \";\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << setw ( 3 ) << \"(\" << i << \")\";\n  cout << \"\\n\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << setw ( 4 ) << \"(\" << i << \")\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 5 ) << mat [ i ] [ j ];\n    cout << \"\\n\";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printMat ( int degseq [ ] , int n ) {\n  int [ ] [ ] mat = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] -- ;\n        degseq [ j ] -- ;\n        mat [ i ] [ j ] = 1 ;\n        mat [ j ] [ i ] = 1 ;\n      }\n    }\n  }\n  System . out . print ( \"\\n\" + setw ( 3 ) + \"     \" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( setw ( 3 ) + \"(\" + i + \")\" ) ;\n  System . out . print ( \"\\n\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( setw ( 4 ) + \"(\" + i + \")\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 5 ) + mat [ i ] [ j ] ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}", "target_program": " def printMat ( degseq , n ) :\n    mat = [ [ 0 ] * n for i in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( degseq [ i ] > 0 and degseq [ j ] > 0 ) :\n                degseq [ i ] -= 1\n                degseq [ j ] -= 1\n                mat [ i ] [ j ] = 1\n                mat [ j ] [ i ] = 1\n    print ( \"      \" , end = \"\" )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n    print ( )\n    print ( )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n        for j in range ( n ) :\n            print ( \"     \" , mat [ i ] [ j ] , end = \"\" )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " static void printMat ( int degseq [ ] , int n ) {\n  int [ ] [ ] mat = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] -- ;\n        degseq [ j ] -- ;\n        mat [ i ] [ j ] = 1 ;\n        mat [ j ] [ i ] = 1 ;\n      }\n    }\n  }\n  System . out . print ( \"\\n\" + setw ( 3 ) + \"     \" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( setw ( 3 ) + \"(\" + i + \")\" ) ;\n  System . out . print ( \"\\n\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( setw ( 4 ) + \"(\" + i + \")\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 5 ) + mat [ i ] [ j ] ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}", "target_program": " void printMat ( int degseq [ ], int n ) {\n  int mat [ n ] [ n ];\n  memset ( mat, 0, sizeof ( mat ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] --;\n        degseq [ j ] --;\n        mat [ i ] [ j ] = 1;\n        mat [ j ] [ i ] = 1;\n      }\n    }\n  }\n  cout << \"\\n\" << setw ( 3 ) << \"     \";\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << setw ( 3 ) << \"(\" << i << \")\";\n  cout << \"\\n\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << setw ( 4 ) << \"(\" << i << \")\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 5 ) << mat [ i ] [ j ];\n    cout << \"\\n\";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printMat ( int degseq [ ], int n ) {\n  int mat [ n ] [ n ];\n  memset ( mat, 0, sizeof ( mat ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] --;\n        degseq [ j ] --;\n        mat [ i ] [ j ] = 1;\n        mat [ j ] [ i ] = 1;\n      }\n    }\n  }\n  cout << \"\\n\" << setw ( 3 ) << \"     \";\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << setw ( 3 ) << \"(\" << i << \")\";\n  cout << \"\\n\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << setw ( 4 ) << \"(\" << i << \")\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 5 ) << mat [ i ] [ j ];\n    cout << \"\\n\";\n  }\n}", "target_program": " static void printMat ( int degseq [ ] , int n ) {\n  int [ ] [ ] mat = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] -- ;\n        degseq [ j ] -- ;\n        mat [ i ] [ j ] = 1 ;\n        mat [ j ] [ i ] = 1 ;\n      }\n    }\n  }\n  System . out . print ( \"\\n\" + setw ( 3 ) + \"     \" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( setw ( 3 ) + \"(\" + i + \")\" ) ;\n  System . out . print ( \"\\n\\n\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( setw ( 4 ) + \"(\" + i + \")\" ) ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) System . out . print ( setw ( 5 ) + mat [ i ] [ j ] ) ;\n    System . out . print ( \"\\n\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printMat ( int degseq [ ], int n ) {\n  int mat [ n ] [ n ];\n  memset ( mat, 0, sizeof ( mat ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      if ( degseq [ i ] > 0 && degseq [ j ] > 0 ) {\n        degseq [ i ] --;\n        degseq [ j ] --;\n        mat [ i ] [ j ] = 1;\n        mat [ j ] [ i ] = 1;\n      }\n    }\n  }\n  cout << \"\\n\" << setw ( 3 ) << \"     \";\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << setw ( 3 ) << \"(\" << i << \")\";\n  cout << \"\\n\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << setw ( 4 ) << \"(\" << i << \")\";\n    for ( int j = 0;\n    j < n;\n    j ++ ) cout << setw ( 5 ) << mat [ i ] [ j ];\n    cout << \"\\n\";\n  }\n}", "target_program": " def printMat ( degseq , n ) :\n    mat = [ [ 0 ] * n for i in range ( n ) ]\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( degseq [ i ] > 0 and degseq [ j ] > 0 ) :\n                degseq [ i ] -= 1\n                degseq [ j ] -= 1\n                mat [ i ] [ j ] = 1\n                mat [ j ] [ i ] = 1\n    print ( \"      \" , end = \"\" )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n    print ( )\n    print ( )\n    for i in range ( n ) :\n        print ( \"\" , \"(\" , i , \")\" , end = \"\" )\n        for j in range ( n ) :\n            print ( \"     \" , mat [ i ] [ j ] , end = \"\" )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def oppositeSigns ( x , y ) :\n    return ( ( x ^ y ) < 0 ) ;", "target_program": " static boolean oppositeSigns ( int x , int y ) {\n  return ( ( x ^ y ) < 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def oppositeSigns ( x , y ) :\n    return ( ( x ^ y ) < 0 ) ;", "target_program": " bool oppositeSigns ( int x, int y ) {\n  return ( ( x ^ y ) < 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean oppositeSigns ( int x , int y ) {\n  return ( ( x ^ y ) < 0 ) ;\n}", "target_program": " def oppositeSigns ( x , y ) :\n    return ( ( x ^ y ) < 0 ) ;"}
{"source": "java", "target": "cpp", "source_program": " static boolean oppositeSigns ( int x , int y ) {\n  return ( ( x ^ y ) < 0 ) ;\n}", "target_program": " bool oppositeSigns ( int x, int y ) {\n  return ( ( x ^ y ) < 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool oppositeSigns ( int x, int y ) {\n  return ( ( x ^ y ) < 0 );\n}", "target_program": " static boolean oppositeSigns ( int x , int y ) {\n  return ( ( x ^ y ) < 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool oppositeSigns ( int x, int y ) {\n  return ( ( x ^ y ) < 0 );\n}", "target_program": " def oppositeSigns ( x , y ) :\n    return ( ( x ^ y ) < 0 ) ;"}
{"source": "python", "target": "java", "source_program": " def isTriangular ( num ) :\n    if ( num < 0 ) :\n        return False\n    c = ( - 2 * num )\n    b , a = 1 , 1\n    d = ( b * b ) - ( 4 * a * c )\n    if ( d < 0 ) :\n        return False\n    root1 = ( - b + math.sqrt ( d ) ) / ( 2 * a )\n    root2 = ( - b - math.sqrt ( d ) ) / ( 2 * a )\n    if ( root1 > 0 and math.floor ( root1 ) == root1 ) :\n        return True\n    if ( root2 > 0 and math.floor ( root2 ) == root2 ) :\n        return True\n    return False", "target_program": " static boolean isTriangular ( int num ) {\n  if ( num < 0 ) return false ;\n  int c = ( - 2 * num ) ;\n  int b = 1 , a = 1 ;\n  int d = ( b * b ) - ( 4 * a * c ) ;\n  if ( d < 0 ) return false ;\n  float root1 = ( - b + ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  float root2 = ( - b - ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  if ( root1 > 0 && Math . floor ( root1 ) == root1 ) return true ;\n  if ( root2 > 0 && Math . floor ( root2 ) == root2 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isTriangular ( num ) :\n    if ( num < 0 ) :\n        return False\n    c = ( - 2 * num )\n    b , a = 1 , 1\n    d = ( b * b ) - ( 4 * a * c )\n    if ( d < 0 ) :\n        return False\n    root1 = ( - b + math.sqrt ( d ) ) / ( 2 * a )\n    root2 = ( - b - math.sqrt ( d ) ) / ( 2 * a )\n    if ( root1 > 0 and math.floor ( root1 ) == root1 ) :\n        return True\n    if ( root2 > 0 and math.floor ( root2 ) == root2 ) :\n        return True\n    return False", "target_program": " bool isTriangular ( int num ) {\n  if ( num < 0 ) return false;\n  int c = ( - 2 * num );\n  int b = 1, a = 1;\n  int d = ( b * b ) - ( 4 * a * c );\n  if ( d < 0 ) return false;\n  float root1 = ( - b + sqrt ( d ) ) / ( 2 * a );\n  float root2 = ( - b - sqrt ( d ) ) / ( 2 * a );\n  if ( root1 > 0 && floor ( root1 ) == root1 ) return true;\n  if ( root2 > 0 && floor ( root2 ) == root2 ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isTriangular ( int num ) {\n  if ( num < 0 ) return false ;\n  int c = ( - 2 * num ) ;\n  int b = 1 , a = 1 ;\n  int d = ( b * b ) - ( 4 * a * c ) ;\n  if ( d < 0 ) return false ;\n  float root1 = ( - b + ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  float root2 = ( - b - ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  if ( root1 > 0 && Math . floor ( root1 ) == root1 ) return true ;\n  if ( root2 > 0 && Math . floor ( root2 ) == root2 ) return true ;\n  return false ;\n}", "target_program": " def isTriangular ( num ) :\n    if ( num < 0 ) :\n        return False\n    c = ( - 2 * num )\n    b , a = 1 , 1\n    d = ( b * b ) - ( 4 * a * c )\n    if ( d < 0 ) :\n        return False\n    root1 = ( - b + math.sqrt ( d ) ) / ( 2 * a )\n    root2 = ( - b - math.sqrt ( d ) ) / ( 2 * a )\n    if ( root1 > 0 and math.floor ( root1 ) == root1 ) :\n        return True\n    if ( root2 > 0 and math.floor ( root2 ) == root2 ) :\n        return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isTriangular ( int num ) {\n  if ( num < 0 ) return false ;\n  int c = ( - 2 * num ) ;\n  int b = 1 , a = 1 ;\n  int d = ( b * b ) - ( 4 * a * c ) ;\n  if ( d < 0 ) return false ;\n  float root1 = ( - b + ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  float root2 = ( - b - ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  if ( root1 > 0 && Math . floor ( root1 ) == root1 ) return true ;\n  if ( root2 > 0 && Math . floor ( root2 ) == root2 ) return true ;\n  return false ;\n}", "target_program": " bool isTriangular ( int num ) {\n  if ( num < 0 ) return false;\n  int c = ( - 2 * num );\n  int b = 1, a = 1;\n  int d = ( b * b ) - ( 4 * a * c );\n  if ( d < 0 ) return false;\n  float root1 = ( - b + sqrt ( d ) ) / ( 2 * a );\n  float root2 = ( - b - sqrt ( d ) ) / ( 2 * a );\n  if ( root1 > 0 && floor ( root1 ) == root1 ) return true;\n  if ( root2 > 0 && floor ( root2 ) == root2 ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isTriangular ( int num ) {\n  if ( num < 0 ) return false;\n  int c = ( - 2 * num );\n  int b = 1, a = 1;\n  int d = ( b * b ) - ( 4 * a * c );\n  if ( d < 0 ) return false;\n  float root1 = ( - b + sqrt ( d ) ) / ( 2 * a );\n  float root2 = ( - b - sqrt ( d ) ) / ( 2 * a );\n  if ( root1 > 0 && floor ( root1 ) == root1 ) return true;\n  if ( root2 > 0 && floor ( root2 ) == root2 ) return true;\n  return false;\n}", "target_program": " static boolean isTriangular ( int num ) {\n  if ( num < 0 ) return false ;\n  int c = ( - 2 * num ) ;\n  int b = 1 , a = 1 ;\n  int d = ( b * b ) - ( 4 * a * c ) ;\n  if ( d < 0 ) return false ;\n  float root1 = ( - b + ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  float root2 = ( - b - ( float ) Math . sqrt ( d ) ) / ( 2 * a ) ;\n  if ( root1 > 0 && Math . floor ( root1 ) == root1 ) return true ;\n  if ( root2 > 0 && Math . floor ( root2 ) == root2 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isTriangular ( int num ) {\n  if ( num < 0 ) return false;\n  int c = ( - 2 * num );\n  int b = 1, a = 1;\n  int d = ( b * b ) - ( 4 * a * c );\n  if ( d < 0 ) return false;\n  float root1 = ( - b + sqrt ( d ) ) / ( 2 * a );\n  float root2 = ( - b - sqrt ( d ) ) / ( 2 * a );\n  if ( root1 > 0 && floor ( root1 ) == root1 ) return true;\n  if ( root2 > 0 && floor ( root2 ) == root2 ) return true;\n  return false;\n}", "target_program": " def isTriangular ( num ) :\n    if ( num < 0 ) :\n        return False\n    c = ( - 2 * num )\n    b , a = 1 , 1\n    d = ( b * b ) - ( 4 * a * c )\n    if ( d < 0 ) :\n        return False\n    root1 = ( - b + math.sqrt ( d ) ) / ( 2 * a )\n    root2 = ( - b - math.sqrt ( d ) ) / ( 2 * a )\n    if ( root1 > 0 and math.floor ( root1 ) == root1 ) :\n        return True\n    if ( root2 > 0 and math.floor ( root2 ) == root2 ) :\n        return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def isPowerOfFour ( n ) :\n    if ( n == 0 ) :\n        return False\n    while ( n != 1 ) :\n        if ( n % 4 != 0 ) :\n            return False\n        n = n // 4\n    return True", "target_program": " static int isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0 ;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0 ;\n    n = n / 4 ;\n  }\n  return 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPowerOfFour ( n ) :\n    if ( n == 0 ) :\n        return False\n    while ( n != 1 ) :\n        if ( n % 4 != 0 ) :\n            return False\n        n = n // 4\n    return True", "target_program": " public : bool isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0;\n    n = n / 4;\n  }\n  return 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0 ;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0 ;\n    n = n / 4 ;\n  }\n  return 1 ;\n}", "target_program": " def isPowerOfFour ( n ) :\n    if ( n == 0 ) :\n        return False\n    while ( n != 1 ) :\n        if ( n % 4 != 0 ) :\n            return False\n        n = n // 4\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static int isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0 ;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0 ;\n    n = n / 4 ;\n  }\n  return 1 ;\n}", "target_program": " public : bool isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0;\n    n = n / 4;\n  }\n  return 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " public : bool isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0;\n    n = n / 4;\n  }\n  return 1;\n}", "target_program": " static int isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0 ;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0 ;\n    n = n / 4 ;\n  }\n  return 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : bool isPowerOfFour ( int n ) {\n  if ( n == 0 ) return 0;\n  while ( n != 1 ) {\n    if ( n % 4 != 0 ) return 0;\n    n = n / 4;\n  }\n  return 1;\n}", "target_program": " def isPowerOfFour ( n ) :\n    if ( n == 0 ) :\n        return False\n    while ( n != 1 ) :\n        if ( n % 4 != 0 ) :\n            return False\n        n = n // 4\n    return True"}
{"source": "python", "target": "java", "source_program": " def lastNon0Digit ( n ) :\n    if ( n < 10 ) :\n        return dig [ n ]\n    if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :\n        return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    else :\n        return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    return 0", "target_program": " static int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ] ;\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lastNon0Digit ( n ) :\n    if ( n < 10 ) :\n        return dig [ n ]\n    if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :\n        return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    else :\n        return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    return 0", "target_program": " int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ];\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n}"}
{"source": "java", "target": "python", "source_program": " static int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ] ;\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n}", "target_program": " def lastNon0Digit ( n ) :\n    if ( n < 10 ) :\n        return dig [ n ]\n    if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :\n        return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    else :\n        return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    return 0"}
{"source": "java", "target": "cpp", "source_program": " static int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ] ;\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n}", "target_program": " int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ];\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ];\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n}", "target_program": " static int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ] ;\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lastNon0Digit ( int n ) {\n  if ( n < 10 ) return dig [ n ];\n  if ( ( ( n / 10 ) % 10 ) % 2 == 0 ) return ( 6 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n  else return ( 4 * lastNon0Digit ( n / 5 ) * dig [ n % 10 ] ) % 10;\n}", "target_program": " def lastNon0Digit ( n ) :\n    if ( n < 10 ) :\n        return dig [ n ]\n    if ( ( ( n // 10 ) % 10 ) % 2 == 0 ) :\n        return ( 6 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    else :\n        return ( 4 * lastNon0Digit ( n // 5 ) * dig [ n % 10 ] ) % 10\n    return 0"}
{"source": "python", "target": "java", "source_program": " def binarySearch ( arr , low , high , key ) :\n    if ( high < low ) :\n        return - 1\n    mid = ( low + high ) / 2\n    if ( key == arr [ int ( mid ) ] ) :\n        return mid\n    if ( key > arr [ int ( mid ) ] ) :\n        return binarySearch ( arr , ( mid + 1 ) , high , key )\n    return ( binarySearch ( arr , low , ( mid - 1 ) , key ) )", "target_program": " static int binarySearch ( int arr [ ] , int low , int high , int key ) {\n  if ( high < low ) return - 1 ;\n  int mid = ( low + high ) / 2 ;\n  if ( key == arr [ mid ] ) return mid ;\n  if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ;\n  return binarySearch ( arr , low , ( mid - 1 ) , key ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def binarySearch ( arr , low , high , key ) :\n    if ( high < low ) :\n        return - 1\n    mid = ( low + high ) / 2\n    if ( key == arr [ int ( mid ) ] ) :\n        return mid\n    if ( key > arr [ int ( mid ) ] ) :\n        return binarySearch ( arr , ( mid + 1 ) , high , key )\n    return ( binarySearch ( arr , low , ( mid - 1 ) , key ) )", "target_program": " int binarySearch ( int arr [ ], int low, int high, int key ) {\n  if ( high < low ) return - 1;\n  int mid = ( low + high ) / 2;\n  if ( key == arr [ mid ] ) return mid;\n  if ( key > arr [ mid ] ) return binarySearch ( arr, ( mid + 1 ), high, key );\n  return binarySearch ( arr, low, ( mid - 1 ), key );\n}"}
{"source": "java", "target": "python", "source_program": " static int binarySearch ( int arr [ ] , int low , int high , int key ) {\n  if ( high < low ) return - 1 ;\n  int mid = ( low + high ) / 2 ;\n  if ( key == arr [ mid ] ) return mid ;\n  if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ;\n  return binarySearch ( arr , low , ( mid - 1 ) , key ) ;\n}", "target_program": " def binarySearch ( arr , low , high , key ) :\n    if ( high < low ) :\n        return - 1\n    mid = ( low + high ) / 2\n    if ( key == arr [ int ( mid ) ] ) :\n        return mid\n    if ( key > arr [ int ( mid ) ] ) :\n        return binarySearch ( arr , ( mid + 1 ) , high , key )\n    return ( binarySearch ( arr , low , ( mid - 1 ) , key ) )"}
{"source": "java", "target": "cpp", "source_program": " static int binarySearch ( int arr [ ] , int low , int high , int key ) {\n  if ( high < low ) return - 1 ;\n  int mid = ( low + high ) / 2 ;\n  if ( key == arr [ mid ] ) return mid ;\n  if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ;\n  return binarySearch ( arr , low , ( mid - 1 ) , key ) ;\n}", "target_program": " int binarySearch ( int arr [ ], int low, int high, int key ) {\n  if ( high < low ) return - 1;\n  int mid = ( low + high ) / 2;\n  if ( key == arr [ mid ] ) return mid;\n  if ( key > arr [ mid ] ) return binarySearch ( arr, ( mid + 1 ), high, key );\n  return binarySearch ( arr, low, ( mid - 1 ), key );\n}"}
{"source": "cpp", "target": "java", "source_program": " int binarySearch ( int arr [ ], int low, int high, int key ) {\n  if ( high < low ) return - 1;\n  int mid = ( low + high ) / 2;\n  if ( key == arr [ mid ] ) return mid;\n  if ( key > arr [ mid ] ) return binarySearch ( arr, ( mid + 1 ), high, key );\n  return binarySearch ( arr, low, ( mid - 1 ), key );\n}", "target_program": " static int binarySearch ( int arr [ ] , int low , int high , int key ) {\n  if ( high < low ) return - 1 ;\n  int mid = ( low + high ) / 2 ;\n  if ( key == arr [ mid ] ) return mid ;\n  if ( key > arr [ mid ] ) return binarySearch ( arr , ( mid + 1 ) , high , key ) ;\n  return binarySearch ( arr , low , ( mid - 1 ) , key ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int binarySearch ( int arr [ ], int low, int high, int key ) {\n  if ( high < low ) return - 1;\n  int mid = ( low + high ) / 2;\n  if ( key == arr [ mid ] ) return mid;\n  if ( key > arr [ mid ] ) return binarySearch ( arr, ( mid + 1 ), high, key );\n  return binarySearch ( arr, low, ( mid - 1 ), key );\n}", "target_program": " def binarySearch ( arr , low , high , key ) :\n    if ( high < low ) :\n        return - 1\n    mid = ( low + high ) / 2\n    if ( key == arr [ int ( mid ) ] ) :\n        return mid\n    if ( key > arr [ int ( mid ) ] ) :\n        return binarySearch ( arr , ( mid + 1 ) , high , key )\n    return ( binarySearch ( arr , low , ( mid - 1 ) , key ) )"}
{"source": "python", "target": "java", "source_program": " def printRepeating ( arr , size ) :\n    print ( \" The repeating elements are\" , end = \" \" )\n    for i in range ( 0 , size ) :\n        if ( arr [ abs ( arr [ i ] ) ] > 0 ) :\n            arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( arr [ i ] ) ]\n        else :\n            print ( abs ( arr [ i ] ) , end = \" \" )", "target_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i ;\n  System . out . println ( \"The repeating elements are : \" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n    else System . out . print ( Math . abs ( arr [ i ] ) + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printRepeating ( arr , size ) :\n    print ( \" The repeating elements are\" , end = \" \" )\n    for i in range ( 0 , size ) :\n        if ( arr [ abs ( arr [ i ] ) ] > 0 ) :\n            arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( arr [ i ] ) ]\n        else :\n            print ( abs ( arr [ i ] ) , end = \" \" )", "target_program": " void printRepeating ( int arr [ ], int size ) {\n  int i;\n  cout << \"The repeating elements are\";\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n    else cout << \" \" << abs ( arr [ i ] ) << \" \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i ;\n  System . out . println ( \"The repeating elements are : \" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n    else System . out . print ( Math . abs ( arr [ i ] ) + \" \" ) ;\n  }\n}", "target_program": " def printRepeating ( arr , size ) :\n    print ( \" The repeating elements are\" , end = \" \" )\n    for i in range ( 0 , size ) :\n        if ( arr [ abs ( arr [ i ] ) ] > 0 ) :\n            arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( arr [ i ] ) ]\n        else :\n            print ( abs ( arr [ i ] ) , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i ;\n  System . out . println ( \"The repeating elements are : \" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n    else System . out . print ( Math . abs ( arr [ i ] ) + \" \" ) ;\n  }\n}", "target_program": " void printRepeating ( int arr [ ], int size ) {\n  int i;\n  cout << \"The repeating elements are\";\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n    else cout << \" \" << abs ( arr [ i ] ) << \" \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printRepeating ( int arr [ ], int size ) {\n  int i;\n  cout << \"The repeating elements are\";\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n    else cout << \" \" << abs ( arr [ i ] ) << \" \";\n  }\n}", "target_program": " void printRepeating ( int arr [ ] , int size ) {\n  int i ;\n  System . out . println ( \"The repeating elements are : \" ) ;\n  for ( i = 0 ;\n  i < size ;\n  i ++ ) {\n    if ( arr [ Math . abs ( arr [ i ] ) ] > 0 ) arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n    else System . out . print ( Math . abs ( arr [ i ] ) + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printRepeating ( int arr [ ], int size ) {\n  int i;\n  cout << \"The repeating elements are\";\n  for ( i = 0;\n  i < size;\n  i ++ ) {\n    if ( arr [ abs ( arr [ i ] ) ] > 0 ) arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n    else cout << \" \" << abs ( arr [ i ] ) << \" \";\n  }\n}", "target_program": " def printRepeating ( arr , size ) :\n    print ( \" The repeating elements are\" , end = \" \" )\n    for i in range ( 0 , size ) :\n        if ( arr [ abs ( arr [ i ] ) ] > 0 ) :\n            arr [ abs ( arr [ i ] ) ] = ( - 1 ) * arr [ abs ( arr [ i ] ) ]\n        else :\n            print ( abs ( arr [ i ] ) , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def minDaysToEmpty ( C , l ) :\n    if ( l >= C ) : return C\n    eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2\n    return math.ceil ( eq_root ) + l", "target_program": " static int minDaysToEmpty ( int C , int l ) {\n  if ( l >= C ) return C ;\n  double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2 ;\n  return ( int ) ( Math . ceil ( eq_root ) + l ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minDaysToEmpty ( C , l ) :\n    if ( l >= C ) : return C\n    eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2\n    return math.ceil ( eq_root ) + l", "target_program": " int minDaysToEmpty ( int C, int l ) {\n  if ( l >= C ) return C;\n  double eq_root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2;\n  return std :: ceil ( eq_root ) + l;\n}"}
{"source": "java", "target": "python", "source_program": " static int minDaysToEmpty ( int C , int l ) {\n  if ( l >= C ) return C ;\n  double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2 ;\n  return ( int ) ( Math . ceil ( eq_root ) + l ) ;\n}", "target_program": " def minDaysToEmpty ( C , l ) :\n    if ( l >= C ) : return C\n    eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2\n    return math.ceil ( eq_root ) + l"}
{"source": "java", "target": "cpp", "source_program": " static int minDaysToEmpty ( int C , int l ) {\n  if ( l >= C ) return C ;\n  double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2 ;\n  return ( int ) ( Math . ceil ( eq_root ) + l ) ;\n}", "target_program": " int minDaysToEmpty ( int C, int l ) {\n  if ( l >= C ) return C;\n  double eq_root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2;\n  return std :: ceil ( eq_root ) + l;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minDaysToEmpty ( int C, int l ) {\n  if ( l >= C ) return C;\n  double eq_root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2;\n  return std :: ceil ( eq_root ) + l;\n}", "target_program": " static int minDaysToEmpty ( int C , int l ) {\n  if ( l >= C ) return C ;\n  double eq_root = ( Math . sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2 ;\n  return ( int ) ( Math . ceil ( eq_root ) + l ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minDaysToEmpty ( int C, int l ) {\n  if ( l >= C ) return C;\n  double eq_root = ( std :: sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2;\n  return std :: ceil ( eq_root ) + l;\n}", "target_program": " def minDaysToEmpty ( C , l ) :\n    if ( l >= C ) : return C\n    eq_root = ( math.sqrt ( 1 + 8 * ( C - l ) ) - 1 ) / 2\n    return math.ceil ( eq_root ) + l"}
{"source": "python", "target": "java", "source_program": " def reversingString ( str , start , end ) :\n    while ( start < end ) :\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        str = ( str [ : end ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ end + 1 : ] ) ;\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        start += 1 ;\n        end -= 1 ;\n    return str ;", "target_program": " static String reversingString ( char [ ] str , int start , int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ] ;\n    str [ end ] ^= str [ start ] ;\n    str [ start ] ^= str [ end ] ;\n    ++ start ;\n    -- end ;\n  }\n  return String . valueOf ( str ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def reversingString ( str , start , end ) :\n    while ( start < end ) :\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        str = ( str [ : end ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ end + 1 : ] ) ;\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        start += 1 ;\n        end -= 1 ;\n    return str ;", "target_program": " string reversingString ( string str, int start, int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ];\n    str [ end ] ^= str [ start ];\n    str [ start ] ^= str [ end ];\n    ++ start;\n    -- end;\n  }\n  return str;\n}"}
{"source": "java", "target": "python", "source_program": " static String reversingString ( char [ ] str , int start , int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ] ;\n    str [ end ] ^= str [ start ] ;\n    str [ start ] ^= str [ end ] ;\n    ++ start ;\n    -- end ;\n  }\n  return String . valueOf ( str ) ;\n}", "target_program": " def reversingString ( str , start , end ) :\n    while ( start < end ) :\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        str = ( str [ : end ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ end + 1 : ] ) ;\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        start += 1 ;\n        end -= 1 ;\n    return str ;"}
{"source": "java", "target": "cpp", "source_program": " static String reversingString ( char [ ] str , int start , int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ] ;\n    str [ end ] ^= str [ start ] ;\n    str [ start ] ^= str [ end ] ;\n    ++ start ;\n    -- end ;\n  }\n  return String . valueOf ( str ) ;\n}", "target_program": " string reversingString ( string str, int start, int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ];\n    str [ end ] ^= str [ start ];\n    str [ start ] ^= str [ end ];\n    ++ start;\n    -- end;\n  }\n  return str;\n}"}
{"source": "cpp", "target": "java", "source_program": " string reversingString ( string str, int start, int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ];\n    str [ end ] ^= str [ start ];\n    str [ start ] ^= str [ end ];\n    ++ start;\n    -- end;\n  }\n  return str;\n}", "target_program": " static String reversingString ( char [ ] str , int start , int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ] ;\n    str [ end ] ^= str [ start ] ;\n    str [ start ] ^= str [ end ] ;\n    ++ start ;\n    -- end ;\n  }\n  return String . valueOf ( str ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string reversingString ( string str, int start, int end ) {\n  while ( start < end ) {\n    str [ start ] ^= str [ end ];\n    str [ end ] ^= str [ start ];\n    str [ start ] ^= str [ end ];\n    ++ start;\n    -- end;\n  }\n  return str;\n}", "target_program": " def reversingString ( str , start , end ) :\n    while ( start < end ) :\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        str = ( str [ : end ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ end + 1 : ] ) ;\n        str = ( str [ : start ] + chr ( ord ( str [ start ] ) ^ ord ( str [ end ] ) ) + str [ start + 1 : ] ) ;\n        start += 1 ;\n        end -= 1 ;\n    return str ;"}
{"source": "python", "target": "java", "source_program": " def lis ( arr ) :\n    n = len ( arr )\n    lis = [ 1 ] * n\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 :\n                lis [ i ] = lis [ j ] + 1\n    maximum = 0\n    for i in range ( n ) :\n        maximum = max ( maximum , lis [ i ] )\n    return maximum", "target_program": " static int lis ( int arr [ ] , int n ) {\n  int lis [ ] = new int [ n ] ;\n  int i , j , max = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return max ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lis ( arr ) :\n    n = len ( arr )\n    lis = [ 1 ] * n\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 :\n                lis [ i ] = lis [ j ] + 1\n    maximum = 0\n    for i in range ( n ) :\n        maximum = max ( maximum , lis [ i ] )\n    return maximum", "target_program": " int lis ( int arr [ ], int n ) {\n  int lis [ n ];\n  lis [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    lis [ i ] = 1;\n    for ( int j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  }\n  return * max_element ( lis, lis + n );\n}"}
{"source": "java", "target": "python", "source_program": " static int lis ( int arr [ ] , int n ) {\n  int lis [ ] = new int [ n ] ;\n  int i , j , max = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return max ;\n}", "target_program": " def lis ( arr ) :\n    n = len ( arr )\n    lis = [ 1 ] * n\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 :\n                lis [ i ] = lis [ j ] + 1\n    maximum = 0\n    for i in range ( n ) :\n        maximum = max ( maximum , lis [ i ] )\n    return maximum"}
{"source": "java", "target": "cpp", "source_program": " static int lis ( int arr [ ] , int n ) {\n  int lis [ ] = new int [ n ] ;\n  int i , j , max = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return max ;\n}", "target_program": " int lis ( int arr [ ], int n ) {\n  int lis [ n ];\n  lis [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    lis [ i ] = 1;\n    for ( int j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  }\n  return * max_element ( lis, lis + n );\n}"}
{"source": "cpp", "target": "java", "source_program": " int lis ( int arr [ ], int n ) {\n  int lis [ n ];\n  lis [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    lis [ i ] = 1;\n    for ( int j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  }\n  return * max_element ( lis, lis + n );\n}", "target_program": " static int lis ( int arr [ ] , int n ) {\n  int lis [ ] = new int [ n ] ;\n  int i , j , max = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) lis [ i ] = 1 ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) for ( j = 0 ;\n  j < i ;\n  j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( max < lis [ i ] ) max = lis [ i ] ;\n  return max ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lis ( int arr [ ], int n ) {\n  int lis [ n ];\n  lis [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    lis [ i ] = 1;\n    for ( int j = 0;\n    j < i;\n    j ++ ) if ( arr [ i ] > arr [ j ] && lis [ i ] < lis [ j ] + 1 ) lis [ i ] = lis [ j ] + 1;\n  }\n  return * max_element ( lis, lis + n );\n}", "target_program": " def lis ( arr ) :\n    n = len ( arr )\n    lis = [ 1 ] * n\n    for i in range ( 1 , n ) :\n        for j in range ( 0 , i ) :\n            if arr [ i ] > arr [ j ] and lis [ i ] < lis [ j ] + 1 :\n                lis [ i ] = lis [ j ] + 1\n    maximum = 0\n    for i in range ( n ) :\n        maximum = max ( maximum , lis [ i ] )\n    return maximum"}
{"source": "python", "target": "java", "source_program": " def getMedian ( ar1 , ar2 , n ) :\n    i = 0\n    j = 0\n    m1 = - 1\n    m2 = - 1\n    count = 0\n    while count < n + 1 :\n        count += 1\n        if i == n :\n            m1 = m2\n            m2 = ar2 [ 0 ]\n            break\n        elif j == n :\n            m1 = m2\n            m2 = ar1 [ 0 ]\n            break\n        if ar1 [ i ] < ar2 [ j ] :\n            m1 = m2\n            m2 = ar1 [ i ]\n            i += 1\n        else :\n            m1 = m2\n            m2 = ar2 [ j ]\n            j += 1\n    return ( m1 + m2 ) / 2", "target_program": " static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  int count ;\n  int m1 = - 1 , m2 = - 1 ;\n  for ( count = 0 ;\n  count <= n ;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2 ;\n      m2 = ar2 [ 0 ] ;\n      break ;\n    }\n    else if ( j == n ) {\n      m1 = m2 ;\n      m2 = ar1 [ 0 ] ;\n      break ;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2 ;\n      m2 = ar1 [ i ] ;\n      i ++ ;\n    }\n    else {\n      m1 = m2 ;\n      m2 = ar2 [ j ] ;\n      j ++ ;\n    }\n  }\n  return ( m1 + m2 ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getMedian ( ar1 , ar2 , n ) :\n    i = 0\n    j = 0\n    m1 = - 1\n    m2 = - 1\n    count = 0\n    while count < n + 1 :\n        count += 1\n        if i == n :\n            m1 = m2\n            m2 = ar2 [ 0 ]\n            break\n        elif j == n :\n            m1 = m2\n            m2 = ar1 [ 0 ]\n            break\n        if ar1 [ i ] < ar2 [ j ] :\n            m1 = m2\n            m2 = ar1 [ i ]\n            i += 1\n        else :\n            m1 = m2\n            m2 = ar2 [ j ]\n            j += 1\n    return ( m1 + m2 ) / 2", "target_program": " int getMedian ( int ar1 [ ], int ar2 [ ], int n ) {\n  int i = 0;\n  int j = 0;\n  int count;\n  int m1 = - 1, m2 = - 1;\n  for ( count = 0;\n  count <= n;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2;\n      m2 = ar2 [ 0 ];\n      break;\n    }\n    else if ( j == n ) {\n      m1 = m2;\n      m2 = ar1 [ 0 ];\n      break;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2;\n      m2 = ar1 [ i ];\n      i ++;\n    }\n    else {\n      m1 = m2;\n      m2 = ar2 [ j ];\n      j ++;\n    }\n  }\n  return ( m1 + m2 ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  int count ;\n  int m1 = - 1 , m2 = - 1 ;\n  for ( count = 0 ;\n  count <= n ;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2 ;\n      m2 = ar2 [ 0 ] ;\n      break ;\n    }\n    else if ( j == n ) {\n      m1 = m2 ;\n      m2 = ar1 [ 0 ] ;\n      break ;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2 ;\n      m2 = ar1 [ i ] ;\n      i ++ ;\n    }\n    else {\n      m1 = m2 ;\n      m2 = ar2 [ j ] ;\n      j ++ ;\n    }\n  }\n  return ( m1 + m2 ) / 2 ;\n}", "target_program": " def getMedian ( ar1 , ar2 , n ) :\n    i = 0\n    j = 0\n    m1 = - 1\n    m2 = - 1\n    count = 0\n    while count < n + 1 :\n        count += 1\n        if i == n :\n            m1 = m2\n            m2 = ar2 [ 0 ]\n            break\n        elif j == n :\n            m1 = m2\n            m2 = ar1 [ 0 ]\n            break\n        if ar1 [ i ] < ar2 [ j ] :\n            m1 = m2\n            m2 = ar1 [ i ]\n            i += 1\n        else :\n            m1 = m2\n            m2 = ar2 [ j ]\n            j += 1\n    return ( m1 + m2 ) / 2"}
{"source": "java", "target": "cpp", "source_program": " static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  int count ;\n  int m1 = - 1 , m2 = - 1 ;\n  for ( count = 0 ;\n  count <= n ;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2 ;\n      m2 = ar2 [ 0 ] ;\n      break ;\n    }\n    else if ( j == n ) {\n      m1 = m2 ;\n      m2 = ar1 [ 0 ] ;\n      break ;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2 ;\n      m2 = ar1 [ i ] ;\n      i ++ ;\n    }\n    else {\n      m1 = m2 ;\n      m2 = ar2 [ j ] ;\n      j ++ ;\n    }\n  }\n  return ( m1 + m2 ) / 2 ;\n}", "target_program": " int getMedian ( int ar1 [ ], int ar2 [ ], int n ) {\n  int i = 0;\n  int j = 0;\n  int count;\n  int m1 = - 1, m2 = - 1;\n  for ( count = 0;\n  count <= n;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2;\n      m2 = ar2 [ 0 ];\n      break;\n    }\n    else if ( j == n ) {\n      m1 = m2;\n      m2 = ar1 [ 0 ];\n      break;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2;\n      m2 = ar1 [ i ];\n      i ++;\n    }\n    else {\n      m1 = m2;\n      m2 = ar2 [ j ];\n      j ++;\n    }\n  }\n  return ( m1 + m2 ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getMedian ( int ar1 [ ], int ar2 [ ], int n ) {\n  int i = 0;\n  int j = 0;\n  int count;\n  int m1 = - 1, m2 = - 1;\n  for ( count = 0;\n  count <= n;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2;\n      m2 = ar2 [ 0 ];\n      break;\n    }\n    else if ( j == n ) {\n      m1 = m2;\n      m2 = ar1 [ 0 ];\n      break;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2;\n      m2 = ar1 [ i ];\n      i ++;\n    }\n    else {\n      m1 = m2;\n      m2 = ar2 [ j ];\n      j ++;\n    }\n  }\n  return ( m1 + m2 ) / 2;\n}", "target_program": " static int getMedian ( int ar1 [ ] , int ar2 [ ] , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  int count ;\n  int m1 = - 1 , m2 = - 1 ;\n  for ( count = 0 ;\n  count <= n ;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2 ;\n      m2 = ar2 [ 0 ] ;\n      break ;\n    }\n    else if ( j == n ) {\n      m1 = m2 ;\n      m2 = ar1 [ 0 ] ;\n      break ;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2 ;\n      m2 = ar1 [ i ] ;\n      i ++ ;\n    }\n    else {\n      m1 = m2 ;\n      m2 = ar2 [ j ] ;\n      j ++ ;\n    }\n  }\n  return ( m1 + m2 ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getMedian ( int ar1 [ ], int ar2 [ ], int n ) {\n  int i = 0;\n  int j = 0;\n  int count;\n  int m1 = - 1, m2 = - 1;\n  for ( count = 0;\n  count <= n;\n  count ++ ) {\n    if ( i == n ) {\n      m1 = m2;\n      m2 = ar2 [ 0 ];\n      break;\n    }\n    else if ( j == n ) {\n      m1 = m2;\n      m2 = ar1 [ 0 ];\n      break;\n    }\n    if ( ar1 [ i ] < ar2 [ j ] ) {\n      m1 = m2;\n      m2 = ar1 [ i ];\n      i ++;\n    }\n    else {\n      m1 = m2;\n      m2 = ar2 [ j ];\n      j ++;\n    }\n  }\n  return ( m1 + m2 ) / 2;\n}", "target_program": " def getMedian ( ar1 , ar2 , n ) :\n    i = 0\n    j = 0\n    m1 = - 1\n    m2 = - 1\n    count = 0\n    while count < n + 1 :\n        count += 1\n        if i == n :\n            m1 = m2\n            m2 = ar2 [ 0 ]\n            break\n        elif j == n :\n            m1 = m2\n            m2 = ar1 [ 0 ]\n            break\n        if ar1 [ i ] < ar2 [ j ] :\n            m1 = m2\n            m2 = ar1 [ i ]\n            i += 1\n        else :\n            m1 = m2\n            m2 = ar2 [ j ]\n            j += 1\n    return ( m1 + m2 ) / 2"}
{"source": "python", "target": "java", "source_program": " def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ 0 ] * n\n    concat = str_ + str_\n    for i in range ( n ) :\n        arr [ i ] = concat [ i : n + i ]\n    arr.sort ( )\n    return arr [ 0 ]", "target_program": " static String minLexRotation ( String str ) {\n  int n = str . length ( ) ;\n  String arr [ ] = new String [ n ] ;\n  String concat = str + str ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = concat . substring ( i , i + n ) ;\n  }\n  Arrays . sort ( arr ) ;\n  return arr [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ 0 ] * n\n    concat = str_ + str_\n    for i in range ( n ) :\n        arr [ i ] = concat [ i : n + i ]\n    arr.sort ( )\n    return arr [ 0 ]", "target_program": " string minLexRotation ( string str ) {\n  int n = str . length ( );\n  string arr [ n ];\n  string concat = str + str;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = concat . substr ( i, n );\n  sort ( arr, arr + n );\n  return arr [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static String minLexRotation ( String str ) {\n  int n = str . length ( ) ;\n  String arr [ ] = new String [ n ] ;\n  String concat = str + str ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = concat . substring ( i , i + n ) ;\n  }\n  Arrays . sort ( arr ) ;\n  return arr [ 0 ] ;\n}", "target_program": " def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ 0 ] * n\n    concat = str_ + str_\n    for i in range ( n ) :\n        arr [ i ] = concat [ i : n + i ]\n    arr.sort ( )\n    return arr [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static String minLexRotation ( String str ) {\n  int n = str . length ( ) ;\n  String arr [ ] = new String [ n ] ;\n  String concat = str + str ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = concat . substring ( i , i + n ) ;\n  }\n  Arrays . sort ( arr ) ;\n  return arr [ 0 ] ;\n}", "target_program": " string minLexRotation ( string str ) {\n  int n = str . length ( );\n  string arr [ n ];\n  string concat = str + str;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = concat . substr ( i, n );\n  sort ( arr, arr + n );\n  return arr [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " string minLexRotation ( string str ) {\n  int n = str . length ( );\n  string arr [ n ];\n  string concat = str + str;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = concat . substr ( i, n );\n  sort ( arr, arr + n );\n  return arr [ 0 ];\n}", "target_program": " static String minLexRotation ( String str ) {\n  int n = str . length ( ) ;\n  String arr [ ] = new String [ n ] ;\n  String concat = str + str ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = concat . substring ( i , i + n ) ;\n  }\n  Arrays . sort ( arr ) ;\n  return arr [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string minLexRotation ( string str ) {\n  int n = str . length ( );\n  string arr [ n ];\n  string concat = str + str;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = concat . substr ( i, n );\n  sort ( arr, arr + n );\n  return arr [ 0 ];\n}", "target_program": " def minLexRotation ( str_ ) :\n    n = len ( str_ )\n    arr = [ 0 ] * n\n    concat = str_ + str_\n    for i in range ( n ) :\n        arr [ i ] = concat [ i : n + i ]\n    arr.sort ( )\n    return arr [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def interpolationSearch ( arr , n , x ) :\n    lo = 0\n    hi = ( n - 1 )\n    while lo <= hi and x >= arr [ lo ] and x <= arr [ hi ] :\n        if lo == hi :\n            if arr [ lo ] == x :\n                return lo ;\n            return - 1 ;\n        pos = lo + int ( ( ( float ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) )\n        if arr [ pos ] == x :\n            return pos\n        if arr [ pos ] < x :\n            lo = pos + 1 ;\n        else :\n            hi = pos - 1 ;\n    return - 1", "target_program": " static int interpolationSearch ( int x ) {\n  int lo = 0 , hi = ( arr . length - 1 ) ;\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo ;\n      return - 1 ;\n    }\n    int pos = lo + ( ( ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) ;\n    if ( arr [ pos ] == x ) return pos ;\n    if ( arr [ pos ] < x ) lo = pos + 1 ;\n    else hi = pos - 1 ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def interpolationSearch ( arr , n , x ) :\n    lo = 0\n    hi = ( n - 1 )\n    while lo <= hi and x >= arr [ lo ] and x <= arr [ hi ] :\n        if lo == hi :\n            if arr [ lo ] == x :\n                return lo ;\n            return - 1 ;\n        pos = lo + int ( ( ( float ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) )\n        if arr [ pos ] == x :\n            return pos\n        if arr [ pos ] < x :\n            lo = pos + 1 ;\n        else :\n            hi = pos - 1 ;\n    return - 1", "target_program": " int interpolationSearch ( int arr [ ], int n, int x ) {\n  int lo = 0, hi = ( n - 1 );\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo;\n      return - 1;\n    }\n    int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) );\n    if ( arr [ pos ] == x ) return pos;\n    if ( arr [ pos ] < x ) lo = pos + 1;\n    else hi = pos - 1;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int interpolationSearch ( int x ) {\n  int lo = 0 , hi = ( arr . length - 1 ) ;\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo ;\n      return - 1 ;\n    }\n    int pos = lo + ( ( ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) ;\n    if ( arr [ pos ] == x ) return pos ;\n    if ( arr [ pos ] < x ) lo = pos + 1 ;\n    else hi = pos - 1 ;\n  }\n  return - 1 ;\n}", "target_program": " def interpolationSearch ( arr , n , x ) :\n    lo = 0\n    hi = ( n - 1 )\n    while lo <= hi and x >= arr [ lo ] and x <= arr [ hi ] :\n        if lo == hi :\n            if arr [ lo ] == x :\n                return lo ;\n            return - 1 ;\n        pos = lo + int ( ( ( float ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) )\n        if arr [ pos ] == x :\n            return pos\n        if arr [ pos ] < x :\n            lo = pos + 1 ;\n        else :\n            hi = pos - 1 ;\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int interpolationSearch ( int x ) {\n  int lo = 0 , hi = ( arr . length - 1 ) ;\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo ;\n      return - 1 ;\n    }\n    int pos = lo + ( ( ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) ;\n    if ( arr [ pos ] == x ) return pos ;\n    if ( arr [ pos ] < x ) lo = pos + 1 ;\n    else hi = pos - 1 ;\n  }\n  return - 1 ;\n}", "target_program": " int interpolationSearch ( int arr [ ], int n, int x ) {\n  int lo = 0, hi = ( n - 1 );\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo;\n      return - 1;\n    }\n    int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) );\n    if ( arr [ pos ] == x ) return pos;\n    if ( arr [ pos ] < x ) lo = pos + 1;\n    else hi = pos - 1;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int interpolationSearch ( int arr [ ], int n, int x ) {\n  int lo = 0, hi = ( n - 1 );\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo;\n      return - 1;\n    }\n    int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) );\n    if ( arr [ pos ] == x ) return pos;\n    if ( arr [ pos ] < x ) lo = pos + 1;\n    else hi = pos - 1;\n  }\n  return - 1;\n}", "target_program": " static int interpolationSearch ( int x ) {\n  int lo = 0 , hi = ( arr . length - 1 ) ;\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo ;\n      return - 1 ;\n    }\n    int pos = lo + ( ( ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) ;\n    if ( arr [ pos ] == x ) return pos ;\n    if ( arr [ pos ] < x ) lo = pos + 1 ;\n    else hi = pos - 1 ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int interpolationSearch ( int arr [ ], int n, int x ) {\n  int lo = 0, hi = ( n - 1 );\n  while ( lo <= hi && x >= arr [ lo ] && x <= arr [ hi ] ) {\n    if ( lo == hi ) {\n      if ( arr [ lo ] == x ) return lo;\n      return - 1;\n    }\n    int pos = lo + ( ( ( double ) ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) );\n    if ( arr [ pos ] == x ) return pos;\n    if ( arr [ pos ] < x ) lo = pos + 1;\n    else hi = pos - 1;\n  }\n  return - 1;\n}", "target_program": " def interpolationSearch ( arr , n , x ) :\n    lo = 0\n    hi = ( n - 1 )\n    while lo <= hi and x >= arr [ lo ] and x <= arr [ hi ] :\n        if lo == hi :\n            if arr [ lo ] == x :\n                return lo ;\n            return - 1 ;\n        pos = lo + int ( ( ( float ( hi - lo ) / ( arr [ hi ] - arr [ lo ] ) ) * ( x - arr [ lo ] ) ) )\n        if arr [ pos ] == x :\n            return pos\n        if arr [ pos ] < x :\n            lo = pos + 1 ;\n        else :\n            hi = pos - 1 ;\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count , l , r = 0 , 0 , n - 1\n    while ( l < m and r >= 0 ) :\n        if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :\n            l += 1\n            r -= 1\n            count += 1\n        elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :\n            l += 1\n        else :\n            r -= 1\n    return count", "target_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++ ;\n      r -- ;\n      count ++ ;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++ ;\n    else r -- ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count , l , r = 0 , 0 , n - 1\n    while ( l < m and r >= 0 ) :\n        if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :\n            l += 1\n            r -= 1\n            count += 1\n        elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :\n            l += 1\n        else :\n            r -= 1\n    return count", "target_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++;\n      r --;\n      count ++;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++;\n    else r --;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++ ;\n      r -- ;\n      count ++ ;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++ ;\n    else r -- ;\n  }\n  return count ;\n}", "target_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count , l , r = 0 , 0 , n - 1\n    while ( l < m and r >= 0 ) :\n        if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :\n            l += 1\n            r -= 1\n            count += 1\n        elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :\n            l += 1\n        else :\n            r -= 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++ ;\n      r -- ;\n      count ++ ;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++ ;\n    else r -- ;\n  }\n  return count ;\n}", "target_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++;\n      r --;\n      count ++;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++;\n    else r --;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++;\n      r --;\n      count ++;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++;\n    else r --;\n  }\n  return count;\n}", "target_program": " static int countPairs ( int arr1 [ ] , int arr2 [ ] , int m , int n , int x ) {\n  int count = 0 ;\n  int l = 0 , r = n - 1 ;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++ ;\n      r -- ;\n      count ++ ;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++ ;\n    else r -- ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPairs ( int arr1 [ ], int arr2 [ ], int m, int n, int x ) {\n  int count = 0;\n  int l = 0, r = n - 1;\n  while ( l < m && r >= 0 ) {\n    if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) {\n      l ++;\n      r --;\n      count ++;\n    }\n    else if ( ( arr1 [ l ] + arr2 [ r ] ) < x ) l ++;\n    else r --;\n  }\n  return count;\n}", "target_program": " def countPairs ( arr1 , arr2 , m , n , x ) :\n    count , l , r = 0 , 0 , n - 1\n    while ( l < m and r >= 0 ) :\n        if ( ( arr1 [ l ] + arr2 [ r ] ) == x ) :\n            l += 1\n            r -= 1\n            count += 1\n        elif ( ( arr1 [ l ] + arr2 [ r ] ) < x ) :\n            l += 1\n        else :\n            r -= 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def countSubSets ( arr , n ) :\n    us = set ( )\n    even_count = 0\n    for i in range ( n ) :\n        if arr [ i ] % 2 == 0 :\n            us.add ( arr [ i ] )\n    for i in us :\n        even_count += 1\n    return pow ( 2 , even_count ) - 1", "target_program": " static int countSubsets ( int arr [ ] , int n ) {\n  HashSet < Integer > us = new HashSet < > ( ) ;\n  int even_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . add ( arr [ i ] ) ;\n  even_count = us . size ( ) ;\n  return ( int ) ( Math . pow ( 2 , even_count ) - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSubSets ( arr , n ) :\n    us = set ( )\n    even_count = 0\n    for i in range ( n ) :\n        if arr [ i ] % 2 == 0 :\n            us.add ( arr [ i ] )\n    for i in us :\n        even_count += 1\n    return pow ( 2 , even_count ) - 1", "target_program": " int countSubsets ( int arr [ ], int n ) {\n  unordered_set < int > us;\n  int even_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . insert ( arr [ i ] );\n  unordered_set < int > :: iterator itr;\n  for ( itr = us . begin ( );\n  itr != us . end ( );\n  itr ++ ) even_count ++;\n  return ( pow ( 2, even_count ) - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int countSubsets ( int arr [ ] , int n ) {\n  HashSet < Integer > us = new HashSet < > ( ) ;\n  int even_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . add ( arr [ i ] ) ;\n  even_count = us . size ( ) ;\n  return ( int ) ( Math . pow ( 2 , even_count ) - 1 ) ;\n}", "target_program": " def countSubSets ( arr , n ) :\n    us = set ( )\n    even_count = 0\n    for i in range ( n ) :\n        if arr [ i ] % 2 == 0 :\n            us.add ( arr [ i ] )\n    for i in us :\n        even_count += 1\n    return pow ( 2 , even_count ) - 1"}
{"source": "java", "target": "cpp", "source_program": " static int countSubsets ( int arr [ ] , int n ) {\n  HashSet < Integer > us = new HashSet < > ( ) ;\n  int even_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . add ( arr [ i ] ) ;\n  even_count = us . size ( ) ;\n  return ( int ) ( Math . pow ( 2 , even_count ) - 1 ) ;\n}", "target_program": " int countSubsets ( int arr [ ], int n ) {\n  unordered_set < int > us;\n  int even_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . insert ( arr [ i ] );\n  unordered_set < int > :: iterator itr;\n  for ( itr = us . begin ( );\n  itr != us . end ( );\n  itr ++ ) even_count ++;\n  return ( pow ( 2, even_count ) - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSubsets ( int arr [ ], int n ) {\n  unordered_set < int > us;\n  int even_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . insert ( arr [ i ] );\n  unordered_set < int > :: iterator itr;\n  for ( itr = us . begin ( );\n  itr != us . end ( );\n  itr ++ ) even_count ++;\n  return ( pow ( 2, even_count ) - 1 );\n}", "target_program": " static int countSubsets ( int arr [ ] , int n ) {\n  HashSet < Integer > us = new HashSet < > ( ) ;\n  int even_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . add ( arr [ i ] ) ;\n  even_count = us . size ( ) ;\n  return ( int ) ( Math . pow ( 2 , even_count ) - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSubsets ( int arr [ ], int n ) {\n  unordered_set < int > us;\n  int even_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( arr [ i ] % 2 == 0 ) us . insert ( arr [ i ] );\n  unordered_set < int > :: iterator itr;\n  for ( itr = us . begin ( );\n  itr != us . end ( );\n  itr ++ ) even_count ++;\n  return ( pow ( 2, even_count ) - 1 );\n}", "target_program": " def countSubSets ( arr , n ) :\n    us = set ( )\n    even_count = 0\n    for i in range ( n ) :\n        if arr [ i ] % 2 == 0 :\n            us.add ( arr [ i ] )\n    for i in us :\n        even_count += 1\n    return pow ( 2 , even_count ) - 1"}
{"source": "python", "target": "java", "source_program": " def countOccurrences ( arr , n , x ) :\n    res = 0\n    for i in range ( n ) :\n        if x == arr [ i ] :\n            res += 1\n    return res", "target_program": " static int countOccurrences ( int arr [ ] , int n , int x ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( x == arr [ i ] ) res ++ ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countOccurrences ( arr , n , x ) :\n    res = 0\n    for i in range ( n ) :\n        if x == arr [ i ] :\n            res += 1\n    return res", "target_program": " int countOccurrences ( int arr [ ], int n, int x ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( x == arr [ i ] ) res ++;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countOccurrences ( int arr [ ] , int n , int x ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( x == arr [ i ] ) res ++ ;\n  return res ;\n}", "target_program": " def countOccurrences ( arr , n , x ) :\n    res = 0\n    for i in range ( n ) :\n        if x == arr [ i ] :\n            res += 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countOccurrences ( int arr [ ] , int n , int x ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( x == arr [ i ] ) res ++ ;\n  return res ;\n}", "target_program": " int countOccurrences ( int arr [ ], int n, int x ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( x == arr [ i ] ) res ++;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countOccurrences ( int arr [ ], int n, int x ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( x == arr [ i ] ) res ++;\n  return res;\n}", "target_program": " static int countOccurrences ( int arr [ ] , int n , int x ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( x == arr [ i ] ) res ++ ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countOccurrences ( int arr [ ], int n, int x ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( x == arr [ i ] ) res ++;\n  return res;\n}", "target_program": " def countOccurrences ( arr , n , x ) :\n    res = 0\n    for i in range ( n ) :\n        if x == arr [ i ] :\n            res += 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def Restore_Tree ( S , E ) :\n    Identity = N * [ 0 ]\n    for i in range ( N ) :\n        Identity [ Start [ i ] ] = i\n    parent = N * [ - 1 ]\n    curr_parent = Identity [ 0 ]\n    for j in range ( 1 , N ) :\n        child = Identity [ j ]\n        if End [ child ] - j > 1 :\n            parent [ child ] = curr_parent\n            curr_parent = child\n        else :\n            parent [ child ] = curr_parent\n            while End [ child ] == End [ parent [ child ] ] :\n                child = parent [ child ]\n                curr_parent = parent [ child ]\n                if curr_parent == Identity [ 0 ] :\n                    break\n    for i in range ( N ) :\n        parent [ i ] += 1\n    return parent", "target_program": " static int [ ] Restore_Tree ( int [ ] S , int [ ] End ) {\n  int [ ] Identity = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) Identity [ S [ i ] ] = i ;\n  int [ ] parent = new int [ N ] ;\n  Arrays . fill ( parent , - 1 ) ;\n  int curr_parent = Identity [ 0 ] ;\n  for ( int j = 1 ;\n  j < N ;\n  j ++ ) {\n    int child = Identity [ j ] ;\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent ;\n      curr_parent = child ;\n    }\n    else {\n      parent [ child ] = curr_parent ;\n      while ( parent [ child ] > - 1 && End [ child ] == End [ parent [ child ] ] ) {\n        child = parent [ child ] ;\n        curr_parent = parent [ child ] ;\n        if ( curr_parent == Identity [ 0 ] ) break ;\n      }\n    }\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) parent [ i ] += 1 ;\n  return parent ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def Restore_Tree ( S , E ) :\n    Identity = N * [ 0 ]\n    for i in range ( N ) :\n        Identity [ Start [ i ] ] = i\n    parent = N * [ - 1 ]\n    curr_parent = Identity [ 0 ]\n    for j in range ( 1 , N ) :\n        child = Identity [ j ]\n        if End [ child ] - j > 1 :\n            parent [ child ] = curr_parent\n            curr_parent = child\n        else :\n            parent [ child ] = curr_parent\n            while End [ child ] == End [ parent [ child ] ] :\n                child = parent [ child ]\n                curr_parent = parent [ child ]\n                if curr_parent == Identity [ 0 ] :\n                    break\n    for i in range ( N ) :\n        parent [ i ] += 1\n    return parent", "target_program": " vector < int > Restore_Tree ( int Start [ ], int End [ ] ) {\n  vector < int > Identity ( N, 0 );\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    Identity [ Start [ i ] ] = i;\n  }\n  vector < int > parent ( N, - 1 );\n  int curr_parent = Identity [ 0 ];\n  for ( int j = 1;\n  j < N;\n  j ++ ) {\n    int child = Identity [ j ];\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent;\n      curr_parent = child;\n    }\n    else parent [ child ] = curr_parent;\n    while ( End [ child ] == End [ parent [ child ] ] ) {\n      child = parent [ child ];\n      curr_parent = parent [ child ];\n      if ( curr_parent == Identity [ 0 ] ) break;\n    }\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) parent [ i ] += 1;\n  return parent;\n}"}
{"source": "java", "target": "python", "source_program": " static int [ ] Restore_Tree ( int [ ] S , int [ ] End ) {\n  int [ ] Identity = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) Identity [ S [ i ] ] = i ;\n  int [ ] parent = new int [ N ] ;\n  Arrays . fill ( parent , - 1 ) ;\n  int curr_parent = Identity [ 0 ] ;\n  for ( int j = 1 ;\n  j < N ;\n  j ++ ) {\n    int child = Identity [ j ] ;\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent ;\n      curr_parent = child ;\n    }\n    else {\n      parent [ child ] = curr_parent ;\n      while ( parent [ child ] > - 1 && End [ child ] == End [ parent [ child ] ] ) {\n        child = parent [ child ] ;\n        curr_parent = parent [ child ] ;\n        if ( curr_parent == Identity [ 0 ] ) break ;\n      }\n    }\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) parent [ i ] += 1 ;\n  return parent ;\n}", "target_program": " def Restore_Tree ( S , E ) :\n    Identity = N * [ 0 ]\n    for i in range ( N ) :\n        Identity [ Start [ i ] ] = i\n    parent = N * [ - 1 ]\n    curr_parent = Identity [ 0 ]\n    for j in range ( 1 , N ) :\n        child = Identity [ j ]\n        if End [ child ] - j > 1 :\n            parent [ child ] = curr_parent\n            curr_parent = child\n        else :\n            parent [ child ] = curr_parent\n            while End [ child ] == End [ parent [ child ] ] :\n                child = parent [ child ]\n                curr_parent = parent [ child ]\n                if curr_parent == Identity [ 0 ] :\n                    break\n    for i in range ( N ) :\n        parent [ i ] += 1\n    return parent"}
{"source": "java", "target": "cpp", "source_program": " static int [ ] Restore_Tree ( int [ ] S , int [ ] End ) {\n  int [ ] Identity = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) Identity [ S [ i ] ] = i ;\n  int [ ] parent = new int [ N ] ;\n  Arrays . fill ( parent , - 1 ) ;\n  int curr_parent = Identity [ 0 ] ;\n  for ( int j = 1 ;\n  j < N ;\n  j ++ ) {\n    int child = Identity [ j ] ;\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent ;\n      curr_parent = child ;\n    }\n    else {\n      parent [ child ] = curr_parent ;\n      while ( parent [ child ] > - 1 && End [ child ] == End [ parent [ child ] ] ) {\n        child = parent [ child ] ;\n        curr_parent = parent [ child ] ;\n        if ( curr_parent == Identity [ 0 ] ) break ;\n      }\n    }\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) parent [ i ] += 1 ;\n  return parent ;\n}", "target_program": " vector < int > Restore_Tree ( int Start [ ], int End [ ] ) {\n  vector < int > Identity ( N, 0 );\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    Identity [ Start [ i ] ] = i;\n  }\n  vector < int > parent ( N, - 1 );\n  int curr_parent = Identity [ 0 ];\n  for ( int j = 1;\n  j < N;\n  j ++ ) {\n    int child = Identity [ j ];\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent;\n      curr_parent = child;\n    }\n    else parent [ child ] = curr_parent;\n    while ( End [ child ] == End [ parent [ child ] ] ) {\n      child = parent [ child ];\n      curr_parent = parent [ child ];\n      if ( curr_parent == Identity [ 0 ] ) break;\n    }\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) parent [ i ] += 1;\n  return parent;\n}"}
{"source": "cpp", "target": "java", "source_program": " vector < int > Restore_Tree ( int Start [ ], int End [ ] ) {\n  vector < int > Identity ( N, 0 );\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    Identity [ Start [ i ] ] = i;\n  }\n  vector < int > parent ( N, - 1 );\n  int curr_parent = Identity [ 0 ];\n  for ( int j = 1;\n  j < N;\n  j ++ ) {\n    int child = Identity [ j ];\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent;\n      curr_parent = child;\n    }\n    else parent [ child ] = curr_parent;\n    while ( End [ child ] == End [ parent [ child ] ] ) {\n      child = parent [ child ];\n      curr_parent = parent [ child ];\n      if ( curr_parent == Identity [ 0 ] ) break;\n    }\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) parent [ i ] += 1;\n  return parent;\n}", "target_program": " static int [ ] Restore_Tree ( int [ ] S , int [ ] End ) {\n  int [ ] Identity = new int [ N ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) Identity [ S [ i ] ] = i ;\n  int [ ] parent = new int [ N ] ;\n  Arrays . fill ( parent , - 1 ) ;\n  int curr_parent = Identity [ 0 ] ;\n  for ( int j = 1 ;\n  j < N ;\n  j ++ ) {\n    int child = Identity [ j ] ;\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent ;\n      curr_parent = child ;\n    }\n    else {\n      parent [ child ] = curr_parent ;\n      while ( parent [ child ] > - 1 && End [ child ] == End [ parent [ child ] ] ) {\n        child = parent [ child ] ;\n        curr_parent = parent [ child ] ;\n        if ( curr_parent == Identity [ 0 ] ) break ;\n      }\n    }\n  }\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) parent [ i ] += 1 ;\n  return parent ;\n}"}
{"source": "cpp", "target": "python", "source_program": " vector < int > Restore_Tree ( int Start [ ], int End [ ] ) {\n  vector < int > Identity ( N, 0 );\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    Identity [ Start [ i ] ] = i;\n  }\n  vector < int > parent ( N, - 1 );\n  int curr_parent = Identity [ 0 ];\n  for ( int j = 1;\n  j < N;\n  j ++ ) {\n    int child = Identity [ j ];\n    if ( End [ child ] - j > 1 ) {\n      parent [ child ] = curr_parent;\n      curr_parent = child;\n    }\n    else parent [ child ] = curr_parent;\n    while ( End [ child ] == End [ parent [ child ] ] ) {\n      child = parent [ child ];\n      curr_parent = parent [ child ];\n      if ( curr_parent == Identity [ 0 ] ) break;\n    }\n  }\n  for ( int i = 0;\n  i < N;\n  i ++ ) parent [ i ] += 1;\n  return parent;\n}", "target_program": " def Restore_Tree ( S , E ) :\n    Identity = N * [ 0 ]\n    for i in range ( N ) :\n        Identity [ Start [ i ] ] = i\n    parent = N * [ - 1 ]\n    curr_parent = Identity [ 0 ]\n    for j in range ( 1 , N ) :\n        child = Identity [ j ]\n        if End [ child ] - j > 1 :\n            parent [ child ] = curr_parent\n            curr_parent = child\n        else :\n            parent [ child ] = curr_parent\n            while End [ child ] == End [ parent [ child ] ] :\n                child = parent [ child ]\n                curr_parent = parent [ child ]\n                if curr_parent == Identity [ 0 ] :\n                    break\n    for i in range ( N ) :\n        parent [ i ] += 1\n    return parent"}
{"source": "python", "target": "java", "source_program": " def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2", "target_program": " static int countOccurrences ( String s , int K ) {\n  int n = s . length ( ) ;\n  int C = 0 , c1 = 0 , c2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) c1 ++ ;\n    if ( s . charAt ( i ) == 'b' ) {\n      c2 ++ ;\n      C += c1 ;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2", "target_program": " int countOccurrences ( string s, int K ) {\n  int n = s . length ( );\n  int C, c1 = 0, c2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s [ i ] == 'a' ) c1 ++;\n    if ( s [ i ] == 'b' ) {\n      c2 ++;\n      C += c1;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2;\n}"}
{"source": "java", "target": "python", "source_program": " static int countOccurrences ( String s , int K ) {\n  int n = s . length ( ) ;\n  int C = 0 , c1 = 0 , c2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) c1 ++ ;\n    if ( s . charAt ( i ) == 'b' ) {\n      c2 ++ ;\n      C += c1 ;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;\n}", "target_program": " def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2"}
{"source": "java", "target": "cpp", "source_program": " static int countOccurrences ( String s , int K ) {\n  int n = s . length ( ) ;\n  int C = 0 , c1 = 0 , c2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) c1 ++ ;\n    if ( s . charAt ( i ) == 'b' ) {\n      c2 ++ ;\n      C += c1 ;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;\n}", "target_program": " int countOccurrences ( string s, int K ) {\n  int n = s . length ( );\n  int C, c1 = 0, c2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s [ i ] == 'a' ) c1 ++;\n    if ( s [ i ] == 'b' ) {\n      c2 ++;\n      C += c1;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countOccurrences ( string s, int K ) {\n  int n = s . length ( );\n  int C, c1 = 0, c2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s [ i ] == 'a' ) c1 ++;\n    if ( s [ i ] == 'b' ) {\n      c2 ++;\n      C += c1;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2;\n}", "target_program": " static int countOccurrences ( String s , int K ) {\n  int n = s . length ( ) ;\n  int C = 0 , c1 = 0 , c2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) c1 ++ ;\n    if ( s . charAt ( i ) == 'b' ) {\n      c2 ++ ;\n      C += c1 ;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countOccurrences ( string s, int K ) {\n  int n = s . length ( );\n  int C, c1 = 0, c2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s [ i ] == 'a' ) c1 ++;\n    if ( s [ i ] == 'b' ) {\n      c2 ++;\n      C += c1;\n    }\n  }\n  return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2;\n}", "target_program": " def countOccurrences ( s , K ) :\n    n = len ( s )\n    c1 = 0\n    c2 = 0\n    C = 0\n    for i in range ( n ) :\n        if s [ i ] == 'a' :\n            c1 += 1\n        if s [ i ] == 'b' :\n            c2 += 1\n            C += c1\n    return C * K + ( K * ( K - 1 ) / 2 ) * c1 * c2"}
{"source": "python", "target": "java", "source_program": " def countNonEmptySubstr ( str ) :\n    n = len ( str ) ;\n    return int ( n * ( n + 1 ) / 2 ) ;", "target_program": " static int countNonEmptySubstr ( String str ) {\n  int n = str . length ( ) ;\n  return n * ( n + 1 ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countNonEmptySubstr ( str ) :\n    n = len ( str ) ;\n    return int ( n * ( n + 1 ) / 2 ) ;", "target_program": " int countNonEmptySubstr ( string str ) {\n  int n = str . length ( );\n  return n * ( n + 1 ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int countNonEmptySubstr ( String str ) {\n  int n = str . length ( ) ;\n  return n * ( n + 1 ) / 2 ;\n}", "target_program": " def countNonEmptySubstr ( str ) :\n    n = len ( str ) ;\n    return int ( n * ( n + 1 ) / 2 ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int countNonEmptySubstr ( String str ) {\n  int n = str . length ( ) ;\n  return n * ( n + 1 ) / 2 ;\n}", "target_program": " int countNonEmptySubstr ( string str ) {\n  int n = str . length ( );\n  return n * ( n + 1 ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countNonEmptySubstr ( string str ) {\n  int n = str . length ( );\n  return n * ( n + 1 ) / 2;\n}", "target_program": " static int countNonEmptySubstr ( String str ) {\n  int n = str . length ( ) ;\n  return n * ( n + 1 ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countNonEmptySubstr ( string str ) {\n  int n = str . length ( );\n  return n * ( n + 1 ) / 2;\n}", "target_program": " def countNonEmptySubstr ( str ) :\n    n = len ( str ) ;\n    return int ( n * ( n + 1 ) / 2 ) ;"}
{"source": "python", "target": "java", "source_program": " def maximumChars ( str1 ) :\n    n = len ( str1 )\n    res = - 1\n    firstInd = [ - 1 for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        first_ind = firstInd [ ord ( str1 [ i ] ) ]\n        if ( first_ind == - 1 ) :\n            firstInd [ ord ( str1 [ i ] ) ] = i\n        else :\n            res = max ( res , abs ( i - first_ind - 1 ) )\n    return res", "target_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  int [ ] firstInd = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) firstInd [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int first_ind = firstInd [ str . charAt ( i ) ] ;\n    if ( first_ind == - 1 ) firstInd [ str . charAt ( i ) ] = i ;\n    else res = Math . max ( res , Math . abs ( i - first_ind - 1 ) ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumChars ( str1 ) :\n    n = len ( str1 )\n    res = - 1\n    firstInd = [ - 1 for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        first_ind = firstInd [ ord ( str1 [ i ] ) ]\n        if ( first_ind == - 1 ) :\n            firstInd [ ord ( str1 [ i ] ) ] = i\n        else :\n            res = max ( res , abs ( i - first_ind - 1 ) )\n    return res", "target_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  int firstInd [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) firstInd [ i ] = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int first_ind = firstInd [ str [ i ] ];\n    if ( first_ind == - 1 ) firstInd [ str [ i ] ] = i;\n    else res = max ( res, abs ( i - first_ind - 1 ) );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  int [ ] firstInd = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) firstInd [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int first_ind = firstInd [ str . charAt ( i ) ] ;\n    if ( first_ind == - 1 ) firstInd [ str . charAt ( i ) ] = i ;\n    else res = Math . max ( res , Math . abs ( i - first_ind - 1 ) ) ;\n  }\n  return res ;\n}", "target_program": " def maximumChars ( str1 ) :\n    n = len ( str1 )\n    res = - 1\n    firstInd = [ - 1 for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        first_ind = firstInd [ ord ( str1 [ i ] ) ]\n        if ( first_ind == - 1 ) :\n            firstInd [ ord ( str1 [ i ] ) ] = i\n        else :\n            res = max ( res , abs ( i - first_ind - 1 ) )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  int [ ] firstInd = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) firstInd [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int first_ind = firstInd [ str . charAt ( i ) ] ;\n    if ( first_ind == - 1 ) firstInd [ str . charAt ( i ) ] = i ;\n    else res = Math . max ( res , Math . abs ( i - first_ind - 1 ) ) ;\n  }\n  return res ;\n}", "target_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  int firstInd [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) firstInd [ i ] = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int first_ind = firstInd [ str [ i ] ];\n    if ( first_ind == - 1 ) firstInd [ str [ i ] ] = i;\n    else res = max ( res, abs ( i - first_ind - 1 ) );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  int firstInd [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) firstInd [ i ] = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int first_ind = firstInd [ str [ i ] ];\n    if ( first_ind == - 1 ) firstInd [ str [ i ] ] = i;\n    else res = max ( res, abs ( i - first_ind - 1 ) );\n  }\n  return res;\n}", "target_program": " static int maximumChars ( String str ) {\n  int n = str . length ( ) ;\n  int res = - 1 ;\n  int [ ] firstInd = new int [ MAX_CHAR ] ;\n  for ( int i = 0 ;\n  i < MAX_CHAR ;\n  i ++ ) firstInd [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int first_ind = firstInd [ str . charAt ( i ) ] ;\n    if ( first_ind == - 1 ) firstInd [ str . charAt ( i ) ] = i ;\n    else res = Math . max ( res , Math . abs ( i - first_ind - 1 ) ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumChars ( string & str ) {\n  int n = str . length ( );\n  int res = - 1;\n  int firstInd [ MAX_CHAR ];\n  for ( int i = 0;\n  i < MAX_CHAR;\n  i ++ ) firstInd [ i ] = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int first_ind = firstInd [ str [ i ] ];\n    if ( first_ind == - 1 ) firstInd [ str [ i ] ] = i;\n    else res = max ( res, abs ( i - first_ind - 1 ) );\n  }\n  return res;\n}", "target_program": " def maximumChars ( str1 ) :\n    n = len ( str1 )\n    res = - 1\n    firstInd = [ - 1 for i in range ( MAX_CHAR ) ]\n    for i in range ( n ) :\n        first_ind = firstInd [ ord ( str1 [ i ] ) ]\n        if ( first_ind == - 1 ) :\n            firstInd [ ord ( str1 [ i ] ) ] = i\n        else :\n            res = max ( res , abs ( i - first_ind - 1 ) )\n    return res"}
{"source": "python", "target": "java", "source_program": " def printSubsequences ( str ) :\n    n = len ( str )\n    opsize = int ( pow ( 2 , n - 1 ) )\n    for counter in range ( opsize ) :\n        for j in range ( n ) :\n            print ( str [ j ] , end = \"\" )\n            if ( counter & ( 1 << j ) ) :\n                print ( \"\" , end = \"\" )\n        print ( \"\\n\" , end = \"\" )", "target_program": " static void printSubsequences ( String s ) {\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  int opsize = ( int ) ( Math . pow ( 2 , n - 1 ) ) ;\n  for ( int counter = 0 ;\n  counter < opsize ;\n  counter ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      System . out . print ( str [ j ] ) ;\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSubsequences ( str ) :\n    n = len ( str )\n    opsize = int ( pow ( 2 , n - 1 ) )\n    for counter in range ( opsize ) :\n        for j in range ( n ) :\n            print ( str [ j ] , end = \"\" )\n            if ( counter & ( 1 << j ) ) :\n                print ( \"\" , end = \"\" )\n        print ( \"\\n\" , end = \"\" )", "target_program": " void printSubsequences ( string str ) {\n  int n = str . length ( );\n  unsigned int opsize = pow ( 2, n - 1 );\n  for ( int counter = 0;\n  counter < opsize;\n  counter ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      cout << str [ j ];\n      if ( counter & ( 1 << j ) ) cout << \" \";\n    }\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printSubsequences ( String s ) {\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  int opsize = ( int ) ( Math . pow ( 2 , n - 1 ) ) ;\n  for ( int counter = 0 ;\n  counter < opsize ;\n  counter ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      System . out . print ( str [ j ] ) ;\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " def printSubsequences ( str ) :\n    n = len ( str )\n    opsize = int ( pow ( 2 , n - 1 ) )\n    for counter in range ( opsize ) :\n        for j in range ( n ) :\n            print ( str [ j ] , end = \"\" )\n            if ( counter & ( 1 << j ) ) :\n                print ( \"\" , end = \"\" )\n        print ( \"\\n\" , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void printSubsequences ( String s ) {\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  int opsize = ( int ) ( Math . pow ( 2 , n - 1 ) ) ;\n  for ( int counter = 0 ;\n  counter < opsize ;\n  counter ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      System . out . print ( str [ j ] ) ;\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}", "target_program": " void printSubsequences ( string str ) {\n  int n = str . length ( );\n  unsigned int opsize = pow ( 2, n - 1 );\n  for ( int counter = 0;\n  counter < opsize;\n  counter ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      cout << str [ j ];\n      if ( counter & ( 1 << j ) ) cout << \" \";\n    }\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSubsequences ( string str ) {\n  int n = str . length ( );\n  unsigned int opsize = pow ( 2, n - 1 );\n  for ( int counter = 0;\n  counter < opsize;\n  counter ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      cout << str [ j ];\n      if ( counter & ( 1 << j ) ) cout << \" \";\n    }\n    cout << endl;\n  }\n}", "target_program": " static void printSubsequences ( String s ) {\n  char [ ] str = s . toCharArray ( ) ;\n  int n = str . length ;\n  int opsize = ( int ) ( Math . pow ( 2 , n - 1 ) ) ;\n  for ( int counter = 0 ;\n  counter < opsize ;\n  counter ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      System . out . print ( str [ j ] ) ;\n      if ( ( counter & ( 1 << j ) ) > 0 ) System . out . print ( \" \" ) ;\n    }\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSubsequences ( string str ) {\n  int n = str . length ( );\n  unsigned int opsize = pow ( 2, n - 1 );\n  for ( int counter = 0;\n  counter < opsize;\n  counter ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      cout << str [ j ];\n      if ( counter & ( 1 << j ) ) cout << \" \";\n    }\n    cout << endl;\n  }\n}", "target_program": " def printSubsequences ( str ) :\n    n = len ( str )\n    opsize = int ( pow ( 2 , n - 1 ) )\n    for counter in range ( opsize ) :\n        for j in range ( n ) :\n            print ( str [ j ] , end = \"\" )\n            if ( counter & ( 1 << j ) ) :\n                print ( \"\" , end = \"\" )\n        print ( \"\\n\" , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def firstNonRepeating ( arr , n ) :\n    for i in range ( n ) :\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            return arr [ i ]\n    return - 1", "target_program": " static int firstNonRepeating ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;\n    if ( j == n ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def firstNonRepeating ( arr , n ) :\n    for i in range ( n ) :\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            return arr [ i ]\n    return - 1", "target_program": " int firstNonRepeating ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break;\n    if ( j == n ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int firstNonRepeating ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;\n    if ( j == n ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " def firstNonRepeating ( arr , n ) :\n    for i in range ( n ) :\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            return arr [ i ]\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int firstNonRepeating ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;\n    if ( j == n ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " int firstNonRepeating ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break;\n    if ( j == n ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int firstNonRepeating ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break;\n    if ( j == n ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " static int firstNonRepeating ( int arr [ ] , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break ;\n    if ( j == n ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int firstNonRepeating ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ i ] == arr [ j ] ) break;\n    if ( j == n ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " def firstNonRepeating ( arr , n ) :\n    for i in range ( n ) :\n        j = 0\n        while ( j < n ) :\n            if ( i != j and arr [ i ] == arr [ j ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            return arr [ i ]\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def calculateSum ( n ) :\n    sum = 0\n    for row in range ( n ) :\n        sum = sum + ( 1 << row )\n    return sum", "target_program": " static long calculateSum ( int n ) {\n  long sum = 0 ;\n  for ( int row = 0 ;\n  row < n ;\n  row ++ ) {\n    sum = sum + ( 1 << row ) ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def calculateSum ( n ) :\n    sum = 0\n    for row in range ( n ) :\n        sum = sum + ( 1 << row )\n    return sum", "target_program": " long long int calculateSum ( int n ) {\n  long long int sum = 0;\n  for ( int row = 0;\n  row < n;\n  row ++ ) {\n    sum = sum + ( 1 << row );\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static long calculateSum ( int n ) {\n  long sum = 0 ;\n  for ( int row = 0 ;\n  row < n ;\n  row ++ ) {\n    sum = sum + ( 1 << row ) ;\n  }\n  return sum ;\n}", "target_program": " def calculateSum ( n ) :\n    sum = 0\n    for row in range ( n ) :\n        sum = sum + ( 1 << row )\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static long calculateSum ( int n ) {\n  long sum = 0 ;\n  for ( int row = 0 ;\n  row < n ;\n  row ++ ) {\n    sum = sum + ( 1 << row ) ;\n  }\n  return sum ;\n}", "target_program": " long long int calculateSum ( int n ) {\n  long long int sum = 0;\n  for ( int row = 0;\n  row < n;\n  row ++ ) {\n    sum = sum + ( 1 << row );\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int calculateSum ( int n ) {\n  long long int sum = 0;\n  for ( int row = 0;\n  row < n;\n  row ++ ) {\n    sum = sum + ( 1 << row );\n  }\n  return sum;\n}", "target_program": " static long calculateSum ( int n ) {\n  long sum = 0 ;\n  for ( int row = 0 ;\n  row < n ;\n  row ++ ) {\n    sum = sum + ( 1 << row ) ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int calculateSum ( int n ) {\n  long long int sum = 0;\n  for ( int row = 0;\n  row < n;\n  row ++ ) {\n    sum = sum + ( 1 << row );\n  }\n  return sum;\n}", "target_program": " def calculateSum ( n ) :\n    sum = 0\n    for row in range ( n ) :\n        sum = sum + ( 1 << row )\n    return sum"}
{"source": "python", "target": "java", "source_program": " def countSubsequences ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount", "target_program": " static int countSubsequences ( String s ) {\n  int aCount = 0 ;\n  int bCount = 0 ;\n  int cCount = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) aCount = ( 1 + 2 * aCount ) ;\n    else if ( s . charAt ( i ) == 'b' ) bCount = ( aCount + 2 * bCount ) ;\n    else if ( s . charAt ( i ) == 'c' ) cCount = ( bCount + 2 * cCount ) ;\n  }\n  return cCount ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSubsequences ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount", "target_program": " int countSubsequences ( string s ) {\n  int aCount = 0;\n  int bCount = 0;\n  int cCount = 0;\n  for ( unsigned int i = 0;\n  i < s . size ( );\n  i ++ ) {\n    if ( s [ i ] == 'a' ) aCount = ( 1 + 2 * aCount );\n    else if ( s [ i ] == 'b' ) bCount = ( aCount + 2 * bCount );\n    else if ( s [ i ] == 'c' ) cCount = ( bCount + 2 * cCount );\n  }\n  return cCount;\n}"}
{"source": "java", "target": "python", "source_program": " static int countSubsequences ( String s ) {\n  int aCount = 0 ;\n  int bCount = 0 ;\n  int cCount = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) aCount = ( 1 + 2 * aCount ) ;\n    else if ( s . charAt ( i ) == 'b' ) bCount = ( aCount + 2 * bCount ) ;\n    else if ( s . charAt ( i ) == 'c' ) cCount = ( bCount + 2 * cCount ) ;\n  }\n  return cCount ;\n}", "target_program": " def countSubsequences ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount"}
{"source": "java", "target": "cpp", "source_program": " static int countSubsequences ( String s ) {\n  int aCount = 0 ;\n  int bCount = 0 ;\n  int cCount = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) aCount = ( 1 + 2 * aCount ) ;\n    else if ( s . charAt ( i ) == 'b' ) bCount = ( aCount + 2 * bCount ) ;\n    else if ( s . charAt ( i ) == 'c' ) cCount = ( bCount + 2 * cCount ) ;\n  }\n  return cCount ;\n}", "target_program": " int countSubsequences ( string s ) {\n  int aCount = 0;\n  int bCount = 0;\n  int cCount = 0;\n  for ( unsigned int i = 0;\n  i < s . size ( );\n  i ++ ) {\n    if ( s [ i ] == 'a' ) aCount = ( 1 + 2 * aCount );\n    else if ( s [ i ] == 'b' ) bCount = ( aCount + 2 * bCount );\n    else if ( s [ i ] == 'c' ) cCount = ( bCount + 2 * cCount );\n  }\n  return cCount;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSubsequences ( string s ) {\n  int aCount = 0;\n  int bCount = 0;\n  int cCount = 0;\n  for ( unsigned int i = 0;\n  i < s . size ( );\n  i ++ ) {\n    if ( s [ i ] == 'a' ) aCount = ( 1 + 2 * aCount );\n    else if ( s [ i ] == 'b' ) bCount = ( aCount + 2 * bCount );\n    else if ( s [ i ] == 'c' ) cCount = ( bCount + 2 * cCount );\n  }\n  return cCount;\n}", "target_program": " static int countSubsequences ( String s ) {\n  int aCount = 0 ;\n  int bCount = 0 ;\n  int cCount = 0 ;\n  for ( int i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) == 'a' ) aCount = ( 1 + 2 * aCount ) ;\n    else if ( s . charAt ( i ) == 'b' ) bCount = ( aCount + 2 * bCount ) ;\n    else if ( s . charAt ( i ) == 'c' ) cCount = ( bCount + 2 * cCount ) ;\n  }\n  return cCount ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSubsequences ( string s ) {\n  int aCount = 0;\n  int bCount = 0;\n  int cCount = 0;\n  for ( unsigned int i = 0;\n  i < s . size ( );\n  i ++ ) {\n    if ( s [ i ] == 'a' ) aCount = ( 1 + 2 * aCount );\n    else if ( s [ i ] == 'b' ) bCount = ( aCount + 2 * bCount );\n    else if ( s [ i ] == 'c' ) cCount = ( bCount + 2 * cCount );\n  }\n  return cCount;\n}", "target_program": " def countSubsequences ( s ) :\n    aCount = 0\n    bCount = 0\n    cCount = 0\n    for i in range ( len ( s ) ) :\n        if ( s [ i ] == 'a' ) :\n            aCount = ( 1 + 2 * aCount )\n        elif ( s [ i ] == 'b' ) :\n            bCount = ( aCount + 2 * bCount )\n        elif ( s [ i ] == 'c' ) :\n            cCount = ( bCount + 2 * cCount )\n    return cCount"}
{"source": "python", "target": "java", "source_program": " def isIdentity ( mat , N ) :\n    for row in range ( N ) :\n        for col in range ( N ) :\n            if ( row == col and mat [ row ] [ col ] != 1 ) :\n                return False ;\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False ;\n    return True ;", "target_program": " static boolean isIdentity ( int mat [ ] [ ] , int N ) {\n  for ( int row = 0 ;\n  row < N ;\n  row ++ ) {\n    for ( int col = 0 ;\n    col < N ;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false ;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isIdentity ( mat , N ) :\n    for row in range ( N ) :\n        for col in range ( N ) :\n            if ( row == col and mat [ row ] [ col ] != 1 ) :\n                return False ;\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False ;\n    return True ;", "target_program": " bool isIdentity ( int mat [ ] [ MAX ], int N ) {\n  for ( int row = 0;\n  row < N;\n  row ++ ) {\n    for ( int col = 0;\n    col < N;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false;\n    }\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isIdentity ( int mat [ ] [ ] , int N ) {\n  for ( int row = 0 ;\n  row < N ;\n  row ++ ) {\n    for ( int col = 0 ;\n    col < N ;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false ;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false ;\n    }\n  }\n  return true ;\n}", "target_program": " def isIdentity ( mat , N ) :\n    for row in range ( N ) :\n        for col in range ( N ) :\n            if ( row == col and mat [ row ] [ col ] != 1 ) :\n                return False ;\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False ;\n    return True ;"}
{"source": "java", "target": "cpp", "source_program": " static boolean isIdentity ( int mat [ ] [ ] , int N ) {\n  for ( int row = 0 ;\n  row < N ;\n  row ++ ) {\n    for ( int col = 0 ;\n    col < N ;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false ;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false ;\n    }\n  }\n  return true ;\n}", "target_program": " bool isIdentity ( int mat [ ] [ MAX ], int N ) {\n  for ( int row = 0;\n  row < N;\n  row ++ ) {\n    for ( int col = 0;\n    col < N;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false;\n    }\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isIdentity ( int mat [ ] [ MAX ], int N ) {\n  for ( int row = 0;\n  row < N;\n  row ++ ) {\n    for ( int col = 0;\n    col < N;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false;\n    }\n  }\n  return true;\n}", "target_program": " static boolean isIdentity ( int mat [ ] [ ] , int N ) {\n  for ( int row = 0 ;\n  row < N ;\n  row ++ ) {\n    for ( int col = 0 ;\n    col < N ;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false ;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isIdentity ( int mat [ ] [ MAX ], int N ) {\n  for ( int row = 0;\n  row < N;\n  row ++ ) {\n    for ( int col = 0;\n    col < N;\n    col ++ ) {\n      if ( row == col && mat [ row ] [ col ] != 1 ) return false;\n      else if ( row != col && mat [ row ] [ col ] != 0 ) return false;\n    }\n  }\n  return true;\n}", "target_program": " def isIdentity ( mat , N ) :\n    for row in range ( N ) :\n        for col in range ( N ) :\n            if ( row == col and mat [ row ] [ col ] != 1 ) :\n                return False ;\n            elif ( row != col and mat [ row ] [ col ] != 0 ) :\n                return False ;\n    return True ;"}
{"source": "python", "target": "java", "source_program": " def maxDiff ( arr , n ) :\n    result = 0\n    arr.sort ( )\n    for i in range ( n - 1 ) :\n        if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :\n            result += abs ( arr [ i ] )\n        else :\n            pass\n    if ( arr [ n - 2 ] != arr [ n - 1 ] ) :\n        result += abs ( arr [ n - 1 ] )\n    return result", "target_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int result = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += Math . abs ( arr [ i ] ) ;\n    else i ++ ;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += Math . abs ( arr [ n - 1 ] ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxDiff ( arr , n ) :\n    result = 0\n    arr.sort ( )\n    for i in range ( n - 1 ) :\n        if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :\n            result += abs ( arr [ i ] )\n        else :\n            pass\n    if ( arr [ n - 2 ] != arr [ n - 1 ] ) :\n        result += abs ( arr [ n - 1 ] )\n    return result", "target_program": " int maxDiff ( int arr [ ], int n ) {\n  int result = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += abs ( arr [ i ] );\n    else i ++;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int result = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += Math . abs ( arr [ i ] ) ;\n    else i ++ ;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += Math . abs ( arr [ n - 1 ] ) ;\n  return result ;\n}", "target_program": " def maxDiff ( arr , n ) :\n    result = 0\n    arr.sort ( )\n    for i in range ( n - 1 ) :\n        if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :\n            result += abs ( arr [ i ] )\n        else :\n            pass\n    if ( arr [ n - 2 ] != arr [ n - 1 ] ) :\n        result += abs ( arr [ n - 1 ] )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int result = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += Math . abs ( arr [ i ] ) ;\n    else i ++ ;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += Math . abs ( arr [ n - 1 ] ) ;\n  return result ;\n}", "target_program": " int maxDiff ( int arr [ ], int n ) {\n  int result = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += abs ( arr [ i ] );\n    else i ++;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxDiff ( int arr [ ], int n ) {\n  int result = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += abs ( arr [ i ] );\n    else i ++;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] );\n  return result;\n}", "target_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int result = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += Math . abs ( arr [ i ] ) ;\n    else i ++ ;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += Math . abs ( arr [ n - 1 ] ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxDiff ( int arr [ ], int n ) {\n  int result = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] != arr [ i + 1 ] ) result += abs ( arr [ i ] );\n    else i ++;\n  }\n  if ( arr [ n - 2 ] != arr [ n - 1 ] ) result += abs ( arr [ n - 1 ] );\n  return result;\n}", "target_program": " def maxDiff ( arr , n ) :\n    result = 0\n    arr.sort ( )\n    for i in range ( n - 1 ) :\n        if ( abs ( arr [ i ] ) != abs ( arr [ i + 1 ] ) ) :\n            result += abs ( arr [ i ] )\n        else :\n            pass\n    if ( arr [ n - 2 ] != arr [ n - 1 ] ) :\n        result += abs ( arr [ n - 1 ] )\n    return result"}
{"source": "python", "target": "java", "source_program": " def summingSeries ( n ) :\n    S = 0\n    for i in range ( 1 , n + 1 ) :\n        S += i * i - ( i - 1 ) * ( i - 1 )\n    return S", "target_program": " static int summingSeries ( long n ) {\n  int S = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;\n  return S ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def summingSeries ( n ) :\n    S = 0\n    for i in range ( 1 , n + 1 ) :\n        S += i * i - ( i - 1 ) * ( i - 1 )\n    return S", "target_program": " int summingSeries ( long n ) {\n  int S = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 );\n  return S;\n}"}
{"source": "java", "target": "python", "source_program": " static int summingSeries ( long n ) {\n  int S = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;\n  return S ;\n}", "target_program": " def summingSeries ( n ) :\n    S = 0\n    for i in range ( 1 , n + 1 ) :\n        S += i * i - ( i - 1 ) * ( i - 1 )\n    return S"}
{"source": "java", "target": "cpp", "source_program": " static int summingSeries ( long n ) {\n  int S = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;\n  return S ;\n}", "target_program": " int summingSeries ( long n ) {\n  int S = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 );\n  return S;\n}"}
{"source": "cpp", "target": "java", "source_program": " int summingSeries ( long n ) {\n  int S = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 );\n  return S;\n}", "target_program": " static int summingSeries ( long n ) {\n  int S = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 ) ;\n  return S ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int summingSeries ( long n ) {\n  int S = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) S += i * i - ( i - 1 ) * ( i - 1 );\n  return S;\n}", "target_program": " def summingSeries ( n ) :\n    S = 0\n    for i in range ( 1 , n + 1 ) :\n        S += i * i - ( i - 1 ) * ( i - 1 )\n    return S"}
{"source": "python", "target": "java", "source_program": " def prefixSum2D ( a ) :\n    global C , R\n    psa = [ [ 0 for x in range ( C ) ] for y in range ( R ) ]\n    psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ]\n    for i in range ( 1 , C ) :\n        psa [ 0 ] [ i ] = ( psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] )\n    for i in range ( 0 , R ) :\n        psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] )\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] )\n    for i in range ( 0 , R ) :\n        for j in range ( 0 , C ) :\n            print ( psa [ i ] [ j ] , end = \" \" )\n        print ( )", "target_program": " public static void prefixSum2D ( int a [ ] [ ] ) {\n  int R = a . length ;\n  int C = a [ 0 ] . length ;\n  int psa [ ] [ ] = new int [ R ] [ C ] ;\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < C ;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) for ( int j = 1 ;\n  j < C ;\n  j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ;\n  for ( int i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < C ;\n    j ++ ) System . out . print ( psa [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def prefixSum2D ( a ) :\n    global C , R\n    psa = [ [ 0 for x in range ( C ) ] for y in range ( R ) ]\n    psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ]\n    for i in range ( 1 , C ) :\n        psa [ 0 ] [ i ] = ( psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] )\n    for i in range ( 0 , R ) :\n        psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] )\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] )\n    for i in range ( 0 , R ) :\n        for j in range ( 0 , C ) :\n            print ( psa [ i ] [ j ] , end = \" \" )\n        print ( )", "target_program": " void prefixSum2D ( int a [ ] [ C ] ) {\n  int psa [ R ] [ C ];\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ];\n  for ( int i = 1;\n  i < C;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ];\n  for ( int i = 0;\n  i < R;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ];\n  for ( int i = 1;\n  i < R;\n  i ++ ) {\n    for ( int j = 1;\n    j < C;\n    j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ];\n  }\n  for ( int i = 0;\n  i < R;\n  i ++ ) {\n    for ( int j = 0;\n    j < C;\n    j ++ ) cout << psa [ i ] [ j ] << \" \";\n    cout << \"\\n\";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void prefixSum2D ( int a [ ] [ ] ) {\n  int R = a . length ;\n  int C = a [ 0 ] . length ;\n  int psa [ ] [ ] = new int [ R ] [ C ] ;\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < C ;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) for ( int j = 1 ;\n  j < C ;\n  j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ;\n  for ( int i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < C ;\n    j ++ ) System . out . print ( psa [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " def prefixSum2D ( a ) :\n    global C , R\n    psa = [ [ 0 for x in range ( C ) ] for y in range ( R ) ]\n    psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ]\n    for i in range ( 1 , C ) :\n        psa [ 0 ] [ i ] = ( psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] )\n    for i in range ( 0 , R ) :\n        psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] )\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] )\n    for i in range ( 0 , R ) :\n        for j in range ( 0 , C ) :\n            print ( psa [ i ] [ j ] , end = \" \" )\n        print ( )"}
{"source": "java", "target": "cpp", "source_program": " public static void prefixSum2D ( int a [ ] [ ] ) {\n  int R = a . length ;\n  int C = a [ 0 ] . length ;\n  int psa [ ] [ ] = new int [ R ] [ C ] ;\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < C ;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) for ( int j = 1 ;\n  j < C ;\n  j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ;\n  for ( int i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < C ;\n    j ++ ) System . out . print ( psa [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " void prefixSum2D ( int a [ ] [ C ] ) {\n  int psa [ R ] [ C ];\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ];\n  for ( int i = 1;\n  i < C;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ];\n  for ( int i = 0;\n  i < R;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ];\n  for ( int i = 1;\n  i < R;\n  i ++ ) {\n    for ( int j = 1;\n    j < C;\n    j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ];\n  }\n  for ( int i = 0;\n  i < R;\n  i ++ ) {\n    for ( int j = 0;\n    j < C;\n    j ++ ) cout << psa [ i ] [ j ] << \" \";\n    cout << \"\\n\";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void prefixSum2D ( int a [ ] [ C ] ) {\n  int psa [ R ] [ C ];\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ];\n  for ( int i = 1;\n  i < C;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ];\n  for ( int i = 0;\n  i < R;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ];\n  for ( int i = 1;\n  i < R;\n  i ++ ) {\n    for ( int j = 1;\n    j < C;\n    j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ];\n  }\n  for ( int i = 0;\n  i < R;\n  i ++ ) {\n    for ( int j = 0;\n    j < C;\n    j ++ ) cout << psa [ i ] [ j ] << \" \";\n    cout << \"\\n\";\n  }\n}", "target_program": " public static void prefixSum2D ( int a [ ] [ ] ) {\n  int R = a . length ;\n  int C = a [ 0 ] . length ;\n  int psa [ ] [ ] = new int [ R ] [ C ] ;\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < C ;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] ;\n  for ( int i = 1 ;\n  i < R ;\n  i ++ ) for ( int j = 1 ;\n  j < C ;\n  j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ;\n  for ( int i = 0 ;\n  i < R ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < C ;\n    j ++ ) System . out . print ( psa [ i ] [ j ] + \" \" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void prefixSum2D ( int a [ ] [ C ] ) {\n  int psa [ R ] [ C ];\n  psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ];\n  for ( int i = 1;\n  i < C;\n  i ++ ) psa [ 0 ] [ i ] = psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ];\n  for ( int i = 0;\n  i < R;\n  i ++ ) psa [ i ] [ 0 ] = psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ];\n  for ( int i = 1;\n  i < R;\n  i ++ ) {\n    for ( int j = 1;\n    j < C;\n    j ++ ) psa [ i ] [ j ] = psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ];\n  }\n  for ( int i = 0;\n  i < R;\n  i ++ ) {\n    for ( int j = 0;\n    j < C;\n    j ++ ) cout << psa [ i ] [ j ] << \" \";\n    cout << \"\\n\";\n  }\n}", "target_program": " def prefixSum2D ( a ) :\n    global C , R\n    psa = [ [ 0 for x in range ( C ) ] for y in range ( R ) ]\n    psa [ 0 ] [ 0 ] = a [ 0 ] [ 0 ]\n    for i in range ( 1 , C ) :\n        psa [ 0 ] [ i ] = ( psa [ 0 ] [ i - 1 ] + a [ 0 ] [ i ] )\n    for i in range ( 0 , R ) :\n        psa [ i ] [ 0 ] = ( psa [ i - 1 ] [ 0 ] + a [ i ] [ 0 ] )\n    for i in range ( 1 , R ) :\n        for j in range ( 1 , C ) :\n            psa [ i ] [ j ] = ( psa [ i - 1 ] [ j ] + psa [ i ] [ j - 1 ] - psa [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] )\n    for i in range ( 0 , R ) :\n        for j in range ( 0 , C ) :\n            print ( psa [ i ] [ j ] , end = \" \" )\n        print ( )"}
{"source": "python", "target": "java", "source_program": " def numberOfSquares ( base ) :\n    base = ( base - 2 )\n    base = base / 2\n    return base * ( base + 1 ) / 2", "target_program": " public static int numberOfSquares ( int base ) {\n  base = ( base - 2 ) ;\n  base = base / 2 ;\n  return base * ( base + 1 ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numberOfSquares ( base ) :\n    base = ( base - 2 )\n    base = base / 2\n    return base * ( base + 1 ) / 2", "target_program": " int numberOfSquares ( int base ) {\n  base = ( base - 2 );\n  base = base / 2;\n  return base * ( base + 1 ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " public static int numberOfSquares ( int base ) {\n  base = ( base - 2 ) ;\n  base = base / 2 ;\n  return base * ( base + 1 ) / 2 ;\n}", "target_program": " def numberOfSquares ( base ) :\n    base = ( base - 2 )\n    base = base / 2\n    return base * ( base + 1 ) / 2"}
{"source": "java", "target": "cpp", "source_program": " public static int numberOfSquares ( int base ) {\n  base = ( base - 2 ) ;\n  base = base / 2 ;\n  return base * ( base + 1 ) / 2 ;\n}", "target_program": " int numberOfSquares ( int base ) {\n  base = ( base - 2 );\n  base = base / 2;\n  return base * ( base + 1 ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numberOfSquares ( int base ) {\n  base = ( base - 2 );\n  base = base / 2;\n  return base * ( base + 1 ) / 2;\n}", "target_program": " public static int numberOfSquares ( int base ) {\n  base = ( base - 2 ) ;\n  base = base / 2 ;\n  return base * ( base + 1 ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numberOfSquares ( int base ) {\n  base = ( base - 2 );\n  base = base / 2;\n  return base * ( base + 1 ) / 2;\n}", "target_program": " def numberOfSquares ( base ) :\n    base = ( base - 2 )\n    base = base / 2\n    return base * ( base + 1 ) / 2"}
{"source": "python", "target": "java", "source_program": " def countSubStr ( st , n ) :\n    m = 0\n    for i in range ( 0 , n ) :\n        if ( st [ i ] == '1' ) :\n            m = m + 1\n    return m * ( m - 1 ) // 2", "target_program": " int countSubStr ( char str [ ] , int n ) {\n  int m = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++ ;\n  }\n  return m * ( m - 1 ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSubStr ( st , n ) :\n    m = 0\n    for i in range ( 0 , n ) :\n        if ( st [ i ] == '1' ) :\n            m = m + 1\n    return m * ( m - 1 ) // 2", "target_program": " int countSubStr ( char str [ ] ) {\n  int m = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++;\n  }\n  return m * ( m - 1 ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " int countSubStr ( char str [ ] , int n ) {\n  int m = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++ ;\n  }\n  return m * ( m - 1 ) / 2 ;\n}", "target_program": " def countSubStr ( st , n ) :\n    m = 0\n    for i in range ( 0 , n ) :\n        if ( st [ i ] == '1' ) :\n            m = m + 1\n    return m * ( m - 1 ) // 2"}
{"source": "java", "target": "cpp", "source_program": " int countSubStr ( char str [ ] , int n ) {\n  int m = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++ ;\n  }\n  return m * ( m - 1 ) / 2 ;\n}", "target_program": " int countSubStr ( char str [ ] ) {\n  int m = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++;\n  }\n  return m * ( m - 1 ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSubStr ( char str [ ] ) {\n  int m = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++;\n  }\n  return m * ( m - 1 ) / 2;\n}", "target_program": " int countSubStr ( char str [ ] , int n ) {\n  int m = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++ ;\n  }\n  return m * ( m - 1 ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSubStr ( char str [ ] ) {\n  int m = 0;\n  for ( int i = 0;\n  str [ i ] != '\\0';\n  i ++ ) {\n    if ( str [ i ] == '1' ) m ++;\n  }\n  return m * ( m - 1 ) / 2;\n}", "target_program": " def countSubStr ( st , n ) :\n    m = 0\n    for i in range ( 0 , n ) :\n        if ( st [ i ] == '1' ) :\n            m = m + 1\n    return m * ( m - 1 ) // 2"}
{"source": "python", "target": "java", "source_program": " def isConvertible ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False", "target_program": " static boolean isConvertible ( String str1 , String str2 , int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true ;\n  int commonLength = 0 ;\n  for ( int i = 0 ;\n  i < Math . min ( str1 . length ( ) , str2 . length ( ) ) ;\n  i ++ ) {\n    if ( str1 == str2 ) commonLength ++ ;\n    else break ;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isConvertible ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False", "target_program": " bool isConvertible ( string str1, string str2, int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true;\n  int commonLength = 0;\n  for ( int i = 0;\n  i < min ( str1 . length ( ), str2 . length ( ) );\n  i ++ ) {\n    if ( str1 [ i ] == str2 [ i ] ) commonLength ++;\n    else break;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isConvertible ( String str1 , String str2 , int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true ;\n  int commonLength = 0 ;\n  for ( int i = 0 ;\n  i < Math . min ( str1 . length ( ) , str2 . length ( ) ) ;\n  i ++ ) {\n    if ( str1 == str2 ) commonLength ++ ;\n    else break ;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true ;\n  return false ;\n}", "target_program": " def isConvertible ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isConvertible ( String str1 , String str2 , int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true ;\n  int commonLength = 0 ;\n  for ( int i = 0 ;\n  i < Math . min ( str1 . length ( ) , str2 . length ( ) ) ;\n  i ++ ) {\n    if ( str1 == str2 ) commonLength ++ ;\n    else break ;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true ;\n  return false ;\n}", "target_program": " bool isConvertible ( string str1, string str2, int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true;\n  int commonLength = 0;\n  for ( int i = 0;\n  i < min ( str1 . length ( ), str2 . length ( ) );\n  i ++ ) {\n    if ( str1 [ i ] == str2 [ i ] ) commonLength ++;\n    else break;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isConvertible ( string str1, string str2, int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true;\n  int commonLength = 0;\n  for ( int i = 0;\n  i < min ( str1 . length ( ), str2 . length ( ) );\n  i ++ ) {\n    if ( str1 [ i ] == str2 [ i ] ) commonLength ++;\n    else break;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true;\n  return false;\n}", "target_program": " static boolean isConvertible ( String str1 , String str2 , int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true ;\n  int commonLength = 0 ;\n  for ( int i = 0 ;\n  i < Math . min ( str1 . length ( ) , str2 . length ( ) ) ;\n  i ++ ) {\n    if ( str1 == str2 ) commonLength ++ ;\n    else break ;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isConvertible ( string str1, string str2, int k ) {\n  if ( ( str1 . length ( ) + str2 . length ( ) ) < k ) return true;\n  int commonLength = 0;\n  for ( int i = 0;\n  i < min ( str1 . length ( ), str2 . length ( ) );\n  i ++ ) {\n    if ( str1 [ i ] == str2 [ i ] ) commonLength ++;\n    else break;\n  }\n  if ( ( k - str1 . length ( ) - str2 . length ( ) + 2 * commonLength ) % 2 == 0 ) return true;\n  return false;\n}", "target_program": " def isConvertible ( str1 , str2 , k ) :\n    if ( ( len ( str1 ) + len ( str2 ) ) < k ) :\n        return True\n    commonLength = 0\n    for i in range ( 0 , min ( len ( str1 ) , len ( str2 ) ) , 1 ) :\n        if ( str1 [ i ] == str2 [ i ] ) :\n            commonLength += 1\n        else :\n            break\n    if ( ( k - len ( str1 ) - len ( str2 ) + 2 * commonLength ) % 2 == 0 ) :\n        return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def getOddOccurrence ( arr ) :\n    res = 0\n    for element in arr :\n        res = res ^ element\n    return res", "target_program": " int getOddOccurrence ( int ar [ ] , int ar_size ) {\n  int i ;\n  int res = 0 ;\n  for ( i = 0 ;\n  i < ar_size ;\n  i ++ ) {\n    res = res ^ ar [ i ] ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getOddOccurrence ( arr ) :\n    res = 0\n    for element in arr :\n        res = res ^ element\n    return res", "target_program": " int getOddOccurrence ( int ar [ ], int ar_size ) {\n  int res = 0;\n  for ( int i = 0;\n  i < ar_size;\n  i ++ ) res = res ^ ar [ i ];\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " int getOddOccurrence ( int ar [ ] , int ar_size ) {\n  int i ;\n  int res = 0 ;\n  for ( i = 0 ;\n  i < ar_size ;\n  i ++ ) {\n    res = res ^ ar [ i ] ;\n  }\n  return res ;\n}", "target_program": " def getOddOccurrence ( arr ) :\n    res = 0\n    for element in arr :\n        res = res ^ element\n    return res"}
{"source": "java", "target": "cpp", "source_program": " int getOddOccurrence ( int ar [ ] , int ar_size ) {\n  int i ;\n  int res = 0 ;\n  for ( i = 0 ;\n  i < ar_size ;\n  i ++ ) {\n    res = res ^ ar [ i ] ;\n  }\n  return res ;\n}", "target_program": " int getOddOccurrence ( int ar [ ], int ar_size ) {\n  int res = 0;\n  for ( int i = 0;\n  i < ar_size;\n  i ++ ) res = res ^ ar [ i ];\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getOddOccurrence ( int ar [ ], int ar_size ) {\n  int res = 0;\n  for ( int i = 0;\n  i < ar_size;\n  i ++ ) res = res ^ ar [ i ];\n  return res;\n}", "target_program": " int getOddOccurrence ( int ar [ ] , int ar_size ) {\n  int i ;\n  int res = 0 ;\n  for ( i = 0 ;\n  i < ar_size ;\n  i ++ ) {\n    res = res ^ ar [ i ] ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getOddOccurrence ( int ar [ ], int ar_size ) {\n  int res = 0;\n  for ( int i = 0;\n  i < ar_size;\n  i ++ ) res = res ^ ar [ i ];\n  return res;\n}", "target_program": " def getOddOccurrence ( arr ) :\n    res = 0\n    for element in arr :\n        res = res ^ element\n    return res"}
{"source": "python", "target": "java", "source_program": " def middlesum ( mat , n ) :\n    row_sum = 0\n    col_sum = 0\n    for i in range ( n ) :\n        row_sum += mat [ n // 2 ] [ i ]\n    print ( \"Sum of middle row = \" , row_sum )\n    for i in range ( n ) :\n        col_sum += mat [ i ] [ n // 2 ]\n    print ( \"Sum of middle column = \" , col_sum )", "target_program": " static void middlesum ( int mat [ ] [ ] , int n ) {\n  int row_sum = 0 , col_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ] ;\n  System . out . println ( \"Sum of middle row = \" + row_sum ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ] ;\n  System . out . println ( \"Sum of middle column = \" + col_sum ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def middlesum ( mat , n ) :\n    row_sum = 0\n    col_sum = 0\n    for i in range ( n ) :\n        row_sum += mat [ n // 2 ] [ i ]\n    print ( \"Sum of middle row = \" , row_sum )\n    for i in range ( n ) :\n        col_sum += mat [ i ] [ n // 2 ]\n    print ( \"Sum of middle column = \" , col_sum )", "target_program": " void middlesum ( int mat [ ] [ MAX ], int n ) {\n  int row_sum = 0, col_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ];\n  cout << \"Sum of middle row = \" << row_sum << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ];\n  cout << \"Sum of middle column = \" << col_sum;\n}"}
{"source": "java", "target": "python", "source_program": " static void middlesum ( int mat [ ] [ ] , int n ) {\n  int row_sum = 0 , col_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ] ;\n  System . out . println ( \"Sum of middle row = \" + row_sum ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ] ;\n  System . out . println ( \"Sum of middle column = \" + col_sum ) ;\n}", "target_program": " def middlesum ( mat , n ) :\n    row_sum = 0\n    col_sum = 0\n    for i in range ( n ) :\n        row_sum += mat [ n // 2 ] [ i ]\n    print ( \"Sum of middle row = \" , row_sum )\n    for i in range ( n ) :\n        col_sum += mat [ i ] [ n // 2 ]\n    print ( \"Sum of middle column = \" , col_sum )"}
{"source": "java", "target": "cpp", "source_program": " static void middlesum ( int mat [ ] [ ] , int n ) {\n  int row_sum = 0 , col_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ] ;\n  System . out . println ( \"Sum of middle row = \" + row_sum ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ] ;\n  System . out . println ( \"Sum of middle column = \" + col_sum ) ;\n}", "target_program": " void middlesum ( int mat [ ] [ MAX ], int n ) {\n  int row_sum = 0, col_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ];\n  cout << \"Sum of middle row = \" << row_sum << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ];\n  cout << \"Sum of middle column = \" << col_sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " void middlesum ( int mat [ ] [ MAX ], int n ) {\n  int row_sum = 0, col_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ];\n  cout << \"Sum of middle row = \" << row_sum << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ];\n  cout << \"Sum of middle column = \" << col_sum;\n}", "target_program": " static void middlesum ( int mat [ ] [ ] , int n ) {\n  int row_sum = 0 , col_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ] ;\n  System . out . println ( \"Sum of middle row = \" + row_sum ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ] ;\n  System . out . println ( \"Sum of middle column = \" + col_sum ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void middlesum ( int mat [ ] [ MAX ], int n ) {\n  int row_sum = 0, col_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) row_sum += mat [ n / 2 ] [ i ];\n  cout << \"Sum of middle row = \" << row_sum << endl;\n  for ( int i = 0;\n  i < n;\n  i ++ ) col_sum += mat [ i ] [ n / 2 ];\n  cout << \"Sum of middle column = \" << col_sum;\n}", "target_program": " def middlesum ( mat , n ) :\n    row_sum = 0\n    col_sum = 0\n    for i in range ( n ) :\n        row_sum += mat [ n // 2 ] [ i ]\n    print ( \"Sum of middle row = \" , row_sum )\n    for i in range ( n ) :\n        col_sum += mat [ i ] [ n // 2 ]\n    print ( \"Sum of middle column = \" , col_sum )"}
{"source": "python", "target": "java", "source_program": " def printKDistinct ( arr , n , k ) :\n    dist_count = 0\n    for i in range ( n ) :\n        j = 0\n        while j < n :\n            if ( i != j and arr [ j ] == arr [ i ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            dist_count += 1\n        if ( dist_count == k ) :\n            return arr [ i ]\n    return - 1", "target_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break ;\n    if ( j == n ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printKDistinct ( arr , n , k ) :\n    dist_count = 0\n    for i in range ( n ) :\n        j = 0\n        while j < n :\n            if ( i != j and arr [ j ] == arr [ i ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            dist_count += 1\n        if ( dist_count == k ) :\n            return arr [ i ]\n    return - 1", "target_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break;\n    if ( j == n ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break ;\n    if ( j == n ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " def printKDistinct ( arr , n , k ) :\n    dist_count = 0\n    for i in range ( n ) :\n        j = 0\n        while j < n :\n            if ( i != j and arr [ j ] == arr [ i ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            dist_count += 1\n        if ( dist_count == k ) :\n            return arr [ i ]\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break ;\n    if ( j == n ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break;\n    if ( j == n ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break;\n    if ( j == n ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " static int printKDistinct ( int arr [ ] , int n , int k ) {\n  int dist_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < n ;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break ;\n    if ( j == n ) dist_count ++ ;\n    if ( dist_count == k ) return arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int printKDistinct ( int arr [ ], int n, int k ) {\n  int dist_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < n;\n    j ++ ) if ( i != j && arr [ j ] == arr [ i ] ) break;\n    if ( j == n ) dist_count ++;\n    if ( dist_count == k ) return arr [ i ];\n  }\n  return - 1;\n}", "target_program": " def printKDistinct ( arr , n , k ) :\n    dist_count = 0\n    for i in range ( n ) :\n        j = 0\n        while j < n :\n            if ( i != j and arr [ j ] == arr [ i ] ) :\n                break\n            j += 1\n        if ( j == n ) :\n            dist_count += 1\n        if ( dist_count == k ) :\n            return arr [ i ]\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def mergeIntervals ( arr ) :\n    arr.sort ( key = lambda x : x [ 0 ] )\n    m = [ ]\n    s = - 10000\n    max = - 100000\n    for i in range ( len ( arr ) ) :\n        a = arr [ i ]\n        if a [ 0 ] > max :\n            if i != 0 :\n                m.append ( [ s , max ] )\n            max = a [ 1 ]\n            s = a [ 0 ]\n        else :\n            if a [ 1 ] >= max :\n                max = a [ 1 ]\n    if max != - 100000 and [ s , max ] not in m :\n        m.append ( [ s , max ] )\n    print ( \"The Merged Intervals are :\" , end = \" \" )\n    for i in range ( len ( m ) ) :\n        print ( m [ i ] , end = \" \" )", "target_program": " public static void mergeIntervals ( Interval arr [ ] ) {\n  Arrays . sort ( arr , new Comparator < Interval > ( ) {\n    public int compare ( Interval i1 , Interval i2 ) {\n      return i2 . start - i1 . start ;\n    }\n  }\n  ) ;\n  int index = 0 ;\n  for ( int i = 1 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ index ] . end >= arr [ i ] . start ) {\n      arr [ index ] . end = Math . max ( arr [ index ] . end , arr [ i ] . end ) ;\n      arr [ index ] . start = Math . min ( arr [ index ] . start , arr [ i ] . start ) ;\n    }\n    else {\n      arr [ index ] = arr [ i ] ;\n      index ++ ;\n    }\n  }\n  System . out . print ( \"The Merged Intervals are: \" ) ;\n  for ( int i = 0 ;\n  i <= index ;\n  i ++ ) {\n    System . out . print ( \"[\" + arr [ i ] . start + \",\" + arr [ i ] . end + \"]\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def mergeIntervals ( arr ) :\n    arr.sort ( key = lambda x : x [ 0 ] )\n    m = [ ]\n    s = - 10000\n    max = - 100000\n    for i in range ( len ( arr ) ) :\n        a = arr [ i ]\n        if a [ 0 ] > max :\n            if i != 0 :\n                m.append ( [ s , max ] )\n            max = a [ 1 ]\n            s = a [ 0 ]\n        else :\n            if a [ 1 ] >= max :\n                max = a [ 1 ]\n    if max != - 100000 and [ s , max ] not in m :\n        m.append ( [ s , max ] )\n    print ( \"The Merged Intervals are :\" , end = \" \" )\n    for i in range ( len ( m ) ) :\n        print ( m [ i ] , end = \" \" )", "target_program": " void mergeIntervals ( Interval arr [ ], int n ) {\n  sort ( arr, arr + n, mycomp );\n  int index = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ index ] . e >= arr [ i ] . s ) {\n      arr [ index ] . e = max ( arr [ index ] . e, arr [ i ] . e );\n      arr [ index ] . s = min ( arr [ index ] . s, arr [ i ] . s );\n    }\n    else {\n      arr [ index ] = arr [ i ];\n      index ++;\n    }\n  }\n  cout << \"\\n The Merged Intervals are: \";\n  for ( int i = 0;\n  i <= index;\n  i ++ ) cout << \"[\" << arr [ i ] . s << \", \" << arr [ i ] . e << \"] \";\n}"}
{"source": "java", "target": "python", "source_program": " public static void mergeIntervals ( Interval arr [ ] ) {\n  Arrays . sort ( arr , new Comparator < Interval > ( ) {\n    public int compare ( Interval i1 , Interval i2 ) {\n      return i2 . start - i1 . start ;\n    }\n  }\n  ) ;\n  int index = 0 ;\n  for ( int i = 1 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ index ] . end >= arr [ i ] . start ) {\n      arr [ index ] . end = Math . max ( arr [ index ] . end , arr [ i ] . end ) ;\n      arr [ index ] . start = Math . min ( arr [ index ] . start , arr [ i ] . start ) ;\n    }\n    else {\n      arr [ index ] = arr [ i ] ;\n      index ++ ;\n    }\n  }\n  System . out . print ( \"The Merged Intervals are: \" ) ;\n  for ( int i = 0 ;\n  i <= index ;\n  i ++ ) {\n    System . out . print ( \"[\" + arr [ i ] . start + \",\" + arr [ i ] . end + \"]\" ) ;\n  }\n}", "target_program": " def mergeIntervals ( arr ) :\n    arr.sort ( key = lambda x : x [ 0 ] )\n    m = [ ]\n    s = - 10000\n    max = - 100000\n    for i in range ( len ( arr ) ) :\n        a = arr [ i ]\n        if a [ 0 ] > max :\n            if i != 0 :\n                m.append ( [ s , max ] )\n            max = a [ 1 ]\n            s = a [ 0 ]\n        else :\n            if a [ 1 ] >= max :\n                max = a [ 1 ]\n    if max != - 100000 and [ s , max ] not in m :\n        m.append ( [ s , max ] )\n    print ( \"The Merged Intervals are :\" , end = \" \" )\n    for i in range ( len ( m ) ) :\n        print ( m [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " public static void mergeIntervals ( Interval arr [ ] ) {\n  Arrays . sort ( arr , new Comparator < Interval > ( ) {\n    public int compare ( Interval i1 , Interval i2 ) {\n      return i2 . start - i1 . start ;\n    }\n  }\n  ) ;\n  int index = 0 ;\n  for ( int i = 1 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ index ] . end >= arr [ i ] . start ) {\n      arr [ index ] . end = Math . max ( arr [ index ] . end , arr [ i ] . end ) ;\n      arr [ index ] . start = Math . min ( arr [ index ] . start , arr [ i ] . start ) ;\n    }\n    else {\n      arr [ index ] = arr [ i ] ;\n      index ++ ;\n    }\n  }\n  System . out . print ( \"The Merged Intervals are: \" ) ;\n  for ( int i = 0 ;\n  i <= index ;\n  i ++ ) {\n    System . out . print ( \"[\" + arr [ i ] . start + \",\" + arr [ i ] . end + \"]\" ) ;\n  }\n}", "target_program": " void mergeIntervals ( Interval arr [ ], int n ) {\n  sort ( arr, arr + n, mycomp );\n  int index = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ index ] . e >= arr [ i ] . s ) {\n      arr [ index ] . e = max ( arr [ index ] . e, arr [ i ] . e );\n      arr [ index ] . s = min ( arr [ index ] . s, arr [ i ] . s );\n    }\n    else {\n      arr [ index ] = arr [ i ];\n      index ++;\n    }\n  }\n  cout << \"\\n The Merged Intervals are: \";\n  for ( int i = 0;\n  i <= index;\n  i ++ ) cout << \"[\" << arr [ i ] . s << \", \" << arr [ i ] . e << \"] \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void mergeIntervals ( Interval arr [ ], int n ) {\n  sort ( arr, arr + n, mycomp );\n  int index = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ index ] . e >= arr [ i ] . s ) {\n      arr [ index ] . e = max ( arr [ index ] . e, arr [ i ] . e );\n      arr [ index ] . s = min ( arr [ index ] . s, arr [ i ] . s );\n    }\n    else {\n      arr [ index ] = arr [ i ];\n      index ++;\n    }\n  }\n  cout << \"\\n The Merged Intervals are: \";\n  for ( int i = 0;\n  i <= index;\n  i ++ ) cout << \"[\" << arr [ i ] . s << \", \" << arr [ i ] . e << \"] \";\n}", "target_program": " public static void mergeIntervals ( Interval arr [ ] ) {\n  Arrays . sort ( arr , new Comparator < Interval > ( ) {\n    public int compare ( Interval i1 , Interval i2 ) {\n      return i2 . start - i1 . start ;\n    }\n  }\n  ) ;\n  int index = 0 ;\n  for ( int i = 1 ;\n  i < arr . length ;\n  i ++ ) {\n    if ( arr [ index ] . end >= arr [ i ] . start ) {\n      arr [ index ] . end = Math . max ( arr [ index ] . end , arr [ i ] . end ) ;\n      arr [ index ] . start = Math . min ( arr [ index ] . start , arr [ i ] . start ) ;\n    }\n    else {\n      arr [ index ] = arr [ i ] ;\n      index ++ ;\n    }\n  }\n  System . out . print ( \"The Merged Intervals are: \" ) ;\n  for ( int i = 0 ;\n  i <= index ;\n  i ++ ) {\n    System . out . print ( \"[\" + arr [ i ] . start + \",\" + arr [ i ] . end + \"]\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void mergeIntervals ( Interval arr [ ], int n ) {\n  sort ( arr, arr + n, mycomp );\n  int index = 0;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( arr [ index ] . e >= arr [ i ] . s ) {\n      arr [ index ] . e = max ( arr [ index ] . e, arr [ i ] . e );\n      arr [ index ] . s = min ( arr [ index ] . s, arr [ i ] . s );\n    }\n    else {\n      arr [ index ] = arr [ i ];\n      index ++;\n    }\n  }\n  cout << \"\\n The Merged Intervals are: \";\n  for ( int i = 0;\n  i <= index;\n  i ++ ) cout << \"[\" << arr [ i ] . s << \", \" << arr [ i ] . e << \"] \";\n}", "target_program": " def mergeIntervals ( arr ) :\n    arr.sort ( key = lambda x : x [ 0 ] )\n    m = [ ]\n    s = - 10000\n    max = - 100000\n    for i in range ( len ( arr ) ) :\n        a = arr [ i ]\n        if a [ 0 ] > max :\n            if i != 0 :\n                m.append ( [ s , max ] )\n            max = a [ 1 ]\n            s = a [ 0 ]\n        else :\n            if a [ 1 ] >= max :\n                max = a [ 1 ]\n    if max != - 100000 and [ s , max ] not in m :\n        m.append ( [ s , max ] )\n    print ( \"The Merged Intervals are :\" , end = \" \" )\n    for i in range ( len ( m ) ) :\n        print ( m [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def CountSquares ( a , b ) :\n    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( math.sqrt ( a ) ) + 1 )", "target_program": " double countSquares ( int a , int b ) {\n  return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( Math . sqrt ( a ) ) + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def CountSquares ( a , b ) :\n    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( math.sqrt ( a ) ) + 1 )", "target_program": " int countSquares ( int a, int b ) {\n  return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " double countSquares ( int a , int b ) {\n  return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( Math . sqrt ( a ) ) + 1 ) ;\n}", "target_program": " def CountSquares ( a , b ) :\n    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( math.sqrt ( a ) ) + 1 )"}
{"source": "java", "target": "cpp", "source_program": " double countSquares ( int a , int b ) {\n  return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( Math . sqrt ( a ) ) + 1 ) ;\n}", "target_program": " int countSquares ( int a, int b ) {\n  return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSquares ( int a, int b ) {\n  return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 );\n}", "target_program": " double countSquares ( int a , int b ) {\n  return ( Math . floor ( Math . sqrt ( b ) ) - Math . ceil ( Math . sqrt ( a ) ) + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSquares ( int a, int b ) {\n  return ( floor ( sqrt ( b ) ) - ceil ( sqrt ( a ) ) + 1 );\n}", "target_program": " def CountSquares ( a , b ) :\n    return ( math.floor ( math.sqrt ( b ) ) - math.ceil ( math.sqrt ( a ) ) + 1 )"}
{"source": "python", "target": "java", "source_program": " def findFibSubset ( arr , n ) :\n    m = max ( arr )\n    a = 0\n    b = 1\n    hash = [ ]\n    hash.append ( a )\n    hash.append ( b )\n    while ( b < m ) :\n        c = a + b\n        a = b\n        b = c\n        hash.append ( b )\n    for i in range ( n ) :\n        if arr [ i ] in hash :\n            print ( arr [ i ] , end = \" \" )", "target_program": " public static void findFibSubset ( Integer [ ] x ) {\n  Integer max = Collections . max ( Arrays . asList ( x ) ) ;\n  List < Integer > fib = new ArrayList < Integer > ( ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  Integer a = 0 ;\n  Integer b = 1 ;\n  while ( b < max ) {\n    Integer c = a + b ;\n    a = b ;\n    b = c ;\n    fib . add ( c ) ;\n  }\n  for ( Integer i = 0 ;\n  i < x . length ;\n  i ++ ) {\n    if ( fib . contains ( x [ i ] ) ) {\n      result . add ( x [ i ] ) ;\n    }\n  }\n  System . out . println ( result ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findFibSubset ( arr , n ) :\n    m = max ( arr )\n    a = 0\n    b = 1\n    hash = [ ]\n    hash.append ( a )\n    hash.append ( b )\n    while ( b < m ) :\n        c = a + b\n        a = b\n        b = c\n        hash.append ( b )\n    for i in range ( n ) :\n        if arr [ i ] in hash :\n            print ( arr [ i ] , end = \" \" )", "target_program": " void findFibSubset ( int arr [ ], int n ) {\n  int max = * std :: max_element ( arr, arr + n );\n  int a = 0, b = 1;\n  unordered_set < int > hash;\n  hash . insert ( a );\n  hash . insert ( b );\n  while ( b < max ) {\n    int c = a + b;\n    a = b;\n    b = c;\n    hash . insert ( b );\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash . find ( arr [ i ] ) != hash . end ( ) ) printf ( \"%d \", arr [ i ] );\n}"}
{"source": "java", "target": "python", "source_program": " public static void findFibSubset ( Integer [ ] x ) {\n  Integer max = Collections . max ( Arrays . asList ( x ) ) ;\n  List < Integer > fib = new ArrayList < Integer > ( ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  Integer a = 0 ;\n  Integer b = 1 ;\n  while ( b < max ) {\n    Integer c = a + b ;\n    a = b ;\n    b = c ;\n    fib . add ( c ) ;\n  }\n  for ( Integer i = 0 ;\n  i < x . length ;\n  i ++ ) {\n    if ( fib . contains ( x [ i ] ) ) {\n      result . add ( x [ i ] ) ;\n    }\n  }\n  System . out . println ( result ) ;\n}", "target_program": " def findFibSubset ( arr , n ) :\n    m = max ( arr )\n    a = 0\n    b = 1\n    hash = [ ]\n    hash.append ( a )\n    hash.append ( b )\n    while ( b < m ) :\n        c = a + b\n        a = b\n        b = c\n        hash.append ( b )\n    for i in range ( n ) :\n        if arr [ i ] in hash :\n            print ( arr [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " public static void findFibSubset ( Integer [ ] x ) {\n  Integer max = Collections . max ( Arrays . asList ( x ) ) ;\n  List < Integer > fib = new ArrayList < Integer > ( ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  Integer a = 0 ;\n  Integer b = 1 ;\n  while ( b < max ) {\n    Integer c = a + b ;\n    a = b ;\n    b = c ;\n    fib . add ( c ) ;\n  }\n  for ( Integer i = 0 ;\n  i < x . length ;\n  i ++ ) {\n    if ( fib . contains ( x [ i ] ) ) {\n      result . add ( x [ i ] ) ;\n    }\n  }\n  System . out . println ( result ) ;\n}", "target_program": " void findFibSubset ( int arr [ ], int n ) {\n  int max = * std :: max_element ( arr, arr + n );\n  int a = 0, b = 1;\n  unordered_set < int > hash;\n  hash . insert ( a );\n  hash . insert ( b );\n  while ( b < max ) {\n    int c = a + b;\n    a = b;\n    b = c;\n    hash . insert ( b );\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash . find ( arr [ i ] ) != hash . end ( ) ) printf ( \"%d \", arr [ i ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void findFibSubset ( int arr [ ], int n ) {\n  int max = * std :: max_element ( arr, arr + n );\n  int a = 0, b = 1;\n  unordered_set < int > hash;\n  hash . insert ( a );\n  hash . insert ( b );\n  while ( b < max ) {\n    int c = a + b;\n    a = b;\n    b = c;\n    hash . insert ( b );\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash . find ( arr [ i ] ) != hash . end ( ) ) printf ( \"%d \", arr [ i ] );\n}", "target_program": " public static void findFibSubset ( Integer [ ] x ) {\n  Integer max = Collections . max ( Arrays . asList ( x ) ) ;\n  List < Integer > fib = new ArrayList < Integer > ( ) ;\n  List < Integer > result = new ArrayList < Integer > ( ) ;\n  Integer a = 0 ;\n  Integer b = 1 ;\n  while ( b < max ) {\n    Integer c = a + b ;\n    a = b ;\n    b = c ;\n    fib . add ( c ) ;\n  }\n  for ( Integer i = 0 ;\n  i < x . length ;\n  i ++ ) {\n    if ( fib . contains ( x [ i ] ) ) {\n      result . add ( x [ i ] ) ;\n    }\n  }\n  System . out . println ( result ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findFibSubset ( int arr [ ], int n ) {\n  int max = * std :: max_element ( arr, arr + n );\n  int a = 0, b = 1;\n  unordered_set < int > hash;\n  hash . insert ( a );\n  hash . insert ( b );\n  while ( b < max ) {\n    int c = a + b;\n    a = b;\n    b = c;\n    hash . insert ( b );\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash . find ( arr [ i ] ) != hash . end ( ) ) printf ( \"%d \", arr [ i ] );\n}", "target_program": " def findFibSubset ( arr , n ) :\n    m = max ( arr )\n    a = 0\n    b = 1\n    hash = [ ]\n    hash.append ( a )\n    hash.append ( b )\n    while ( b < m ) :\n        c = a + b\n        a = b\n        b = c\n        hash.append ( b )\n    for i in range ( n ) :\n        if arr [ i ] in hash :\n            print ( arr [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def lexicographicSubConcat ( s ) :\n    n = len ( s ) ;\n    sub_count = ( n * ( n + 1 ) ) // 2 ;\n    arr = [ 0 ] * sub_count ;\n    index = 0 ;\n    for i in range ( n ) :\n        for j in range ( 1 , n - i + 1 ) :\n            arr [ index ] = s [ i : i + j ] ;\n            index += 1 ;\n    arr.sort ( ) ;\n    res = \"\" ;\n    for i in range ( sub_count ) :\n        res += arr [ i ] ;\n    return res ;", "target_program": " static String lexicographicSubConcat ( String s ) {\n  int n = s . length ( ) ;\n  int sub_count = n * ( n + 1 ) / 2 ;\n  String [ ] arr = new String [ sub_count ] ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int len = 1 ;\n  len <= n - i ;\n  len ++ ) {\n    arr [ index ++ ] = s . substring ( i , i + len ) ;\n  }\n  Arrays . sort ( arr ) ;\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < sub_count ;\n  i ++ ) res += arr [ i ] ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lexicographicSubConcat ( s ) :\n    n = len ( s ) ;\n    sub_count = ( n * ( n + 1 ) ) // 2 ;\n    arr = [ 0 ] * sub_count ;\n    index = 0 ;\n    for i in range ( n ) :\n        for j in range ( 1 , n - i + 1 ) :\n            arr [ index ] = s [ i : i + j ] ;\n            index += 1 ;\n    arr.sort ( ) ;\n    res = \"\" ;\n    for i in range ( sub_count ) :\n        res += arr [ i ] ;\n    return res ;", "target_program": " string lexicographicSubConcat ( string s ) {\n  int n = s . length ( );\n  int sub_count = n * ( n + 1 ) / 2;\n  string arr [ sub_count ];\n  int index = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int len = 1;\n  len <= n - i;\n  len ++ ) arr [ index ++ ] = s . substr ( i, len );\n  sort ( arr, arr + sub_count );\n  string res = \"\";\n  for ( int i = 0;\n  i < sub_count;\n  i ++ ) res += arr [ i ];\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static String lexicographicSubConcat ( String s ) {\n  int n = s . length ( ) ;\n  int sub_count = n * ( n + 1 ) / 2 ;\n  String [ ] arr = new String [ sub_count ] ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int len = 1 ;\n  len <= n - i ;\n  len ++ ) {\n    arr [ index ++ ] = s . substring ( i , i + len ) ;\n  }\n  Arrays . sort ( arr ) ;\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < sub_count ;\n  i ++ ) res += arr [ i ] ;\n  return res ;\n}", "target_program": " def lexicographicSubConcat ( s ) :\n    n = len ( s ) ;\n    sub_count = ( n * ( n + 1 ) ) // 2 ;\n    arr = [ 0 ] * sub_count ;\n    index = 0 ;\n    for i in range ( n ) :\n        for j in range ( 1 , n - i + 1 ) :\n            arr [ index ] = s [ i : i + j ] ;\n            index += 1 ;\n    arr.sort ( ) ;\n    res = \"\" ;\n    for i in range ( sub_count ) :\n        res += arr [ i ] ;\n    return res ;"}
{"source": "java", "target": "cpp", "source_program": " static String lexicographicSubConcat ( String s ) {\n  int n = s . length ( ) ;\n  int sub_count = n * ( n + 1 ) / 2 ;\n  String [ ] arr = new String [ sub_count ] ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int len = 1 ;\n  len <= n - i ;\n  len ++ ) {\n    arr [ index ++ ] = s . substring ( i , i + len ) ;\n  }\n  Arrays . sort ( arr ) ;\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < sub_count ;\n  i ++ ) res += arr [ i ] ;\n  return res ;\n}", "target_program": " string lexicographicSubConcat ( string s ) {\n  int n = s . length ( );\n  int sub_count = n * ( n + 1 ) / 2;\n  string arr [ sub_count ];\n  int index = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int len = 1;\n  len <= n - i;\n  len ++ ) arr [ index ++ ] = s . substr ( i, len );\n  sort ( arr, arr + sub_count );\n  string res = \"\";\n  for ( int i = 0;\n  i < sub_count;\n  i ++ ) res += arr [ i ];\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " string lexicographicSubConcat ( string s ) {\n  int n = s . length ( );\n  int sub_count = n * ( n + 1 ) / 2;\n  string arr [ sub_count ];\n  int index = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int len = 1;\n  len <= n - i;\n  len ++ ) arr [ index ++ ] = s . substr ( i, len );\n  sort ( arr, arr + sub_count );\n  string res = \"\";\n  for ( int i = 0;\n  i < sub_count;\n  i ++ ) res += arr [ i ];\n  return res;\n}", "target_program": " static String lexicographicSubConcat ( String s ) {\n  int n = s . length ( ) ;\n  int sub_count = n * ( n + 1 ) / 2 ;\n  String [ ] arr = new String [ sub_count ] ;\n  int index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int len = 1 ;\n  len <= n - i ;\n  len ++ ) {\n    arr [ index ++ ] = s . substring ( i , i + len ) ;\n  }\n  Arrays . sort ( arr ) ;\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < sub_count ;\n  i ++ ) res += arr [ i ] ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string lexicographicSubConcat ( string s ) {\n  int n = s . length ( );\n  int sub_count = n * ( n + 1 ) / 2;\n  string arr [ sub_count ];\n  int index = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int len = 1;\n  len <= n - i;\n  len ++ ) arr [ index ++ ] = s . substr ( i, len );\n  sort ( arr, arr + sub_count );\n  string res = \"\";\n  for ( int i = 0;\n  i < sub_count;\n  i ++ ) res += arr [ i ];\n  return res;\n}", "target_program": " def lexicographicSubConcat ( s ) :\n    n = len ( s ) ;\n    sub_count = ( n * ( n + 1 ) ) // 2 ;\n    arr = [ 0 ] * sub_count ;\n    index = 0 ;\n    for i in range ( n ) :\n        for j in range ( 1 , n - i + 1 ) :\n            arr [ index ] = s [ i : i + j ] ;\n            index += 1 ;\n    arr.sort ( ) ;\n    res = \"\" ;\n    for i in range ( sub_count ) :\n        res += arr [ i ] ;\n    return res ;"}
{"source": "python", "target": "java", "source_program": " def abFree ( s ) :\n    b_count = 0\n    res = 0\n    for i in range ( len ( s ) ) :\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n    return res", "target_program": " static int abFree ( char [ ] s ) {\n  int b_count = 0 ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    if ( s [ s . length - i - 1 ] == 'a' ) {\n      res = ( res + b_count ) ;\n      b_count = ( b_count * 2 ) ;\n    }\n    else {\n      b_count += 1 ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def abFree ( s ) :\n    b_count = 0\n    res = 0\n    for i in range ( len ( s ) ) :\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n    return res", "target_program": " int abFree ( string s ) {\n  int n = s . length ( );\n  char char_array [ n + 1 ];\n  strcpy ( char_array, s . c_str ( ) );\n  int b_count = 0;\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( char_array [ n - i - 1 ] == 'a' ) {\n      res = ( res + b_count );\n      b_count = ( b_count * 2 );\n    }\n    else {\n      b_count += 1;\n    }\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int abFree ( char [ ] s ) {\n  int b_count = 0 ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    if ( s [ s . length - i - 1 ] == 'a' ) {\n      res = ( res + b_count ) ;\n      b_count = ( b_count * 2 ) ;\n    }\n    else {\n      b_count += 1 ;\n    }\n  }\n  return res ;\n}", "target_program": " def abFree ( s ) :\n    b_count = 0\n    res = 0\n    for i in range ( len ( s ) ) :\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int abFree ( char [ ] s ) {\n  int b_count = 0 ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    if ( s [ s . length - i - 1 ] == 'a' ) {\n      res = ( res + b_count ) ;\n      b_count = ( b_count * 2 ) ;\n    }\n    else {\n      b_count += 1 ;\n    }\n  }\n  return res ;\n}", "target_program": " int abFree ( string s ) {\n  int n = s . length ( );\n  char char_array [ n + 1 ];\n  strcpy ( char_array, s . c_str ( ) );\n  int b_count = 0;\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( char_array [ n - i - 1 ] == 'a' ) {\n      res = ( res + b_count );\n      b_count = ( b_count * 2 );\n    }\n    else {\n      b_count += 1;\n    }\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int abFree ( string s ) {\n  int n = s . length ( );\n  char char_array [ n + 1 ];\n  strcpy ( char_array, s . c_str ( ) );\n  int b_count = 0;\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( char_array [ n - i - 1 ] == 'a' ) {\n      res = ( res + b_count );\n      b_count = ( b_count * 2 );\n    }\n    else {\n      b_count += 1;\n    }\n  }\n  return res;\n}", "target_program": " static int abFree ( char [ ] s ) {\n  int b_count = 0 ;\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < s . length ;\n  i ++ ) {\n    if ( s [ s . length - i - 1 ] == 'a' ) {\n      res = ( res + b_count ) ;\n      b_count = ( b_count * 2 ) ;\n    }\n    else {\n      b_count += 1 ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int abFree ( string s ) {\n  int n = s . length ( );\n  char char_array [ n + 1 ];\n  strcpy ( char_array, s . c_str ( ) );\n  int b_count = 0;\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( char_array [ n - i - 1 ] == 'a' ) {\n      res = ( res + b_count );\n      b_count = ( b_count * 2 );\n    }\n    else {\n      b_count += 1;\n    }\n  }\n  return res;\n}", "target_program": " def abFree ( s ) :\n    b_count = 0\n    res = 0\n    for i in range ( len ( s ) ) :\n        if s [ ~ i ] == 'a' :\n            res = ( res + b_count )\n            b_count = ( b_count * 2 )\n        else :\n            b_count += 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def MaximumHeight ( a , n ) :\n    return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2", "target_program": " static int MaximumHeight ( int a [ ] , int n ) {\n  return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MaximumHeight ( a , n ) :\n    return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2", "target_program": " int MaximumHeight ( int a [ ], int n ) {\n  return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 );\n}"}
{"source": "java", "target": "python", "source_program": " static int MaximumHeight ( int a [ ] , int n ) {\n  return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ;\n}", "target_program": " def MaximumHeight ( a , n ) :\n    return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2"}
{"source": "java", "target": "cpp", "source_program": " static int MaximumHeight ( int a [ ] , int n ) {\n  return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ;\n}", "target_program": " int MaximumHeight ( int a [ ], int n ) {\n  return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int MaximumHeight ( int a [ ], int n ) {\n  return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 );\n}", "target_program": " static int MaximumHeight ( int a [ ] , int n ) {\n  return ( int ) Math . floor ( ( - 1 + Math . sqrt ( 1 + ( 8 * n ) ) ) / 2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int MaximumHeight ( int a [ ], int n ) {\n  return floor ( ( - 1 + sqrt ( 1 + ( 8 * n ) ) ) / 2 );\n}", "target_program": " def MaximumHeight ( a , n ) :\n    return ( - 1 + int ( math.sqrt ( 1 + ( 8 * n ) ) ) ) // 2"}
{"source": "python", "target": "java", "source_program": " def maxvolume ( s ) :\n    maxvalue = 0\n    i = 1\n    for i in range ( s - 1 ) :\n        j = 1\n        for j in range ( s ) :\n            k = s - i - j\n            maxvalue = max ( maxvalue , i * j * k )\n    return maxvalue", "target_program": " static int maxvolume ( int s ) {\n  int maxvalue = 0 ;\n  for ( int i = 1 ;\n  i <= s - 2 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= s - 1 ;\n    j ++ ) {\n      int k = s - i - j ;\n      maxvalue = Math . max ( maxvalue , i * j * k ) ;\n    }\n  }\n  return maxvalue ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxvolume ( s ) :\n    maxvalue = 0\n    i = 1\n    for i in range ( s - 1 ) :\n        j = 1\n        for j in range ( s ) :\n            k = s - i - j\n            maxvalue = max ( maxvalue , i * j * k )\n    return maxvalue", "target_program": " int maxvolume ( int s ) {\n  int maxvalue = 0;\n  for ( int i = 1;\n  i <= s - 2;\n  i ++ ) {\n    for ( int j = 1;\n    j <= s - 1;\n    j ++ ) {\n      int k = s - i - j;\n      maxvalue = max ( maxvalue, i * j * k );\n    }\n  }\n  return maxvalue;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxvolume ( int s ) {\n  int maxvalue = 0 ;\n  for ( int i = 1 ;\n  i <= s - 2 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= s - 1 ;\n    j ++ ) {\n      int k = s - i - j ;\n      maxvalue = Math . max ( maxvalue , i * j * k ) ;\n    }\n  }\n  return maxvalue ;\n}", "target_program": " def maxvolume ( s ) :\n    maxvalue = 0\n    i = 1\n    for i in range ( s - 1 ) :\n        j = 1\n        for j in range ( s ) :\n            k = s - i - j\n            maxvalue = max ( maxvalue , i * j * k )\n    return maxvalue"}
{"source": "java", "target": "cpp", "source_program": " static int maxvolume ( int s ) {\n  int maxvalue = 0 ;\n  for ( int i = 1 ;\n  i <= s - 2 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= s - 1 ;\n    j ++ ) {\n      int k = s - i - j ;\n      maxvalue = Math . max ( maxvalue , i * j * k ) ;\n    }\n  }\n  return maxvalue ;\n}", "target_program": " int maxvolume ( int s ) {\n  int maxvalue = 0;\n  for ( int i = 1;\n  i <= s - 2;\n  i ++ ) {\n    for ( int j = 1;\n    j <= s - 1;\n    j ++ ) {\n      int k = s - i - j;\n      maxvalue = max ( maxvalue, i * j * k );\n    }\n  }\n  return maxvalue;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxvolume ( int s ) {\n  int maxvalue = 0;\n  for ( int i = 1;\n  i <= s - 2;\n  i ++ ) {\n    for ( int j = 1;\n    j <= s - 1;\n    j ++ ) {\n      int k = s - i - j;\n      maxvalue = max ( maxvalue, i * j * k );\n    }\n  }\n  return maxvalue;\n}", "target_program": " static int maxvolume ( int s ) {\n  int maxvalue = 0 ;\n  for ( int i = 1 ;\n  i <= s - 2 ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= s - 1 ;\n    j ++ ) {\n      int k = s - i - j ;\n      maxvalue = Math . max ( maxvalue , i * j * k ) ;\n    }\n  }\n  return maxvalue ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxvolume ( int s ) {\n  int maxvalue = 0;\n  for ( int i = 1;\n  i <= s - 2;\n  i ++ ) {\n    for ( int j = 1;\n    j <= s - 1;\n    j ++ ) {\n      int k = s - i - j;\n      maxvalue = max ( maxvalue, i * j * k );\n    }\n  }\n  return maxvalue;\n}", "target_program": " def maxvolume ( s ) :\n    maxvalue = 0\n    i = 1\n    for i in range ( s - 1 ) :\n        j = 1\n        for j in range ( s ) :\n            k = s - i - j\n            maxvalue = max ( maxvalue , i * j * k )\n    return maxvalue"}
{"source": "python", "target": "java", "source_program": " def decToHexa ( n ) :\n    hexaDeciNum = [ '0' ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        temp = 0 ;\n        temp = n % 16 ;\n        if ( temp < 10 ) :\n            hexaDeciNum [ i ] = chr ( temp + 48 ) ;\n            i = i + 1 ;\n        else :\n            hexaDeciNum [ i ] = chr ( temp + 55 ) ;\n            i = i + 1 ;\n        n = int ( n / 16 ) ;\n    j = i - 1 ;\n    while ( j >= 0 ) :\n        print ( ( hexaDeciNum [ j ] ) , end = \"\" ) ;\n        j = j - 1 ;", "target_program": " static void decToHexa ( int n ) {\n  char [ ] hexaDeciNum = new char [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    int temp = 0 ;\n    temp = n % 16 ;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;\n      i ++ ;\n    }\n    else {\n      hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;\n      i ++ ;\n    }\n    n = n / 16 ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( hexaDeciNum [ j ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def decToHexa ( n ) :\n    hexaDeciNum = [ '0' ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        temp = 0 ;\n        temp = n % 16 ;\n        if ( temp < 10 ) :\n            hexaDeciNum [ i ] = chr ( temp + 48 ) ;\n            i = i + 1 ;\n        else :\n            hexaDeciNum [ i ] = chr ( temp + 55 ) ;\n            i = i + 1 ;\n        n = int ( n / 16 ) ;\n    j = i - 1 ;\n    while ( j >= 0 ) :\n        print ( ( hexaDeciNum [ j ] ) , end = \"\" ) ;\n        j = j - 1 ;", "target_program": " void decToHexa ( int n ) {\n  char hexaDeciNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    int temp = 0;\n    temp = n % 16;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = temp + 48;\n      i ++;\n    }\n    else {\n      hexaDeciNum [ i ] = temp + 55;\n      i ++;\n    }\n    n = n / 16;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << hexaDeciNum [ j ];\n}"}
{"source": "java", "target": "python", "source_program": " static void decToHexa ( int n ) {\n  char [ ] hexaDeciNum = new char [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    int temp = 0 ;\n    temp = n % 16 ;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;\n      i ++ ;\n    }\n    else {\n      hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;\n      i ++ ;\n    }\n    n = n / 16 ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( hexaDeciNum [ j ] ) ;\n}", "target_program": " def decToHexa ( n ) :\n    hexaDeciNum = [ '0' ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        temp = 0 ;\n        temp = n % 16 ;\n        if ( temp < 10 ) :\n            hexaDeciNum [ i ] = chr ( temp + 48 ) ;\n            i = i + 1 ;\n        else :\n            hexaDeciNum [ i ] = chr ( temp + 55 ) ;\n            i = i + 1 ;\n        n = int ( n / 16 ) ;\n    j = i - 1 ;\n    while ( j >= 0 ) :\n        print ( ( hexaDeciNum [ j ] ) , end = \"\" ) ;\n        j = j - 1 ;"}
{"source": "java", "target": "cpp", "source_program": " static void decToHexa ( int n ) {\n  char [ ] hexaDeciNum = new char [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    int temp = 0 ;\n    temp = n % 16 ;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;\n      i ++ ;\n    }\n    else {\n      hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;\n      i ++ ;\n    }\n    n = n / 16 ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( hexaDeciNum [ j ] ) ;\n}", "target_program": " void decToHexa ( int n ) {\n  char hexaDeciNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    int temp = 0;\n    temp = n % 16;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = temp + 48;\n      i ++;\n    }\n    else {\n      hexaDeciNum [ i ] = temp + 55;\n      i ++;\n    }\n    n = n / 16;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << hexaDeciNum [ j ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void decToHexa ( int n ) {\n  char hexaDeciNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    int temp = 0;\n    temp = n % 16;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = temp + 48;\n      i ++;\n    }\n    else {\n      hexaDeciNum [ i ] = temp + 55;\n      i ++;\n    }\n    n = n / 16;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << hexaDeciNum [ j ];\n}", "target_program": " static void decToHexa ( int n ) {\n  char [ ] hexaDeciNum = new char [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    int temp = 0 ;\n    temp = n % 16 ;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = ( char ) ( temp + 48 ) ;\n      i ++ ;\n    }\n    else {\n      hexaDeciNum [ i ] = ( char ) ( temp + 55 ) ;\n      i ++ ;\n    }\n    n = n / 16 ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( hexaDeciNum [ j ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void decToHexa ( int n ) {\n  char hexaDeciNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    int temp = 0;\n    temp = n % 16;\n    if ( temp < 10 ) {\n      hexaDeciNum [ i ] = temp + 48;\n      i ++;\n    }\n    else {\n      hexaDeciNum [ i ] = temp + 55;\n      i ++;\n    }\n    n = n / 16;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << hexaDeciNum [ j ];\n}", "target_program": " def decToHexa ( n ) :\n    hexaDeciNum = [ '0' ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        temp = 0 ;\n        temp = n % 16 ;\n        if ( temp < 10 ) :\n            hexaDeciNum [ i ] = chr ( temp + 48 ) ;\n            i = i + 1 ;\n        else :\n            hexaDeciNum [ i ] = chr ( temp + 55 ) ;\n            i = i + 1 ;\n        n = int ( n / 16 ) ;\n    j = i - 1 ;\n    while ( j >= 0 ) :\n        print ( ( hexaDeciNum [ j ] ) , end = \"\" ) ;\n        j = j - 1 ;"}
{"source": "python", "target": "java", "source_program": " def smallestSubsegment ( a , n ) :\n    left = dict ( )\n    count = dict ( )\n    mx = 0\n    mn , strindex = 0 , 0\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x not in count.keys ( ) ) :\n            left [ x ] = i\n            count [ x ] = 1\n        else :\n            count [ x ] += 1\n        if ( count [ x ] > mx ) :\n            mx = count [ x ]\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n        elif ( count [ x ] == mx and i - left [ x ] + 1 < mn ) :\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n    for i in range ( strindex , strindex + mn ) :\n        print ( a [ i ] , end = \" \" )", "target_program": " static void smallestSubsegment ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > left = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  int mx = 0 ;\n  int mn = - 1 , strindex = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( count . get ( x ) == null ) {\n      left . put ( x , i ) ;\n      count . put ( x , 1 ) ;\n    }\n    else count . put ( x , count . get ( x ) + 1 ) ;\n    if ( count . get ( x ) > mx ) {\n      mx = count . get ( x ) ;\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n    else if ( ( count . get ( x ) == mx ) && ( i - left . get ( x ) + 1 < mn ) ) {\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n  }\n  for ( int i = strindex ;\n  i < strindex + mn ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def smallestSubsegment ( a , n ) :\n    left = dict ( )\n    count = dict ( )\n    mx = 0\n    mn , strindex = 0 , 0\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x not in count.keys ( ) ) :\n            left [ x ] = i\n            count [ x ] = 1\n        else :\n            count [ x ] += 1\n        if ( count [ x ] > mx ) :\n            mx = count [ x ]\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n        elif ( count [ x ] == mx and i - left [ x ] + 1 < mn ) :\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n    for i in range ( strindex , strindex + mn ) :\n        print ( a [ i ] , end = \" \" )", "target_program": " void smallestSubsegment ( int a [ ], int n ) {\n  unordered_map < int, int > left;\n  unordered_map < int, int > count;\n  int mx = 0;\n  int mn, strindex;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( count [ x ] == 0 ) {\n      left [ x ] = i;\n      count [ x ] = 1;\n    }\n    else count [ x ] ++;\n    if ( count [ x ] > mx ) {\n      mx = count [ x ];\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n    else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) {\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n  }\n  for ( int i = strindex;\n  i < strindex + mn;\n  i ++ ) cout << a [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void smallestSubsegment ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > left = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  int mx = 0 ;\n  int mn = - 1 , strindex = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( count . get ( x ) == null ) {\n      left . put ( x , i ) ;\n      count . put ( x , 1 ) ;\n    }\n    else count . put ( x , count . get ( x ) + 1 ) ;\n    if ( count . get ( x ) > mx ) {\n      mx = count . get ( x ) ;\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n    else if ( ( count . get ( x ) == mx ) && ( i - left . get ( x ) + 1 < mn ) ) {\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n  }\n  for ( int i = strindex ;\n  i < strindex + mn ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}", "target_program": " def smallestSubsegment ( a , n ) :\n    left = dict ( )\n    count = dict ( )\n    mx = 0\n    mn , strindex = 0 , 0\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x not in count.keys ( ) ) :\n            left [ x ] = i\n            count [ x ] = 1\n        else :\n            count [ x ] += 1\n        if ( count [ x ] > mx ) :\n            mx = count [ x ]\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n        elif ( count [ x ] == mx and i - left [ x ] + 1 < mn ) :\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n    for i in range ( strindex , strindex + mn ) :\n        print ( a [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void smallestSubsegment ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > left = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  int mx = 0 ;\n  int mn = - 1 , strindex = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( count . get ( x ) == null ) {\n      left . put ( x , i ) ;\n      count . put ( x , 1 ) ;\n    }\n    else count . put ( x , count . get ( x ) + 1 ) ;\n    if ( count . get ( x ) > mx ) {\n      mx = count . get ( x ) ;\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n    else if ( ( count . get ( x ) == mx ) && ( i - left . get ( x ) + 1 < mn ) ) {\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n  }\n  for ( int i = strindex ;\n  i < strindex + mn ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}", "target_program": " void smallestSubsegment ( int a [ ], int n ) {\n  unordered_map < int, int > left;\n  unordered_map < int, int > count;\n  int mx = 0;\n  int mn, strindex;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( count [ x ] == 0 ) {\n      left [ x ] = i;\n      count [ x ] = 1;\n    }\n    else count [ x ] ++;\n    if ( count [ x ] > mx ) {\n      mx = count [ x ];\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n    else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) {\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n  }\n  for ( int i = strindex;\n  i < strindex + mn;\n  i ++ ) cout << a [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void smallestSubsegment ( int a [ ], int n ) {\n  unordered_map < int, int > left;\n  unordered_map < int, int > count;\n  int mx = 0;\n  int mn, strindex;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( count [ x ] == 0 ) {\n      left [ x ] = i;\n      count [ x ] = 1;\n    }\n    else count [ x ] ++;\n    if ( count [ x ] > mx ) {\n      mx = count [ x ];\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n    else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) {\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n  }\n  for ( int i = strindex;\n  i < strindex + mn;\n  i ++ ) cout << a [ i ] << \" \";\n}", "target_program": " static void smallestSubsegment ( int a [ ] , int n ) {\n  HashMap < Integer , Integer > left = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > count = new HashMap < Integer , Integer > ( ) ;\n  int mx = 0 ;\n  int mn = - 1 , strindex = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int x = a [ i ] ;\n    if ( count . get ( x ) == null ) {\n      left . put ( x , i ) ;\n      count . put ( x , 1 ) ;\n    }\n    else count . put ( x , count . get ( x ) + 1 ) ;\n    if ( count . get ( x ) > mx ) {\n      mx = count . get ( x ) ;\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n    else if ( ( count . get ( x ) == mx ) && ( i - left . get ( x ) + 1 < mn ) ) {\n      mn = i - left . get ( x ) + 1 ;\n      strindex = left . get ( x ) ;\n    }\n  }\n  for ( int i = strindex ;\n  i < strindex + mn ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void smallestSubsegment ( int a [ ], int n ) {\n  unordered_map < int, int > left;\n  unordered_map < int, int > count;\n  int mx = 0;\n  int mn, strindex;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int x = a [ i ];\n    if ( count [ x ] == 0 ) {\n      left [ x ] = i;\n      count [ x ] = 1;\n    }\n    else count [ x ] ++;\n    if ( count [ x ] > mx ) {\n      mx = count [ x ];\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n    else if ( count [ x ] == mx && i - left [ x ] + 1 < mn ) {\n      mn = i - left [ x ] + 1;\n      strindex = left [ x ];\n    }\n  }\n  for ( int i = strindex;\n  i < strindex + mn;\n  i ++ ) cout << a [ i ] << \" \";\n}", "target_program": " def smallestSubsegment ( a , n ) :\n    left = dict ( )\n    count = dict ( )\n    mx = 0\n    mn , strindex = 0 , 0\n    for i in range ( n ) :\n        x = a [ i ]\n        if ( x not in count.keys ( ) ) :\n            left [ x ] = i\n            count [ x ] = 1\n        else :\n            count [ x ] += 1\n        if ( count [ x ] > mx ) :\n            mx = count [ x ]\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n        elif ( count [ x ] == mx and i - left [ x ] + 1 < mn ) :\n            mn = i - left [ x ] + 1\n            strindex = left [ x ]\n    for i in range ( strindex , strindex + mn ) :\n        print ( a [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def findLastIndex ( str , x ) :\n    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :\n        if ( str [ i ] == x ) :\n            return i\n    return - 1", "target_program": " static int findLastIndex ( String str , Character x ) {\n  for ( int i = str . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) if ( str . charAt ( i ) == x ) return i ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLastIndex ( str , x ) :\n    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :\n        if ( str [ i ] == x ) :\n            return i\n    return - 1", "target_program": " int findLastIndex ( string & str, char x ) {\n  for ( int i = str . length ( ) - 1;\n  i >= 0;\n  i -- ) if ( str [ i ] == x ) return i;\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLastIndex ( String str , Character x ) {\n  for ( int i = str . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) if ( str . charAt ( i ) == x ) return i ;\n  return - 1 ;\n}", "target_program": " def findLastIndex ( str , x ) :\n    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :\n        if ( str [ i ] == x ) :\n            return i\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findLastIndex ( String str , Character x ) {\n  for ( int i = str . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) if ( str . charAt ( i ) == x ) return i ;\n  return - 1 ;\n}", "target_program": " int findLastIndex ( string & str, char x ) {\n  for ( int i = str . length ( ) - 1;\n  i >= 0;\n  i -- ) if ( str [ i ] == x ) return i;\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLastIndex ( string & str, char x ) {\n  for ( int i = str . length ( ) - 1;\n  i >= 0;\n  i -- ) if ( str [ i ] == x ) return i;\n  return - 1;\n}", "target_program": " static int findLastIndex ( String str , Character x ) {\n  for ( int i = str . length ( ) - 1 ;\n  i >= 0 ;\n  i -- ) if ( str . charAt ( i ) == x ) return i ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLastIndex ( string & str, char x ) {\n  for ( int i = str . length ( ) - 1;\n  i >= 0;\n  i -- ) if ( str [ i ] == x ) return i;\n  return - 1;\n}", "target_program": " def findLastIndex ( str , x ) :\n    for i in range ( len ( str ) - 1 , - 1 , - 1 ) :\n        if ( str [ i ] == x ) :\n            return i\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def getInvCount ( arr , n ) :\n    inv_count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                inv_count += 1\n    return inv_count", "target_program": " static int getInvCount ( int n ) {\n  int inv_count = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;\n  return inv_count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getInvCount ( arr , n ) :\n    inv_count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                inv_count += 1\n    return inv_count", "target_program": " int getInvCount ( int arr [ ], int n ) {\n  int inv_count = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++;\n  return inv_count;\n}"}
{"source": "java", "target": "python", "source_program": " static int getInvCount ( int n ) {\n  int inv_count = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;\n  return inv_count ;\n}", "target_program": " def getInvCount ( arr , n ) :\n    inv_count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                inv_count += 1\n    return inv_count"}
{"source": "java", "target": "cpp", "source_program": " static int getInvCount ( int n ) {\n  int inv_count = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;\n  return inv_count ;\n}", "target_program": " int getInvCount ( int arr [ ], int n ) {\n  int inv_count = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++;\n  return inv_count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getInvCount ( int arr [ ], int n ) {\n  int inv_count = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++;\n  return inv_count;\n}", "target_program": " static int getInvCount ( int n ) {\n  int inv_count = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++ ;\n  return inv_count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getInvCount ( int arr [ ], int n ) {\n  int inv_count = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) if ( arr [ i ] > arr [ j ] ) inv_count ++;\n  return inv_count;\n}", "target_program": " def getInvCount ( arr , n ) :\n    inv_count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] > arr [ j ] ) :\n                inv_count += 1\n    return inv_count"}
{"source": "python", "target": "java", "source_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i + j == column - 1 ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )", "target_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \"Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \"Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i + j == column - 1 ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i + j == column - 1 ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )", "target_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \"Diagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i == j ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i + j == column - 1 ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \"  \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \"Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \"Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i + j == column - 1 ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n}", "target_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i + j == column - 1 ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )"}
{"source": "java", "target": "cpp", "source_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \"Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \"Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i + j == column - 1 ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n}", "target_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \"Diagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i == j ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i + j == column - 1 ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \"  \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \"Diagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i == j ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i + j == column - 1 ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \"  \";\n  }\n}", "target_program": " static void diagonalsquare ( int mat [ ] [ ] , int row , int column ) {\n  System . out . print ( \"Diagonal one : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i == j ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n  System . out . println ( ) ;\n  System . out . print ( \"Diagonal two : \" ) ;\n  for ( int i = 0 ;\n  i < row ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < column ;\n    j ++ ) if ( i + j == column - 1 ) System . out . print ( mat [ i ] [ j ] * mat [ i ] [ j ] + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void diagonalsquare ( int mat [ ] [ MAX ], int row, int column ) {\n  cout << \"Diagonal one : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i == j ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \" \";\n  }\n  cout << \" \\n\\nDiagonal two : \";\n  for ( int i = 0;\n  i < row;\n  i ++ ) {\n    for ( int j = 0;\n    j < column;\n    j ++ ) if ( i + j == column - 1 ) cout << mat [ i ] [ j ] * mat [ i ] [ j ] << \"  \";\n  }\n}", "target_program": " def diagonalsquare ( mat , row , column ) :\n    print ( \"Diagonal one : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i == j ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )\n    print ( \" \\n\\nDiagonal two : \" , end = \"\" )\n    for i in range ( 0 , row ) :\n        for j in range ( 0 , column ) :\n            if ( i + j == column - 1 ) :\n                print ( \"{} \".format ( mat [ i ] [ j ] * mat [ i ] [ j ] ) , end = \"\" )"}
{"source": "python", "target": "java", "source_program": " def countCommon ( mat , n ) :\n    res = 0\n    for i in range ( n ) :\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :\n            res = res + 1\n    return res", "target_program": " static int countCommon ( int mat [ ] [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countCommon ( mat , n ) :\n    res = 0\n    for i in range ( n ) :\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :\n            res = res + 1\n    return res", "target_program": " int countCommon ( int mat [ ] [ MAX ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countCommon ( int mat [ ] [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ;\n  return res ;\n}", "target_program": " def countCommon ( mat , n ) :\n    res = 0\n    for i in range ( n ) :\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :\n            res = res + 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countCommon ( int mat [ ] [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ;\n  return res ;\n}", "target_program": " int countCommon ( int mat [ ] [ MAX ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countCommon ( int mat [ ] [ MAX ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++;\n  return res;\n}", "target_program": " static int countCommon ( int mat [ ] [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++ ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countCommon ( int mat [ ] [ MAX ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] ) res ++;\n  return res;\n}", "target_program": " def countCommon ( mat , n ) :\n    res = 0\n    for i in range ( n ) :\n        if mat [ i ] [ i ] == mat [ i ] [ n - i - 1 ] :\n            res = res + 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def squareRootExists ( n , p ) :\n    n = n % p\n    for x in range ( 2 , p , 1 ) :\n        if ( ( x * x ) % p == n ) :\n            return True\n    return False", "target_program": " static boolean squareRootExists ( int n , int p ) {\n  n = n % p ;\n  for ( int x = 2 ;\n  x < p ;\n  x ++ ) if ( ( x * x ) % p == n ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def squareRootExists ( n , p ) :\n    n = n % p\n    for x in range ( 2 , p , 1 ) :\n        if ( ( x * x ) % p == n ) :\n            return True\n    return False", "target_program": " bool squareRootExists ( int n, int p ) {\n  n = n % p;\n  for ( int x = 2;\n  x < p;\n  x ++ ) if ( ( x * x ) % p == n ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean squareRootExists ( int n , int p ) {\n  n = n % p ;\n  for ( int x = 2 ;\n  x < p ;\n  x ++ ) if ( ( x * x ) % p == n ) return true ;\n  return false ;\n}", "target_program": " def squareRootExists ( n , p ) :\n    n = n % p\n    for x in range ( 2 , p , 1 ) :\n        if ( ( x * x ) % p == n ) :\n            return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean squareRootExists ( int n , int p ) {\n  n = n % p ;\n  for ( int x = 2 ;\n  x < p ;\n  x ++ ) if ( ( x * x ) % p == n ) return true ;\n  return false ;\n}", "target_program": " bool squareRootExists ( int n, int p ) {\n  n = n % p;\n  for ( int x = 2;\n  x < p;\n  x ++ ) if ( ( x * x ) % p == n ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool squareRootExists ( int n, int p ) {\n  n = n % p;\n  for ( int x = 2;\n  x < p;\n  x ++ ) if ( ( x * x ) % p == n ) return true;\n  return false;\n}", "target_program": " static boolean squareRootExists ( int n , int p ) {\n  n = n % p ;\n  for ( int x = 2 ;\n  x < p ;\n  x ++ ) if ( ( x * x ) % p == n ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool squareRootExists ( int n, int p ) {\n  n = n % p;\n  for ( int x = 2;\n  x < p;\n  x ++ ) if ( ( x * x ) % p == n ) return true;\n  return false;\n}", "target_program": " def squareRootExists ( n , p ) :\n    n = n % p\n    for x in range ( 2 , p , 1 ) :\n        if ( ( x * x ) % p == n ) :\n            return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def numberOfPaths ( m , n ) :\n    for i in range ( n , ( m + n - 1 ) ) :\n        path *= i ;\n        path //= ( i - n + 1 ) ;\n    return path ;", "target_program": " static int numberOfPaths ( int m , int n ) {\n  int path = 1 ;\n  for ( int i = n ;\n  i < ( m + n - 1 ) ;\n  i ++ ) {\n    path *= i ;\n    path /= ( i - n + 1 ) ;\n  }\n  return path ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numberOfPaths ( m , n ) :\n    for i in range ( n , ( m + n - 1 ) ) :\n        path *= i ;\n        path //= ( i - n + 1 ) ;\n    return path ;", "target_program": " int numberOfPaths ( int m, int n ) {\n  int path = 1;\n  for ( int i = n;\n  i < ( m + n - 1 );\n  i ++ ) {\n    path *= i;\n    path /= ( i - n + 1 );\n  }\n  return path;\n}"}
{"source": "java", "target": "python", "source_program": " static int numberOfPaths ( int m , int n ) {\n  int path = 1 ;\n  for ( int i = n ;\n  i < ( m + n - 1 ) ;\n  i ++ ) {\n    path *= i ;\n    path /= ( i - n + 1 ) ;\n  }\n  return path ;\n}", "target_program": " def numberOfPaths ( m , n ) :\n    for i in range ( n , ( m + n - 1 ) ) :\n        path *= i ;\n        path //= ( i - n + 1 ) ;\n    return path ;"}
{"source": "java", "target": "cpp", "source_program": " static int numberOfPaths ( int m , int n ) {\n  int path = 1 ;\n  for ( int i = n ;\n  i < ( m + n - 1 ) ;\n  i ++ ) {\n    path *= i ;\n    path /= ( i - n + 1 ) ;\n  }\n  return path ;\n}", "target_program": " int numberOfPaths ( int m, int n ) {\n  int path = 1;\n  for ( int i = n;\n  i < ( m + n - 1 );\n  i ++ ) {\n    path *= i;\n    path /= ( i - n + 1 );\n  }\n  return path;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numberOfPaths ( int m, int n ) {\n  int path = 1;\n  for ( int i = n;\n  i < ( m + n - 1 );\n  i ++ ) {\n    path *= i;\n    path /= ( i - n + 1 );\n  }\n  return path;\n}", "target_program": " static int numberOfPaths ( int m , int n ) {\n  int path = 1 ;\n  for ( int i = n ;\n  i < ( m + n - 1 ) ;\n  i ++ ) {\n    path *= i ;\n    path /= ( i - n + 1 ) ;\n  }\n  return path ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numberOfPaths ( int m, int n ) {\n  int path = 1;\n  for ( int i = n;\n  i < ( m + n - 1 );\n  i ++ ) {\n    path *= i;\n    path /= ( i - n + 1 );\n  }\n  return path;\n}", "target_program": " def numberOfPaths ( m , n ) :\n    for i in range ( n , ( m + n - 1 ) ) :\n        path *= i ;\n        path //= ( i - n + 1 ) ;\n    return path ;"}
{"source": "python", "target": "java", "source_program": " def maximumDifferenceSum ( arr , N ) :\n    dp = [ [ 0 , 0 ] for i in range ( N ) ]\n    for i in range ( N ) :\n        dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0\n    for i in range ( N - 1 ) :\n        dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) )\n        dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) )\n    return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] )", "target_program": " static int maximumDifferenceSum ( int arr [ ] , int N ) {\n  int dp [ ] [ ] = new int [ N ] [ 2 ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;\n  for ( int i = 0 ;\n  i < ( N - 1 ) ;\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + Math . abs ( 1 - arr [ i ] ) ) ;\n    dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + Math . abs ( arr [ i + 1 ] - arr [ i ] ) ) ;\n  }\n  return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maximumDifferenceSum ( arr , N ) :\n    dp = [ [ 0 , 0 ] for i in range ( N ) ]\n    for i in range ( N ) :\n        dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0\n    for i in range ( N - 1 ) :\n        dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) )\n        dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) )\n    return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] )", "target_program": " int maximumDifferenceSum ( int arr [ ], int N ) {\n  int dp [ N ] [ 2 ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0;\n  for ( int i = 0;\n  i < ( N - 1 );\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ], dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) );\n    dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ), dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) );\n  }\n  return max ( dp [ N - 1 ] [ 0 ], dp [ N - 1 ] [ 1 ] );\n}"}
{"source": "java", "target": "python", "source_program": " static int maximumDifferenceSum ( int arr [ ] , int N ) {\n  int dp [ ] [ ] = new int [ N ] [ 2 ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;\n  for ( int i = 0 ;\n  i < ( N - 1 ) ;\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + Math . abs ( 1 - arr [ i ] ) ) ;\n    dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + Math . abs ( arr [ i + 1 ] - arr [ i ] ) ) ;\n  }\n  return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ;\n}", "target_program": " def maximumDifferenceSum ( arr , N ) :\n    dp = [ [ 0 , 0 ] for i in range ( N ) ]\n    for i in range ( N ) :\n        dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0\n    for i in range ( N - 1 ) :\n        dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) )\n        dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) )\n    return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] )"}
{"source": "java", "target": "cpp", "source_program": " static int maximumDifferenceSum ( int arr [ ] , int N ) {\n  int dp [ ] [ ] = new int [ N ] [ 2 ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;\n  for ( int i = 0 ;\n  i < ( N - 1 ) ;\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + Math . abs ( 1 - arr [ i ] ) ) ;\n    dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + Math . abs ( arr [ i + 1 ] - arr [ i ] ) ) ;\n  }\n  return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ;\n}", "target_program": " int maximumDifferenceSum ( int arr [ ], int N ) {\n  int dp [ N ] [ 2 ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0;\n  for ( int i = 0;\n  i < ( N - 1 );\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ], dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) );\n    dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ), dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) );\n  }\n  return max ( dp [ N - 1 ] [ 0 ], dp [ N - 1 ] [ 1 ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maximumDifferenceSum ( int arr [ ], int N ) {\n  int dp [ N ] [ 2 ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0;\n  for ( int i = 0;\n  i < ( N - 1 );\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ], dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) );\n    dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ), dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) );\n  }\n  return max ( dp [ N - 1 ] [ 0 ], dp [ N - 1 ] [ 1 ] );\n}", "target_program": " static int maximumDifferenceSum ( int arr [ ] , int N ) {\n  int dp [ ] [ ] = new int [ N ] [ 2 ] ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0 ;\n  for ( int i = 0 ;\n  i < ( N - 1 ) ;\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = Math . max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + Math . abs ( 1 - arr [ i ] ) ) ;\n    dp [ i + 1 ] [ 1 ] = Math . max ( dp [ i ] [ 0 ] + Math . abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + Math . abs ( arr [ i + 1 ] - arr [ i ] ) ) ;\n  }\n  return Math . max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maximumDifferenceSum ( int arr [ ], int N ) {\n  int dp [ N ] [ 2 ];\n  for ( int i = 0;\n  i < N;\n  i ++ ) dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0;\n  for ( int i = 0;\n  i < ( N - 1 );\n  i ++ ) {\n    dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ], dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) );\n    dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ), dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) );\n  }\n  return max ( dp [ N - 1 ] [ 0 ], dp [ N - 1 ] [ 1 ] );\n}", "target_program": " def maximumDifferenceSum ( arr , N ) :\n    dp = [ [ 0 , 0 ] for i in range ( N ) ]\n    for i in range ( N ) :\n        dp [ i ] [ 0 ] = dp [ i ] [ 1 ] = 0\n    for i in range ( N - 1 ) :\n        dp [ i + 1 ] [ 0 ] = max ( dp [ i ] [ 0 ] , dp [ i ] [ 1 ] + abs ( 1 - arr [ i ] ) )\n        dp [ i + 1 ] [ 1 ] = max ( dp [ i ] [ 0 ] + abs ( arr [ i + 1 ] - 1 ) , dp [ i ] [ 1 ] + abs ( arr [ i + 1 ] - arr [ i ] ) )\n    return max ( dp [ N - 1 ] [ 0 ] , dp [ N - 1 ] [ 1 ] )"}
{"source": "python", "target": "java", "source_program": " def SternSequenceFunc ( BrocotSequence , n ) :\n    for i in range ( 1 , n ) :\n        considered_element = BrocotSequence [ i ]\n        precedent = BrocotSequence [ i - 1 ]\n        BrocotSequence.append ( considered_element + precedent )\n        BrocotSequence.append ( considered_element )\n    for i in range ( 0 , 15 ) :\n        print ( BrocotSequence [ i ] , end = \" \" )", "target_program": " static void SternSequenceFunc ( Vector < Integer > BrocotSequence , int n ) {\n  for ( int i = 1 ;\n  BrocotSequence . size ( ) < n ;\n  i ++ ) {\n    int considered_element = BrocotSequence . get ( i ) ;\n    int precedent = BrocotSequence . get ( i - 1 ) ;\n    BrocotSequence . add ( considered_element + precedent ) ;\n    BrocotSequence . add ( considered_element ) ;\n  }\n  for ( int i = 0 ;\n  i < 15 ;\n  ++ i ) System . out . print ( BrocotSequence . get ( i ) + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def SternSequenceFunc ( BrocotSequence , n ) :\n    for i in range ( 1 , n ) :\n        considered_element = BrocotSequence [ i ]\n        precedent = BrocotSequence [ i - 1 ]\n        BrocotSequence.append ( considered_element + precedent )\n        BrocotSequence.append ( considered_element )\n    for i in range ( 0 , 15 ) :\n        print ( BrocotSequence [ i ] , end = \" \" )", "target_program": " void SternSequenceFunc ( vector < int > & BrocotSequence, int n ) {\n  for ( int i = 1;\n  BrocotSequence . size ( ) < n;\n  i ++ ) {\n    int considered_element = BrocotSequence [ i ];\n    int precedent = BrocotSequence [ i - 1 ];\n    BrocotSequence . push_back ( considered_element + precedent );\n    BrocotSequence . push_back ( considered_element );\n  }\n  for ( int i = 0;\n  i < 15;\n  ++ i ) cout << BrocotSequence [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void SternSequenceFunc ( Vector < Integer > BrocotSequence , int n ) {\n  for ( int i = 1 ;\n  BrocotSequence . size ( ) < n ;\n  i ++ ) {\n    int considered_element = BrocotSequence . get ( i ) ;\n    int precedent = BrocotSequence . get ( i - 1 ) ;\n    BrocotSequence . add ( considered_element + precedent ) ;\n    BrocotSequence . add ( considered_element ) ;\n  }\n  for ( int i = 0 ;\n  i < 15 ;\n  ++ i ) System . out . print ( BrocotSequence . get ( i ) + \" \" ) ;\n}", "target_program": " def SternSequenceFunc ( BrocotSequence , n ) :\n    for i in range ( 1 , n ) :\n        considered_element = BrocotSequence [ i ]\n        precedent = BrocotSequence [ i - 1 ]\n        BrocotSequence.append ( considered_element + precedent )\n        BrocotSequence.append ( considered_element )\n    for i in range ( 0 , 15 ) :\n        print ( BrocotSequence [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void SternSequenceFunc ( Vector < Integer > BrocotSequence , int n ) {\n  for ( int i = 1 ;\n  BrocotSequence . size ( ) < n ;\n  i ++ ) {\n    int considered_element = BrocotSequence . get ( i ) ;\n    int precedent = BrocotSequence . get ( i - 1 ) ;\n    BrocotSequence . add ( considered_element + precedent ) ;\n    BrocotSequence . add ( considered_element ) ;\n  }\n  for ( int i = 0 ;\n  i < 15 ;\n  ++ i ) System . out . print ( BrocotSequence . get ( i ) + \" \" ) ;\n}", "target_program": " void SternSequenceFunc ( vector < int > & BrocotSequence, int n ) {\n  for ( int i = 1;\n  BrocotSequence . size ( ) < n;\n  i ++ ) {\n    int considered_element = BrocotSequence [ i ];\n    int precedent = BrocotSequence [ i - 1 ];\n    BrocotSequence . push_back ( considered_element + precedent );\n    BrocotSequence . push_back ( considered_element );\n  }\n  for ( int i = 0;\n  i < 15;\n  ++ i ) cout << BrocotSequence [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void SternSequenceFunc ( vector < int > & BrocotSequence, int n ) {\n  for ( int i = 1;\n  BrocotSequence . size ( ) < n;\n  i ++ ) {\n    int considered_element = BrocotSequence [ i ];\n    int precedent = BrocotSequence [ i - 1 ];\n    BrocotSequence . push_back ( considered_element + precedent );\n    BrocotSequence . push_back ( considered_element );\n  }\n  for ( int i = 0;\n  i < 15;\n  ++ i ) cout << BrocotSequence [ i ] << \" \";\n}", "target_program": " static void SternSequenceFunc ( Vector < Integer > BrocotSequence , int n ) {\n  for ( int i = 1 ;\n  BrocotSequence . size ( ) < n ;\n  i ++ ) {\n    int considered_element = BrocotSequence . get ( i ) ;\n    int precedent = BrocotSequence . get ( i - 1 ) ;\n    BrocotSequence . add ( considered_element + precedent ) ;\n    BrocotSequence . add ( considered_element ) ;\n  }\n  for ( int i = 0 ;\n  i < 15 ;\n  ++ i ) System . out . print ( BrocotSequence . get ( i ) + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void SternSequenceFunc ( vector < int > & BrocotSequence, int n ) {\n  for ( int i = 1;\n  BrocotSequence . size ( ) < n;\n  i ++ ) {\n    int considered_element = BrocotSequence [ i ];\n    int precedent = BrocotSequence [ i - 1 ];\n    BrocotSequence . push_back ( considered_element + precedent );\n    BrocotSequence . push_back ( considered_element );\n  }\n  for ( int i = 0;\n  i < 15;\n  ++ i ) cout << BrocotSequence [ i ] << \" \";\n}", "target_program": " def SternSequenceFunc ( BrocotSequence , n ) :\n    for i in range ( 1 , n ) :\n        considered_element = BrocotSequence [ i ]\n        precedent = BrocotSequence [ i - 1 ]\n        BrocotSequence.append ( considered_element + precedent )\n        BrocotSequence.append ( considered_element )\n    for i in range ( 0 , 15 ) :\n        print ( BrocotSequence [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ 0 for x in range ( l ) ] for y in range ( n ) ]\n    dp [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % n ] += 1\n    for i in range ( 1 , l ) :\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += 1\n        for j in range ( n ) :\n            dp [ i ] [ j ] += dp [ i - 1 ] [ j ]\n            dp [ i ] [ ( j * 10 + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - 1 ] [ j ]\n    return dp [ l - 1 ] [ 0 ]", "target_program": " static int countDivisibleSubseq ( String str , int n ) {\n  int len = str . length ( ) ;\n  int dp [ ] [ ] = new int [ len ] [ n ] ;\n  dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;\n      dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) % n ] += dp [ i - 1 ] [ j ] ;\n    }\n  }\n  return dp [ len - 1 ] [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ 0 for x in range ( l ) ] for y in range ( n ) ]\n    dp [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % n ] += 1\n    for i in range ( 1 , l ) :\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += 1\n        for j in range ( n ) :\n            dp [ i ] [ j ] += dp [ i - 1 ] [ j ]\n            dp [ i ] [ ( j * 10 + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - 1 ] [ j ]\n    return dp [ l - 1 ] [ 0 ]", "target_program": " int countDivisibleSubseq ( string str, int n ) {\n  int len = str . length ( );\n  int dp [ len ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    dp [ i ] [ ( str [ i ] - '0' ) % n ] ++;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ];\n      dp [ i ] [ ( j * 10 + ( str [ i ] - '0' ) ) % n ] += dp [ i - 1 ] [ j ];\n    }\n  }\n  return dp [ len - 1 ] [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countDivisibleSubseq ( String str , int n ) {\n  int len = str . length ( ) ;\n  int dp [ ] [ ] = new int [ len ] [ n ] ;\n  dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;\n      dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) % n ] += dp [ i - 1 ] [ j ] ;\n    }\n  }\n  return dp [ len - 1 ] [ 0 ] ;\n}", "target_program": " def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ 0 for x in range ( l ) ] for y in range ( n ) ]\n    dp [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % n ] += 1\n    for i in range ( 1 , l ) :\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += 1\n        for j in range ( n ) :\n            dp [ i ] [ j ] += dp [ i - 1 ] [ j ]\n            dp [ i ] [ ( j * 10 + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - 1 ] [ j ]\n    return dp [ l - 1 ] [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static int countDivisibleSubseq ( String str , int n ) {\n  int len = str . length ( ) ;\n  int dp [ ] [ ] = new int [ len ] [ n ] ;\n  dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;\n      dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) % n ] += dp [ i - 1 ] [ j ] ;\n    }\n  }\n  return dp [ len - 1 ] [ 0 ] ;\n}", "target_program": " int countDivisibleSubseq ( string str, int n ) {\n  int len = str . length ( );\n  int dp [ len ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    dp [ i ] [ ( str [ i ] - '0' ) % n ] ++;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ];\n      dp [ i ] [ ( j * 10 + ( str [ i ] - '0' ) ) % n ] += dp [ i - 1 ] [ j ];\n    }\n  }\n  return dp [ len - 1 ] [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countDivisibleSubseq ( string str, int n ) {\n  int len = str . length ( );\n  int dp [ len ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    dp [ i ] [ ( str [ i ] - '0' ) % n ] ++;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ];\n      dp [ i ] [ ( j * 10 + ( str [ i ] - '0' ) ) % n ] += dp [ i - 1 ] [ j ];\n    }\n  }\n  return dp [ len - 1 ] [ 0 ];\n}", "target_program": " static int countDivisibleSubseq ( String str , int n ) {\n  int len = str . length ( ) ;\n  int dp [ ] [ ] = new int [ len ] [ n ] ;\n  dp [ 0 ] [ ( str . charAt ( 0 ) - '0' ) % n ] ++ ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    dp [ i ] [ ( str . charAt ( i ) - '0' ) % n ] ++ ;\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ] ;\n      dp [ i ] [ ( j * 10 + ( str . charAt ( i ) - '0' ) ) % n ] += dp [ i - 1 ] [ j ] ;\n    }\n  }\n  return dp [ len - 1 ] [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countDivisibleSubseq ( string str, int n ) {\n  int len = str . length ( );\n  int dp [ len ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  dp [ 0 ] [ ( str [ 0 ] - '0' ) % n ] ++;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    dp [ i ] [ ( str [ i ] - '0' ) % n ] ++;\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      dp [ i ] [ j ] += dp [ i - 1 ] [ j ];\n      dp [ i ] [ ( j * 10 + ( str [ i ] - '0' ) ) % n ] += dp [ i - 1 ] [ j ];\n    }\n  }\n  return dp [ len - 1 ] [ 0 ];\n}", "target_program": " def countDivisibleSubseq ( str , n ) :\n    l = len ( str )\n    dp = [ [ 0 for x in range ( l ) ] for y in range ( n ) ]\n    dp [ 0 ] [ ( ord ( str [ 0 ] ) - ord ( '0' ) ) % n ] += 1\n    for i in range ( 1 , l ) :\n        dp [ i ] [ ( ord ( str [ i ] ) - ord ( '0' ) ) % n ] += 1\n        for j in range ( n ) :\n            dp [ i ] [ j ] += dp [ i - 1 ] [ j ]\n            dp [ i ] [ ( j * 10 + ( ord ( str [ i ] ) - ord ( '0' ) ) ) % n ] += dp [ i - 1 ] [ j ]\n    return dp [ l - 1 ] [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def search ( arr , x ) :\n    n = len ( arr )\n    for j in range ( 0 , n ) :\n        if ( x == arr [ j ] ) :\n            return j\n    return - 1", "target_program": " static int search ( int arr [ ] , int n , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , x ) :\n    n = len ( arr )\n    for j in range ( 0 , n ) :\n        if ( x == arr [ j ] ) :\n            return j\n    return - 1", "target_program": " int search ( int arr [ ], int n, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int search ( int arr [ ] , int n , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}", "target_program": " def search ( arr , x ) :\n    n = len ( arr )\n    for j in range ( 0 , n ) :\n        if ( x == arr [ j ] ) :\n            return j\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int search ( int arr [ ] , int n , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}", "target_program": " int search ( int arr [ ], int n, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int search ( int arr [ ], int n, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}", "target_program": " static int search ( int arr [ ] , int n , int x ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int search ( int arr [ ], int n, int x ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == x ) return i;\n  }\n  return - 1;\n}", "target_program": " def search ( arr , x ) :\n    n = len ( arr )\n    for j in range ( 0 , n ) :\n        if ( x == arr [ j ] ) :\n            return j\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def getPairsCount ( arr , n , sum ) :\n    m = [ 0 ] * 1000\n    for i in range ( 0 , n ) :\n        m [ arr [ i ] ]\n        m [ arr [ i ] ] += 1\n    twice_count = 0\n    for i in range ( 0 , n ) :\n        twice_count += m [ sum - arr [ i ] ]\n        if ( sum - arr [ i ] == arr [ i ] ) :\n            twice_count -= 1\n    return int ( twice_count / 2 )", "target_program": " static int getPairsCount ( int n , int sum ) {\n  HashMap < Integer , Integer > hm = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! hm . containsKey ( arr [ i ] ) ) hm . put ( arr [ i ] , 0 ) ;\n    hm . put ( arr [ i ] , hm . get ( arr [ i ] ) + 1 ) ;\n  }\n  int twice_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( hm . get ( sum - arr [ i ] ) != null ) twice_count += hm . get ( sum - arr [ i ] ) ;\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;\n  }\n  return twice_count / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getPairsCount ( arr , n , sum ) :\n    m = [ 0 ] * 1000\n    for i in range ( 0 , n ) :\n        m [ arr [ i ] ]\n        m [ arr [ i ] ] += 1\n    twice_count = 0\n    for i in range ( 0 , n ) :\n        twice_count += m [ sum - arr [ i ] ]\n        if ( sum - arr [ i ] == arr [ i ] ) :\n            twice_count -= 1\n    return int ( twice_count / 2 )", "target_program": " int getPairsCount ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ arr [ i ] ] ++;\n  int twice_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    twice_count += m [ sum - arr [ i ] ];\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count --;\n  }\n  return twice_count / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int getPairsCount ( int n , int sum ) {\n  HashMap < Integer , Integer > hm = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! hm . containsKey ( arr [ i ] ) ) hm . put ( arr [ i ] , 0 ) ;\n    hm . put ( arr [ i ] , hm . get ( arr [ i ] ) + 1 ) ;\n  }\n  int twice_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( hm . get ( sum - arr [ i ] ) != null ) twice_count += hm . get ( sum - arr [ i ] ) ;\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;\n  }\n  return twice_count / 2 ;\n}", "target_program": " def getPairsCount ( arr , n , sum ) :\n    m = [ 0 ] * 1000\n    for i in range ( 0 , n ) :\n        m [ arr [ i ] ]\n        m [ arr [ i ] ] += 1\n    twice_count = 0\n    for i in range ( 0 , n ) :\n        twice_count += m [ sum - arr [ i ] ]\n        if ( sum - arr [ i ] == arr [ i ] ) :\n            twice_count -= 1\n    return int ( twice_count / 2 )"}
{"source": "java", "target": "cpp", "source_program": " static int getPairsCount ( int n , int sum ) {\n  HashMap < Integer , Integer > hm = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! hm . containsKey ( arr [ i ] ) ) hm . put ( arr [ i ] , 0 ) ;\n    hm . put ( arr [ i ] , hm . get ( arr [ i ] ) + 1 ) ;\n  }\n  int twice_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( hm . get ( sum - arr [ i ] ) != null ) twice_count += hm . get ( sum - arr [ i ] ) ;\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;\n  }\n  return twice_count / 2 ;\n}", "target_program": " int getPairsCount ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ arr [ i ] ] ++;\n  int twice_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    twice_count += m [ sum - arr [ i ] ];\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count --;\n  }\n  return twice_count / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getPairsCount ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ arr [ i ] ] ++;\n  int twice_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    twice_count += m [ sum - arr [ i ] ];\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count --;\n  }\n  return twice_count / 2;\n}", "target_program": " static int getPairsCount ( int n , int sum ) {\n  HashMap < Integer , Integer > hm = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! hm . containsKey ( arr [ i ] ) ) hm . put ( arr [ i ] , 0 ) ;\n    hm . put ( arr [ i ] , hm . get ( arr [ i ] ) + 1 ) ;\n  }\n  int twice_count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( hm . get ( sum - arr [ i ] ) != null ) twice_count += hm . get ( sum - arr [ i ] ) ;\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count -- ;\n  }\n  return twice_count / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getPairsCount ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > m;\n  for ( int i = 0;\n  i < n;\n  i ++ ) m [ arr [ i ] ] ++;\n  int twice_count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    twice_count += m [ sum - arr [ i ] ];\n    if ( sum - arr [ i ] == arr [ i ] ) twice_count --;\n  }\n  return twice_count / 2;\n}", "target_program": " def getPairsCount ( arr , n , sum ) :\n    m = [ 0 ] * 1000\n    for i in range ( 0 , n ) :\n        m [ arr [ i ] ]\n        m [ arr [ i ] ] += 1\n    twice_count = 0\n    for i in range ( 0 , n ) :\n        twice_count += m [ sum - arr [ i ] ]\n        if ( sum - arr [ i ] == arr [ i ] ) :\n            twice_count -= 1\n    return int ( twice_count / 2 )"}
{"source": "python", "target": "java", "source_program": " def findRepeating ( arr , n ) :\n    res = 0\n    for i in range ( 0 , n - 1 ) :\n        res = res ^ ( i + 1 ) ^ arr [ i ]\n    res = res ^ arr [ n - 1 ]\n    return res", "target_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;\n  res = res ^ arr [ n - 1 ] ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRepeating ( arr , n ) :\n    res = 0\n    for i in range ( 0 , n - 1 ) :\n        res = res ^ ( i + 1 ) ^ arr [ i ]\n    res = res ^ arr [ n - 1 ]\n    return res", "target_program": " int findRepeating ( int arr [ ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ];\n  res = res ^ arr [ n - 1 ];\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;\n  res = res ^ arr [ n - 1 ] ;\n  return res ;\n}", "target_program": " def findRepeating ( arr , n ) :\n    res = 0\n    for i in range ( 0 , n - 1 ) :\n        res = res ^ ( i + 1 ) ^ arr [ i ]\n    res = res ^ arr [ n - 1 ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;\n  res = res ^ arr [ n - 1 ] ;\n  return res ;\n}", "target_program": " int findRepeating ( int arr [ ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ];\n  res = res ^ arr [ n - 1 ];\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findRepeating ( int arr [ ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ];\n  res = res ^ arr [ n - 1 ];\n  return res;\n}", "target_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int res = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ] ;\n  res = res ^ arr [ n - 1 ] ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findRepeating ( int arr [ ], int n ) {\n  int res = 0;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) res = res ^ ( i + 1 ) ^ arr [ i ];\n  res = res ^ arr [ n - 1 ];\n  return res;\n}", "target_program": " def findRepeating ( arr , n ) :\n    res = 0\n    for i in range ( 0 , n - 1 ) :\n        res = res ^ ( i + 1 ) ^ arr [ i ]\n    res = res ^ arr [ n - 1 ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def shortestPath ( graph , u , v , k ) :\n    global V , INF\n    sp = [ [ None ] * V for i in range ( V ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            sp [ i ] [ j ] = [ None ] * ( k + 1 )\n    for e in range ( k + 1 ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                sp [ i ] [ j ] [ e ] = INF\n                if ( e == 0 and i == j ) :\n                    sp [ i ] [ j ] [ e ] = 0\n                if ( e == 1 and graph [ i ] [ j ] != INF ) :\n                    sp [ i ] [ j ] [ e ] = graph [ i ] [ j ]\n                if ( e > 1 ) :\n                    for a in range ( V ) :\n                        if ( graph [ i ] [ a ] != INF and i != a and j != a and sp [ a ] [ j ] [ e - 1 ] != INF ) :\n                            sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] )\n    return sp [ u ] [ v ] [ k ]", "target_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  int sp [ ] [ ] [ ] = new int [ V ] [ V ] [ k + 1 ] ;\n  for ( int e = 0 ;\n  e <= k ;\n  e ++ ) {\n    for ( int i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( int j = 0 ;\n      j < V ;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF ;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0 ;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ] ;\n        if ( e > 1 ) {\n          for ( int a = 0 ;\n          a < V ;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = Math . min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] ) ;\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def shortestPath ( graph , u , v , k ) :\n    global V , INF\n    sp = [ [ None ] * V for i in range ( V ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            sp [ i ] [ j ] = [ None ] * ( k + 1 )\n    for e in range ( k + 1 ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                sp [ i ] [ j ] [ e ] = INF\n                if ( e == 0 and i == j ) :\n                    sp [ i ] [ j ] [ e ] = 0\n                if ( e == 1 and graph [ i ] [ j ] != INF ) :\n                    sp [ i ] [ j ] [ e ] = graph [ i ] [ j ]\n                if ( e > 1 ) :\n                    for a in range ( V ) :\n                        if ( graph [ i ] [ a ] != INF and i != a and j != a and sp [ a ] [ j ] [ e - 1 ] != INF ) :\n                            sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] )\n    return sp [ u ] [ v ] [ k ]", "target_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  int sp [ V ] [ V ] [ k + 1 ];\n  for ( int e = 0;\n  e <= k;\n  e ++ ) {\n    for ( int i = 0;\n    i < V;\n    i ++ ) {\n      for ( int j = 0;\n      j < V;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ];\n        if ( e > 1 ) {\n          for ( int a = 0;\n          a < V;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ], graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] );\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ];\n}"}
{"source": "java", "target": "python", "source_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  int sp [ ] [ ] [ ] = new int [ V ] [ V ] [ k + 1 ] ;\n  for ( int e = 0 ;\n  e <= k ;\n  e ++ ) {\n    for ( int i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( int j = 0 ;\n      j < V ;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF ;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0 ;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ] ;\n        if ( e > 1 ) {\n          for ( int a = 0 ;\n          a < V ;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = Math . min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] ) ;\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ] ;\n}", "target_program": " def shortestPath ( graph , u , v , k ) :\n    global V , INF\n    sp = [ [ None ] * V for i in range ( V ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            sp [ i ] [ j ] = [ None ] * ( k + 1 )\n    for e in range ( k + 1 ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                sp [ i ] [ j ] [ e ] = INF\n                if ( e == 0 and i == j ) :\n                    sp [ i ] [ j ] [ e ] = 0\n                if ( e == 1 and graph [ i ] [ j ] != INF ) :\n                    sp [ i ] [ j ] [ e ] = graph [ i ] [ j ]\n                if ( e > 1 ) :\n                    for a in range ( V ) :\n                        if ( graph [ i ] [ a ] != INF and i != a and j != a and sp [ a ] [ j ] [ e - 1 ] != INF ) :\n                            sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] )\n    return sp [ u ] [ v ] [ k ]"}
{"source": "java", "target": "cpp", "source_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  int sp [ ] [ ] [ ] = new int [ V ] [ V ] [ k + 1 ] ;\n  for ( int e = 0 ;\n  e <= k ;\n  e ++ ) {\n    for ( int i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( int j = 0 ;\n      j < V ;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF ;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0 ;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ] ;\n        if ( e > 1 ) {\n          for ( int a = 0 ;\n          a < V ;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = Math . min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] ) ;\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ] ;\n}", "target_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  int sp [ V ] [ V ] [ k + 1 ];\n  for ( int e = 0;\n  e <= k;\n  e ++ ) {\n    for ( int i = 0;\n    i < V;\n    i ++ ) {\n      for ( int j = 0;\n      j < V;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ];\n        if ( e > 1 ) {\n          for ( int a = 0;\n          a < V;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ], graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] );\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ];\n}"}
{"source": "cpp", "target": "java", "source_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  int sp [ V ] [ V ] [ k + 1 ];\n  for ( int e = 0;\n  e <= k;\n  e ++ ) {\n    for ( int i = 0;\n    i < V;\n    i ++ ) {\n      for ( int j = 0;\n      j < V;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ];\n        if ( e > 1 ) {\n          for ( int a = 0;\n          a < V;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ], graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] );\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ];\n}", "target_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  int sp [ ] [ ] [ ] = new int [ V ] [ V ] [ k + 1 ] ;\n  for ( int e = 0 ;\n  e <= k ;\n  e ++ ) {\n    for ( int i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( int j = 0 ;\n      j < V ;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF ;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0 ;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ] ;\n        if ( e > 1 ) {\n          for ( int a = 0 ;\n          a < V ;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = Math . min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] ) ;\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  int sp [ V ] [ V ] [ k + 1 ];\n  for ( int e = 0;\n  e <= k;\n  e ++ ) {\n    for ( int i = 0;\n    i < V;\n    i ++ ) {\n      for ( int j = 0;\n      j < V;\n      j ++ ) {\n        sp [ i ] [ j ] [ e ] = INF;\n        if ( e == 0 && i == j ) sp [ i ] [ j ] [ e ] = 0;\n        if ( e == 1 && graph [ i ] [ j ] != INF ) sp [ i ] [ j ] [ e ] = graph [ i ] [ j ];\n        if ( e > 1 ) {\n          for ( int a = 0;\n          a < V;\n          a ++ ) {\n            if ( graph [ i ] [ a ] != INF && i != a && j != a && sp [ a ] [ j ] [ e - 1 ] != INF ) sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ], graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] );\n          }\n        }\n      }\n    }\n  }\n  return sp [ u ] [ v ] [ k ];\n}", "target_program": " def shortestPath ( graph , u , v , k ) :\n    global V , INF\n    sp = [ [ None ] * V for i in range ( V ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            sp [ i ] [ j ] = [ None ] * ( k + 1 )\n    for e in range ( k + 1 ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                sp [ i ] [ j ] [ e ] = INF\n                if ( e == 0 and i == j ) :\n                    sp [ i ] [ j ] [ e ] = 0\n                if ( e == 1 and graph [ i ] [ j ] != INF ) :\n                    sp [ i ] [ j ] [ e ] = graph [ i ] [ j ]\n                if ( e > 1 ) :\n                    for a in range ( V ) :\n                        if ( graph [ i ] [ a ] != INF and i != a and j != a and sp [ a ] [ j ] [ e - 1 ] != INF ) :\n                            sp [ i ] [ j ] [ e ] = min ( sp [ i ] [ j ] [ e ] , graph [ i ] [ a ] + sp [ a ] [ j ] [ e - 1 ] )\n    return sp [ u ] [ v ] [ k ]"}
{"source": "python", "target": "java", "source_program": " def longest ( a , n , k ) :\n    freq = [ 0 ] * n\n    start = 0\n    end = 0\n    now = 0\n    l = 0\n    for i in range ( n ) :\n        freq [ a [ i ] ] += 1\n        if ( freq [ a [ i ] ] == 1 ) :\n            now += 1\n        while ( now > k ) :\n            freq [ a [ l ] ] -= 1\n            if ( freq [ a [ l ] ] == 0 ) :\n                now -= 1\n            l += 1\n        if ( i - l + 1 >= end - start + 1 ) :\n            end = i\n            start = l\n    for i in range ( start , end + 1 ) :\n        print ( a [ i ] , end = \" \" )", "target_program": " static void longest ( int a [ ] , int n , int k ) {\n  int [ ] freq = new int [ 7 ] ;\n  int start = 0 , end = 0 , now = 0 , l = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    freq [ a [ i ] ] ++ ;\n    if ( freq [ a [ i ] ] == 1 ) now ++ ;\n    while ( now > k ) {\n      freq [ a [ l ] ] -- ;\n      if ( freq [ a [ l ] ] == 0 ) now -- ;\n      l ++ ;\n    }\n    if ( i - l + 1 >= end - start + 1 ) {\n      end = i ;\n      start = l ;\n    }\n  }\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longest ( a , n , k ) :\n    freq = [ 0 ] * n\n    start = 0\n    end = 0\n    now = 0\n    l = 0\n    for i in range ( n ) :\n        freq [ a [ i ] ] += 1\n        if ( freq [ a [ i ] ] == 1 ) :\n            now += 1\n        while ( now > k ) :\n            freq [ a [ l ] ] -= 1\n            if ( freq [ a [ l ] ] == 0 ) :\n                now -= 1\n            l += 1\n        if ( i - l + 1 >= end - start + 1 ) :\n            end = i\n            start = l\n    for i in range ( start , end + 1 ) :\n        print ( a [ i ] , end = \" \" )", "target_program": " void longest ( int a [ ], int n, int k ) {\n  unordered_map < int, int > freq;\n  int start = 0, end = 0, now = 0, l = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    freq [ a [ i ] ] ++;\n    if ( freq [ a [ i ] ] == 1 ) now ++;\n    while ( now > k ) {\n      freq [ a [ l ] ] --;\n      if ( freq [ a [ l ] ] == 0 ) now --;\n      l ++;\n    }\n    if ( i - l + 1 >= end - start + 1 ) end = i, start = l;\n  }\n  for ( int i = start;\n  i <= end;\n  i ++ ) cout << a [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void longest ( int a [ ] , int n , int k ) {\n  int [ ] freq = new int [ 7 ] ;\n  int start = 0 , end = 0 , now = 0 , l = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    freq [ a [ i ] ] ++ ;\n    if ( freq [ a [ i ] ] == 1 ) now ++ ;\n    while ( now > k ) {\n      freq [ a [ l ] ] -- ;\n      if ( freq [ a [ l ] ] == 0 ) now -- ;\n      l ++ ;\n    }\n    if ( i - l + 1 >= end - start + 1 ) {\n      end = i ;\n      start = l ;\n    }\n  }\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}", "target_program": " def longest ( a , n , k ) :\n    freq = [ 0 ] * n\n    start = 0\n    end = 0\n    now = 0\n    l = 0\n    for i in range ( n ) :\n        freq [ a [ i ] ] += 1\n        if ( freq [ a [ i ] ] == 1 ) :\n            now += 1\n        while ( now > k ) :\n            freq [ a [ l ] ] -= 1\n            if ( freq [ a [ l ] ] == 0 ) :\n                now -= 1\n            l += 1\n        if ( i - l + 1 >= end - start + 1 ) :\n            end = i\n            start = l\n    for i in range ( start , end + 1 ) :\n        print ( a [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void longest ( int a [ ] , int n , int k ) {\n  int [ ] freq = new int [ 7 ] ;\n  int start = 0 , end = 0 , now = 0 , l = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    freq [ a [ i ] ] ++ ;\n    if ( freq [ a [ i ] ] == 1 ) now ++ ;\n    while ( now > k ) {\n      freq [ a [ l ] ] -- ;\n      if ( freq [ a [ l ] ] == 0 ) now -- ;\n      l ++ ;\n    }\n    if ( i - l + 1 >= end - start + 1 ) {\n      end = i ;\n      start = l ;\n    }\n  }\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}", "target_program": " void longest ( int a [ ], int n, int k ) {\n  unordered_map < int, int > freq;\n  int start = 0, end = 0, now = 0, l = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    freq [ a [ i ] ] ++;\n    if ( freq [ a [ i ] ] == 1 ) now ++;\n    while ( now > k ) {\n      freq [ a [ l ] ] --;\n      if ( freq [ a [ l ] ] == 0 ) now --;\n      l ++;\n    }\n    if ( i - l + 1 >= end - start + 1 ) end = i, start = l;\n  }\n  for ( int i = start;\n  i <= end;\n  i ++ ) cout << a [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void longest ( int a [ ], int n, int k ) {\n  unordered_map < int, int > freq;\n  int start = 0, end = 0, now = 0, l = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    freq [ a [ i ] ] ++;\n    if ( freq [ a [ i ] ] == 1 ) now ++;\n    while ( now > k ) {\n      freq [ a [ l ] ] --;\n      if ( freq [ a [ l ] ] == 0 ) now --;\n      l ++;\n    }\n    if ( i - l + 1 >= end - start + 1 ) end = i, start = l;\n  }\n  for ( int i = start;\n  i <= end;\n  i ++ ) cout << a [ i ] << \" \";\n}", "target_program": " static void longest ( int a [ ] , int n , int k ) {\n  int [ ] freq = new int [ 7 ] ;\n  int start = 0 , end = 0 , now = 0 , l = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    freq [ a [ i ] ] ++ ;\n    if ( freq [ a [ i ] ] == 1 ) now ++ ;\n    while ( now > k ) {\n      freq [ a [ l ] ] -- ;\n      if ( freq [ a [ l ] ] == 0 ) now -- ;\n      l ++ ;\n    }\n    if ( i - l + 1 >= end - start + 1 ) {\n      end = i ;\n      start = l ;\n    }\n  }\n  for ( int i = start ;\n  i <= end ;\n  i ++ ) System . out . print ( a [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void longest ( int a [ ], int n, int k ) {\n  unordered_map < int, int > freq;\n  int start = 0, end = 0, now = 0, l = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    freq [ a [ i ] ] ++;\n    if ( freq [ a [ i ] ] == 1 ) now ++;\n    while ( now > k ) {\n      freq [ a [ l ] ] --;\n      if ( freq [ a [ l ] ] == 0 ) now --;\n      l ++;\n    }\n    if ( i - l + 1 >= end - start + 1 ) end = i, start = l;\n  }\n  for ( int i = start;\n  i <= end;\n  i ++ ) cout << a [ i ] << \" \";\n}", "target_program": " def longest ( a , n , k ) :\n    freq = [ 0 ] * n\n    start = 0\n    end = 0\n    now = 0\n    l = 0\n    for i in range ( n ) :\n        freq [ a [ i ] ] += 1\n        if ( freq [ a [ i ] ] == 1 ) :\n            now += 1\n        while ( now > k ) :\n            freq [ a [ l ] ] -= 1\n            if ( freq [ a [ l ] ] == 0 ) :\n                now -= 1\n            l += 1\n        if ( i - l + 1 >= end - start + 1 ) :\n            end = i\n            start = l\n    for i in range ( start , end + 1 ) :\n        print ( a [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def maxXOR ( mat , N ) :\n    max_xor = 0\n    for i in range ( N ) :\n        r_xor = 0\n        c_xor = 0\n        for j in range ( N ) :\n            r_xor = r_xor ^ mat [ i ] [ j ]\n            c_xor = c_xor ^ mat [ j ] [ i ]\n        if ( max_xor < max ( r_xor , c_xor ) ) :\n            max_xor = max ( r_xor , c_xor )\n    return max_xor", "target_program": " static int maxXOR ( int mat [ ] [ ] , int N ) {\n  int r_xor , c_xor ;\n  int max_xor = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    r_xor = 0 ;\n    c_xor = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ] ;\n      c_xor = c_xor ^ mat [ j ] [ i ] ;\n    }\n    if ( max_xor < Math . max ( r_xor , c_xor ) ) max_xor = Math . max ( r_xor , c_xor ) ;\n  }\n  return max_xor ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxXOR ( mat , N ) :\n    max_xor = 0\n    for i in range ( N ) :\n        r_xor = 0\n        c_xor = 0\n        for j in range ( N ) :\n            r_xor = r_xor ^ mat [ i ] [ j ]\n            c_xor = c_xor ^ mat [ j ] [ i ]\n        if ( max_xor < max ( r_xor , c_xor ) ) :\n            max_xor = max ( r_xor , c_xor )\n    return max_xor", "target_program": " int maxXOR ( int mat [ ] [ MAX ], int N ) {\n  int r_xor, c_xor;\n  int max_xor = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    r_xor = 0, c_xor = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ];\n      c_xor = c_xor ^ mat [ j ] [ i ];\n    }\n    if ( max_xor < max ( r_xor, c_xor ) ) max_xor = max ( r_xor, c_xor );\n  }\n  return max_xor;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxXOR ( int mat [ ] [ ] , int N ) {\n  int r_xor , c_xor ;\n  int max_xor = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    r_xor = 0 ;\n    c_xor = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ] ;\n      c_xor = c_xor ^ mat [ j ] [ i ] ;\n    }\n    if ( max_xor < Math . max ( r_xor , c_xor ) ) max_xor = Math . max ( r_xor , c_xor ) ;\n  }\n  return max_xor ;\n}", "target_program": " def maxXOR ( mat , N ) :\n    max_xor = 0\n    for i in range ( N ) :\n        r_xor = 0\n        c_xor = 0\n        for j in range ( N ) :\n            r_xor = r_xor ^ mat [ i ] [ j ]\n            c_xor = c_xor ^ mat [ j ] [ i ]\n        if ( max_xor < max ( r_xor , c_xor ) ) :\n            max_xor = max ( r_xor , c_xor )\n    return max_xor"}
{"source": "java", "target": "cpp", "source_program": " static int maxXOR ( int mat [ ] [ ] , int N ) {\n  int r_xor , c_xor ;\n  int max_xor = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    r_xor = 0 ;\n    c_xor = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ] ;\n      c_xor = c_xor ^ mat [ j ] [ i ] ;\n    }\n    if ( max_xor < Math . max ( r_xor , c_xor ) ) max_xor = Math . max ( r_xor , c_xor ) ;\n  }\n  return max_xor ;\n}", "target_program": " int maxXOR ( int mat [ ] [ MAX ], int N ) {\n  int r_xor, c_xor;\n  int max_xor = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    r_xor = 0, c_xor = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ];\n      c_xor = c_xor ^ mat [ j ] [ i ];\n    }\n    if ( max_xor < max ( r_xor, c_xor ) ) max_xor = max ( r_xor, c_xor );\n  }\n  return max_xor;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxXOR ( int mat [ ] [ MAX ], int N ) {\n  int r_xor, c_xor;\n  int max_xor = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    r_xor = 0, c_xor = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ];\n      c_xor = c_xor ^ mat [ j ] [ i ];\n    }\n    if ( max_xor < max ( r_xor, c_xor ) ) max_xor = max ( r_xor, c_xor );\n  }\n  return max_xor;\n}", "target_program": " static int maxXOR ( int mat [ ] [ ] , int N ) {\n  int r_xor , c_xor ;\n  int max_xor = 0 ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) {\n    r_xor = 0 ;\n    c_xor = 0 ;\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ] ;\n      c_xor = c_xor ^ mat [ j ] [ i ] ;\n    }\n    if ( max_xor < Math . max ( r_xor , c_xor ) ) max_xor = Math . max ( r_xor , c_xor ) ;\n  }\n  return max_xor ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxXOR ( int mat [ ] [ MAX ], int N ) {\n  int r_xor, c_xor;\n  int max_xor = 0;\n  for ( int i = 0;\n  i < N;\n  i ++ ) {\n    r_xor = 0, c_xor = 0;\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      r_xor = r_xor ^ mat [ i ] [ j ];\n      c_xor = c_xor ^ mat [ j ] [ i ];\n    }\n    if ( max_xor < max ( r_xor, c_xor ) ) max_xor = max ( r_xor, c_xor );\n  }\n  return max_xor;\n}", "target_program": " def maxXOR ( mat , N ) :\n    max_xor = 0\n    for i in range ( N ) :\n        r_xor = 0\n        c_xor = 0\n        for j in range ( N ) :\n            r_xor = r_xor ^ mat [ i ] [ j ]\n            c_xor = c_xor ^ mat [ j ] [ i ]\n        if ( max_xor < max ( r_xor , c_xor ) ) :\n            max_xor = max ( r_xor , c_xor )\n    return max_xor"}
{"source": "python", "target": "java", "source_program": " def printFactorialNums ( n ) :\n    fact = 1\n    x = 2\n    while fact <= n :\n        print ( fact , end = \" \" )\n        fact = fact * x\n        x += 1", "target_program": " static void printFactorialNums ( int n ) {\n  int fact = 1 ;\n  int x = 2 ;\n  while ( fact <= n ) {\n    System . out . print ( fact + \" \" ) ;\n    fact = fact * x ;\n    x ++ ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printFactorialNums ( n ) :\n    fact = 1\n    x = 2\n    while fact <= n :\n        print ( fact , end = \" \" )\n        fact = fact * x\n        x += 1", "target_program": " void printFactorialNums ( int n ) {\n  int fact = 1;\n  int x = 2;\n  while ( fact <= n ) {\n    cout << fact << \" \";\n    fact = fact * x;\n    x ++;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printFactorialNums ( int n ) {\n  int fact = 1 ;\n  int x = 2 ;\n  while ( fact <= n ) {\n    System . out . print ( fact + \" \" ) ;\n    fact = fact * x ;\n    x ++ ;\n  }\n}", "target_program": " def printFactorialNums ( n ) :\n    fact = 1\n    x = 2\n    while fact <= n :\n        print ( fact , end = \" \" )\n        fact = fact * x\n        x += 1"}
{"source": "java", "target": "cpp", "source_program": " static void printFactorialNums ( int n ) {\n  int fact = 1 ;\n  int x = 2 ;\n  while ( fact <= n ) {\n    System . out . print ( fact + \" \" ) ;\n    fact = fact * x ;\n    x ++ ;\n  }\n}", "target_program": " void printFactorialNums ( int n ) {\n  int fact = 1;\n  int x = 2;\n  while ( fact <= n ) {\n    cout << fact << \" \";\n    fact = fact * x;\n    x ++;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printFactorialNums ( int n ) {\n  int fact = 1;\n  int x = 2;\n  while ( fact <= n ) {\n    cout << fact << \" \";\n    fact = fact * x;\n    x ++;\n  }\n}", "target_program": " static void printFactorialNums ( int n ) {\n  int fact = 1 ;\n  int x = 2 ;\n  while ( fact <= n ) {\n    System . out . print ( fact + \" \" ) ;\n    fact = fact * x ;\n    x ++ ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printFactorialNums ( int n ) {\n  int fact = 1;\n  int x = 2;\n  while ( fact <= n ) {\n    cout << fact << \" \";\n    fact = fact * x;\n    x ++;\n  }\n}", "target_program": " def printFactorialNums ( n ) :\n    fact = 1\n    x = 2\n    while fact <= n :\n        print ( fact , end = \" \" )\n        fact = fact * x\n        x += 1"}
{"source": "python", "target": "java", "source_program": " def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0 ;\n    if ( n <= 2 ) :\n        return n ;\n    for i in range ( 3 , n + 1 ) :\n        c = b + ( i - 1 ) * a ;\n        a = b ;\n        b = c ;\n    return c ;", "target_program": " static int countFriendsPairings ( int n ) {\n  int a = 1 , b = 2 , c = 0 ;\n  if ( n <= 2 ) {\n    return n ;\n  }\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    c = b + ( i - 1 ) * a ;\n    a = b ;\n    b = c ;\n  }\n  return c ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0 ;\n    if ( n <= 2 ) :\n        return n ;\n    for i in range ( 3 , n + 1 ) :\n        c = b + ( i - 1 ) * a ;\n        a = b ;\n        b = c ;\n    return c ;", "target_program": " int countFriendsPairings ( int n ) {\n  int a = 1, b = 2, c = 0;\n  if ( n <= 2 ) {\n    return n;\n  }\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    c = b + ( i - 1 ) * a;\n    a = b;\n    b = c;\n  }\n  return c;\n}"}
{"source": "java", "target": "python", "source_program": " static int countFriendsPairings ( int n ) {\n  int a = 1 , b = 2 , c = 0 ;\n  if ( n <= 2 ) {\n    return n ;\n  }\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    c = b + ( i - 1 ) * a ;\n    a = b ;\n    b = c ;\n  }\n  return c ;\n}", "target_program": " def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0 ;\n    if ( n <= 2 ) :\n        return n ;\n    for i in range ( 3 , n + 1 ) :\n        c = b + ( i - 1 ) * a ;\n        a = b ;\n        b = c ;\n    return c ;"}
{"source": "java", "target": "cpp", "source_program": " static int countFriendsPairings ( int n ) {\n  int a = 1 , b = 2 , c = 0 ;\n  if ( n <= 2 ) {\n    return n ;\n  }\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    c = b + ( i - 1 ) * a ;\n    a = b ;\n    b = c ;\n  }\n  return c ;\n}", "target_program": " int countFriendsPairings ( int n ) {\n  int a = 1, b = 2, c = 0;\n  if ( n <= 2 ) {\n    return n;\n  }\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    c = b + ( i - 1 ) * a;\n    a = b;\n    b = c;\n  }\n  return c;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countFriendsPairings ( int n ) {\n  int a = 1, b = 2, c = 0;\n  if ( n <= 2 ) {\n    return n;\n  }\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    c = b + ( i - 1 ) * a;\n    a = b;\n    b = c;\n  }\n  return c;\n}", "target_program": " static int countFriendsPairings ( int n ) {\n  int a = 1 , b = 2 , c = 0 ;\n  if ( n <= 2 ) {\n    return n ;\n  }\n  for ( int i = 3 ;\n  i <= n ;\n  i ++ ) {\n    c = b + ( i - 1 ) * a ;\n    a = b ;\n    b = c ;\n  }\n  return c ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countFriendsPairings ( int n ) {\n  int a = 1, b = 2, c = 0;\n  if ( n <= 2 ) {\n    return n;\n  }\n  for ( int i = 3;\n  i <= n;\n  i ++ ) {\n    c = b + ( i - 1 ) * a;\n    a = b;\n    b = c;\n  }\n  return c;\n}", "target_program": " def countFriendsPairings ( n ) :\n    a , b , c = 1 , 2 , 0 ;\n    if ( n <= 2 ) :\n        return n ;\n    for i in range ( 3 , n + 1 ) :\n        c = b + ( i - 1 ) * a ;\n        a = b ;\n        b = c ;\n    return c ;"}
{"source": "python", "target": "java", "source_program": " def firstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n    print ( \" Process No.Process Size      Block no.\" )\n    for i in range ( n ) :\n        print ( \" \" , i + 1 , \"         \" , processSize [ i ] , \"         \" , end = \" \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )", "target_program": " static void firstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \" \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def firstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n    print ( \" Process No.Process Size      Block no.\" )\n    for i in range ( n ) :\n        print ( \" \" , i + 1 , \"         \" , processSize [ i ] , \"         \" , end = \" \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )", "target_program": " void firstFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void firstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \" \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " def firstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n    print ( \" Process No.Process Size      Block no.\" )\n    for i in range ( n ) :\n        print ( \" \" , i + 1 , \"         \" , processSize [ i ] , \"         \" , end = \" \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"source": "java", "target": "cpp", "source_program": " static void firstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \" \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}", "target_program": " void firstFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void firstFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}", "target_program": " static void firstFit ( int blockSize [ ] , int m , int processSize [ ] , int n ) {\n  int allocation [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < allocation . length ;\n  i ++ ) allocation [ i ] = - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < m ;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j ;\n        blockSize [ j ] -= processSize [ i ] ;\n        break ;\n      }\n    }\n  }\n  System . out . println ( \"\\nProcess No.\\tProcess Size\\tBlock no.\" ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    System . out . print ( \" \" + ( i + 1 ) + \"\\t\\t\" + processSize [ i ] + \"\\t\\t\" ) ;\n    if ( allocation [ i ] != - 1 ) System . out . print ( allocation [ i ] + 1 ) ;\n    else System . out . print ( \"Not Allocated\" ) ;\n    System . out . println ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void firstFit ( int blockSize [ ], int m, int processSize [ ], int n ) {\n  int allocation [ n ];\n  memset ( allocation, - 1, sizeof ( allocation ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < m;\n    j ++ ) {\n      if ( blockSize [ j ] >= processSize [ i ] ) {\n        allocation [ i ] = j;\n        blockSize [ j ] -= processSize [ i ];\n        break;\n      }\n    }\n  }\n  cout << \"\\nProcess No.\\tProcess Size\\tBlock no.\\n\";\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    cout << \" \" << i + 1 << \"\\t\\t\" << processSize [ i ] << \"\\t\\t\";\n    if ( allocation [ i ] != - 1 ) cout << allocation [ i ] + 1;\n    else cout << \"Not Allocated\";\n    cout << endl;\n  }\n}", "target_program": " def firstFit ( blockSize , m , processSize , n ) :\n    allocation = [ - 1 ] * n\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if blockSize [ j ] >= processSize [ i ] :\n                allocation [ i ] = j\n                blockSize [ j ] -= processSize [ i ]\n                break\n    print ( \" Process No.Process Size      Block no.\" )\n    for i in range ( n ) :\n        print ( \" \" , i + 1 , \"         \" , processSize [ i ] , \"         \" , end = \" \" )\n        if allocation [ i ] != - 1 :\n            print ( allocation [ i ] + 1 )\n        else :\n            print ( \"Not Allocated\" )"}
{"source": "python", "target": "java", "source_program": " def isPower ( x , y ) :\n    if ( x == 1 ) :\n        return ( y == 1 )\n    pow = 1\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )", "target_program": " public static boolean isPower ( int x , int y ) {\n  if ( x == 1 ) return ( y == 1 ) ;\n  int pow = 1 ;\n  while ( pow < y ) pow = pow * x ;\n  return ( pow == y ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPower ( x , y ) :\n    if ( x == 1 ) :\n        return ( y == 1 )\n    pow = 1\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )", "target_program": " bool isPower ( int x, long int y ) {\n  if ( x == 1 ) return ( y == 1 );\n  long int pow = 1;\n  while ( pow < y ) pow *= x;\n  return ( pow == y );\n}"}
{"source": "java", "target": "python", "source_program": " public static boolean isPower ( int x , int y ) {\n  if ( x == 1 ) return ( y == 1 ) ;\n  int pow = 1 ;\n  while ( pow < y ) pow = pow * x ;\n  return ( pow == y ) ;\n}", "target_program": " def isPower ( x , y ) :\n    if ( x == 1 ) :\n        return ( y == 1 )\n    pow = 1\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )"}
{"source": "java", "target": "cpp", "source_program": " public static boolean isPower ( int x , int y ) {\n  if ( x == 1 ) return ( y == 1 ) ;\n  int pow = 1 ;\n  while ( pow < y ) pow = pow * x ;\n  return ( pow == y ) ;\n}", "target_program": " bool isPower ( int x, long int y ) {\n  if ( x == 1 ) return ( y == 1 );\n  long int pow = 1;\n  while ( pow < y ) pow *= x;\n  return ( pow == y );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPower ( int x, long int y ) {\n  if ( x == 1 ) return ( y == 1 );\n  long int pow = 1;\n  while ( pow < y ) pow *= x;\n  return ( pow == y );\n}", "target_program": " public static boolean isPower ( int x , int y ) {\n  if ( x == 1 ) return ( y == 1 ) ;\n  int pow = 1 ;\n  while ( pow < y ) pow = pow * x ;\n  return ( pow == y ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPower ( int x, long int y ) {\n  if ( x == 1 ) return ( y == 1 );\n  long int pow = 1;\n  while ( pow < y ) pow *= x;\n  return ( pow == y );\n}", "target_program": " def isPower ( x , y ) :\n    if ( x == 1 ) :\n        return ( y == 1 )\n    pow = 1\n    while ( pow < y ) :\n        pow = pow * x\n    return ( pow == y )"}
{"source": "python", "target": "java", "source_program": " def longDivision ( number , divisor ) :\n    ans = \"\" ;\n    idx = 0 ;\n    temp = ord ( number [ idx ] ) - ord ( '0' ) ;\n    while ( temp < divisor ) :\n        temp = ( temp * 10 + ord ( number [ idx + 1 ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    idx += 1 ;\n    while ( ( len ( number ) ) > idx ) :\n        ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n        temp = ( ( temp % divisor ) * 10 + ord ( number [ idx ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n    if ( len ( ans ) == 0 ) :\n        return \"0\" ;\n    return ans ;", "target_program": " static String longDivision ( String number , int divisor ) {\n  String ans = \"\" ;\n  int idx = 0 ;\n  char [ ] num = number . toCharArray ( ) ;\n  int temp = num [ idx ] - '0' ;\n  while ( temp < divisor ) temp = temp * 10 + ( num [ ++ idx ] - '0' ) ;\n  idx += 1 ;\n  while ( num . length > idx ) {\n    ans += ( temp / divisor ) ;\n    temp = ( temp % divisor ) * 10 + num [ idx ++ ] - '0' ;\n  }\n  if ( ans . length ( ) == 0 ) return \"0\" ;\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longDivision ( number , divisor ) :\n    ans = \"\" ;\n    idx = 0 ;\n    temp = ord ( number [ idx ] ) - ord ( '0' ) ;\n    while ( temp < divisor ) :\n        temp = ( temp * 10 + ord ( number [ idx + 1 ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    idx += 1 ;\n    while ( ( len ( number ) ) > idx ) :\n        ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n        temp = ( ( temp % divisor ) * 10 + ord ( number [ idx ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n    if ( len ( ans ) == 0 ) :\n        return \"0\" ;\n    return ans ;", "target_program": " string longDivision ( string number, int divisor ) {\n  string ans;\n  int idx = 0;\n  int temp = number [ idx ] - '0';\n  while ( temp < divisor ) temp = temp * 10 + ( number [ ++ idx ] - '0' );\n  while ( number . size ( ) > idx ) {\n    ans += ( temp / divisor ) + '0';\n    temp = ( temp % divisor ) * 10 + number [ ++ idx ] - '0';\n  }\n  if ( ans . length ( ) == 0 ) return \"0\";\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static String longDivision ( String number , int divisor ) {\n  String ans = \"\" ;\n  int idx = 0 ;\n  char [ ] num = number . toCharArray ( ) ;\n  int temp = num [ idx ] - '0' ;\n  while ( temp < divisor ) temp = temp * 10 + ( num [ ++ idx ] - '0' ) ;\n  idx += 1 ;\n  while ( num . length > idx ) {\n    ans += ( temp / divisor ) ;\n    temp = ( temp % divisor ) * 10 + num [ idx ++ ] - '0' ;\n  }\n  if ( ans . length ( ) == 0 ) return \"0\" ;\n  return ans ;\n}", "target_program": " def longDivision ( number , divisor ) :\n    ans = \"\" ;\n    idx = 0 ;\n    temp = ord ( number [ idx ] ) - ord ( '0' ) ;\n    while ( temp < divisor ) :\n        temp = ( temp * 10 + ord ( number [ idx + 1 ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    idx += 1 ;\n    while ( ( len ( number ) ) > idx ) :\n        ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n        temp = ( ( temp % divisor ) * 10 + ord ( number [ idx ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n    if ( len ( ans ) == 0 ) :\n        return \"0\" ;\n    return ans ;"}
{"source": "java", "target": "cpp", "source_program": " static String longDivision ( String number , int divisor ) {\n  String ans = \"\" ;\n  int idx = 0 ;\n  char [ ] num = number . toCharArray ( ) ;\n  int temp = num [ idx ] - '0' ;\n  while ( temp < divisor ) temp = temp * 10 + ( num [ ++ idx ] - '0' ) ;\n  idx += 1 ;\n  while ( num . length > idx ) {\n    ans += ( temp / divisor ) ;\n    temp = ( temp % divisor ) * 10 + num [ idx ++ ] - '0' ;\n  }\n  if ( ans . length ( ) == 0 ) return \"0\" ;\n  return ans ;\n}", "target_program": " string longDivision ( string number, int divisor ) {\n  string ans;\n  int idx = 0;\n  int temp = number [ idx ] - '0';\n  while ( temp < divisor ) temp = temp * 10 + ( number [ ++ idx ] - '0' );\n  while ( number . size ( ) > idx ) {\n    ans += ( temp / divisor ) + '0';\n    temp = ( temp % divisor ) * 10 + number [ ++ idx ] - '0';\n  }\n  if ( ans . length ( ) == 0 ) return \"0\";\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " string longDivision ( string number, int divisor ) {\n  string ans;\n  int idx = 0;\n  int temp = number [ idx ] - '0';\n  while ( temp < divisor ) temp = temp * 10 + ( number [ ++ idx ] - '0' );\n  while ( number . size ( ) > idx ) {\n    ans += ( temp / divisor ) + '0';\n    temp = ( temp % divisor ) * 10 + number [ ++ idx ] - '0';\n  }\n  if ( ans . length ( ) == 0 ) return \"0\";\n  return ans;\n}", "target_program": " static String longDivision ( String number , int divisor ) {\n  String ans = \"\" ;\n  int idx = 0 ;\n  char [ ] num = number . toCharArray ( ) ;\n  int temp = num [ idx ] - '0' ;\n  while ( temp < divisor ) temp = temp * 10 + ( num [ ++ idx ] - '0' ) ;\n  idx += 1 ;\n  while ( num . length > idx ) {\n    ans += ( temp / divisor ) ;\n    temp = ( temp % divisor ) * 10 + num [ idx ++ ] - '0' ;\n  }\n  if ( ans . length ( ) == 0 ) return \"0\" ;\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string longDivision ( string number, int divisor ) {\n  string ans;\n  int idx = 0;\n  int temp = number [ idx ] - '0';\n  while ( temp < divisor ) temp = temp * 10 + ( number [ ++ idx ] - '0' );\n  while ( number . size ( ) > idx ) {\n    ans += ( temp / divisor ) + '0';\n    temp = ( temp % divisor ) * 10 + number [ ++ idx ] - '0';\n  }\n  if ( ans . length ( ) == 0 ) return \"0\";\n  return ans;\n}", "target_program": " def longDivision ( number , divisor ) :\n    ans = \"\" ;\n    idx = 0 ;\n    temp = ord ( number [ idx ] ) - ord ( '0' ) ;\n    while ( temp < divisor ) :\n        temp = ( temp * 10 + ord ( number [ idx + 1 ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    idx += 1 ;\n    while ( ( len ( number ) ) > idx ) :\n        ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n        temp = ( ( temp % divisor ) * 10 + ord ( number [ idx ] ) - ord ( '0' ) ) ;\n        idx += 1 ;\n    ans += chr ( math.floor ( temp // divisor ) + ord ( '0' ) ) ;\n    if ( len ( ans ) == 0 ) :\n        return \"0\" ;\n    return ans ;"}
{"source": "python", "target": "java", "source_program": " def findMax ( arr ) :\n    row = 0\n    j = N - 1\n    for i in range ( 0 , N ) :\n        while ( arr [ i ] [ j ] == 1 and j >= 0 ) :\n            row = i\n            j -= 1\n    print ( \"Row number = \" , row + 1 , \", MaxCount = \" , N - 1 - j )", "target_program": " static void findMax ( int arr [ ] [ ] ) {\n  int row = 0 , i , j ;\n  for ( i = 0 , j = N - 1 ;\n  i < N ;\n  i ++ ) {\n    while ( j >= 0 && arr [ i ] [ j ] == 1 ) {\n      row = i ;\n      j -- ;\n    }\n  }\n  System . out . print ( \"Row number = \" + ( row + 1 ) ) ;\n  System . out . print ( \", MaxCount = \" + ( N - 1 - j ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMax ( arr ) :\n    row = 0\n    j = N - 1\n    for i in range ( 0 , N ) :\n        while ( arr [ i ] [ j ] == 1 and j >= 0 ) :\n            row = i\n            j -= 1\n    print ( \"Row number = \" , row + 1 , \", MaxCount = \" , N - 1 - j )", "target_program": " void findMax ( int arr [ ] [ N ] ) {\n  int row = 0, i, j;\n  for ( i = 0, j = N - 1;\n  i < N;\n  i ++ ) {\n    while ( arr [ i ] [ j ] == 1 && j >= 0 ) {\n      row = i;\n      j --;\n    }\n  }\n  cout << \"Row number = \" << row + 1;\n  cout << \", MaxCount = \" << N - 1 - j;\n}"}
{"source": "java", "target": "python", "source_program": " static void findMax ( int arr [ ] [ ] ) {\n  int row = 0 , i , j ;\n  for ( i = 0 , j = N - 1 ;\n  i < N ;\n  i ++ ) {\n    while ( j >= 0 && arr [ i ] [ j ] == 1 ) {\n      row = i ;\n      j -- ;\n    }\n  }\n  System . out . print ( \"Row number = \" + ( row + 1 ) ) ;\n  System . out . print ( \", MaxCount = \" + ( N - 1 - j ) ) ;\n}", "target_program": " def findMax ( arr ) :\n    row = 0\n    j = N - 1\n    for i in range ( 0 , N ) :\n        while ( arr [ i ] [ j ] == 1 and j >= 0 ) :\n            row = i\n            j -= 1\n    print ( \"Row number = \" , row + 1 , \", MaxCount = \" , N - 1 - j )"}
{"source": "java", "target": "cpp", "source_program": " static void findMax ( int arr [ ] [ ] ) {\n  int row = 0 , i , j ;\n  for ( i = 0 , j = N - 1 ;\n  i < N ;\n  i ++ ) {\n    while ( j >= 0 && arr [ i ] [ j ] == 1 ) {\n      row = i ;\n      j -- ;\n    }\n  }\n  System . out . print ( \"Row number = \" + ( row + 1 ) ) ;\n  System . out . print ( \", MaxCount = \" + ( N - 1 - j ) ) ;\n}", "target_program": " void findMax ( int arr [ ] [ N ] ) {\n  int row = 0, i, j;\n  for ( i = 0, j = N - 1;\n  i < N;\n  i ++ ) {\n    while ( arr [ i ] [ j ] == 1 && j >= 0 ) {\n      row = i;\n      j --;\n    }\n  }\n  cout << \"Row number = \" << row + 1;\n  cout << \", MaxCount = \" << N - 1 - j;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findMax ( int arr [ ] [ N ] ) {\n  int row = 0, i, j;\n  for ( i = 0, j = N - 1;\n  i < N;\n  i ++ ) {\n    while ( arr [ i ] [ j ] == 1 && j >= 0 ) {\n      row = i;\n      j --;\n    }\n  }\n  cout << \"Row number = \" << row + 1;\n  cout << \", MaxCount = \" << N - 1 - j;\n}", "target_program": " static void findMax ( int arr [ ] [ ] ) {\n  int row = 0 , i , j ;\n  for ( i = 0 , j = N - 1 ;\n  i < N ;\n  i ++ ) {\n    while ( j >= 0 && arr [ i ] [ j ] == 1 ) {\n      row = i ;\n      j -- ;\n    }\n  }\n  System . out . print ( \"Row number = \" + ( row + 1 ) ) ;\n  System . out . print ( \", MaxCount = \" + ( N - 1 - j ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findMax ( int arr [ ] [ N ] ) {\n  int row = 0, i, j;\n  for ( i = 0, j = N - 1;\n  i < N;\n  i ++ ) {\n    while ( arr [ i ] [ j ] == 1 && j >= 0 ) {\n      row = i;\n      j --;\n    }\n  }\n  cout << \"Row number = \" << row + 1;\n  cout << \", MaxCount = \" << N - 1 - j;\n}", "target_program": " def findMax ( arr ) :\n    row = 0\n    j = N - 1\n    for i in range ( 0 , N ) :\n        while ( arr [ i ] [ j ] == 1 and j >= 0 ) :\n            row = i\n            j -= 1\n    print ( \"Row number = \" , row + 1 , \", MaxCount = \" , N - 1 - j )"}
{"source": "python", "target": "java", "source_program": " def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    for i in range ( 1 , n + 1 ) :\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n    return n", "target_program": " static int findRotations ( String str ) {\n  String tmp = str + str ;\n  int n = str . length ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    String substring = tmp . substring ( i , str . length ( ) ) ;\n    if ( str == substring ) return i ;\n  }\n  return n ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    for i in range ( 1 , n + 1 ) :\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n    return n", "target_program": " int findRotations ( string str ) {\n  string tmp = str + str;\n  int n = str . length ( );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    string substring = tmp . substr ( i, str . size ( ) );\n    if ( str == substring ) return i;\n  }\n  return n;\n}"}
{"source": "java", "target": "python", "source_program": " static int findRotations ( String str ) {\n  String tmp = str + str ;\n  int n = str . length ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    String substring = tmp . substring ( i , str . length ( ) ) ;\n    if ( str == substring ) return i ;\n  }\n  return n ;\n}", "target_program": " def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    for i in range ( 1 , n + 1 ) :\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n    return n"}
{"source": "java", "target": "cpp", "source_program": " static int findRotations ( String str ) {\n  String tmp = str + str ;\n  int n = str . length ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    String substring = tmp . substring ( i , str . length ( ) ) ;\n    if ( str == substring ) return i ;\n  }\n  return n ;\n}", "target_program": " int findRotations ( string str ) {\n  string tmp = str + str;\n  int n = str . length ( );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    string substring = tmp . substr ( i, str . size ( ) );\n    if ( str == substring ) return i;\n  }\n  return n;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findRotations ( string str ) {\n  string tmp = str + str;\n  int n = str . length ( );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    string substring = tmp . substr ( i, str . size ( ) );\n    if ( str == substring ) return i;\n  }\n  return n;\n}", "target_program": " static int findRotations ( String str ) {\n  String tmp = str + str ;\n  int n = str . length ( ) ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) {\n    String substring = tmp . substring ( i , str . length ( ) ) ;\n    if ( str == substring ) return i ;\n  }\n  return n ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findRotations ( string str ) {\n  string tmp = str + str;\n  int n = str . length ( );\n  for ( int i = 1;\n  i <= n;\n  i ++ ) {\n    string substring = tmp . substr ( i, str . size ( ) );\n    if ( str == substring ) return i;\n  }\n  return n;\n}", "target_program": " def findRotations ( str ) :\n    tmp = str + str\n    n = len ( str )\n    for i in range ( 1 , n + 1 ) :\n        substring = tmp [ i : n ]\n        if ( str == substring ) :\n            return i\n    return n"}
{"source": "python", "target": "java", "source_program": " def findNth ( n ) :\n    count = 0 ;\n    curr = 19 ;\n    while ( True ) :\n        sum = 0 ;\n        x = curr ;\n        while ( x > 0 ) :\n            sum = sum + x % 10 ;\n            x = int ( x / 10 ) ;\n        if ( sum == 10 ) :\n            count += 1 ;\n        if ( count == n ) :\n            return curr ;\n        curr += 9 ;\n    return - 1 ;", "target_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 19 ;\n  ;\n  curr += 9 ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def findNth ( n ) :\n    count = 0 ;\n    curr = 19 ;\n    while ( True ) :\n        sum = 0 ;\n        x = curr ;\n        while ( x > 0 ) :\n            sum = sum + x % 10 ;\n            x = int ( x / 10 ) ;\n        if ( sum == 10 ) :\n            count += 1 ;\n        if ( count == n ) :\n            return curr ;\n        curr += 9 ;\n    return - 1 ;", "target_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 19;\n  ;\n  curr += 9 ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 19 ;\n  ;\n  curr += 9 ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}", "target_program": " def findNth ( n ) :\n    count = 0 ;\n    curr = 19 ;\n    while ( True ) :\n        sum = 0 ;\n        x = curr ;\n        while ( x > 0 ) :\n            sum = sum + x % 10 ;\n            x = int ( x / 10 ) ;\n        if ( sum == 10 ) :\n            count += 1 ;\n        if ( count == n ) :\n            return curr ;\n        curr += 9 ;\n    return - 1 ;"}
{"source": "java", "target": "cpp", "source_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 19 ;\n  ;\n  curr += 9 ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}", "target_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 19;\n  ;\n  curr += 9 ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 19;\n  ;\n  curr += 9 ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}", "target_program": " public static int findNth ( int n ) {\n  int count = 0 ;\n  for ( int curr = 19 ;\n  ;\n  curr += 9 ) {\n    int sum = 0 ;\n    for ( int x = curr ;\n    x > 0 ;\n    x = x / 10 ) sum = sum + x % 10 ;\n    if ( sum == 10 ) count ++ ;\n    if ( count == n ) return curr ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " int findNth ( int n ) {\n  int count = 0;\n  for ( int curr = 19;\n  ;\n  curr += 9 ) {\n    int sum = 0;\n    for ( int x = curr;\n    x > 0;\n    x = x / 10 ) sum = sum + x % 10;\n    if ( sum == 10 ) count ++;\n    if ( count == n ) return curr;\n  }\n  return - 1;\n}", "target_program": " def findNth ( n ) :\n    count = 0 ;\n    curr = 19 ;\n    while ( True ) :\n        sum = 0 ;\n        x = curr ;\n        while ( x > 0 ) :\n            sum = sum + x % 10 ;\n            x = int ( x / 10 ) ;\n        if ( sum == 10 ) :\n            count += 1 ;\n        if ( count == n ) :\n            return curr ;\n        curr += 9 ;\n    return - 1 ;"}
{"source": "python", "target": "java", "source_program": " def sumAtKthLevel ( tree , k , i , level ) :\n    if ( tree [ i [ 0 ] ] == '(' ) :\n        i [ 0 ] += 1\n        if ( tree [ i [ 0 ] ] == ')' ) :\n            return 0\n        sum = 0\n        if ( level == k ) :\n            sum = int ( tree [ i [ 0 ] ] )\n        i [ 0 ] += 1\n        leftsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        rightsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        return sum + leftsum + rightsum", "target_program": " static int sumAtKthLevel ( String tree , int k , int level ) {\n  if ( tree . charAt ( i ++ ) == '(' ) {\n    if ( tree . charAt ( i ) == ')' ) return 0 ;\n    int sum = 0 ;\n    if ( level == k ) sum = tree . charAt ( i ) - '0' ;\n    ++ i ;\n    int leftsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    int rightsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    return sum + leftsum + rightsum ;\n  }\n  return Integer . MIN_VALUE ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumAtKthLevel ( tree , k , i , level ) :\n    if ( tree [ i [ 0 ] ] == '(' ) :\n        i [ 0 ] += 1\n        if ( tree [ i [ 0 ] ] == ')' ) :\n            return 0\n        sum = 0\n        if ( level == k ) :\n            sum = int ( tree [ i [ 0 ] ] )\n        i [ 0 ] += 1\n        leftsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        rightsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        return sum + leftsum + rightsum", "target_program": " int sumAtKthLevel ( string tree, int k, int & i, int level ) {\n  if ( tree [ i ++ ] == '(' ) {\n    if ( tree [ i ] == ')' ) return 0;\n    int sum = 0;\n    if ( level == k ) sum = tree [ i ] - '0';\n    int leftsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    int rightsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    ++ i;\n    return sum + leftsum + rightsum;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static int sumAtKthLevel ( String tree , int k , int level ) {\n  if ( tree . charAt ( i ++ ) == '(' ) {\n    if ( tree . charAt ( i ) == ')' ) return 0 ;\n    int sum = 0 ;\n    if ( level == k ) sum = tree . charAt ( i ) - '0' ;\n    ++ i ;\n    int leftsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    int rightsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    return sum + leftsum + rightsum ;\n  }\n  return Integer . MIN_VALUE ;\n}", "target_program": " def sumAtKthLevel ( tree , k , i , level ) :\n    if ( tree [ i [ 0 ] ] == '(' ) :\n        i [ 0 ] += 1\n        if ( tree [ i [ 0 ] ] == ')' ) :\n            return 0\n        sum = 0\n        if ( level == k ) :\n            sum = int ( tree [ i [ 0 ] ] )\n        i [ 0 ] += 1\n        leftsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        rightsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        return sum + leftsum + rightsum"}
{"source": "java", "target": "cpp", "source_program": " static int sumAtKthLevel ( String tree , int k , int level ) {\n  if ( tree . charAt ( i ++ ) == '(' ) {\n    if ( tree . charAt ( i ) == ')' ) return 0 ;\n    int sum = 0 ;\n    if ( level == k ) sum = tree . charAt ( i ) - '0' ;\n    ++ i ;\n    int leftsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    int rightsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    return sum + leftsum + rightsum ;\n  }\n  return Integer . MIN_VALUE ;\n}", "target_program": " int sumAtKthLevel ( string tree, int k, int & i, int level ) {\n  if ( tree [ i ++ ] == '(' ) {\n    if ( tree [ i ] == ')' ) return 0;\n    int sum = 0;\n    if ( level == k ) sum = tree [ i ] - '0';\n    int leftsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    int rightsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    ++ i;\n    return sum + leftsum + rightsum;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumAtKthLevel ( string tree, int k, int & i, int level ) {\n  if ( tree [ i ++ ] == '(' ) {\n    if ( tree [ i ] == ')' ) return 0;\n    int sum = 0;\n    if ( level == k ) sum = tree [ i ] - '0';\n    int leftsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    int rightsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    ++ i;\n    return sum + leftsum + rightsum;\n  }\n}", "target_program": " static int sumAtKthLevel ( String tree , int k , int level ) {\n  if ( tree . charAt ( i ++ ) == '(' ) {\n    if ( tree . charAt ( i ) == ')' ) return 0 ;\n    int sum = 0 ;\n    if ( level == k ) sum = tree . charAt ( i ) - '0' ;\n    ++ i ;\n    int leftsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    int rightsum = sumAtKthLevel ( tree , k , level + 1 ) ;\n    ++ i ;\n    return sum + leftsum + rightsum ;\n  }\n  return Integer . MIN_VALUE ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumAtKthLevel ( string tree, int k, int & i, int level ) {\n  if ( tree [ i ++ ] == '(' ) {\n    if ( tree [ i ] == ')' ) return 0;\n    int sum = 0;\n    if ( level == k ) sum = tree [ i ] - '0';\n    int leftsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    int rightsum = sumAtKthLevel ( tree, k, ++ i, level + 1 );\n    ++ i;\n    return sum + leftsum + rightsum;\n  }\n}", "target_program": " def sumAtKthLevel ( tree , k , i , level ) :\n    if ( tree [ i [ 0 ] ] == '(' ) :\n        i [ 0 ] += 1\n        if ( tree [ i [ 0 ] ] == ')' ) :\n            return 0\n        sum = 0\n        if ( level == k ) :\n            sum = int ( tree [ i [ 0 ] ] )\n        i [ 0 ] += 1\n        leftsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        rightsum = sumAtKthLevel ( tree , k , i , level + 1 )\n        i [ 0 ] += 1\n        return sum + leftsum + rightsum"}
{"source": "python", "target": "java", "source_program": " def countWays ( n ) :\n    DP = [ 0 for i in range ( 0 , n + 1 ) ]\n    DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1\n    DP [ 3 ] = 2\n    for i in range ( 4 , n + 1 ) :\n        DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ]\n    return DP [ n ]", "target_program": " static int countWays ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1 ;\n  DP [ 3 ] = 2 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ] ;\n  return DP [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWays ( n ) :\n    DP = [ 0 for i in range ( 0 , n + 1 ) ]\n    DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1\n    DP [ 3 ] = 2\n    for i in range ( 4 , n + 1 ) :\n        DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ]\n    return DP [ n ]", "target_program": " int countWays ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1;\n  DP [ 3 ] = 2;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ];\n  return DP [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countWays ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1 ;\n  DP [ 3 ] = 2 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ] ;\n  return DP [ n ] ;\n}", "target_program": " def countWays ( n ) :\n    DP = [ 0 for i in range ( 0 , n + 1 ) ]\n    DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1\n    DP [ 3 ] = 2\n    for i in range ( 4 , n + 1 ) :\n        DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ]\n    return DP [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countWays ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1 ;\n  DP [ 3 ] = 2 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ] ;\n  return DP [ n ] ;\n}", "target_program": " int countWays ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1;\n  DP [ 3 ] = 2;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ];\n  return DP [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countWays ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1;\n  DP [ 3 ] = 2;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ];\n  return DP [ n ];\n}", "target_program": " static int countWays ( int n ) {\n  int DP [ ] = new int [ n + 1 ] ;\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1 ;\n  DP [ 3 ] = 2 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ] ;\n  return DP [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countWays ( int n ) {\n  int DP [ n + 1 ];\n  DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1;\n  DP [ 3 ] = 2;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ];\n  return DP [ n ];\n}", "target_program": " def countWays ( n ) :\n    DP = [ 0 for i in range ( 0 , n + 1 ) ]\n    DP [ 0 ] = DP [ 1 ] = DP [ 2 ] = 1\n    DP [ 3 ] = 2\n    for i in range ( 4 , n + 1 ) :\n        DP [ i ] = DP [ i - 1 ] + DP [ i - 3 ] + DP [ i - 4 ]\n    return DP [ n ]"}
{"source": "python", "target": "java", "source_program": " def findMaxSum ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res", "target_program": " static int findMaxSum ( int [ ] arr , int n ) {\n  int res = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int prefix_sum = arr [ i ] ;\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) prefix_sum += arr [ j ] ;\n    int suffix_sum = arr [ i ] ;\n    for ( int j = n - 1 ;\n    j > i ;\n    j -- ) suffix_sum += arr [ j ] ;\n    if ( prefix_sum == suffix_sum ) res = Math . max ( res , prefix_sum ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxSum ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res", "target_program": " int findMaxSum ( int arr [ ], int n ) {\n  int res = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int prefix_sum = arr [ i ];\n    for ( int j = 0;\n    j < i;\n    j ++ ) prefix_sum += arr [ j ];\n    int suffix_sum = arr [ i ];\n    for ( int j = n - 1;\n    j > i;\n    j -- ) suffix_sum += arr [ j ];\n    if ( prefix_sum == suffix_sum ) res = max ( res, prefix_sum );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxSum ( int [ ] arr , int n ) {\n  int res = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int prefix_sum = arr [ i ] ;\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) prefix_sum += arr [ j ] ;\n    int suffix_sum = arr [ i ] ;\n    for ( int j = n - 1 ;\n    j > i ;\n    j -- ) suffix_sum += arr [ j ] ;\n    if ( prefix_sum == suffix_sum ) res = Math . max ( res , prefix_sum ) ;\n  }\n  return res ;\n}", "target_program": " def findMaxSum ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxSum ( int [ ] arr , int n ) {\n  int res = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int prefix_sum = arr [ i ] ;\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) prefix_sum += arr [ j ] ;\n    int suffix_sum = arr [ i ] ;\n    for ( int j = n - 1 ;\n    j > i ;\n    j -- ) suffix_sum += arr [ j ] ;\n    if ( prefix_sum == suffix_sum ) res = Math . max ( res , prefix_sum ) ;\n  }\n  return res ;\n}", "target_program": " int findMaxSum ( int arr [ ], int n ) {\n  int res = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int prefix_sum = arr [ i ];\n    for ( int j = 0;\n    j < i;\n    j ++ ) prefix_sum += arr [ j ];\n    int suffix_sum = arr [ i ];\n    for ( int j = n - 1;\n    j > i;\n    j -- ) suffix_sum += arr [ j ];\n    if ( prefix_sum == suffix_sum ) res = max ( res, prefix_sum );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxSum ( int arr [ ], int n ) {\n  int res = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int prefix_sum = arr [ i ];\n    for ( int j = 0;\n    j < i;\n    j ++ ) prefix_sum += arr [ j ];\n    int suffix_sum = arr [ i ];\n    for ( int j = n - 1;\n    j > i;\n    j -- ) suffix_sum += arr [ j ];\n    if ( prefix_sum == suffix_sum ) res = max ( res, prefix_sum );\n  }\n  return res;\n}", "target_program": " static int findMaxSum ( int [ ] arr , int n ) {\n  int res = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int prefix_sum = arr [ i ] ;\n    for ( int j = 0 ;\n    j < i ;\n    j ++ ) prefix_sum += arr [ j ] ;\n    int suffix_sum = arr [ i ] ;\n    for ( int j = n - 1 ;\n    j > i ;\n    j -- ) suffix_sum += arr [ j ] ;\n    if ( prefix_sum == suffix_sum ) res = Math . max ( res , prefix_sum ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxSum ( int arr [ ], int n ) {\n  int res = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int prefix_sum = arr [ i ];\n    for ( int j = 0;\n    j < i;\n    j ++ ) prefix_sum += arr [ j ];\n    int suffix_sum = arr [ i ];\n    for ( int j = n - 1;\n    j > i;\n    j -- ) suffix_sum += arr [ j ];\n    if ( prefix_sum == suffix_sum ) res = max ( res, prefix_sum );\n  }\n  return res;\n}", "target_program": " def findMaxSum ( arr , n ) :\n    res = - sys.maxsize - 1\n    for i in range ( n ) :\n        prefix_sum = arr [ i ]\n        for j in range ( i ) :\n            prefix_sum += arr [ j ]\n        suffix_sum = arr [ i ]\n        j = n - 1\n        while ( j > i ) :\n            suffix_sum += arr [ j ]\n            j -= 1\n        if ( prefix_sum == suffix_sum ) :\n            res = max ( res , prefix_sum )\n    return res"}
{"source": "python", "target": "java", "source_program": " def gcd ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    if ( ( ~ a & 1 ) == 1 ) :\n        if ( ( b & 1 ) == 1 ) :\n            return gcd ( a >> 1 , b )\n        else :\n            return ( gcd ( a >> 1 , b >> 1 ) << 1 )\n    if ( ( ~ b & 1 ) == 1 ) :\n        return gcd ( a , b >> 1 )\n    if ( a > b ) :\n        return gcd ( ( a - b ) >> 1 , b )\n    return gcd ( ( b - a ) >> 1 , a )", "target_program": " static int gcd ( int a , int b ) {\n  if ( a == b ) return a ;\n  if ( a == 0 ) return b ;\n  if ( b == 0 ) return a ;\n  if ( ( ~ a & 1 ) == 1 ) {\n    if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ;\n    else return gcd ( a >> 1 , b >> 1 ) << 1 ;\n  }\n  if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ;\n  if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;\n  return gcd ( ( b - a ) >> 1 , a ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def gcd ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    if ( ( ~ a & 1 ) == 1 ) :\n        if ( ( b & 1 ) == 1 ) :\n            return gcd ( a >> 1 , b )\n        else :\n            return ( gcd ( a >> 1 , b >> 1 ) << 1 )\n    if ( ( ~ b & 1 ) == 1 ) :\n        return gcd ( a , b >> 1 )\n    if ( a > b ) :\n        return gcd ( ( a - b ) >> 1 , b )\n    return gcd ( ( b - a ) >> 1 , a )", "target_program": " int gcd ( int a, int b ) {\n  if ( a == b ) return a;\n  if ( a == 0 ) return b;\n  if ( b == 0 ) return a;\n  if ( ~ a & 1 ) {\n    if ( b & 1 ) return gcd ( a >> 1, b );\n    else return gcd ( a >> 1, b >> 1 ) << 1;\n  }\n  if ( ~ b & 1 ) return gcd ( a, b >> 1 );\n  if ( a > b ) return gcd ( ( a - b ) >> 1, b );\n  return gcd ( ( b - a ) >> 1, a );\n}"}
{"source": "java", "target": "python", "source_program": " static int gcd ( int a , int b ) {\n  if ( a == b ) return a ;\n  if ( a == 0 ) return b ;\n  if ( b == 0 ) return a ;\n  if ( ( ~ a & 1 ) == 1 ) {\n    if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ;\n    else return gcd ( a >> 1 , b >> 1 ) << 1 ;\n  }\n  if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ;\n  if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;\n  return gcd ( ( b - a ) >> 1 , a ) ;\n}", "target_program": " def gcd ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    if ( ( ~ a & 1 ) == 1 ) :\n        if ( ( b & 1 ) == 1 ) :\n            return gcd ( a >> 1 , b )\n        else :\n            return ( gcd ( a >> 1 , b >> 1 ) << 1 )\n    if ( ( ~ b & 1 ) == 1 ) :\n        return gcd ( a , b >> 1 )\n    if ( a > b ) :\n        return gcd ( ( a - b ) >> 1 , b )\n    return gcd ( ( b - a ) >> 1 , a )"}
{"source": "java", "target": "cpp", "source_program": " static int gcd ( int a , int b ) {\n  if ( a == b ) return a ;\n  if ( a == 0 ) return b ;\n  if ( b == 0 ) return a ;\n  if ( ( ~ a & 1 ) == 1 ) {\n    if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ;\n    else return gcd ( a >> 1 , b >> 1 ) << 1 ;\n  }\n  if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ;\n  if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;\n  return gcd ( ( b - a ) >> 1 , a ) ;\n}", "target_program": " int gcd ( int a, int b ) {\n  if ( a == b ) return a;\n  if ( a == 0 ) return b;\n  if ( b == 0 ) return a;\n  if ( ~ a & 1 ) {\n    if ( b & 1 ) return gcd ( a >> 1, b );\n    else return gcd ( a >> 1, b >> 1 ) << 1;\n  }\n  if ( ~ b & 1 ) return gcd ( a, b >> 1 );\n  if ( a > b ) return gcd ( ( a - b ) >> 1, b );\n  return gcd ( ( b - a ) >> 1, a );\n}"}
{"source": "cpp", "target": "java", "source_program": " int gcd ( int a, int b ) {\n  if ( a == b ) return a;\n  if ( a == 0 ) return b;\n  if ( b == 0 ) return a;\n  if ( ~ a & 1 ) {\n    if ( b & 1 ) return gcd ( a >> 1, b );\n    else return gcd ( a >> 1, b >> 1 ) << 1;\n  }\n  if ( ~ b & 1 ) return gcd ( a, b >> 1 );\n  if ( a > b ) return gcd ( ( a - b ) >> 1, b );\n  return gcd ( ( b - a ) >> 1, a );\n}", "target_program": " static int gcd ( int a , int b ) {\n  if ( a == b ) return a ;\n  if ( a == 0 ) return b ;\n  if ( b == 0 ) return a ;\n  if ( ( ~ a & 1 ) == 1 ) {\n    if ( ( b & 1 ) == 1 ) return gcd ( a >> 1 , b ) ;\n    else return gcd ( a >> 1 , b >> 1 ) << 1 ;\n  }\n  if ( ( ~ b & 1 ) == 1 ) return gcd ( a , b >> 1 ) ;\n  if ( a > b ) return gcd ( ( a - b ) >> 1 , b ) ;\n  return gcd ( ( b - a ) >> 1 , a ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int gcd ( int a, int b ) {\n  if ( a == b ) return a;\n  if ( a == 0 ) return b;\n  if ( b == 0 ) return a;\n  if ( ~ a & 1 ) {\n    if ( b & 1 ) return gcd ( a >> 1, b );\n    else return gcd ( a >> 1, b >> 1 ) << 1;\n  }\n  if ( ~ b & 1 ) return gcd ( a, b >> 1 );\n  if ( a > b ) return gcd ( ( a - b ) >> 1, b );\n  return gcd ( ( b - a ) >> 1, a );\n}", "target_program": " def gcd ( a , b ) :\n    if ( a == b ) :\n        return a\n    if ( a == 0 ) :\n        return b\n    if ( b == 0 ) :\n        return a\n    if ( ( ~ a & 1 ) == 1 ) :\n        if ( ( b & 1 ) == 1 ) :\n            return gcd ( a >> 1 , b )\n        else :\n            return ( gcd ( a >> 1 , b >> 1 ) << 1 )\n    if ( ( ~ b & 1 ) == 1 ) :\n        return gcd ( a , b >> 1 )\n    if ( a > b ) :\n        return gcd ( ( a - b ) >> 1 , b )\n    return gcd ( ( b - a ) >> 1 , a )"}
{"source": "python", "target": "java", "source_program": " def findVolume ( l , b , h ) :\n    return ( ( l * b * h ) / 2 )", "target_program": " static float findVolume ( float l , float b , float h ) {\n  float volume = ( l * b * h ) / 2 ;\n  return volume ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findVolume ( l , b , h ) :\n    return ( ( l * b * h ) / 2 )", "target_program": " float findVolume ( float l, float b, float h ) {\n  float volume = ( l * b * h ) / 2;\n  return volume;\n}"}
{"source": "java", "target": "python", "source_program": " static float findVolume ( float l , float b , float h ) {\n  float volume = ( l * b * h ) / 2 ;\n  return volume ;\n}", "target_program": " def findVolume ( l , b , h ) :\n    return ( ( l * b * h ) / 2 )"}
{"source": "java", "target": "cpp", "source_program": " static float findVolume ( float l , float b , float h ) {\n  float volume = ( l * b * h ) / 2 ;\n  return volume ;\n}", "target_program": " float findVolume ( float l, float b, float h ) {\n  float volume = ( l * b * h ) / 2;\n  return volume;\n}"}
{"source": "cpp", "target": "java", "source_program": " float findVolume ( float l, float b, float h ) {\n  float volume = ( l * b * h ) / 2;\n  return volume;\n}", "target_program": " static float findVolume ( float l , float b , float h ) {\n  float volume = ( l * b * h ) / 2 ;\n  return volume ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float findVolume ( float l, float b, float h ) {\n  float volume = ( l * b * h ) / 2;\n  return volume;\n}", "target_program": " def findVolume ( l , b , h ) :\n    return ( ( l * b * h ) / 2 )"}
{"source": "python", "target": "java", "source_program": " def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( m [ 0 ] )\n    for y1 in range ( rows ) :\n        for x1 in range ( columns ) :\n            if ( m [ y1 ] [ x1 ] == 1 ) :\n                for y2 in range ( y1 + 1 , rows ) :\n                    for x2 in range ( x1 + 1 , columns ) :\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n    return False", "target_program": " static boolean isRectangle ( int m [ ] [ ] ) {\n  int rows = m . length ;\n  if ( rows == 0 ) return false ;\n  int columns = m [ 0 ] . length ;\n  for ( int y1 = 0 ;\n  y1 < rows ;\n  y1 ++ ) for ( int x1 = 0 ;\n  x1 < columns ;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ;\n  y2 < rows ;\n  y2 ++ ) for ( int x2 = x1 + 1 ;\n  x2 < columns ;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( m [ 0 ] )\n    for y1 in range ( rows ) :\n        for x1 in range ( columns ) :\n            if ( m [ y1 ] [ x1 ] == 1 ) :\n                for y2 in range ( y1 + 1 , rows ) :\n                    for x2 in range ( x1 + 1 , columns ) :\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n    return False", "target_program": " bool isRectangle ( const vector < vector < int > > & m ) {\n  int rows = m . size ( );\n  if ( rows == 0 ) return false;\n  int columns = m [ 0 ] . size ( );\n  for ( int y1 = 0;\n  y1 < rows;\n  y1 ++ ) for ( int x1 = 0;\n  x1 < columns;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1;\n  y2 < rows;\n  y2 ++ ) for ( int x2 = x1 + 1;\n  x2 < columns;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isRectangle ( int m [ ] [ ] ) {\n  int rows = m . length ;\n  if ( rows == 0 ) return false ;\n  int columns = m [ 0 ] . length ;\n  for ( int y1 = 0 ;\n  y1 < rows ;\n  y1 ++ ) for ( int x1 = 0 ;\n  x1 < columns ;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ;\n  y2 < rows ;\n  y2 ++ ) for ( int x2 = x1 + 1 ;\n  x2 < columns ;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true ;\n  return false ;\n}", "target_program": " def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( m [ 0 ] )\n    for y1 in range ( rows ) :\n        for x1 in range ( columns ) :\n            if ( m [ y1 ] [ x1 ] == 1 ) :\n                for y2 in range ( y1 + 1 , rows ) :\n                    for x2 in range ( x1 + 1 , columns ) :\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isRectangle ( int m [ ] [ ] ) {\n  int rows = m . length ;\n  if ( rows == 0 ) return false ;\n  int columns = m [ 0 ] . length ;\n  for ( int y1 = 0 ;\n  y1 < rows ;\n  y1 ++ ) for ( int x1 = 0 ;\n  x1 < columns ;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ;\n  y2 < rows ;\n  y2 ++ ) for ( int x2 = x1 + 1 ;\n  x2 < columns ;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true ;\n  return false ;\n}", "target_program": " bool isRectangle ( const vector < vector < int > > & m ) {\n  int rows = m . size ( );\n  if ( rows == 0 ) return false;\n  int columns = m [ 0 ] . size ( );\n  for ( int y1 = 0;\n  y1 < rows;\n  y1 ++ ) for ( int x1 = 0;\n  x1 < columns;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1;\n  y2 < rows;\n  y2 ++ ) for ( int x2 = x1 + 1;\n  x2 < columns;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isRectangle ( const vector < vector < int > > & m ) {\n  int rows = m . size ( );\n  if ( rows == 0 ) return false;\n  int columns = m [ 0 ] . size ( );\n  for ( int y1 = 0;\n  y1 < rows;\n  y1 ++ ) for ( int x1 = 0;\n  x1 < columns;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1;\n  y2 < rows;\n  y2 ++ ) for ( int x2 = x1 + 1;\n  x2 < columns;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true;\n  return false;\n}", "target_program": " static boolean isRectangle ( int m [ ] [ ] ) {\n  int rows = m . length ;\n  if ( rows == 0 ) return false ;\n  int columns = m [ 0 ] . length ;\n  for ( int y1 = 0 ;\n  y1 < rows ;\n  y1 ++ ) for ( int x1 = 0 ;\n  x1 < columns ;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1 ;\n  y2 < rows ;\n  y2 ++ ) for ( int x2 = x1 + 1 ;\n  x2 < columns ;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isRectangle ( const vector < vector < int > > & m ) {\n  int rows = m . size ( );\n  if ( rows == 0 ) return false;\n  int columns = m [ 0 ] . size ( );\n  for ( int y1 = 0;\n  y1 < rows;\n  y1 ++ ) for ( int x1 = 0;\n  x1 < columns;\n  x1 ++ ) if ( m [ y1 ] [ x1 ] == 1 ) for ( int y2 = y1 + 1;\n  y2 < rows;\n  y2 ++ ) for ( int x2 = x1 + 1;\n  x2 < columns;\n  x2 ++ ) if ( m [ y1 ] [ x2 ] == 1 && m [ y2 ] [ x1 ] == 1 && m [ y2 ] [ x2 ] == 1 ) return true;\n  return false;\n}", "target_program": " def isRectangle ( m ) :\n    rows = len ( m )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( m [ 0 ] )\n    for y1 in range ( rows ) :\n        for x1 in range ( columns ) :\n            if ( m [ y1 ] [ x1 ] == 1 ) :\n                for y2 in range ( y1 + 1 , rows ) :\n                    for x2 in range ( x1 + 1 , columns ) :\n                        if ( m [ y1 ] [ x2 ] == 1 and m [ y2 ] [ x1 ] == 1 and m [ y2 ] [ x2 ] == 1 ) :\n                            return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def isPossible ( str , n ) :\n    l = len ( str )\n    if ( l >= n ) :\n        return True\n    return False", "target_program": " static boolean isPossible ( String str , int n ) {\n  int len = str . length ( ) ;\n  if ( len >= n ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPossible ( str , n ) :\n    l = len ( str )\n    if ( l >= n ) :\n        return True\n    return False", "target_program": " bool isPossible ( string str, int n ) {\n  int len = str . length ( );\n  if ( len >= n ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPossible ( String str , int n ) {\n  int len = str . length ( ) ;\n  if ( len >= n ) return true ;\n  return false ;\n}", "target_program": " def isPossible ( str , n ) :\n    l = len ( str )\n    if ( l >= n ) :\n        return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPossible ( String str , int n ) {\n  int len = str . length ( ) ;\n  if ( len >= n ) return true ;\n  return false ;\n}", "target_program": " bool isPossible ( string str, int n ) {\n  int len = str . length ( );\n  if ( len >= n ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPossible ( string str, int n ) {\n  int len = str . length ( );\n  if ( len >= n ) return true;\n  return false;\n}", "target_program": " static boolean isPossible ( String str , int n ) {\n  int len = str . length ( ) ;\n  if ( len >= n ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPossible ( string str, int n ) {\n  int len = str . length ( );\n  if ( len >= n ) return true;\n  return false;\n}", "target_program": " def isPossible ( str , n ) :\n    l = len ( str )\n    if ( l >= n ) :\n        return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def checkStar ( mat ) :\n    global size\n    vertexD1 = 0\n    vertexDn_1 = 0\n    if ( size == 1 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 )\n    if ( size == 2 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 and mat [ 0 ] [ 1 ] == 1 and mat [ 1 ] [ 0 ] == 1 and mat [ 1 ] [ 1 ] == 0 )\n    for i in range ( 0 , size ) :\n        degreeI = 0\n        for j in range ( 0 , size ) :\n            if ( mat [ i ] [ j ] ) :\n                degreeI = degreeI + 1\n        if ( degreeI == 1 ) :\n            vertexD1 = vertexD1 + 1\n        elif ( degreeI == size - 1 ) :\n            vertexDn_1 = vertexDn_1 + 1\n    return ( vertexD1 == ( size - 1 ) and vertexDn_1 == 1 )", "target_program": " static boolean checkStar ( int mat [ ] [ ] ) {\n  int vertexD1 = 0 , vertexDn_1 = 0 ;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 ) ;\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 ) ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int degreeI = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( mat [ i ] [ j ] == 1 ) degreeI ++ ;\n    if ( degreeI == 1 ) vertexD1 ++ ;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++ ;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkStar ( mat ) :\n    global size\n    vertexD1 = 0\n    vertexDn_1 = 0\n    if ( size == 1 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 )\n    if ( size == 2 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 and mat [ 0 ] [ 1 ] == 1 and mat [ 1 ] [ 0 ] == 1 and mat [ 1 ] [ 1 ] == 0 )\n    for i in range ( 0 , size ) :\n        degreeI = 0\n        for j in range ( 0 , size ) :\n            if ( mat [ i ] [ j ] ) :\n                degreeI = degreeI + 1\n        if ( degreeI == 1 ) :\n            vertexD1 = vertexD1 + 1\n        elif ( degreeI == size - 1 ) :\n            vertexDn_1 = vertexDn_1 + 1\n    return ( vertexD1 == ( size - 1 ) and vertexDn_1 == 1 )", "target_program": " bool checkStar ( int mat [ ] [ size ] ) {\n  int vertexD1 = 0, vertexDn_1 = 0;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 );\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 );\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int degreeI = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( mat [ i ] [ j ] ) degreeI ++;\n    if ( degreeI == 1 ) vertexD1 ++;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkStar ( int mat [ ] [ ] ) {\n  int vertexD1 = 0 , vertexDn_1 = 0 ;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 ) ;\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 ) ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int degreeI = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( mat [ i ] [ j ] == 1 ) degreeI ++ ;\n    if ( degreeI == 1 ) vertexD1 ++ ;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++ ;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 ) ;\n}", "target_program": " def checkStar ( mat ) :\n    global size\n    vertexD1 = 0\n    vertexDn_1 = 0\n    if ( size == 1 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 )\n    if ( size == 2 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 and mat [ 0 ] [ 1 ] == 1 and mat [ 1 ] [ 0 ] == 1 and mat [ 1 ] [ 1 ] == 0 )\n    for i in range ( 0 , size ) :\n        degreeI = 0\n        for j in range ( 0 , size ) :\n            if ( mat [ i ] [ j ] ) :\n                degreeI = degreeI + 1\n        if ( degreeI == 1 ) :\n            vertexD1 = vertexD1 + 1\n        elif ( degreeI == size - 1 ) :\n            vertexDn_1 = vertexDn_1 + 1\n    return ( vertexD1 == ( size - 1 ) and vertexDn_1 == 1 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkStar ( int mat [ ] [ ] ) {\n  int vertexD1 = 0 , vertexDn_1 = 0 ;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 ) ;\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 ) ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int degreeI = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( mat [ i ] [ j ] == 1 ) degreeI ++ ;\n    if ( degreeI == 1 ) vertexD1 ++ ;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++ ;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 ) ;\n}", "target_program": " bool checkStar ( int mat [ ] [ size ] ) {\n  int vertexD1 = 0, vertexDn_1 = 0;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 );\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 );\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int degreeI = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( mat [ i ] [ j ] ) degreeI ++;\n    if ( degreeI == 1 ) vertexD1 ++;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkStar ( int mat [ ] [ size ] ) {\n  int vertexD1 = 0, vertexDn_1 = 0;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 );\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 );\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int degreeI = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( mat [ i ] [ j ] ) degreeI ++;\n    if ( degreeI == 1 ) vertexD1 ++;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 );\n}", "target_program": " static boolean checkStar ( int mat [ ] [ ] ) {\n  int vertexD1 = 0 , vertexDn_1 = 0 ;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 ) ;\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 ) ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    int degreeI = 0 ;\n    for ( int j = 0 ;\n    j < size ;\n    j ++ ) if ( mat [ i ] [ j ] == 1 ) degreeI ++ ;\n    if ( degreeI == 1 ) vertexD1 ++ ;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++ ;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkStar ( int mat [ ] [ size ] ) {\n  int vertexD1 = 0, vertexDn_1 = 0;\n  if ( size == 1 ) return ( mat [ 0 ] [ 0 ] == 0 );\n  if ( size == 2 ) return ( mat [ 0 ] [ 0 ] == 0 && mat [ 0 ] [ 1 ] == 1 && mat [ 1 ] [ 0 ] == 1 && mat [ 1 ] [ 1 ] == 0 );\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    int degreeI = 0;\n    for ( int j = 0;\n    j < size;\n    j ++ ) if ( mat [ i ] [ j ] ) degreeI ++;\n    if ( degreeI == 1 ) vertexD1 ++;\n    else if ( degreeI == size - 1 ) vertexDn_1 ++;\n  }\n  return ( vertexD1 == ( size - 1 ) && vertexDn_1 == 1 );\n}", "target_program": " def checkStar ( mat ) :\n    global size\n    vertexD1 = 0\n    vertexDn_1 = 0\n    if ( size == 1 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 )\n    if ( size == 2 ) :\n        return ( mat [ 0 ] [ 0 ] == 0 and mat [ 0 ] [ 1 ] == 1 and mat [ 1 ] [ 0 ] == 1 and mat [ 1 ] [ 1 ] == 0 )\n    for i in range ( 0 , size ) :\n        degreeI = 0\n        for j in range ( 0 , size ) :\n            if ( mat [ i ] [ j ] ) :\n                degreeI = degreeI + 1\n        if ( degreeI == 1 ) :\n            vertexD1 = vertexD1 + 1\n        elif ( degreeI == size - 1 ) :\n            vertexDn_1 = vertexDn_1 + 1\n    return ( vertexD1 == ( size - 1 ) and vertexDn_1 == 1 )"}
{"source": "python", "target": "java", "source_program": " def printRoots ( n ) :\n    theta = math.pi * 2 / n\n    for k in range ( 0 , n ) :\n        real = math.cos ( k * theta )\n        img = math.sin ( k * theta )\n        print ( real , end = \" \" )\n        if ( img >= 0 ) :\n            print ( \" + i \" , end = \" \" )\n        else :\n            print ( \" - i \" , end = \" \" )\n        print ( abs ( img ) )", "target_program": " static void printRoots ( int n ) {\n  double theta = 3.14 * 2 / n ;\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) {\n    double real = Math . cos ( k * theta ) ;\n    double img = Math . sin ( k * theta ) ;\n    System . out . println ( real ) ;\n    if ( img >= 0 ) System . out . println ( \" + i \" ) ;\n    else System . out . println ( \" - i \" ) ;\n    System . out . println ( Math . abs ( img ) ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printRoots ( n ) :\n    theta = math.pi * 2 / n\n    for k in range ( 0 , n ) :\n        real = math.cos ( k * theta )\n        img = math.sin ( k * theta )\n        print ( real , end = \" \" )\n        if ( img >= 0 ) :\n            print ( \" + i \" , end = \" \" )\n        else :\n            print ( \" - i \" , end = \" \" )\n        print ( abs ( img ) )", "target_program": " void printRoots ( int n ) {\n  double theta = M_PI * 2 / n;\n  for ( int k = 0;\n  k < n;\n  k ++ ) {\n    double real = cos ( k * theta );\n    double img = sin ( k * theta );\n    printf ( \"%.6f\", real );\n    img >= 0 ? printf ( \" + i \" ) : printf ( \" - i \" );\n    printf ( \"%.6f\\n\", abs ( img ) );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printRoots ( int n ) {\n  double theta = 3.14 * 2 / n ;\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) {\n    double real = Math . cos ( k * theta ) ;\n    double img = Math . sin ( k * theta ) ;\n    System . out . println ( real ) ;\n    if ( img >= 0 ) System . out . println ( \" + i \" ) ;\n    else System . out . println ( \" - i \" ) ;\n    System . out . println ( Math . abs ( img ) ) ;\n  }\n}", "target_program": " def printRoots ( n ) :\n    theta = math.pi * 2 / n\n    for k in range ( 0 , n ) :\n        real = math.cos ( k * theta )\n        img = math.sin ( k * theta )\n        print ( real , end = \" \" )\n        if ( img >= 0 ) :\n            print ( \" + i \" , end = \" \" )\n        else :\n            print ( \" - i \" , end = \" \" )\n        print ( abs ( img ) )"}
{"source": "java", "target": "cpp", "source_program": " static void printRoots ( int n ) {\n  double theta = 3.14 * 2 / n ;\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) {\n    double real = Math . cos ( k * theta ) ;\n    double img = Math . sin ( k * theta ) ;\n    System . out . println ( real ) ;\n    if ( img >= 0 ) System . out . println ( \" + i \" ) ;\n    else System . out . println ( \" - i \" ) ;\n    System . out . println ( Math . abs ( img ) ) ;\n  }\n}", "target_program": " void printRoots ( int n ) {\n  double theta = M_PI * 2 / n;\n  for ( int k = 0;\n  k < n;\n  k ++ ) {\n    double real = cos ( k * theta );\n    double img = sin ( k * theta );\n    printf ( \"%.6f\", real );\n    img >= 0 ? printf ( \" + i \" ) : printf ( \" - i \" );\n    printf ( \"%.6f\\n\", abs ( img ) );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printRoots ( int n ) {\n  double theta = M_PI * 2 / n;\n  for ( int k = 0;\n  k < n;\n  k ++ ) {\n    double real = cos ( k * theta );\n    double img = sin ( k * theta );\n    printf ( \"%.6f\", real );\n    img >= 0 ? printf ( \" + i \" ) : printf ( \" - i \" );\n    printf ( \"%.6f\\n\", abs ( img ) );\n  }\n}", "target_program": " static void printRoots ( int n ) {\n  double theta = 3.14 * 2 / n ;\n  for ( int k = 0 ;\n  k < n ;\n  k ++ ) {\n    double real = Math . cos ( k * theta ) ;\n    double img = Math . sin ( k * theta ) ;\n    System . out . println ( real ) ;\n    if ( img >= 0 ) System . out . println ( \" + i \" ) ;\n    else System . out . println ( \" - i \" ) ;\n    System . out . println ( Math . abs ( img ) ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printRoots ( int n ) {\n  double theta = M_PI * 2 / n;\n  for ( int k = 0;\n  k < n;\n  k ++ ) {\n    double real = cos ( k * theta );\n    double img = sin ( k * theta );\n    printf ( \"%.6f\", real );\n    img >= 0 ? printf ( \" + i \" ) : printf ( \" - i \" );\n    printf ( \"%.6f\\n\", abs ( img ) );\n  }\n}", "target_program": " def printRoots ( n ) :\n    theta = math.pi * 2 / n\n    for k in range ( 0 , n ) :\n        real = math.cos ( k * theta )\n        img = math.sin ( k * theta )\n        print ( real , end = \" \" )\n        if ( img >= 0 ) :\n            print ( \" + i \" , end = \" \" )\n        else :\n            print ( \" - i \" , end = \" \" )\n        print ( abs ( img ) )"}
{"source": "python", "target": "java", "source_program": " def findLargestd ( S , n ) :\n    found = False\n    S.sort ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + 1 , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + 1 , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - 1", "target_program": " static int findLargestd ( int [ ] S , int n ) {\n  boolean found = false ;\n  Arrays . sort ( S ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) continue ;\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( i == k ) continue ;\n        for ( int l = k + 1 ;\n        l < n ;\n        l ++ ) {\n          if ( i == l ) continue ;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true ;\n            return S [ i ] ;\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return Integer . MAX_VALUE ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLargestd ( S , n ) :\n    found = False\n    S.sort ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + 1 , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + 1 , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - 1", "target_program": " int findLargestd ( int S [ ], int n ) {\n  bool found = false;\n  sort ( S, S + n );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) continue;\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( i == k ) continue;\n        for ( int l = k + 1;\n        l < n;\n        l ++ ) {\n          if ( i == l ) continue;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true;\n            return S [ i ];\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return INT_MIN;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLargestd ( int [ ] S , int n ) {\n  boolean found = false ;\n  Arrays . sort ( S ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) continue ;\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( i == k ) continue ;\n        for ( int l = k + 1 ;\n        l < n ;\n        l ++ ) {\n          if ( i == l ) continue ;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true ;\n            return S [ i ] ;\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return Integer . MAX_VALUE ;\n  return - 1 ;\n}", "target_program": " def findLargestd ( S , n ) :\n    found = False\n    S.sort ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + 1 , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + 1 , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findLargestd ( int [ ] S , int n ) {\n  boolean found = false ;\n  Arrays . sort ( S ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) continue ;\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( i == k ) continue ;\n        for ( int l = k + 1 ;\n        l < n ;\n        l ++ ) {\n          if ( i == l ) continue ;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true ;\n            return S [ i ] ;\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return Integer . MAX_VALUE ;\n  return - 1 ;\n}", "target_program": " int findLargestd ( int S [ ], int n ) {\n  bool found = false;\n  sort ( S, S + n );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) continue;\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( i == k ) continue;\n        for ( int l = k + 1;\n        l < n;\n        l ++ ) {\n          if ( i == l ) continue;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true;\n            return S [ i ];\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return INT_MIN;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLargestd ( int S [ ], int n ) {\n  bool found = false;\n  sort ( S, S + n );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) continue;\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( i == k ) continue;\n        for ( int l = k + 1;\n        l < n;\n        l ++ ) {\n          if ( i == l ) continue;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true;\n            return S [ i ];\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return INT_MIN;\n}", "target_program": " static int findLargestd ( int [ ] S , int n ) {\n  boolean found = false ;\n  Arrays . sort ( S ) ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i == j ) continue ;\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( i == k ) continue ;\n        for ( int l = k + 1 ;\n        l < n ;\n        l ++ ) {\n          if ( i == l ) continue ;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true ;\n            return S [ i ] ;\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return Integer . MAX_VALUE ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLargestd ( int S [ ], int n ) {\n  bool found = false;\n  sort ( S, S + n );\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i == j ) continue;\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( i == k ) continue;\n        for ( int l = k + 1;\n        l < n;\n        l ++ ) {\n          if ( i == l ) continue;\n          if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) {\n            found = true;\n            return S [ i ];\n          }\n        }\n      }\n    }\n  }\n  if ( found == false ) return INT_MIN;\n}", "target_program": " def findLargestd ( S , n ) :\n    found = False\n    S.sort ( )\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        for j in range ( 0 , n ) :\n            if ( i == j ) :\n                continue\n            for k in range ( j + 1 , n ) :\n                if ( i == k ) :\n                    continue\n                for l in range ( k + 1 , n ) :\n                    if ( i == l ) :\n                        continue\n                    if ( S [ i ] == S [ j ] + S [ k ] + S [ l ] ) :\n                        found = True\n                        return S [ i ]\n    if ( found == False ) :\n        return - 1"}
{"source": "python", "target": "java", "source_program": " def count9s ( number ) :\n    n = len ( number )\n    d = [ 0 for i in range ( 9 ) ]\n    d [ 0 ] = 1\n    result = 0\n    mod_sum = 0\n    continuous_zero = 0\n    for i in range ( n ) :\n        if ( ord ( number [ i ] ) - ord ( '0' ) == 0 ) :\n            continuous_zero += 1\n        else :\n            continuous_zero = 0\n        mod_sum += ord ( number [ i ] ) - ord ( '0' )\n        mod_sum %= 9\n        result += d [ mod_sum ]\n        d [ mod_sum ] += 1\n        result -= continuous_zero\n    return result", "target_program": " static int count9s ( char number [ ] ) {\n  int n = number . length ;\n  int d [ ] = new int [ 9 ] ;\n  d [ 0 ] = 1 ;\n  int result = 0 ;\n  int mod_sum = 0 , continuous_zero = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( number [ i ] - '0' ) == 0 ) {\n      continuous_zero ++ ;\n    }\n    else {\n      continuous_zero = 0 ;\n    }\n    mod_sum += ( number [ i ] - '0' ) ;\n    mod_sum %= 9 ;\n    result += d [ mod_sum ] ;\n    d [ mod_sum ] ++ ;\n    result -= continuous_zero ;\n  }\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def count9s ( number ) :\n    n = len ( number )\n    d = [ 0 for i in range ( 9 ) ]\n    d [ 0 ] = 1\n    result = 0\n    mod_sum = 0\n    continuous_zero = 0\n    for i in range ( n ) :\n        if ( ord ( number [ i ] ) - ord ( '0' ) == 0 ) :\n            continuous_zero += 1\n        else :\n            continuous_zero = 0\n        mod_sum += ord ( number [ i ] ) - ord ( '0' )\n        mod_sum %= 9\n        result += d [ mod_sum ]\n        d [ mod_sum ] += 1\n        result -= continuous_zero\n    return result", "target_program": " int count9s ( char number [ ] ) {\n  int n = strlen ( number );\n  int d [ 9 ];\n  memset ( d, 0, sizeof ( d ) );\n  d [ 0 ] = 1;\n  int result = 0;\n  int mod_sum = 0, continuous_zero = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! int ( number [ i ] - '0' ) ) continuous_zero ++;\n    else continuous_zero = 0;\n    mod_sum += int ( number [ i ] - '0' );\n    mod_sum %= 9;\n    result += d [ mod_sum ];\n    d [ mod_sum ] ++;\n    result -= continuous_zero;\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int count9s ( char number [ ] ) {\n  int n = number . length ;\n  int d [ ] = new int [ 9 ] ;\n  d [ 0 ] = 1 ;\n  int result = 0 ;\n  int mod_sum = 0 , continuous_zero = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( number [ i ] - '0' ) == 0 ) {\n      continuous_zero ++ ;\n    }\n    else {\n      continuous_zero = 0 ;\n    }\n    mod_sum += ( number [ i ] - '0' ) ;\n    mod_sum %= 9 ;\n    result += d [ mod_sum ] ;\n    d [ mod_sum ] ++ ;\n    result -= continuous_zero ;\n  }\n  return result ;\n}", "target_program": " def count9s ( number ) :\n    n = len ( number )\n    d = [ 0 for i in range ( 9 ) ]\n    d [ 0 ] = 1\n    result = 0\n    mod_sum = 0\n    continuous_zero = 0\n    for i in range ( n ) :\n        if ( ord ( number [ i ] ) - ord ( '0' ) == 0 ) :\n            continuous_zero += 1\n        else :\n            continuous_zero = 0\n        mod_sum += ord ( number [ i ] ) - ord ( '0' )\n        mod_sum %= 9\n        result += d [ mod_sum ]\n        d [ mod_sum ] += 1\n        result -= continuous_zero\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int count9s ( char number [ ] ) {\n  int n = number . length ;\n  int d [ ] = new int [ 9 ] ;\n  d [ 0 ] = 1 ;\n  int result = 0 ;\n  int mod_sum = 0 , continuous_zero = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( number [ i ] - '0' ) == 0 ) {\n      continuous_zero ++ ;\n    }\n    else {\n      continuous_zero = 0 ;\n    }\n    mod_sum += ( number [ i ] - '0' ) ;\n    mod_sum %= 9 ;\n    result += d [ mod_sum ] ;\n    d [ mod_sum ] ++ ;\n    result -= continuous_zero ;\n  }\n  return result ;\n}", "target_program": " int count9s ( char number [ ] ) {\n  int n = strlen ( number );\n  int d [ 9 ];\n  memset ( d, 0, sizeof ( d ) );\n  d [ 0 ] = 1;\n  int result = 0;\n  int mod_sum = 0, continuous_zero = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! int ( number [ i ] - '0' ) ) continuous_zero ++;\n    else continuous_zero = 0;\n    mod_sum += int ( number [ i ] - '0' );\n    mod_sum %= 9;\n    result += d [ mod_sum ];\n    d [ mod_sum ] ++;\n    result -= continuous_zero;\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int count9s ( char number [ ] ) {\n  int n = strlen ( number );\n  int d [ 9 ];\n  memset ( d, 0, sizeof ( d ) );\n  d [ 0 ] = 1;\n  int result = 0;\n  int mod_sum = 0, continuous_zero = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! int ( number [ i ] - '0' ) ) continuous_zero ++;\n    else continuous_zero = 0;\n    mod_sum += int ( number [ i ] - '0' );\n    mod_sum %= 9;\n    result += d [ mod_sum ];\n    d [ mod_sum ] ++;\n    result -= continuous_zero;\n  }\n  return result;\n}", "target_program": " static int count9s ( char number [ ] ) {\n  int n = number . length ;\n  int d [ ] = new int [ 9 ] ;\n  d [ 0 ] = 1 ;\n  int result = 0 ;\n  int mod_sum = 0 , continuous_zero = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( number [ i ] - '0' ) == 0 ) {\n      continuous_zero ++ ;\n    }\n    else {\n      continuous_zero = 0 ;\n    }\n    mod_sum += ( number [ i ] - '0' ) ;\n    mod_sum %= 9 ;\n    result += d [ mod_sum ] ;\n    d [ mod_sum ] ++ ;\n    result -= continuous_zero ;\n  }\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int count9s ( char number [ ] ) {\n  int n = strlen ( number );\n  int d [ 9 ];\n  memset ( d, 0, sizeof ( d ) );\n  d [ 0 ] = 1;\n  int result = 0;\n  int mod_sum = 0, continuous_zero = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! int ( number [ i ] - '0' ) ) continuous_zero ++;\n    else continuous_zero = 0;\n    mod_sum += int ( number [ i ] - '0' );\n    mod_sum %= 9;\n    result += d [ mod_sum ];\n    d [ mod_sum ] ++;\n    result -= continuous_zero;\n  }\n  return result;\n}", "target_program": " def count9s ( number ) :\n    n = len ( number )\n    d = [ 0 for i in range ( 9 ) ]\n    d [ 0 ] = 1\n    result = 0\n    mod_sum = 0\n    continuous_zero = 0\n    for i in range ( n ) :\n        if ( ord ( number [ i ] ) - ord ( '0' ) == 0 ) :\n            continuous_zero += 1\n        else :\n            continuous_zero = 0\n        mod_sum += ord ( number [ i ] ) - ord ( '0' )\n        mod_sum %= 9\n        result += d [ mod_sum ]\n        d [ mod_sum ] += 1\n        result -= continuous_zero\n    return result"}
{"source": "python", "target": "java", "source_program": " def LexicographicalMaxString ( str ) :\n    mx = \"\"\n    for i in range ( len ( str ) ) :\n        mx = max ( mx , str [ i : ] )\n    return mx", "target_program": " static String LexicographicalMaxString ( String str ) {\n  String mx = \"\" ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ++ i ) {\n    if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {\n      mx = str . substring ( i ) ;\n    }\n  }\n  return mx ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def LexicographicalMaxString ( str ) :\n    mx = \"\"\n    for i in range ( len ( str ) ) :\n        mx = max ( mx , str [ i : ] )\n    return mx", "target_program": " string LexicographicalMaxString ( string str ) {\n  string mx = \"\";\n  for ( int i = 0;\n  i < str . length ( );\n  ++ i ) mx = max ( mx, str . substr ( i ) );\n  return mx;\n}"}
{"source": "java", "target": "python", "source_program": " static String LexicographicalMaxString ( String str ) {\n  String mx = \"\" ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ++ i ) {\n    if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {\n      mx = str . substring ( i ) ;\n    }\n  }\n  return mx ;\n}", "target_program": " def LexicographicalMaxString ( str ) :\n    mx = \"\"\n    for i in range ( len ( str ) ) :\n        mx = max ( mx , str [ i : ] )\n    return mx"}
{"source": "java", "target": "cpp", "source_program": " static String LexicographicalMaxString ( String str ) {\n  String mx = \"\" ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ++ i ) {\n    if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {\n      mx = str . substring ( i ) ;\n    }\n  }\n  return mx ;\n}", "target_program": " string LexicographicalMaxString ( string str ) {\n  string mx = \"\";\n  for ( int i = 0;\n  i < str . length ( );\n  ++ i ) mx = max ( mx, str . substr ( i ) );\n  return mx;\n}"}
{"source": "cpp", "target": "java", "source_program": " string LexicographicalMaxString ( string str ) {\n  string mx = \"\";\n  for ( int i = 0;\n  i < str . length ( );\n  ++ i ) mx = max ( mx, str . substr ( i ) );\n  return mx;\n}", "target_program": " static String LexicographicalMaxString ( String str ) {\n  String mx = \"\" ;\n  for ( int i = 0 ;\n  i < str . length ( ) ;\n  ++ i ) {\n    if ( mx . compareTo ( str . substring ( i ) ) <= 0 ) {\n      mx = str . substring ( i ) ;\n    }\n  }\n  return mx ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string LexicographicalMaxString ( string str ) {\n  string mx = \"\";\n  for ( int i = 0;\n  i < str . length ( );\n  ++ i ) mx = max ( mx, str . substr ( i ) );\n  return mx;\n}", "target_program": " def LexicographicalMaxString ( str ) :\n    mx = \"\"\n    for i in range ( len ( str ) ) :\n        mx = max ( mx , str [ i : ] )\n    return mx"}
{"source": "python", "target": "java", "source_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    set1.sort ( )\n    set2.sort ( )\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( set1 [ i ] < set2 [ j ] ) :\n            i += 1\n        elif ( set2 [ j ] < set1 [ i ] ) :\n            j += 1\n        else :\n            return False\n    return True", "target_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  int i = 0 , j = 0 ;\n  Arrays . sort ( set1 ) ;\n  Arrays . sort ( set2 ) ;\n  while ( i < set1 . length && j < set2 . length ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++ ;\n    else if ( set1 [ i ] > set2 [ j ] ) j ++ ;\n    else return false ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    set1.sort ( )\n    set2.sort ( )\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( set1 [ i ] < set2 [ j ] ) :\n            i += 1\n        elif ( set2 [ j ] < set1 [ i ] ) :\n            j += 1\n        else :\n            return False\n    return True", "target_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  sort ( set1, set1 + m );\n  sort ( set2, set2 + n );\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++;\n    else if ( set2 [ j ] < set1 [ i ] ) j ++;\n    else return false;\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  int i = 0 , j = 0 ;\n  Arrays . sort ( set1 ) ;\n  Arrays . sort ( set2 ) ;\n  while ( i < set1 . length && j < set2 . length ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++ ;\n    else if ( set1 [ i ] > set2 [ j ] ) j ++ ;\n    else return false ;\n  }\n  return true ;\n}", "target_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    set1.sort ( )\n    set2.sort ( )\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( set1 [ i ] < set2 [ j ] ) :\n            i += 1\n        elif ( set2 [ j ] < set1 [ i ] ) :\n            j += 1\n        else :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  int i = 0 , j = 0 ;\n  Arrays . sort ( set1 ) ;\n  Arrays . sort ( set2 ) ;\n  while ( i < set1 . length && j < set2 . length ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++ ;\n    else if ( set1 [ i ] > set2 [ j ] ) j ++ ;\n    else return false ;\n  }\n  return true ;\n}", "target_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  sort ( set1, set1 + m );\n  sort ( set2, set2 + n );\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++;\n    else if ( set2 [ j ] < set1 [ i ] ) j ++;\n    else return false;\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  sort ( set1, set1 + m );\n  sort ( set2, set2 + n );\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++;\n    else if ( set2 [ j ] < set1 [ i ] ) j ++;\n    else return false;\n  }\n  return true;\n}", "target_program": " boolean aredisjoint ( int set1 [ ] , int set2 [ ] ) {\n  int i = 0 , j = 0 ;\n  Arrays . sort ( set1 ) ;\n  Arrays . sort ( set2 ) ;\n  while ( i < set1 . length && j < set2 . length ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++ ;\n    else if ( set1 [ i ] > set2 [ j ] ) j ++ ;\n    else return false ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool areDisjoint ( int set1 [ ], int set2 [ ], int m, int n ) {\n  sort ( set1, set1 + m );\n  sort ( set2, set2 + n );\n  int i = 0, j = 0;\n  while ( i < m && j < n ) {\n    if ( set1 [ i ] < set2 [ j ] ) i ++;\n    else if ( set2 [ j ] < set1 [ i ] ) j ++;\n    else return false;\n  }\n  return true;\n}", "target_program": " def areDisjoint ( set1 , set2 , m , n ) :\n    set1.sort ( )\n    set2.sort ( )\n    i = 0 ; j = 0\n    while ( i < m and j < n ) :\n        if ( set1 [ i ] < set2 [ j ] ) :\n            i += 1\n        elif ( set2 [ j ] < set1 [ i ] ) :\n            j += 1\n        else :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def equilibrium ( arr ) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    for i , num in enumerate ( arr ) :\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n    return - 1", "target_program": " int equilibrium ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int leftsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) sum += arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    sum -= arr [ i ] ;\n    if ( leftsum == sum ) return i ;\n    leftsum += arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def equilibrium ( arr ) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    for i , num in enumerate ( arr ) :\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n    return - 1", "target_program": " int equilibrium ( int arr [ ], int n ) {\n  int sum = 0;\n  int leftsum = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) sum += arr [ i ];\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    sum -= arr [ i ];\n    if ( leftsum == sum ) return i;\n    leftsum += arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " int equilibrium ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int leftsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) sum += arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    sum -= arr [ i ] ;\n    if ( leftsum == sum ) return i ;\n    leftsum += arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " def equilibrium ( arr ) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    for i , num in enumerate ( arr ) :\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " int equilibrium ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int leftsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) sum += arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    sum -= arr [ i ] ;\n    if ( leftsum == sum ) return i ;\n    leftsum += arr [ i ] ;\n  }\n  return - 1 ;\n}", "target_program": " int equilibrium ( int arr [ ], int n ) {\n  int sum = 0;\n  int leftsum = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) sum += arr [ i ];\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    sum -= arr [ i ];\n    if ( leftsum == sum ) return i;\n    leftsum += arr [ i ];\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int equilibrium ( int arr [ ], int n ) {\n  int sum = 0;\n  int leftsum = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) sum += arr [ i ];\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    sum -= arr [ i ];\n    if ( leftsum == sum ) return i;\n    leftsum += arr [ i ];\n  }\n  return - 1;\n}", "target_program": " int equilibrium ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  int leftsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) sum += arr [ i ] ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    sum -= arr [ i ] ;\n    if ( leftsum == sum ) return i ;\n    leftsum += arr [ i ] ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int equilibrium ( int arr [ ], int n ) {\n  int sum = 0;\n  int leftsum = 0;\n  for ( int i = 0;\n  i < n;\n  ++ i ) sum += arr [ i ];\n  for ( int i = 0;\n  i < n;\n  ++ i ) {\n    sum -= arr [ i ];\n    if ( leftsum == sum ) return i;\n    leftsum += arr [ i ];\n  }\n  return - 1;\n}", "target_program": " def equilibrium ( arr ) :\n    total_sum = sum ( arr )\n    leftsum = 0\n    for i , num in enumerate ( arr ) :\n        total_sum -= num\n        if leftsum == total_sum :\n            return i\n        leftsum += num\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def areacircumscribed ( a ) :\n    return ( a * a * ( PI / 2 ) )", "target_program": " static float areacircumscribed ( float a ) {\n  float PI = 3.14159265f ;\n  return ( a * a * ( PI / 2 ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def areacircumscribed ( a ) :\n    return ( a * a * ( PI / 2 ) )", "target_program": " float areacircumscribed ( float a ) {\n  return ( a * a * ( PI / 2 ) );\n}"}
{"source": "java", "target": "python", "source_program": " static float areacircumscribed ( float a ) {\n  float PI = 3.14159265f ;\n  return ( a * a * ( PI / 2 ) ) ;\n}", "target_program": " def areacircumscribed ( a ) :\n    return ( a * a * ( PI / 2 ) )"}
{"source": "java", "target": "cpp", "source_program": " static float areacircumscribed ( float a ) {\n  float PI = 3.14159265f ;\n  return ( a * a * ( PI / 2 ) ) ;\n}", "target_program": " float areacircumscribed ( float a ) {\n  return ( a * a * ( PI / 2 ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " float areacircumscribed ( float a ) {\n  return ( a * a * ( PI / 2 ) );\n}", "target_program": " static float areacircumscribed ( float a ) {\n  float PI = 3.14159265f ;\n  return ( a * a * ( PI / 2 ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float areacircumscribed ( float a ) {\n  return ( a * a * ( PI / 2 ) );\n}", "target_program": " def areacircumscribed ( a ) :\n    return ( a * a * ( PI / 2 ) )"}
{"source": "python", "target": "java", "source_program": " def longestRepeatedSubstring ( str ) :\n    n = len ( str )\n    LCSRe = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    res = \"\"\n    res_length = 0\n    index = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) :\n                LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1\n                if ( LCSRe [ i ] [ j ] > res_length ) :\n                    res_length = LCSRe [ i ] [ j ]\n                    index = max ( i , index )\n            else :\n                LCSRe [ i ] [ j ] = 0\n    if ( res_length > 0 ) :\n        for i in range ( index - res_length + 1 , index + 1 ) :\n            res = res + str [ i - 1 ]\n    return res", "target_program": " static String longestRepeatedSubstring ( String str ) {\n  int n = str . length ( ) ;\n  int LCSRe [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;\n  String res = \"\" ;\n  int res_length = 0 ;\n  int i , index = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1 ;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ] ;\n          index = Math . max ( i , index ) ;\n        }\n      }\n      else {\n        LCSRe [ i ] [ j ] = 0 ;\n      }\n    }\n  }\n  if ( res_length > 0 ) {\n    for ( i = index - res_length + 1 ;\n    i <= index ;\n    i ++ ) {\n      res += str . charAt ( i - 1 ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longestRepeatedSubstring ( str ) :\n    n = len ( str )\n    LCSRe = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    res = \"\"\n    res_length = 0\n    index = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) :\n                LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1\n                if ( LCSRe [ i ] [ j ] > res_length ) :\n                    res_length = LCSRe [ i ] [ j ]\n                    index = max ( i , index )\n            else :\n                LCSRe [ i ] [ j ] = 0\n    if ( res_length > 0 ) :\n        for i in range ( index - res_length + 1 , index + 1 ) :\n            res = res + str [ i - 1 ]\n    return res", "target_program": " string longestRepeatedSubstring ( string str ) {\n  int n = str . length ( );\n  int LCSRe [ n + 1 ] [ n + 1 ];\n  memset ( LCSRe, 0, sizeof ( LCSRe ) );\n  string res;\n  int res_length = 0;\n  int i, index = 0;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ];\n          index = max ( i, index );\n        }\n      }\n      else LCSRe [ i ] [ j ] = 0;\n    }\n  }\n  if ( res_length > 0 ) for ( i = index - res_length + 1;\n  i <= index;\n  i ++ ) res . push_back ( str [ i - 1 ] );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static String longestRepeatedSubstring ( String str ) {\n  int n = str . length ( ) ;\n  int LCSRe [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;\n  String res = \"\" ;\n  int res_length = 0 ;\n  int i , index = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1 ;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ] ;\n          index = Math . max ( i , index ) ;\n        }\n      }\n      else {\n        LCSRe [ i ] [ j ] = 0 ;\n      }\n    }\n  }\n  if ( res_length > 0 ) {\n    for ( i = index - res_length + 1 ;\n    i <= index ;\n    i ++ ) {\n      res += str . charAt ( i - 1 ) ;\n    }\n  }\n  return res ;\n}", "target_program": " def longestRepeatedSubstring ( str ) :\n    n = len ( str )\n    LCSRe = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    res = \"\"\n    res_length = 0\n    index = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) :\n                LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1\n                if ( LCSRe [ i ] [ j ] > res_length ) :\n                    res_length = LCSRe [ i ] [ j ]\n                    index = max ( i , index )\n            else :\n                LCSRe [ i ] [ j ] = 0\n    if ( res_length > 0 ) :\n        for i in range ( index - res_length + 1 , index + 1 ) :\n            res = res + str [ i - 1 ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static String longestRepeatedSubstring ( String str ) {\n  int n = str . length ( ) ;\n  int LCSRe [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;\n  String res = \"\" ;\n  int res_length = 0 ;\n  int i , index = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1 ;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ] ;\n          index = Math . max ( i , index ) ;\n        }\n      }\n      else {\n        LCSRe [ i ] [ j ] = 0 ;\n      }\n    }\n  }\n  if ( res_length > 0 ) {\n    for ( i = index - res_length + 1 ;\n    i <= index ;\n    i ++ ) {\n      res += str . charAt ( i - 1 ) ;\n    }\n  }\n  return res ;\n}", "target_program": " string longestRepeatedSubstring ( string str ) {\n  int n = str . length ( );\n  int LCSRe [ n + 1 ] [ n + 1 ];\n  memset ( LCSRe, 0, sizeof ( LCSRe ) );\n  string res;\n  int res_length = 0;\n  int i, index = 0;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ];\n          index = max ( i, index );\n        }\n      }\n      else LCSRe [ i ] [ j ] = 0;\n    }\n  }\n  if ( res_length > 0 ) for ( i = index - res_length + 1;\n  i <= index;\n  i ++ ) res . push_back ( str [ i - 1 ] );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " string longestRepeatedSubstring ( string str ) {\n  int n = str . length ( );\n  int LCSRe [ n + 1 ] [ n + 1 ];\n  memset ( LCSRe, 0, sizeof ( LCSRe ) );\n  string res;\n  int res_length = 0;\n  int i, index = 0;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ];\n          index = max ( i, index );\n        }\n      }\n      else LCSRe [ i ] [ j ] = 0;\n    }\n  }\n  if ( res_length > 0 ) for ( i = index - res_length + 1;\n  i <= index;\n  i ++ ) res . push_back ( str [ i - 1 ] );\n  return res;\n}", "target_program": " static String longestRepeatedSubstring ( String str ) {\n  int n = str . length ( ) ;\n  int LCSRe [ ] [ ] = new int [ n + 1 ] [ n + 1 ] ;\n  String res = \"\" ;\n  int res_length = 0 ;\n  int i , index = 0 ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1 ;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ] ;\n          index = Math . max ( i , index ) ;\n        }\n      }\n      else {\n        LCSRe [ i ] [ j ] = 0 ;\n      }\n    }\n  }\n  if ( res_length > 0 ) {\n    for ( i = index - res_length + 1 ;\n    i <= index ;\n    i ++ ) {\n      res += str . charAt ( i - 1 ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string longestRepeatedSubstring ( string str ) {\n  int n = str . length ( );\n  int LCSRe [ n + 1 ] [ n + 1 ];\n  memset ( LCSRe, 0, sizeof ( LCSRe ) );\n  string res;\n  int res_length = 0;\n  int i, index = 0;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    for ( int j = i + 1;\n    j <= n;\n    j ++ ) {\n      if ( str [ i - 1 ] == str [ j - 1 ] && LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) {\n        LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1;\n        if ( LCSRe [ i ] [ j ] > res_length ) {\n          res_length = LCSRe [ i ] [ j ];\n          index = max ( i, index );\n        }\n      }\n      else LCSRe [ i ] [ j ] = 0;\n    }\n  }\n  if ( res_length > 0 ) for ( i = index - res_length + 1;\n  i <= index;\n  i ++ ) res . push_back ( str [ i - 1 ] );\n  return res;\n}", "target_program": " def longestRepeatedSubstring ( str ) :\n    n = len ( str )\n    LCSRe = [ [ 0 for x in range ( n + 1 ) ] for y in range ( n + 1 ) ]\n    res = \"\"\n    res_length = 0\n    index = 0\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( i + 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and LCSRe [ i - 1 ] [ j - 1 ] < ( j - i ) ) :\n                LCSRe [ i ] [ j ] = LCSRe [ i - 1 ] [ j - 1 ] + 1\n                if ( LCSRe [ i ] [ j ] > res_length ) :\n                    res_length = LCSRe [ i ] [ j ]\n                    index = max ( i , index )\n            else :\n                LCSRe [ i ] [ j ] = 0\n    if ( res_length > 0 ) :\n        for i in range ( index - res_length + 1 , index + 1 ) :\n            res = res + str [ i - 1 ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def mulmod ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b > 0 ) :\n        if ( b % 2 == 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( a * 2 ) % mod ;\n        b //= 2 ;\n    return res % mod ;", "target_program": " static long mulmod ( long a , long b , long mod ) {\n  long res = 0 ;\n  a = a % mod ;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( a * 2 ) % mod ;\n    b /= 2 ;\n  }\n  return res % mod ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def mulmod ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b > 0 ) :\n        if ( b % 2 == 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( a * 2 ) % mod ;\n        b //= 2 ;\n    return res % mod ;", "target_program": " ll mulmod ( ll a, ll b, ll mod ) {\n  ll res = 0;\n  a = a % mod;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) res = ( res + a ) % mod;\n    a = ( a * 2 ) % mod;\n    b /= 2;\n  }\n  return res % mod;\n}"}
{"source": "java", "target": "python", "source_program": " static long mulmod ( long a , long b , long mod ) {\n  long res = 0 ;\n  a = a % mod ;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( a * 2 ) % mod ;\n    b /= 2 ;\n  }\n  return res % mod ;\n}", "target_program": " def mulmod ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b > 0 ) :\n        if ( b % 2 == 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( a * 2 ) % mod ;\n        b //= 2 ;\n    return res % mod ;"}
{"source": "java", "target": "cpp", "source_program": " static long mulmod ( long a , long b , long mod ) {\n  long res = 0 ;\n  a = a % mod ;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( a * 2 ) % mod ;\n    b /= 2 ;\n  }\n  return res % mod ;\n}", "target_program": " ll mulmod ( ll a, ll b, ll mod ) {\n  ll res = 0;\n  a = a % mod;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) res = ( res + a ) % mod;\n    a = ( a * 2 ) % mod;\n    b /= 2;\n  }\n  return res % mod;\n}"}
{"source": "cpp", "target": "java", "source_program": " ll mulmod ( ll a, ll b, ll mod ) {\n  ll res = 0;\n  a = a % mod;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) res = ( res + a ) % mod;\n    a = ( a * 2 ) % mod;\n    b /= 2;\n  }\n  return res % mod;\n}", "target_program": " static long mulmod ( long a , long b , long mod ) {\n  long res = 0 ;\n  a = a % mod ;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) {\n      res = ( res + a ) % mod ;\n    }\n    a = ( a * 2 ) % mod ;\n    b /= 2 ;\n  }\n  return res % mod ;\n}"}
{"source": "cpp", "target": "python", "source_program": " ll mulmod ( ll a, ll b, ll mod ) {\n  ll res = 0;\n  a = a % mod;\n  while ( b > 0 ) {\n    if ( b % 2 == 1 ) res = ( res + a ) % mod;\n    a = ( a * 2 ) % mod;\n    b /= 2;\n  }\n  return res % mod;\n}", "target_program": " def mulmod ( a , b , mod ) :\n    res = 0 ;\n    a = a % mod ;\n    while ( b > 0 ) :\n        if ( b % 2 == 1 ) :\n            res = ( res + a ) % mod ;\n        a = ( a * 2 ) % mod ;\n        b //= 2 ;\n    return res % mod ;"}
{"source": "python", "target": "java", "source_program": " def isProduct ( arr , n , x ) :\n    if n < 2 :\n        return False\n    s = set ( )\n    for i in range ( 0 , n ) :\n        if arr [ i ] == 0 :\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n    return False", "target_program": " static boolean isProduct ( int arr [ ] , int n , int x ) {\n  HashSet < Integer > hset = new HashSet < > ( ) ;\n  if ( n < 2 ) return false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true ;\n      else continue ;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( hset . contains ( x / arr [ i ] ) ) return true ;\n      hset . add ( arr [ i ] ) ;\n    }\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isProduct ( arr , n , x ) :\n    if n < 2 :\n        return False\n    s = set ( )\n    for i in range ( 0 , n ) :\n        if arr [ i ] == 0 :\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n    return False", "target_program": " bool isProduct ( int arr [ ], int n, int x ) {\n  if ( n < 2 ) return false;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true;\n      else continue;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( s . find ( x / arr [ i ] ) != s . end ( ) ) return true;\n      s . insert ( arr [ i ] );\n    }\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isProduct ( int arr [ ] , int n , int x ) {\n  HashSet < Integer > hset = new HashSet < > ( ) ;\n  if ( n < 2 ) return false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true ;\n      else continue ;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( hset . contains ( x / arr [ i ] ) ) return true ;\n      hset . add ( arr [ i ] ) ;\n    }\n  }\n  return false ;\n}", "target_program": " def isProduct ( arr , n , x ) :\n    if n < 2 :\n        return False\n    s = set ( )\n    for i in range ( 0 , n ) :\n        if arr [ i ] == 0 :\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isProduct ( int arr [ ] , int n , int x ) {\n  HashSet < Integer > hset = new HashSet < > ( ) ;\n  if ( n < 2 ) return false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true ;\n      else continue ;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( hset . contains ( x / arr [ i ] ) ) return true ;\n      hset . add ( arr [ i ] ) ;\n    }\n  }\n  return false ;\n}", "target_program": " bool isProduct ( int arr [ ], int n, int x ) {\n  if ( n < 2 ) return false;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true;\n      else continue;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( s . find ( x / arr [ i ] ) != s . end ( ) ) return true;\n      s . insert ( arr [ i ] );\n    }\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isProduct ( int arr [ ], int n, int x ) {\n  if ( n < 2 ) return false;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true;\n      else continue;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( s . find ( x / arr [ i ] ) != s . end ( ) ) return true;\n      s . insert ( arr [ i ] );\n    }\n  }\n  return false;\n}", "target_program": " static boolean isProduct ( int arr [ ] , int n , int x ) {\n  HashSet < Integer > hset = new HashSet < > ( ) ;\n  if ( n < 2 ) return false ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true ;\n      else continue ;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( hset . contains ( x / arr [ i ] ) ) return true ;\n      hset . add ( arr [ i ] ) ;\n    }\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isProduct ( int arr [ ], int n, int x ) {\n  if ( n < 2 ) return false;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 0 ) {\n      if ( x == 0 ) return true;\n      else continue;\n    }\n    if ( x % arr [ i ] == 0 ) {\n      if ( s . find ( x / arr [ i ] ) != s . end ( ) ) return true;\n      s . insert ( arr [ i ] );\n    }\n  }\n  return false;\n}", "target_program": " def isProduct ( arr , n , x ) :\n    if n < 2 :\n        return False\n    s = set ( )\n    for i in range ( 0 , n ) :\n        if arr [ i ] == 0 :\n            if x == 0 :\n                return True\n            else :\n                continue\n        if x % arr [ i ] == 0 :\n            if x // arr [ i ] in s :\n                return True\n            s.add ( arr [ i ] )\n    return False"}
{"source": "python", "target": "java", "source_program": " def kthgroupsum ( k ) :\n    cur = int ( ( k * ( k - 1 ) ) + 1 )\n    sum = 0\n    while k :\n        sum += cur\n        cur += 2\n        k = k - 1\n    return sum", "target_program": " public static int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1 ;\n  int sum = 0 ;\n  while ( k -- > 0 ) {\n    sum += cur ;\n    cur += 2 ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def kthgroupsum ( k ) :\n    cur = int ( ( k * ( k - 1 ) ) + 1 )\n    sum = 0\n    while k :\n        sum += cur\n        cur += 2\n        k = k - 1\n    return sum", "target_program": " int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1;\n  int sum = 0;\n  while ( k -- ) {\n    sum += cur;\n    cur += 2;\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " public static int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1 ;\n  int sum = 0 ;\n  while ( k -- > 0 ) {\n    sum += cur ;\n    cur += 2 ;\n  }\n  return sum ;\n}", "target_program": " def kthgroupsum ( k ) :\n    cur = int ( ( k * ( k - 1 ) ) + 1 )\n    sum = 0\n    while k :\n        sum += cur\n        cur += 2\n        k = k - 1\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " public static int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1 ;\n  int sum = 0 ;\n  while ( k -- > 0 ) {\n    sum += cur ;\n    cur += 2 ;\n  }\n  return sum ;\n}", "target_program": " int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1;\n  int sum = 0;\n  while ( k -- ) {\n    sum += cur;\n    cur += 2;\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1;\n  int sum = 0;\n  while ( k -- ) {\n    sum += cur;\n    cur += 2;\n  }\n  return sum;\n}", "target_program": " public static int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1 ;\n  int sum = 0 ;\n  while ( k -- > 0 ) {\n    sum += cur ;\n    cur += 2 ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int kthgroupsum ( int k ) {\n  int cur = ( k * ( k - 1 ) ) + 1;\n  int sum = 0;\n  while ( k -- ) {\n    sum += cur;\n    cur += 2;\n  }\n  return sum;\n}", "target_program": " def kthgroupsum ( k ) :\n    cur = int ( ( k * ( k - 1 ) ) + 1 )\n    sum = 0\n    while k :\n        sum += cur\n        cur += 2\n        k = k - 1\n    return sum"}
{"source": "python", "target": "java", "source_program": " def findElements ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 2 ) :\n        print ( arr [ i ] , end = \" \" )", "target_program": " static void findElements ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findElements ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 2 ) :\n        print ( arr [ i ] , end = \" \" )", "target_program": " void findElements ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) cout << arr [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void findElements ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}", "target_program": " def findElements ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 2 ) :\n        print ( arr [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void findElements ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}", "target_program": " void findElements ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) cout << arr [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void findElements ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) cout << arr [ i ] << \" \";\n}", "target_program": " static void findElements ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) System . out . print ( arr [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findElements ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) cout << arr [ i ] << \" \";\n}", "target_program": " def findElements ( arr , n ) :\n    arr.sort ( )\n    for i in range ( 0 , n - 2 ) :\n        print ( arr [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def minStepToDeleteString ( str ) :\n    N = len ( str )\n    dp = [ [ 0 for x in range ( N + 1 ) ] for y in range ( N + 1 ) ]\n    for l in range ( 1 , N + 1 ) :\n        i = 0\n        j = l - 1\n        while j < N :\n            if ( l == 1 ) :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ]\n                if ( str [ i ] == str [ i + 1 ] ) :\n                    dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] )\n                for K in range ( i + 2 , j + 1 ) :\n                    if ( str [ i ] == str [ K ] ) :\n                        dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] )\n            i += 1\n            j += 1\n    return dp [ 0 ] [ N - 1 ]", "target_program": " static int minStepToDeleteString ( String str ) {\n  int N = str . length ( ) ;\n  int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int len = 1 ;\n  len <= N ;\n  len ++ ) {\n    for ( int i = 0 , j = len - 1 ;\n    j < N ;\n    i ++ , j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1 ;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ;\n        if ( str . charAt ( i ) == str . charAt ( i + 1 ) ) dp [ i ] [ j ] = Math . min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ;\n        for ( int K = i + 2 ;\n        K <= j ;\n        K ++ ) if ( str . charAt ( i ) == str . charAt ( K ) ) dp [ i ] [ j ] = Math . min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minStepToDeleteString ( str ) :\n    N = len ( str )\n    dp = [ [ 0 for x in range ( N + 1 ) ] for y in range ( N + 1 ) ]\n    for l in range ( 1 , N + 1 ) :\n        i = 0\n        j = l - 1\n        while j < N :\n            if ( l == 1 ) :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ]\n                if ( str [ i ] == str [ i + 1 ] ) :\n                    dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] )\n                for K in range ( i + 2 , j + 1 ) :\n                    if ( str [ i ] == str [ K ] ) :\n                        dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] )\n            i += 1\n            j += 1\n    return dp [ 0 ] [ N - 1 ]", "target_program": " int minStepToDeleteString ( string str ) {\n  int N = str . length ( );\n  int dp [ N + 1 ] [ N + 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int len = 1;\n  len <= N;\n  len ++ ) {\n    for ( int i = 0, j = len - 1;\n    j < N;\n    i ++, j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ];\n        if ( str [ i ] == str [ i + 1 ] ) dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ], dp [ i ] [ j ] );\n        for ( int K = i + 2;\n        K <= j;\n        K ++ ) if ( str [ i ] == str [ K ] ) dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ], dp [ i ] [ j ] );\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minStepToDeleteString ( String str ) {\n  int N = str . length ( ) ;\n  int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int len = 1 ;\n  len <= N ;\n  len ++ ) {\n    for ( int i = 0 , j = len - 1 ;\n    j < N ;\n    i ++ , j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1 ;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ;\n        if ( str . charAt ( i ) == str . charAt ( i + 1 ) ) dp [ i ] [ j ] = Math . min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ;\n        for ( int K = i + 2 ;\n        K <= j ;\n        K ++ ) if ( str . charAt ( i ) == str . charAt ( K ) ) dp [ i ] [ j ] = Math . min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ] ;\n}", "target_program": " def minStepToDeleteString ( str ) :\n    N = len ( str )\n    dp = [ [ 0 for x in range ( N + 1 ) ] for y in range ( N + 1 ) ]\n    for l in range ( 1 , N + 1 ) :\n        i = 0\n        j = l - 1\n        while j < N :\n            if ( l == 1 ) :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ]\n                if ( str [ i ] == str [ i + 1 ] ) :\n                    dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] )\n                for K in range ( i + 2 , j + 1 ) :\n                    if ( str [ i ] == str [ K ] ) :\n                        dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] )\n            i += 1\n            j += 1\n    return dp [ 0 ] [ N - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int minStepToDeleteString ( String str ) {\n  int N = str . length ( ) ;\n  int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int len = 1 ;\n  len <= N ;\n  len ++ ) {\n    for ( int i = 0 , j = len - 1 ;\n    j < N ;\n    i ++ , j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1 ;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ;\n        if ( str . charAt ( i ) == str . charAt ( i + 1 ) ) dp [ i ] [ j ] = Math . min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ;\n        for ( int K = i + 2 ;\n        K <= j ;\n        K ++ ) if ( str . charAt ( i ) == str . charAt ( K ) ) dp [ i ] [ j ] = Math . min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ] ;\n}", "target_program": " int minStepToDeleteString ( string str ) {\n  int N = str . length ( );\n  int dp [ N + 1 ] [ N + 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int len = 1;\n  len <= N;\n  len ++ ) {\n    for ( int i = 0, j = len - 1;\n    j < N;\n    i ++, j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ];\n        if ( str [ i ] == str [ i + 1 ] ) dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ], dp [ i ] [ j ] );\n        for ( int K = i + 2;\n        K <= j;\n        K ++ ) if ( str [ i ] == str [ K ] ) dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ], dp [ i ] [ j ] );\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minStepToDeleteString ( string str ) {\n  int N = str . length ( );\n  int dp [ N + 1 ] [ N + 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int len = 1;\n  len <= N;\n  len ++ ) {\n    for ( int i = 0, j = len - 1;\n    j < N;\n    i ++, j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ];\n        if ( str [ i ] == str [ i + 1 ] ) dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ], dp [ i ] [ j ] );\n        for ( int K = i + 2;\n        K <= j;\n        K ++ ) if ( str [ i ] == str [ K ] ) dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ], dp [ i ] [ j ] );\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ];\n}", "target_program": " static int minStepToDeleteString ( String str ) {\n  int N = str . length ( ) ;\n  int [ ] [ ] dp = new int [ N + 1 ] [ N + 1 ] ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j <= N ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int len = 1 ;\n  len <= N ;\n  len ++ ) {\n    for ( int i = 0 , j = len - 1 ;\n    j < N ;\n    i ++ , j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1 ;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ] ;\n        if ( str . charAt ( i ) == str . charAt ( i + 1 ) ) dp [ i ] [ j ] = Math . min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] ) ;\n        for ( int K = i + 2 ;\n        K <= j ;\n        K ++ ) if ( str . charAt ( i ) == str . charAt ( K ) ) dp [ i ] [ j ] = Math . min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] ) ;\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minStepToDeleteString ( string str ) {\n  int N = str . length ( );\n  int dp [ N + 1 ] [ N + 1 ];\n  for ( int i = 0;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j <= N;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int len = 1;\n  len <= N;\n  len ++ ) {\n    for ( int i = 0, j = len - 1;\n    j < N;\n    i ++, j ++ ) {\n      if ( len == 1 ) dp [ i ] [ j ] = 1;\n      else {\n        dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ];\n        if ( str [ i ] == str [ i + 1 ] ) dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ], dp [ i ] [ j ] );\n        for ( int K = i + 2;\n        K <= j;\n        K ++ ) if ( str [ i ] == str [ K ] ) dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ], dp [ i ] [ j ] );\n      }\n    }\n  }\n  return dp [ 0 ] [ N - 1 ];\n}", "target_program": " def minStepToDeleteString ( str ) :\n    N = len ( str )\n    dp = [ [ 0 for x in range ( N + 1 ) ] for y in range ( N + 1 ) ]\n    for l in range ( 1 , N + 1 ) :\n        i = 0\n        j = l - 1\n        while j < N :\n            if ( l == 1 ) :\n                dp [ i ] [ j ] = 1\n            else :\n                dp [ i ] [ j ] = 1 + dp [ i + 1 ] [ j ]\n                if ( str [ i ] == str [ i + 1 ] ) :\n                    dp [ i ] [ j ] = min ( 1 + dp [ i + 2 ] [ j ] , dp [ i ] [ j ] )\n                for K in range ( i + 2 , j + 1 ) :\n                    if ( str [ i ] == str [ K ] ) :\n                        dp [ i ] [ j ] = min ( dp [ i + 1 ] [ K - 1 ] + dp [ K + 1 ] [ j ] , dp [ i ] [ j ] )\n            i += 1\n            j += 1\n    return dp [ 0 ] [ N - 1 ]"}
{"source": "python", "target": "java", "source_program": " def vol_tetra ( side ) :\n    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )\n    return round ( volume , 2 )", "target_program": " static double vol_tetra ( int side ) {\n  double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sqrt ( 2 ) ) ) ;\n  return volume ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def vol_tetra ( side ) :\n    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )\n    return round ( volume , 2 )", "target_program": " double vol_tetra ( int side ) {\n  double volume = ( pow ( side, 3 ) / ( 6 * sqrt ( 2 ) ) );\n  return volume;\n}"}
{"source": "java", "target": "python", "source_program": " static double vol_tetra ( int side ) {\n  double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sqrt ( 2 ) ) ) ;\n  return volume ;\n}", "target_program": " def vol_tetra ( side ) :\n    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )\n    return round ( volume , 2 )"}
{"source": "java", "target": "cpp", "source_program": " static double vol_tetra ( int side ) {\n  double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sqrt ( 2 ) ) ) ;\n  return volume ;\n}", "target_program": " double vol_tetra ( int side ) {\n  double volume = ( pow ( side, 3 ) / ( 6 * sqrt ( 2 ) ) );\n  return volume;\n}"}
{"source": "cpp", "target": "java", "source_program": " double vol_tetra ( int side ) {\n  double volume = ( pow ( side, 3 ) / ( 6 * sqrt ( 2 ) ) );\n  return volume;\n}", "target_program": " static double vol_tetra ( int side ) {\n  double volume = ( Math . pow ( side , 3 ) / ( 6 * Math . sqrt ( 2 ) ) ) ;\n  return volume ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double vol_tetra ( int side ) {\n  double volume = ( pow ( side, 3 ) / ( 6 * sqrt ( 2 ) ) );\n  return volume;\n}", "target_program": " def vol_tetra ( side ) :\n    volume = ( side ** 3 / ( 6 * math.sqrt ( 2 ) ) )\n    return round ( volume , 2 )"}
{"source": "python", "target": "java", "source_program": " def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    for i in range ( n ) :\n        L [ i ] [ n - 1 ] = 2\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) :\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n                while ( i >= 0 ) :\n                    L [ i ] [ j ] = 2\n                    i -= 1\n    return llap", "target_program": " static int lenghtOfLongestAP ( int set [ ] , int n ) {\n  if ( n <= 2 ) return n ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llap = 2 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ n - 1 ] = 2 ;\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  j -- ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2 ;\n        i -- ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        llap = Math . max ( llap , L [ i ] [ j ] ) ;\n        i -- ;\n        k ++ ;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2 ;\n      i -- ;\n    }\n  }\n  return llap ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    for i in range ( n ) :\n        L [ i ] [ n - 1 ] = 2\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) :\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n                while ( i >= 0 ) :\n                    L [ i ] [ j ] = 2\n                    i -= 1\n    return llap", "target_program": " int lenghtOfLongestAP ( int set [ ], int n ) {\n  if ( n <= 2 ) return n;\n  int L [ n ] [ n ];\n  int llap = 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) L [ i ] [ n - 1 ] = 2;\n  for ( int j = n - 2;\n  j >= 1;\n  j -- ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2, i --;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        llap = max ( llap, L [ i ] [ j ] );\n        i --;\n        k ++;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2;\n      i --;\n    }\n  }\n  return llap;\n}"}
{"source": "java", "target": "python", "source_program": " static int lenghtOfLongestAP ( int set [ ] , int n ) {\n  if ( n <= 2 ) return n ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llap = 2 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ n - 1 ] = 2 ;\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  j -- ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2 ;\n        i -- ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        llap = Math . max ( llap , L [ i ] [ j ] ) ;\n        i -- ;\n        k ++ ;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2 ;\n      i -- ;\n    }\n  }\n  return llap ;\n}", "target_program": " def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    for i in range ( n ) :\n        L [ i ] [ n - 1 ] = 2\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) :\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n                while ( i >= 0 ) :\n                    L [ i ] [ j ] = 2\n                    i -= 1\n    return llap"}
{"source": "java", "target": "cpp", "source_program": " static int lenghtOfLongestAP ( int set [ ] , int n ) {\n  if ( n <= 2 ) return n ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llap = 2 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ n - 1 ] = 2 ;\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  j -- ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2 ;\n        i -- ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        llap = Math . max ( llap , L [ i ] [ j ] ) ;\n        i -- ;\n        k ++ ;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2 ;\n      i -- ;\n    }\n  }\n  return llap ;\n}", "target_program": " int lenghtOfLongestAP ( int set [ ], int n ) {\n  if ( n <= 2 ) return n;\n  int L [ n ] [ n ];\n  int llap = 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) L [ i ] [ n - 1 ] = 2;\n  for ( int j = n - 2;\n  j >= 1;\n  j -- ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2, i --;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        llap = max ( llap, L [ i ] [ j ] );\n        i --;\n        k ++;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2;\n      i --;\n    }\n  }\n  return llap;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lenghtOfLongestAP ( int set [ ], int n ) {\n  if ( n <= 2 ) return n;\n  int L [ n ] [ n ];\n  int llap = 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) L [ i ] [ n - 1 ] = 2;\n  for ( int j = n - 2;\n  j >= 1;\n  j -- ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2, i --;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        llap = max ( llap, L [ i ] [ j ] );\n        i --;\n        k ++;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2;\n      i --;\n    }\n  }\n  return llap;\n}", "target_program": " static int lenghtOfLongestAP ( int set [ ] , int n ) {\n  if ( n <= 2 ) return n ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llap = 2 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) L [ i ] [ n - 1 ] = 2 ;\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  j -- ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++ ;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2 ;\n        i -- ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        llap = Math . max ( llap , L [ i ] [ j ] ) ;\n        i -- ;\n        k ++ ;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2 ;\n      i -- ;\n    }\n  }\n  return llap ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lenghtOfLongestAP ( int set [ ], int n ) {\n  if ( n <= 2 ) return n;\n  int L [ n ] [ n ];\n  int llap = 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) L [ i ] [ n - 1 ] = 2;\n  for ( int j = n - 2;\n  j >= 1;\n  j -- ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] + set [ k ] < 2 * set [ j ] ) k ++;\n      else if ( set [ i ] + set [ k ] > 2 * set [ j ] ) {\n        L [ i ] [ j ] = 2, i --;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        llap = max ( llap, L [ i ] [ j ] );\n        i --;\n        k ++;\n      }\n    }\n    while ( i >= 0 ) {\n      L [ i ] [ j ] = 2;\n      i --;\n    }\n  }\n  return llap;\n}", "target_program": " def lenghtOfLongestAP ( set , n ) :\n    if ( n <= 2 ) :\n        return n\n    L = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    llap = 2\n    for i in range ( n ) :\n        L [ i ] [ n - 1 ] = 2\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while ( i >= 0 and k <= n - 1 ) :\n            if ( set [ i ] + set [ k ] < 2 * set [ j ] ) :\n                k += 1\n            elif ( set [ i ] + set [ k ] > 2 * set [ j ] ) :\n                L [ i ] [ j ] = 2\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                llap = max ( llap , L [ i ] [ j ] )\n                i -= 1\n                k += 1\n                while ( i >= 0 ) :\n                    L [ i ] [ j ] = 2\n                    i -= 1\n    return llap"}
{"source": "python", "target": "java", "source_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    if ( dp [ position ] [ previous_sum ] != - 1 ) :\n        return dp [ position ] [ previous_sum ]\n    dp [ position ] [ previous_sum ] = 0\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum += ( ord ( num [ i ] ) - ord ( '0' ) )\n        if ( sum >= previous_sum ) :\n            res += countGroups ( i + 1 , sum , length , num )\n    dp [ position ] [ previous_sum ] = res\n    return res", "target_program": " static int countGroups ( int position , int previous_sum , int length , char [ ] num ) {\n  if ( position == length ) return 1 ;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ] ;\n  dp [ position ] [ previous_sum ] = 0 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num [ i ] - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  dp [ position ] [ previous_sum ] = res ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    if ( dp [ position ] [ previous_sum ] != - 1 ) :\n        return dp [ position ] [ previous_sum ]\n    dp [ position ] [ previous_sum ] = 0\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum += ( ord ( num [ i ] ) - ord ( '0' ) )\n        if ( sum >= previous_sum ) :\n            res += countGroups ( i + 1 , sum , length , num )\n    dp [ position ] [ previous_sum ] = res\n    return res", "target_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ];\n  dp [ position ] [ previous_sum ] = 0;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  dp [ position ] [ previous_sum ] = res;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countGroups ( int position , int previous_sum , int length , char [ ] num ) {\n  if ( position == length ) return 1 ;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ] ;\n  dp [ position ] [ previous_sum ] = 0 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num [ i ] - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  dp [ position ] [ previous_sum ] = res ;\n  return res ;\n}", "target_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    if ( dp [ position ] [ previous_sum ] != - 1 ) :\n        return dp [ position ] [ previous_sum ]\n    dp [ position ] [ previous_sum ] = 0\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum += ( ord ( num [ i ] ) - ord ( '0' ) )\n        if ( sum >= previous_sum ) :\n            res += countGroups ( i + 1 , sum , length , num )\n    dp [ position ] [ previous_sum ] = res\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countGroups ( int position , int previous_sum , int length , char [ ] num ) {\n  if ( position == length ) return 1 ;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ] ;\n  dp [ position ] [ previous_sum ] = 0 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num [ i ] - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  dp [ position ] [ previous_sum ] = res ;\n  return res ;\n}", "target_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ];\n  dp [ position ] [ previous_sum ] = 0;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  dp [ position ] [ previous_sum ] = res;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ];\n  dp [ position ] [ previous_sum ] = 0;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  dp [ position ] [ previous_sum ] = res;\n  return res;\n}", "target_program": " static int countGroups ( int position , int previous_sum , int length , char [ ] num ) {\n  if ( position == length ) return 1 ;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ] ;\n  dp [ position ] [ previous_sum ] = 0 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num [ i ] - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  dp [ position ] [ previous_sum ] = res ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  if ( dp [ position ] [ previous_sum ] != - 1 ) return dp [ position ] [ previous_sum ];\n  dp [ position ] [ previous_sum ] = 0;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  dp [ position ] [ previous_sum ] = res;\n  return res;\n}", "target_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    if ( dp [ position ] [ previous_sum ] != - 1 ) :\n        return dp [ position ] [ previous_sum ]\n    dp [ position ] [ previous_sum ] = 0\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum += ( ord ( num [ i ] ) - ord ( '0' ) )\n        if ( sum >= previous_sum ) :\n            res += countGroups ( i + 1 , sum , length , num )\n    dp [ position ] [ previous_sum ] = res\n    return res"}
{"source": "python", "target": "java", "source_program": " def longestCommonSum ( arr1 , arr2 , n ) :\n    maxLen = 0\n    presum1 = presum2 = 0\n    diff = { }\n    for i in range ( n ) :\n        presum1 += arr1 [ i ]\n        presum2 += arr2 [ i ]\n        curr_diff = presum1 - presum2\n        if curr_diff == 0 :\n            maxLen = i + 1\n        elif curr_diff not in diff :\n            diff [ curr_diff ] = i\n        else :\n            length = i - diff [ curr_diff ]\n            maxLen = max ( maxLen , length )\n    return maxLen", "target_program": " static int longestCommonSum ( int n ) {\n  int maxLen = 0 ;\n  int preSum1 = 0 , preSum2 = 0 ;\n  int diff [ ] = new int [ 2 * n + 1 ] ;\n  for ( int i = 0 ;\n  i < diff . length ;\n  i ++ ) {\n    diff [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    preSum1 += arr1 [ i ] ;\n    preSum2 += arr2 [ i ] ;\n    int curr_diff = preSum1 - preSum2 ;\n    int diffIndex = n + curr_diff ;\n    if ( curr_diff == 0 ) maxLen = i + 1 ;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i ;\n    else {\n      int len = i - diff [ diffIndex ] ;\n      if ( len > maxLen ) maxLen = len ;\n    }\n  }\n  return maxLen ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longestCommonSum ( arr1 , arr2 , n ) :\n    maxLen = 0\n    presum1 = presum2 = 0\n    diff = { }\n    for i in range ( n ) :\n        presum1 += arr1 [ i ]\n        presum2 += arr2 [ i ]\n        curr_diff = presum1 - presum2\n        if curr_diff == 0 :\n            maxLen = i + 1\n        elif curr_diff not in diff :\n            diff [ curr_diff ] = i\n        else :\n            length = i - diff [ curr_diff ]\n            maxLen = max ( maxLen , length )\n    return maxLen", "target_program": " int longestCommonSum ( bool arr1 [ ], bool arr2 [ ], int n ) {\n  int maxLen = 0;\n  int preSum1 = 0, preSum2 = 0;\n  int diff [ 2 * n + 1 ];\n  memset ( diff, - 1, sizeof ( diff ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    preSum1 += arr1 [ i ];\n    preSum2 += arr2 [ i ];\n    int curr_diff = preSum1 - preSum2;\n    int diffIndex = n + curr_diff;\n    if ( curr_diff == 0 ) maxLen = i + 1;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i;\n    else {\n      int len = i - diff [ diffIndex ];\n      if ( len > maxLen ) maxLen = len;\n    }\n  }\n  return maxLen;\n}"}
{"source": "java", "target": "python", "source_program": " static int longestCommonSum ( int n ) {\n  int maxLen = 0 ;\n  int preSum1 = 0 , preSum2 = 0 ;\n  int diff [ ] = new int [ 2 * n + 1 ] ;\n  for ( int i = 0 ;\n  i < diff . length ;\n  i ++ ) {\n    diff [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    preSum1 += arr1 [ i ] ;\n    preSum2 += arr2 [ i ] ;\n    int curr_diff = preSum1 - preSum2 ;\n    int diffIndex = n + curr_diff ;\n    if ( curr_diff == 0 ) maxLen = i + 1 ;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i ;\n    else {\n      int len = i - diff [ diffIndex ] ;\n      if ( len > maxLen ) maxLen = len ;\n    }\n  }\n  return maxLen ;\n}", "target_program": " def longestCommonSum ( arr1 , arr2 , n ) :\n    maxLen = 0\n    presum1 = presum2 = 0\n    diff = { }\n    for i in range ( n ) :\n        presum1 += arr1 [ i ]\n        presum2 += arr2 [ i ]\n        curr_diff = presum1 - presum2\n        if curr_diff == 0 :\n            maxLen = i + 1\n        elif curr_diff not in diff :\n            diff [ curr_diff ] = i\n        else :\n            length = i - diff [ curr_diff ]\n            maxLen = max ( maxLen , length )\n    return maxLen"}
{"source": "java", "target": "cpp", "source_program": " static int longestCommonSum ( int n ) {\n  int maxLen = 0 ;\n  int preSum1 = 0 , preSum2 = 0 ;\n  int diff [ ] = new int [ 2 * n + 1 ] ;\n  for ( int i = 0 ;\n  i < diff . length ;\n  i ++ ) {\n    diff [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    preSum1 += arr1 [ i ] ;\n    preSum2 += arr2 [ i ] ;\n    int curr_diff = preSum1 - preSum2 ;\n    int diffIndex = n + curr_diff ;\n    if ( curr_diff == 0 ) maxLen = i + 1 ;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i ;\n    else {\n      int len = i - diff [ diffIndex ] ;\n      if ( len > maxLen ) maxLen = len ;\n    }\n  }\n  return maxLen ;\n}", "target_program": " int longestCommonSum ( bool arr1 [ ], bool arr2 [ ], int n ) {\n  int maxLen = 0;\n  int preSum1 = 0, preSum2 = 0;\n  int diff [ 2 * n + 1 ];\n  memset ( diff, - 1, sizeof ( diff ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    preSum1 += arr1 [ i ];\n    preSum2 += arr2 [ i ];\n    int curr_diff = preSum1 - preSum2;\n    int diffIndex = n + curr_diff;\n    if ( curr_diff == 0 ) maxLen = i + 1;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i;\n    else {\n      int len = i - diff [ diffIndex ];\n      if ( len > maxLen ) maxLen = len;\n    }\n  }\n  return maxLen;\n}"}
{"source": "cpp", "target": "java", "source_program": " int longestCommonSum ( bool arr1 [ ], bool arr2 [ ], int n ) {\n  int maxLen = 0;\n  int preSum1 = 0, preSum2 = 0;\n  int diff [ 2 * n + 1 ];\n  memset ( diff, - 1, sizeof ( diff ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    preSum1 += arr1 [ i ];\n    preSum2 += arr2 [ i ];\n    int curr_diff = preSum1 - preSum2;\n    int diffIndex = n + curr_diff;\n    if ( curr_diff == 0 ) maxLen = i + 1;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i;\n    else {\n      int len = i - diff [ diffIndex ];\n      if ( len > maxLen ) maxLen = len;\n    }\n  }\n  return maxLen;\n}", "target_program": " static int longestCommonSum ( int n ) {\n  int maxLen = 0 ;\n  int preSum1 = 0 , preSum2 = 0 ;\n  int diff [ ] = new int [ 2 * n + 1 ] ;\n  for ( int i = 0 ;\n  i < diff . length ;\n  i ++ ) {\n    diff [ i ] = - 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    preSum1 += arr1 [ i ] ;\n    preSum2 += arr2 [ i ] ;\n    int curr_diff = preSum1 - preSum2 ;\n    int diffIndex = n + curr_diff ;\n    if ( curr_diff == 0 ) maxLen = i + 1 ;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i ;\n    else {\n      int len = i - diff [ diffIndex ] ;\n      if ( len > maxLen ) maxLen = len ;\n    }\n  }\n  return maxLen ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int longestCommonSum ( bool arr1 [ ], bool arr2 [ ], int n ) {\n  int maxLen = 0;\n  int preSum1 = 0, preSum2 = 0;\n  int diff [ 2 * n + 1 ];\n  memset ( diff, - 1, sizeof ( diff ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    preSum1 += arr1 [ i ];\n    preSum2 += arr2 [ i ];\n    int curr_diff = preSum1 - preSum2;\n    int diffIndex = n + curr_diff;\n    if ( curr_diff == 0 ) maxLen = i + 1;\n    else if ( diff [ diffIndex ] == - 1 ) diff [ diffIndex ] = i;\n    else {\n      int len = i - diff [ diffIndex ];\n      if ( len > maxLen ) maxLen = len;\n    }\n  }\n  return maxLen;\n}", "target_program": " def longestCommonSum ( arr1 , arr2 , n ) :\n    maxLen = 0\n    presum1 = presum2 = 0\n    diff = { }\n    for i in range ( n ) :\n        presum1 += arr1 [ i ]\n        presum2 += arr2 [ i ]\n        curr_diff = presum1 - presum2\n        if curr_diff == 0 :\n            maxLen = i + 1\n        elif curr_diff not in diff :\n            diff [ curr_diff ] = i\n        else :\n            length = i - diff [ curr_diff ]\n            maxLen = max ( maxLen , length )\n    return maxLen"}
{"source": "python", "target": "java", "source_program": " def printFibonacciNumbers ( n ) :\n    f1 = 0\n    f2 = 1\n    if ( n < 1 ) :\n        return\n    for x in range ( 0 , n ) :\n        print ( f2 , end = \" \" )\n        next = f1 + f2\n        f1 = f2\n        f2 = next", "target_program": " static void printFibonacciNumbers ( int n ) {\n  int f1 = 0 , f2 = 1 , i ;\n  if ( n < 1 ) return ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( f2 + \" \" ) ;\n    int next = f1 + f2 ;\n    f1 = f2 ;\n    f2 = next ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printFibonacciNumbers ( n ) :\n    f1 = 0\n    f2 = 1\n    if ( n < 1 ) :\n        return\n    for x in range ( 0 , n ) :\n        print ( f2 , end = \" \" )\n        next = f1 + f2\n        f1 = f2\n        f2 = next", "target_program": " void printFibonacciNumbers ( int n ) {\n  int f1 = 0, f2 = 1, i;\n  if ( n < 1 ) return;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    cout << f2 << \" \";\n    int next = f1 + f2;\n    f1 = f2;\n    f2 = next;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printFibonacciNumbers ( int n ) {\n  int f1 = 0 , f2 = 1 , i ;\n  if ( n < 1 ) return ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( f2 + \" \" ) ;\n    int next = f1 + f2 ;\n    f1 = f2 ;\n    f2 = next ;\n  }\n}", "target_program": " def printFibonacciNumbers ( n ) :\n    f1 = 0\n    f2 = 1\n    if ( n < 1 ) :\n        return\n    for x in range ( 0 , n ) :\n        print ( f2 , end = \" \" )\n        next = f1 + f2\n        f1 = f2\n        f2 = next"}
{"source": "java", "target": "cpp", "source_program": " static void printFibonacciNumbers ( int n ) {\n  int f1 = 0 , f2 = 1 , i ;\n  if ( n < 1 ) return ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( f2 + \" \" ) ;\n    int next = f1 + f2 ;\n    f1 = f2 ;\n    f2 = next ;\n  }\n}", "target_program": " void printFibonacciNumbers ( int n ) {\n  int f1 = 0, f2 = 1, i;\n  if ( n < 1 ) return;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    cout << f2 << \" \";\n    int next = f1 + f2;\n    f1 = f2;\n    f2 = next;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printFibonacciNumbers ( int n ) {\n  int f1 = 0, f2 = 1, i;\n  if ( n < 1 ) return;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    cout << f2 << \" \";\n    int next = f1 + f2;\n    f1 = f2;\n    f2 = next;\n  }\n}", "target_program": " static void printFibonacciNumbers ( int n ) {\n  int f1 = 0 , f2 = 1 , i ;\n  if ( n < 1 ) return ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    System . out . print ( f2 + \" \" ) ;\n    int next = f1 + f2 ;\n    f1 = f2 ;\n    f2 = next ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printFibonacciNumbers ( int n ) {\n  int f1 = 0, f2 = 1, i;\n  if ( n < 1 ) return;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    cout << f2 << \" \";\n    int next = f1 + f2;\n    f1 = f2;\n    f2 = next;\n  }\n}", "target_program": " def printFibonacciNumbers ( n ) :\n    f1 = 0\n    f2 = 1\n    if ( n < 1 ) :\n        return\n    for x in range ( 0 , n ) :\n        print ( f2 , end = \" \" )\n        next = f1 + f2\n        f1 = f2\n        f2 = next"}
{"source": "python", "target": "java", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    print ( \"Maximum contiguous sum is %d\" % ( max_so_far ) )\n    print ( \"Starting Index %d\" % ( start ) )\n    print ( \"Ending Index %d\" % ( end ) )", "target_program": " static void maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  System . out . println ( \"Maximum contiguous sum is \" + max_so_far ) ;\n  System . out . println ( \"Starting index \" + start ) ;\n  System . out . println ( \"Ending index \" + end ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    print ( \"Maximum contiguous sum is %d\" % ( max_so_far ) )\n    print ( \"Starting Index %d\" % ( start ) )\n    print ( \"Ending Index %d\" % ( end ) )", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  cout << \"Maximum contiguous sum is \" << max_so_far << endl;\n  cout << \"Starting index \" << start << endl << \"Ending index \" << end << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  System . out . println ( \"Maximum contiguous sum is \" + max_so_far ) ;\n  System . out . println ( \"Starting index \" + start ) ;\n  System . out . println ( \"Ending index \" + end ) ;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    print ( \"Maximum contiguous sum is %d\" % ( max_so_far ) )\n    print ( \"Starting Index %d\" % ( start ) )\n    print ( \"Ending Index %d\" % ( end ) )"}
{"source": "java", "target": "cpp", "source_program": " static void maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  System . out . println ( \"Maximum contiguous sum is \" + max_so_far ) ;\n  System . out . println ( \"Starting index \" + start ) ;\n  System . out . println ( \"Ending index \" + end ) ;\n}", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  cout << \"Maximum contiguous sum is \" << max_so_far << endl;\n  cout << \"Starting index \" << start << endl << \"Ending index \" << end << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  cout << \"Maximum contiguous sum is \" << max_so_far << endl;\n  cout << \"Starting index \" << start << endl << \"Ending index \" << end << endl;\n}", "target_program": " static void maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  System . out . println ( \"Maximum contiguous sum is \" + max_so_far ) ;\n  System . out . println ( \"Starting index \" + start ) ;\n  System . out . println ( \"Ending index \" + end ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  cout << \"Maximum contiguous sum is \" << max_so_far << endl;\n  cout << \"Starting index \" << start << endl << \"Ending index \" << end << endl;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    print ( \"Maximum contiguous sum is %d\" % ( max_so_far ) )\n    print ( \"Starting Index %d\" % ( start ) )\n    print ( \"Ending Index %d\" % ( end ) )"}
{"source": "python", "target": "java", "source_program": " def findIndex ( str ) :\n    l = len ( str )\n    open = [ None ] * ( l + 1 )\n    close = [ None ] * ( l + 1 )\n    index = - 1\n    open [ 0 ] = 0\n    close [ l ] = 0\n    if ( str [ 0 ] == '(' ) :\n        open [ 1 ] = 1\n    if ( str [ l - 1 ] == ')' ) :\n        close [ l - 1 ] = 1\n    for i in range ( 1 , l ) :\n        if ( str [ i ] == '(' ) :\n            open [ i + 1 ] = open [ i ] + 1\n        else :\n            open [ i + 1 ] = open [ i ]\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        if ( str [ i ] == ')' ) :\n            close [ i ] = close [ i + 1 ] + 1\n        else :\n            close [ i ] = close [ i + 1 ]\n    if ( open [ l ] == 0 ) :\n        return len\n    if ( close [ 0 ] == 0 ) :\n        return 0\n    for i in range ( l + 1 ) :\n        if ( open [ i ] == close [ i ] ) :\n            index = i\n    return index", "target_program": " static int findIndex ( String str ) {\n  int len = str . length ( ) ;\n  int open [ ] = new int [ len + 1 ] ;\n  int close [ ] = new int [ len + 1 ] ;\n  int index = - 1 ;\n  open [ 0 ] = 0 ;\n  close [ len ] = 0 ;\n  if ( str . charAt ( 0 ) == '(' ) open [ 1 ] = 1 ;\n  if ( str . charAt ( len - 1 ) == ')' ) close [ len - 1 ] = 1 ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    if ( str . charAt ( i ) == '(' ) open [ i + 1 ] = open [ i ] + 1 ;\n    else open [ i + 1 ] = open [ i ] ;\n  }\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( str . charAt ( i ) == ')' ) close [ i ] = close [ i + 1 ] + 1 ;\n    else close [ i ] = close [ i + 1 ] ;\n  }\n  if ( open [ len ] == 0 ) return len ;\n  if ( close [ 0 ] == 0 ) return 0 ;\n  for ( int i = 0 ;\n  i <= len ;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i ;\n  return index ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findIndex ( str ) :\n    l = len ( str )\n    open = [ None ] * ( l + 1 )\n    close = [ None ] * ( l + 1 )\n    index = - 1\n    open [ 0 ] = 0\n    close [ l ] = 0\n    if ( str [ 0 ] == '(' ) :\n        open [ 1 ] = 1\n    if ( str [ l - 1 ] == ')' ) :\n        close [ l - 1 ] = 1\n    for i in range ( 1 , l ) :\n        if ( str [ i ] == '(' ) :\n            open [ i + 1 ] = open [ i ] + 1\n        else :\n            open [ i + 1 ] = open [ i ]\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        if ( str [ i ] == ')' ) :\n            close [ i ] = close [ i + 1 ] + 1\n        else :\n            close [ i ] = close [ i + 1 ]\n    if ( open [ l ] == 0 ) :\n        return len\n    if ( close [ 0 ] == 0 ) :\n        return 0\n    for i in range ( l + 1 ) :\n        if ( open [ i ] == close [ i ] ) :\n            index = i\n    return index", "target_program": " int findIndex ( string str ) {\n  int len = str . length ( );\n  int open [ len + 1 ], close [ len + 1 ];\n  int index = - 1;\n  memset ( open, 0, sizeof ( open ) );\n  memset ( close, 0, sizeof ( close ) );\n  open [ 0 ] = 0;\n  close [ len ] = 0;\n  if ( str [ 0 ] == '(' ) open [ 1 ] = 1;\n  if ( str [ len - 1 ] == ')' ) close [ len - 1 ] = 1;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    if ( str [ i ] == '(' ) open [ i + 1 ] = open [ i ] + 1;\n    else open [ i + 1 ] = open [ i ];\n  }\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    if ( str [ i ] == ')' ) close [ i ] = close [ i + 1 ] + 1;\n    else close [ i ] = close [ i + 1 ];\n  }\n  if ( open [ len ] == 0 ) return len;\n  if ( close [ 0 ] == 0 ) return 0;\n  for ( int i = 0;\n  i <= len;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i;\n  return index;\n}"}
{"source": "java", "target": "python", "source_program": " static int findIndex ( String str ) {\n  int len = str . length ( ) ;\n  int open [ ] = new int [ len + 1 ] ;\n  int close [ ] = new int [ len + 1 ] ;\n  int index = - 1 ;\n  open [ 0 ] = 0 ;\n  close [ len ] = 0 ;\n  if ( str . charAt ( 0 ) == '(' ) open [ 1 ] = 1 ;\n  if ( str . charAt ( len - 1 ) == ')' ) close [ len - 1 ] = 1 ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    if ( str . charAt ( i ) == '(' ) open [ i + 1 ] = open [ i ] + 1 ;\n    else open [ i + 1 ] = open [ i ] ;\n  }\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( str . charAt ( i ) == ')' ) close [ i ] = close [ i + 1 ] + 1 ;\n    else close [ i ] = close [ i + 1 ] ;\n  }\n  if ( open [ len ] == 0 ) return len ;\n  if ( close [ 0 ] == 0 ) return 0 ;\n  for ( int i = 0 ;\n  i <= len ;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i ;\n  return index ;\n}", "target_program": " def findIndex ( str ) :\n    l = len ( str )\n    open = [ None ] * ( l + 1 )\n    close = [ None ] * ( l + 1 )\n    index = - 1\n    open [ 0 ] = 0\n    close [ l ] = 0\n    if ( str [ 0 ] == '(' ) :\n        open [ 1 ] = 1\n    if ( str [ l - 1 ] == ')' ) :\n        close [ l - 1 ] = 1\n    for i in range ( 1 , l ) :\n        if ( str [ i ] == '(' ) :\n            open [ i + 1 ] = open [ i ] + 1\n        else :\n            open [ i + 1 ] = open [ i ]\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        if ( str [ i ] == ')' ) :\n            close [ i ] = close [ i + 1 ] + 1\n        else :\n            close [ i ] = close [ i + 1 ]\n    if ( open [ l ] == 0 ) :\n        return len\n    if ( close [ 0 ] == 0 ) :\n        return 0\n    for i in range ( l + 1 ) :\n        if ( open [ i ] == close [ i ] ) :\n            index = i\n    return index"}
{"source": "java", "target": "cpp", "source_program": " static int findIndex ( String str ) {\n  int len = str . length ( ) ;\n  int open [ ] = new int [ len + 1 ] ;\n  int close [ ] = new int [ len + 1 ] ;\n  int index = - 1 ;\n  open [ 0 ] = 0 ;\n  close [ len ] = 0 ;\n  if ( str . charAt ( 0 ) == '(' ) open [ 1 ] = 1 ;\n  if ( str . charAt ( len - 1 ) == ')' ) close [ len - 1 ] = 1 ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    if ( str . charAt ( i ) == '(' ) open [ i + 1 ] = open [ i ] + 1 ;\n    else open [ i + 1 ] = open [ i ] ;\n  }\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( str . charAt ( i ) == ')' ) close [ i ] = close [ i + 1 ] + 1 ;\n    else close [ i ] = close [ i + 1 ] ;\n  }\n  if ( open [ len ] == 0 ) return len ;\n  if ( close [ 0 ] == 0 ) return 0 ;\n  for ( int i = 0 ;\n  i <= len ;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i ;\n  return index ;\n}", "target_program": " int findIndex ( string str ) {\n  int len = str . length ( );\n  int open [ len + 1 ], close [ len + 1 ];\n  int index = - 1;\n  memset ( open, 0, sizeof ( open ) );\n  memset ( close, 0, sizeof ( close ) );\n  open [ 0 ] = 0;\n  close [ len ] = 0;\n  if ( str [ 0 ] == '(' ) open [ 1 ] = 1;\n  if ( str [ len - 1 ] == ')' ) close [ len - 1 ] = 1;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    if ( str [ i ] == '(' ) open [ i + 1 ] = open [ i ] + 1;\n    else open [ i + 1 ] = open [ i ];\n  }\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    if ( str [ i ] == ')' ) close [ i ] = close [ i + 1 ] + 1;\n    else close [ i ] = close [ i + 1 ];\n  }\n  if ( open [ len ] == 0 ) return len;\n  if ( close [ 0 ] == 0 ) return 0;\n  for ( int i = 0;\n  i <= len;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i;\n  return index;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findIndex ( string str ) {\n  int len = str . length ( );\n  int open [ len + 1 ], close [ len + 1 ];\n  int index = - 1;\n  memset ( open, 0, sizeof ( open ) );\n  memset ( close, 0, sizeof ( close ) );\n  open [ 0 ] = 0;\n  close [ len ] = 0;\n  if ( str [ 0 ] == '(' ) open [ 1 ] = 1;\n  if ( str [ len - 1 ] == ')' ) close [ len - 1 ] = 1;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    if ( str [ i ] == '(' ) open [ i + 1 ] = open [ i ] + 1;\n    else open [ i + 1 ] = open [ i ];\n  }\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    if ( str [ i ] == ')' ) close [ i ] = close [ i + 1 ] + 1;\n    else close [ i ] = close [ i + 1 ];\n  }\n  if ( open [ len ] == 0 ) return len;\n  if ( close [ 0 ] == 0 ) return 0;\n  for ( int i = 0;\n  i <= len;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i;\n  return index;\n}", "target_program": " static int findIndex ( String str ) {\n  int len = str . length ( ) ;\n  int open [ ] = new int [ len + 1 ] ;\n  int close [ ] = new int [ len + 1 ] ;\n  int index = - 1 ;\n  open [ 0 ] = 0 ;\n  close [ len ] = 0 ;\n  if ( str . charAt ( 0 ) == '(' ) open [ 1 ] = 1 ;\n  if ( str . charAt ( len - 1 ) == ')' ) close [ len - 1 ] = 1 ;\n  for ( int i = 1 ;\n  i < len ;\n  i ++ ) {\n    if ( str . charAt ( i ) == '(' ) open [ i + 1 ] = open [ i ] + 1 ;\n    else open [ i + 1 ] = open [ i ] ;\n  }\n  for ( int i = len - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( str . charAt ( i ) == ')' ) close [ i ] = close [ i + 1 ] + 1 ;\n    else close [ i ] = close [ i + 1 ] ;\n  }\n  if ( open [ len ] == 0 ) return len ;\n  if ( close [ 0 ] == 0 ) return 0 ;\n  for ( int i = 0 ;\n  i <= len ;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i ;\n  return index ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findIndex ( string str ) {\n  int len = str . length ( );\n  int open [ len + 1 ], close [ len + 1 ];\n  int index = - 1;\n  memset ( open, 0, sizeof ( open ) );\n  memset ( close, 0, sizeof ( close ) );\n  open [ 0 ] = 0;\n  close [ len ] = 0;\n  if ( str [ 0 ] == '(' ) open [ 1 ] = 1;\n  if ( str [ len - 1 ] == ')' ) close [ len - 1 ] = 1;\n  for ( int i = 1;\n  i < len;\n  i ++ ) {\n    if ( str [ i ] == '(' ) open [ i + 1 ] = open [ i ] + 1;\n    else open [ i + 1 ] = open [ i ];\n  }\n  for ( int i = len - 2;\n  i >= 0;\n  i -- ) {\n    if ( str [ i ] == ')' ) close [ i ] = close [ i + 1 ] + 1;\n    else close [ i ] = close [ i + 1 ];\n  }\n  if ( open [ len ] == 0 ) return len;\n  if ( close [ 0 ] == 0 ) return 0;\n  for ( int i = 0;\n  i <= len;\n  i ++ ) if ( open [ i ] == close [ i ] ) index = i;\n  return index;\n}", "target_program": " def findIndex ( str ) :\n    l = len ( str )\n    open = [ None ] * ( l + 1 )\n    close = [ None ] * ( l + 1 )\n    index = - 1\n    open [ 0 ] = 0\n    close [ l ] = 0\n    if ( str [ 0 ] == '(' ) :\n        open [ 1 ] = 1\n    if ( str [ l - 1 ] == ')' ) :\n        close [ l - 1 ] = 1\n    for i in range ( 1 , l ) :\n        if ( str [ i ] == '(' ) :\n            open [ i + 1 ] = open [ i ] + 1\n        else :\n            open [ i + 1 ] = open [ i ]\n    for i in range ( l - 2 , - 1 , - 1 ) :\n        if ( str [ i ] == ')' ) :\n            close [ i ] = close [ i + 1 ] + 1\n        else :\n            close [ i ] = close [ i + 1 ]\n    if ( open [ l ] == 0 ) :\n        return len\n    if ( close [ 0 ] == 0 ) :\n        return 0\n    for i in range ( l + 1 ) :\n        if ( open [ i ] == close [ i ] ) :\n            index = i\n    return index"}
{"source": "python", "target": "java", "source_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum", "target_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum", "target_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}"}
{"source": "java", "target": "python", "source_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}", "target_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum"}
{"source": "java", "target": "cpp", "source_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}", "target_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}", "target_program": " static int lis ( int arr [ ] , int n ) {\n  max_ref = 1 ;\n  _lis ( arr , n ) ;\n  return max_ref ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lis ( int arr [ ], int n ) {\n  int max = 1;\n  _lis ( arr, n, & max );\n  return max;\n}", "target_program": " def lis ( arr ) :\n    global maximum\n    n = len ( arr )\n    maximum = 1\n    _lis ( arr , n )\n    return maximum"}
{"source": "python", "target": "java", "source_program": " def findRepeatFirstN2 ( s ) :\n    p = - 1\n    for i in range ( len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            if ( s [ i ] == s [ j ] ) :\n                p = i\n                break\n        if ( p != - 1 ) :\n            break\n    return p", "target_program": " static int findRepeatFirstN2 ( String s ) {\n  int p = - 1 , i , j ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      if ( s . charAt ( i ) == s . charAt ( j ) ) {\n        p = i ;\n        break ;\n      }\n    }\n    if ( p != - 1 ) break ;\n  }\n  return p ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRepeatFirstN2 ( s ) :\n    p = - 1\n    for i in range ( len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            if ( s [ i ] == s [ j ] ) :\n                p = i\n                break\n        if ( p != - 1 ) :\n            break\n    return p", "target_program": " int findRepeatFirstN2 ( char * s ) {\n  int p = - 1, i, j;\n  for ( i = 0;\n  i < strlen ( s );\n  i ++ ) {\n    for ( j = i + 1;\n    j < strlen ( s );\n    j ++ ) {\n      if ( s [ i ] == s [ j ] ) {\n        p = i;\n        break;\n      }\n    }\n    if ( p != - 1 ) break;\n  }\n  return p;\n}"}
{"source": "java", "target": "python", "source_program": " static int findRepeatFirstN2 ( String s ) {\n  int p = - 1 , i , j ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      if ( s . charAt ( i ) == s . charAt ( j ) ) {\n        p = i ;\n        break ;\n      }\n    }\n    if ( p != - 1 ) break ;\n  }\n  return p ;\n}", "target_program": " def findRepeatFirstN2 ( s ) :\n    p = - 1\n    for i in range ( len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            if ( s [ i ] == s [ j ] ) :\n                p = i\n                break\n        if ( p != - 1 ) :\n            break\n    return p"}
{"source": "java", "target": "cpp", "source_program": " static int findRepeatFirstN2 ( String s ) {\n  int p = - 1 , i , j ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      if ( s . charAt ( i ) == s . charAt ( j ) ) {\n        p = i ;\n        break ;\n      }\n    }\n    if ( p != - 1 ) break ;\n  }\n  return p ;\n}", "target_program": " int findRepeatFirstN2 ( char * s ) {\n  int p = - 1, i, j;\n  for ( i = 0;\n  i < strlen ( s );\n  i ++ ) {\n    for ( j = i + 1;\n    j < strlen ( s );\n    j ++ ) {\n      if ( s [ i ] == s [ j ] ) {\n        p = i;\n        break;\n      }\n    }\n    if ( p != - 1 ) break;\n  }\n  return p;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findRepeatFirstN2 ( char * s ) {\n  int p = - 1, i, j;\n  for ( i = 0;\n  i < strlen ( s );\n  i ++ ) {\n    for ( j = i + 1;\n    j < strlen ( s );\n    j ++ ) {\n      if ( s [ i ] == s [ j ] ) {\n        p = i;\n        break;\n      }\n    }\n    if ( p != - 1 ) break;\n  }\n  return p;\n}", "target_program": " static int findRepeatFirstN2 ( String s ) {\n  int p = - 1 , i , j ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    for ( j = i + 1 ;\n    j < s . length ( ) ;\n    j ++ ) {\n      if ( s . charAt ( i ) == s . charAt ( j ) ) {\n        p = i ;\n        break ;\n      }\n    }\n    if ( p != - 1 ) break ;\n  }\n  return p ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findRepeatFirstN2 ( char * s ) {\n  int p = - 1, i, j;\n  for ( i = 0;\n  i < strlen ( s );\n  i ++ ) {\n    for ( j = i + 1;\n    j < strlen ( s );\n    j ++ ) {\n      if ( s [ i ] == s [ j ] ) {\n        p = i;\n        break;\n      }\n    }\n    if ( p != - 1 ) break;\n  }\n  return p;\n}", "target_program": " def findRepeatFirstN2 ( s ) :\n    p = - 1\n    for i in range ( len ( s ) ) :\n        for j in range ( i + 1 , len ( s ) ) :\n            if ( s [ i ] == s [ j ] ) :\n                p = i\n                break\n        if ( p != - 1 ) :\n            break\n    return p"}
{"source": "python", "target": "java", "source_program": " def ksmallest ( arr , n , k ) :\n    b = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        b [ arr [ i ] ] = 1 ;\n    for j in range ( 1 , MAX ) :\n        if ( b [ j ] != 1 ) :\n            k -= 1 ;\n        if ( k is not 1 ) :\n            return j ;", "target_program": " static int ksmallest ( int arr [ ] , int n , int k ) {\n  int b [ ] = new int [ MAX ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    b [ arr [ i ] ] = 1 ;\n  }\n  for ( int j = 1 ;\n  j < MAX ;\n  j ++ ) {\n    if ( b [ j ] != 1 ) {\n      k -- ;\n    }\n    if ( k != 1 ) {\n      return j ;\n    }\n  }\n  return Integer . MAX_VALUE ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def ksmallest ( arr , n , k ) :\n    b = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        b [ arr [ i ] ] = 1 ;\n    for j in range ( 1 , MAX ) :\n        if ( b [ j ] != 1 ) :\n            k -= 1 ;\n        if ( k is not 1 ) :\n            return j ;", "target_program": " int ksmallest ( int arr [ ], int n, int k ) {\n  int b [ MAX ];\n  memset ( b, 0, sizeof b );\n  for ( int i = 0;\n  i < n;\n  i ++ ) b [ arr [ i ] ] = 1;\n  for ( int j = 1;\n  j < MAX;\n  j ++ ) {\n    if ( b [ j ] != 1 ) k --;\n    if ( ! k ) return j;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static int ksmallest ( int arr [ ] , int n , int k ) {\n  int b [ ] = new int [ MAX ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    b [ arr [ i ] ] = 1 ;\n  }\n  for ( int j = 1 ;\n  j < MAX ;\n  j ++ ) {\n    if ( b [ j ] != 1 ) {\n      k -- ;\n    }\n    if ( k != 1 ) {\n      return j ;\n    }\n  }\n  return Integer . MAX_VALUE ;\n}", "target_program": " def ksmallest ( arr , n , k ) :\n    b = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        b [ arr [ i ] ] = 1 ;\n    for j in range ( 1 , MAX ) :\n        if ( b [ j ] != 1 ) :\n            k -= 1 ;\n        if ( k is not 1 ) :\n            return j ;"}
{"source": "java", "target": "cpp", "source_program": " static int ksmallest ( int arr [ ] , int n , int k ) {\n  int b [ ] = new int [ MAX ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    b [ arr [ i ] ] = 1 ;\n  }\n  for ( int j = 1 ;\n  j < MAX ;\n  j ++ ) {\n    if ( b [ j ] != 1 ) {\n      k -- ;\n    }\n    if ( k != 1 ) {\n      return j ;\n    }\n  }\n  return Integer . MAX_VALUE ;\n}", "target_program": " int ksmallest ( int arr [ ], int n, int k ) {\n  int b [ MAX ];\n  memset ( b, 0, sizeof b );\n  for ( int i = 0;\n  i < n;\n  i ++ ) b [ arr [ i ] ] = 1;\n  for ( int j = 1;\n  j < MAX;\n  j ++ ) {\n    if ( b [ j ] != 1 ) k --;\n    if ( ! k ) return j;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " int ksmallest ( int arr [ ], int n, int k ) {\n  int b [ MAX ];\n  memset ( b, 0, sizeof b );\n  for ( int i = 0;\n  i < n;\n  i ++ ) b [ arr [ i ] ] = 1;\n  for ( int j = 1;\n  j < MAX;\n  j ++ ) {\n    if ( b [ j ] != 1 ) k --;\n    if ( ! k ) return j;\n  }\n}", "target_program": " static int ksmallest ( int arr [ ] , int n , int k ) {\n  int b [ ] = new int [ MAX ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    b [ arr [ i ] ] = 1 ;\n  }\n  for ( int j = 1 ;\n  j < MAX ;\n  j ++ ) {\n    if ( b [ j ] != 1 ) {\n      k -- ;\n    }\n    if ( k != 1 ) {\n      return j ;\n    }\n  }\n  return Integer . MAX_VALUE ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int ksmallest ( int arr [ ], int n, int k ) {\n  int b [ MAX ];\n  memset ( b, 0, sizeof b );\n  for ( int i = 0;\n  i < n;\n  i ++ ) b [ arr [ i ] ] = 1;\n  for ( int j = 1;\n  j < MAX;\n  j ++ ) {\n    if ( b [ j ] != 1 ) k --;\n    if ( ! k ) return j;\n  }\n}", "target_program": " def ksmallest ( arr , n , k ) :\n    b = [ 0 ] * MAX ;\n    for i in range ( n ) :\n        b [ arr [ i ] ] = 1 ;\n    for j in range ( 1 , MAX ) :\n        if ( b [ j ] != 1 ) :\n            k -= 1 ;\n        if ( k is not 1 ) :\n            return j ;"}
{"source": "python", "target": "java", "source_program": " def pairWiseConsecutive ( s ) :\n    aux = [ ]\n    while ( len ( s ) != 0 ) :\n        aux.append ( s [ - 1 ] )\n        s.pop ( )\n    result = True\n    while ( len ( aux ) > 1 ) :\n        x = aux [ - 1 ]\n        aux.pop ( )\n        y = aux [ - 1 ]\n        aux.pop ( )\n        if ( abs ( x - y ) != 1 ) :\n            result = False\n        s.append ( x )\n        s.append ( y )\n    if ( len ( aux ) == 1 ) :\n        s.append ( aux [ - 1 ] )\n    return result", "target_program": " static boolean pairWiseConsecutive ( Stack < Integer > s ) {\n  Stack < Integer > aux = new Stack < Integer > ( ) ;\n  while ( ! s . isEmpty ( ) ) {\n    aux . push ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  boolean result = true ;\n  while ( aux . size ( ) > 1 ) {\n    int x = aux . peek ( ) ;\n    aux . pop ( ) ;\n    int y = aux . peek ( ) ;\n    aux . pop ( ) ;\n    if ( Math . abs ( x - y ) != 1 ) result = false ;\n    s . push ( x ) ;\n    s . push ( y ) ;\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . peek ( ) ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pairWiseConsecutive ( s ) :\n    aux = [ ]\n    while ( len ( s ) != 0 ) :\n        aux.append ( s [ - 1 ] )\n        s.pop ( )\n    result = True\n    while ( len ( aux ) > 1 ) :\n        x = aux [ - 1 ]\n        aux.pop ( )\n        y = aux [ - 1 ]\n        aux.pop ( )\n        if ( abs ( x - y ) != 1 ) :\n            result = False\n        s.append ( x )\n        s.append ( y )\n    if ( len ( aux ) == 1 ) :\n        s.append ( aux [ - 1 ] )\n    return result", "target_program": " bool pairWiseConsecutive ( stack < int > s ) {\n  stack < int > aux;\n  while ( ! s . empty ( ) ) {\n    aux . push ( s . top ( ) );\n    s . pop ( );\n  }\n  bool result = true;\n  while ( aux . empty ( ) > 1 ) {\n    int x = aux . top ( );\n    aux . pop ( );\n    int y = aux . top ( );\n    aux . pop ( );\n    if ( abs ( x - y ) != 1 ) result = false;\n    s . push ( x );\n    s . push ( y );\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . top ( ) );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean pairWiseConsecutive ( Stack < Integer > s ) {\n  Stack < Integer > aux = new Stack < Integer > ( ) ;\n  while ( ! s . isEmpty ( ) ) {\n    aux . push ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  boolean result = true ;\n  while ( aux . size ( ) > 1 ) {\n    int x = aux . peek ( ) ;\n    aux . pop ( ) ;\n    int y = aux . peek ( ) ;\n    aux . pop ( ) ;\n    if ( Math . abs ( x - y ) != 1 ) result = false ;\n    s . push ( x ) ;\n    s . push ( y ) ;\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . peek ( ) ) ;\n  return result ;\n}", "target_program": " def pairWiseConsecutive ( s ) :\n    aux = [ ]\n    while ( len ( s ) != 0 ) :\n        aux.append ( s [ - 1 ] )\n        s.pop ( )\n    result = True\n    while ( len ( aux ) > 1 ) :\n        x = aux [ - 1 ]\n        aux.pop ( )\n        y = aux [ - 1 ]\n        aux.pop ( )\n        if ( abs ( x - y ) != 1 ) :\n            result = False\n        s.append ( x )\n        s.append ( y )\n    if ( len ( aux ) == 1 ) :\n        s.append ( aux [ - 1 ] )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static boolean pairWiseConsecutive ( Stack < Integer > s ) {\n  Stack < Integer > aux = new Stack < Integer > ( ) ;\n  while ( ! s . isEmpty ( ) ) {\n    aux . push ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  boolean result = true ;\n  while ( aux . size ( ) > 1 ) {\n    int x = aux . peek ( ) ;\n    aux . pop ( ) ;\n    int y = aux . peek ( ) ;\n    aux . pop ( ) ;\n    if ( Math . abs ( x - y ) != 1 ) result = false ;\n    s . push ( x ) ;\n    s . push ( y ) ;\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . peek ( ) ) ;\n  return result ;\n}", "target_program": " bool pairWiseConsecutive ( stack < int > s ) {\n  stack < int > aux;\n  while ( ! s . empty ( ) ) {\n    aux . push ( s . top ( ) );\n    s . pop ( );\n  }\n  bool result = true;\n  while ( aux . empty ( ) > 1 ) {\n    int x = aux . top ( );\n    aux . pop ( );\n    int y = aux . top ( );\n    aux . pop ( );\n    if ( abs ( x - y ) != 1 ) result = false;\n    s . push ( x );\n    s . push ( y );\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . top ( ) );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool pairWiseConsecutive ( stack < int > s ) {\n  stack < int > aux;\n  while ( ! s . empty ( ) ) {\n    aux . push ( s . top ( ) );\n    s . pop ( );\n  }\n  bool result = true;\n  while ( aux . empty ( ) > 1 ) {\n    int x = aux . top ( );\n    aux . pop ( );\n    int y = aux . top ( );\n    aux . pop ( );\n    if ( abs ( x - y ) != 1 ) result = false;\n    s . push ( x );\n    s . push ( y );\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . top ( ) );\n  return result;\n}", "target_program": " static boolean pairWiseConsecutive ( Stack < Integer > s ) {\n  Stack < Integer > aux = new Stack < Integer > ( ) ;\n  while ( ! s . isEmpty ( ) ) {\n    aux . push ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  boolean result = true ;\n  while ( aux . size ( ) > 1 ) {\n    int x = aux . peek ( ) ;\n    aux . pop ( ) ;\n    int y = aux . peek ( ) ;\n    aux . pop ( ) ;\n    if ( Math . abs ( x - y ) != 1 ) result = false ;\n    s . push ( x ) ;\n    s . push ( y ) ;\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . peek ( ) ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool pairWiseConsecutive ( stack < int > s ) {\n  stack < int > aux;\n  while ( ! s . empty ( ) ) {\n    aux . push ( s . top ( ) );\n    s . pop ( );\n  }\n  bool result = true;\n  while ( aux . empty ( ) > 1 ) {\n    int x = aux . top ( );\n    aux . pop ( );\n    int y = aux . top ( );\n    aux . pop ( );\n    if ( abs ( x - y ) != 1 ) result = false;\n    s . push ( x );\n    s . push ( y );\n  }\n  if ( aux . size ( ) == 1 ) s . push ( aux . top ( ) );\n  return result;\n}", "target_program": " def pairWiseConsecutive ( s ) :\n    aux = [ ]\n    while ( len ( s ) != 0 ) :\n        aux.append ( s [ - 1 ] )\n        s.pop ( )\n    result = True\n    while ( len ( aux ) > 1 ) :\n        x = aux [ - 1 ]\n        aux.pop ( )\n        y = aux [ - 1 ]\n        aux.pop ( )\n        if ( abs ( x - y ) != 1 ) :\n            result = False\n        s.append ( x )\n        s.append ( y )\n    if ( len ( aux ) == 1 ) :\n        s.append ( aux [ - 1 ] )\n    return result"}
{"source": "python", "target": "java", "source_program": " def binarySearch ( arr , l , r , x ) :\n    while l <= r :\n        mid = l + ( r - l ) // 2 ;\n        if arr [ mid ] == x :\n            return mid\n        elif arr [ mid ] < x :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return - 1", "target_program": " int binarySearch ( int arr [ ] , int x ) {\n  int l = 0 , r = arr . length - 1 ;\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2 ;\n    if ( arr [ m ] == x ) return m ;\n    if ( arr [ m ] < x ) l = m + 1 ;\n    else r = m - 1 ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def binarySearch ( arr , l , r , x ) :\n    while l <= r :\n        mid = l + ( r - l ) // 2 ;\n        if arr [ mid ] == x :\n            return mid\n        elif arr [ mid ] < x :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return - 1", "target_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2;\n    if ( arr [ m ] == x ) return m;\n    if ( arr [ m ] < x ) l = m + 1;\n    else r = m - 1;\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " int binarySearch ( int arr [ ] , int x ) {\n  int l = 0 , r = arr . length - 1 ;\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2 ;\n    if ( arr [ m ] == x ) return m ;\n    if ( arr [ m ] < x ) l = m + 1 ;\n    else r = m - 1 ;\n  }\n  return - 1 ;\n}", "target_program": " def binarySearch ( arr , l , r , x ) :\n    while l <= r :\n        mid = l + ( r - l ) // 2 ;\n        if arr [ mid ] == x :\n            return mid\n        elif arr [ mid ] < x :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " int binarySearch ( int arr [ ] , int x ) {\n  int l = 0 , r = arr . length - 1 ;\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2 ;\n    if ( arr [ m ] == x ) return m ;\n    if ( arr [ m ] < x ) l = m + 1 ;\n    else r = m - 1 ;\n  }\n  return - 1 ;\n}", "target_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2;\n    if ( arr [ m ] == x ) return m;\n    if ( arr [ m ] < x ) l = m + 1;\n    else r = m - 1;\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2;\n    if ( arr [ m ] == x ) return m;\n    if ( arr [ m ] < x ) l = m + 1;\n    else r = m - 1;\n  }\n  return - 1;\n}", "target_program": " int binarySearch ( int arr [ ] , int x ) {\n  int l = 0 , r = arr . length - 1 ;\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2 ;\n    if ( arr [ m ] == x ) return m ;\n    if ( arr [ m ] < x ) l = m + 1 ;\n    else r = m - 1 ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int binarySearch ( int arr [ ], int l, int r, int x ) {\n  while ( l <= r ) {\n    int m = l + ( r - l ) / 2;\n    if ( arr [ m ] == x ) return m;\n    if ( arr [ m ] < x ) l = m + 1;\n    else r = m - 1;\n  }\n  return - 1;\n}", "target_program": " def binarySearch ( arr , l , r , x ) :\n    while l <= r :\n        mid = l + ( r - l ) // 2 ;\n        if arr [ mid ] == x :\n            return mid\n        elif arr [ mid ] < x :\n            l = mid + 1\n        else :\n            r = mid - 1\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    for i in range ( 1 , m + 1 ) :\n        mat [ i ] [ 0 ] = 0\n    for j in range ( n + 1 ) :\n        mat [ 0 ] [ j ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if T [ i - 1 ] != S [ j - 1 ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n    return mat [ m ] [ n ]", "target_program": " static int findSubsequenceCount ( String S , String T ) {\n  int m = T . length ( ) ;\n  int n = S . length ( ) ;\n  if ( m > n ) return 0 ;\n  int mat [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) mat [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) mat [ 0 ] [ j ] = 1 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ;\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ;\n    }\n  }\n  return mat [ m ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    for i in range ( 1 , m + 1 ) :\n        mat [ i ] [ 0 ] = 0\n    for j in range ( n + 1 ) :\n        mat [ 0 ] [ j ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if T [ i - 1 ] != S [ j - 1 ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n    return mat [ m ] [ n ]", "target_program": " int findSubsequenceCount ( string S, string T ) {\n  int m = T . length ( ), n = S . length ( );\n  if ( m > n ) return 0;\n  int mat [ m + 1 ] [ n + 1 ];\n  for ( int i = 1;\n  i <= m;\n  i ++ ) mat [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) mat [ 0 ] [ j ] = 1;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ];\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ];\n    }\n  }\n  return mat [ m ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int findSubsequenceCount ( String S , String T ) {\n  int m = T . length ( ) ;\n  int n = S . length ( ) ;\n  if ( m > n ) return 0 ;\n  int mat [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) mat [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) mat [ 0 ] [ j ] = 1 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ;\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ;\n    }\n  }\n  return mat [ m ] [ n ] ;\n}", "target_program": " def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    for i in range ( 1 , m + 1 ) :\n        mat [ i ] [ 0 ] = 0\n    for j in range ( n + 1 ) :\n        mat [ 0 ] [ j ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if T [ i - 1 ] != S [ j - 1 ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n    return mat [ m ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int findSubsequenceCount ( String S , String T ) {\n  int m = T . length ( ) ;\n  int n = S . length ( ) ;\n  if ( m > n ) return 0 ;\n  int mat [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) mat [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) mat [ 0 ] [ j ] = 1 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ;\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ;\n    }\n  }\n  return mat [ m ] [ n ] ;\n}", "target_program": " int findSubsequenceCount ( string S, string T ) {\n  int m = T . length ( ), n = S . length ( );\n  if ( m > n ) return 0;\n  int mat [ m + 1 ] [ n + 1 ];\n  for ( int i = 1;\n  i <= m;\n  i ++ ) mat [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) mat [ 0 ] [ j ] = 1;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ];\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ];\n    }\n  }\n  return mat [ m ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSubsequenceCount ( string S, string T ) {\n  int m = T . length ( ), n = S . length ( );\n  if ( m > n ) return 0;\n  int mat [ m + 1 ] [ n + 1 ];\n  for ( int i = 1;\n  i <= m;\n  i ++ ) mat [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) mat [ 0 ] [ j ] = 1;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ];\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ];\n    }\n  }\n  return mat [ m ] [ n ];\n}", "target_program": " static int findSubsequenceCount ( String S , String T ) {\n  int m = T . length ( ) ;\n  int n = S . length ( ) ;\n  if ( m > n ) return 0 ;\n  int mat [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) mat [ i ] [ 0 ] = 0 ;\n  for ( int j = 0 ;\n  j <= n ;\n  j ++ ) mat [ 0 ] [ j ] = 1 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= n ;\n    j ++ ) {\n      if ( T . charAt ( i - 1 ) != S . charAt ( j - 1 ) ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ] ;\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] ;\n    }\n  }\n  return mat [ m ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSubsequenceCount ( string S, string T ) {\n  int m = T . length ( ), n = S . length ( );\n  if ( m > n ) return 0;\n  int mat [ m + 1 ] [ n + 1 ];\n  for ( int i = 1;\n  i <= m;\n  i ++ ) mat [ i ] [ 0 ] = 0;\n  for ( int j = 0;\n  j <= n;\n  j ++ ) mat [ 0 ] [ j ] = 1;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 1;\n    j <= n;\n    j ++ ) {\n      if ( T [ i - 1 ] != S [ j - 1 ] ) mat [ i ] [ j ] = mat [ i ] [ j - 1 ];\n      else mat [ i ] [ j ] = mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ];\n    }\n  }\n  return mat [ m ] [ n ];\n}", "target_program": " def findSubsequenceCount ( S , T ) :\n    m = len ( T )\n    n = len ( S )\n    if m > n :\n        return 0\n    mat = [ [ 0 for _ in range ( n + 1 ) ] for __ in range ( m + 1 ) ]\n    for i in range ( 1 , m + 1 ) :\n        mat [ i ] [ 0 ] = 0\n    for j in range ( n + 1 ) :\n        mat [ 0 ] [ j ] = 1\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if T [ i - 1 ] != S [ j - 1 ] :\n                mat [ i ] [ j ] = mat [ i ] [ j - 1 ]\n            else :\n                mat [ i ] [ j ] = ( mat [ i ] [ j - 1 ] + mat [ i - 1 ] [ j - 1 ] )\n    return mat [ m ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def swap ( xp , yp ) :\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]", "target_program": " static void swap ( int [ ] xp , int [ ] yp ) {\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def swap ( xp , yp ) :\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]", "target_program": " void swap ( int * xp, int * yp ) {\n  * xp = * xp ^ * yp;\n  * yp = * xp ^ * yp;\n  * xp = * xp ^ * yp;\n}"}
{"source": "java", "target": "python", "source_program": " static void swap ( int [ ] xp , int [ ] yp ) {\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n}", "target_program": " def swap ( xp , yp ) :\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static void swap ( int [ ] xp , int [ ] yp ) {\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n}", "target_program": " void swap ( int * xp, int * yp ) {\n  * xp = * xp ^ * yp;\n  * yp = * xp ^ * yp;\n  * xp = * xp ^ * yp;\n}"}
{"source": "cpp", "target": "java", "source_program": " void swap ( int * xp, int * yp ) {\n  * xp = * xp ^ * yp;\n  * yp = * xp ^ * yp;\n  * xp = * xp ^ * yp;\n}", "target_program": " static void swap ( int [ ] xp , int [ ] yp ) {\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n  xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void swap ( int * xp, int * yp ) {\n  * xp = * xp ^ * yp;\n  * yp = * xp ^ * yp;\n  * xp = * xp ^ * yp;\n}", "target_program": " def swap ( xp , yp ) :\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    yp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]\n    xp [ 0 ] = xp [ 0 ] ^ yp [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def policeThief ( arr , n , k ) :\n    i = 0\n    l = 0\n    r = 0\n    res = 0\n    thi = [ ]\n    pol = [ ]\n    while i < n :\n        if arr [ i ] == 'P' :\n            pol.append ( i )\n        elif arr [ i ] == 'T' :\n            thi.append ( i )\n        i += 1\n    while l < len ( thi ) and r < len ( pol ) :\n        if ( abs ( thi [ l ] - pol [ r ] ) <= k ) :\n            res += 1\n            l += 1\n            r += 1\n        elif thi [ l ] < pol [ r ] :\n            l += 1\n        else :\n            r += 1\n    return res", "target_program": " static int policeThief ( char arr [ ] , int n , int k ) {\n  int res = 0 ;\n  ArrayList < Integer > thi = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > pol = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . add ( i ) ;\n    else if ( arr [ i ] == 'T' ) thi . add ( i ) ;\n  }\n  int l = 0 , r = 0 ;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( Math . abs ( thi . get ( l ) - pol . get ( r ) ) <= k ) {\n      res ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( thi . get ( l ) < pol . get ( r ) ) l ++ ;\n    else r ++ ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def policeThief ( arr , n , k ) :\n    i = 0\n    l = 0\n    r = 0\n    res = 0\n    thi = [ ]\n    pol = [ ]\n    while i < n :\n        if arr [ i ] == 'P' :\n            pol.append ( i )\n        elif arr [ i ] == 'T' :\n            thi.append ( i )\n        i += 1\n    while l < len ( thi ) and r < len ( pol ) :\n        if ( abs ( thi [ l ] - pol [ r ] ) <= k ) :\n            res += 1\n            l += 1\n            r += 1\n        elif thi [ l ] < pol [ r ] :\n            l += 1\n        else :\n            r += 1\n    return res", "target_program": " int policeThief ( char arr [ ], int n, int k ) {\n  int res = 0;\n  vector < int > thi;\n  vector < int > pol;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . push_back ( i );\n    else if ( arr [ i ] == 'T' ) thi . push_back ( i );\n  }\n  int l = 0, r = 0;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( abs ( thi [ l ] - pol [ r ] ) <= k ) {\n      res ++;\n      l ++;\n      r ++;\n    }\n    else if ( thi [ l ] < pol [ r ] ) l ++;\n    else r ++;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int policeThief ( char arr [ ] , int n , int k ) {\n  int res = 0 ;\n  ArrayList < Integer > thi = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > pol = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . add ( i ) ;\n    else if ( arr [ i ] == 'T' ) thi . add ( i ) ;\n  }\n  int l = 0 , r = 0 ;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( Math . abs ( thi . get ( l ) - pol . get ( r ) ) <= k ) {\n      res ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( thi . get ( l ) < pol . get ( r ) ) l ++ ;\n    else r ++ ;\n  }\n  return res ;\n}", "target_program": " def policeThief ( arr , n , k ) :\n    i = 0\n    l = 0\n    r = 0\n    res = 0\n    thi = [ ]\n    pol = [ ]\n    while i < n :\n        if arr [ i ] == 'P' :\n            pol.append ( i )\n        elif arr [ i ] == 'T' :\n            thi.append ( i )\n        i += 1\n    while l < len ( thi ) and r < len ( pol ) :\n        if ( abs ( thi [ l ] - pol [ r ] ) <= k ) :\n            res += 1\n            l += 1\n            r += 1\n        elif thi [ l ] < pol [ r ] :\n            l += 1\n        else :\n            r += 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int policeThief ( char arr [ ] , int n , int k ) {\n  int res = 0 ;\n  ArrayList < Integer > thi = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > pol = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . add ( i ) ;\n    else if ( arr [ i ] == 'T' ) thi . add ( i ) ;\n  }\n  int l = 0 , r = 0 ;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( Math . abs ( thi . get ( l ) - pol . get ( r ) ) <= k ) {\n      res ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( thi . get ( l ) < pol . get ( r ) ) l ++ ;\n    else r ++ ;\n  }\n  return res ;\n}", "target_program": " int policeThief ( char arr [ ], int n, int k ) {\n  int res = 0;\n  vector < int > thi;\n  vector < int > pol;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . push_back ( i );\n    else if ( arr [ i ] == 'T' ) thi . push_back ( i );\n  }\n  int l = 0, r = 0;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( abs ( thi [ l ] - pol [ r ] ) <= k ) {\n      res ++;\n      l ++;\n      r ++;\n    }\n    else if ( thi [ l ] < pol [ r ] ) l ++;\n    else r ++;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int policeThief ( char arr [ ], int n, int k ) {\n  int res = 0;\n  vector < int > thi;\n  vector < int > pol;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . push_back ( i );\n    else if ( arr [ i ] == 'T' ) thi . push_back ( i );\n  }\n  int l = 0, r = 0;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( abs ( thi [ l ] - pol [ r ] ) <= k ) {\n      res ++;\n      l ++;\n      r ++;\n    }\n    else if ( thi [ l ] < pol [ r ] ) l ++;\n    else r ++;\n  }\n  return res;\n}", "target_program": " static int policeThief ( char arr [ ] , int n , int k ) {\n  int res = 0 ;\n  ArrayList < Integer > thi = new ArrayList < Integer > ( ) ;\n  ArrayList < Integer > pol = new ArrayList < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . add ( i ) ;\n    else if ( arr [ i ] == 'T' ) thi . add ( i ) ;\n  }\n  int l = 0 , r = 0 ;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( Math . abs ( thi . get ( l ) - pol . get ( r ) ) <= k ) {\n      res ++ ;\n      l ++ ;\n      r ++ ;\n    }\n    else if ( thi . get ( l ) < pol . get ( r ) ) l ++ ;\n    else r ++ ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int policeThief ( char arr [ ], int n, int k ) {\n  int res = 0;\n  vector < int > thi;\n  vector < int > pol;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == 'P' ) pol . push_back ( i );\n    else if ( arr [ i ] == 'T' ) thi . push_back ( i );\n  }\n  int l = 0, r = 0;\n  while ( l < thi . size ( ) && r < pol . size ( ) ) {\n    if ( abs ( thi [ l ] - pol [ r ] ) <= k ) {\n      res ++;\n      l ++;\n      r ++;\n    }\n    else if ( thi [ l ] < pol [ r ] ) l ++;\n    else r ++;\n  }\n  return res;\n}", "target_program": " def policeThief ( arr , n , k ) :\n    i = 0\n    l = 0\n    r = 0\n    res = 0\n    thi = [ ]\n    pol = [ ]\n    while i < n :\n        if arr [ i ] == 'P' :\n            pol.append ( i )\n        elif arr [ i ] == 'T' :\n            thi.append ( i )\n        i += 1\n    while l < len ( thi ) and r < len ( pol ) :\n        if ( abs ( thi [ l ] - pol [ r ] ) <= k ) :\n            res += 1\n            l += 1\n            r += 1\n        elif thi [ l ] < pol [ r ] :\n            l += 1\n        else :\n            r += 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def maxLen ( arr , n ) :\n    hash_map = { } ;\n    curr_sum = 0 ;\n    max_len = 0 ;\n    ending_index = - 1 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1 ;\n        else :\n            arr [ i ] = 1 ;\n    for i in range ( 0 , n ) :\n        curr_sum = curr_sum + arr [ i ] ;\n        if ( curr_sum == 0 ) :\n            max_len = i + 1 ;\n            ending_index = i ;\n        if ( curr_sum + n ) in hash_map :\n            max_len = max ( max_len , i - hash_map [ curr_sum + n ] )\n        else :\n            hash_map [ curr_sum ] = i ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0 ;\n        else :\n            arr [ i ] = 1 ;\n    print ( ending_index - max_len + 1 , end = \" \" ) ;\n    print ( \"to\" , end = \" \" ) ;\n    print ( ending_index ) ;\n    return max_len ;", "target_program": " int maxLen ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 ;\n  int max_len = 0 ;\n  int ending_index = - 1 ;\n  int start_index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( sum == 0 ) {\n      max_len = i + 1 ;\n      ending_index = i ;\n    }\n    if ( hM . containsKey ( sum + n ) ) {\n      if ( max_len < i - hM . get ( sum + n ) ) {\n        max_len = i - hM . get ( sum + n ) ;\n        ending_index = i ;\n      }\n    }\n    else hM . put ( sum + n , i ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;\n  }\n  int end = ending_index - max_len + 1 ;\n  System . out . println ( end + \" to \" + ending_index ) ;\n  return max_len ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxLen ( arr , n ) :\n    hash_map = { } ;\n    curr_sum = 0 ;\n    max_len = 0 ;\n    ending_index = - 1 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1 ;\n        else :\n            arr [ i ] = 1 ;\n    for i in range ( 0 , n ) :\n        curr_sum = curr_sum + arr [ i ] ;\n        if ( curr_sum == 0 ) :\n            max_len = i + 1 ;\n            ending_index = i ;\n        if ( curr_sum + n ) in hash_map :\n            max_len = max ( max_len , i - hash_map [ curr_sum + n ] )\n        else :\n            hash_map [ curr_sum ] = i ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0 ;\n        else :\n            arr [ i ] = 1 ;\n    print ( ending_index - max_len + 1 , end = \" \" ) ;\n    print ( \"to\" , end = \" \" ) ;\n    print ( ending_index ) ;\n    return max_len ;", "target_program": " int maxLen ( int arr [ ], int n ) {\n  unordered_map < int, int > hM;\n  int sum = 0;\n  int max_len = 0;\n  int ending_index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( sum == 0 ) {\n      max_len = i + 1;\n      ending_index = i;\n    }\n    if ( hM . find ( sum + n ) != hM . end ( ) ) {\n      if ( max_len < i - hM [ sum + n ] ) {\n        max_len = i - hM [ sum + n ];\n        ending_index = i;\n      }\n    }\n    else hM [ sum + n ] = i;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1;\n  printf ( \"%d to %d\\n\", ending_index - max_len + 1, ending_index );\n  return max_len;\n}"}
{"source": "java", "target": "python", "source_program": " int maxLen ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 ;\n  int max_len = 0 ;\n  int ending_index = - 1 ;\n  int start_index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( sum == 0 ) {\n      max_len = i + 1 ;\n      ending_index = i ;\n    }\n    if ( hM . containsKey ( sum + n ) ) {\n      if ( max_len < i - hM . get ( sum + n ) ) {\n        max_len = i - hM . get ( sum + n ) ;\n        ending_index = i ;\n      }\n    }\n    else hM . put ( sum + n , i ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;\n  }\n  int end = ending_index - max_len + 1 ;\n  System . out . println ( end + \" to \" + ending_index ) ;\n  return max_len ;\n}", "target_program": " def maxLen ( arr , n ) :\n    hash_map = { } ;\n    curr_sum = 0 ;\n    max_len = 0 ;\n    ending_index = - 1 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1 ;\n        else :\n            arr [ i ] = 1 ;\n    for i in range ( 0 , n ) :\n        curr_sum = curr_sum + arr [ i ] ;\n        if ( curr_sum == 0 ) :\n            max_len = i + 1 ;\n            ending_index = i ;\n        if ( curr_sum + n ) in hash_map :\n            max_len = max ( max_len , i - hash_map [ curr_sum + n ] )\n        else :\n            hash_map [ curr_sum ] = i ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0 ;\n        else :\n            arr [ i ] = 1 ;\n    print ( ending_index - max_len + 1 , end = \" \" ) ;\n    print ( \"to\" , end = \" \" ) ;\n    print ( ending_index ) ;\n    return max_len ;"}
{"source": "java", "target": "cpp", "source_program": " int maxLen ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 ;\n  int max_len = 0 ;\n  int ending_index = - 1 ;\n  int start_index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( sum == 0 ) {\n      max_len = i + 1 ;\n      ending_index = i ;\n    }\n    if ( hM . containsKey ( sum + n ) ) {\n      if ( max_len < i - hM . get ( sum + n ) ) {\n        max_len = i - hM . get ( sum + n ) ;\n        ending_index = i ;\n      }\n    }\n    else hM . put ( sum + n , i ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;\n  }\n  int end = ending_index - max_len + 1 ;\n  System . out . println ( end + \" to \" + ending_index ) ;\n  return max_len ;\n}", "target_program": " int maxLen ( int arr [ ], int n ) {\n  unordered_map < int, int > hM;\n  int sum = 0;\n  int max_len = 0;\n  int ending_index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( sum == 0 ) {\n      max_len = i + 1;\n      ending_index = i;\n    }\n    if ( hM . find ( sum + n ) != hM . end ( ) ) {\n      if ( max_len < i - hM [ sum + n ] ) {\n        max_len = i - hM [ sum + n ];\n        ending_index = i;\n      }\n    }\n    else hM [ sum + n ] = i;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1;\n  printf ( \"%d to %d\\n\", ending_index - max_len + 1, ending_index );\n  return max_len;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxLen ( int arr [ ], int n ) {\n  unordered_map < int, int > hM;\n  int sum = 0;\n  int max_len = 0;\n  int ending_index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( sum == 0 ) {\n      max_len = i + 1;\n      ending_index = i;\n    }\n    if ( hM . find ( sum + n ) != hM . end ( ) ) {\n      if ( max_len < i - hM [ sum + n ] ) {\n        max_len = i - hM [ sum + n ];\n        ending_index = i;\n      }\n    }\n    else hM [ sum + n ] = i;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1;\n  printf ( \"%d to %d\\n\", ending_index - max_len + 1, ending_index );\n  return max_len;\n}", "target_program": " int maxLen ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hM = new HashMap < Integer , Integer > ( ) ;\n  int sum = 0 ;\n  int max_len = 0 ;\n  int ending_index = - 1 ;\n  int start_index = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1 ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( sum == 0 ) {\n      max_len = i + 1 ;\n      ending_index = i ;\n    }\n    if ( hM . containsKey ( sum + n ) ) {\n      if ( max_len < i - hM . get ( sum + n ) ) {\n        max_len = i - hM . get ( sum + n ) ;\n        ending_index = i ;\n      }\n    }\n    else hM . put ( sum + n , i ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1 ;\n  }\n  int end = ending_index - max_len + 1 ;\n  System . out . println ( end + \" to \" + ending_index ) ;\n  return max_len ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxLen ( int arr [ ], int n ) {\n  unordered_map < int, int > hM;\n  int sum = 0;\n  int max_len = 0;\n  int ending_index = - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == 0 ) ? - 1 : 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( sum == 0 ) {\n      max_len = i + 1;\n      ending_index = i;\n    }\n    if ( hM . find ( sum + n ) != hM . end ( ) ) {\n      if ( max_len < i - hM [ sum + n ] ) {\n        max_len = i - hM [ sum + n ];\n        ending_index = i;\n      }\n    }\n    else hM [ sum + n ] = i;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) arr [ i ] = ( arr [ i ] == - 1 ) ? 0 : 1;\n  printf ( \"%d to %d\\n\", ending_index - max_len + 1, ending_index );\n  return max_len;\n}", "target_program": " def maxLen ( arr , n ) :\n    hash_map = { } ;\n    curr_sum = 0 ;\n    max_len = 0 ;\n    ending_index = - 1 ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == 0 ) :\n            arr [ i ] = - 1 ;\n        else :\n            arr [ i ] = 1 ;\n    for i in range ( 0 , n ) :\n        curr_sum = curr_sum + arr [ i ] ;\n        if ( curr_sum == 0 ) :\n            max_len = i + 1 ;\n            ending_index = i ;\n        if ( curr_sum + n ) in hash_map :\n            max_len = max ( max_len , i - hash_map [ curr_sum + n ] )\n        else :\n            hash_map [ curr_sum ] = i ;\n    for i in range ( 0 , n ) :\n        if ( arr [ i ] == - 1 ) :\n            arr [ i ] = 0 ;\n        else :\n            arr [ i ] = 1 ;\n    print ( ending_index - max_len + 1 , end = \" \" ) ;\n    print ( \"to\" , end = \" \" ) ;\n    print ( ending_index ) ;\n    return max_len ;"}
{"source": "python", "target": "java", "source_program": " def findLength ( string , n ) :\n    current_sum = 0\n    max_sum = 0\n    for i in range ( n ) :\n        current_sum += ( 1 if string [ i ] == '0' else - 1 )\n        if current_sum < 0 :\n            current_sum = 0\n        max_sum = max ( current_sum , max_sum )\n    return max_sum if max_sum else 0", "target_program": " public static int findLength ( String str , int n ) {\n  int current_sum = 0 ;\n  int max_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ;\n    if ( current_sum < 0 ) current_sum = 0 ;\n    max_sum = Math . max ( current_sum , max_sum ) ;\n  }\n  return max_sum == 0 ? - 1 : max_sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLength ( string , n ) :\n    current_sum = 0\n    max_sum = 0\n    for i in range ( n ) :\n        current_sum += ( 1 if string [ i ] == '0' else - 1 )\n        if current_sum < 0 :\n            current_sum = 0\n        max_sum = max ( current_sum , max_sum )\n    return max_sum if max_sum else 0", "target_program": " int findLength ( string str, int n ) {\n  int current_sum = 0;\n  int max_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    current_sum += ( str [ i ] == '0' ? 1 : - 1 );\n    if ( current_sum < 0 ) current_sum = 0;\n    max_sum = max ( current_sum, max_sum );\n  }\n  return max_sum == 0 ? - 1 : max_sum;\n}"}
{"source": "java", "target": "python", "source_program": " public static int findLength ( String str , int n ) {\n  int current_sum = 0 ;\n  int max_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ;\n    if ( current_sum < 0 ) current_sum = 0 ;\n    max_sum = Math . max ( current_sum , max_sum ) ;\n  }\n  return max_sum == 0 ? - 1 : max_sum ;\n}", "target_program": " def findLength ( string , n ) :\n    current_sum = 0\n    max_sum = 0\n    for i in range ( n ) :\n        current_sum += ( 1 if string [ i ] == '0' else - 1 )\n        if current_sum < 0 :\n            current_sum = 0\n        max_sum = max ( current_sum , max_sum )\n    return max_sum if max_sum else 0"}
{"source": "java", "target": "cpp", "source_program": " public static int findLength ( String str , int n ) {\n  int current_sum = 0 ;\n  int max_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ;\n    if ( current_sum < 0 ) current_sum = 0 ;\n    max_sum = Math . max ( current_sum , max_sum ) ;\n  }\n  return max_sum == 0 ? - 1 : max_sum ;\n}", "target_program": " int findLength ( string str, int n ) {\n  int current_sum = 0;\n  int max_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    current_sum += ( str [ i ] == '0' ? 1 : - 1 );\n    if ( current_sum < 0 ) current_sum = 0;\n    max_sum = max ( current_sum, max_sum );\n  }\n  return max_sum == 0 ? - 1 : max_sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLength ( string str, int n ) {\n  int current_sum = 0;\n  int max_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    current_sum += ( str [ i ] == '0' ? 1 : - 1 );\n    if ( current_sum < 0 ) current_sum = 0;\n    max_sum = max ( current_sum, max_sum );\n  }\n  return max_sum == 0 ? - 1 : max_sum;\n}", "target_program": " public static int findLength ( String str , int n ) {\n  int current_sum = 0 ;\n  int max_sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    current_sum += ( str . charAt ( i ) == '0' ? 1 : - 1 ) ;\n    if ( current_sum < 0 ) current_sum = 0 ;\n    max_sum = Math . max ( current_sum , max_sum ) ;\n  }\n  return max_sum == 0 ? - 1 : max_sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLength ( string str, int n ) {\n  int current_sum = 0;\n  int max_sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    current_sum += ( str [ i ] == '0' ? 1 : - 1 );\n    if ( current_sum < 0 ) current_sum = 0;\n    max_sum = max ( current_sum, max_sum );\n  }\n  return max_sum == 0 ? - 1 : max_sum;\n}", "target_program": " def findLength ( string , n ) :\n    current_sum = 0\n    max_sum = 0\n    for i in range ( n ) :\n        current_sum += ( 1 if string [ i ] == '0' else - 1 )\n        if current_sum < 0 :\n            current_sum = 0\n        max_sum = max ( current_sum , max_sum )\n    return max_sum if max_sum else 0"}
{"source": "python", "target": "java", "source_program": " def findLongestConseqSubseq ( arr , n ) :\n    S = set ( ) ;\n    for i in range ( n ) :\n        S.add ( arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ] ;\n            while ( S.__contains__ ( j ) ) :\n                j += 1 ;\n            ans = max ( ans , j - arr [ i ] ) ;\n    return ans ;", "target_program": " static int findLongestConseqSubseq ( int arr [ ] , int n ) {\n  HashSet < Integer > S = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) S . add ( arr [ i ] ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( S . contains ( arr [ i ] ) ) {\n      int j = arr [ i ] ;\n      while ( S . contains ( j ) ) j ++ ;\n      ans = Math . max ( ans , j - arr [ i ] ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findLongestConseqSubseq ( arr , n ) :\n    S = set ( ) ;\n    for i in range ( n ) :\n        S.add ( arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ] ;\n            while ( S.__contains__ ( j ) ) :\n                j += 1 ;\n            ans = max ( ans , j - arr [ i ] ) ;\n    return ans ;", "target_program": " int findLongestConseqSubseq ( int arr [ ], int n ) {\n  unordered_set < int > S;\n  for ( int i = 0;\n  i < n;\n  i ++ ) S . insert ( arr [ i ] );\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) {\n      int j = arr [ i ];\n      while ( S . find ( j ) != S . end ( ) ) j ++;\n      ans = max ( ans, j - arr [ i ] );\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findLongestConseqSubseq ( int arr [ ] , int n ) {\n  HashSet < Integer > S = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) S . add ( arr [ i ] ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( S . contains ( arr [ i ] ) ) {\n      int j = arr [ i ] ;\n      while ( S . contains ( j ) ) j ++ ;\n      ans = Math . max ( ans , j - arr [ i ] ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " def findLongestConseqSubseq ( arr , n ) :\n    S = set ( ) ;\n    for i in range ( n ) :\n        S.add ( arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ] ;\n            while ( S.__contains__ ( j ) ) :\n                j += 1 ;\n            ans = max ( ans , j - arr [ i ] ) ;\n    return ans ;"}
{"source": "java", "target": "cpp", "source_program": " static int findLongestConseqSubseq ( int arr [ ] , int n ) {\n  HashSet < Integer > S = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) S . add ( arr [ i ] ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( S . contains ( arr [ i ] ) ) {\n      int j = arr [ i ] ;\n      while ( S . contains ( j ) ) j ++ ;\n      ans = Math . max ( ans , j - arr [ i ] ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " int findLongestConseqSubseq ( int arr [ ], int n ) {\n  unordered_set < int > S;\n  for ( int i = 0;\n  i < n;\n  i ++ ) S . insert ( arr [ i ] );\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) {\n      int j = arr [ i ];\n      while ( S . find ( j ) != S . end ( ) ) j ++;\n      ans = max ( ans, j - arr [ i ] );\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findLongestConseqSubseq ( int arr [ ], int n ) {\n  unordered_set < int > S;\n  for ( int i = 0;\n  i < n;\n  i ++ ) S . insert ( arr [ i ] );\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) {\n      int j = arr [ i ];\n      while ( S . find ( j ) != S . end ( ) ) j ++;\n      ans = max ( ans, j - arr [ i ] );\n    }\n  }\n  return ans;\n}", "target_program": " static int findLongestConseqSubseq ( int arr [ ] , int n ) {\n  HashSet < Integer > S = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) S . add ( arr [ i ] ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( S . contains ( arr [ i ] ) ) {\n      int j = arr [ i ] ;\n      while ( S . contains ( j ) ) j ++ ;\n      ans = Math . max ( ans , j - arr [ i ] ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findLongestConseqSubseq ( int arr [ ], int n ) {\n  unordered_set < int > S;\n  for ( int i = 0;\n  i < n;\n  i ++ ) S . insert ( arr [ i ] );\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( S . find ( arr [ i ] - 1 ) == S . end ( ) ) {\n      int j = arr [ i ];\n      while ( S . find ( j ) != S . end ( ) ) j ++;\n      ans = max ( ans, j - arr [ i ] );\n    }\n  }\n  return ans;\n}", "target_program": " def findLongestConseqSubseq ( arr , n ) :\n    S = set ( ) ;\n    for i in range ( n ) :\n        S.add ( arr [ i ] ) ;\n    ans = 0 ;\n    for i in range ( n ) :\n        if S.__contains__ ( arr [ i ] ) :\n            j = arr [ i ] ;\n            while ( S.__contains__ ( j ) ) :\n                j += 1 ;\n            ans = max ( ans , j - arr [ i ] ) ;\n    return ans ;"}
{"source": "python", "target": "java", "source_program": " def nextWord ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - 1\n    while ( s [ i ] == 'z' and i >= 0 ) :\n        i -= 1\n    if ( i == - 1 ) :\n        s = s + 'a'\n    else :\n        s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) , 1 )\n    return s", "target_program": " public static String nextWord ( String str ) {\n  if ( str == \"\" ) return \"a\" ;\n  int i = str . length ( ) - 1 ;\n  while ( str . charAt ( i ) == 'z' && i >= 0 ) i -- ;\n  if ( i == - 1 ) str = str + 'a' ;\n  else str = str . substring ( 0 , i ) + ( char ) ( ( int ) ( str . charAt ( i ) ) + 1 ) + str . substring ( i + 1 ) ;\n  return str ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def nextWord ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - 1\n    while ( s [ i ] == 'z' and i >= 0 ) :\n        i -= 1\n    if ( i == - 1 ) :\n        s = s + 'a'\n    else :\n        s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) , 1 )\n    return s", "target_program": " string nextWord ( string s ) {\n  if ( s == \"\" ) return \"a\";\n  int i = s . length ( ) - 1;\n  while ( s [ i ] == 'z' && i >= 0 ) i --;\n  if ( i == - 1 ) s = s + 'a';\n  else s [ i ] ++;\n  return s;\n}"}
{"source": "java", "target": "python", "source_program": " public static String nextWord ( String str ) {\n  if ( str == \"\" ) return \"a\" ;\n  int i = str . length ( ) - 1 ;\n  while ( str . charAt ( i ) == 'z' && i >= 0 ) i -- ;\n  if ( i == - 1 ) str = str + 'a' ;\n  else str = str . substring ( 0 , i ) + ( char ) ( ( int ) ( str . charAt ( i ) ) + 1 ) + str . substring ( i + 1 ) ;\n  return str ;\n}", "target_program": " def nextWord ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - 1\n    while ( s [ i ] == 'z' and i >= 0 ) :\n        i -= 1\n    if ( i == - 1 ) :\n        s = s + 'a'\n    else :\n        s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) , 1 )\n    return s"}
{"source": "java", "target": "cpp", "source_program": " public static String nextWord ( String str ) {\n  if ( str == \"\" ) return \"a\" ;\n  int i = str . length ( ) - 1 ;\n  while ( str . charAt ( i ) == 'z' && i >= 0 ) i -- ;\n  if ( i == - 1 ) str = str + 'a' ;\n  else str = str . substring ( 0 , i ) + ( char ) ( ( int ) ( str . charAt ( i ) ) + 1 ) + str . substring ( i + 1 ) ;\n  return str ;\n}", "target_program": " string nextWord ( string s ) {\n  if ( s == \"\" ) return \"a\";\n  int i = s . length ( ) - 1;\n  while ( s [ i ] == 'z' && i >= 0 ) i --;\n  if ( i == - 1 ) s = s + 'a';\n  else s [ i ] ++;\n  return s;\n}"}
{"source": "cpp", "target": "java", "source_program": " string nextWord ( string s ) {\n  if ( s == \"\" ) return \"a\";\n  int i = s . length ( ) - 1;\n  while ( s [ i ] == 'z' && i >= 0 ) i --;\n  if ( i == - 1 ) s = s + 'a';\n  else s [ i ] ++;\n  return s;\n}", "target_program": " public static String nextWord ( String str ) {\n  if ( str == \"\" ) return \"a\" ;\n  int i = str . length ( ) - 1 ;\n  while ( str . charAt ( i ) == 'z' && i >= 0 ) i -- ;\n  if ( i == - 1 ) str = str + 'a' ;\n  else str = str . substring ( 0 , i ) + ( char ) ( ( int ) ( str . charAt ( i ) ) + 1 ) + str . substring ( i + 1 ) ;\n  return str ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string nextWord ( string s ) {\n  if ( s == \"\" ) return \"a\";\n  int i = s . length ( ) - 1;\n  while ( s [ i ] == 'z' && i >= 0 ) i --;\n  if ( i == - 1 ) s = s + 'a';\n  else s [ i ] ++;\n  return s;\n}", "target_program": " def nextWord ( s ) :\n    if ( s == \" \" ) :\n        return \"a\"\n    i = len ( s ) - 1\n    while ( s [ i ] == 'z' and i >= 0 ) :\n        i -= 1\n    if ( i == - 1 ) :\n        s = s + 'a'\n    else :\n        s = s.replace ( s [ i ] , chr ( ord ( s [ i ] ) + 1 ) , 1 )\n    return s"}
{"source": "python", "target": "java", "source_program": " def solve ( a , b , n ) :\n    s = 0\n    for i in range ( 0 , n ) :\n        s += a [ i ] + b [ i ]\n    if n == 1 :\n        return a [ 0 ] + b [ 0 ]\n    if s % n != 0 :\n        return - 1\n    x = s // n\n    for i in range ( 0 , n ) :\n        if a [ i ] > x :\n            return - 1\n        if i > 0 :\n            a [ i ] += b [ i - 1 ]\n            b [ i - 1 ] = 0\n        if a [ i ] == x :\n            continue\n        y = a [ i ] + b [ i ]\n        if i + 1 < n :\n            y += b [ i + 1 ]\n        if y == x :\n            a [ i ] = y\n            b [ i ] = 0\n            if i + 1 < n : b [ i + 1 ] = 0\n            continue\n        if a [ i ] + b [ i ] == x :\n            a [ i ] += b [ i ]\n            b [ i ] = 0\n            continue\n        if i + 1 < n and a [ i ] + b [ i + 1 ] == x :\n            a [ i ] += b [ i + 1 ]\n            b [ i + 1 ] = 0\n            continue\n        return - 1\n    for i in range ( 0 , n ) :\n        if b [ i ] != 0 :\n            return - 1\n    return x", "target_program": " static int solve ( int a [ ] , int b [ ] , int n ) {\n  int i ;\n  int s = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) s += ( a [ i ] + b [ i ] ) ;\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ] ;\n  if ( s % n != 0 ) return - 1 ;\n  int x = s / n ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1 ;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ] ;\n      b [ i - 1 ] = 0 ;\n    }\n    if ( a [ i ] == x ) continue ;\n    int y = a [ i ] + b [ i ] ;\n    if ( i + 1 < n ) y += b [ i + 1 ] ;\n    if ( y == x ) {\n      a [ i ] = y ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ] ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ] ;\n      b [ i + 1 ] = 0 ;\n      continue ;\n    }\n    return - 1 ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( b [ i ] != 0 ) return - 1 ;\n  return x ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def solve ( a , b , n ) :\n    s = 0\n    for i in range ( 0 , n ) :\n        s += a [ i ] + b [ i ]\n    if n == 1 :\n        return a [ 0 ] + b [ 0 ]\n    if s % n != 0 :\n        return - 1\n    x = s // n\n    for i in range ( 0 , n ) :\n        if a [ i ] > x :\n            return - 1\n        if i > 0 :\n            a [ i ] += b [ i - 1 ]\n            b [ i - 1 ] = 0\n        if a [ i ] == x :\n            continue\n        y = a [ i ] + b [ i ]\n        if i + 1 < n :\n            y += b [ i + 1 ]\n        if y == x :\n            a [ i ] = y\n            b [ i ] = 0\n            if i + 1 < n : b [ i + 1 ] = 0\n            continue\n        if a [ i ] + b [ i ] == x :\n            a [ i ] += b [ i ]\n            b [ i ] = 0\n            continue\n        if i + 1 < n and a [ i ] + b [ i + 1 ] == x :\n            a [ i ] += b [ i + 1 ]\n            b [ i + 1 ] = 0\n            continue\n        return - 1\n    for i in range ( 0 , n ) :\n        if b [ i ] != 0 :\n            return - 1\n    return x", "target_program": " int solve ( int a [ ], int b [ ], int n ) {\n  int i;\n  long long int s = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) s += ( a [ i ] + b [ i ] );\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ];\n  if ( s % n != 0 ) return - 1;\n  int x = s / n;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ];\n      b [ i - 1 ] = 0;\n    }\n    if ( a [ i ] == x ) continue;\n    int y = a [ i ] + b [ i ];\n    if ( i + 1 < n ) y += b [ i + 1 ];\n    if ( y == x ) {\n      a [ i ] = y;\n      b [ i ] = b [ i + 1 ] = 0;\n      continue;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ];\n      b [ i ] = 0;\n      continue;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ];\n      b [ i + 1 ] = 0;\n      continue;\n    }\n    return - 1;\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( b [ i ] != 0 ) return - 1;\n  return x;\n}"}
{"source": "java", "target": "python", "source_program": " static int solve ( int a [ ] , int b [ ] , int n ) {\n  int i ;\n  int s = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) s += ( a [ i ] + b [ i ] ) ;\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ] ;\n  if ( s % n != 0 ) return - 1 ;\n  int x = s / n ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1 ;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ] ;\n      b [ i - 1 ] = 0 ;\n    }\n    if ( a [ i ] == x ) continue ;\n    int y = a [ i ] + b [ i ] ;\n    if ( i + 1 < n ) y += b [ i + 1 ] ;\n    if ( y == x ) {\n      a [ i ] = y ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ] ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ] ;\n      b [ i + 1 ] = 0 ;\n      continue ;\n    }\n    return - 1 ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( b [ i ] != 0 ) return - 1 ;\n  return x ;\n}", "target_program": " def solve ( a , b , n ) :\n    s = 0\n    for i in range ( 0 , n ) :\n        s += a [ i ] + b [ i ]\n    if n == 1 :\n        return a [ 0 ] + b [ 0 ]\n    if s % n != 0 :\n        return - 1\n    x = s // n\n    for i in range ( 0 , n ) :\n        if a [ i ] > x :\n            return - 1\n        if i > 0 :\n            a [ i ] += b [ i - 1 ]\n            b [ i - 1 ] = 0\n        if a [ i ] == x :\n            continue\n        y = a [ i ] + b [ i ]\n        if i + 1 < n :\n            y += b [ i + 1 ]\n        if y == x :\n            a [ i ] = y\n            b [ i ] = 0\n            if i + 1 < n : b [ i + 1 ] = 0\n            continue\n        if a [ i ] + b [ i ] == x :\n            a [ i ] += b [ i ]\n            b [ i ] = 0\n            continue\n        if i + 1 < n and a [ i ] + b [ i + 1 ] == x :\n            a [ i ] += b [ i + 1 ]\n            b [ i + 1 ] = 0\n            continue\n        return - 1\n    for i in range ( 0 , n ) :\n        if b [ i ] != 0 :\n            return - 1\n    return x"}
{"source": "java", "target": "cpp", "source_program": " static int solve ( int a [ ] , int b [ ] , int n ) {\n  int i ;\n  int s = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) s += ( a [ i ] + b [ i ] ) ;\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ] ;\n  if ( s % n != 0 ) return - 1 ;\n  int x = s / n ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1 ;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ] ;\n      b [ i - 1 ] = 0 ;\n    }\n    if ( a [ i ] == x ) continue ;\n    int y = a [ i ] + b [ i ] ;\n    if ( i + 1 < n ) y += b [ i + 1 ] ;\n    if ( y == x ) {\n      a [ i ] = y ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ] ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ] ;\n      b [ i + 1 ] = 0 ;\n      continue ;\n    }\n    return - 1 ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( b [ i ] != 0 ) return - 1 ;\n  return x ;\n}", "target_program": " int solve ( int a [ ], int b [ ], int n ) {\n  int i;\n  long long int s = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) s += ( a [ i ] + b [ i ] );\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ];\n  if ( s % n != 0 ) return - 1;\n  int x = s / n;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ];\n      b [ i - 1 ] = 0;\n    }\n    if ( a [ i ] == x ) continue;\n    int y = a [ i ] + b [ i ];\n    if ( i + 1 < n ) y += b [ i + 1 ];\n    if ( y == x ) {\n      a [ i ] = y;\n      b [ i ] = b [ i + 1 ] = 0;\n      continue;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ];\n      b [ i ] = 0;\n      continue;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ];\n      b [ i + 1 ] = 0;\n      continue;\n    }\n    return - 1;\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( b [ i ] != 0 ) return - 1;\n  return x;\n}"}
{"source": "cpp", "target": "java", "source_program": " int solve ( int a [ ], int b [ ], int n ) {\n  int i;\n  long long int s = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) s += ( a [ i ] + b [ i ] );\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ];\n  if ( s % n != 0 ) return - 1;\n  int x = s / n;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ];\n      b [ i - 1 ] = 0;\n    }\n    if ( a [ i ] == x ) continue;\n    int y = a [ i ] + b [ i ];\n    if ( i + 1 < n ) y += b [ i + 1 ];\n    if ( y == x ) {\n      a [ i ] = y;\n      b [ i ] = b [ i + 1 ] = 0;\n      continue;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ];\n      b [ i ] = 0;\n      continue;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ];\n      b [ i + 1 ] = 0;\n      continue;\n    }\n    return - 1;\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( b [ i ] != 0 ) return - 1;\n  return x;\n}", "target_program": " static int solve ( int a [ ] , int b [ ] , int n ) {\n  int i ;\n  int s = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) s += ( a [ i ] + b [ i ] ) ;\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ] ;\n  if ( s % n != 0 ) return - 1 ;\n  int x = s / n ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1 ;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ] ;\n      b [ i - 1 ] = 0 ;\n    }\n    if ( a [ i ] == x ) continue ;\n    int y = a [ i ] + b [ i ] ;\n    if ( i + 1 < n ) y += b [ i + 1 ] ;\n    if ( y == x ) {\n      a [ i ] = y ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ] ;\n      b [ i ] = 0 ;\n      continue ;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ] ;\n      b [ i + 1 ] = 0 ;\n      continue ;\n    }\n    return - 1 ;\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) if ( b [ i ] != 0 ) return - 1 ;\n  return x ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int solve ( int a [ ], int b [ ], int n ) {\n  int i;\n  long long int s = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) s += ( a [ i ] + b [ i ] );\n  if ( n == 1 ) return a [ 0 ] + b [ 0 ];\n  if ( s % n != 0 ) return - 1;\n  int x = s / n;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( a [ i ] > x ) return - 1;\n    if ( i > 0 ) {\n      a [ i ] += b [ i - 1 ];\n      b [ i - 1 ] = 0;\n    }\n    if ( a [ i ] == x ) continue;\n    int y = a [ i ] + b [ i ];\n    if ( i + 1 < n ) y += b [ i + 1 ];\n    if ( y == x ) {\n      a [ i ] = y;\n      b [ i ] = b [ i + 1 ] = 0;\n      continue;\n    }\n    if ( a [ i ] + b [ i ] == x ) {\n      a [ i ] += b [ i ];\n      b [ i ] = 0;\n      continue;\n    }\n    if ( i + 1 < n && a [ i ] + b [ i + 1 ] == x ) {\n      a [ i ] += b [ i + 1 ];\n      b [ i + 1 ] = 0;\n      continue;\n    }\n    return - 1;\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) if ( b [ i ] != 0 ) return - 1;\n  return x;\n}", "target_program": " def solve ( a , b , n ) :\n    s = 0\n    for i in range ( 0 , n ) :\n        s += a [ i ] + b [ i ]\n    if n == 1 :\n        return a [ 0 ] + b [ 0 ]\n    if s % n != 0 :\n        return - 1\n    x = s // n\n    for i in range ( 0 , n ) :\n        if a [ i ] > x :\n            return - 1\n        if i > 0 :\n            a [ i ] += b [ i - 1 ]\n            b [ i - 1 ] = 0\n        if a [ i ] == x :\n            continue\n        y = a [ i ] + b [ i ]\n        if i + 1 < n :\n            y += b [ i + 1 ]\n        if y == x :\n            a [ i ] = y\n            b [ i ] = 0\n            if i + 1 < n : b [ i + 1 ] = 0\n            continue\n        if a [ i ] + b [ i ] == x :\n            a [ i ] += b [ i ]\n            b [ i ] = 0\n            continue\n        if i + 1 < n and a [ i ] + b [ i + 1 ] == x :\n            a [ i ] += b [ i + 1 ]\n            b [ i + 1 ] = 0\n            continue\n        return - 1\n    for i in range ( 0 , n ) :\n        if b [ i ] != 0 :\n            return - 1\n    return x"}
{"source": "python", "target": "java", "source_program": " def shuffleArray ( a , n ) :\n    i , q , k = 0 , 1 , n\n    while ( i < n ) :\n        j = k\n        while ( j > i + q ) :\n            a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]\n            j -= 1\n        i += 1\n        k += 1\n        q += 1", "target_program": " static void shuffleArray ( int a [ ] , int n ) {\n  for ( int i = 0 , q = 1 , k = n ;\n  i < n ;\n  i ++ , k ++ , q ++ ) for ( int j = k ;\n  j > i + q ;\n  j -- ) {\n    int temp = a [ j - 1 ] ;\n    a [ j - 1 ] = a [ j ] ;\n    a [ j ] = temp ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def shuffleArray ( a , n ) :\n    i , q , k = 0 , 1 , n\n    while ( i < n ) :\n        j = k\n        while ( j > i + q ) :\n            a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]\n            j -= 1\n        i += 1\n        k += 1\n        q += 1", "target_program": " void shuffleArray ( int a [ ], int n ) {\n  for ( int i = 0, q = 1, k = n;\n  i < n;\n  i ++, k ++, q ++ ) for ( int j = k;\n  j > i + q;\n  j -- ) swap ( a [ j - 1 ], a [ j ] );\n}"}
{"source": "java", "target": "python", "source_program": " static void shuffleArray ( int a [ ] , int n ) {\n  for ( int i = 0 , q = 1 , k = n ;\n  i < n ;\n  i ++ , k ++ , q ++ ) for ( int j = k ;\n  j > i + q ;\n  j -- ) {\n    int temp = a [ j - 1 ] ;\n    a [ j - 1 ] = a [ j ] ;\n    a [ j ] = temp ;\n  }\n}", "target_program": " def shuffleArray ( a , n ) :\n    i , q , k = 0 , 1 , n\n    while ( i < n ) :\n        j = k\n        while ( j > i + q ) :\n            a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]\n            j -= 1\n        i += 1\n        k += 1\n        q += 1"}
{"source": "java", "target": "cpp", "source_program": " static void shuffleArray ( int a [ ] , int n ) {\n  for ( int i = 0 , q = 1 , k = n ;\n  i < n ;\n  i ++ , k ++ , q ++ ) for ( int j = k ;\n  j > i + q ;\n  j -- ) {\n    int temp = a [ j - 1 ] ;\n    a [ j - 1 ] = a [ j ] ;\n    a [ j ] = temp ;\n  }\n}", "target_program": " void shuffleArray ( int a [ ], int n ) {\n  for ( int i = 0, q = 1, k = n;\n  i < n;\n  i ++, k ++, q ++ ) for ( int j = k;\n  j > i + q;\n  j -- ) swap ( a [ j - 1 ], a [ j ] );\n}"}
{"source": "cpp", "target": "java", "source_program": " void shuffleArray ( int a [ ], int n ) {\n  for ( int i = 0, q = 1, k = n;\n  i < n;\n  i ++, k ++, q ++ ) for ( int j = k;\n  j > i + q;\n  j -- ) swap ( a [ j - 1 ], a [ j ] );\n}", "target_program": " static void shuffleArray ( int a [ ] , int n ) {\n  for ( int i = 0 , q = 1 , k = n ;\n  i < n ;\n  i ++ , k ++ , q ++ ) for ( int j = k ;\n  j > i + q ;\n  j -- ) {\n    int temp = a [ j - 1 ] ;\n    a [ j - 1 ] = a [ j ] ;\n    a [ j ] = temp ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void shuffleArray ( int a [ ], int n ) {\n  for ( int i = 0, q = 1, k = n;\n  i < n;\n  i ++, k ++, q ++ ) for ( int j = k;\n  j > i + q;\n  j -- ) swap ( a [ j - 1 ], a [ j ] );\n}", "target_program": " def shuffleArray ( a , n ) :\n    i , q , k = 0 , 1 , n\n    while ( i < n ) :\n        j = k\n        while ( j > i + q ) :\n            a [ j - 1 ] , a [ j ] = a [ j ] , a [ j - 1 ]\n            j -= 1\n        i += 1\n        k += 1\n        q += 1"}
{"source": "python", "target": "java", "source_program": " def findRepeating ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n    rteurn - 1", "target_program": " static int findRepeating ( int arr [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;\n    s . add ( arr [ i ] ) ;\n  }\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRepeating ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n    rteurn - 1", "target_program": " int findRepeating ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ i ];\n    s . insert ( arr [ i ] );\n  }\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findRepeating ( int arr [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;\n    s . add ( arr [ i ] ) ;\n  }\n  return - 1 ;\n}", "target_program": " def findRepeating ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n    rteurn - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findRepeating ( int arr [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;\n    s . add ( arr [ i ] ) ;\n  }\n  return - 1 ;\n}", "target_program": " int findRepeating ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ i ];\n    s . insert ( arr [ i ] );\n  }\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findRepeating ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ i ];\n    s . insert ( arr [ i ] );\n  }\n  return - 1;\n}", "target_program": " static int findRepeating ( int arr [ ] , int n ) {\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( s . contains ( arr [ i ] ) ) return arr [ i ] ;\n    s . add ( arr [ i ] ) ;\n  }\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findRepeating ( int arr [ ], int n ) {\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) != s . end ( ) ) return arr [ i ];\n    s . insert ( arr [ i ] );\n  }\n  return - 1;\n}", "target_program": " def findRepeating ( arr , n ) :\n    s = set ( )\n    for i in range ( n ) :\n        if arr [ i ] in s :\n            return arr [ i ]\n        s.add ( arr [ i ] )\n    rteurn - 1"}
{"source": "python", "target": "java", "source_program": " def multiply ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]", "target_program": " static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def multiply ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]", "target_program": " void multiply ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ];\n}"}
{"source": "java", "target": "python", "source_program": " static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;\n}", "target_program": " def multiply ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]"}
{"source": "java", "target": "cpp", "source_program": " static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;\n}", "target_program": " void multiply ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void multiply ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ];\n}", "target_program": " static void multiply ( int A [ ] [ ] , int B [ ] [ ] , int C [ ] [ ] ) {\n  int i , j ;\n  for ( i = 0 ;\n  i < N ;\n  i ++ ) for ( j = 0 ;\n  j < N ;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void multiply ( int A [ ] [ N ], int B [ ] [ N ], int C [ ] [ N ] ) {\n  int i, j;\n  for ( i = 0;\n  i < N;\n  i ++ ) for ( j = 0;\n  j < N;\n  j ++ ) C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ];\n}", "target_program": " def multiply ( A , B , C ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            C [ i ] [ j ] = A [ i ] [ j ] - B [ i ] [ j ]"}
{"source": "python", "target": "java", "source_program": " def printFirstNegativeInteger ( arr , n , k ) :\n    for i in range ( 0 , ( n - k + 1 ) ) :\n        flag = False\n        for j in range ( 0 , k ) :\n            if ( arr [ i + j ] < 0 ) :\n                print ( arr [ i + j ] , end = \" \" )\n                flag = True\n                break\n        if ( not ( flag ) ) :\n            print ( \"0\" , end = \" \" )", "target_program": " static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) {\n  boolean flag ;\n  for ( int i = 0 ;\n  i < ( n - k + 1 ) ;\n  i ++ ) {\n    flag = false ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        System . out . print ( ( arr [ i + j ] ) + \" \" ) ;\n        flag = true ;\n        break ;\n      }\n    }\n    if ( ! flag ) System . out . print ( \"0\" + \" \" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printFirstNegativeInteger ( arr , n , k ) :\n    for i in range ( 0 , ( n - k + 1 ) ) :\n        flag = False\n        for j in range ( 0 , k ) :\n            if ( arr [ i + j ] < 0 ) :\n                print ( arr [ i + j ] , end = \" \" )\n                flag = True\n                break\n        if ( not ( flag ) ) :\n            print ( \"0\" , end = \" \" )", "target_program": " void printFirstNegativeInteger ( int arr [ ], int n, int k ) {\n  bool flag;\n  for ( int i = 0;\n  i < ( n - k + 1 );\n  i ++ ) {\n    flag = false;\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        cout << arr [ i + j ] << \" \";\n        flag = true;\n        break;\n      }\n    }\n    if ( ! flag ) cout << \"0\" << \" \";\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) {\n  boolean flag ;\n  for ( int i = 0 ;\n  i < ( n - k + 1 ) ;\n  i ++ ) {\n    flag = false ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        System . out . print ( ( arr [ i + j ] ) + \" \" ) ;\n        flag = true ;\n        break ;\n      }\n    }\n    if ( ! flag ) System . out . print ( \"0\" + \" \" ) ;\n  }\n}", "target_program": " def printFirstNegativeInteger ( arr , n , k ) :\n    for i in range ( 0 , ( n - k + 1 ) ) :\n        flag = False\n        for j in range ( 0 , k ) :\n            if ( arr [ i + j ] < 0 ) :\n                print ( arr [ i + j ] , end = \" \" )\n                flag = True\n                break\n        if ( not ( flag ) ) :\n            print ( \"0\" , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) {\n  boolean flag ;\n  for ( int i = 0 ;\n  i < ( n - k + 1 ) ;\n  i ++ ) {\n    flag = false ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        System . out . print ( ( arr [ i + j ] ) + \" \" ) ;\n        flag = true ;\n        break ;\n      }\n    }\n    if ( ! flag ) System . out . print ( \"0\" + \" \" ) ;\n  }\n}", "target_program": " void printFirstNegativeInteger ( int arr [ ], int n, int k ) {\n  bool flag;\n  for ( int i = 0;\n  i < ( n - k + 1 );\n  i ++ ) {\n    flag = false;\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        cout << arr [ i + j ] << \" \";\n        flag = true;\n        break;\n      }\n    }\n    if ( ! flag ) cout << \"0\" << \" \";\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printFirstNegativeInteger ( int arr [ ], int n, int k ) {\n  bool flag;\n  for ( int i = 0;\n  i < ( n - k + 1 );\n  i ++ ) {\n    flag = false;\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        cout << arr [ i + j ] << \" \";\n        flag = true;\n        break;\n      }\n    }\n    if ( ! flag ) cout << \"0\" << \" \";\n  }\n}", "target_program": " static void printFirstNegativeInteger ( int arr [ ] , int n , int k ) {\n  boolean flag ;\n  for ( int i = 0 ;\n  i < ( n - k + 1 ) ;\n  i ++ ) {\n    flag = false ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        System . out . print ( ( arr [ i + j ] ) + \" \" ) ;\n        flag = true ;\n        break ;\n      }\n    }\n    if ( ! flag ) System . out . print ( \"0\" + \" \" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printFirstNegativeInteger ( int arr [ ], int n, int k ) {\n  bool flag;\n  for ( int i = 0;\n  i < ( n - k + 1 );\n  i ++ ) {\n    flag = false;\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      if ( arr [ i + j ] < 0 ) {\n        cout << arr [ i + j ] << \" \";\n        flag = true;\n        break;\n      }\n    }\n    if ( ! flag ) cout << \"0\" << \" \";\n  }\n}", "target_program": " def printFirstNegativeInteger ( arr , n , k ) :\n    for i in range ( 0 , ( n - k + 1 ) ) :\n        flag = False\n        for j in range ( 0 , k ) :\n            if ( arr [ i + j ] < 0 ) :\n                print ( arr [ i + j ] , end = \" \" )\n                flag = True\n                break\n        if ( not ( flag ) ) :\n            print ( \"0\" , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def numoffbt ( arr , n ) :\n    maxvalue = - 2147483647\n    minvalue = 2147483647\n    for i in range ( n ) :\n        maxvalue = max ( maxvalue , arr [ i ] )\n        minvalue = min ( minvalue , arr [ i ] )\n    mark = [ 0 for i in range ( maxvalue + 2 ) ]\n    value = [ 0 for i in range ( maxvalue + 2 ) ]\n    for i in range ( n ) :\n        mark [ arr [ i ] ] = 1\n        value [ arr [ i ] ] = 1\n    ans = 0\n    for i in range ( minvalue , maxvalue + 1 ) :\n        if ( mark [ i ] != 0 ) :\n            j = i + i\n            while ( j <= maxvalue and j // i <= i ) :\n                if ( mark [ j ] == 0 ) :\n                    continue\n                value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                if ( i != j // i ) :\n                    value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                j += i\n        ans += value [ i ]\n    return ans", "target_program": " static int numoffbt ( int arr [ ] , int n ) {\n  int maxvalue = - 2147483647 ;\n  int minvalue = 2147483647 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    maxvalue = Math . max ( maxvalue , arr [ i ] ) ;\n    minvalue = Math . min ( minvalue , arr [ i ] ) ;\n  }\n  int mark [ ] = new int [ maxvalue + 2 ] ;\n  int value [ ] = new int [ maxvalue + 2 ] ;\n  Arrays . fill ( mark , 0 ) ;\n  Arrays . fill ( value , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1 ;\n    value [ arr [ i ] ] = 1 ;\n  }\n  int ans = 0 ;\n  for ( int i = minvalue ;\n  i <= maxvalue ;\n  i ++ ) {\n    if ( mark [ i ] != 0 ) {\n      for ( int j = i + i ;\n      j <= maxvalue && j / i <= i ;\n      j += i ) {\n        if ( mark [ j ] == 0 ) continue ;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n      }\n    }\n    ans += value [ i ] ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numoffbt ( arr , n ) :\n    maxvalue = - 2147483647\n    minvalue = 2147483647\n    for i in range ( n ) :\n        maxvalue = max ( maxvalue , arr [ i ] )\n        minvalue = min ( minvalue , arr [ i ] )\n    mark = [ 0 for i in range ( maxvalue + 2 ) ]\n    value = [ 0 for i in range ( maxvalue + 2 ) ]\n    for i in range ( n ) :\n        mark [ arr [ i ] ] = 1\n        value [ arr [ i ] ] = 1\n    ans = 0\n    for i in range ( minvalue , maxvalue + 1 ) :\n        if ( mark [ i ] != 0 ) :\n            j = i + i\n            while ( j <= maxvalue and j // i <= i ) :\n                if ( mark [ j ] == 0 ) :\n                    continue\n                value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                if ( i != j // i ) :\n                    value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                j += i\n        ans += value [ i ]\n    return ans", "target_program": " int numoffbt ( int arr [ ], int n ) {\n  int maxvalue = INT_MIN, minvalue = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    maxvalue = max ( maxvalue, arr [ i ] );\n    minvalue = min ( minvalue, arr [ i ] );\n  }\n  int mark [ maxvalue + 2 ];\n  int value [ maxvalue + 2 ];\n  memset ( mark, 0, sizeof ( mark ) );\n  memset ( value, 0, sizeof ( value ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1;\n    value [ arr [ i ] ] = 1;\n  }\n  int ans = 0;\n  for ( int i = minvalue;\n  i <= maxvalue;\n  i ++ ) {\n    if ( mark [ i ] ) {\n      for ( int j = i + i;\n      j <= maxvalue && j / i <= i;\n      j += i ) {\n        if ( ! mark [ j ] ) continue;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n      }\n    }\n    ans += value [ i ];\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int numoffbt ( int arr [ ] , int n ) {\n  int maxvalue = - 2147483647 ;\n  int minvalue = 2147483647 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    maxvalue = Math . max ( maxvalue , arr [ i ] ) ;\n    minvalue = Math . min ( minvalue , arr [ i ] ) ;\n  }\n  int mark [ ] = new int [ maxvalue + 2 ] ;\n  int value [ ] = new int [ maxvalue + 2 ] ;\n  Arrays . fill ( mark , 0 ) ;\n  Arrays . fill ( value , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1 ;\n    value [ arr [ i ] ] = 1 ;\n  }\n  int ans = 0 ;\n  for ( int i = minvalue ;\n  i <= maxvalue ;\n  i ++ ) {\n    if ( mark [ i ] != 0 ) {\n      for ( int j = i + i ;\n      j <= maxvalue && j / i <= i ;\n      j += i ) {\n        if ( mark [ j ] == 0 ) continue ;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n      }\n    }\n    ans += value [ i ] ;\n  }\n  return ans ;\n}", "target_program": " def numoffbt ( arr , n ) :\n    maxvalue = - 2147483647\n    minvalue = 2147483647\n    for i in range ( n ) :\n        maxvalue = max ( maxvalue , arr [ i ] )\n        minvalue = min ( minvalue , arr [ i ] )\n    mark = [ 0 for i in range ( maxvalue + 2 ) ]\n    value = [ 0 for i in range ( maxvalue + 2 ) ]\n    for i in range ( n ) :\n        mark [ arr [ i ] ] = 1\n        value [ arr [ i ] ] = 1\n    ans = 0\n    for i in range ( minvalue , maxvalue + 1 ) :\n        if ( mark [ i ] != 0 ) :\n            j = i + i\n            while ( j <= maxvalue and j // i <= i ) :\n                if ( mark [ j ] == 0 ) :\n                    continue\n                value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                if ( i != j // i ) :\n                    value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                j += i\n        ans += value [ i ]\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int numoffbt ( int arr [ ] , int n ) {\n  int maxvalue = - 2147483647 ;\n  int minvalue = 2147483647 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    maxvalue = Math . max ( maxvalue , arr [ i ] ) ;\n    minvalue = Math . min ( minvalue , arr [ i ] ) ;\n  }\n  int mark [ ] = new int [ maxvalue + 2 ] ;\n  int value [ ] = new int [ maxvalue + 2 ] ;\n  Arrays . fill ( mark , 0 ) ;\n  Arrays . fill ( value , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1 ;\n    value [ arr [ i ] ] = 1 ;\n  }\n  int ans = 0 ;\n  for ( int i = minvalue ;\n  i <= maxvalue ;\n  i ++ ) {\n    if ( mark [ i ] != 0 ) {\n      for ( int j = i + i ;\n      j <= maxvalue && j / i <= i ;\n      j += i ) {\n        if ( mark [ j ] == 0 ) continue ;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n      }\n    }\n    ans += value [ i ] ;\n  }\n  return ans ;\n}", "target_program": " int numoffbt ( int arr [ ], int n ) {\n  int maxvalue = INT_MIN, minvalue = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    maxvalue = max ( maxvalue, arr [ i ] );\n    minvalue = min ( minvalue, arr [ i ] );\n  }\n  int mark [ maxvalue + 2 ];\n  int value [ maxvalue + 2 ];\n  memset ( mark, 0, sizeof ( mark ) );\n  memset ( value, 0, sizeof ( value ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1;\n    value [ arr [ i ] ] = 1;\n  }\n  int ans = 0;\n  for ( int i = minvalue;\n  i <= maxvalue;\n  i ++ ) {\n    if ( mark [ i ] ) {\n      for ( int j = i + i;\n      j <= maxvalue && j / i <= i;\n      j += i ) {\n        if ( ! mark [ j ] ) continue;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n      }\n    }\n    ans += value [ i ];\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numoffbt ( int arr [ ], int n ) {\n  int maxvalue = INT_MIN, minvalue = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    maxvalue = max ( maxvalue, arr [ i ] );\n    minvalue = min ( minvalue, arr [ i ] );\n  }\n  int mark [ maxvalue + 2 ];\n  int value [ maxvalue + 2 ];\n  memset ( mark, 0, sizeof ( mark ) );\n  memset ( value, 0, sizeof ( value ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1;\n    value [ arr [ i ] ] = 1;\n  }\n  int ans = 0;\n  for ( int i = minvalue;\n  i <= maxvalue;\n  i ++ ) {\n    if ( mark [ i ] ) {\n      for ( int j = i + i;\n      j <= maxvalue && j / i <= i;\n      j += i ) {\n        if ( ! mark [ j ] ) continue;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n      }\n    }\n    ans += value [ i ];\n  }\n  return ans;\n}", "target_program": " static int numoffbt ( int arr [ ] , int n ) {\n  int maxvalue = - 2147483647 ;\n  int minvalue = 2147483647 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    maxvalue = Math . max ( maxvalue , arr [ i ] ) ;\n    minvalue = Math . min ( minvalue , arr [ i ] ) ;\n  }\n  int mark [ ] = new int [ maxvalue + 2 ] ;\n  int value [ ] = new int [ maxvalue + 2 ] ;\n  Arrays . fill ( mark , 0 ) ;\n  Arrays . fill ( value , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1 ;\n    value [ arr [ i ] ] = 1 ;\n  }\n  int ans = 0 ;\n  for ( int i = minvalue ;\n  i <= maxvalue ;\n  i ++ ) {\n    if ( mark [ i ] != 0 ) {\n      for ( int j = i + i ;\n      j <= maxvalue && j / i <= i ;\n      j += i ) {\n        if ( mark [ j ] == 0 ) continue ;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] ) ;\n      }\n    }\n    ans += value [ i ] ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numoffbt ( int arr [ ], int n ) {\n  int maxvalue = INT_MIN, minvalue = INT_MAX;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    maxvalue = max ( maxvalue, arr [ i ] );\n    minvalue = min ( minvalue, arr [ i ] );\n  }\n  int mark [ maxvalue + 2 ];\n  int value [ maxvalue + 2 ];\n  memset ( mark, 0, sizeof ( mark ) );\n  memset ( value, 0, sizeof ( value ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    mark [ arr [ i ] ] = 1;\n    value [ arr [ i ] ] = 1;\n  }\n  int ans = 0;\n  for ( int i = minvalue;\n  i <= maxvalue;\n  i ++ ) {\n    if ( mark [ i ] ) {\n      for ( int j = i + i;\n      j <= maxvalue && j / i <= i;\n      j += i ) {\n        if ( ! mark [ j ] ) continue;\n        value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n        if ( i != j / i ) value [ j ] = value [ j ] + ( value [ i ] * value [ j / i ] );\n      }\n    }\n    ans += value [ i ];\n  }\n  return ans;\n}", "target_program": " def numoffbt ( arr , n ) :\n    maxvalue = - 2147483647\n    minvalue = 2147483647\n    for i in range ( n ) :\n        maxvalue = max ( maxvalue , arr [ i ] )\n        minvalue = min ( minvalue , arr [ i ] )\n    mark = [ 0 for i in range ( maxvalue + 2 ) ]\n    value = [ 0 for i in range ( maxvalue + 2 ) ]\n    for i in range ( n ) :\n        mark [ arr [ i ] ] = 1\n        value [ arr [ i ] ] = 1\n    ans = 0\n    for i in range ( minvalue , maxvalue + 1 ) :\n        if ( mark [ i ] != 0 ) :\n            j = i + i\n            while ( j <= maxvalue and j // i <= i ) :\n                if ( mark [ j ] == 0 ) :\n                    continue\n                value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                if ( i != j // i ) :\n                    value [ j ] = value [ j ] + ( value [ i ] * value [ j // i ] )\n                j += i\n        ans += value [ i ]\n    return ans"}
{"source": "python", "target": "java", "source_program": " def numberOfSticks ( x ) :\n    return ( 3 * x * ( x + 1 ) ) / 2", "target_program": " public static int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numberOfSticks ( x ) :\n    return ( 3 * x * ( x + 1 ) ) / 2", "target_program": " int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " public static int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2 ;\n}", "target_program": " def numberOfSticks ( x ) :\n    return ( 3 * x * ( x + 1 ) ) / 2"}
{"source": "java", "target": "cpp", "source_program": " public static int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2 ;\n}", "target_program": " int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2;\n}", "target_program": " public static int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numberOfSticks ( int x ) {\n  return ( 3 * x * ( x + 1 ) ) / 2;\n}", "target_program": " def numberOfSticks ( x ) :\n    return ( 3 * x * ( x + 1 ) ) / 2"}
{"source": "python", "target": "java", "source_program": " def KMaxCombinations ( A , B , N , K ) :\n    pq = PriorityQueue ( )\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            a = A [ i ] + B [ j ]\n            pq.put ( ( - a , a ) )\n    count = 0\n    while ( count < K ) :\n        print ( pq.get ( ) [ 1 ] )\n        count = count + 1", "target_program": " static void KMaxCombinations ( int A [ ] , int B [ ] , int N , int K ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) pq . add ( A [ i ] + B [ j ] ) ;\n  int count = 0 ;\n  while ( count < K ) {\n    System . out . println ( pq . peek ( ) ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def KMaxCombinations ( A , B , N , K ) :\n    pq = PriorityQueue ( )\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            a = A [ i ] + B [ j ]\n            pq.put ( ( - a , a ) )\n    count = 0\n    while ( count < K ) :\n        print ( pq.get ( ) [ 1 ] )\n        count = count + 1", "target_program": " void KMaxCombinations ( int A [ ], int B [ ], int N, int K ) {\n  priority_queue < int > pq;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) pq . push ( A [ i ] + B [ j ] );\n  int count = 0;\n  while ( count < K ) {\n    cout << pq . top ( ) << endl;\n    pq . pop ( );\n    count ++;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void KMaxCombinations ( int A [ ] , int B [ ] , int N , int K ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) pq . add ( A [ i ] + B [ j ] ) ;\n  int count = 0 ;\n  while ( count < K ) {\n    System . out . println ( pq . peek ( ) ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n}", "target_program": " def KMaxCombinations ( A , B , N , K ) :\n    pq = PriorityQueue ( )\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            a = A [ i ] + B [ j ]\n            pq.put ( ( - a , a ) )\n    count = 0\n    while ( count < K ) :\n        print ( pq.get ( ) [ 1 ] )\n        count = count + 1"}
{"source": "java", "target": "cpp", "source_program": " static void KMaxCombinations ( int A [ ] , int B [ ] , int N , int K ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) pq . add ( A [ i ] + B [ j ] ) ;\n  int count = 0 ;\n  while ( count < K ) {\n    System . out . println ( pq . peek ( ) ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n}", "target_program": " void KMaxCombinations ( int A [ ], int B [ ], int N, int K ) {\n  priority_queue < int > pq;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) pq . push ( A [ i ] + B [ j ] );\n  int count = 0;\n  while ( count < K ) {\n    cout << pq . top ( ) << endl;\n    pq . pop ( );\n    count ++;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void KMaxCombinations ( int A [ ], int B [ ], int N, int K ) {\n  priority_queue < int > pq;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) pq . push ( A [ i ] + B [ j ] );\n  int count = 0;\n  while ( count < K ) {\n    cout << pq . top ( ) << endl;\n    pq . pop ( );\n    count ++;\n  }\n}", "target_program": " static void KMaxCombinations ( int A [ ] , int B [ ] , int N , int K ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < Integer > ( Collections . reverseOrder ( ) ) ;\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) pq . add ( A [ i ] + B [ j ] ) ;\n  int count = 0 ;\n  while ( count < K ) {\n    System . out . println ( pq . peek ( ) ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void KMaxCombinations ( int A [ ], int B [ ], int N, int K ) {\n  priority_queue < int > pq;\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) pq . push ( A [ i ] + B [ j ] );\n  int count = 0;\n  while ( count < K ) {\n    cout << pq . top ( ) << endl;\n    pq . pop ( );\n    count ++;\n  }\n}", "target_program": " def KMaxCombinations ( A , B , N , K ) :\n    pq = PriorityQueue ( )\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            a = A [ i ] + B [ j ]\n            pq.put ( ( - a , a ) )\n    count = 0\n    while ( count < K ) :\n        print ( pq.get ( ) [ 1 ] )\n        count = count + 1"}
{"source": "python", "target": "java", "source_program": " def constructArr ( arr , pair , n ) :\n    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) // 2\n    for i in range ( 1 , n ) :\n        arr [ i ] = pair [ i - 1 ] - arr [ 0 ]", "target_program": " static void constructArr ( int arr [ ] , int pair [ ] , int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def constructArr ( arr , pair , n ) :\n    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) // 2\n    for i in range ( 1 , n ) :\n        arr [ i ] = pair [ i - 1 ] - arr [ 0 ]", "target_program": " void constructArr ( int arr [ ], int pair [ ], int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2;\n  for ( int i = 1;\n  i < n;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static void constructArr ( int arr [ ] , int pair [ ] , int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;\n}", "target_program": " def constructArr ( arr , pair , n ) :\n    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) // 2\n    for i in range ( 1 , n ) :\n        arr [ i ] = pair [ i - 1 ] - arr [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static void constructArr ( int arr [ ] , int pair [ ] , int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;\n}", "target_program": " void constructArr ( int arr [ ], int pair [ ], int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2;\n  for ( int i = 1;\n  i < n;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void constructArr ( int arr [ ], int pair [ ], int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2;\n  for ( int i = 1;\n  i < n;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ];\n}", "target_program": " static void constructArr ( int arr [ ] , int pair [ ] , int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void constructArr ( int arr [ ], int pair [ ], int n ) {\n  arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) / 2;\n  for ( int i = 1;\n  i < n;\n  i ++ ) arr [ i ] = pair [ i - 1 ] - arr [ 0 ];\n}", "target_program": " def constructArr ( arr , pair , n ) :\n    arr [ 0 ] = ( pair [ 0 ] + pair [ 1 ] - pair [ n - 1 ] ) // 2\n    for i in range ( 1 , n ) :\n        arr [ i ] = pair [ i - 1 ] - arr [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def pairs ( arr , n , k ) :\n    smallest = 999999999999\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] + arr [ j ] - k ) < smallest :\n                smallest = abs ( arr [ i ] + arr [ j ] - k )\n                count = 1\n            elif abs ( arr [ i ] + arr [ j ] - k ) == smallest :\n                count += 1\n    print ( \"Minimal Value = \" , smallest )\n    print ( \"Total Pairs = \" , count )", "target_program": " static void pairs ( int arr [ ] , int n , int k ) {\n  int smallest = Integer . MAX_VALUE ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) {\n    if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;\n      count = 1 ;\n    }\n    else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ;\n  }\n  System . out . println ( \"Minimal Value = \" + smallest ) ;\n  System . out . println ( \"Total Pairs = \" + count ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pairs ( arr , n , k ) :\n    smallest = 999999999999\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] + arr [ j ] - k ) < smallest :\n                smallest = abs ( arr [ i ] + arr [ j ] - k )\n                count = 1\n            elif abs ( arr [ i ] + arr [ j ] - k ) == smallest :\n                count += 1\n    print ( \"Minimal Value = \" , smallest )\n    print ( \"Total Pairs = \" , count )", "target_program": " void pairs ( int arr [ ], int n, int k ) {\n  int smallest = INT_MAX;\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) {\n    if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = abs ( arr [ i ] + arr [ j ] - k );\n      count = 1;\n    }\n    else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++;\n  }\n  cout << \"Minimal Value = \" << smallest << \"\\n\";\n  cout << \"Total Pairs = \" << count << \"\\n\";\n}"}
{"source": "java", "target": "python", "source_program": " static void pairs ( int arr [ ] , int n , int k ) {\n  int smallest = Integer . MAX_VALUE ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) {\n    if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;\n      count = 1 ;\n    }\n    else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ;\n  }\n  System . out . println ( \"Minimal Value = \" + smallest ) ;\n  System . out . println ( \"Total Pairs = \" + count ) ;\n}", "target_program": " def pairs ( arr , n , k ) :\n    smallest = 999999999999\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] + arr [ j ] - k ) < smallest :\n                smallest = abs ( arr [ i ] + arr [ j ] - k )\n                count = 1\n            elif abs ( arr [ i ] + arr [ j ] - k ) == smallest :\n                count += 1\n    print ( \"Minimal Value = \" , smallest )\n    print ( \"Total Pairs = \" , count )"}
{"source": "java", "target": "cpp", "source_program": " static void pairs ( int arr [ ] , int n , int k ) {\n  int smallest = Integer . MAX_VALUE ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) {\n    if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;\n      count = 1 ;\n    }\n    else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ;\n  }\n  System . out . println ( \"Minimal Value = \" + smallest ) ;\n  System . out . println ( \"Total Pairs = \" + count ) ;\n}", "target_program": " void pairs ( int arr [ ], int n, int k ) {\n  int smallest = INT_MAX;\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) {\n    if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = abs ( arr [ i ] + arr [ j ] - k );\n      count = 1;\n    }\n    else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++;\n  }\n  cout << \"Minimal Value = \" << smallest << \"\\n\";\n  cout << \"Total Pairs = \" << count << \"\\n\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void pairs ( int arr [ ], int n, int k ) {\n  int smallest = INT_MAX;\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) {\n    if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = abs ( arr [ i ] + arr [ j ] - k );\n      count = 1;\n    }\n    else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++;\n  }\n  cout << \"Minimal Value = \" << smallest << \"\\n\";\n  cout << \"Total Pairs = \" << count << \"\\n\";\n}", "target_program": " static void pairs ( int arr [ ] , int n , int k ) {\n  int smallest = Integer . MAX_VALUE ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = i + 1 ;\n  j < n ;\n  j ++ ) {\n    if ( Math . abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = Math . abs ( arr [ i ] + arr [ j ] - k ) ;\n      count = 1 ;\n    }\n    else if ( Math . abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++ ;\n  }\n  System . out . println ( \"Minimal Value = \" + smallest ) ;\n  System . out . println ( \"Total Pairs = \" + count ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void pairs ( int arr [ ], int n, int k ) {\n  int smallest = INT_MAX;\n  int count = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = i + 1;\n  j < n;\n  j ++ ) {\n    if ( abs ( arr [ i ] + arr [ j ] - k ) < smallest ) {\n      smallest = abs ( arr [ i ] + arr [ j ] - k );\n      count = 1;\n    }\n    else if ( abs ( arr [ i ] + arr [ j ] - k ) == smallest ) count ++;\n  }\n  cout << \"Minimal Value = \" << smallest << \"\\n\";\n  cout << \"Total Pairs = \" << count << \"\\n\";\n}", "target_program": " def pairs ( arr , n , k ) :\n    smallest = 999999999999\n    count = 0\n    for i in range ( n ) :\n        for j in range ( i + 1 , n ) :\n            if abs ( arr [ i ] + arr [ j ] - k ) < smallest :\n                smallest = abs ( arr [ i ] + arr [ j ] - k )\n                count = 1\n            elif abs ( arr [ i ] + arr [ j ] - k ) == smallest :\n                count += 1\n    print ( \"Minimal Value = \" , smallest )\n    print ( \"Total Pairs = \" , count )"}
{"source": "python", "target": "java", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    return ( end - start + 1 )", "target_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  return ( end - start + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    return ( end - start + 1 )", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  return ( end - start + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  return ( end - start + 1 ) ;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    return ( end - start + 1 )"}
{"source": "java", "target": "cpp", "source_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  return ( end - start + 1 ) ;\n}", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  return ( end - start + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  return ( end - start + 1 );\n}", "target_program": " static int maxSubArraySum ( int a [ ] , int size ) {\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 , start = 0 , end = 0 , s = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here += a [ i ] ;\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here ;\n      start = s ;\n      end = i ;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0 ;\n      s = i + 1 ;\n    }\n  }\n  return ( end - start + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0, start = 0, end = 0, s = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here += a [ i ];\n    if ( max_so_far < max_ending_here ) {\n      max_so_far = max_ending_here;\n      start = s;\n      end = i;\n    }\n    if ( max_ending_here < 0 ) {\n      max_ending_here = 0;\n      s = i + 1;\n    }\n  }\n  return ( end - start + 1 );\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range ( 0 , size ) :\n        max_ending_here += a [ i ]\n        if max_so_far < max_ending_here :\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0 :\n            max_ending_here = 0\n            s = i + 1\n    return ( end - start + 1 )"}
{"source": "python", "target": "java", "source_program": " def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    for i in range ( 4 , n + 1 ) :\n        dp.append ( i )\n        for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 ) :\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n    return dp [ n ]", "target_program": " static int getMinSquares ( int n ) {\n  if ( n <= 3 ) return n ;\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = 0 ;\n  dp [ 1 ] = 1 ;\n  dp [ 2 ] = 2 ;\n  dp [ 3 ] = 3 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = i ;\n    for ( int x = 1 ;\n    x <= Math . ceil ( Math . sqrt ( i ) ) ;\n    x ++ ) {\n      int temp = x * x ;\n      if ( temp > i ) break ;\n      else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - temp ] ) ;\n    }\n  }\n  int res = dp [ n ] ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    for i in range ( 4 , n + 1 ) :\n        dp.append ( i )\n        for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 ) :\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n    return dp [ n ]", "target_program": " int getMinSquares ( int n ) {\n  int * dp = new int [ n + 1 ];\n  dp [ 0 ] = 0;\n  dp [ 1 ] = 1;\n  dp [ 2 ] = 2;\n  dp [ 3 ] = 3;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = i;\n    for ( int x = 1;\n    x <= ceil ( sqrt ( i ) );\n    x ++ ) {\n      int temp = x * x;\n      if ( temp > i ) break;\n      else dp [ i ] = min ( dp [ i ], 1 + dp [ i - temp ] );\n    }\n  }\n  int res = dp [ n ];\n  delete [ ] dp;\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int getMinSquares ( int n ) {\n  if ( n <= 3 ) return n ;\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = 0 ;\n  dp [ 1 ] = 1 ;\n  dp [ 2 ] = 2 ;\n  dp [ 3 ] = 3 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = i ;\n    for ( int x = 1 ;\n    x <= Math . ceil ( Math . sqrt ( i ) ) ;\n    x ++ ) {\n      int temp = x * x ;\n      if ( temp > i ) break ;\n      else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - temp ] ) ;\n    }\n  }\n  int res = dp [ n ] ;\n  return res ;\n}", "target_program": " def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    for i in range ( 4 , n + 1 ) :\n        dp.append ( i )\n        for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 ) :\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n    return dp [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int getMinSquares ( int n ) {\n  if ( n <= 3 ) return n ;\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = 0 ;\n  dp [ 1 ] = 1 ;\n  dp [ 2 ] = 2 ;\n  dp [ 3 ] = 3 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = i ;\n    for ( int x = 1 ;\n    x <= Math . ceil ( Math . sqrt ( i ) ) ;\n    x ++ ) {\n      int temp = x * x ;\n      if ( temp > i ) break ;\n      else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - temp ] ) ;\n    }\n  }\n  int res = dp [ n ] ;\n  return res ;\n}", "target_program": " int getMinSquares ( int n ) {\n  int * dp = new int [ n + 1 ];\n  dp [ 0 ] = 0;\n  dp [ 1 ] = 1;\n  dp [ 2 ] = 2;\n  dp [ 3 ] = 3;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = i;\n    for ( int x = 1;\n    x <= ceil ( sqrt ( i ) );\n    x ++ ) {\n      int temp = x * x;\n      if ( temp > i ) break;\n      else dp [ i ] = min ( dp [ i ], 1 + dp [ i - temp ] );\n    }\n  }\n  int res = dp [ n ];\n  delete [ ] dp;\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getMinSquares ( int n ) {\n  int * dp = new int [ n + 1 ];\n  dp [ 0 ] = 0;\n  dp [ 1 ] = 1;\n  dp [ 2 ] = 2;\n  dp [ 3 ] = 3;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = i;\n    for ( int x = 1;\n    x <= ceil ( sqrt ( i ) );\n    x ++ ) {\n      int temp = x * x;\n      if ( temp > i ) break;\n      else dp [ i ] = min ( dp [ i ], 1 + dp [ i - temp ] );\n    }\n  }\n  int res = dp [ n ];\n  delete [ ] dp;\n  return res;\n}", "target_program": " static int getMinSquares ( int n ) {\n  if ( n <= 3 ) return n ;\n  int dp [ ] = new int [ n + 1 ] ;\n  dp [ 0 ] = 0 ;\n  dp [ 1 ] = 1 ;\n  dp [ 2 ] = 2 ;\n  dp [ 3 ] = 3 ;\n  for ( int i = 4 ;\n  i <= n ;\n  i ++ ) {\n    dp [ i ] = i ;\n    for ( int x = 1 ;\n    x <= Math . ceil ( Math . sqrt ( i ) ) ;\n    x ++ ) {\n      int temp = x * x ;\n      if ( temp > i ) break ;\n      else dp [ i ] = Math . min ( dp [ i ] , 1 + dp [ i - temp ] ) ;\n    }\n  }\n  int res = dp [ n ] ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getMinSquares ( int n ) {\n  int * dp = new int [ n + 1 ];\n  dp [ 0 ] = 0;\n  dp [ 1 ] = 1;\n  dp [ 2 ] = 2;\n  dp [ 3 ] = 3;\n  for ( int i = 4;\n  i <= n;\n  i ++ ) {\n    dp [ i ] = i;\n    for ( int x = 1;\n    x <= ceil ( sqrt ( i ) );\n    x ++ ) {\n      int temp = x * x;\n      if ( temp > i ) break;\n      else dp [ i ] = min ( dp [ i ], 1 + dp [ i - temp ] );\n    }\n  }\n  int res = dp [ n ];\n  delete [ ] dp;\n  return res;\n}", "target_program": " def getMinSquares ( n ) :\n    dp = [ 0 , 1 , 2 , 3 ]\n    for i in range ( 4 , n + 1 ) :\n        dp.append ( i )\n        for x in range ( 1 , int ( ceil ( sqrt ( i ) ) ) + 1 ) :\n            temp = x * x ;\n            if temp > i :\n                break\n            else :\n                dp [ i ] = min ( dp [ i ] , 1 + dp [ i - temp ] )\n    return dp [ n ]"}
{"source": "python", "target": "java", "source_program": " def Right_most_setbit ( num ) :\n    pos = 1\n    for i in range ( INT_SIZE ) :\n        if not ( num & ( 1 << i ) ) :\n            pos += 1\n        else :\n            break\n    return pos", "target_program": " static int Right_most_setbit ( int num ) {\n  int pos = 1 ;\n  for ( int i = 0 ;\n  i < INT_SIZE ;\n  i ++ ) {\n    if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;\n    else break ;\n  }\n  return pos ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def Right_most_setbit ( num ) :\n    pos = 1\n    for i in range ( INT_SIZE ) :\n        if not ( num & ( 1 << i ) ) :\n            pos += 1\n        else :\n            break\n    return pos", "target_program": " int Right_most_setbit ( int num ) {\n  int pos = 1;\n  for ( int i = 0;\n  i < INT_SIZE;\n  i ++ ) {\n    if ( ! ( num & ( 1 << i ) ) ) pos ++;\n    else break;\n  }\n  return pos;\n}"}
{"source": "java", "target": "python", "source_program": " static int Right_most_setbit ( int num ) {\n  int pos = 1 ;\n  for ( int i = 0 ;\n  i < INT_SIZE ;\n  i ++ ) {\n    if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;\n    else break ;\n  }\n  return pos ;\n}", "target_program": " def Right_most_setbit ( num ) :\n    pos = 1\n    for i in range ( INT_SIZE ) :\n        if not ( num & ( 1 << i ) ) :\n            pos += 1\n        else :\n            break\n    return pos"}
{"source": "java", "target": "cpp", "source_program": " static int Right_most_setbit ( int num ) {\n  int pos = 1 ;\n  for ( int i = 0 ;\n  i < INT_SIZE ;\n  i ++ ) {\n    if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;\n    else break ;\n  }\n  return pos ;\n}", "target_program": " int Right_most_setbit ( int num ) {\n  int pos = 1;\n  for ( int i = 0;\n  i < INT_SIZE;\n  i ++ ) {\n    if ( ! ( num & ( 1 << i ) ) ) pos ++;\n    else break;\n  }\n  return pos;\n}"}
{"source": "cpp", "target": "java", "source_program": " int Right_most_setbit ( int num ) {\n  int pos = 1;\n  for ( int i = 0;\n  i < INT_SIZE;\n  i ++ ) {\n    if ( ! ( num & ( 1 << i ) ) ) pos ++;\n    else break;\n  }\n  return pos;\n}", "target_program": " static int Right_most_setbit ( int num ) {\n  int pos = 1 ;\n  for ( int i = 0 ;\n  i < INT_SIZE ;\n  i ++ ) {\n    if ( ( num & ( 1 << i ) ) == 0 ) pos ++ ;\n    else break ;\n  }\n  return pos ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int Right_most_setbit ( int num ) {\n  int pos = 1;\n  for ( int i = 0;\n  i < INT_SIZE;\n  i ++ ) {\n    if ( ! ( num & ( 1 << i ) ) ) pos ++;\n    else break;\n  }\n  return pos;\n}", "target_program": " def Right_most_setbit ( num ) :\n    pos = 1\n    for i in range ( INT_SIZE ) :\n        if not ( num & ( 1 << i ) ) :\n            pos += 1\n        else :\n            break\n    return pos"}
{"source": "python", "target": "java", "source_program": " def multiplyBySeven ( n ) :\n    return ( ( n << 3 ) - n )", "target_program": " static int multiplyBySeven ( int n ) {\n  return ( ( n << 3 ) - n ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def multiplyBySeven ( n ) :\n    return ( ( n << 3 ) - n )", "target_program": " long multiplyBySeven ( long n ) {\n  return ( ( n << 3 ) - n );\n}"}
{"source": "java", "target": "python", "source_program": " static int multiplyBySeven ( int n ) {\n  return ( ( n << 3 ) - n ) ;\n}", "target_program": " def multiplyBySeven ( n ) :\n    return ( ( n << 3 ) - n )"}
{"source": "java", "target": "cpp", "source_program": " static int multiplyBySeven ( int n ) {\n  return ( ( n << 3 ) - n ) ;\n}", "target_program": " long multiplyBySeven ( long n ) {\n  return ( ( n << 3 ) - n );\n}"}
{"source": "cpp", "target": "java", "source_program": " long multiplyBySeven ( long n ) {\n  return ( ( n << 3 ) - n );\n}", "target_program": " static int multiplyBySeven ( int n ) {\n  return ( ( n << 3 ) - n ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long multiplyBySeven ( long n ) {\n  return ( ( n << 3 ) - n );\n}", "target_program": " def multiplyBySeven ( n ) :\n    return ( ( n << 3 ) - n )"}
{"source": "python", "target": "java", "source_program": " def maxArea ( a , b , c , d ) :\n    semiperimeter = ( a + b + c + d ) / 2\n    return math.sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) )", "target_program": " static double maxArea ( double a , double b , double c , double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2 ;\n  return Math . sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxArea ( a , b , c , d ) :\n    semiperimeter = ( a + b + c + d ) / 2\n    return math.sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) )", "target_program": " double maxArea ( double a, double b, double c, double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2;\n  return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) );\n}"}
{"source": "java", "target": "python", "source_program": " static double maxArea ( double a , double b , double c , double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2 ;\n  return Math . sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) ) ;\n}", "target_program": " def maxArea ( a , b , c , d ) :\n    semiperimeter = ( a + b + c + d ) / 2\n    return math.sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) )"}
{"source": "java", "target": "cpp", "source_program": " static double maxArea ( double a , double b , double c , double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2 ;\n  return Math . sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) ) ;\n}", "target_program": " double maxArea ( double a, double b, double c, double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2;\n  return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " double maxArea ( double a, double b, double c, double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2;\n  return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) );\n}", "target_program": " static double maxArea ( double a , double b , double c , double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2 ;\n  return Math . sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double maxArea ( double a, double b, double c, double d ) {\n  double semiperimeter = ( a + b + c + d ) / 2;\n  return sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) );\n}", "target_program": " def maxArea ( a , b , c , d ) :\n    semiperimeter = ( a + b + c + d ) / 2\n    return math.sqrt ( ( semiperimeter - a ) * ( semiperimeter - b ) * ( semiperimeter - c ) * ( semiperimeter - d ) )"}
{"source": "python", "target": "java", "source_program": " def translate ( st ) :\n    l = len ( st )\n    if ( l < 2 ) :\n        return\n    i = 0\n    j = 0\n    while ( j < l - 1 ) :\n        if ( st [ j ] == 'A' and st [ j + 1 ] == 'B' ) :\n            j += 2\n            st [ i ] = 'C'\n            i += 1\n            continue\n        st [ i ] = st [ j ]\n        i += 1\n        j += 1\n    if ( j == l - 1 ) :\n        st [ i ] = st [ j ]\n        i += 1\n    st [ i ] = ' '\n    st [ l - 1 ] = ' '", "target_program": " static void translate ( char str [ ] ) {\n  int len = str . length ;\n  if ( len < 2 ) return ;\n  int i = 0 ;\n  int j = 0 ;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2 ;\n      str [ i ++ ] = 'C' ;\n      continue ;\n    }\n    str [ i ++ ] = str [ j ++ ] ;\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;\n  str [ i ] = ' ' ;\n  str [ len - 1 ] = ' ' ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def translate ( st ) :\n    l = len ( st )\n    if ( l < 2 ) :\n        return\n    i = 0\n    j = 0\n    while ( j < l - 1 ) :\n        if ( st [ j ] == 'A' and st [ j + 1 ] == 'B' ) :\n            j += 2\n            st [ i ] = 'C'\n            i += 1\n            continue\n        st [ i ] = st [ j ]\n        i += 1\n        j += 1\n    if ( j == l - 1 ) :\n        st [ i ] = st [ j ]\n        i += 1\n    st [ i ] = ' '\n    st [ l - 1 ] = ' '", "target_program": " void translate ( char * str ) {\n  int len = strlen ( str );\n  if ( len < 2 ) return;\n  int i = 0;\n  int j = 0;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2;\n      str [ i ++ ] = 'C';\n      continue;\n    }\n    str [ i ++ ] = str [ j ++ ];\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ];\n  str [ i ] = '';\n}"}
{"source": "java", "target": "python", "source_program": " static void translate ( char str [ ] ) {\n  int len = str . length ;\n  if ( len < 2 ) return ;\n  int i = 0 ;\n  int j = 0 ;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2 ;\n      str [ i ++ ] = 'C' ;\n      continue ;\n    }\n    str [ i ++ ] = str [ j ++ ] ;\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;\n  str [ i ] = ' ' ;\n  str [ len - 1 ] = ' ' ;\n}", "target_program": " def translate ( st ) :\n    l = len ( st )\n    if ( l < 2 ) :\n        return\n    i = 0\n    j = 0\n    while ( j < l - 1 ) :\n        if ( st [ j ] == 'A' and st [ j + 1 ] == 'B' ) :\n            j += 2\n            st [ i ] = 'C'\n            i += 1\n            continue\n        st [ i ] = st [ j ]\n        i += 1\n        j += 1\n    if ( j == l - 1 ) :\n        st [ i ] = st [ j ]\n        i += 1\n    st [ i ] = ' '\n    st [ l - 1 ] = ' '"}
{"source": "java", "target": "cpp", "source_program": " static void translate ( char str [ ] ) {\n  int len = str . length ;\n  if ( len < 2 ) return ;\n  int i = 0 ;\n  int j = 0 ;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2 ;\n      str [ i ++ ] = 'C' ;\n      continue ;\n    }\n    str [ i ++ ] = str [ j ++ ] ;\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;\n  str [ i ] = ' ' ;\n  str [ len - 1 ] = ' ' ;\n}", "target_program": " void translate ( char * str ) {\n  int len = strlen ( str );\n  if ( len < 2 ) return;\n  int i = 0;\n  int j = 0;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2;\n      str [ i ++ ] = 'C';\n      continue;\n    }\n    str [ i ++ ] = str [ j ++ ];\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ];\n  str [ i ] = '';\n}"}
{"source": "cpp", "target": "java", "source_program": " void translate ( char * str ) {\n  int len = strlen ( str );\n  if ( len < 2 ) return;\n  int i = 0;\n  int j = 0;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2;\n      str [ i ++ ] = 'C';\n      continue;\n    }\n    str [ i ++ ] = str [ j ++ ];\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ];\n  str [ i ] = '';\n}", "target_program": " static void translate ( char str [ ] ) {\n  int len = str . length ;\n  if ( len < 2 ) return ;\n  int i = 0 ;\n  int j = 0 ;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2 ;\n      str [ i ++ ] = 'C' ;\n      continue ;\n    }\n    str [ i ++ ] = str [ j ++ ] ;\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ] ;\n  str [ i ] = ' ' ;\n  str [ len - 1 ] = ' ' ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void translate ( char * str ) {\n  int len = strlen ( str );\n  if ( len < 2 ) return;\n  int i = 0;\n  int j = 0;\n  while ( j < len - 1 ) {\n    if ( str [ j ] == 'A' && str [ j + 1 ] == 'B' ) {\n      j = j + 2;\n      str [ i ++ ] = 'C';\n      continue;\n    }\n    str [ i ++ ] = str [ j ++ ];\n  }\n  if ( j == len - 1 ) str [ i ++ ] = str [ j ];\n  str [ i ] = '';\n}", "target_program": " def translate ( st ) :\n    l = len ( st )\n    if ( l < 2 ) :\n        return\n    i = 0\n    j = 0\n    while ( j < l - 1 ) :\n        if ( st [ j ] == 'A' and st [ j + 1 ] == 'B' ) :\n            j += 2\n            st [ i ] = 'C'\n            i += 1\n            continue\n        st [ i ] = st [ j ]\n        i += 1\n        j += 1\n    if ( j == l - 1 ) :\n        st [ i ] = st [ j ]\n        i += 1\n    st [ i ] = ' '\n    st [ l - 1 ] = ' '"}
{"source": "python", "target": "java", "source_program": " def calculate ( A , B , C , M ) :\n    res = pow ( B , C , M - 1 )\n    ans = pow ( A , res , M )\n    return ans", "target_program": " static int Calculate ( int A , int B , int C , int M ) {\n  int res , ans ;\n  res = power ( B , C , M - 1 ) ;\n  ans = power ( A , res , M ) ;\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def calculate ( A , B , C , M ) :\n    res = pow ( B , C , M - 1 )\n    ans = pow ( A , res , M )\n    return ans", "target_program": " unsigned int Calculate ( unsigned int A, unsigned int B, unsigned int C, unsigned int M ) {\n  unsigned int res, ans;\n  res = power ( B, C, M - 1 );\n  ans = power ( A, res, M );\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int Calculate ( int A , int B , int C , int M ) {\n  int res , ans ;\n  res = power ( B , C , M - 1 ) ;\n  ans = power ( A , res , M ) ;\n  return ans ;\n}", "target_program": " def calculate ( A , B , C , M ) :\n    res = pow ( B , C , M - 1 )\n    ans = pow ( A , res , M )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int Calculate ( int A , int B , int C , int M ) {\n  int res , ans ;\n  res = power ( B , C , M - 1 ) ;\n  ans = power ( A , res , M ) ;\n  return ans ;\n}", "target_program": " unsigned int Calculate ( unsigned int A, unsigned int B, unsigned int C, unsigned int M ) {\n  unsigned int res, ans;\n  res = power ( B, C, M - 1 );\n  ans = power ( A, res, M );\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int Calculate ( unsigned int A, unsigned int B, unsigned int C, unsigned int M ) {\n  unsigned int res, ans;\n  res = power ( B, C, M - 1 );\n  ans = power ( A, res, M );\n  return ans;\n}", "target_program": " static int Calculate ( int A , int B , int C , int M ) {\n  int res , ans ;\n  res = power ( B , C , M - 1 ) ;\n  ans = power ( A , res , M ) ;\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int Calculate ( unsigned int A, unsigned int B, unsigned int C, unsigned int M ) {\n  unsigned int res, ans;\n  res = power ( B, C, M - 1 );\n  ans = power ( A, res, M );\n  return ans;\n}", "target_program": " def calculate ( A , B , C , M ) :\n    res = pow ( B , C , M - 1 )\n    ans = pow ( A , res , M )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def checkPair ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    if sum % 2 != 0 :\n        return False\n    sum = sum / 2\n    for i in range ( n ) :\n        val = sum - arr [ i ]\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n        if val in s :\n            print ( \"Pair elements are\" , arr [ i ] , \"and\" , int ( val ) )", "target_program": " static boolean checkPair ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n  }\n  if ( sum % 2 != 0 ) {\n    return false ;\n  }\n  sum = sum / 2 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int val = sum - arr [ i ] ;\n    if ( s . contains ( val ) && val == ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n      System . out . printf ( \"Pair elements are %d and %d\\n\" , arr [ i ] , val ) ;\n      return true ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkPair ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    if sum % 2 != 0 :\n        return False\n    sum = sum / 2\n    for i in range ( n ) :\n        val = sum - arr [ i ]\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n        if val in s :\n            print ( \"Pair elements are\" , arr [ i ] , \"and\" , int ( val ) )", "target_program": " bool checkPair ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  if ( sum % 2 != 0 ) return false;\n  sum = sum / 2;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int val = sum - arr [ i ];\n    if ( s . find ( val ) != s . end ( ) ) {\n      printf ( \"Pair elements are %d and %d\\n\", arr [ i ], val );\n      return true;\n    }\n    s . insert ( arr [ i ] );\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean checkPair ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n  }\n  if ( sum % 2 != 0 ) {\n    return false ;\n  }\n  sum = sum / 2 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int val = sum - arr [ i ] ;\n    if ( s . contains ( val ) && val == ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n      System . out . printf ( \"Pair elements are %d and %d\\n\" , arr [ i ] , val ) ;\n      return true ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n  return false ;\n}", "target_program": " def checkPair ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    if sum % 2 != 0 :\n        return False\n    sum = sum / 2\n    for i in range ( n ) :\n        val = sum - arr [ i ]\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n        if val in s :\n            print ( \"Pair elements are\" , arr [ i ] , \"and\" , int ( val ) )"}
{"source": "java", "target": "cpp", "source_program": " static boolean checkPair ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n  }\n  if ( sum % 2 != 0 ) {\n    return false ;\n  }\n  sum = sum / 2 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int val = sum - arr [ i ] ;\n    if ( s . contains ( val ) && val == ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n      System . out . printf ( \"Pair elements are %d and %d\\n\" , arr [ i ] , val ) ;\n      return true ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n  return false ;\n}", "target_program": " bool checkPair ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  if ( sum % 2 != 0 ) return false;\n  sum = sum / 2;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int val = sum - arr [ i ];\n    if ( s . find ( val ) != s . end ( ) ) {\n      printf ( \"Pair elements are %d and %d\\n\", arr [ i ], val );\n      return true;\n    }\n    s . insert ( arr [ i ] );\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool checkPair ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  if ( sum % 2 != 0 ) return false;\n  sum = sum / 2;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int val = sum - arr [ i ];\n    if ( s . find ( val ) != s . end ( ) ) {\n      printf ( \"Pair elements are %d and %d\\n\", arr [ i ], val );\n      return true;\n    }\n    s . insert ( arr [ i ] );\n  }\n  return false;\n}", "target_program": " static boolean checkPair ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n  }\n  if ( sum % 2 != 0 ) {\n    return false ;\n  }\n  sum = sum / 2 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int val = sum - arr [ i ] ;\n    if ( s . contains ( val ) && val == ( int ) s . toArray ( ) [ s . size ( ) - 1 ] ) {\n      System . out . printf ( \"Pair elements are %d and %d\\n\" , arr [ i ] , val ) ;\n      return true ;\n    }\n    s . add ( arr [ i ] ) ;\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool checkPair ( int arr [ ], int n ) {\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += arr [ i ];\n  if ( sum % 2 != 0 ) return false;\n  sum = sum / 2;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int val = sum - arr [ i ];\n    if ( s . find ( val ) != s . end ( ) ) {\n      printf ( \"Pair elements are %d and %d\\n\", arr [ i ], val );\n      return true;\n    }\n    s . insert ( arr [ i ] );\n  }\n  return false;\n}", "target_program": " def checkPair ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ]\n    if sum % 2 != 0 :\n        return False\n    sum = sum / 2\n    for i in range ( n ) :\n        val = sum - arr [ i ]\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n        if val in s :\n            print ( \"Pair elements are\" , arr [ i ] , \"and\" , int ( val ) )"}
{"source": "python", "target": "java", "source_program": " def surface_area_octahedron ( side ) :\n    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )", "target_program": " static double surface_area_octahedron ( double side ) {\n  return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def surface_area_octahedron ( side ) :\n    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )", "target_program": " double surface_area_octahedron ( double side ) {\n  return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) );\n}"}
{"source": "java", "target": "python", "source_program": " static double surface_area_octahedron ( double side ) {\n  return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;\n}", "target_program": " def surface_area_octahedron ( side ) :\n    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )"}
{"source": "java", "target": "cpp", "source_program": " static double surface_area_octahedron ( double side ) {\n  return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;\n}", "target_program": " double surface_area_octahedron ( double side ) {\n  return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " double surface_area_octahedron ( double side ) {\n  return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) );\n}", "target_program": " static double surface_area_octahedron ( double side ) {\n  return ( 2 * ( Math . sqrt ( 3 ) ) * ( side * side ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double surface_area_octahedron ( double side ) {\n  return ( 2 * ( sqrt ( 3 ) ) * ( side * side ) );\n}", "target_program": " def surface_area_octahedron ( side ) :\n    return ( 2 * ( math.sqrt ( 3 ) ) * ( side * side ) )"}
{"source": "python", "target": "java", "source_program": " def findMaxValue ( mat ) :\n    maxValue = 0\n    for a in range ( N - 1 ) :\n        for b in range ( N - 1 ) :\n            for d in range ( a + 1 , N ) :\n                for e in range ( b + 1 , N ) :\n                    if maxValue < int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) :\n                        maxValue = int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ;\n    return maxValue ;", "target_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  for ( int a = 0 ;\n  a < N - 1 ;\n  a ++ ) for ( int b = 0 ;\n  b < N - 1 ;\n  b ++ ) for ( int d = a + 1 ;\n  d < N ;\n  d ++ ) for ( int e = b + 1 ;\n  e < N ;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ;\n  return maxValue ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxValue ( mat ) :\n    maxValue = 0\n    for a in range ( N - 1 ) :\n        for b in range ( N - 1 ) :\n            for d in range ( a + 1 , N ) :\n                for e in range ( b + 1 , N ) :\n                    if maxValue < int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) :\n                        maxValue = int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ;\n    return maxValue ;", "target_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  for ( int a = 0;\n  a < N - 1;\n  a ++ ) for ( int b = 0;\n  b < N - 1;\n  b ++ ) for ( int d = a + 1;\n  d < N;\n  d ++ ) for ( int e = b + 1;\n  e < N;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ];\n  return maxValue;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  for ( int a = 0 ;\n  a < N - 1 ;\n  a ++ ) for ( int b = 0 ;\n  b < N - 1 ;\n  b ++ ) for ( int d = a + 1 ;\n  d < N ;\n  d ++ ) for ( int e = b + 1 ;\n  e < N ;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ;\n  return maxValue ;\n}", "target_program": " def findMaxValue ( mat ) :\n    maxValue = 0\n    for a in range ( N - 1 ) :\n        for b in range ( N - 1 ) :\n            for d in range ( a + 1 , N ) :\n                for e in range ( b + 1 , N ) :\n                    if maxValue < int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) :\n                        maxValue = int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ;\n    return maxValue ;"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  for ( int a = 0 ;\n  a < N - 1 ;\n  a ++ ) for ( int b = 0 ;\n  b < N - 1 ;\n  b ++ ) for ( int d = a + 1 ;\n  d < N ;\n  d ++ ) for ( int e = b + 1 ;\n  e < N ;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ;\n  return maxValue ;\n}", "target_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  for ( int a = 0;\n  a < N - 1;\n  a ++ ) for ( int b = 0;\n  b < N - 1;\n  b ++ ) for ( int d = a + 1;\n  d < N;\n  d ++ ) for ( int e = b + 1;\n  e < N;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ];\n  return maxValue;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  for ( int a = 0;\n  a < N - 1;\n  a ++ ) for ( int b = 0;\n  b < N - 1;\n  b ++ ) for ( int d = a + 1;\n  d < N;\n  d ++ ) for ( int e = b + 1;\n  e < N;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ];\n  return maxValue;\n}", "target_program": " static int findMaxValue ( int N , int mat [ ] [ ] ) {\n  int maxValue = Integer . MIN_VALUE ;\n  for ( int a = 0 ;\n  a < N - 1 ;\n  a ++ ) for ( int b = 0 ;\n  b < N - 1 ;\n  b ++ ) for ( int d = a + 1 ;\n  d < N ;\n  d ++ ) for ( int e = b + 1 ;\n  e < N ;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ] ;\n  return maxValue ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxValue ( int mat [ ] [ N ] ) {\n  int maxValue = INT_MIN;\n  for ( int a = 0;\n  a < N - 1;\n  a ++ ) for ( int b = 0;\n  b < N - 1;\n  b ++ ) for ( int d = a + 1;\n  d < N;\n  d ++ ) for ( int e = b + 1;\n  e < N;\n  e ++ ) if ( maxValue < ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ) maxValue = mat [ d ] [ e ] - mat [ a ] [ b ];\n  return maxValue;\n}", "target_program": " def findMaxValue ( mat ) :\n    maxValue = 0\n    for a in range ( N - 1 ) :\n        for b in range ( N - 1 ) :\n            for d in range ( a + 1 , N ) :\n                for e in range ( b + 1 , N ) :\n                    if maxValue < int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) :\n                        maxValue = int ( mat [ d ] [ e ] - mat [ a ] [ b ] ) ;\n    return maxValue ;"}
{"source": "python", "target": "java", "source_program": " def multiply ( x , y ) :\n    if ( y == 0 ) :\n        return 0\n    if ( y > 0 ) :\n        return ( x + multiply ( x , y - 1 ) )\n    if ( y < 0 ) :\n        return - multiply ( x , - y )", "target_program": " static int multiply ( int x , int y ) {\n  if ( y == 0 ) return 0 ;\n  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;\n  if ( y < 0 ) return - multiply ( x , - y ) ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def multiply ( x , y ) :\n    if ( y == 0 ) :\n        return 0\n    if ( y > 0 ) :\n        return ( x + multiply ( x , y - 1 ) )\n    if ( y < 0 ) :\n        return - multiply ( x , - y )", "target_program": " public : int multiply ( int x, int y ) {\n  if ( y == 0 ) return 0;\n  if ( y > 0 ) return ( x + multiply ( x, y - 1 ) );\n  if ( y < 0 ) return - multiply ( x, - y );\n}"}
{"source": "java", "target": "python", "source_program": " static int multiply ( int x , int y ) {\n  if ( y == 0 ) return 0 ;\n  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;\n  if ( y < 0 ) return - multiply ( x , - y ) ;\n  return - 1 ;\n}", "target_program": " def multiply ( x , y ) :\n    if ( y == 0 ) :\n        return 0\n    if ( y > 0 ) :\n        return ( x + multiply ( x , y - 1 ) )\n    if ( y < 0 ) :\n        return - multiply ( x , - y )"}
{"source": "java", "target": "cpp", "source_program": " static int multiply ( int x , int y ) {\n  if ( y == 0 ) return 0 ;\n  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;\n  if ( y < 0 ) return - multiply ( x , - y ) ;\n  return - 1 ;\n}", "target_program": " public : int multiply ( int x, int y ) {\n  if ( y == 0 ) return 0;\n  if ( y > 0 ) return ( x + multiply ( x, y - 1 ) );\n  if ( y < 0 ) return - multiply ( x, - y );\n}"}
{"source": "cpp", "target": "java", "source_program": " public : int multiply ( int x, int y ) {\n  if ( y == 0 ) return 0;\n  if ( y > 0 ) return ( x + multiply ( x, y - 1 ) );\n  if ( y < 0 ) return - multiply ( x, - y );\n}", "target_program": " static int multiply ( int x , int y ) {\n  if ( y == 0 ) return 0 ;\n  if ( y > 0 ) return ( x + multiply ( x , y - 1 ) ) ;\n  if ( y < 0 ) return - multiply ( x , - y ) ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : int multiply ( int x, int y ) {\n  if ( y == 0 ) return 0;\n  if ( y > 0 ) return ( x + multiply ( x, y - 1 ) );\n  if ( y < 0 ) return - multiply ( x, - y );\n}", "target_program": " def multiply ( x , y ) :\n    if ( y == 0 ) :\n        return 0\n    if ( y > 0 ) :\n        return ( x + multiply ( x , y - 1 ) )\n    if ( y < 0 ) :\n        return - multiply ( x , - y )"}
{"source": "python", "target": "java", "source_program": " def findTriplets ( arr , n ) :\n    found = False\n    for i in range ( n - 1 ) :\n        s = set ( )\n        for j in range ( i + 1 , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )", "target_program": " static void findTriplets ( int arr [ ] , int n ) {\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] ) ;\n      if ( s . contains ( x ) ) {\n        System . out . printf ( \"%d %d %d\\n\" , x , arr [ i ] , arr [ j ] ) ;\n        found = true ;\n      }\n      else {\n        s . add ( arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) {\n    System . out . printf ( \" No Triplet Found\\n\" ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def findTriplets ( arr , n ) :\n    found = False\n    for i in range ( n - 1 ) :\n        s = set ( )\n        for j in range ( i + 1 , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )", "target_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = false;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    unordered_set < int > s;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] );\n      if ( s . find ( x ) != s . end ( ) ) {\n        printf ( \"%d %d %d\\n\", x, arr [ i ], arr [ j ] );\n        found = true;\n      }\n      else s . insert ( arr [ j ] );\n    }\n  }\n  if ( found == false ) cout << \" No Triplet Found\" << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void findTriplets ( int arr [ ] , int n ) {\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] ) ;\n      if ( s . contains ( x ) ) {\n        System . out . printf ( \"%d %d %d\\n\" , x , arr [ i ] , arr [ j ] ) ;\n        found = true ;\n      }\n      else {\n        s . add ( arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) {\n    System . out . printf ( \" No Triplet Found\\n\" ) ;\n  }\n}", "target_program": " def findTriplets ( arr , n ) :\n    found = False\n    for i in range ( n - 1 ) :\n        s = set ( )\n        for j in range ( i + 1 , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )"}
{"source": "java", "target": "cpp", "source_program": " static void findTriplets ( int arr [ ] , int n ) {\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] ) ;\n      if ( s . contains ( x ) ) {\n        System . out . printf ( \"%d %d %d\\n\" , x , arr [ i ] , arr [ j ] ) ;\n        found = true ;\n      }\n      else {\n        s . add ( arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) {\n    System . out . printf ( \" No Triplet Found\\n\" ) ;\n  }\n}", "target_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = false;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    unordered_set < int > s;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] );\n      if ( s . find ( x ) != s . end ( ) ) {\n        printf ( \"%d %d %d\\n\", x, arr [ i ], arr [ j ] );\n        found = true;\n      }\n      else s . insert ( arr [ j ] );\n    }\n  }\n  if ( found == false ) cout << \" No Triplet Found\" << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = false;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    unordered_set < int > s;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] );\n      if ( s . find ( x ) != s . end ( ) ) {\n        printf ( \"%d %d %d\\n\", x, arr [ i ], arr [ j ] );\n        found = true;\n      }\n      else s . insert ( arr [ j ] );\n    }\n  }\n  if ( found == false ) cout << \" No Triplet Found\" << endl;\n}", "target_program": " static void findTriplets ( int arr [ ] , int n ) {\n  boolean found = false ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    HashSet < Integer > s = new HashSet < Integer > ( ) ;\n    for ( int j = i + 1 ;\n    j < n ;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] ) ;\n      if ( s . contains ( x ) ) {\n        System . out . printf ( \"%d %d %d\\n\" , x , arr [ i ] , arr [ j ] ) ;\n        found = true ;\n      }\n      else {\n        s . add ( arr [ j ] ) ;\n      }\n    }\n  }\n  if ( found == false ) {\n    System . out . printf ( \" No Triplet Found\\n\" ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = false;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    unordered_set < int > s;\n    for ( int j = i + 1;\n    j < n;\n    j ++ ) {\n      int x = - ( arr [ i ] + arr [ j ] );\n      if ( s . find ( x ) != s . end ( ) ) {\n        printf ( \"%d %d %d\\n\", x, arr [ i ], arr [ j ] );\n        found = true;\n      }\n      else s . insert ( arr [ j ] );\n    }\n  }\n  if ( found == false ) cout << \" No Triplet Found\" << endl;\n}", "target_program": " def findTriplets ( arr , n ) :\n    found = False\n    for i in range ( n - 1 ) :\n        s = set ( )\n        for j in range ( i + 1 , n ) :\n            x = - ( arr [ i ] + arr [ j ] )\n            if x in s :\n                print ( x , arr [ i ] , arr [ j ] )\n                found = True\n            else :\n                s.add ( arr [ j ] )\n    if found == False :\n        print ( \"No Triplet Found\" )"}
{"source": "python", "target": "java", "source_program": " def maxSum ( arr ) :\n    arrSum = 0\n    currVal = 0\n    n = len ( arr )\n    for i in range ( 0 , n ) :\n        arrSum = arrSum + arr [ i ]\n        currVal = currVal + ( i * arr [ i ] )\n    maxVal = currVal\n    for j in range ( 1 , n ) :\n        currVal = currVal + arrSum - n * arr [ n - j ]\n        if currVal > maxVal :\n            maxVal = currVal\n    return maxVal", "target_program": " static int maxSum ( ) {\n  int arrSum = 0 ;\n  int currVal = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ] ;\n    currVal = currVal + ( i * arr [ i ] ) ;\n  }\n  int maxVal = currVal ;\n  for ( int j = 1 ;\n  j < arr . length ;\n  j ++ ) {\n    currVal = currVal + arrSum - arr . length * arr [ arr . length - j ] ;\n    if ( currVal > maxVal ) maxVal = currVal ;\n  }\n  return maxVal ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSum ( arr ) :\n    arrSum = 0\n    currVal = 0\n    n = len ( arr )\n    for i in range ( 0 , n ) :\n        arrSum = arrSum + arr [ i ]\n        currVal = currVal + ( i * arr [ i ] )\n    maxVal = currVal\n    for j in range ( 1 , n ) :\n        currVal = currVal + arrSum - n * arr [ n - j ]\n        if currVal > maxVal :\n            maxVal = currVal\n    return maxVal", "target_program": " int maxSum ( int arr [ ], int n ) {\n  int arrSum = 0;\n  int currVal = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ];\n    currVal = currVal + ( i * arr [ i ] );\n  }\n  int maxVal = currVal;\n  for ( int j = 1;\n  j < n;\n  j ++ ) {\n    currVal = currVal + arrSum - n * arr [ n - j ];\n    if ( currVal > maxVal ) maxVal = currVal;\n  }\n  return maxVal;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSum ( ) {\n  int arrSum = 0 ;\n  int currVal = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ] ;\n    currVal = currVal + ( i * arr [ i ] ) ;\n  }\n  int maxVal = currVal ;\n  for ( int j = 1 ;\n  j < arr . length ;\n  j ++ ) {\n    currVal = currVal + arrSum - arr . length * arr [ arr . length - j ] ;\n    if ( currVal > maxVal ) maxVal = currVal ;\n  }\n  return maxVal ;\n}", "target_program": " def maxSum ( arr ) :\n    arrSum = 0\n    currVal = 0\n    n = len ( arr )\n    for i in range ( 0 , n ) :\n        arrSum = arrSum + arr [ i ]\n        currVal = currVal + ( i * arr [ i ] )\n    maxVal = currVal\n    for j in range ( 1 , n ) :\n        currVal = currVal + arrSum - n * arr [ n - j ]\n        if currVal > maxVal :\n            maxVal = currVal\n    return maxVal"}
{"source": "java", "target": "cpp", "source_program": " static int maxSum ( ) {\n  int arrSum = 0 ;\n  int currVal = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ] ;\n    currVal = currVal + ( i * arr [ i ] ) ;\n  }\n  int maxVal = currVal ;\n  for ( int j = 1 ;\n  j < arr . length ;\n  j ++ ) {\n    currVal = currVal + arrSum - arr . length * arr [ arr . length - j ] ;\n    if ( currVal > maxVal ) maxVal = currVal ;\n  }\n  return maxVal ;\n}", "target_program": " int maxSum ( int arr [ ], int n ) {\n  int arrSum = 0;\n  int currVal = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ];\n    currVal = currVal + ( i * arr [ i ] );\n  }\n  int maxVal = currVal;\n  for ( int j = 1;\n  j < n;\n  j ++ ) {\n    currVal = currVal + arrSum - n * arr [ n - j ];\n    if ( currVal > maxVal ) maxVal = currVal;\n  }\n  return maxVal;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSum ( int arr [ ], int n ) {\n  int arrSum = 0;\n  int currVal = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ];\n    currVal = currVal + ( i * arr [ i ] );\n  }\n  int maxVal = currVal;\n  for ( int j = 1;\n  j < n;\n  j ++ ) {\n    currVal = currVal + arrSum - n * arr [ n - j ];\n    if ( currVal > maxVal ) maxVal = currVal;\n  }\n  return maxVal;\n}", "target_program": " static int maxSum ( ) {\n  int arrSum = 0 ;\n  int currVal = 0 ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ] ;\n    currVal = currVal + ( i * arr [ i ] ) ;\n  }\n  int maxVal = currVal ;\n  for ( int j = 1 ;\n  j < arr . length ;\n  j ++ ) {\n    currVal = currVal + arrSum - arr . length * arr [ arr . length - j ] ;\n    if ( currVal > maxVal ) maxVal = currVal ;\n  }\n  return maxVal ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSum ( int arr [ ], int n ) {\n  int arrSum = 0;\n  int currVal = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arrSum = arrSum + arr [ i ];\n    currVal = currVal + ( i * arr [ i ] );\n  }\n  int maxVal = currVal;\n  for ( int j = 1;\n  j < n;\n  j ++ ) {\n    currVal = currVal + arrSum - n * arr [ n - j ];\n    if ( currVal > maxVal ) maxVal = currVal;\n  }\n  return maxVal;\n}", "target_program": " def maxSum ( arr ) :\n    arrSum = 0\n    currVal = 0\n    n = len ( arr )\n    for i in range ( 0 , n ) :\n        arrSum = arrSum + arr [ i ]\n        currVal = currVal + ( i * arr [ i ] )\n    maxVal = currVal\n    for j in range ( 1 , n ) :\n        currVal = currVal + arrSum - n * arr [ n - j ]\n        if currVal > maxVal :\n            maxVal = currVal\n    return maxVal"}
{"source": "python", "target": "java", "source_program": " def scalarProductMat ( mat , k ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            mat [ i ] [ j ] = mat [ i ] [ j ] * k", "target_program": " static void scalarProductMat ( int mat [ ] [ ] , int k ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def scalarProductMat ( mat , k ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            mat [ i ] [ j ] = mat [ i ] [ j ] * k", "target_program": " void scalarProductMat ( int mat [ ] [ N ], int k ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k;\n}"}
{"source": "java", "target": "python", "source_program": " static void scalarProductMat ( int mat [ ] [ ] , int k ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;\n}", "target_program": " def scalarProductMat ( mat , k ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            mat [ i ] [ j ] = mat [ i ] [ j ] * k"}
{"source": "java", "target": "cpp", "source_program": " static void scalarProductMat ( int mat [ ] [ ] , int k ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;\n}", "target_program": " void scalarProductMat ( int mat [ ] [ N ], int k ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k;\n}"}
{"source": "cpp", "target": "java", "source_program": " void scalarProductMat ( int mat [ ] [ N ], int k ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k;\n}", "target_program": " static void scalarProductMat ( int mat [ ] [ ] , int k ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void scalarProductMat ( int mat [ ] [ N ], int k ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) mat [ i ] [ j ] = mat [ i ] [ j ] * k;\n}", "target_program": " def scalarProductMat ( mat , k ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            mat [ i ] [ j ] = mat [ i ] [ j ] * k"}
{"source": "python", "target": "java", "source_program": " def printSquares ( n ) :\n    square = 0\n    odd = 1\n    for x in range ( 0 , n ) :\n        print ( square , end = \" \" )\n        square = square + odd\n        odd = odd + 2", "target_program": " static void printSquares ( int n ) {\n  int square = 0 , odd = 1 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    System . out . print ( square + \" \" ) ;\n    square = square + odd ;\n    odd = odd + 2 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSquares ( n ) :\n    square = 0\n    odd = 1\n    for x in range ( 0 , n ) :\n        print ( square , end = \" \" )\n        square = square + odd\n        odd = odd + 2", "target_program": " void printSquares ( int n ) {\n  int square = 0, odd = 1;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    cout << square << \" \";\n    square = square + odd;\n    odd = odd + 2;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printSquares ( int n ) {\n  int square = 0 , odd = 1 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    System . out . print ( square + \" \" ) ;\n    square = square + odd ;\n    odd = odd + 2 ;\n  }\n}", "target_program": " def printSquares ( n ) :\n    square = 0\n    odd = 1\n    for x in range ( 0 , n ) :\n        print ( square , end = \" \" )\n        square = square + odd\n        odd = odd + 2"}
{"source": "java", "target": "cpp", "source_program": " static void printSquares ( int n ) {\n  int square = 0 , odd = 1 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    System . out . print ( square + \" \" ) ;\n    square = square + odd ;\n    odd = odd + 2 ;\n  }\n}", "target_program": " void printSquares ( int n ) {\n  int square = 0, odd = 1;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    cout << square << \" \";\n    square = square + odd;\n    odd = odd + 2;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSquares ( int n ) {\n  int square = 0, odd = 1;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    cout << square << \" \";\n    square = square + odd;\n    odd = odd + 2;\n  }\n}", "target_program": " static void printSquares ( int n ) {\n  int square = 0 , odd = 1 ;\n  for ( int x = 0 ;\n  x < n ;\n  x ++ ) {\n    System . out . print ( square + \" \" ) ;\n    square = square + odd ;\n    odd = odd + 2 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSquares ( int n ) {\n  int square = 0, odd = 1;\n  for ( int x = 0;\n  x < n;\n  x ++ ) {\n    cout << square << \" \";\n    square = square + odd;\n    odd = odd + 2;\n  }\n}", "target_program": " def printSquares ( n ) :\n    square = 0\n    odd = 1\n    for x in range ( 0 , n ) :\n        print ( square , end = \" \" )\n        square = square + odd\n        odd = odd + 2"}
{"source": "python", "target": "java", "source_program": " def pentagonalNum ( n ) :\n    return ( 3 * n * n - n ) / 2", "target_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pentagonalNum ( n ) :\n    return ( 3 * n * n - n ) / 2", "target_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2 ;\n}", "target_program": " def pentagonalNum ( n ) :\n    return ( 3 * n * n - n ) / 2"}
{"source": "java", "target": "cpp", "source_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2 ;\n}", "target_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2;\n}", "target_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int pentagonalNum ( int n ) {\n  return ( 3 * n * n - n ) / 2;\n}", "target_program": " def pentagonalNum ( n ) :\n    return ( 3 * n * n - n ) / 2"}
{"source": "python", "target": "java", "source_program": " def numofArray ( n , m ) :\n    dp = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX ) ]\n    di = [ [ ] for i in range ( MAX ) ]\n    mu = [ [ ] for i in range ( MAX ) ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 2 * i , m + 1 , i ) :\n            di [ j ].append ( i )\n            mu [ i ].append ( j )\n        di [ i ].append ( i )\n    for i in range ( 1 , m + 1 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 1 , m + 1 ) :\n            dp [ i ] [ j ] = 0\n            for x in di [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n            for x in mu [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n    ans = 0\n    for i in range ( 1 , m + 1 ) :\n        ans += dp [ n ] [ i ]\n        di [ i ].clear ( )\n        mu [ i ].clear ( )\n    return ans", "target_program": " static int numofArray ( int n , int m ) {\n  int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;\n  Vector < Integer > [ ] di = new Vector [ MAX ] ;\n  Vector < Integer > [ ] mu = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    di [ i ] = new Vector < > ( ) ;\n    mu [ i ] = new Vector < > ( ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 2 * i ;\n    j <= m ;\n    j += i ) {\n      di [ j ] . add ( i ) ;\n      mu [ i ] . add ( j ) ;\n    }\n    di [ i ] . add ( i ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) dp [ 1 ] [ i ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= m ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      for ( Integer x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n      for ( Integer x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    ans += dp [ n ] [ i ] ;\n    di [ i ] . clear ( ) ;\n    mu [ i ] . clear ( ) ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numofArray ( n , m ) :\n    dp = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX ) ]\n    di = [ [ ] for i in range ( MAX ) ]\n    mu = [ [ ] for i in range ( MAX ) ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 2 * i , m + 1 , i ) :\n            di [ j ].append ( i )\n            mu [ i ].append ( j )\n        di [ i ].append ( i )\n    for i in range ( 1 , m + 1 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 1 , m + 1 ) :\n            dp [ i ] [ j ] = 0\n            for x in di [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n            for x in mu [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n    ans = 0\n    for i in range ( 1 , m + 1 ) :\n        ans += dp [ n ] [ i ]\n        di [ i ].clear ( )\n        mu [ i ].clear ( )\n    return ans", "target_program": " int numofArray ( int n, int m ) {\n  int dp [ MAX ] [ MAX ];\n  vector < int > di [ MAX ];\n  vector < int > mu [ MAX ];\n  memset ( dp, 0, sizeof dp );\n  memset ( di, 0, sizeof di );\n  memset ( mu, 0, sizeof mu );\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 2 * i;\n    j <= m;\n    j += i ) {\n      di [ j ] . push_back ( i );\n      mu [ i ] . push_back ( j );\n    }\n    di [ i ] . push_back ( i );\n  }\n  for ( int i = 1;\n  i <= m;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= m;\n    j ++ ) {\n      dp [ i ] [ j ] = 0;\n      for ( auto x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n      for ( auto x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n    }\n  }\n  int ans = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    ans += dp [ n ] [ i ];\n    di [ i ] . clear ( );\n    mu [ i ] . clear ( );\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int numofArray ( int n , int m ) {\n  int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;\n  Vector < Integer > [ ] di = new Vector [ MAX ] ;\n  Vector < Integer > [ ] mu = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    di [ i ] = new Vector < > ( ) ;\n    mu [ i ] = new Vector < > ( ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 2 * i ;\n    j <= m ;\n    j += i ) {\n      di [ j ] . add ( i ) ;\n      mu [ i ] . add ( j ) ;\n    }\n    di [ i ] . add ( i ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) dp [ 1 ] [ i ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= m ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      for ( Integer x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n      for ( Integer x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    ans += dp [ n ] [ i ] ;\n    di [ i ] . clear ( ) ;\n    mu [ i ] . clear ( ) ;\n  }\n  return ans ;\n}", "target_program": " def numofArray ( n , m ) :\n    dp = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX ) ]\n    di = [ [ ] for i in range ( MAX ) ]\n    mu = [ [ ] for i in range ( MAX ) ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 2 * i , m + 1 , i ) :\n            di [ j ].append ( i )\n            mu [ i ].append ( j )\n        di [ i ].append ( i )\n    for i in range ( 1 , m + 1 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 1 , m + 1 ) :\n            dp [ i ] [ j ] = 0\n            for x in di [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n            for x in mu [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n    ans = 0\n    for i in range ( 1 , m + 1 ) :\n        ans += dp [ n ] [ i ]\n        di [ i ].clear ( )\n        mu [ i ].clear ( )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int numofArray ( int n , int m ) {\n  int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;\n  Vector < Integer > [ ] di = new Vector [ MAX ] ;\n  Vector < Integer > [ ] mu = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    di [ i ] = new Vector < > ( ) ;\n    mu [ i ] = new Vector < > ( ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 2 * i ;\n    j <= m ;\n    j += i ) {\n      di [ j ] . add ( i ) ;\n      mu [ i ] . add ( j ) ;\n    }\n    di [ i ] . add ( i ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) dp [ 1 ] [ i ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= m ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      for ( Integer x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n      for ( Integer x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    ans += dp [ n ] [ i ] ;\n    di [ i ] . clear ( ) ;\n    mu [ i ] . clear ( ) ;\n  }\n  return ans ;\n}", "target_program": " int numofArray ( int n, int m ) {\n  int dp [ MAX ] [ MAX ];\n  vector < int > di [ MAX ];\n  vector < int > mu [ MAX ];\n  memset ( dp, 0, sizeof dp );\n  memset ( di, 0, sizeof di );\n  memset ( mu, 0, sizeof mu );\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 2 * i;\n    j <= m;\n    j += i ) {\n      di [ j ] . push_back ( i );\n      mu [ i ] . push_back ( j );\n    }\n    di [ i ] . push_back ( i );\n  }\n  for ( int i = 1;\n  i <= m;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= m;\n    j ++ ) {\n      dp [ i ] [ j ] = 0;\n      for ( auto x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n      for ( auto x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n    }\n  }\n  int ans = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    ans += dp [ n ] [ i ];\n    di [ i ] . clear ( );\n    mu [ i ] . clear ( );\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numofArray ( int n, int m ) {\n  int dp [ MAX ] [ MAX ];\n  vector < int > di [ MAX ];\n  vector < int > mu [ MAX ];\n  memset ( dp, 0, sizeof dp );\n  memset ( di, 0, sizeof di );\n  memset ( mu, 0, sizeof mu );\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 2 * i;\n    j <= m;\n    j += i ) {\n      di [ j ] . push_back ( i );\n      mu [ i ] . push_back ( j );\n    }\n    di [ i ] . push_back ( i );\n  }\n  for ( int i = 1;\n  i <= m;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= m;\n    j ++ ) {\n      dp [ i ] [ j ] = 0;\n      for ( auto x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n      for ( auto x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n    }\n  }\n  int ans = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    ans += dp [ n ] [ i ];\n    di [ i ] . clear ( );\n    mu [ i ] . clear ( );\n  }\n  return ans;\n}", "target_program": " static int numofArray ( int n , int m ) {\n  int [ ] [ ] dp = new int [ MAX ] [ MAX ] ;\n  Vector < Integer > [ ] di = new Vector [ MAX ] ;\n  Vector < Integer > [ ] mu = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n    }\n  }\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) {\n    di [ i ] = new Vector < > ( ) ;\n    mu [ i ] = new Vector < > ( ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 2 * i ;\n    j <= m ;\n    j += i ) {\n      di [ j ] . add ( i ) ;\n      mu [ i ] . add ( j ) ;\n    }\n    di [ i ] . add ( i ) ;\n  }\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) dp [ 1 ] [ i ] = 1 ;\n  for ( int i = 2 ;\n  i <= n ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= m ;\n    j ++ ) {\n      dp [ i ] [ j ] = 0 ;\n      for ( Integer x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n      for ( Integer x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ] ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 1 ;\n  i <= m ;\n  i ++ ) {\n    ans += dp [ n ] [ i ] ;\n    di [ i ] . clear ( ) ;\n    mu [ i ] . clear ( ) ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numofArray ( int n, int m ) {\n  int dp [ MAX ] [ MAX ];\n  vector < int > di [ MAX ];\n  vector < int > mu [ MAX ];\n  memset ( dp, 0, sizeof dp );\n  memset ( di, 0, sizeof di );\n  memset ( mu, 0, sizeof mu );\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    for ( int j = 2 * i;\n    j <= m;\n    j += i ) {\n      di [ j ] . push_back ( i );\n      mu [ i ] . push_back ( j );\n    }\n    di [ i ] . push_back ( i );\n  }\n  for ( int i = 1;\n  i <= m;\n  i ++ ) dp [ 1 ] [ i ] = 1;\n  for ( int i = 2;\n  i <= n;\n  i ++ ) {\n    for ( int j = 1;\n    j <= m;\n    j ++ ) {\n      dp [ i ] [ j ] = 0;\n      for ( auto x : di [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n      for ( auto x : mu [ j ] ) dp [ i ] [ j ] += dp [ i - 1 ] [ x ];\n    }\n  }\n  int ans = 0;\n  for ( int i = 1;\n  i <= m;\n  i ++ ) {\n    ans += dp [ n ] [ i ];\n    di [ i ] . clear ( );\n    mu [ i ] . clear ( );\n  }\n  return ans;\n}", "target_program": " def numofArray ( n , m ) :\n    dp = [ [ 0 for i in range ( MAX ) ] for j in range ( MAX ) ]\n    di = [ [ ] for i in range ( MAX ) ]\n    mu = [ [ ] for i in range ( MAX ) ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 2 * i , m + 1 , i ) :\n            di [ j ].append ( i )\n            mu [ i ].append ( j )\n        di [ i ].append ( i )\n    for i in range ( 1 , m + 1 ) :\n        dp [ 1 ] [ i ] = 1\n    for i in range ( 2 , n + 1 ) :\n        for j in range ( 1 , m + 1 ) :\n            dp [ i ] [ j ] = 0\n            for x in di [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n            for x in mu [ j ] :\n                dp [ i ] [ j ] += dp [ i - 1 ] [ x ]\n    ans = 0\n    for i in range ( 1 , m + 1 ) :\n        ans += dp [ n ] [ i ]\n        di [ i ].clear ( )\n        mu [ i ].clear ( )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def findTriplets ( arr , n ) :\n    found = True\n    for i in range ( 0 , n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) :\n                    print ( arr [ i ] , arr [ j ] , arr [ k ] )\n                    found = True\n    if ( found == False ) :\n        print ( \" not exist \" )", "target_program": " static void findTriplets ( int [ ] arr , int n ) {\n  boolean found = true ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          System . out . print ( arr [ i ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ j ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ k ] ) ;\n          System . out . print ( \"\\n\" ) ;\n          found = true ;\n        }\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \" not exist \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findTriplets ( arr , n ) :\n    found = True\n    for i in range ( 0 , n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) :\n                    print ( arr [ i ] , arr [ j ] , arr [ k ] )\n                    found = True\n    if ( found == False ) :\n        print ( \" not exist \" )", "target_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = true;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          cout << arr [ i ] << \" \" << arr [ j ] << \" \" << arr [ k ] << endl;\n          found = true;\n        }\n      }\n    }\n  }\n  if ( found == false ) cout << \" not exist \" << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void findTriplets ( int [ ] arr , int n ) {\n  boolean found = true ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          System . out . print ( arr [ i ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ j ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ k ] ) ;\n          System . out . print ( \"\\n\" ) ;\n          found = true ;\n        }\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \" not exist \" ) ;\n}", "target_program": " def findTriplets ( arr , n ) :\n    found = True\n    for i in range ( 0 , n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) :\n                    print ( arr [ i ] , arr [ j ] , arr [ k ] )\n                    found = True\n    if ( found == False ) :\n        print ( \" not exist \" )"}
{"source": "java", "target": "cpp", "source_program": " static void findTriplets ( int [ ] arr , int n ) {\n  boolean found = true ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          System . out . print ( arr [ i ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ j ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ k ] ) ;\n          System . out . print ( \"\\n\" ) ;\n          found = true ;\n        }\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \" not exist \" ) ;\n}", "target_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = true;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          cout << arr [ i ] << \" \" << arr [ j ] << \" \" << arr [ k ] << endl;\n          found = true;\n        }\n      }\n    }\n  }\n  if ( found == false ) cout << \" not exist \" << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = true;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          cout << arr [ i ] << \" \" << arr [ j ] << \" \" << arr [ k ] << endl;\n          found = true;\n        }\n      }\n    }\n  }\n  if ( found == false ) cout << \" not exist \" << endl;\n}", "target_program": " static void findTriplets ( int [ ] arr , int n ) {\n  boolean found = true ;\n  for ( int i = 0 ;\n  i < n - 2 ;\n  i ++ ) {\n    for ( int j = i + 1 ;\n    j < n - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < n ;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          System . out . print ( arr [ i ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ j ] ) ;\n          System . out . print ( \" \" ) ;\n          System . out . print ( arr [ k ] ) ;\n          System . out . print ( \"\\n\" ) ;\n          found = true ;\n        }\n      }\n    }\n  }\n  if ( found == false ) System . out . println ( \" not exist \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findTriplets ( int arr [ ], int n ) {\n  bool found = true;\n  for ( int i = 0;\n  i < n - 2;\n  i ++ ) {\n    for ( int j = i + 1;\n    j < n - 1;\n    j ++ ) {\n      for ( int k = j + 1;\n      k < n;\n      k ++ ) {\n        if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) {\n          cout << arr [ i ] << \" \" << arr [ j ] << \" \" << arr [ k ] << endl;\n          found = true;\n        }\n      }\n    }\n  }\n  if ( found == false ) cout << \" not exist \" << endl;\n}", "target_program": " def findTriplets ( arr , n ) :\n    found = True\n    for i in range ( 0 , n - 2 ) :\n        for j in range ( i + 1 , n - 1 ) :\n            for k in range ( j + 1 , n ) :\n                if ( arr [ i ] + arr [ j ] + arr [ k ] == 0 ) :\n                    print ( arr [ i ] , arr [ j ] , arr [ k ] )\n                    found = True\n    if ( found == False ) :\n        print ( \" not exist \" )"}
{"source": "python", "target": "java", "source_program": " def count ( n ) :\n    table = [ 0 for i in range ( n + 1 ) ]\n    table [ 0 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        table [ i ] += table [ i - 3 ]\n    for i in range ( 5 , n + 1 ) :\n        table [ i ] += table [ i - 5 ]\n    for i in range ( 10 , n + 1 ) :\n        table [ i ] += table [ i - 10 ]\n    return table [ n ]", "target_program": " static int count ( int n ) {\n  int table [ ] = new int [ n + 1 ] , i ;\n  Arrays . fill ( table , 0 ) ;\n  table [ 0 ] = 1 ;\n  for ( i = 3 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 3 ] ;\n  for ( i = 5 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 5 ] ;\n  for ( i = 10 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 10 ] ;\n  return table [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def count ( n ) :\n    table = [ 0 for i in range ( n + 1 ) ]\n    table [ 0 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        table [ i ] += table [ i - 3 ]\n    for i in range ( 5 , n + 1 ) :\n        table [ i ] += table [ i - 5 ]\n    for i in range ( 10 , n + 1 ) :\n        table [ i ] += table [ i - 10 ]\n    return table [ n ]", "target_program": " int count ( int n ) {\n  int table [ n + 1 ], i;\n  for ( int j = 0;\n  j < n + 1;\n  j ++ ) table [ j ] = 0;\n  table [ 0 ] = 1;\n  for ( i = 3;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 3 ];\n  for ( i = 5;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 5 ];\n  for ( i = 10;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 10 ];\n  return table [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int count ( int n ) {\n  int table [ ] = new int [ n + 1 ] , i ;\n  Arrays . fill ( table , 0 ) ;\n  table [ 0 ] = 1 ;\n  for ( i = 3 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 3 ] ;\n  for ( i = 5 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 5 ] ;\n  for ( i = 10 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 10 ] ;\n  return table [ n ] ;\n}", "target_program": " def count ( n ) :\n    table = [ 0 for i in range ( n + 1 ) ]\n    table [ 0 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        table [ i ] += table [ i - 3 ]\n    for i in range ( 5 , n + 1 ) :\n        table [ i ] += table [ i - 5 ]\n    for i in range ( 10 , n + 1 ) :\n        table [ i ] += table [ i - 10 ]\n    return table [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int count ( int n ) {\n  int table [ ] = new int [ n + 1 ] , i ;\n  Arrays . fill ( table , 0 ) ;\n  table [ 0 ] = 1 ;\n  for ( i = 3 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 3 ] ;\n  for ( i = 5 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 5 ] ;\n  for ( i = 10 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 10 ] ;\n  return table [ n ] ;\n}", "target_program": " int count ( int n ) {\n  int table [ n + 1 ], i;\n  for ( int j = 0;\n  j < n + 1;\n  j ++ ) table [ j ] = 0;\n  table [ 0 ] = 1;\n  for ( i = 3;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 3 ];\n  for ( i = 5;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 5 ];\n  for ( i = 10;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 10 ];\n  return table [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int count ( int n ) {\n  int table [ n + 1 ], i;\n  for ( int j = 0;\n  j < n + 1;\n  j ++ ) table [ j ] = 0;\n  table [ 0 ] = 1;\n  for ( i = 3;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 3 ];\n  for ( i = 5;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 5 ];\n  for ( i = 10;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 10 ];\n  return table [ n ];\n}", "target_program": " static int count ( int n ) {\n  int table [ ] = new int [ n + 1 ] , i ;\n  Arrays . fill ( table , 0 ) ;\n  table [ 0 ] = 1 ;\n  for ( i = 3 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 3 ] ;\n  for ( i = 5 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 5 ] ;\n  for ( i = 10 ;\n  i <= n ;\n  i ++ ) table [ i ] += table [ i - 10 ] ;\n  return table [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int count ( int n ) {\n  int table [ n + 1 ], i;\n  for ( int j = 0;\n  j < n + 1;\n  j ++ ) table [ j ] = 0;\n  table [ 0 ] = 1;\n  for ( i = 3;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 3 ];\n  for ( i = 5;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 5 ];\n  for ( i = 10;\n  i <= n;\n  i ++ ) table [ i ] += table [ i - 10 ];\n  return table [ n ];\n}", "target_program": " def count ( n ) :\n    table = [ 0 for i in range ( n + 1 ) ]\n    table [ 0 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        table [ i ] += table [ i - 3 ]\n    for i in range ( 5 , n + 1 ) :\n        table [ i ] += table [ i - 5 ]\n    for i in range ( 10 , n + 1 ) :\n        table [ i ] += table [ i - 10 ]\n    return table [ n ]"}
{"source": "python", "target": "java", "source_program": " def MaxSumDifference ( a , n ) :\n    np.sort ( a ) ;\n    j = 0\n    finalSequence = [ 0 for x in range ( n ) ]\n    for i in range ( 0 , int ( n / 2 ) ) :\n        finalSequence [ j ] = a [ i ]\n        finalSequence [ j + 1 ] = a [ n - i - 1 ]\n        j = j + 2\n    MaximumSum = 0\n    for i in range ( 0 , n - 1 ) :\n        MaximumSum = ( MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] ) )\n    MaximumSum = ( MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] ) ) ;\n    print ( MaximumSum )", "target_program": " static int MaxSumDifference ( Integer [ ] a , int n ) {\n  List < Integer > finalSequence = new ArrayList < Integer > ( ) ;\n  Arrays . sort ( a ) ;\n  for ( int i = 0 ;\n  i < n / 2 ;\n  ++ i ) {\n    finalSequence . add ( a [ i ] ) ;\n    finalSequence . add ( a [ n - i - 1 ] ) ;\n  }\n  int MaximumSum = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ++ i ) {\n    MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( i ) - finalSequence . get ( i + 1 ) ) ;\n  }\n  MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( n - 1 ) - finalSequence . get ( 0 ) ) ;\n  return MaximumSum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MaxSumDifference ( a , n ) :\n    np.sort ( a ) ;\n    j = 0\n    finalSequence = [ 0 for x in range ( n ) ]\n    for i in range ( 0 , int ( n / 2 ) ) :\n        finalSequence [ j ] = a [ i ]\n        finalSequence [ j + 1 ] = a [ n - i - 1 ]\n        j = j + 2\n    MaximumSum = 0\n    for i in range ( 0 , n - 1 ) :\n        MaximumSum = ( MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] ) )\n    MaximumSum = ( MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] ) ) ;\n    print ( MaximumSum )", "target_program": " int MaxSumDifference ( int a [ ], int n ) {\n  vector < int > finalSequence;\n  sort ( a, a + n );\n  for ( int i = 0;\n  i < n / 2;\n  ++ i ) {\n    finalSequence . push_back ( a [ i ] );\n    finalSequence . push_back ( a [ n - i - 1 ] );\n  }\n  int MaximumSum = 0;\n  for ( int i = 0;\n  i < n - 1;\n  ++ i ) {\n    MaximumSum = MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] );\n  }\n  MaximumSum = MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] );\n  return MaximumSum;\n}"}
{"source": "java", "target": "python", "source_program": " static int MaxSumDifference ( Integer [ ] a , int n ) {\n  List < Integer > finalSequence = new ArrayList < Integer > ( ) ;\n  Arrays . sort ( a ) ;\n  for ( int i = 0 ;\n  i < n / 2 ;\n  ++ i ) {\n    finalSequence . add ( a [ i ] ) ;\n    finalSequence . add ( a [ n - i - 1 ] ) ;\n  }\n  int MaximumSum = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ++ i ) {\n    MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( i ) - finalSequence . get ( i + 1 ) ) ;\n  }\n  MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( n - 1 ) - finalSequence . get ( 0 ) ) ;\n  return MaximumSum ;\n}", "target_program": " def MaxSumDifference ( a , n ) :\n    np.sort ( a ) ;\n    j = 0\n    finalSequence = [ 0 for x in range ( n ) ]\n    for i in range ( 0 , int ( n / 2 ) ) :\n        finalSequence [ j ] = a [ i ]\n        finalSequence [ j + 1 ] = a [ n - i - 1 ]\n        j = j + 2\n    MaximumSum = 0\n    for i in range ( 0 , n - 1 ) :\n        MaximumSum = ( MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] ) )\n    MaximumSum = ( MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] ) ) ;\n    print ( MaximumSum )"}
{"source": "java", "target": "cpp", "source_program": " static int MaxSumDifference ( Integer [ ] a , int n ) {\n  List < Integer > finalSequence = new ArrayList < Integer > ( ) ;\n  Arrays . sort ( a ) ;\n  for ( int i = 0 ;\n  i < n / 2 ;\n  ++ i ) {\n    finalSequence . add ( a [ i ] ) ;\n    finalSequence . add ( a [ n - i - 1 ] ) ;\n  }\n  int MaximumSum = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ++ i ) {\n    MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( i ) - finalSequence . get ( i + 1 ) ) ;\n  }\n  MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( n - 1 ) - finalSequence . get ( 0 ) ) ;\n  return MaximumSum ;\n}", "target_program": " int MaxSumDifference ( int a [ ], int n ) {\n  vector < int > finalSequence;\n  sort ( a, a + n );\n  for ( int i = 0;\n  i < n / 2;\n  ++ i ) {\n    finalSequence . push_back ( a [ i ] );\n    finalSequence . push_back ( a [ n - i - 1 ] );\n  }\n  int MaximumSum = 0;\n  for ( int i = 0;\n  i < n - 1;\n  ++ i ) {\n    MaximumSum = MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] );\n  }\n  MaximumSum = MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] );\n  return MaximumSum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int MaxSumDifference ( int a [ ], int n ) {\n  vector < int > finalSequence;\n  sort ( a, a + n );\n  for ( int i = 0;\n  i < n / 2;\n  ++ i ) {\n    finalSequence . push_back ( a [ i ] );\n    finalSequence . push_back ( a [ n - i - 1 ] );\n  }\n  int MaximumSum = 0;\n  for ( int i = 0;\n  i < n - 1;\n  ++ i ) {\n    MaximumSum = MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] );\n  }\n  MaximumSum = MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] );\n  return MaximumSum;\n}", "target_program": " static int MaxSumDifference ( Integer [ ] a , int n ) {\n  List < Integer > finalSequence = new ArrayList < Integer > ( ) ;\n  Arrays . sort ( a ) ;\n  for ( int i = 0 ;\n  i < n / 2 ;\n  ++ i ) {\n    finalSequence . add ( a [ i ] ) ;\n    finalSequence . add ( a [ n - i - 1 ] ) ;\n  }\n  int MaximumSum = 0 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ++ i ) {\n    MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( i ) - finalSequence . get ( i + 1 ) ) ;\n  }\n  MaximumSum = MaximumSum + Math . abs ( finalSequence . get ( n - 1 ) - finalSequence . get ( 0 ) ) ;\n  return MaximumSum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int MaxSumDifference ( int a [ ], int n ) {\n  vector < int > finalSequence;\n  sort ( a, a + n );\n  for ( int i = 0;\n  i < n / 2;\n  ++ i ) {\n    finalSequence . push_back ( a [ i ] );\n    finalSequence . push_back ( a [ n - i - 1 ] );\n  }\n  int MaximumSum = 0;\n  for ( int i = 0;\n  i < n - 1;\n  ++ i ) {\n    MaximumSum = MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] );\n  }\n  MaximumSum = MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] );\n  return MaximumSum;\n}", "target_program": " def MaxSumDifference ( a , n ) :\n    np.sort ( a ) ;\n    j = 0\n    finalSequence = [ 0 for x in range ( n ) ]\n    for i in range ( 0 , int ( n / 2 ) ) :\n        finalSequence [ j ] = a [ i ]\n        finalSequence [ j + 1 ] = a [ n - i - 1 ]\n        j = j + 2\n    MaximumSum = 0\n    for i in range ( 0 , n - 1 ) :\n        MaximumSum = ( MaximumSum + abs ( finalSequence [ i ] - finalSequence [ i + 1 ] ) )\n    MaximumSum = ( MaximumSum + abs ( finalSequence [ n - 1 ] - finalSequence [ 0 ] ) ) ;\n    print ( MaximumSum )"}
{"source": "python", "target": "java", "source_program": " def midpoint ( x1 , x2 , y1 , y2 ) :\n    print ( ( x1 + x2 ) // 2 , \" , \" , ( y1 + y2 ) // 2 )", "target_program": " static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( x1 + x2 ) / 2 + \" , \" + ( y1 + y2 ) / 2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def midpoint ( x1 , x2 , y1 , y2 ) :\n    print ( ( x1 + x2 ) // 2 , \" , \" , ( y1 + y2 ) // 2 )", "target_program": " void midpoint ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \" , \" << ( float ) ( y1 + y2 ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( x1 + x2 ) / 2 + \" , \" + ( y1 + y2 ) / 2 ) ;\n}", "target_program": " def midpoint ( x1 , x2 , y1 , y2 ) :\n    print ( ( x1 + x2 ) // 2 , \" , \" , ( y1 + y2 ) // 2 )"}
{"source": "java", "target": "cpp", "source_program": " static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( x1 + x2 ) / 2 + \" , \" + ( y1 + y2 ) / 2 ) ;\n}", "target_program": " void midpoint ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \" , \" << ( float ) ( y1 + y2 ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " void midpoint ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \" , \" << ( float ) ( y1 + y2 ) / 2;\n}", "target_program": " static void midpoint ( int x1 , int x2 , int y1 , int y2 ) {\n  System . out . print ( ( x1 + x2 ) / 2 + \" , \" + ( y1 + y2 ) / 2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void midpoint ( int x1, int x2, int y1, int y2 ) {\n  cout << ( float ) ( x1 + x2 ) / 2 << \" , \" << ( float ) ( y1 + y2 ) / 2;\n}", "target_program": " def midpoint ( x1 , x2 , y1 , y2 ) :\n    print ( ( x1 + x2 ) // 2 , \" , \" , ( y1 + y2 ) // 2 )"}
{"source": "python", "target": "java", "source_program": " def alternateSort ( arr , n ) :\n    arr.sort ( )\n    i = 0\n    j = n - 1\n    while ( i < j ) :\n        print ( arr [ j ] , end = \" \" )\n        j -= 1\n        print ( arr [ i ] , end = \" \" )\n        i += 1\n    if ( n % 2 != 0 ) :\n        print ( arr [ i ] )", "target_program": " static void alternateSort ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int i = 0 , j = n - 1 ;\n  while ( i < j ) {\n    System . out . print ( arr [ j -- ] + \" \" ) ;\n    System . out . print ( arr [ i ++ ] + \" \" ) ;\n  }\n  if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def alternateSort ( arr , n ) :\n    arr.sort ( )\n    i = 0\n    j = n - 1\n    while ( i < j ) :\n        print ( arr [ j ] , end = \" \" )\n        j -= 1\n        print ( arr [ i ] , end = \" \" )\n        i += 1\n    if ( n % 2 != 0 ) :\n        print ( arr [ i ] )", "target_program": " void alternateSort ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int i = 0, j = n - 1;\n  while ( i < j ) {\n    cout << arr [ j -- ] << \" \";\n    cout << arr [ i ++ ] << \" \";\n  }\n  if ( n % 2 != 0 ) cout << arr [ i ];\n}"}
{"source": "java", "target": "python", "source_program": " static void alternateSort ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int i = 0 , j = n - 1 ;\n  while ( i < j ) {\n    System . out . print ( arr [ j -- ] + \" \" ) ;\n    System . out . print ( arr [ i ++ ] + \" \" ) ;\n  }\n  if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;\n}", "target_program": " def alternateSort ( arr , n ) :\n    arr.sort ( )\n    i = 0\n    j = n - 1\n    while ( i < j ) :\n        print ( arr [ j ] , end = \" \" )\n        j -= 1\n        print ( arr [ i ] , end = \" \" )\n        i += 1\n    if ( n % 2 != 0 ) :\n        print ( arr [ i ] )"}
{"source": "java", "target": "cpp", "source_program": " static void alternateSort ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int i = 0 , j = n - 1 ;\n  while ( i < j ) {\n    System . out . print ( arr [ j -- ] + \" \" ) ;\n    System . out . print ( arr [ i ++ ] + \" \" ) ;\n  }\n  if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;\n}", "target_program": " void alternateSort ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int i = 0, j = n - 1;\n  while ( i < j ) {\n    cout << arr [ j -- ] << \" \";\n    cout << arr [ i ++ ] << \" \";\n  }\n  if ( n % 2 != 0 ) cout << arr [ i ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void alternateSort ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int i = 0, j = n - 1;\n  while ( i < j ) {\n    cout << arr [ j -- ] << \" \";\n    cout << arr [ i ++ ] << \" \";\n  }\n  if ( n % 2 != 0 ) cout << arr [ i ];\n}", "target_program": " static void alternateSort ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int i = 0 , j = n - 1 ;\n  while ( i < j ) {\n    System . out . print ( arr [ j -- ] + \" \" ) ;\n    System . out . print ( arr [ i ++ ] + \" \" ) ;\n  }\n  if ( n % 2 != 0 ) System . out . print ( arr [ i ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void alternateSort ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int i = 0, j = n - 1;\n  while ( i < j ) {\n    cout << arr [ j -- ] << \" \";\n    cout << arr [ i ++ ] << \" \";\n  }\n  if ( n % 2 != 0 ) cout << arr [ i ];\n}", "target_program": " def alternateSort ( arr , n ) :\n    arr.sort ( )\n    i = 0\n    j = n - 1\n    while ( i < j ) :\n        print ( arr [ j ] , end = \" \" )\n        j -= 1\n        print ( arr [ i ] , end = \" \" )\n        i += 1\n    if ( n % 2 != 0 ) :\n        print ( arr [ i ] )"}
{"source": "python", "target": "java", "source_program": " def findSubarraySum ( arr , n , Sum ) :\n    prevSum = defaultdict ( lambda : 0 )\n    res = 0\n    currsum = 0\n    for i in range ( 0 , n ) :\n        currsum += arr [ i ]\n        if currsum == Sum :\n            res += 1\n        if ( currsum - Sum ) in prevSum :\n            res += prevSum [ currsum - Sum ]\n        prevSum [ currsum ] += 1\n    return res", "target_program": " static int findSubarraySum ( int arr [ ] , int n , int sum ) {\n  HashMap < Integer , Integer > prevSum = new HashMap < > ( ) ;\n  int res = 0 ;\n  int currsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    currsum += arr [ i ] ;\n    if ( currsum == sum ) res ++ ;\n    if ( prevSum . containsKey ( currsum - sum ) ) res += prevSum . get ( currsum - sum ) ;\n    Integer count = prevSum . get ( currsum ) ;\n    if ( count == null ) prevSum . put ( currsum , 1 ) ;\n    else prevSum . put ( currsum , count + 1 ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSubarraySum ( arr , n , Sum ) :\n    prevSum = defaultdict ( lambda : 0 )\n    res = 0\n    currsum = 0\n    for i in range ( 0 , n ) :\n        currsum += arr [ i ]\n        if currsum == Sum :\n            res += 1\n        if ( currsum - Sum ) in prevSum :\n            res += prevSum [ currsum - Sum ]\n        prevSum [ currsum ] += 1\n    return res", "target_program": " int findSubarraySum ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > prevSum;\n  int res = 0;\n  int currsum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    currsum += arr [ i ];\n    if ( currsum == sum ) res ++;\n    if ( prevSum . find ( currsum - sum ) != prevSum . end ( ) ) res += ( prevSum [ currsum - sum ] );\n    prevSum [ currsum ] ++;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int findSubarraySum ( int arr [ ] , int n , int sum ) {\n  HashMap < Integer , Integer > prevSum = new HashMap < > ( ) ;\n  int res = 0 ;\n  int currsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    currsum += arr [ i ] ;\n    if ( currsum == sum ) res ++ ;\n    if ( prevSum . containsKey ( currsum - sum ) ) res += prevSum . get ( currsum - sum ) ;\n    Integer count = prevSum . get ( currsum ) ;\n    if ( count == null ) prevSum . put ( currsum , 1 ) ;\n    else prevSum . put ( currsum , count + 1 ) ;\n  }\n  return res ;\n}", "target_program": " def findSubarraySum ( arr , n , Sum ) :\n    prevSum = defaultdict ( lambda : 0 )\n    res = 0\n    currsum = 0\n    for i in range ( 0 , n ) :\n        currsum += arr [ i ]\n        if currsum == Sum :\n            res += 1\n        if ( currsum - Sum ) in prevSum :\n            res += prevSum [ currsum - Sum ]\n        prevSum [ currsum ] += 1\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int findSubarraySum ( int arr [ ] , int n , int sum ) {\n  HashMap < Integer , Integer > prevSum = new HashMap < > ( ) ;\n  int res = 0 ;\n  int currsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    currsum += arr [ i ] ;\n    if ( currsum == sum ) res ++ ;\n    if ( prevSum . containsKey ( currsum - sum ) ) res += prevSum . get ( currsum - sum ) ;\n    Integer count = prevSum . get ( currsum ) ;\n    if ( count == null ) prevSum . put ( currsum , 1 ) ;\n    else prevSum . put ( currsum , count + 1 ) ;\n  }\n  return res ;\n}", "target_program": " int findSubarraySum ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > prevSum;\n  int res = 0;\n  int currsum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    currsum += arr [ i ];\n    if ( currsum == sum ) res ++;\n    if ( prevSum . find ( currsum - sum ) != prevSum . end ( ) ) res += ( prevSum [ currsum - sum ] );\n    prevSum [ currsum ] ++;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSubarraySum ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > prevSum;\n  int res = 0;\n  int currsum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    currsum += arr [ i ];\n    if ( currsum == sum ) res ++;\n    if ( prevSum . find ( currsum - sum ) != prevSum . end ( ) ) res += ( prevSum [ currsum - sum ] );\n    prevSum [ currsum ] ++;\n  }\n  return res;\n}", "target_program": " static int findSubarraySum ( int arr [ ] , int n , int sum ) {\n  HashMap < Integer , Integer > prevSum = new HashMap < > ( ) ;\n  int res = 0 ;\n  int currsum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    currsum += arr [ i ] ;\n    if ( currsum == sum ) res ++ ;\n    if ( prevSum . containsKey ( currsum - sum ) ) res += prevSum . get ( currsum - sum ) ;\n    Integer count = prevSum . get ( currsum ) ;\n    if ( count == null ) prevSum . put ( currsum , 1 ) ;\n    else prevSum . put ( currsum , count + 1 ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSubarraySum ( int arr [ ], int n, int sum ) {\n  unordered_map < int, int > prevSum;\n  int res = 0;\n  int currsum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    currsum += arr [ i ];\n    if ( currsum == sum ) res ++;\n    if ( prevSum . find ( currsum - sum ) != prevSum . end ( ) ) res += ( prevSum [ currsum - sum ] );\n    prevSum [ currsum ] ++;\n  }\n  return res;\n}", "target_program": " def findSubarraySum ( arr , n , Sum ) :\n    prevSum = defaultdict ( lambda : 0 )\n    res = 0\n    currsum = 0\n    for i in range ( 0 , n ) :\n        currsum += arr [ i ]\n        if currsum == Sum :\n            res += 1\n        if ( currsum - Sum ) in prevSum :\n            res += prevSum [ currsum - Sum ]\n        prevSum [ currsum ] += 1\n    return res"}
{"source": "python", "target": "java", "source_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = low + ( high - low ) / 2\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )", "target_program": " public static void search ( int [ ] arr , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . println ( \"The required element is \" + arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else if ( mid % 2 == 1 ) {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = low + ( high - low ) / 2\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )", "target_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void search ( int [ ] arr , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . println ( \"The required element is \" + arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else if ( mid % 2 == 1 ) {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}", "target_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = low + ( high - low ) / 2\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )"}
{"source": "java", "target": "cpp", "source_program": " public static void search ( int [ ] arr , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . println ( \"The required element is \" + arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else if ( mid % 2 == 1 ) {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}", "target_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}", "target_program": " public static void search ( int [ ] arr , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . println ( \"The required element is \" + arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else if ( mid % 2 == 1 ) {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}", "target_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = low + ( high - low ) / 2\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )"}
{"source": "python", "target": "java", "source_program": " def smallestNumber ( num ) :\n    num = list ( num )\n    n = len ( num )\n    rightMin = [ 0 ] * n\n    right = 0\n    rightMin [ n - 1 ] = - 1 ;\n    right = n - 1 ;\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if num [ i ] > num [ right ] :\n            rightMin [ i ] = right\n        else :\n            rightMin [ i ] = - 1\n            right = i\n    small = - 1\n    for i in range ( 1 , n ) :\n        if num [ i ] != '0' :\n            if small == - 1 :\n                if num [ i ] < num [ 0 ] :\n                    small = i\n            elif num [ i ] < num [ small ] :\n                small = i\n    if small != - 1 :\n        num [ 0 ] , num [ small ] = num [ small ] , num [ 0 ]\n    else :\n        for i in range ( 1 , n ) :\n            if rightMin [ i ] != - 1 :\n                num [ i ] , num [ rightMin [ i ] ] = num [ rightMin [ i ] ] , num [ i ]\n                break\n    return ''.join ( num )", "target_program": " public static String smallestNumber ( String str ) {\n  char [ ] num = str . toCharArray ( ) ;\n  int n = str . length ( ) ;\n  int [ ] rightMin = new int [ n ] ;\n  rightMin [ n - 1 ] = - 1 ;\n  int right = n - 1 ;\n  for ( int i = n - 2 ;\n  i >= 1 ;\n  i -- ) {\n    if ( num [ i ] > num [ right ] ) rightMin [ i ] = right ;\n    else {\n      rightMin [ i ] = - 1 ;\n      right = i ;\n    }\n  }\n  int small = - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i ;\n    }\n    else if ( num [ i ] < num [ small ] ) small = i ;\n  }\n  if ( small != - 1 ) {\n    char temp ;\n    temp = num [ 0 ] ;\n    num [ 0 ] = num [ small ] ;\n    num [ small ] = temp ;\n  }\n  else {\n    for ( int i = 1 ;\n    i < n ;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 ) {\n        char temp ;\n        temp = num [ i ] ;\n        num [ i ] = num [ rightMin [ i ] ] ;\n        num [ rightMin [ i ] ] = temp ;\n        break ;\n      }\n    }\n  }\n  return ( new String ( num ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def smallestNumber ( num ) :\n    num = list ( num )\n    n = len ( num )\n    rightMin = [ 0 ] * n\n    right = 0\n    rightMin [ n - 1 ] = - 1 ;\n    right = n - 1 ;\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if num [ i ] > num [ right ] :\n            rightMin [ i ] = right\n        else :\n            rightMin [ i ] = - 1\n            right = i\n    small = - 1\n    for i in range ( 1 , n ) :\n        if num [ i ] != '0' :\n            if small == - 1 :\n                if num [ i ] < num [ 0 ] :\n                    small = i\n            elif num [ i ] < num [ small ] :\n                small = i\n    if small != - 1 :\n        num [ 0 ] , num [ small ] = num [ small ] , num [ 0 ]\n    else :\n        for i in range ( 1 , n ) :\n            if rightMin [ i ] != - 1 :\n                num [ i ] , num [ rightMin [ i ] ] = num [ rightMin [ i ] ] , num [ i ]\n                break\n    return ''.join ( num )", "target_program": " string smallestNumber ( string num ) {\n  int n = num . size ( );\n  int rightMin [ n ], right;\n  rightMin [ n - 1 ] = - 1;\n  right = n - 1;\n  for ( int i = n - 2;\n  i >= 1;\n  i -- ) {\n    if ( num [ i ] >= num [ right ] ) rightMin [ i ] = right;\n    else {\n      if ( num [ i ] == num [ i + 1 ] ) {\n        rightMin [ i ] = right;\n      }\n      else {\n        rightMin [ i ] = - 1;\n        right = i;\n      }\n    }\n  }\n  int small = - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i;\n    }\n    else if ( num [ i ] <= num [ small ] ) small = i;\n  }\n  if ( small != - 1 ) swap ( num [ 0 ], num [ small ] );\n  else {\n    for ( int i = 1;\n    i < n;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 && num [ i ] != num [ rightMin [ i ] ] ) {\n        swap ( num [ i ], num [ rightMin [ i ] ] );\n        break;\n      }\n    }\n  }\n  return num;\n}"}
{"source": "java", "target": "python", "source_program": " public static String smallestNumber ( String str ) {\n  char [ ] num = str . toCharArray ( ) ;\n  int n = str . length ( ) ;\n  int [ ] rightMin = new int [ n ] ;\n  rightMin [ n - 1 ] = - 1 ;\n  int right = n - 1 ;\n  for ( int i = n - 2 ;\n  i >= 1 ;\n  i -- ) {\n    if ( num [ i ] > num [ right ] ) rightMin [ i ] = right ;\n    else {\n      rightMin [ i ] = - 1 ;\n      right = i ;\n    }\n  }\n  int small = - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i ;\n    }\n    else if ( num [ i ] < num [ small ] ) small = i ;\n  }\n  if ( small != - 1 ) {\n    char temp ;\n    temp = num [ 0 ] ;\n    num [ 0 ] = num [ small ] ;\n    num [ small ] = temp ;\n  }\n  else {\n    for ( int i = 1 ;\n    i < n ;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 ) {\n        char temp ;\n        temp = num [ i ] ;\n        num [ i ] = num [ rightMin [ i ] ] ;\n        num [ rightMin [ i ] ] = temp ;\n        break ;\n      }\n    }\n  }\n  return ( new String ( num ) ) ;\n}", "target_program": " def smallestNumber ( num ) :\n    num = list ( num )\n    n = len ( num )\n    rightMin = [ 0 ] * n\n    right = 0\n    rightMin [ n - 1 ] = - 1 ;\n    right = n - 1 ;\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if num [ i ] > num [ right ] :\n            rightMin [ i ] = right\n        else :\n            rightMin [ i ] = - 1\n            right = i\n    small = - 1\n    for i in range ( 1 , n ) :\n        if num [ i ] != '0' :\n            if small == - 1 :\n                if num [ i ] < num [ 0 ] :\n                    small = i\n            elif num [ i ] < num [ small ] :\n                small = i\n    if small != - 1 :\n        num [ 0 ] , num [ small ] = num [ small ] , num [ 0 ]\n    else :\n        for i in range ( 1 , n ) :\n            if rightMin [ i ] != - 1 :\n                num [ i ] , num [ rightMin [ i ] ] = num [ rightMin [ i ] ] , num [ i ]\n                break\n    return ''.join ( num )"}
{"source": "java", "target": "cpp", "source_program": " public static String smallestNumber ( String str ) {\n  char [ ] num = str . toCharArray ( ) ;\n  int n = str . length ( ) ;\n  int [ ] rightMin = new int [ n ] ;\n  rightMin [ n - 1 ] = - 1 ;\n  int right = n - 1 ;\n  for ( int i = n - 2 ;\n  i >= 1 ;\n  i -- ) {\n    if ( num [ i ] > num [ right ] ) rightMin [ i ] = right ;\n    else {\n      rightMin [ i ] = - 1 ;\n      right = i ;\n    }\n  }\n  int small = - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i ;\n    }\n    else if ( num [ i ] < num [ small ] ) small = i ;\n  }\n  if ( small != - 1 ) {\n    char temp ;\n    temp = num [ 0 ] ;\n    num [ 0 ] = num [ small ] ;\n    num [ small ] = temp ;\n  }\n  else {\n    for ( int i = 1 ;\n    i < n ;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 ) {\n        char temp ;\n        temp = num [ i ] ;\n        num [ i ] = num [ rightMin [ i ] ] ;\n        num [ rightMin [ i ] ] = temp ;\n        break ;\n      }\n    }\n  }\n  return ( new String ( num ) ) ;\n}", "target_program": " string smallestNumber ( string num ) {\n  int n = num . size ( );\n  int rightMin [ n ], right;\n  rightMin [ n - 1 ] = - 1;\n  right = n - 1;\n  for ( int i = n - 2;\n  i >= 1;\n  i -- ) {\n    if ( num [ i ] >= num [ right ] ) rightMin [ i ] = right;\n    else {\n      if ( num [ i ] == num [ i + 1 ] ) {\n        rightMin [ i ] = right;\n      }\n      else {\n        rightMin [ i ] = - 1;\n        right = i;\n      }\n    }\n  }\n  int small = - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i;\n    }\n    else if ( num [ i ] <= num [ small ] ) small = i;\n  }\n  if ( small != - 1 ) swap ( num [ 0 ], num [ small ] );\n  else {\n    for ( int i = 1;\n    i < n;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 && num [ i ] != num [ rightMin [ i ] ] ) {\n        swap ( num [ i ], num [ rightMin [ i ] ] );\n        break;\n      }\n    }\n  }\n  return num;\n}"}
{"source": "cpp", "target": "java", "source_program": " string smallestNumber ( string num ) {\n  int n = num . size ( );\n  int rightMin [ n ], right;\n  rightMin [ n - 1 ] = - 1;\n  right = n - 1;\n  for ( int i = n - 2;\n  i >= 1;\n  i -- ) {\n    if ( num [ i ] >= num [ right ] ) rightMin [ i ] = right;\n    else {\n      if ( num [ i ] == num [ i + 1 ] ) {\n        rightMin [ i ] = right;\n      }\n      else {\n        rightMin [ i ] = - 1;\n        right = i;\n      }\n    }\n  }\n  int small = - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i;\n    }\n    else if ( num [ i ] <= num [ small ] ) small = i;\n  }\n  if ( small != - 1 ) swap ( num [ 0 ], num [ small ] );\n  else {\n    for ( int i = 1;\n    i < n;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 && num [ i ] != num [ rightMin [ i ] ] ) {\n        swap ( num [ i ], num [ rightMin [ i ] ] );\n        break;\n      }\n    }\n  }\n  return num;\n}", "target_program": " public static String smallestNumber ( String str ) {\n  char [ ] num = str . toCharArray ( ) ;\n  int n = str . length ( ) ;\n  int [ ] rightMin = new int [ n ] ;\n  rightMin [ n - 1 ] = - 1 ;\n  int right = n - 1 ;\n  for ( int i = n - 2 ;\n  i >= 1 ;\n  i -- ) {\n    if ( num [ i ] > num [ right ] ) rightMin [ i ] = right ;\n    else {\n      rightMin [ i ] = - 1 ;\n      right = i ;\n    }\n  }\n  int small = - 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i ;\n    }\n    else if ( num [ i ] < num [ small ] ) small = i ;\n  }\n  if ( small != - 1 ) {\n    char temp ;\n    temp = num [ 0 ] ;\n    num [ 0 ] = num [ small ] ;\n    num [ small ] = temp ;\n  }\n  else {\n    for ( int i = 1 ;\n    i < n ;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 ) {\n        char temp ;\n        temp = num [ i ] ;\n        num [ i ] = num [ rightMin [ i ] ] ;\n        num [ rightMin [ i ] ] = temp ;\n        break ;\n      }\n    }\n  }\n  return ( new String ( num ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string smallestNumber ( string num ) {\n  int n = num . size ( );\n  int rightMin [ n ], right;\n  rightMin [ n - 1 ] = - 1;\n  right = n - 1;\n  for ( int i = n - 2;\n  i >= 1;\n  i -- ) {\n    if ( num [ i ] >= num [ right ] ) rightMin [ i ] = right;\n    else {\n      if ( num [ i ] == num [ i + 1 ] ) {\n        rightMin [ i ] = right;\n      }\n      else {\n        rightMin [ i ] = - 1;\n        right = i;\n      }\n    }\n  }\n  int small = - 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) if ( num [ i ] != '0' ) {\n    if ( small == - 1 ) {\n      if ( num [ i ] < num [ 0 ] ) small = i;\n    }\n    else if ( num [ i ] <= num [ small ] ) small = i;\n  }\n  if ( small != - 1 ) swap ( num [ 0 ], num [ small ] );\n  else {\n    for ( int i = 1;\n    i < n;\n    i ++ ) {\n      if ( rightMin [ i ] != - 1 && num [ i ] != num [ rightMin [ i ] ] ) {\n        swap ( num [ i ], num [ rightMin [ i ] ] );\n        break;\n      }\n    }\n  }\n  return num;\n}", "target_program": " def smallestNumber ( num ) :\n    num = list ( num )\n    n = len ( num )\n    rightMin = [ 0 ] * n\n    right = 0\n    rightMin [ n - 1 ] = - 1 ;\n    right = n - 1 ;\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if num [ i ] > num [ right ] :\n            rightMin [ i ] = right\n        else :\n            rightMin [ i ] = - 1\n            right = i\n    small = - 1\n    for i in range ( 1 , n ) :\n        if num [ i ] != '0' :\n            if small == - 1 :\n                if num [ i ] < num [ 0 ] :\n                    small = i\n            elif num [ i ] < num [ small ] :\n                small = i\n    if small != - 1 :\n        num [ 0 ] , num [ small ] = num [ small ] , num [ 0 ]\n    else :\n        for i in range ( 1 , n ) :\n            if rightMin [ i ] != - 1 :\n                num [ i ] , num [ rightMin [ i ] ] = num [ rightMin [ i ] ] , num [ i ]\n                break\n    return ''.join ( num )"}
{"source": "python", "target": "java", "source_program": " def areaSquare ( side ) :\n    area = side * side\n    return area", "target_program": " static int areaSquare ( int side ) {\n  int area = side * side ;\n  return area ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def areaSquare ( side ) :\n    area = side * side\n    return area", "target_program": " int areaSquare ( int side ) {\n  int area = side * side;\n  return area;\n}"}
{"source": "java", "target": "python", "source_program": " static int areaSquare ( int side ) {\n  int area = side * side ;\n  return area ;\n}", "target_program": " def areaSquare ( side ) :\n    area = side * side\n    return area"}
{"source": "java", "target": "cpp", "source_program": " static int areaSquare ( int side ) {\n  int area = side * side ;\n  return area ;\n}", "target_program": " int areaSquare ( int side ) {\n  int area = side * side;\n  return area;\n}"}
{"source": "cpp", "target": "java", "source_program": " int areaSquare ( int side ) {\n  int area = side * side;\n  return area;\n}", "target_program": " static int areaSquare ( int side ) {\n  int area = side * side ;\n  return area ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int areaSquare ( int side ) {\n  int area = side * side;\n  return area;\n}", "target_program": " def areaSquare ( side ) :\n    area = side * side\n    return area"}
{"source": "python", "target": "java", "source_program": " def sortit ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = i + 1", "target_program": " static void sortit ( int [ ] arr , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = i + 1 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def sortit ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = i + 1", "target_program": " void sortit ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = i + 1;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void sortit ( int [ ] arr , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = i + 1 ;\n  }\n}", "target_program": " def sortit ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = i + 1"}
{"source": "java", "target": "cpp", "source_program": " static void sortit ( int [ ] arr , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = i + 1 ;\n  }\n}", "target_program": " void sortit ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = i + 1;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void sortit ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = i + 1;\n  }\n}", "target_program": " static void sortit ( int [ ] arr , int n ) {\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    arr [ i ] = i + 1 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void sortit ( int arr [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = i + 1;\n  }\n}", "target_program": " def sortit ( arr , n ) :\n    for i in range ( n ) :\n        arr [ i ] = i + 1"}
{"source": "python", "target": "java", "source_program": " def LowerInsertionPoint ( arr , n , X ) :\n    if ( X < arr [ 0 ] ) :\n        return 0 ;\n    elif ( X > arr [ n - 1 ] ) :\n        return n\n    lowerPnt = 0\n    i = 1\n    while ( i < n and arr [ i ] < X ) :\n        lowerPnt = i\n        i = i * 2\n    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :\n        lowerPnt += 1\n    return lowerPnt", "target_program": " static int LowerInsertionPoint ( int arr [ ] , int n , int X ) {\n  if ( X < arr [ 0 ] ) return 0 ;\n  else if ( X > arr [ n - 1 ] ) return n ;\n  int lowerPnt = 0 ;\n  int i = 1 ;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i ;\n    i = i * 2 ;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++ ;\n  return lowerPnt ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def LowerInsertionPoint ( arr , n , X ) :\n    if ( X < arr [ 0 ] ) :\n        return 0 ;\n    elif ( X > arr [ n - 1 ] ) :\n        return n\n    lowerPnt = 0\n    i = 1\n    while ( i < n and arr [ i ] < X ) :\n        lowerPnt = i\n        i = i * 2\n    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :\n        lowerPnt += 1\n    return lowerPnt", "target_program": " int LowerInsertionPoint ( int arr [ ], int n, int X ) {\n  if ( X < arr [ 0 ] ) return 0;\n  else if ( X > arr [ n - 1 ] ) return n;\n  int lowerPnt = 0;\n  int i = 1;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i;\n    i = i * 2;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++;\n  return lowerPnt;\n}"}
{"source": "java", "target": "python", "source_program": " static int LowerInsertionPoint ( int arr [ ] , int n , int X ) {\n  if ( X < arr [ 0 ] ) return 0 ;\n  else if ( X > arr [ n - 1 ] ) return n ;\n  int lowerPnt = 0 ;\n  int i = 1 ;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i ;\n    i = i * 2 ;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++ ;\n  return lowerPnt ;\n}", "target_program": " def LowerInsertionPoint ( arr , n , X ) :\n    if ( X < arr [ 0 ] ) :\n        return 0 ;\n    elif ( X > arr [ n - 1 ] ) :\n        return n\n    lowerPnt = 0\n    i = 1\n    while ( i < n and arr [ i ] < X ) :\n        lowerPnt = i\n        i = i * 2\n    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :\n        lowerPnt += 1\n    return lowerPnt"}
{"source": "java", "target": "cpp", "source_program": " static int LowerInsertionPoint ( int arr [ ] , int n , int X ) {\n  if ( X < arr [ 0 ] ) return 0 ;\n  else if ( X > arr [ n - 1 ] ) return n ;\n  int lowerPnt = 0 ;\n  int i = 1 ;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i ;\n    i = i * 2 ;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++ ;\n  return lowerPnt ;\n}", "target_program": " int LowerInsertionPoint ( int arr [ ], int n, int X ) {\n  if ( X < arr [ 0 ] ) return 0;\n  else if ( X > arr [ n - 1 ] ) return n;\n  int lowerPnt = 0;\n  int i = 1;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i;\n    i = i * 2;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++;\n  return lowerPnt;\n}"}
{"source": "cpp", "target": "java", "source_program": " int LowerInsertionPoint ( int arr [ ], int n, int X ) {\n  if ( X < arr [ 0 ] ) return 0;\n  else if ( X > arr [ n - 1 ] ) return n;\n  int lowerPnt = 0;\n  int i = 1;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i;\n    i = i * 2;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++;\n  return lowerPnt;\n}", "target_program": " static int LowerInsertionPoint ( int arr [ ] , int n , int X ) {\n  if ( X < arr [ 0 ] ) return 0 ;\n  else if ( X > arr [ n - 1 ] ) return n ;\n  int lowerPnt = 0 ;\n  int i = 1 ;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i ;\n    i = i * 2 ;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++ ;\n  return lowerPnt ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int LowerInsertionPoint ( int arr [ ], int n, int X ) {\n  if ( X < arr [ 0 ] ) return 0;\n  else if ( X > arr [ n - 1 ] ) return n;\n  int lowerPnt = 0;\n  int i = 1;\n  while ( i < n && arr [ i ] < X ) {\n    lowerPnt = i;\n    i = i * 2;\n  }\n  while ( lowerPnt < n && arr [ lowerPnt ] < X ) lowerPnt ++;\n  return lowerPnt;\n}", "target_program": " def LowerInsertionPoint ( arr , n , X ) :\n    if ( X < arr [ 0 ] ) :\n        return 0 ;\n    elif ( X > arr [ n - 1 ] ) :\n        return n\n    lowerPnt = 0\n    i = 1\n    while ( i < n and arr [ i ] < X ) :\n        lowerPnt = i\n        i = i * 2\n    while ( lowerPnt < n and arr [ lowerPnt ] < X ) :\n        lowerPnt += 1\n    return lowerPnt"}
{"source": "python", "target": "java", "source_program": " def constructPalin ( string , l ) :\n    string = list ( string )\n    i = - 1\n    j = l\n    while i < j :\n        i += 1\n        j -= 1\n        if ( string [ i ] == string [ j ] and string [ i ] != '*' ) :\n            continue\n        elif ( string [ i ] == string [ j ] and string [ i ] == '*' ) :\n            string [ i ] = 'a'\n            string [ j ] = 'a'\n            continue\n        elif string [ i ] == '*' :\n            string [ i ] = string [ j ]\n            continue\n        elif string [ j ] == '*' :\n            string [ j ] = string [ i ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( string )", "target_program": " static String constructPalin ( char [ ] str , int len ) {\n  int i = 0 , j = len - 1 ;\n  for ( ;\n  i < j ;\n  i ++ , j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue ;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a' ;\n      str [ j ] = 'a' ;\n      continue ;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ] ;\n      continue ;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ] ;\n      continue ;\n    }\n    System . out . println ( \"Not Possible\" ) ;\n    return \"\" ;\n  }\n  return String . valueOf ( str ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def constructPalin ( string , l ) :\n    string = list ( string )\n    i = - 1\n    j = l\n    while i < j :\n        i += 1\n        j -= 1\n        if ( string [ i ] == string [ j ] and string [ i ] != '*' ) :\n            continue\n        elif ( string [ i ] == string [ j ] and string [ i ] == '*' ) :\n            string [ i ] = 'a'\n            string [ j ] = 'a'\n            continue\n        elif string [ i ] == '*' :\n            string [ i ] = string [ j ]\n            continue\n        elif string [ j ] == '*' :\n            string [ j ] = string [ i ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( string )", "target_program": " string constructPalin ( string str, int len ) {\n  int i = 0, j = len - 1;\n  for (;\n  i < j;\n  i ++, j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a';\n      str [ j ] = 'a';\n      continue;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ];\n      continue;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ];\n      continue;\n    }\n    cout << \"Not Possible\";\n    return \"\";\n  }\n  return str;\n}"}
{"source": "java", "target": "python", "source_program": " static String constructPalin ( char [ ] str , int len ) {\n  int i = 0 , j = len - 1 ;\n  for ( ;\n  i < j ;\n  i ++ , j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue ;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a' ;\n      str [ j ] = 'a' ;\n      continue ;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ] ;\n      continue ;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ] ;\n      continue ;\n    }\n    System . out . println ( \"Not Possible\" ) ;\n    return \"\" ;\n  }\n  return String . valueOf ( str ) ;\n}", "target_program": " def constructPalin ( string , l ) :\n    string = list ( string )\n    i = - 1\n    j = l\n    while i < j :\n        i += 1\n        j -= 1\n        if ( string [ i ] == string [ j ] and string [ i ] != '*' ) :\n            continue\n        elif ( string [ i ] == string [ j ] and string [ i ] == '*' ) :\n            string [ i ] = 'a'\n            string [ j ] = 'a'\n            continue\n        elif string [ i ] == '*' :\n            string [ i ] = string [ j ]\n            continue\n        elif string [ j ] == '*' :\n            string [ j ] = string [ i ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( string )"}
{"source": "java", "target": "cpp", "source_program": " static String constructPalin ( char [ ] str , int len ) {\n  int i = 0 , j = len - 1 ;\n  for ( ;\n  i < j ;\n  i ++ , j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue ;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a' ;\n      str [ j ] = 'a' ;\n      continue ;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ] ;\n      continue ;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ] ;\n      continue ;\n    }\n    System . out . println ( \"Not Possible\" ) ;\n    return \"\" ;\n  }\n  return String . valueOf ( str ) ;\n}", "target_program": " string constructPalin ( string str, int len ) {\n  int i = 0, j = len - 1;\n  for (;\n  i < j;\n  i ++, j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a';\n      str [ j ] = 'a';\n      continue;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ];\n      continue;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ];\n      continue;\n    }\n    cout << \"Not Possible\";\n    return \"\";\n  }\n  return str;\n}"}
{"source": "cpp", "target": "java", "source_program": " string constructPalin ( string str, int len ) {\n  int i = 0, j = len - 1;\n  for (;\n  i < j;\n  i ++, j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a';\n      str [ j ] = 'a';\n      continue;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ];\n      continue;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ];\n      continue;\n    }\n    cout << \"Not Possible\";\n    return \"\";\n  }\n  return str;\n}", "target_program": " static String constructPalin ( char [ ] str , int len ) {\n  int i = 0 , j = len - 1 ;\n  for ( ;\n  i < j ;\n  i ++ , j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue ;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a' ;\n      str [ j ] = 'a' ;\n      continue ;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ] ;\n      continue ;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ] ;\n      continue ;\n    }\n    System . out . println ( \"Not Possible\" ) ;\n    return \"\" ;\n  }\n  return String . valueOf ( str ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string constructPalin ( string str, int len ) {\n  int i = 0, j = len - 1;\n  for (;\n  i < j;\n  i ++, j -- ) {\n    if ( str [ i ] == str [ j ] && str [ i ] != '*' ) continue;\n    else if ( str [ i ] == str [ j ] && str [ i ] == '*' ) {\n      str [ i ] = 'a';\n      str [ j ] = 'a';\n      continue;\n    }\n    else if ( str [ i ] == '*' ) {\n      str [ i ] = str [ j ];\n      continue;\n    }\n    else if ( str [ j ] == '*' ) {\n      str [ j ] = str [ i ];\n      continue;\n    }\n    cout << \"Not Possible\";\n    return \"\";\n  }\n  return str;\n}", "target_program": " def constructPalin ( string , l ) :\n    string = list ( string )\n    i = - 1\n    j = l\n    while i < j :\n        i += 1\n        j -= 1\n        if ( string [ i ] == string [ j ] and string [ i ] != '*' ) :\n            continue\n        elif ( string [ i ] == string [ j ] and string [ i ] == '*' ) :\n            string [ i ] = 'a'\n            string [ j ] = 'a'\n            continue\n        elif string [ i ] == '*' :\n            string [ i ] = string [ j ]\n            continue\n        elif string [ j ] == '*' :\n            string [ j ] = string [ i ]\n            continue\n        print ( \"Not Possible\" )\n        return \"\"\n    return ''.join ( string )"}
{"source": "python", "target": "java", "source_program": " def section ( x1 , x2 , y1 , y2 , m , n ) :\n    x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )\n    y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )\n    print ( x , y )", "target_program": " static void section ( double x1 , double x2 , double y1 , double y2 , double m , double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n ) ;\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n ) ;\n  System . out . println ( \"(\" + x + \", \" + y + \")\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def section ( x1 , x2 , y1 , y2 , m , n ) :\n    x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )\n    y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )\n    print ( x , y )", "target_program": " void section ( double x1, double x2, double y1, double y2, double m, double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n );\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n );\n  cout << \"(\" << x << \", \";\n  cout << y << \")\" << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void section ( double x1 , double x2 , double y1 , double y2 , double m , double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n ) ;\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n ) ;\n  System . out . println ( \"(\" + x + \", \" + y + \")\" ) ;\n}", "target_program": " def section ( x1 , x2 , y1 , y2 , m , n ) :\n    x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )\n    y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )\n    print ( x , y )"}
{"source": "java", "target": "cpp", "source_program": " static void section ( double x1 , double x2 , double y1 , double y2 , double m , double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n ) ;\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n ) ;\n  System . out . println ( \"(\" + x + \", \" + y + \")\" ) ;\n}", "target_program": " void section ( double x1, double x2, double y1, double y2, double m, double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n );\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n );\n  cout << \"(\" << x << \", \";\n  cout << y << \")\" << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void section ( double x1, double x2, double y1, double y2, double m, double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n );\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n );\n  cout << \"(\" << x << \", \";\n  cout << y << \")\" << endl;\n}", "target_program": " static void section ( double x1 , double x2 , double y1 , double y2 , double m , double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n ) ;\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n ) ;\n  System . out . println ( \"(\" + x + \", \" + y + \")\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void section ( double x1, double x2, double y1, double y2, double m, double n ) {\n  double x = ( ( n * x1 ) + ( m * x2 ) ) / ( m + n );\n  double y = ( ( n * y1 ) + ( m * y2 ) ) / ( m + n );\n  cout << \"(\" << x << \", \";\n  cout << y << \")\" << endl;\n}", "target_program": " def section ( x1 , x2 , y1 , y2 , m , n ) :\n    x = ( float ) ( ( n * x1 ) + ( m * x2 ) ) / ( m + n )\n    y = ( float ) ( ( n * y1 ) + ( m * y2 ) ) / ( m + n )\n    print ( x , y )"}
{"source": "python", "target": "java", "source_program": " def squareRoot ( n ) :\n    return pow ( 2 , 0.5 * math.log2 ( n ) )", "target_program": " static double squareRoot ( double n ) {\n  return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . log ( 2 ) ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def squareRoot ( n ) :\n    return pow ( 2 , 0.5 * math.log2 ( n ) )", "target_program": " double squareRoot ( double n ) {\n  return pow ( 2, 0.5 * log2 ( n ) );\n}"}
{"source": "java", "target": "python", "source_program": " static double squareRoot ( double n ) {\n  return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . log ( 2 ) ) ) ;\n}", "target_program": " def squareRoot ( n ) :\n    return pow ( 2 , 0.5 * math.log2 ( n ) )"}
{"source": "java", "target": "cpp", "source_program": " static double squareRoot ( double n ) {\n  return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . log ( 2 ) ) ) ;\n}", "target_program": " double squareRoot ( double n ) {\n  return pow ( 2, 0.5 * log2 ( n ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " double squareRoot ( double n ) {\n  return pow ( 2, 0.5 * log2 ( n ) );\n}", "target_program": " static double squareRoot ( double n ) {\n  return Math . pow ( 2 , 0.5 * ( Math . log ( n ) / Math . log ( 2 ) ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double squareRoot ( double n ) {\n  return pow ( 2, 0.5 * log2 ( n ) );\n}", "target_program": " def squareRoot ( n ) :\n    return pow ( 2 , 0.5 * math.log2 ( n ) )"}
{"source": "python", "target": "java", "source_program": " def maxSum ( arr , n ) :\n    arr.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ] * i\n    return sum", "target_program": " static int maxSum ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( arr [ i ] * i ) ;\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSum ( arr , n ) :\n    arr.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ] * i\n    return sum", "target_program": " int maxSum ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += ( arr [ i ] * i );\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSum ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( arr [ i ] * i ) ;\n  return sum ;\n}", "target_program": " def maxSum ( arr , n ) :\n    arr.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ] * i\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int maxSum ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( arr [ i ] * i ) ;\n  return sum ;\n}", "target_program": " int maxSum ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += ( arr [ i ] * i );\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSum ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += ( arr [ i ] * i );\n  return sum;\n}", "target_program": " static int maxSum ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) sum += ( arr [ i ] * i ) ;\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSum ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) sum += ( arr [ i ] * i );\n  return sum;\n}", "target_program": " def maxSum ( arr , n ) :\n    arr.sort ( )\n    sum = 0\n    for i in range ( n ) :\n        sum += arr [ i ] * i\n    return sum"}
{"source": "python", "target": "java", "source_program": " def findString ( n , k ) :\n    res = \"\"\n    for i in range ( k ) :\n        res = res + chr ( ord ( 'a' ) + i )\n    count = 0\n    for i in range ( n - k ) :\n        res = res + chr ( ord ( 'a' ) + count )\n        count += 1\n        if ( count == k ) :\n            count = 0 ;\n    return res", "target_program": " static String findString ( int n , int k ) {\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) res = res + ( char ) ( 'a' + i ) ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n - k ;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count ) ;\n    count ++ ;\n    if ( count == k ) count = 0 ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findString ( n , k ) :\n    res = \"\"\n    for i in range ( k ) :\n        res = res + chr ( ord ( 'a' ) + i )\n    count = 0\n    for i in range ( n - k ) :\n        res = res + chr ( ord ( 'a' ) + count )\n        count += 1\n        if ( count == k ) :\n            count = 0 ;\n    return res", "target_program": " string findString ( int n, int k ) {\n  string res = \"\";\n  for ( int i = 0;\n  i < k;\n  i ++ ) res = res + ( char ) ( 'a' + i );\n  int count = 0;\n  for ( int i = 0;\n  i < n - k;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count );\n    count ++;\n    if ( count == k ) count = 0;\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static String findString ( int n , int k ) {\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) res = res + ( char ) ( 'a' + i ) ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n - k ;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count ) ;\n    count ++ ;\n    if ( count == k ) count = 0 ;\n  }\n  return res ;\n}", "target_program": " def findString ( n , k ) :\n    res = \"\"\n    for i in range ( k ) :\n        res = res + chr ( ord ( 'a' ) + i )\n    count = 0\n    for i in range ( n - k ) :\n        res = res + chr ( ord ( 'a' ) + count )\n        count += 1\n        if ( count == k ) :\n            count = 0 ;\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static String findString ( int n , int k ) {\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) res = res + ( char ) ( 'a' + i ) ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n - k ;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count ) ;\n    count ++ ;\n    if ( count == k ) count = 0 ;\n  }\n  return res ;\n}", "target_program": " string findString ( int n, int k ) {\n  string res = \"\";\n  for ( int i = 0;\n  i < k;\n  i ++ ) res = res + ( char ) ( 'a' + i );\n  int count = 0;\n  for ( int i = 0;\n  i < n - k;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count );\n    count ++;\n    if ( count == k ) count = 0;\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " string findString ( int n, int k ) {\n  string res = \"\";\n  for ( int i = 0;\n  i < k;\n  i ++ ) res = res + ( char ) ( 'a' + i );\n  int count = 0;\n  for ( int i = 0;\n  i < n - k;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count );\n    count ++;\n    if ( count == k ) count = 0;\n  }\n  return res;\n}", "target_program": " static String findString ( int n , int k ) {\n  String res = \"\" ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) res = res + ( char ) ( 'a' + i ) ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < n - k ;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count ) ;\n    count ++ ;\n    if ( count == k ) count = 0 ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string findString ( int n, int k ) {\n  string res = \"\";\n  for ( int i = 0;\n  i < k;\n  i ++ ) res = res + ( char ) ( 'a' + i );\n  int count = 0;\n  for ( int i = 0;\n  i < n - k;\n  i ++ ) {\n    res = res + ( char ) ( 'a' + count );\n    count ++;\n    if ( count == k ) count = 0;\n  }\n  return res;\n}", "target_program": " def findString ( n , k ) :\n    res = \"\"\n    for i in range ( k ) :\n        res = res + chr ( ord ( 'a' ) + i )\n    count = 0\n    for i in range ( n - k ) :\n        res = res + chr ( ord ( 'a' ) + count )\n        count += 1\n        if ( count == k ) :\n            count = 0 ;\n    return res"}
{"source": "python", "target": "java", "source_program": " def minJumps ( a , b , d ) :\n    temp = a\n    a = min ( a , b )\n    b = max ( temp , b )\n    if ( d >= b ) :\n        return ( d + b - 1 ) / b\n    if ( d == 0 ) :\n        return 0\n    if ( d == a ) :\n        return 1\n    return 2", "target_program": " static int minJumps ( int a , int b , int d ) {\n  int temp = a ;\n  a = Math . min ( a , b ) ;\n  b = Math . max ( temp , b ) ;\n  if ( d >= b ) return ( d + b - 1 ) / b ;\n  if ( d == 0 ) return 0 ;\n  if ( d == a ) return 1 ;\n  return 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minJumps ( a , b , d ) :\n    temp = a\n    a = min ( a , b )\n    b = max ( temp , b )\n    if ( d >= b ) :\n        return ( d + b - 1 ) / b\n    if ( d == 0 ) :\n        return 0\n    if ( d == a ) :\n        return 1\n    return 2", "target_program": " int minJumps ( int a, int b, int d ) {\n  int temp = a;\n  a = min ( a, b );\n  b = max ( temp, b );\n  if ( d >= b ) return ( d + b - 1 ) / b;\n  if ( d == 0 ) return 0;\n  if ( d == a ) return 1;\n  return 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int minJumps ( int a , int b , int d ) {\n  int temp = a ;\n  a = Math . min ( a , b ) ;\n  b = Math . max ( temp , b ) ;\n  if ( d >= b ) return ( d + b - 1 ) / b ;\n  if ( d == 0 ) return 0 ;\n  if ( d == a ) return 1 ;\n  return 2 ;\n}", "target_program": " def minJumps ( a , b , d ) :\n    temp = a\n    a = min ( a , b )\n    b = max ( temp , b )\n    if ( d >= b ) :\n        return ( d + b - 1 ) / b\n    if ( d == 0 ) :\n        return 0\n    if ( d == a ) :\n        return 1\n    return 2"}
{"source": "java", "target": "cpp", "source_program": " static int minJumps ( int a , int b , int d ) {\n  int temp = a ;\n  a = Math . min ( a , b ) ;\n  b = Math . max ( temp , b ) ;\n  if ( d >= b ) return ( d + b - 1 ) / b ;\n  if ( d == 0 ) return 0 ;\n  if ( d == a ) return 1 ;\n  return 2 ;\n}", "target_program": " int minJumps ( int a, int b, int d ) {\n  int temp = a;\n  a = min ( a, b );\n  b = max ( temp, b );\n  if ( d >= b ) return ( d + b - 1 ) / b;\n  if ( d == 0 ) return 0;\n  if ( d == a ) return 1;\n  return 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minJumps ( int a, int b, int d ) {\n  int temp = a;\n  a = min ( a, b );\n  b = max ( temp, b );\n  if ( d >= b ) return ( d + b - 1 ) / b;\n  if ( d == 0 ) return 0;\n  if ( d == a ) return 1;\n  return 2;\n}", "target_program": " static int minJumps ( int a , int b , int d ) {\n  int temp = a ;\n  a = Math . min ( a , b ) ;\n  b = Math . max ( temp , b ) ;\n  if ( d >= b ) return ( d + b - 1 ) / b ;\n  if ( d == 0 ) return 0 ;\n  if ( d == a ) return 1 ;\n  return 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minJumps ( int a, int b, int d ) {\n  int temp = a;\n  a = min ( a, b );\n  b = max ( temp, b );\n  if ( d >= b ) return ( d + b - 1 ) / b;\n  if ( d == 0 ) return 0;\n  if ( d == a ) return 1;\n  return 2;\n}", "target_program": " def minJumps ( a , b , d ) :\n    temp = a\n    a = min ( a , b )\n    b = max ( temp , b )\n    if ( d >= b ) :\n        return ( d + b - 1 ) / b\n    if ( d == 0 ) :\n        return 0\n    if ( d == a ) :\n        return 1\n    return 2"}
{"source": "python", "target": "java", "source_program": " def sumofFactors ( n ) :\n    res = 1\n    for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            n = n / i ;\n            curr_term = curr_term * i ;\n            curr_sum += curr_term ;\n        res = res * curr_sum\n    if n > 2 :\n        res = res * ( 1 + n )\n    return res ;", "target_program": " static int sumofFactors ( int n ) {\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      n = n / i ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n > 2 ) res *= ( 1 + n ) ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumofFactors ( n ) :\n    res = 1\n    for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            n = n / i ;\n            curr_term = curr_term * i ;\n            curr_sum += curr_term ;\n        res = res * curr_sum\n    if n > 2 :\n        res = res * ( 1 + n )\n    return res ;", "target_program": " int sumofFactors ( int n ) {\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int curr_sum = 1;\n    int curr_term = 1;\n    while ( n % i == 0 ) {\n      n = n / i;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int sumofFactors ( int n ) {\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      n = n / i ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n > 2 ) res *= ( 1 + n ) ;\n  return res ;\n}", "target_program": " def sumofFactors ( n ) :\n    res = 1\n    for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            n = n / i ;\n            curr_term = curr_term * i ;\n            curr_sum += curr_term ;\n        res = res * curr_sum\n    if n > 2 :\n        res = res * ( 1 + n )\n    return res ;"}
{"source": "java", "target": "cpp", "source_program": " static int sumofFactors ( int n ) {\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      n = n / i ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n > 2 ) res *= ( 1 + n ) ;\n  return res ;\n}", "target_program": " int sumofFactors ( int n ) {\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int curr_sum = 1;\n    int curr_term = 1;\n    while ( n % i == 0 ) {\n      n = n / i;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumofFactors ( int n ) {\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int curr_sum = 1;\n    int curr_term = 1;\n    while ( n % i == 0 ) {\n      n = n / i;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}", "target_program": " static int sumofFactors ( int n ) {\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      n = n / i ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n > 2 ) res *= ( 1 + n ) ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumofFactors ( int n ) {\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int curr_sum = 1;\n    int curr_term = 1;\n    while ( n % i == 0 ) {\n      n = n / i;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}", "target_program": " def sumofFactors ( n ) :\n    res = 1\n    for i in range ( 2 , int ( m.sqrt ( n ) + 1 ) ) :\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0 :\n            n = n / i ;\n            curr_term = curr_term * i ;\n            curr_sum += curr_term ;\n        res = res * curr_sum\n    if n > 2 :\n        res = res * ( 1 + n )\n    return res ;"}
{"source": "python", "target": "java", "source_program": " def removeConsecutiveSame ( v ) :\n    n = len ( v )\n    i = 0\n    while ( i < n - 1 ) :\n        if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i + 1 ] ) :\n            v = v [ : i ]\n            v = v [ : i ]\n            if ( i > 0 ) :\n                i -= 1\n            n = n - 2\n        else :\n            i += 1\n    return len ( v [ : i - 1 ] )", "target_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  int n = v . size ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ) {\n    if ( v . get ( i ) . equals ( v . get ( i + 1 ) ) ) {\n      v . remove ( i ) ;\n      v . remove ( i ) ;\n      if ( i > 0 ) i -- ;\n      n = n - 2 ;\n    }\n    else i ++ ;\n  }\n  return v . size ( ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def removeConsecutiveSame ( v ) :\n    n = len ( v )\n    i = 0\n    while ( i < n - 1 ) :\n        if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i + 1 ] ) :\n            v = v [ : i ]\n            v = v [ : i ]\n            if ( i > 0 ) :\n                i -= 1\n            n = n - 2\n        else :\n            i += 1\n    return len ( v [ : i - 1 ] )", "target_program": " int removeConsecutiveSame ( vector < string > v ) {\n  int n = v . size ( );\n  for ( int i = 0;\n  i < n - 1;\n  ) {\n    if ( v [ i ] . compare ( v [ i + 1 ] ) == 0 ) {\n      v . erase ( v . begin ( ) + i );\n      v . erase ( v . begin ( ) + i );\n      if ( i > 0 ) i --;\n      n = n - 2;\n    }\n    else i ++;\n  }\n  return v . size ( );\n}"}
{"source": "java", "target": "python", "source_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  int n = v . size ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ) {\n    if ( v . get ( i ) . equals ( v . get ( i + 1 ) ) ) {\n      v . remove ( i ) ;\n      v . remove ( i ) ;\n      if ( i > 0 ) i -- ;\n      n = n - 2 ;\n    }\n    else i ++ ;\n  }\n  return v . size ( ) ;\n}", "target_program": " def removeConsecutiveSame ( v ) :\n    n = len ( v )\n    i = 0\n    while ( i < n - 1 ) :\n        if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i + 1 ] ) :\n            v = v [ : i ]\n            v = v [ : i ]\n            if ( i > 0 ) :\n                i -= 1\n            n = n - 2\n        else :\n            i += 1\n    return len ( v [ : i - 1 ] )"}
{"source": "java", "target": "cpp", "source_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  int n = v . size ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ) {\n    if ( v . get ( i ) . equals ( v . get ( i + 1 ) ) ) {\n      v . remove ( i ) ;\n      v . remove ( i ) ;\n      if ( i > 0 ) i -- ;\n      n = n - 2 ;\n    }\n    else i ++ ;\n  }\n  return v . size ( ) ;\n}", "target_program": " int removeConsecutiveSame ( vector < string > v ) {\n  int n = v . size ( );\n  for ( int i = 0;\n  i < n - 1;\n  ) {\n    if ( v [ i ] . compare ( v [ i + 1 ] ) == 0 ) {\n      v . erase ( v . begin ( ) + i );\n      v . erase ( v . begin ( ) + i );\n      if ( i > 0 ) i --;\n      n = n - 2;\n    }\n    else i ++;\n  }\n  return v . size ( );\n}"}
{"source": "cpp", "target": "java", "source_program": " int removeConsecutiveSame ( vector < string > v ) {\n  int n = v . size ( );\n  for ( int i = 0;\n  i < n - 1;\n  ) {\n    if ( v [ i ] . compare ( v [ i + 1 ] ) == 0 ) {\n      v . erase ( v . begin ( ) + i );\n      v . erase ( v . begin ( ) + i );\n      if ( i > 0 ) i --;\n      n = n - 2;\n    }\n    else i ++;\n  }\n  return v . size ( );\n}", "target_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  int n = v . size ( ) ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  ) {\n    if ( v . get ( i ) . equals ( v . get ( i + 1 ) ) ) {\n      v . remove ( i ) ;\n      v . remove ( i ) ;\n      if ( i > 0 ) i -- ;\n      n = n - 2 ;\n    }\n    else i ++ ;\n  }\n  return v . size ( ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int removeConsecutiveSame ( vector < string > v ) {\n  int n = v . size ( );\n  for ( int i = 0;\n  i < n - 1;\n  ) {\n    if ( v [ i ] . compare ( v [ i + 1 ] ) == 0 ) {\n      v . erase ( v . begin ( ) + i );\n      v . erase ( v . begin ( ) + i );\n      if ( i > 0 ) i --;\n      n = n - 2;\n    }\n    else i ++;\n  }\n  return v . size ( );\n}", "target_program": " def removeConsecutiveSame ( v ) :\n    n = len ( v )\n    i = 0\n    while ( i < n - 1 ) :\n        if ( ( i + 1 ) < len ( v ) ) and ( v [ i ] == v [ i + 1 ] ) :\n            v = v [ : i ]\n            v = v [ : i ]\n            if ( i > 0 ) :\n                i -= 1\n            n = n - 2\n        else :\n            i += 1\n    return len ( v [ : i - 1 ] )"}
{"source": "python", "target": "java", "source_program": " def countStrings ( n ) :\n    a = [ 0 for i in range ( n ) ]\n    b = [ 0 for i in range ( n ) ]\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return a [ n - 1 ] + b [ n - 1 ]", "target_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] ;\n  int b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  return a [ n - 1 ] + b [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countStrings ( n ) :\n    a = [ 0 for i in range ( n ) ]\n    b = [ 0 for i in range ( n ) ]\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return a [ n - 1 ] + b [ n - 1 ]", "target_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return a [ n - 1 ] + b [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] ;\n  int b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  return a [ n - 1 ] + b [ n - 1 ] ;\n}", "target_program": " def countStrings ( n ) :\n    a = [ 0 for i in range ( n ) ]\n    b = [ 0 for i in range ( n ) ]\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return a [ n - 1 ] + b [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] ;\n  int b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  return a [ n - 1 ] + b [ n - 1 ] ;\n}", "target_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return a [ n - 1 ] + b [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return a [ n - 1 ] + b [ n - 1 ];\n}", "target_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] ;\n  int b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  return a [ n - 1 ] + b [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return a [ n - 1 ] + b [ n - 1 ];\n}", "target_program": " def countStrings ( n ) :\n    a = [ 0 for i in range ( n ) ]\n    b = [ 0 for i in range ( n ) ]\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return a [ n - 1 ] + b [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def getMissingNo ( A ) :\n    n = len ( A )\n    total = ( n + 1 ) * ( n + 2 ) / 2\n    sum_of_A = sum ( A )\n    return total - sum_of_A", "target_program": " static int getMissingNo ( int a [ ] , int n ) {\n  int i , total ;\n  total = ( n + 1 ) * ( n + 2 ) / 2 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) total -= a [ i ] ;\n  return total ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getMissingNo ( A ) :\n    n = len ( A )\n    total = ( n + 1 ) * ( n + 2 ) / 2\n    sum_of_A = sum ( A )\n    return total - sum_of_A", "target_program": " int getMissingNo ( int a [ ], int n ) {\n  int total = ( n + 1 ) * ( n + 2 ) / 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) total -= a [ i ];\n  return total;\n}"}
{"source": "java", "target": "python", "source_program": " static int getMissingNo ( int a [ ] , int n ) {\n  int i , total ;\n  total = ( n + 1 ) * ( n + 2 ) / 2 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) total -= a [ i ] ;\n  return total ;\n}", "target_program": " def getMissingNo ( A ) :\n    n = len ( A )\n    total = ( n + 1 ) * ( n + 2 ) / 2\n    sum_of_A = sum ( A )\n    return total - sum_of_A"}
{"source": "java", "target": "cpp", "source_program": " static int getMissingNo ( int a [ ] , int n ) {\n  int i , total ;\n  total = ( n + 1 ) * ( n + 2 ) / 2 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) total -= a [ i ] ;\n  return total ;\n}", "target_program": " int getMissingNo ( int a [ ], int n ) {\n  int total = ( n + 1 ) * ( n + 2 ) / 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) total -= a [ i ];\n  return total;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getMissingNo ( int a [ ], int n ) {\n  int total = ( n + 1 ) * ( n + 2 ) / 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) total -= a [ i ];\n  return total;\n}", "target_program": " static int getMissingNo ( int a [ ] , int n ) {\n  int i , total ;\n  total = ( n + 1 ) * ( n + 2 ) / 2 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) total -= a [ i ] ;\n  return total ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getMissingNo ( int a [ ], int n ) {\n  int total = ( n + 1 ) * ( n + 2 ) / 2;\n  for ( int i = 0;\n  i < n;\n  i ++ ) total -= a [ i ];\n  return total;\n}", "target_program": " def getMissingNo ( A ) :\n    n = len ( A )\n    total = ( n + 1 ) * ( n + 2 ) / 2\n    sum_of_A = sum ( A )\n    return total - sum_of_A"}
{"source": "python", "target": "java", "source_program": " def squareRoot ( n ) :\n    x = n\n    y = 1\n    e = 0.000001\n    while ( x - y > e ) :\n        x = ( x + y ) / 2\n        y = n / x\n    return x", "target_program": " static float squareRoot ( float n ) {\n  float x = n ;\n  float y = 1 ;\n  double e = 0.000001 ;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return x ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def squareRoot ( n ) :\n    x = n\n    y = 1\n    e = 0.000001\n    while ( x - y > e ) :\n        x = ( x + y ) / 2\n        y = n / x\n    return x", "target_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}"}
{"source": "java", "target": "python", "source_program": " static float squareRoot ( float n ) {\n  float x = n ;\n  float y = 1 ;\n  double e = 0.000001 ;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return x ;\n}", "target_program": " def squareRoot ( n ) :\n    x = n\n    y = 1\n    e = 0.000001\n    while ( x - y > e ) :\n        x = ( x + y ) / 2\n        y = n / x\n    return x"}
{"source": "java", "target": "cpp", "source_program": " static float squareRoot ( float n ) {\n  float x = n ;\n  float y = 1 ;\n  double e = 0.000001 ;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return x ;\n}", "target_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}"}
{"source": "cpp", "target": "java", "source_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}", "target_program": " static float squareRoot ( float n ) {\n  float x = n ;\n  float y = 1 ;\n  double e = 0.000001 ;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2 ;\n    y = n / x ;\n  }\n  return x ;\n}"}
{"source": "cpp", "target": "python", "source_program": " public : float squareRoot ( float n ) {\n  float x = n;\n  float y = 1;\n  float e = 0.000001;\n  while ( x - y > e ) {\n    x = ( x + y ) / 2;\n    y = n / x;\n  }\n  return x;\n}", "target_program": " def squareRoot ( n ) :\n    x = n\n    y = 1\n    e = 0.000001\n    while ( x - y > e ) :\n        x = ( x + y ) / 2\n        y = n / x\n    return x"}
{"source": "python", "target": "java", "source_program": " def modInverse ( a , m ) :\n    a = a % m ;\n    for x in range ( 1 , m ) :\n        if ( ( a * x ) % m == 1 ) :\n            return x\n    return 1", "target_program": " static int modInverse ( int a , int m ) {\n  a = a % m ;\n  for ( int x = 1 ;\n  x < m ;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x ;\n  return 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def modInverse ( a , m ) :\n    a = a % m ;\n    for x in range ( 1 , m ) :\n        if ( ( a * x ) % m == 1 ) :\n            return x\n    return 1", "target_program": " int modInverse ( int a, int m ) {\n  a = a % m;\n  for ( int x = 1;\n  x < m;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x;\n}"}
{"source": "java", "target": "python", "source_program": " static int modInverse ( int a , int m ) {\n  a = a % m ;\n  for ( int x = 1 ;\n  x < m ;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x ;\n  return 1 ;\n}", "target_program": " def modInverse ( a , m ) :\n    a = a % m ;\n    for x in range ( 1 , m ) :\n        if ( ( a * x ) % m == 1 ) :\n            return x\n    return 1"}
{"source": "java", "target": "cpp", "source_program": " static int modInverse ( int a , int m ) {\n  a = a % m ;\n  for ( int x = 1 ;\n  x < m ;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x ;\n  return 1 ;\n}", "target_program": " int modInverse ( int a, int m ) {\n  a = a % m;\n  for ( int x = 1;\n  x < m;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x;\n}"}
{"source": "cpp", "target": "java", "source_program": " int modInverse ( int a, int m ) {\n  a = a % m;\n  for ( int x = 1;\n  x < m;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x;\n}", "target_program": " static int modInverse ( int a , int m ) {\n  a = a % m ;\n  for ( int x = 1 ;\n  x < m ;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x ;\n  return 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int modInverse ( int a, int m ) {\n  a = a % m;\n  for ( int x = 1;\n  x < m;\n  x ++ ) if ( ( a * x ) % m == 1 ) return x;\n}", "target_program": " def modInverse ( a , m ) :\n    a = a % m ;\n    for x in range ( 1 , m ) :\n        if ( ( a * x ) % m == 1 ) :\n            return x\n    return 1"}
{"source": "python", "target": "java", "source_program": " def compute_average ( a , b ) :\n    return floor ( ( a + b ) / 2 )", "target_program": " static int compute_average ( int a , int b ) {\n  return ( a + b ) / 2 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def compute_average ( a , b ) :\n    return floor ( ( a + b ) / 2 )", "target_program": " int compute_average ( int a, int b ) {\n  return ( a + b ) / 2;\n}"}
{"source": "java", "target": "python", "source_program": " static int compute_average ( int a , int b ) {\n  return ( a + b ) / 2 ;\n}", "target_program": " def compute_average ( a , b ) :\n    return floor ( ( a + b ) / 2 )"}
{"source": "java", "target": "cpp", "source_program": " static int compute_average ( int a , int b ) {\n  return ( a + b ) / 2 ;\n}", "target_program": " int compute_average ( int a, int b ) {\n  return ( a + b ) / 2;\n}"}
{"source": "cpp", "target": "java", "source_program": " int compute_average ( int a, int b ) {\n  return ( a + b ) / 2;\n}", "target_program": " static int compute_average ( int a , int b ) {\n  return ( a + b ) / 2 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int compute_average ( int a, int b ) {\n  return ( a + b ) / 2;\n}", "target_program": " def compute_average ( a , b ) :\n    return floor ( ( a + b ) / 2 )"}
{"source": "python", "target": "java", "source_program": " def bestApproximate ( x , y , n ) :\n    sum_x = 0\n    sum_y = 0\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range ( 0 , n ) :\n        sum_x += x [ i ]\n        sum_y += y [ i ]\n        sum_xy += x [ i ] * y [ i ]\n        sum_x2 += pow ( x [ i ] , 2 )\n    m = ( float ) ( ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ) ;\n    c = ( float ) ( sum_y - m * sum_x ) / n ;\n    print ( \"m = \" , m ) ;\n    print ( \"c = \" , c ) ;", "target_program": " static void bestApproximate ( int x [ ] , int y [ ] ) {\n  int n = x . length ;\n  double m , c , sum_x = 0 , sum_y = 0 , sum_xy = 0 , sum_x2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum_x += x [ i ] ;\n    sum_y += y [ i ] ;\n    sum_xy += x [ i ] * y [ i ] ;\n    sum_x2 += pow ( x [ i ] , 2 ) ;\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ;\n  c = ( sum_y - m * sum_x ) / n ;\n  System . out . println ( \"m = \" + m ) ;\n  System . out . println ( \"c = \" + c ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def bestApproximate ( x , y , n ) :\n    sum_x = 0\n    sum_y = 0\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range ( 0 , n ) :\n        sum_x += x [ i ]\n        sum_y += y [ i ]\n        sum_xy += x [ i ] * y [ i ]\n        sum_x2 += pow ( x [ i ] , 2 )\n    m = ( float ) ( ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ) ;\n    c = ( float ) ( sum_y - m * sum_x ) / n ;\n    print ( \"m = \" , m ) ;\n    print ( \"c = \" , c ) ;", "target_program": " void bestApproximate ( int x [ ], int y [ ], int n ) {\n  float m, c, sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum_x += x [ i ];\n    sum_y += y [ i ];\n    sum_xy += x [ i ] * y [ i ];\n    sum_x2 += pow ( x [ i ], 2 );\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x, 2 ) );\n  c = ( sum_y - m * sum_x ) / n;\n  cout << \"m =\" << m;\n  cout << \"\\nc =\" << c;\n}"}
{"source": "java", "target": "python", "source_program": " static void bestApproximate ( int x [ ] , int y [ ] ) {\n  int n = x . length ;\n  double m , c , sum_x = 0 , sum_y = 0 , sum_xy = 0 , sum_x2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum_x += x [ i ] ;\n    sum_y += y [ i ] ;\n    sum_xy += x [ i ] * y [ i ] ;\n    sum_x2 += pow ( x [ i ] , 2 ) ;\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ;\n  c = ( sum_y - m * sum_x ) / n ;\n  System . out . println ( \"m = \" + m ) ;\n  System . out . println ( \"c = \" + c ) ;\n}", "target_program": " def bestApproximate ( x , y , n ) :\n    sum_x = 0\n    sum_y = 0\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range ( 0 , n ) :\n        sum_x += x [ i ]\n        sum_y += y [ i ]\n        sum_xy += x [ i ] * y [ i ]\n        sum_x2 += pow ( x [ i ] , 2 )\n    m = ( float ) ( ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ) ;\n    c = ( float ) ( sum_y - m * sum_x ) / n ;\n    print ( \"m = \" , m ) ;\n    print ( \"c = \" , c ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void bestApproximate ( int x [ ] , int y [ ] ) {\n  int n = x . length ;\n  double m , c , sum_x = 0 , sum_y = 0 , sum_xy = 0 , sum_x2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum_x += x [ i ] ;\n    sum_y += y [ i ] ;\n    sum_xy += x [ i ] * y [ i ] ;\n    sum_x2 += pow ( x [ i ] , 2 ) ;\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ;\n  c = ( sum_y - m * sum_x ) / n ;\n  System . out . println ( \"m = \" + m ) ;\n  System . out . println ( \"c = \" + c ) ;\n}", "target_program": " void bestApproximate ( int x [ ], int y [ ], int n ) {\n  float m, c, sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum_x += x [ i ];\n    sum_y += y [ i ];\n    sum_xy += x [ i ] * y [ i ];\n    sum_x2 += pow ( x [ i ], 2 );\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x, 2 ) );\n  c = ( sum_y - m * sum_x ) / n;\n  cout << \"m =\" << m;\n  cout << \"\\nc =\" << c;\n}"}
{"source": "cpp", "target": "java", "source_program": " void bestApproximate ( int x [ ], int y [ ], int n ) {\n  float m, c, sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum_x += x [ i ];\n    sum_y += y [ i ];\n    sum_xy += x [ i ] * y [ i ];\n    sum_x2 += pow ( x [ i ], 2 );\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x, 2 ) );\n  c = ( sum_y - m * sum_x ) / n;\n  cout << \"m =\" << m;\n  cout << \"\\nc =\" << c;\n}", "target_program": " static void bestApproximate ( int x [ ] , int y [ ] ) {\n  int n = x . length ;\n  double m , c , sum_x = 0 , sum_y = 0 , sum_xy = 0 , sum_x2 = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum_x += x [ i ] ;\n    sum_y += y [ i ] ;\n    sum_xy += x [ i ] * y [ i ] ;\n    sum_x2 += pow ( x [ i ] , 2 ) ;\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ;\n  c = ( sum_y - m * sum_x ) / n ;\n  System . out . println ( \"m = \" + m ) ;\n  System . out . println ( \"c = \" + c ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void bestApproximate ( int x [ ], int y [ ], int n ) {\n  float m, c, sum_x = 0, sum_y = 0, sum_xy = 0, sum_x2 = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum_x += x [ i ];\n    sum_y += y [ i ];\n    sum_xy += x [ i ] * y [ i ];\n    sum_x2 += pow ( x [ i ], 2 );\n  }\n  m = ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x, 2 ) );\n  c = ( sum_y - m * sum_x ) / n;\n  cout << \"m =\" << m;\n  cout << \"\\nc =\" << c;\n}", "target_program": " def bestApproximate ( x , y , n ) :\n    sum_x = 0\n    sum_y = 0\n    sum_xy = 0\n    sum_x2 = 0\n    for i in range ( 0 , n ) :\n        sum_x += x [ i ]\n        sum_y += y [ i ]\n        sum_xy += x [ i ] * y [ i ]\n        sum_x2 += pow ( x [ i ] , 2 )\n    m = ( float ) ( ( n * sum_xy - sum_x * sum_y ) / ( n * sum_x2 - pow ( sum_x , 2 ) ) ) ;\n    c = ( float ) ( sum_y - m * sum_x ) / n ;\n    print ( \"m = \" , m ) ;\n    print ( \"c = \" , c ) ;"}
{"source": "python", "target": "java", "source_program": " def splitArr ( arr , n , k ) :\n    for i in range ( 0 , k ) :\n        x = arr [ 0 ]\n        for j in range ( 0 , n - 1 ) :\n            arr [ j ] = arr [ j + 1 ]\n        arr [ n - 1 ] = x", "target_program": " public static void splitArr ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int x = arr [ 0 ] ;\n    for ( int j = 0 ;\n    j < n - 1 ;\n    ++ j ) arr [ j ] = arr [ j + 1 ] ;\n    arr [ n - 1 ] = x ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def splitArr ( arr , n , k ) :\n    for i in range ( 0 , k ) :\n        x = arr [ 0 ]\n        for j in range ( 0 , n - 1 ) :\n            arr [ j ] = arr [ j + 1 ]\n        arr [ n - 1 ] = x", "target_program": " void splitArr ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int x = arr [ 0 ];\n    for ( int j = 0;\n    j < n - 1;\n    ++ j ) arr [ j ] = arr [ j + 1 ];\n    arr [ n - 1 ] = x;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void splitArr ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int x = arr [ 0 ] ;\n    for ( int j = 0 ;\n    j < n - 1 ;\n    ++ j ) arr [ j ] = arr [ j + 1 ] ;\n    arr [ n - 1 ] = x ;\n  }\n}", "target_program": " def splitArr ( arr , n , k ) :\n    for i in range ( 0 , k ) :\n        x = arr [ 0 ]\n        for j in range ( 0 , n - 1 ) :\n            arr [ j ] = arr [ j + 1 ]\n        arr [ n - 1 ] = x"}
{"source": "java", "target": "cpp", "source_program": " public static void splitArr ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int x = arr [ 0 ] ;\n    for ( int j = 0 ;\n    j < n - 1 ;\n    ++ j ) arr [ j ] = arr [ j + 1 ] ;\n    arr [ n - 1 ] = x ;\n  }\n}", "target_program": " void splitArr ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int x = arr [ 0 ];\n    for ( int j = 0;\n    j < n - 1;\n    ++ j ) arr [ j ] = arr [ j + 1 ];\n    arr [ n - 1 ] = x;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void splitArr ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int x = arr [ 0 ];\n    for ( int j = 0;\n    j < n - 1;\n    ++ j ) arr [ j ] = arr [ j + 1 ];\n    arr [ n - 1 ] = x;\n  }\n}", "target_program": " public static void splitArr ( int arr [ ] , int n , int k ) {\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int x = arr [ 0 ] ;\n    for ( int j = 0 ;\n    j < n - 1 ;\n    ++ j ) arr [ j ] = arr [ j + 1 ] ;\n    arr [ n - 1 ] = x ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void splitArr ( int arr [ ], int n, int k ) {\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int x = arr [ 0 ];\n    for ( int j = 0;\n    j < n - 1;\n    ++ j ) arr [ j ] = arr [ j + 1 ];\n    arr [ n - 1 ] = x;\n  }\n}", "target_program": " def splitArr ( arr , n , k ) :\n    for i in range ( 0 , k ) :\n        x = arr [ 0 ]\n        for j in range ( 0 , n - 1 ) :\n            arr [ j ] = arr [ j + 1 ]\n        arr [ n - 1 ] = x"}
{"source": "python", "target": "java", "source_program": " def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    for i in range ( 0 , n ) :\n        isSingleOccurance = True\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n    return abs ( SubsetSum_1 - SubsetSum_2 )", "target_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;\n  for ( int i = 0 ;\n  i <= n - 1 ;\n  i ++ ) {\n    boolean isSingleOccurance = true ;\n    for ( int j = i + 1 ;\n    j <= n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false ;\n        arr [ i ] = arr [ j ] = 0 ;\n        break ;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;\n      else SubsetSum_2 += arr [ i ] ;\n    }\n  }\n  return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    for i in range ( 0 , n ) :\n        isSingleOccurance = True\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n    return abs ( SubsetSum_1 - SubsetSum_2 )", "target_program": " int maxDiff ( int arr [ ], int n ) {\n  int SubsetSum_1 = 0, SubsetSum_2 = 0;\n  for ( int i = 0;\n  i <= n - 1;\n  i ++ ) {\n    bool isSingleOccurance = true;\n    for ( int j = i + 1;\n    j <= n - 1;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false;\n        arr [ i ] = arr [ j ] = 0;\n        break;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ];\n      else SubsetSum_2 += arr [ i ];\n    }\n  }\n  return abs ( SubsetSum_1 - SubsetSum_2 );\n}"}
{"source": "java", "target": "python", "source_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;\n  for ( int i = 0 ;\n  i <= n - 1 ;\n  i ++ ) {\n    boolean isSingleOccurance = true ;\n    for ( int j = i + 1 ;\n    j <= n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false ;\n        arr [ i ] = arr [ j ] = 0 ;\n        break ;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;\n      else SubsetSum_2 += arr [ i ] ;\n    }\n  }\n  return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;\n}", "target_program": " def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    for i in range ( 0 , n ) :\n        isSingleOccurance = True\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n    return abs ( SubsetSum_1 - SubsetSum_2 )"}
{"source": "java", "target": "cpp", "source_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;\n  for ( int i = 0 ;\n  i <= n - 1 ;\n  i ++ ) {\n    boolean isSingleOccurance = true ;\n    for ( int j = i + 1 ;\n    j <= n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false ;\n        arr [ i ] = arr [ j ] = 0 ;\n        break ;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;\n      else SubsetSum_2 += arr [ i ] ;\n    }\n  }\n  return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;\n}", "target_program": " int maxDiff ( int arr [ ], int n ) {\n  int SubsetSum_1 = 0, SubsetSum_2 = 0;\n  for ( int i = 0;\n  i <= n - 1;\n  i ++ ) {\n    bool isSingleOccurance = true;\n    for ( int j = i + 1;\n    j <= n - 1;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false;\n        arr [ i ] = arr [ j ] = 0;\n        break;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ];\n      else SubsetSum_2 += arr [ i ];\n    }\n  }\n  return abs ( SubsetSum_1 - SubsetSum_2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxDiff ( int arr [ ], int n ) {\n  int SubsetSum_1 = 0, SubsetSum_2 = 0;\n  for ( int i = 0;\n  i <= n - 1;\n  i ++ ) {\n    bool isSingleOccurance = true;\n    for ( int j = i + 1;\n    j <= n - 1;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false;\n        arr [ i ] = arr [ j ] = 0;\n        break;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ];\n      else SubsetSum_2 += arr [ i ];\n    }\n  }\n  return abs ( SubsetSum_1 - SubsetSum_2 );\n}", "target_program": " static int maxDiff ( int [ ] arr , int n ) {\n  int SubsetSum_1 = 0 , SubsetSum_2 = 0 ;\n  for ( int i = 0 ;\n  i <= n - 1 ;\n  i ++ ) {\n    boolean isSingleOccurance = true ;\n    for ( int j = i + 1 ;\n    j <= n - 1 ;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false ;\n        arr [ i ] = arr [ j ] = 0 ;\n        break ;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ] ;\n      else SubsetSum_2 += arr [ i ] ;\n    }\n  }\n  return Math . abs ( SubsetSum_1 - SubsetSum_2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxDiff ( int arr [ ], int n ) {\n  int SubsetSum_1 = 0, SubsetSum_2 = 0;\n  for ( int i = 0;\n  i <= n - 1;\n  i ++ ) {\n    bool isSingleOccurance = true;\n    for ( int j = i + 1;\n    j <= n - 1;\n    j ++ ) {\n      if ( arr [ i ] == arr [ j ] ) {\n        isSingleOccurance = false;\n        arr [ i ] = arr [ j ] = 0;\n        break;\n      }\n    }\n    if ( isSingleOccurance ) {\n      if ( arr [ i ] > 0 ) SubsetSum_1 += arr [ i ];\n      else SubsetSum_2 += arr [ i ];\n    }\n  }\n  return abs ( SubsetSum_1 - SubsetSum_2 );\n}", "target_program": " def maxDiff ( arr , n ) :\n    SubsetSum_1 = 0\n    SubsetSum_2 = 0\n    for i in range ( 0 , n ) :\n        isSingleOccurance = True\n        for j in range ( i + 1 , n ) :\n            if ( arr [ i ] == arr [ j ] ) :\n                isSingleOccurance = False\n                arr [ i ] = arr [ j ] = 0\n                break\n        if ( isSingleOccurance == True ) :\n            if ( arr [ i ] > 0 ) :\n                SubsetSum_1 += arr [ i ]\n            else :\n                SubsetSum_2 += arr [ i ]\n    return abs ( SubsetSum_1 - SubsetSum_2 )"}
{"source": "python", "target": "java", "source_program": " def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    for i in range ( n ) :\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) :\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) :\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n    return longLen", "target_program": " static int longLenSub ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get ( arr [ i ] - 1 ) ) len = um . get ( arr [ i ] - 1 ) ;\n    if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get ( arr [ i ] + 1 ) ) len = um . get ( arr [ i ] + 1 ) ;\n    um . put ( arr [ i ] , len + 1 ) ;\n    if ( longLen < um . get ( arr [ i ] ) ) longLen = um . get ( arr [ i ] ) ;\n  }\n  return longLen ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    for i in range ( n ) :\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) :\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) :\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n    return longLen", "target_program": " int longLenSub ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( um . find ( arr [ i ] - 1 ) != um . end ( ) && len < um [ arr [ i ] - 1 ] ) len = um [ arr [ i ] - 1 ];\n    if ( um . find ( arr [ i ] + 1 ) != um . end ( ) && len < um [ arr [ i ] + 1 ] ) len = um [ arr [ i ] + 1 ];\n    um [ arr [ i ] ] = len + 1;\n    if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i ] ];\n  }\n  return longLen;\n}"}
{"source": "java", "target": "python", "source_program": " static int longLenSub ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get ( arr [ i ] - 1 ) ) len = um . get ( arr [ i ] - 1 ) ;\n    if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get ( arr [ i ] + 1 ) ) len = um . get ( arr [ i ] + 1 ) ;\n    um . put ( arr [ i ] , len + 1 ) ;\n    if ( longLen < um . get ( arr [ i ] ) ) longLen = um . get ( arr [ i ] ) ;\n  }\n  return longLen ;\n}", "target_program": " def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    for i in range ( n ) :\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) :\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) :\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n    return longLen"}
{"source": "java", "target": "cpp", "source_program": " static int longLenSub ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get ( arr [ i ] - 1 ) ) len = um . get ( arr [ i ] - 1 ) ;\n    if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get ( arr [ i ] + 1 ) ) len = um . get ( arr [ i ] + 1 ) ;\n    um . put ( arr [ i ] , len + 1 ) ;\n    if ( longLen < um . get ( arr [ i ] ) ) longLen = um . get ( arr [ i ] ) ;\n  }\n  return longLen ;\n}", "target_program": " int longLenSub ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( um . find ( arr [ i ] - 1 ) != um . end ( ) && len < um [ arr [ i ] - 1 ] ) len = um [ arr [ i ] - 1 ];\n    if ( um . find ( arr [ i ] + 1 ) != um . end ( ) && len < um [ arr [ i ] + 1 ] ) len = um [ arr [ i ] + 1 ];\n    um [ arr [ i ] ] = len + 1;\n    if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i ] ];\n  }\n  return longLen;\n}"}
{"source": "cpp", "target": "java", "source_program": " int longLenSub ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( um . find ( arr [ i ] - 1 ) != um . end ( ) && len < um [ arr [ i ] - 1 ] ) len = um [ arr [ i ] - 1 ];\n    if ( um . find ( arr [ i ] + 1 ) != um . end ( ) && len < um [ arr [ i ] + 1 ] ) len = um [ arr [ i ] + 1 ];\n    um [ arr [ i ] ] = len + 1;\n    if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i ] ];\n  }\n  return longLen;\n}", "target_program": " static int longLenSub ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > um = new HashMap < Integer , Integer > ( ) ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( um . containsKey ( arr [ i ] - 1 ) && len < um . get ( arr [ i ] - 1 ) ) len = um . get ( arr [ i ] - 1 ) ;\n    if ( um . containsKey ( arr [ i ] + 1 ) && len < um . get ( arr [ i ] + 1 ) ) len = um . get ( arr [ i ] + 1 ) ;\n    um . put ( arr [ i ] , len + 1 ) ;\n    if ( longLen < um . get ( arr [ i ] ) ) longLen = um . get ( arr [ i ] ) ;\n  }\n  return longLen ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int longLenSub ( int arr [ ], int n ) {\n  unordered_map < int, int > um;\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( um . find ( arr [ i ] - 1 ) != um . end ( ) && len < um [ arr [ i ] - 1 ] ) len = um [ arr [ i ] - 1 ];\n    if ( um . find ( arr [ i ] + 1 ) != um . end ( ) && len < um [ arr [ i ] + 1 ] ) len = um [ arr [ i ] + 1 ];\n    um [ arr [ i ] ] = len + 1;\n    if ( longLen < um [ arr [ i ] ] ) longLen = um [ arr [ i ] ];\n  }\n  return longLen;\n}", "target_program": " def longLenSub ( arr , n ) :\n    um = defaultdict ( lambda : 0 )\n    longLen = 0\n    for i in range ( n ) :\n        len1 = 0\n        if ( arr [ i - 1 ] in um and len1 < um [ arr [ i ] - 1 ] ) :\n            len1 = um [ arr [ i ] - 1 ]\n        if ( arr [ i ] + 1 in um and len1 < um [ arr [ i ] + 1 ] ) :\n            len1 = um [ arr [ i ] + 1 ]\n        um [ arr [ i ] ] = len1 + 1\n        if longLen < um [ arr [ i ] ] :\n            longLen = um [ arr [ i ] ]\n    return longLen"}
{"source": "python", "target": "java", "source_program": " def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) :\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res", "target_program": " static String longestRepeatedSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n  else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n  String res = \"\" ;\n  int i = n , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str . charAt ( i - 1 ) ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;\n    else j -- ;\n  }\n  String reverse = \"\" ;\n  for ( int k = res . length ( ) - 1 ;\n  k >= 0 ;\n  k -- ) {\n    reverse = reverse + res . charAt ( k ) ;\n  }\n  return reverse ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) :\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res", "target_program": " string longestRepeatedSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n  else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n  string res = \"\";\n  int i = n, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str [ i - 1 ];\n      i --;\n      j --;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i --;\n    else j --;\n  }\n  reverse ( res . begin ( ), res . end ( ) );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static String longestRepeatedSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n  else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n  String res = \"\" ;\n  int i = n , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str . charAt ( i - 1 ) ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;\n    else j -- ;\n  }\n  String reverse = \"\" ;\n  for ( int k = res . length ( ) - 1 ;\n  k >= 0 ;\n  k -- ) {\n    reverse = reverse + res . charAt ( k ) ;\n  }\n  return reverse ;\n}", "target_program": " def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) :\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static String longestRepeatedSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n  else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n  String res = \"\" ;\n  int i = n , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str . charAt ( i - 1 ) ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;\n    else j -- ;\n  }\n  String reverse = \"\" ;\n  for ( int k = res . length ( ) - 1 ;\n  k >= 0 ;\n  k -- ) {\n    reverse = reverse + res . charAt ( k ) ;\n  }\n  return reverse ;\n}", "target_program": " string longestRepeatedSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n  else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n  string res = \"\";\n  int i = n, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str [ i - 1 ];\n      i --;\n      j --;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i --;\n    else j --;\n  }\n  reverse ( res . begin ( ), res . end ( ) );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " string longestRepeatedSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n  else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n  string res = \"\";\n  int i = n, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str [ i - 1 ];\n      i --;\n      j --;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i --;\n    else j --;\n  }\n  reverse ( res . begin ( ), res . end ( ) );\n  return res;\n}", "target_program": " static String longestRepeatedSubSeq ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] [ ] dp = new int [ n + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) for ( int j = 0 ;\n  j <= n ;\n  j ++ ) dp [ i ] [ j ] = 0 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) for ( int j = 1 ;\n  j <= n ;\n  j ++ ) if ( str . charAt ( i - 1 ) == str . charAt ( j - 1 ) && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n  else dp [ i ] [ j ] = Math . max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] ) ;\n  String res = \"\" ;\n  int i = n , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str . charAt ( i - 1 ) ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i -- ;\n    else j -- ;\n  }\n  String reverse = \"\" ;\n  for ( int k = res . length ( ) - 1 ;\n  k >= 0 ;\n  k -- ) {\n    reverse = reverse + res . charAt ( k ) ;\n  }\n  return reverse ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string longestRepeatedSubSeq ( string str ) {\n  int n = str . length ( );\n  int dp [ n + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) for ( int j = 0;\n  j <= n;\n  j ++ ) dp [ i ] [ j ] = 0;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) for ( int j = 1;\n  j <= n;\n  j ++ ) if ( str [ i - 1 ] == str [ j - 1 ] && i != j ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n  else dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ], dp [ i - 1 ] [ j ] );\n  string res = \"\";\n  int i = n, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) {\n      res = res + str [ i - 1 ];\n      i --;\n      j --;\n    }\n    else if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) i --;\n    else j --;\n  }\n  reverse ( res . begin ( ), res . end ( ) );\n  return res;\n}", "target_program": " def longestRepeatedSubSeq ( str ) :\n    n = len ( str )\n    dp = [ [ 0 for i in range ( n + 1 ) ] for j in range ( n + 1 ) ]\n    for i in range ( 1 , n + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            if ( str [ i - 1 ] == str [ j - 1 ] and i != j ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ]\n            else :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j - 1 ] , dp [ i - 1 ] [ j ] )\n    res = ''\n    i = n\n    j = n\n    while ( i > 0 and j > 0 ) :\n        if ( dp [ i ] [ j ] == dp [ i - 1 ] [ j - 1 ] + 1 ) :\n            res += str [ i - 1 ]\n            i -= 1\n            j -= 1\n        elif ( dp [ i ] [ j ] == dp [ i - 1 ] [ j ] ) :\n            i -= 1\n        else :\n            j -= 1\n    res = ''.join ( reversed ( res ) )\n    return res"}
{"source": "python", "target": "java", "source_program": " def findRandomIndexOfMax ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if ( arr [ i ] in mp ) :\n            mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1\n        else :\n            mp [ arr [ i ] ] = 1\n    max_element = - 323567\n    max_so_far = - 323567\n    for p in mp :\n        if ( mp [ p ] > max_so_far ) :\n            max_so_far = mp [ p ]\n            max_element = p\n    r = int ( ( ( random.randrange ( 1 , max_so_far , 2 ) % max_so_far ) + 1 ) )\n    i = 0\n    count = 0\n    while ( i < n ) :\n        if ( arr [ i ] == max_element ) :\n            count = count + 1\n        if ( count == r ) :\n            print ( \"Element with maximum frequency present at index \" , i )\n            break\n        i = i + 1", "target_program": " static void findRandomIndexOfMax ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( arr [ i ] ) ) {\n    mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;\n  }\n  else {\n    mp . put ( arr [ i ] , 1 ) ;\n  }\n  int max_element = Integer . MIN_VALUE ;\n  int max_so_far = Integer . MIN_VALUE ;\n  for ( Map . Entry < Integer , Integer > p : mp . entrySet ( ) ) {\n    if ( p . getValue ( ) > max_so_far ) {\n      max_so_far = p . getValue ( ) ;\n      max_element = p . getKey ( ) ;\n    }\n  }\n  int r = ( int ) ( ( new Random ( ) . nextInt ( max_so_far ) % max_so_far ) + 1 ) ;\n  for ( int i = 0 , count = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++ ;\n    if ( count == r ) {\n      System . out . print ( \"Element with maximum frequency present \" + \"at index \" + i + \"\\n\" ) ;\n      break ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRandomIndexOfMax ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if ( arr [ i ] in mp ) :\n            mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1\n        else :\n            mp [ arr [ i ] ] = 1\n    max_element = - 323567\n    max_so_far = - 323567\n    for p in mp :\n        if ( mp [ p ] > max_so_far ) :\n            max_so_far = mp [ p ]\n            max_element = p\n    r = int ( ( ( random.randrange ( 1 , max_so_far , 2 ) % max_so_far ) + 1 ) )\n    i = 0\n    count = 0\n    while ( i < n ) :\n        if ( arr [ i ] == max_element ) :\n            count = count + 1\n        if ( count == r ) :\n            print ( \"Element with maximum frequency present at index \" , i )\n            break\n        i = i + 1", "target_program": " void findRandomIndexOfMax ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] += 1;\n  int max_element;\n  int max_so_far = INT_MIN;\n  for ( pair < int, int > p : freq ) {\n    if ( p . second > max_so_far ) {\n      max_so_far = p . second;\n      max_element = p . first;\n    }\n  }\n  int r = ( rand ( ) % max_so_far ) + 1;\n  for ( int i = 0, count = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++;\n    if ( count == r ) {\n      cout << \"Element with maximum frequency present \" \"at index \" << i << endl;\n      break;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void findRandomIndexOfMax ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( arr [ i ] ) ) {\n    mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;\n  }\n  else {\n    mp . put ( arr [ i ] , 1 ) ;\n  }\n  int max_element = Integer . MIN_VALUE ;\n  int max_so_far = Integer . MIN_VALUE ;\n  for ( Map . Entry < Integer , Integer > p : mp . entrySet ( ) ) {\n    if ( p . getValue ( ) > max_so_far ) {\n      max_so_far = p . getValue ( ) ;\n      max_element = p . getKey ( ) ;\n    }\n  }\n  int r = ( int ) ( ( new Random ( ) . nextInt ( max_so_far ) % max_so_far ) + 1 ) ;\n  for ( int i = 0 , count = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++ ;\n    if ( count == r ) {\n      System . out . print ( \"Element with maximum frequency present \" + \"at index \" + i + \"\\n\" ) ;\n      break ;\n    }\n  }\n}", "target_program": " def findRandomIndexOfMax ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if ( arr [ i ] in mp ) :\n            mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1\n        else :\n            mp [ arr [ i ] ] = 1\n    max_element = - 323567\n    max_so_far = - 323567\n    for p in mp :\n        if ( mp [ p ] > max_so_far ) :\n            max_so_far = mp [ p ]\n            max_element = p\n    r = int ( ( ( random.randrange ( 1 , max_so_far , 2 ) % max_so_far ) + 1 ) )\n    i = 0\n    count = 0\n    while ( i < n ) :\n        if ( arr [ i ] == max_element ) :\n            count = count + 1\n        if ( count == r ) :\n            print ( \"Element with maximum frequency present at index \" , i )\n            break\n        i = i + 1"}
{"source": "java", "target": "cpp", "source_program": " static void findRandomIndexOfMax ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( arr [ i ] ) ) {\n    mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;\n  }\n  else {\n    mp . put ( arr [ i ] , 1 ) ;\n  }\n  int max_element = Integer . MIN_VALUE ;\n  int max_so_far = Integer . MIN_VALUE ;\n  for ( Map . Entry < Integer , Integer > p : mp . entrySet ( ) ) {\n    if ( p . getValue ( ) > max_so_far ) {\n      max_so_far = p . getValue ( ) ;\n      max_element = p . getKey ( ) ;\n    }\n  }\n  int r = ( int ) ( ( new Random ( ) . nextInt ( max_so_far ) % max_so_far ) + 1 ) ;\n  for ( int i = 0 , count = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++ ;\n    if ( count == r ) {\n      System . out . print ( \"Element with maximum frequency present \" + \"at index \" + i + \"\\n\" ) ;\n      break ;\n    }\n  }\n}", "target_program": " void findRandomIndexOfMax ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] += 1;\n  int max_element;\n  int max_so_far = INT_MIN;\n  for ( pair < int, int > p : freq ) {\n    if ( p . second > max_so_far ) {\n      max_so_far = p . second;\n      max_element = p . first;\n    }\n  }\n  int r = ( rand ( ) % max_so_far ) + 1;\n  for ( int i = 0, count = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++;\n    if ( count == r ) {\n      cout << \"Element with maximum frequency present \" \"at index \" << i << endl;\n      break;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void findRandomIndexOfMax ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] += 1;\n  int max_element;\n  int max_so_far = INT_MIN;\n  for ( pair < int, int > p : freq ) {\n    if ( p . second > max_so_far ) {\n      max_so_far = p . second;\n      max_element = p . first;\n    }\n  }\n  int r = ( rand ( ) % max_so_far ) + 1;\n  for ( int i = 0, count = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++;\n    if ( count == r ) {\n      cout << \"Element with maximum frequency present \" \"at index \" << i << endl;\n      break;\n    }\n  }\n}", "target_program": " static void findRandomIndexOfMax ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( mp . containsKey ( arr [ i ] ) ) {\n    mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ;\n  }\n  else {\n    mp . put ( arr [ i ] , 1 ) ;\n  }\n  int max_element = Integer . MIN_VALUE ;\n  int max_so_far = Integer . MIN_VALUE ;\n  for ( Map . Entry < Integer , Integer > p : mp . entrySet ( ) ) {\n    if ( p . getValue ( ) > max_so_far ) {\n      max_so_far = p . getValue ( ) ;\n      max_element = p . getKey ( ) ;\n    }\n  }\n  int r = ( int ) ( ( new Random ( ) . nextInt ( max_so_far ) % max_so_far ) + 1 ) ;\n  for ( int i = 0 , count = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++ ;\n    if ( count == r ) {\n      System . out . print ( \"Element with maximum frequency present \" + \"at index \" + i + \"\\n\" ) ;\n      break ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void findRandomIndexOfMax ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] += 1;\n  int max_element;\n  int max_so_far = INT_MIN;\n  for ( pair < int, int > p : freq ) {\n    if ( p . second > max_so_far ) {\n      max_so_far = p . second;\n      max_element = p . first;\n    }\n  }\n  int r = ( rand ( ) % max_so_far ) + 1;\n  for ( int i = 0, count = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] == max_element ) count ++;\n    if ( count == r ) {\n      cout << \"Element with maximum frequency present \" \"at index \" << i << endl;\n      break;\n    }\n  }\n}", "target_program": " def findRandomIndexOfMax ( arr , n ) :\n    mp = dict ( )\n    for i in range ( n ) :\n        if ( arr [ i ] in mp ) :\n            mp [ arr [ i ] ] = mp [ arr [ i ] ] + 1\n        else :\n            mp [ arr [ i ] ] = 1\n    max_element = - 323567\n    max_so_far = - 323567\n    for p in mp :\n        if ( mp [ p ] > max_so_far ) :\n            max_so_far = mp [ p ]\n            max_element = p\n    r = int ( ( ( random.randrange ( 1 , max_so_far , 2 ) % max_so_far ) + 1 ) )\n    i = 0\n    count = 0\n    while ( i < n ) :\n        if ( arr [ i ] == max_element ) :\n            count = count + 1\n        if ( count == r ) :\n            print ( \"Element with maximum frequency present at index \" , i )\n            break\n        i = i + 1"}
{"source": "python", "target": "java", "source_program": " def isPerfectSquare ( n ) :\n    i = 1\n    the_sum = 0\n    while the_sum < n :\n        the_sum += i\n        if the_sum == n :\n            return True\n        i += 2\n    return False", "target_program": " static boolean isPerfectSquare ( int n ) {\n  for ( int sum = 0 , i = 1 ;\n  sum < n ;\n  i += 2 ) {\n    sum += i ;\n    if ( sum == n ) return true ;\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPerfectSquare ( n ) :\n    i = 1\n    the_sum = 0\n    while the_sum < n :\n        the_sum += i\n        if the_sum == n :\n            return True\n        i += 2\n    return False", "target_program": " bool isPerfectSquare ( int n ) {\n  for ( int sum = 0, i = 1;\n  sum < n;\n  i += 2 ) {\n    sum += i;\n    if ( sum == n ) return true;\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPerfectSquare ( int n ) {\n  for ( int sum = 0 , i = 1 ;\n  sum < n ;\n  i += 2 ) {\n    sum += i ;\n    if ( sum == n ) return true ;\n  }\n  return false ;\n}", "target_program": " def isPerfectSquare ( n ) :\n    i = 1\n    the_sum = 0\n    while the_sum < n :\n        the_sum += i\n        if the_sum == n :\n            return True\n        i += 2\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPerfectSquare ( int n ) {\n  for ( int sum = 0 , i = 1 ;\n  sum < n ;\n  i += 2 ) {\n    sum += i ;\n    if ( sum == n ) return true ;\n  }\n  return false ;\n}", "target_program": " bool isPerfectSquare ( int n ) {\n  for ( int sum = 0, i = 1;\n  sum < n;\n  i += 2 ) {\n    sum += i;\n    if ( sum == n ) return true;\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPerfectSquare ( int n ) {\n  for ( int sum = 0, i = 1;\n  sum < n;\n  i += 2 ) {\n    sum += i;\n    if ( sum == n ) return true;\n  }\n  return false;\n}", "target_program": " static boolean isPerfectSquare ( int n ) {\n  for ( int sum = 0 , i = 1 ;\n  sum < n ;\n  i += 2 ) {\n    sum += i ;\n    if ( sum == n ) return true ;\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPerfectSquare ( int n ) {\n  for ( int sum = 0, i = 1;\n  sum < n;\n  i += 2 ) {\n    sum += i;\n    if ( sum == n ) return true;\n  }\n  return false;\n}", "target_program": " def isPerfectSquare ( n ) :\n    i = 1\n    the_sum = 0\n    while the_sum < n :\n        the_sum += i\n        if the_sum == n :\n            return True\n        i += 2\n    return False"}
{"source": "python", "target": "java", "source_program": " def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    for i in range ( n ) :\n        if ( ( i % 2 ) == 0 ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    for j in range ( len ( evenArr ) ) :\n        arr [ i ] = evenArr [ j ]\n        i += 1\n    for j in range ( len ( oddArr ) ) :\n        arr [ i ] = oddArr [ j ]\n        i += 1", "target_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  Vector < Integer > evenArr = new Vector < Integer > ( ) ;\n  Vector < Integer > oddArr = new Vector < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 1 ) {\n      evenArr . add ( arr [ i ] ) ;\n    }\n    else {\n      oddArr . add ( arr [ i ] ) ;\n    }\n  }\n  Collections . sort ( evenArr ) ;\n  Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ;\n  int i = 0 ;\n  for ( int j = 0 ;\n  j < evenArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = evenArr . get ( j ) ;\n  }\n  for ( int j = 0 ;\n  j < oddArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = oddArr . get ( j ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    for i in range ( n ) :\n        if ( ( i % 2 ) == 0 ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    for j in range ( len ( evenArr ) ) :\n        arr [ i ] = evenArr [ j ]\n        i += 1\n    for j in range ( len ( oddArr ) ) :\n        arr [ i ] = oddArr [ j ]\n        i += 1", "target_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  vector < int > evenArr;\n  vector < int > oddArr;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! ( i % 2 ) ) evenArr . push_back ( arr [ i ] );\n    else oddArr . push_back ( arr [ i ] );\n  }\n  sort ( evenArr . begin ( ), evenArr . end ( ) );\n  sort ( oddArr . begin ( ), oddArr . end ( ), greater < int > ( ) );\n  int i = 0;\n  for ( int j = 0;\n  j < evenArr . size ( );\n  j ++ ) arr [ i ++ ] = evenArr [ j ];\n  for ( int j = 0;\n  j < oddArr . size ( );\n  j ++ ) arr [ i ++ ] = oddArr [ j ];\n}"}
{"source": "java", "target": "python", "source_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  Vector < Integer > evenArr = new Vector < Integer > ( ) ;\n  Vector < Integer > oddArr = new Vector < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 1 ) {\n      evenArr . add ( arr [ i ] ) ;\n    }\n    else {\n      oddArr . add ( arr [ i ] ) ;\n    }\n  }\n  Collections . sort ( evenArr ) ;\n  Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ;\n  int i = 0 ;\n  for ( int j = 0 ;\n  j < evenArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = evenArr . get ( j ) ;\n  }\n  for ( int j = 0 ;\n  j < oddArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = oddArr . get ( j ) ;\n  }\n}", "target_program": " def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    for i in range ( n ) :\n        if ( ( i % 2 ) == 0 ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    for j in range ( len ( evenArr ) ) :\n        arr [ i ] = evenArr [ j ]\n        i += 1\n    for j in range ( len ( oddArr ) ) :\n        arr [ i ] = oddArr [ j ]\n        i += 1"}
{"source": "java", "target": "cpp", "source_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  Vector < Integer > evenArr = new Vector < Integer > ( ) ;\n  Vector < Integer > oddArr = new Vector < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 1 ) {\n      evenArr . add ( arr [ i ] ) ;\n    }\n    else {\n      oddArr . add ( arr [ i ] ) ;\n    }\n  }\n  Collections . sort ( evenArr ) ;\n  Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ;\n  int i = 0 ;\n  for ( int j = 0 ;\n  j < evenArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = evenArr . get ( j ) ;\n  }\n  for ( int j = 0 ;\n  j < oddArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = oddArr . get ( j ) ;\n  }\n}", "target_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  vector < int > evenArr;\n  vector < int > oddArr;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! ( i % 2 ) ) evenArr . push_back ( arr [ i ] );\n    else oddArr . push_back ( arr [ i ] );\n  }\n  sort ( evenArr . begin ( ), evenArr . end ( ) );\n  sort ( oddArr . begin ( ), oddArr . end ( ), greater < int > ( ) );\n  int i = 0;\n  for ( int j = 0;\n  j < evenArr . size ( );\n  j ++ ) arr [ i ++ ] = evenArr [ j ];\n  for ( int j = 0;\n  j < oddArr . size ( );\n  j ++ ) arr [ i ++ ] = oddArr [ j ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  vector < int > evenArr;\n  vector < int > oddArr;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! ( i % 2 ) ) evenArr . push_back ( arr [ i ] );\n    else oddArr . push_back ( arr [ i ] );\n  }\n  sort ( evenArr . begin ( ), evenArr . end ( ) );\n  sort ( oddArr . begin ( ), oddArr . end ( ), greater < int > ( ) );\n  int i = 0;\n  for ( int j = 0;\n  j < evenArr . size ( );\n  j ++ ) arr [ i ++ ] = evenArr [ j ];\n  for ( int j = 0;\n  j < oddArr . size ( );\n  j ++ ) arr [ i ++ ] = oddArr [ j ];\n}", "target_program": " static void bitonicGenerator ( int arr [ ] , int n ) {\n  Vector < Integer > evenArr = new Vector < Integer > ( ) ;\n  Vector < Integer > oddArr = new Vector < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( i % 2 != 1 ) {\n      evenArr . add ( arr [ i ] ) ;\n    }\n    else {\n      oddArr . add ( arr [ i ] ) ;\n    }\n  }\n  Collections . sort ( evenArr ) ;\n  Collections . sort ( oddArr , Collections . reverseOrder ( ) ) ;\n  int i = 0 ;\n  for ( int j = 0 ;\n  j < evenArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = evenArr . get ( j ) ;\n  }\n  for ( int j = 0 ;\n  j < oddArr . size ( ) ;\n  j ++ ) {\n    arr [ i ++ ] = oddArr . get ( j ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void bitonicGenerator ( int arr [ ], int n ) {\n  vector < int > evenArr;\n  vector < int > oddArr;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ! ( i % 2 ) ) evenArr . push_back ( arr [ i ] );\n    else oddArr . push_back ( arr [ i ] );\n  }\n  sort ( evenArr . begin ( ), evenArr . end ( ) );\n  sort ( oddArr . begin ( ), oddArr . end ( ), greater < int > ( ) );\n  int i = 0;\n  for ( int j = 0;\n  j < evenArr . size ( );\n  j ++ ) arr [ i ++ ] = evenArr [ j ];\n  for ( int j = 0;\n  j < oddArr . size ( );\n  j ++ ) arr [ i ++ ] = oddArr [ j ];\n}", "target_program": " def bitonicGenerator ( arr , n ) :\n    evenArr = [ ]\n    oddArr = [ ]\n    for i in range ( n ) :\n        if ( ( i % 2 ) == 0 ) :\n            evenArr.append ( arr [ i ] )\n        else :\n            oddArr.append ( arr [ i ] )\n    evenArr = sorted ( evenArr )\n    oddArr = sorted ( oddArr )\n    oddArr = oddArr [ : : - 1 ]\n    i = 0\n    for j in range ( len ( evenArr ) ) :\n        arr [ i ] = evenArr [ j ]\n        i += 1\n    for j in range ( len ( oddArr ) ) :\n        arr [ i ] = oddArr [ j ]\n        i += 1"}
{"source": "python", "target": "java", "source_program": " def getParity ( n ) :\n    parity = 0\n    while n :\n        parity = ~ parity\n        n = n & ( n - 1 )\n    return parity", "target_program": " static boolean getParity ( int n ) {\n  boolean parity = false ;\n  while ( n != 0 ) {\n    parity = ! parity ;\n    n = n & ( n - 1 ) ;\n  }\n  return parity ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getParity ( n ) :\n    parity = 0\n    while n :\n        parity = ~ parity\n        n = n & ( n - 1 )\n    return parity", "target_program": " bool getParity ( unsigned int n ) {\n  bool parity = 0;\n  while ( n ) {\n    parity = ! parity;\n    n = n & ( n - 1 );\n  }\n  return parity;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean getParity ( int n ) {\n  boolean parity = false ;\n  while ( n != 0 ) {\n    parity = ! parity ;\n    n = n & ( n - 1 ) ;\n  }\n  return parity ;\n}", "target_program": " def getParity ( n ) :\n    parity = 0\n    while n :\n        parity = ~ parity\n        n = n & ( n - 1 )\n    return parity"}
{"source": "java", "target": "cpp", "source_program": " static boolean getParity ( int n ) {\n  boolean parity = false ;\n  while ( n != 0 ) {\n    parity = ! parity ;\n    n = n & ( n - 1 ) ;\n  }\n  return parity ;\n}", "target_program": " bool getParity ( unsigned int n ) {\n  bool parity = 0;\n  while ( n ) {\n    parity = ! parity;\n    n = n & ( n - 1 );\n  }\n  return parity;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool getParity ( unsigned int n ) {\n  bool parity = 0;\n  while ( n ) {\n    parity = ! parity;\n    n = n & ( n - 1 );\n  }\n  return parity;\n}", "target_program": " static boolean getParity ( int n ) {\n  boolean parity = false ;\n  while ( n != 0 ) {\n    parity = ! parity ;\n    n = n & ( n - 1 ) ;\n  }\n  return parity ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool getParity ( unsigned int n ) {\n  bool parity = 0;\n  while ( n ) {\n    parity = ! parity;\n    n = n & ( n - 1 );\n  }\n  return parity;\n}", "target_program": " def getParity ( n ) :\n    parity = 0\n    while n :\n        parity = ~ parity\n        n = n & ( n - 1 )\n    return parity"}
{"source": "python", "target": "java", "source_program": " def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if ( n % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    p = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n    return ( GSum % 7 == 0 )", "target_program": " static boolean isDivisible7 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  n = num . length ( ) ;\n  int gSum = 0 , p = 1 ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    gSum = gSum + group * p ;\n    p = p * - 1 ;\n  }\n  return ( gSum % 7 == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if ( n % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    p = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n    return ( GSum % 7 == 0 )", "target_program": " int isdivisible7 ( char num [ ] ) {\n  int n = strlen ( num ), gSum;\n  if ( n == 0 && num [ 0 ] == '\\n' ) return 1;\n  if ( n % 3 == 1 ) {\n    strcat ( num, \"00\" );\n    n += 2;\n  }\n  else if ( n % 3 == 2 ) {\n    strcat ( num, \"0\" );\n    n ++;\n  }\n  int i, GSum = 0, p = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    gSum = gSum + group * p;\n    p *= ( - 1 );\n  }\n  return ( gSum % 7 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isDivisible7 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  n = num . length ( ) ;\n  int gSum = 0 , p = 1 ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    gSum = gSum + group * p ;\n    p = p * - 1 ;\n  }\n  return ( gSum % 7 == 0 ) ;\n}", "target_program": " def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if ( n % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    p = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n    return ( GSum % 7 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isDivisible7 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  n = num . length ( ) ;\n  int gSum = 0 , p = 1 ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    gSum = gSum + group * p ;\n    p = p * - 1 ;\n  }\n  return ( gSum % 7 == 0 ) ;\n}", "target_program": " int isdivisible7 ( char num [ ] ) {\n  int n = strlen ( num ), gSum;\n  if ( n == 0 && num [ 0 ] == '\\n' ) return 1;\n  if ( n % 3 == 1 ) {\n    strcat ( num, \"00\" );\n    n += 2;\n  }\n  else if ( n % 3 == 2 ) {\n    strcat ( num, \"0\" );\n    n ++;\n  }\n  int i, GSum = 0, p = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    gSum = gSum + group * p;\n    p *= ( - 1 );\n  }\n  return ( gSum % 7 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int isdivisible7 ( char num [ ] ) {\n  int n = strlen ( num ), gSum;\n  if ( n == 0 && num [ 0 ] == '\\n' ) return 1;\n  if ( n % 3 == 1 ) {\n    strcat ( num, \"00\" );\n    n += 2;\n  }\n  else if ( n % 3 == 2 ) {\n    strcat ( num, \"0\" );\n    n ++;\n  }\n  int i, GSum = 0, p = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    gSum = gSum + group * p;\n    p *= ( - 1 );\n  }\n  return ( gSum % 7 == 0 );\n}", "target_program": " static boolean isDivisible7 ( String num ) {\n  int n = num . length ( ) ;\n  if ( n == 0 && num . charAt ( 0 ) == '0' ) return true ;\n  if ( n % 3 == 1 ) num = \"00\" + num ;\n  if ( n % 3 == 2 ) num = \"0\" + num ;\n  n = num . length ( ) ;\n  int gSum = 0 , p = 1 ;\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int group = 0 ;\n    group += num . charAt ( i -- ) - '0' ;\n    group += ( num . charAt ( i -- ) - '0' ) * 10 ;\n    group += ( num . charAt ( i ) - '0' ) * 100 ;\n    gSum = gSum + group * p ;\n    p = p * - 1 ;\n  }\n  return ( gSum % 7 == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int isdivisible7 ( char num [ ] ) {\n  int n = strlen ( num ), gSum;\n  if ( n == 0 && num [ 0 ] == '\\n' ) return 1;\n  if ( n % 3 == 1 ) {\n    strcat ( num, \"00\" );\n    n += 2;\n  }\n  else if ( n % 3 == 2 ) {\n    strcat ( num, \"0\" );\n    n ++;\n  }\n  int i, GSum = 0, p = 1;\n  for ( i = n - 1;\n  i >= 0;\n  i -- ) {\n    int group = 0;\n    group += num [ i -- ] - '0';\n    group += ( num [ i -- ] - '0' ) * 10;\n    group += ( num [ i ] - '0' ) * 100;\n    gSum = gSum + group * p;\n    p *= ( - 1 );\n  }\n  return ( gSum % 7 == 0 );\n}", "target_program": " def isdivisible7 ( num ) :\n    n = len ( num )\n    if ( n == 0 and num [ 0 ] == '\\n' ) :\n        return 1\n    if ( n % 3 == 1 ) :\n        num = str ( num ) + \"00\"\n        n += 2\n    elif ( n % 3 == 2 ) :\n        num = str ( num ) + \"0\"\n        n += 1\n    GSum = 0\n    p = 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        group = 0\n        group += ord ( num [ i ] ) - ord ( '0' )\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 10\n        i -= 1\n        group += ( ord ( num [ i ] ) - ord ( '0' ) ) * 100\n        GSum = GSum + group * p\n        p *= ( - 1 )\n    return ( GSum % 7 == 0 )"}
{"source": "python", "target": "java", "source_program": " def productAtKthLevel ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product", "target_program": " static int productAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int product = 1 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) product *= ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return product ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def productAtKthLevel ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product", "target_program": " int productAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int product = 1;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) product *= ( tree [ i ] - '0' );\n    }\n  }\n  return product;\n}"}
{"source": "java", "target": "python", "source_program": " static int productAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int product = 1 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) product *= ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return product ;\n}", "target_program": " def productAtKthLevel ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product"}
{"source": "java", "target": "cpp", "source_program": " static int productAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int product = 1 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) product *= ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return product ;\n}", "target_program": " int productAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int product = 1;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) product *= ( tree [ i ] - '0' );\n    }\n  }\n  return product;\n}"}
{"source": "cpp", "target": "java", "source_program": " int productAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int product = 1;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) product *= ( tree [ i ] - '0' );\n    }\n  }\n  return product;\n}", "target_program": " static int productAtKthLevel ( String tree , int k ) {\n  int level = - 1 ;\n  int product = 1 ;\n  int n = tree . length ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( tree . charAt ( i ) == '(' ) level ++ ;\n    else if ( tree . charAt ( i ) == ')' ) level -- ;\n    else {\n      if ( level == k ) product *= ( tree . charAt ( i ) - '0' ) ;\n    }\n  }\n  return product ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int productAtKthLevel ( string tree, int k ) {\n  int level = - 1;\n  int product = 1;\n  int n = tree . length ( );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( tree [ i ] == '(' ) level ++;\n    else if ( tree [ i ] == ')' ) level --;\n    else {\n      if ( level == k ) product *= ( tree [ i ] - '0' );\n    }\n  }\n  return product;\n}", "target_program": " def productAtKthLevel ( tree , k ) :\n    level = - 1\n    product = 1\n    n = len ( tree )\n    for i in range ( 0 , n ) :\n        if ( tree [ i ] == '(' ) :\n            level += 1\n        elif ( tree [ i ] == ')' ) :\n            level -= 1\n        else :\n            if ( level == k ) :\n                product *= ( int ( tree [ i ] ) - int ( '0' ) )\n    return product"}
{"source": "python", "target": "java", "source_program": " def isEven ( n ) :\n    return ( n % 2 == 0 )", "target_program": " public static boolean isEven ( int n ) {\n  return ( n % 2 == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isEven ( n ) :\n    return ( n % 2 == 0 )", "target_program": " bool isEven ( int n ) {\n  return ( n % 2 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " public static boolean isEven ( int n ) {\n  return ( n % 2 == 0 ) ;\n}", "target_program": " def isEven ( n ) :\n    return ( n % 2 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " public static boolean isEven ( int n ) {\n  return ( n % 2 == 0 ) ;\n}", "target_program": " bool isEven ( int n ) {\n  return ( n % 2 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isEven ( int n ) {\n  return ( n % 2 == 0 );\n}", "target_program": " public static boolean isEven ( int n ) {\n  return ( n % 2 == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isEven ( int n ) {\n  return ( n % 2 == 0 );\n}", "target_program": " def isEven ( n ) :\n    return ( n % 2 == 0 )"}
{"source": "python", "target": "java", "source_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum = sum + int ( num [ i ] )\n        if ( sum >= previous_sum ) :\n            res = res + countGroups ( i + 1 , sum , length , num )\n    return res", "target_program": " static int countGroups ( int position , int previous_sum , int length , String num ) {\n  if ( position == length ) return 1 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num . charAt ( i ) - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum = sum + int ( num [ i ] )\n        if ( sum >= previous_sum ) :\n            res = res + countGroups ( i + 1 , sum , length , num )\n    return res", "target_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int countGroups ( int position , int previous_sum , int length , String num ) {\n  if ( position == length ) return 1 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num . charAt ( i ) - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  return res ;\n}", "target_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum = sum + int ( num [ i ] )\n        if ( sum >= previous_sum ) :\n            res = res + countGroups ( i + 1 , sum , length , num )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int countGroups ( int position , int previous_sum , int length , String num ) {\n  if ( position == length ) return 1 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num . charAt ( i ) - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  return res ;\n}", "target_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  return res;\n}", "target_program": " static int countGroups ( int position , int previous_sum , int length , String num ) {\n  if ( position == length ) return 1 ;\n  int res = 0 ;\n  int sum = 0 ;\n  for ( int i = position ;\n  i < length ;\n  i ++ ) {\n    sum += ( num . charAt ( i ) - '0' ) ;\n    if ( sum >= previous_sum ) res += countGroups ( i + 1 , sum , length , num ) ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countGroups ( int position, int previous_sum, int length, char * num ) {\n  if ( position == length ) return 1;\n  int res = 0;\n  int sum = 0;\n  for ( int i = position;\n  i < length;\n  i ++ ) {\n    sum += ( num [ i ] - '0' );\n    if ( sum >= previous_sum ) res += countGroups ( i + 1, sum, length, num );\n  }\n  return res;\n}", "target_program": " def countGroups ( position , previous_sum , length , num ) :\n    if ( position == length ) :\n        return 1\n    res = 0\n    sum = 0\n    for i in range ( position , length ) :\n        sum = sum + int ( num [ i ] )\n        if ( sum >= previous_sum ) :\n            res = res + countGroups ( i + 1 , sum , length , num )\n    return res"}
{"source": "python", "target": "java", "source_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = ( low + high ) / 2 ;\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )", "target_program": " static void search ( int arr [ ] , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . printf ( \"The required element is %d \" , arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = ( low + high ) / 2 ;\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )", "target_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void search ( int arr [ ] , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . printf ( \"The required element is %d \" , arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}", "target_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = ( low + high ) / 2 ;\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )"}
{"source": "java", "target": "cpp", "source_program": " static void search ( int arr [ ] , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . printf ( \"The required element is %d \" , arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}", "target_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}", "target_program": " static void search ( int arr [ ] , int low , int high ) {\n  if ( low > high ) return ;\n  if ( low == high ) {\n    System . out . printf ( \"The required element is %d \" , arr [ low ] ) ;\n    return ;\n  }\n  int mid = ( low + high ) / 2 ;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr , mid + 2 , high ) ;\n    else search ( arr , low , mid ) ;\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr , mid + 1 , high ) ;\n    else search ( arr , low , mid - 1 ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void search ( int * arr, int low, int high ) {\n  if ( low > high ) return;\n  if ( low == high ) {\n    printf ( \"The required element is %d \", arr [ low ] );\n    return;\n  }\n  int mid = ( low + high ) / 2;\n  if ( mid % 2 == 0 ) {\n    if ( arr [ mid ] == arr [ mid + 1 ] ) search ( arr, mid + 2, high );\n    else search ( arr, low, mid );\n  }\n  else {\n    if ( arr [ mid ] == arr [ mid - 1 ] ) search ( arr, mid + 1, high );\n    else search ( arr, low, mid - 1 );\n  }\n}", "target_program": " def search ( arr , low , high ) :\n    if low > high :\n        return None\n    if low == high :\n        return arr [ low ]\n    mid = ( low + high ) / 2 ;\n    if mid % 2 == 0 :\n        if arr [ mid ] == arr [ mid + 1 ] :\n            return search ( arr , mid + 2 , high )\n        else :\n            return search ( arr , low , mid )\n    else :\n        if arr [ mid ] == arr [ mid - 1 ] :\n            return search ( arr , mid + 1 , high )\n        else :\n            return search ( arr , low , mid - 1 )"}
{"source": "python", "target": "java", "source_program": " def removeConsecutiveSame ( v ) :\n    st = [ ]\n    for i in range ( len ( v ) ) :\n        if ( len ( st ) == 0 ) :\n            st.append ( v [ i ] )\n        else :\n            Str = st [ - 1 ]\n            if ( Str == v [ i ] ) :\n                st.pop ( )\n            else :\n                st.append ( v [ i ] )\n    return len ( st )", "target_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  Stack < String > st = new Stack < > ( ) ;\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v . get ( i ) ) ;\n    else {\n      String str = st . peek ( ) ;\n      if ( str . equals ( v . get ( i ) ) ) st . pop ( ) ;\n      else st . push ( v . get ( i ) ) ;\n    }\n  }\n  return st . size ( ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def removeConsecutiveSame ( v ) :\n    st = [ ]\n    for i in range ( len ( v ) ) :\n        if ( len ( st ) == 0 ) :\n            st.append ( v [ i ] )\n        else :\n            Str = st [ - 1 ]\n            if ( Str == v [ i ] ) :\n                st.pop ( )\n            else :\n                st.append ( v [ i ] )\n    return len ( st )", "target_program": " int removeConsecutiveSame ( vector < string > v ) {\n  stack < string > st;\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v [ i ] );\n    else {\n      string str = st . top ( );\n      if ( str . compare ( v [ i ] ) == 0 ) st . pop ( );\n      else st . push ( v [ i ] );\n    }\n  }\n  return st . size ( );\n}"}
{"source": "java", "target": "python", "source_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  Stack < String > st = new Stack < > ( ) ;\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v . get ( i ) ) ;\n    else {\n      String str = st . peek ( ) ;\n      if ( str . equals ( v . get ( i ) ) ) st . pop ( ) ;\n      else st . push ( v . get ( i ) ) ;\n    }\n  }\n  return st . size ( ) ;\n}", "target_program": " def removeConsecutiveSame ( v ) :\n    st = [ ]\n    for i in range ( len ( v ) ) :\n        if ( len ( st ) == 0 ) :\n            st.append ( v [ i ] )\n        else :\n            Str = st [ - 1 ]\n            if ( Str == v [ i ] ) :\n                st.pop ( )\n            else :\n                st.append ( v [ i ] )\n    return len ( st )"}
{"source": "java", "target": "cpp", "source_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  Stack < String > st = new Stack < > ( ) ;\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v . get ( i ) ) ;\n    else {\n      String str = st . peek ( ) ;\n      if ( str . equals ( v . get ( i ) ) ) st . pop ( ) ;\n      else st . push ( v . get ( i ) ) ;\n    }\n  }\n  return st . size ( ) ;\n}", "target_program": " int removeConsecutiveSame ( vector < string > v ) {\n  stack < string > st;\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v [ i ] );\n    else {\n      string str = st . top ( );\n      if ( str . compare ( v [ i ] ) == 0 ) st . pop ( );\n      else st . push ( v [ i ] );\n    }\n  }\n  return st . size ( );\n}"}
{"source": "cpp", "target": "java", "source_program": " int removeConsecutiveSame ( vector < string > v ) {\n  stack < string > st;\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v [ i ] );\n    else {\n      string str = st . top ( );\n      if ( str . compare ( v [ i ] ) == 0 ) st . pop ( );\n      else st . push ( v [ i ] );\n    }\n  }\n  return st . size ( );\n}", "target_program": " static int removeConsecutiveSame ( Vector < String > v ) {\n  Stack < String > st = new Stack < > ( ) ;\n  for ( int i = 0 ;\n  i < v . size ( ) ;\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v . get ( i ) ) ;\n    else {\n      String str = st . peek ( ) ;\n      if ( str . equals ( v . get ( i ) ) ) st . pop ( ) ;\n      else st . push ( v . get ( i ) ) ;\n    }\n  }\n  return st . size ( ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int removeConsecutiveSame ( vector < string > v ) {\n  stack < string > st;\n  for ( int i = 0;\n  i < v . size ( );\n  i ++ ) {\n    if ( st . empty ( ) ) st . push ( v [ i ] );\n    else {\n      string str = st . top ( );\n      if ( str . compare ( v [ i ] ) == 0 ) st . pop ( );\n      else st . push ( v [ i ] );\n    }\n  }\n  return st . size ( );\n}", "target_program": " def removeConsecutiveSame ( v ) :\n    st = [ ]\n    for i in range ( len ( v ) ) :\n        if ( len ( st ) == 0 ) :\n            st.append ( v [ i ] )\n        else :\n            Str = st [ - 1 ]\n            if ( Str == v [ i ] ) :\n                st.pop ( )\n            else :\n                st.append ( v [ i ] )\n    return len ( st )"}
{"source": "python", "target": "java", "source_program": " def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] == 0 ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            for j in range ( i + 1 , n ) :\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n    return jumps [ 0 ]", "target_program": " static int minJumps ( int arr [ ] , int n ) {\n  int [ ] jumps = new int [ n ] ;\n  int min ;\n  jumps [ n - 1 ] = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = Integer . MAX_VALUE ;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;\n    else {\n      min = Integer . MAX_VALUE ;\n      for ( int j = i + 1 ;\n      j < n && j <= arr [ i ] + i ;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ] ;\n      }\n      if ( min != Integer . MAX_VALUE ) jumps [ i ] = min + 1 ;\n      else jumps [ i ] = min ;\n    }\n  }\n  return jumps [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] == 0 ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            for j in range ( i + 1 , n ) :\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n    return jumps [ 0 ]", "target_program": " int minJumps ( int arr [ ], int n ) {\n  int * jumps = new int [ n ];\n  int min;\n  jumps [ n - 1 ] = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = INT_MAX;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1;\n    else {\n      min = INT_MAX;\n      for ( int j = i + 1;\n      j < n && j <= arr [ i ] + i;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ];\n      }\n      if ( min != INT_MAX ) jumps [ i ] = min + 1;\n      else jumps [ i ] = min;\n    }\n  }\n  return jumps [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minJumps ( int arr [ ] , int n ) {\n  int [ ] jumps = new int [ n ] ;\n  int min ;\n  jumps [ n - 1 ] = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = Integer . MAX_VALUE ;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;\n    else {\n      min = Integer . MAX_VALUE ;\n      for ( int j = i + 1 ;\n      j < n && j <= arr [ i ] + i ;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ] ;\n      }\n      if ( min != Integer . MAX_VALUE ) jumps [ i ] = min + 1 ;\n      else jumps [ i ] = min ;\n    }\n  }\n  return jumps [ 0 ] ;\n}", "target_program": " def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] == 0 ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            for j in range ( i + 1 , n ) :\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n    return jumps [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static int minJumps ( int arr [ ] , int n ) {\n  int [ ] jumps = new int [ n ] ;\n  int min ;\n  jumps [ n - 1 ] = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = Integer . MAX_VALUE ;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;\n    else {\n      min = Integer . MAX_VALUE ;\n      for ( int j = i + 1 ;\n      j < n && j <= arr [ i ] + i ;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ] ;\n      }\n      if ( min != Integer . MAX_VALUE ) jumps [ i ] = min + 1 ;\n      else jumps [ i ] = min ;\n    }\n  }\n  return jumps [ 0 ] ;\n}", "target_program": " int minJumps ( int arr [ ], int n ) {\n  int * jumps = new int [ n ];\n  int min;\n  jumps [ n - 1 ] = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = INT_MAX;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1;\n    else {\n      min = INT_MAX;\n      for ( int j = i + 1;\n      j < n && j <= arr [ i ] + i;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ];\n      }\n      if ( min != INT_MAX ) jumps [ i ] = min + 1;\n      else jumps [ i ] = min;\n    }\n  }\n  return jumps [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minJumps ( int arr [ ], int n ) {\n  int * jumps = new int [ n ];\n  int min;\n  jumps [ n - 1 ] = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = INT_MAX;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1;\n    else {\n      min = INT_MAX;\n      for ( int j = i + 1;\n      j < n && j <= arr [ i ] + i;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ];\n      }\n      if ( min != INT_MAX ) jumps [ i ] = min + 1;\n      else jumps [ i ] = min;\n    }\n  }\n  return jumps [ 0 ];\n}", "target_program": " static int minJumps ( int arr [ ] , int n ) {\n  int [ ] jumps = new int [ n ] ;\n  int min ;\n  jumps [ n - 1 ] = 0 ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = Integer . MAX_VALUE ;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1 ;\n    else {\n      min = Integer . MAX_VALUE ;\n      for ( int j = i + 1 ;\n      j < n && j <= arr [ i ] + i ;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ] ;\n      }\n      if ( min != Integer . MAX_VALUE ) jumps [ i ] = min + 1 ;\n      else jumps [ i ] = min ;\n    }\n  }\n  return jumps [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minJumps ( int arr [ ], int n ) {\n  int * jumps = new int [ n ];\n  int min;\n  jumps [ n - 1 ] = 0;\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( arr [ i ] == 0 ) jumps [ i ] = INT_MAX;\n    else if ( arr [ i ] >= n - i - 1 ) jumps [ i ] = 1;\n    else {\n      min = INT_MAX;\n      for ( int j = i + 1;\n      j < n && j <= arr [ i ] + i;\n      j ++ ) {\n        if ( min > jumps [ j ] ) min = jumps [ j ];\n      }\n      if ( min != INT_MAX ) jumps [ i ] = min + 1;\n      else jumps [ i ] = min;\n    }\n  }\n  return jumps [ 0 ];\n}", "target_program": " def minJumps ( arr , n ) :\n    jumps = [ 0 for i in range ( n ) ]\n    for i in range ( n - 2 , - 1 , - 1 ) :\n        if ( arr [ i ] == 0 ) :\n            jumps [ i ] = float ( 'inf' )\n        elif ( arr [ i ] >= n - i - 1 ) :\n            jumps [ i ] = 1\n        else :\n            min = float ( 'inf' )\n            for j in range ( i + 1 , n ) :\n                if ( j <= arr [ i ] + i ) :\n                    if ( min > jumps [ j ] ) :\n                        min = jumps [ j ]\n            if ( min != float ( 'inf' ) ) :\n                jumps [ i ] = min + 1\n            else :\n                jumps [ i ] = min\n    return jumps [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def gcd ( a , b ) :\n    if ( a < b ) :\n        return gcd ( b , a )\n    if ( abs ( b ) < 0.001 ) :\n        return a\n    else :\n        return ( gcd ( b , a - math.floor ( a / b ) * b ) )", "target_program": " static double gcd ( double a , double b ) {\n  if ( a < b ) return gcd ( b , a ) ;\n  if ( Math . abs ( b ) < 0.001 ) return a ;\n  else return ( gcd ( b , a - Math . floor ( a / b ) * b ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def gcd ( a , b ) :\n    if ( a < b ) :\n        return gcd ( b , a )\n    if ( abs ( b ) < 0.001 ) :\n        return a\n    else :\n        return ( gcd ( b , a - math.floor ( a / b ) * b ) )", "target_program": " double gcd ( double a, double b ) {\n  if ( a < b ) return gcd ( b, a );\n  if ( fabs ( b ) < 0.001 ) return a;\n  else return ( gcd ( b, a - floor ( a / b ) * b ) );\n}"}
{"source": "java", "target": "python", "source_program": " static double gcd ( double a , double b ) {\n  if ( a < b ) return gcd ( b , a ) ;\n  if ( Math . abs ( b ) < 0.001 ) return a ;\n  else return ( gcd ( b , a - Math . floor ( a / b ) * b ) ) ;\n}", "target_program": " def gcd ( a , b ) :\n    if ( a < b ) :\n        return gcd ( b , a )\n    if ( abs ( b ) < 0.001 ) :\n        return a\n    else :\n        return ( gcd ( b , a - math.floor ( a / b ) * b ) )"}
{"source": "java", "target": "cpp", "source_program": " static double gcd ( double a , double b ) {\n  if ( a < b ) return gcd ( b , a ) ;\n  if ( Math . abs ( b ) < 0.001 ) return a ;\n  else return ( gcd ( b , a - Math . floor ( a / b ) * b ) ) ;\n}", "target_program": " double gcd ( double a, double b ) {\n  if ( a < b ) return gcd ( b, a );\n  if ( fabs ( b ) < 0.001 ) return a;\n  else return ( gcd ( b, a - floor ( a / b ) * b ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " double gcd ( double a, double b ) {\n  if ( a < b ) return gcd ( b, a );\n  if ( fabs ( b ) < 0.001 ) return a;\n  else return ( gcd ( b, a - floor ( a / b ) * b ) );\n}", "target_program": " static double gcd ( double a , double b ) {\n  if ( a < b ) return gcd ( b , a ) ;\n  if ( Math . abs ( b ) < 0.001 ) return a ;\n  else return ( gcd ( b , a - Math . floor ( a / b ) * b ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double gcd ( double a, double b ) {\n  if ( a < b ) return gcd ( b, a );\n  if ( fabs ( b ) < 0.001 ) return a;\n  else return ( gcd ( b, a - floor ( a / b ) * b ) );\n}", "target_program": " def gcd ( a , b ) :\n    if ( a < b ) :\n        return gcd ( b , a )\n    if ( abs ( b ) < 0.001 ) :\n        return a\n    else :\n        return ( gcd ( b , a - math.floor ( a / b ) * b ) )"}
{"source": "python", "target": "java", "source_program": " def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n    min_price = price [ 0 ]\n    for i in range ( 1 , n ) :\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n    result = profit [ n - 1 ]\n    return result", "target_program": " static int maxProfit ( int price [ ] , int n ) {\n  int profit [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) profit [ i ] = 0 ;\n  int max_price = price [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i + 1 ] , max_price - price [ i ] ) ;\n  }\n  int min_price = price [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) ) ;\n  }\n  int result = profit [ n - 1 ] ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n    min_price = price [ 0 ]\n    for i in range ( 1 , n ) :\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n    result = profit [ n - 1 ]\n    return result", "target_program": " int maxProfit ( int price [ ], int n ) {\n  int * profit = new int [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) profit [ i ] = 0;\n  int max_price = price [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ];\n    profit [ i ] = max ( profit [ i + 1 ], max_price - price [ i ] );\n  }\n  int min_price = price [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ];\n    profit [ i ] = max ( profit [ i - 1 ], profit [ i ] + ( price [ i ] - min_price ) );\n  }\n  int result = profit [ n - 1 ];\n  delete [ ] profit;\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxProfit ( int price [ ] , int n ) {\n  int profit [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) profit [ i ] = 0 ;\n  int max_price = price [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i + 1 ] , max_price - price [ i ] ) ;\n  }\n  int min_price = price [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) ) ;\n  }\n  int result = profit [ n - 1 ] ;\n  return result ;\n}", "target_program": " def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n    min_price = price [ 0 ]\n    for i in range ( 1 , n ) :\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n    result = profit [ n - 1 ]\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int maxProfit ( int price [ ] , int n ) {\n  int profit [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) profit [ i ] = 0 ;\n  int max_price = price [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i + 1 ] , max_price - price [ i ] ) ;\n  }\n  int min_price = price [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) ) ;\n  }\n  int result = profit [ n - 1 ] ;\n  return result ;\n}", "target_program": " int maxProfit ( int price [ ], int n ) {\n  int * profit = new int [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) profit [ i ] = 0;\n  int max_price = price [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ];\n    profit [ i ] = max ( profit [ i + 1 ], max_price - price [ i ] );\n  }\n  int min_price = price [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ];\n    profit [ i ] = max ( profit [ i - 1 ], profit [ i ] + ( price [ i ] - min_price ) );\n  }\n  int result = profit [ n - 1 ];\n  delete [ ] profit;\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxProfit ( int price [ ], int n ) {\n  int * profit = new int [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) profit [ i ] = 0;\n  int max_price = price [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ];\n    profit [ i ] = max ( profit [ i + 1 ], max_price - price [ i ] );\n  }\n  int min_price = price [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ];\n    profit [ i ] = max ( profit [ i - 1 ], profit [ i ] + ( price [ i ] - min_price ) );\n  }\n  int result = profit [ n - 1 ];\n  delete [ ] profit;\n  return result;\n}", "target_program": " static int maxProfit ( int price [ ] , int n ) {\n  int profit [ ] = new int [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) profit [ i ] = 0 ;\n  int max_price = price [ n - 1 ] ;\n  for ( int i = n - 2 ;\n  i >= 0 ;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i + 1 ] , max_price - price [ i ] ) ;\n  }\n  int min_price = price [ 0 ] ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ] ;\n    profit [ i ] = Math . max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) ) ;\n  }\n  int result = profit [ n - 1 ] ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxProfit ( int price [ ], int n ) {\n  int * profit = new int [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) profit [ i ] = 0;\n  int max_price = price [ n - 1 ];\n  for ( int i = n - 2;\n  i >= 0;\n  i -- ) {\n    if ( price [ i ] > max_price ) max_price = price [ i ];\n    profit [ i ] = max ( profit [ i + 1 ], max_price - price [ i ] );\n  }\n  int min_price = price [ 0 ];\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    if ( price [ i ] < min_price ) min_price = price [ i ];\n    profit [ i ] = max ( profit [ i - 1 ], profit [ i ] + ( price [ i ] - min_price ) );\n  }\n  int result = profit [ n - 1 ];\n  delete [ ] profit;\n  return result;\n}", "target_program": " def maxProfit ( price , n ) :\n    profit = [ 0 ] * n\n    max_price = price [ n - 1 ]\n    for i in range ( n - 2 , 0 , - 1 ) :\n        if price [ i ] > max_price :\n            max_price = price [ i ]\n        profit [ i ] = max ( profit [ i + 1 ] , max_price - price [ i ] )\n    min_price = price [ 0 ]\n    for i in range ( 1 , n ) :\n        if price [ i ] < min_price :\n            min_price = price [ i ]\n        profit [ i ] = max ( profit [ i - 1 ] , profit [ i ] + ( price [ i ] - min_price ) )\n    result = profit [ n - 1 ]\n    return result"}
{"source": "python", "target": "java", "source_program": " def countSetBits ( n ) :\n    if ( n == 0 ) :\n        return 0\n    else :\n        return ( n & 1 ) + countSetBits ( n >> 1 )", "target_program": " public static int countSetBits ( int n ) {\n  if ( n == 0 ) return 0 ;\n  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countSetBits ( n ) :\n    if ( n == 0 ) :\n        return 0\n    else :\n        return ( n & 1 ) + countSetBits ( n >> 1 )", "target_program": " int countSetBits ( int n ) {\n  if ( n == 0 ) return 0;\n  else return ( n & 1 ) + countSetBits ( n >> 1 );\n}"}
{"source": "java", "target": "python", "source_program": " public static int countSetBits ( int n ) {\n  if ( n == 0 ) return 0 ;\n  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;\n}", "target_program": " def countSetBits ( n ) :\n    if ( n == 0 ) :\n        return 0\n    else :\n        return ( n & 1 ) + countSetBits ( n >> 1 )"}
{"source": "java", "target": "cpp", "source_program": " public static int countSetBits ( int n ) {\n  if ( n == 0 ) return 0 ;\n  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;\n}", "target_program": " int countSetBits ( int n ) {\n  if ( n == 0 ) return 0;\n  else return ( n & 1 ) + countSetBits ( n >> 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countSetBits ( int n ) {\n  if ( n == 0 ) return 0;\n  else return ( n & 1 ) + countSetBits ( n >> 1 );\n}", "target_program": " public static int countSetBits ( int n ) {\n  if ( n == 0 ) return 0 ;\n  else return ( n & 1 ) + countSetBits ( n >> 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countSetBits ( int n ) {\n  if ( n == 0 ) return 0;\n  else return ( n & 1 ) + countSetBits ( n >> 1 );\n}", "target_program": " def countSetBits ( n ) :\n    if ( n == 0 ) :\n        return 0\n    else :\n        return ( n & 1 ) + countSetBits ( n >> 1 )"}
{"source": "python", "target": "java", "source_program": " def reorder ( arr , index , n ) :\n    temp = [ 0 ] * n ;\n    for i in range ( 0 , n ) :\n        temp [ index [ i ] ] = arr [ i ]\n    for i in range ( 0 , n ) :\n        arr [ i ] = temp [ i ]\n        index [ i ] = i", "target_program": " static void reorder ( ) {\n  int temp [ ] = new int [ arr . length ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) temp [ index [ i ] ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arr [ i ] = temp [ i ] ;\n    index [ i ] = i ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def reorder ( arr , index , n ) :\n    temp = [ 0 ] * n ;\n    for i in range ( 0 , n ) :\n        temp [ index [ i ] ] = arr [ i ]\n    for i in range ( 0 , n ) :\n        arr [ i ] = temp [ i ]\n        index [ i ] = i", "target_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  int temp [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) temp [ index [ i ] ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = temp [ i ];\n    index [ i ] = i;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void reorder ( ) {\n  int temp [ ] = new int [ arr . length ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) temp [ index [ i ] ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arr [ i ] = temp [ i ] ;\n    index [ i ] = i ;\n  }\n}", "target_program": " def reorder ( arr , index , n ) :\n    temp = [ 0 ] * n ;\n    for i in range ( 0 , n ) :\n        temp [ index [ i ] ] = arr [ i ]\n    for i in range ( 0 , n ) :\n        arr [ i ] = temp [ i ]\n        index [ i ] = i"}
{"source": "java", "target": "cpp", "source_program": " static void reorder ( ) {\n  int temp [ ] = new int [ arr . length ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) temp [ index [ i ] ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arr [ i ] = temp [ i ] ;\n    index [ i ] = i ;\n  }\n}", "target_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  int temp [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) temp [ index [ i ] ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = temp [ i ];\n    index [ i ] = i;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  int temp [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) temp [ index [ i ] ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = temp [ i ];\n    index [ i ] = i;\n  }\n}", "target_program": " static void reorder ( ) {\n  int temp [ ] = new int [ arr . length ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) temp [ index [ i ] ] = arr [ i ] ;\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    arr [ i ] = temp [ i ] ;\n    index [ i ] = i ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  int temp [ n ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) temp [ index [ i ] ] = arr [ i ];\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    arr [ i ] = temp [ i ];\n    index [ i ] = i;\n  }\n}", "target_program": " def reorder ( arr , index , n ) :\n    temp = [ 0 ] * n ;\n    for i in range ( 0 , n ) :\n        temp [ index [ i ] ] = arr [ i ]\n    for i in range ( 0 , n ) :\n        arr [ i ] = temp [ i ]\n        index [ i ] = i"}
{"source": "python", "target": "java", "source_program": " def canRepresentBST ( pre ) :\n    s = [ ]\n    root = INT_MIN\n    for value in pre :\n        if value < root :\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < value ) :\n            root = s.pop ( )\n        s.append ( value )\n    return True", "target_program": " boolean canRepresentBST ( int pre [ ] , int n ) {\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  int root = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( pre [ i ] < root ) {\n      return false ;\n    }\n    while ( ! s . empty ( ) && s . peek ( ) < pre [ i ] ) {\n      root = s . peek ( ) ;\n      s . pop ( ) ;\n    }\n    s . push ( pre [ i ] ) ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def canRepresentBST ( pre ) :\n    s = [ ]\n    root = INT_MIN\n    for value in pre :\n        if value < root :\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < value ) :\n            root = s.pop ( )\n        s.append ( value )\n    return True", "target_program": " bool canRepresentBST ( int pre [ ], int n ) {\n  stack < int > s;\n  int root = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( pre [ i ] < root ) return false;\n    while ( ! s . empty ( ) && s . top ( ) < pre [ i ] ) {\n      root = s . top ( );\n      s . pop ( );\n    }\n    s . push ( pre [ i ] );\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " boolean canRepresentBST ( int pre [ ] , int n ) {\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  int root = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( pre [ i ] < root ) {\n      return false ;\n    }\n    while ( ! s . empty ( ) && s . peek ( ) < pre [ i ] ) {\n      root = s . peek ( ) ;\n      s . pop ( ) ;\n    }\n    s . push ( pre [ i ] ) ;\n  }\n  return true ;\n}", "target_program": " def canRepresentBST ( pre ) :\n    s = [ ]\n    root = INT_MIN\n    for value in pre :\n        if value < root :\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < value ) :\n            root = s.pop ( )\n        s.append ( value )\n    return True"}
{"source": "java", "target": "cpp", "source_program": " boolean canRepresentBST ( int pre [ ] , int n ) {\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  int root = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( pre [ i ] < root ) {\n      return false ;\n    }\n    while ( ! s . empty ( ) && s . peek ( ) < pre [ i ] ) {\n      root = s . peek ( ) ;\n      s . pop ( ) ;\n    }\n    s . push ( pre [ i ] ) ;\n  }\n  return true ;\n}", "target_program": " bool canRepresentBST ( int pre [ ], int n ) {\n  stack < int > s;\n  int root = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( pre [ i ] < root ) return false;\n    while ( ! s . empty ( ) && s . top ( ) < pre [ i ] ) {\n      root = s . top ( );\n      s . pop ( );\n    }\n    s . push ( pre [ i ] );\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool canRepresentBST ( int pre [ ], int n ) {\n  stack < int > s;\n  int root = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( pre [ i ] < root ) return false;\n    while ( ! s . empty ( ) && s . top ( ) < pre [ i ] ) {\n      root = s . top ( );\n      s . pop ( );\n    }\n    s . push ( pre [ i ] );\n  }\n  return true;\n}", "target_program": " boolean canRepresentBST ( int pre [ ] , int n ) {\n  Stack < Integer > s = new Stack < Integer > ( ) ;\n  int root = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( pre [ i ] < root ) {\n      return false ;\n    }\n    while ( ! s . empty ( ) && s . peek ( ) < pre [ i ] ) {\n      root = s . peek ( ) ;\n      s . pop ( ) ;\n    }\n    s . push ( pre [ i ] ) ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool canRepresentBST ( int pre [ ], int n ) {\n  stack < int > s;\n  int root = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( pre [ i ] < root ) return false;\n    while ( ! s . empty ( ) && s . top ( ) < pre [ i ] ) {\n      root = s . top ( );\n      s . pop ( );\n    }\n    s . push ( pre [ i ] );\n  }\n  return true;\n}", "target_program": " def canRepresentBST ( pre ) :\n    s = [ ]\n    root = INT_MIN\n    for value in pre :\n        if value < root :\n            return False\n        while ( len ( s ) > 0 and s [ - 1 ] < value ) :\n            root = s.pop ( )\n        s.append ( value )\n    return True"}
{"source": "python", "target": "java", "source_program": " def findRepeating ( arr , n ) :\n    missingElement = 0\n    for i in range ( 0 , n ) :\n        element = arr [ abs ( arr [ i ] ) ]\n        if ( element < 0 ) :\n            missingElement = arr [ i ]\n            break\n        arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ]\n    return abs ( missingElement )", "target_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int missingElement = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int element = arr [ Math . abs ( arr [ i ] ) ] ;\n    if ( element < 0 ) {\n      missingElement = arr [ i ] ;\n      break ;\n    }\n    arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n  }\n  return Math . abs ( missingElement ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRepeating ( arr , n ) :\n    missingElement = 0\n    for i in range ( 0 , n ) :\n        element = arr [ abs ( arr [ i ] ) ]\n        if ( element < 0 ) :\n            missingElement = arr [ i ]\n            break\n        arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ]\n    return abs ( missingElement )", "target_program": " int findRepeating ( int arr [ ], int n ) {\n  int missingElement = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int element = arr [ abs ( arr [ i ] ) ];\n    if ( element < 0 ) {\n      missingElement = arr [ i ];\n      break;\n    }\n    arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n  }\n  return abs ( missingElement );\n}"}
{"source": "java", "target": "python", "source_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int missingElement = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int element = arr [ Math . abs ( arr [ i ] ) ] ;\n    if ( element < 0 ) {\n      missingElement = arr [ i ] ;\n      break ;\n    }\n    arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n  }\n  return Math . abs ( missingElement ) ;\n}", "target_program": " def findRepeating ( arr , n ) :\n    missingElement = 0\n    for i in range ( 0 , n ) :\n        element = arr [ abs ( arr [ i ] ) ]\n        if ( element < 0 ) :\n            missingElement = arr [ i ]\n            break\n        arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ]\n    return abs ( missingElement )"}
{"source": "java", "target": "cpp", "source_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int missingElement = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int element = arr [ Math . abs ( arr [ i ] ) ] ;\n    if ( element < 0 ) {\n      missingElement = arr [ i ] ;\n      break ;\n    }\n    arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n  }\n  return Math . abs ( missingElement ) ;\n}", "target_program": " int findRepeating ( int arr [ ], int n ) {\n  int missingElement = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int element = arr [ abs ( arr [ i ] ) ];\n    if ( element < 0 ) {\n      missingElement = arr [ i ];\n      break;\n    }\n    arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n  }\n  return abs ( missingElement );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findRepeating ( int arr [ ], int n ) {\n  int missingElement = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int element = arr [ abs ( arr [ i ] ) ];\n    if ( element < 0 ) {\n      missingElement = arr [ i ];\n      break;\n    }\n    arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n  }\n  return abs ( missingElement );\n}", "target_program": " static int findRepeating ( int arr [ ] , int n ) {\n  int missingElement = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int element = arr [ Math . abs ( arr [ i ] ) ] ;\n    if ( element < 0 ) {\n      missingElement = arr [ i ] ;\n      break ;\n    }\n    arr [ Math . abs ( arr [ i ] ) ] = - arr [ Math . abs ( arr [ i ] ) ] ;\n  }\n  return Math . abs ( missingElement ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findRepeating ( int arr [ ], int n ) {\n  int missingElement = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int element = arr [ abs ( arr [ i ] ) ];\n    if ( element < 0 ) {\n      missingElement = arr [ i ];\n      break;\n    }\n    arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ];\n  }\n  return abs ( missingElement );\n}", "target_program": " def findRepeating ( arr , n ) :\n    missingElement = 0\n    for i in range ( 0 , n ) :\n        element = arr [ abs ( arr [ i ] ) ]\n        if ( element < 0 ) :\n            missingElement = arr [ i ]\n            break\n        arr [ abs ( arr [ i ] ) ] = - arr [ abs ( arr [ i ] ) ]\n    return abs ( missingElement )"}
{"source": "python", "target": "java", "source_program": " def MatrixChainOrder ( p , n ) :\n    m = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( 1 , n ) :\n        m [ i ] [ i ] = 0\n    for L in range ( 2 , n ) :\n        for i in range ( 1 , n - L + 1 ) :\n            j = i + L - 1\n            m [ i ] [ j ] = sys.maxint\n            for k in range ( i , j ) :\n                q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ]\n                if q < m [ i ] [ j ] :\n                    m [ i ] [ j ] = q\n    return m [ 1 ] [ n - 1 ]", "target_program": " static int MatrixChainOrder ( int p [ ] , int n ) {\n  int m [ ] [ ] = new int [ n ] [ n ] ;\n  int i , j , k , L , q ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) m [ i ] [ i ] = 0 ;\n  for ( L = 2 ;\n  L < n ;\n  L ++ ) {\n    for ( i = 1 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( j == n ) continue ;\n      m [ i ] [ j ] = Integer . MAX_VALUE ;\n      for ( k = i ;\n      k <= j - 1 ;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ;\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MatrixChainOrder ( p , n ) :\n    m = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( 1 , n ) :\n        m [ i ] [ i ] = 0\n    for L in range ( 2 , n ) :\n        for i in range ( 1 , n - L + 1 ) :\n            j = i + L - 1\n            m [ i ] [ j ] = sys.maxint\n            for k in range ( i , j ) :\n                q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ]\n                if q < m [ i ] [ j ] :\n                    m [ i ] [ j ] = q\n    return m [ 1 ] [ n - 1 ]", "target_program": " int MatrixChainOrder ( int p [ ], int n ) {\n  int m [ n ] [ n ];\n  int i, j, k, L, q;\n  for ( i = 1;\n  i < n;\n  i ++ ) m [ i ] [ i ] = 0;\n  for ( L = 2;\n  L < n;\n  L ++ ) {\n    for ( i = 1;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      m [ i ] [ j ] = INT_MAX;\n      for ( k = i;\n      k <= j - 1;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ];\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int MatrixChainOrder ( int p [ ] , int n ) {\n  int m [ ] [ ] = new int [ n ] [ n ] ;\n  int i , j , k , L , q ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) m [ i ] [ i ] = 0 ;\n  for ( L = 2 ;\n  L < n ;\n  L ++ ) {\n    for ( i = 1 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( j == n ) continue ;\n      m [ i ] [ j ] = Integer . MAX_VALUE ;\n      for ( k = i ;\n      k <= j - 1 ;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ;\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ] ;\n}", "target_program": " def MatrixChainOrder ( p , n ) :\n    m = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( 1 , n ) :\n        m [ i ] [ i ] = 0\n    for L in range ( 2 , n ) :\n        for i in range ( 1 , n - L + 1 ) :\n            j = i + L - 1\n            m [ i ] [ j ] = sys.maxint\n            for k in range ( i , j ) :\n                q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ]\n                if q < m [ i ] [ j ] :\n                    m [ i ] [ j ] = q\n    return m [ 1 ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int MatrixChainOrder ( int p [ ] , int n ) {\n  int m [ ] [ ] = new int [ n ] [ n ] ;\n  int i , j , k , L , q ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) m [ i ] [ i ] = 0 ;\n  for ( L = 2 ;\n  L < n ;\n  L ++ ) {\n    for ( i = 1 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( j == n ) continue ;\n      m [ i ] [ j ] = Integer . MAX_VALUE ;\n      for ( k = i ;\n      k <= j - 1 ;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ;\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ] ;\n}", "target_program": " int MatrixChainOrder ( int p [ ], int n ) {\n  int m [ n ] [ n ];\n  int i, j, k, L, q;\n  for ( i = 1;\n  i < n;\n  i ++ ) m [ i ] [ i ] = 0;\n  for ( L = 2;\n  L < n;\n  L ++ ) {\n    for ( i = 1;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      m [ i ] [ j ] = INT_MAX;\n      for ( k = i;\n      k <= j - 1;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ];\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int MatrixChainOrder ( int p [ ], int n ) {\n  int m [ n ] [ n ];\n  int i, j, k, L, q;\n  for ( i = 1;\n  i < n;\n  i ++ ) m [ i ] [ i ] = 0;\n  for ( L = 2;\n  L < n;\n  L ++ ) {\n    for ( i = 1;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      m [ i ] [ j ] = INT_MAX;\n      for ( k = i;\n      k <= j - 1;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ];\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ];\n}", "target_program": " static int MatrixChainOrder ( int p [ ] , int n ) {\n  int m [ ] [ ] = new int [ n ] [ n ] ;\n  int i , j , k , L , q ;\n  for ( i = 1 ;\n  i < n ;\n  i ++ ) m [ i ] [ i ] = 0 ;\n  for ( L = 2 ;\n  L < n ;\n  L ++ ) {\n    for ( i = 1 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( j == n ) continue ;\n      m [ i ] [ j ] = Integer . MAX_VALUE ;\n      for ( k = i ;\n      k <= j - 1 ;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ] ;\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q ;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int MatrixChainOrder ( int p [ ], int n ) {\n  int m [ n ] [ n ];\n  int i, j, k, L, q;\n  for ( i = 1;\n  i < n;\n  i ++ ) m [ i ] [ i ] = 0;\n  for ( L = 2;\n  L < n;\n  L ++ ) {\n    for ( i = 1;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      m [ i ] [ j ] = INT_MAX;\n      for ( k = i;\n      k <= j - 1;\n      k ++ ) {\n        q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ];\n        if ( q < m [ i ] [ j ] ) m [ i ] [ j ] = q;\n      }\n    }\n  }\n  return m [ 1 ] [ n - 1 ];\n}", "target_program": " def MatrixChainOrder ( p , n ) :\n    m = [ [ 0 for x in range ( n ) ] for x in range ( n ) ]\n    for i in range ( 1 , n ) :\n        m [ i ] [ i ] = 0\n    for L in range ( 2 , n ) :\n        for i in range ( 1 , n - L + 1 ) :\n            j = i + L - 1\n            m [ i ] [ j ] = sys.maxint\n            for k in range ( i , j ) :\n                q = m [ i ] [ k ] + m [ k + 1 ] [ j ] + p [ i - 1 ] * p [ k ] * p [ j ]\n                if q < m [ i ] [ j ] :\n                    m [ i ] [ j ] = q\n    return m [ 1 ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def solve ( A , B , C ) :\n    i = len ( A ) - 1\n    j = len ( B ) - 1\n    k = len ( C ) - 1\n    min_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n    while i != - 1 and j != - 1 and k != - 1 :\n        current_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n        if current_diff < min_diff :\n            min_diff = current_diff\n        max_term = max ( A [ i ] , B [ j ] , C [ k ] )\n        if A [ i ] == max_term :\n            i -= 1\n        elif B [ j ] == max_term :\n            j -= 1\n        else :\n            k -= 1\n    return min_diff", "target_program": " static int solve ( int [ ] A , int [ ] B , int [ ] C ) {\n  int i , j , k ;\n  i = A . length - 1 ;\n  j = B . length - 1 ;\n  k = C . length - 1 ;\n  int min_diff , current_diff , max_term ;\n  min_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n    if ( current_diff < min_diff ) min_diff = current_diff ;\n    max_term = Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) ;\n    if ( A [ i ] == max_term ) i -= 1 ;\n    else if ( B [ j ] == max_term ) j -= 1 ;\n    else k -= 1 ;\n  }\n  return min_diff ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def solve ( A , B , C ) :\n    i = len ( A ) - 1\n    j = len ( B ) - 1\n    k = len ( C ) - 1\n    min_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n    while i != - 1 and j != - 1 and k != - 1 :\n        current_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n        if current_diff < min_diff :\n            min_diff = current_diff\n        max_term = max ( A [ i ] , B [ j ] , C [ k ] )\n        if A [ i ] == max_term :\n            i -= 1\n        elif B [ j ] == max_term :\n            j -= 1\n        else :\n            k -= 1\n    return min_diff", "target_program": " int solve ( int A [ ], int B [ ], int C [ ], int i, int j, int k ) {\n  int min_diff, current_diff, max_term;\n  min_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n    if ( current_diff < min_diff ) min_diff = current_diff;\n    max_term = max ( A [ i ], max ( B [ j ], C [ k ] ) );\n    if ( A [ i ] == max_term ) i -= 1;\n    else if ( B [ j ] == max_term ) j -= 1;\n    else k -= 1;\n  }\n  return min_diff;\n}"}
{"source": "java", "target": "python", "source_program": " static int solve ( int [ ] A , int [ ] B , int [ ] C ) {\n  int i , j , k ;\n  i = A . length - 1 ;\n  j = B . length - 1 ;\n  k = C . length - 1 ;\n  int min_diff , current_diff , max_term ;\n  min_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n    if ( current_diff < min_diff ) min_diff = current_diff ;\n    max_term = Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) ;\n    if ( A [ i ] == max_term ) i -= 1 ;\n    else if ( B [ j ] == max_term ) j -= 1 ;\n    else k -= 1 ;\n  }\n  return min_diff ;\n}", "target_program": " def solve ( A , B , C ) :\n    i = len ( A ) - 1\n    j = len ( B ) - 1\n    k = len ( C ) - 1\n    min_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n    while i != - 1 and j != - 1 and k != - 1 :\n        current_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n        if current_diff < min_diff :\n            min_diff = current_diff\n        max_term = max ( A [ i ] , B [ j ] , C [ k ] )\n        if A [ i ] == max_term :\n            i -= 1\n        elif B [ j ] == max_term :\n            j -= 1\n        else :\n            k -= 1\n    return min_diff"}
{"source": "java", "target": "cpp", "source_program": " static int solve ( int [ ] A , int [ ] B , int [ ] C ) {\n  int i , j , k ;\n  i = A . length - 1 ;\n  j = B . length - 1 ;\n  k = C . length - 1 ;\n  int min_diff , current_diff , max_term ;\n  min_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n    if ( current_diff < min_diff ) min_diff = current_diff ;\n    max_term = Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) ;\n    if ( A [ i ] == max_term ) i -= 1 ;\n    else if ( B [ j ] == max_term ) j -= 1 ;\n    else k -= 1 ;\n  }\n  return min_diff ;\n}", "target_program": " int solve ( int A [ ], int B [ ], int C [ ], int i, int j, int k ) {\n  int min_diff, current_diff, max_term;\n  min_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n    if ( current_diff < min_diff ) min_diff = current_diff;\n    max_term = max ( A [ i ], max ( B [ j ], C [ k ] ) );\n    if ( A [ i ] == max_term ) i -= 1;\n    else if ( B [ j ] == max_term ) j -= 1;\n    else k -= 1;\n  }\n  return min_diff;\n}"}
{"source": "cpp", "target": "java", "source_program": " int solve ( int A [ ], int B [ ], int C [ ], int i, int j, int k ) {\n  int min_diff, current_diff, max_term;\n  min_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n    if ( current_diff < min_diff ) min_diff = current_diff;\n    max_term = max ( A [ i ], max ( B [ j ], C [ k ] ) );\n    if ( A [ i ] == max_term ) i -= 1;\n    else if ( B [ j ] == max_term ) j -= 1;\n    else k -= 1;\n  }\n  return min_diff;\n}", "target_program": " static int solve ( int [ ] A , int [ ] B , int [ ] C ) {\n  int i , j , k ;\n  i = A . length - 1 ;\n  j = B . length - 1 ;\n  k = C . length - 1 ;\n  int min_diff , current_diff , max_term ;\n  min_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = Math . abs ( Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) - Math . min ( A [ i ] , Math . min ( B [ j ] , C [ k ] ) ) ) ;\n    if ( current_diff < min_diff ) min_diff = current_diff ;\n    max_term = Math . max ( A [ i ] , Math . max ( B [ j ] , C [ k ] ) ) ;\n    if ( A [ i ] == max_term ) i -= 1 ;\n    else if ( B [ j ] == max_term ) j -= 1 ;\n    else k -= 1 ;\n  }\n  return min_diff ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int solve ( int A [ ], int B [ ], int C [ ], int i, int j, int k ) {\n  int min_diff, current_diff, max_term;\n  min_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n  while ( i != - 1 && j != - 1 && k != - 1 ) {\n    current_diff = abs ( max ( A [ i ], max ( B [ j ], C [ k ] ) ) - min ( A [ i ], min ( B [ j ], C [ k ] ) ) );\n    if ( current_diff < min_diff ) min_diff = current_diff;\n    max_term = max ( A [ i ], max ( B [ j ], C [ k ] ) );\n    if ( A [ i ] == max_term ) i -= 1;\n    else if ( B [ j ] == max_term ) j -= 1;\n    else k -= 1;\n  }\n  return min_diff;\n}", "target_program": " def solve ( A , B , C ) :\n    i = len ( A ) - 1\n    j = len ( B ) - 1\n    k = len ( C ) - 1\n    min_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n    while i != - 1 and j != - 1 and k != - 1 :\n        current_diff = abs ( max ( A [ i ] , B [ j ] , C [ k ] ) - min ( A [ i ] , B [ j ] , C [ k ] ) )\n        if current_diff < min_diff :\n            min_diff = current_diff\n        max_term = max ( A [ i ] , B [ j ] , C [ k ] )\n        if A [ i ] == max_term :\n            i -= 1\n        elif B [ j ] == max_term :\n            j -= 1\n        else :\n            k -= 1\n    return min_diff"}
{"source": "python", "target": "java", "source_program": " def findRoots ( a , b , c ) :\n    if a == 0 :\n        print ( \"Invalid\" )\n        return - 1\n    d = b * b - 4 * a * c\n    sqrt_val = math.sqrt ( abs ( d ) )\n    if d > 0 :\n        print ( \"Roots are real and different \" )\n        print ( ( - b + sqrt_val ) / ( 2 * a ) )\n        print ( ( - b - sqrt_val ) / ( 2 * a ) )\n    elif d == 0 :\n        print ( \"Roots are real and same\" )\n        print ( - b / ( 2 * a ) )\n    else :\n        print ( \"Roots are complex\" )\n        print ( - b / ( 2 * a ) , \" + i\" , sqrt_val )\n        print ( - b / ( 2 * a ) , \" - i\" , sqrt_val )", "target_program": " void findRoots ( int a , int b , int c ) {\n  if ( a == 0 ) {\n    System . out . println ( \"Invalid\" ) ;\n    return ;\n  }\n  int d = b * b - 4 * a * c ;\n  double sqrt_val = sqrt ( abs ( d ) ) ;\n  if ( d > 0 ) {\n    System . out . println ( \"Roots are real and different \\n\" ) ;\n    System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + \"\\n\" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ;\n  }\n  else {\n    System . out . println ( \"Roots are complex \\n\" ) ;\n    System . out . println ( - ( double ) b / ( 2 * a ) + \" + i\" + sqrt_val + \"\\n\" + - ( double ) b / ( 2 * a ) + \" - i\" + sqrt_val ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def findRoots ( a , b , c ) :\n    if a == 0 :\n        print ( \"Invalid\" )\n        return - 1\n    d = b * b - 4 * a * c\n    sqrt_val = math.sqrt ( abs ( d ) )\n    if d > 0 :\n        print ( \"Roots are real and different \" )\n        print ( ( - b + sqrt_val ) / ( 2 * a ) )\n        print ( ( - b - sqrt_val ) / ( 2 * a ) )\n    elif d == 0 :\n        print ( \"Roots are real and same\" )\n        print ( - b / ( 2 * a ) )\n    else :\n        print ( \"Roots are complex\" )\n        print ( - b / ( 2 * a ) , \" + i\" , sqrt_val )\n        print ( - b / ( 2 * a ) , \" - i\" , sqrt_val )", "target_program": " void findRoots ( int a, int b, int c ) {\n  if ( a == 0 ) {\n    cout << \"Invalid\";\n    return;\n  }\n  int d = b * b - 4 * a * c;\n  double sqrt_val = sqrt ( abs ( d ) );\n  if ( d > 0 ) {\n    cout << \"Roots are real and different \\n\";\n    cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << \"\\n\" << ( double ) ( - b - sqrt_val ) / ( 2 * a );\n  }\n  else if ( d == 0 ) {\n    cout << \"Roots are real and same \\n\";\n    cout << - ( double ) b / ( 2 * a );\n  }\n  else {\n    cout << \"Roots are complex \\n\";\n    cout << - ( double ) b / ( 2 * a ) << \" + i\" << sqrt_val << \"\\n\" << - ( double ) b / ( 2 * a ) << \" - i\" << sqrt_val;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " void findRoots ( int a , int b , int c ) {\n  if ( a == 0 ) {\n    System . out . println ( \"Invalid\" ) ;\n    return ;\n  }\n  int d = b * b - 4 * a * c ;\n  double sqrt_val = sqrt ( abs ( d ) ) ;\n  if ( d > 0 ) {\n    System . out . println ( \"Roots are real and different \\n\" ) ;\n    System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + \"\\n\" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ;\n  }\n  else {\n    System . out . println ( \"Roots are complex \\n\" ) ;\n    System . out . println ( - ( double ) b / ( 2 * a ) + \" + i\" + sqrt_val + \"\\n\" + - ( double ) b / ( 2 * a ) + \" - i\" + sqrt_val ) ;\n  }\n}", "target_program": " def findRoots ( a , b , c ) :\n    if a == 0 :\n        print ( \"Invalid\" )\n        return - 1\n    d = b * b - 4 * a * c\n    sqrt_val = math.sqrt ( abs ( d ) )\n    if d > 0 :\n        print ( \"Roots are real and different \" )\n        print ( ( - b + sqrt_val ) / ( 2 * a ) )\n        print ( ( - b - sqrt_val ) / ( 2 * a ) )\n    elif d == 0 :\n        print ( \"Roots are real and same\" )\n        print ( - b / ( 2 * a ) )\n    else :\n        print ( \"Roots are complex\" )\n        print ( - b / ( 2 * a ) , \" + i\" , sqrt_val )\n        print ( - b / ( 2 * a ) , \" - i\" , sqrt_val )"}
{"source": "java", "target": "cpp", "source_program": " void findRoots ( int a , int b , int c ) {\n  if ( a == 0 ) {\n    System . out . println ( \"Invalid\" ) ;\n    return ;\n  }\n  int d = b * b - 4 * a * c ;\n  double sqrt_val = sqrt ( abs ( d ) ) ;\n  if ( d > 0 ) {\n    System . out . println ( \"Roots are real and different \\n\" ) ;\n    System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + \"\\n\" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ;\n  }\n  else {\n    System . out . println ( \"Roots are complex \\n\" ) ;\n    System . out . println ( - ( double ) b / ( 2 * a ) + \" + i\" + sqrt_val + \"\\n\" + - ( double ) b / ( 2 * a ) + \" - i\" + sqrt_val ) ;\n  }\n}", "target_program": " void findRoots ( int a, int b, int c ) {\n  if ( a == 0 ) {\n    cout << \"Invalid\";\n    return;\n  }\n  int d = b * b - 4 * a * c;\n  double sqrt_val = sqrt ( abs ( d ) );\n  if ( d > 0 ) {\n    cout << \"Roots are real and different \\n\";\n    cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << \"\\n\" << ( double ) ( - b - sqrt_val ) / ( 2 * a );\n  }\n  else if ( d == 0 ) {\n    cout << \"Roots are real and same \\n\";\n    cout << - ( double ) b / ( 2 * a );\n  }\n  else {\n    cout << \"Roots are complex \\n\";\n    cout << - ( double ) b / ( 2 * a ) << \" + i\" << sqrt_val << \"\\n\" << - ( double ) b / ( 2 * a ) << \" - i\" << sqrt_val;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void findRoots ( int a, int b, int c ) {\n  if ( a == 0 ) {\n    cout << \"Invalid\";\n    return;\n  }\n  int d = b * b - 4 * a * c;\n  double sqrt_val = sqrt ( abs ( d ) );\n  if ( d > 0 ) {\n    cout << \"Roots are real and different \\n\";\n    cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << \"\\n\" << ( double ) ( - b - sqrt_val ) / ( 2 * a );\n  }\n  else if ( d == 0 ) {\n    cout << \"Roots are real and same \\n\";\n    cout << - ( double ) b / ( 2 * a );\n  }\n  else {\n    cout << \"Roots are complex \\n\";\n    cout << - ( double ) b / ( 2 * a ) << \" + i\" << sqrt_val << \"\\n\" << - ( double ) b / ( 2 * a ) << \" - i\" << sqrt_val;\n  }\n}", "target_program": " void findRoots ( int a , int b , int c ) {\n  if ( a == 0 ) {\n    System . out . println ( \"Invalid\" ) ;\n    return ;\n  }\n  int d = b * b - 4 * a * c ;\n  double sqrt_val = sqrt ( abs ( d ) ) ;\n  if ( d > 0 ) {\n    System . out . println ( \"Roots are real and different \\n\" ) ;\n    System . out . println ( ( double ) ( - b + sqrt_val ) / ( 2 * a ) + \"\\n\" + ( double ) ( - b - sqrt_val ) / ( 2 * a ) ) ;\n  }\n  else {\n    System . out . println ( \"Roots are complex \\n\" ) ;\n    System . out . println ( - ( double ) b / ( 2 * a ) + \" + i\" + sqrt_val + \"\\n\" + - ( double ) b / ( 2 * a ) + \" - i\" + sqrt_val ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void findRoots ( int a, int b, int c ) {\n  if ( a == 0 ) {\n    cout << \"Invalid\";\n    return;\n  }\n  int d = b * b - 4 * a * c;\n  double sqrt_val = sqrt ( abs ( d ) );\n  if ( d > 0 ) {\n    cout << \"Roots are real and different \\n\";\n    cout << ( double ) ( - b + sqrt_val ) / ( 2 * a ) << \"\\n\" << ( double ) ( - b - sqrt_val ) / ( 2 * a );\n  }\n  else if ( d == 0 ) {\n    cout << \"Roots are real and same \\n\";\n    cout << - ( double ) b / ( 2 * a );\n  }\n  else {\n    cout << \"Roots are complex \\n\";\n    cout << - ( double ) b / ( 2 * a ) << \" + i\" << sqrt_val << \"\\n\" << - ( double ) b / ( 2 * a ) << \" - i\" << sqrt_val;\n  }\n}", "target_program": " def findRoots ( a , b , c ) :\n    if a == 0 :\n        print ( \"Invalid\" )\n        return - 1\n    d = b * b - 4 * a * c\n    sqrt_val = math.sqrt ( abs ( d ) )\n    if d > 0 :\n        print ( \"Roots are real and different \" )\n        print ( ( - b + sqrt_val ) / ( 2 * a ) )\n        print ( ( - b - sqrt_val ) / ( 2 * a ) )\n    elif d == 0 :\n        print ( \"Roots are real and same\" )\n        print ( - b / ( 2 * a ) )\n    else :\n        print ( \"Roots are complex\" )\n        print ( - b / ( 2 * a ) , \" + i\" , sqrt_val )\n        print ( - b / ( 2 * a ) , \" - i\" , sqrt_val )"}
{"source": "python", "target": "java", "source_program": " def isMinHeap ( level , n ) :\n    for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :\n        if level [ i ] > level [ 2 * i + 1 ] :\n            return False\n        if 2 * i + 2 < n :\n            if level [ i ] > level [ 2 * i + 2 ] :\n                return False\n    return True", "target_program": " static boolean isMinHeap ( int [ ] level ) {\n  int n = level . length - 1 ;\n  for ( int i = ( n / 2 - 1 ) ;\n  i >= 0 ;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isMinHeap ( level , n ) :\n    for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :\n        if level [ i ] > level [ 2 * i + 1 ] :\n            return False\n        if 2 * i + 2 < n :\n            if level [ i ] > level [ 2 * i + 2 ] :\n                return False\n    return True", "target_program": " bool isMinHeap ( int level [ ], int n ) {\n  for ( int i = ( n / 2 - 1 );\n  i >= 0;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false;\n    }\n  }\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isMinHeap ( int [ ] level ) {\n  int n = level . length - 1 ;\n  for ( int i = ( n / 2 - 1 ) ;\n  i >= 0 ;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false ;\n    }\n  }\n  return true ;\n}", "target_program": " def isMinHeap ( level , n ) :\n    for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :\n        if level [ i ] > level [ 2 * i + 1 ] :\n            return False\n        if 2 * i + 2 < n :\n            if level [ i ] > level [ 2 * i + 2 ] :\n                return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isMinHeap ( int [ ] level ) {\n  int n = level . length - 1 ;\n  for ( int i = ( n / 2 - 1 ) ;\n  i >= 0 ;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false ;\n    }\n  }\n  return true ;\n}", "target_program": " bool isMinHeap ( int level [ ], int n ) {\n  for ( int i = ( n / 2 - 1 );\n  i >= 0;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false;\n    }\n  }\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isMinHeap ( int level [ ], int n ) {\n  for ( int i = ( n / 2 - 1 );\n  i >= 0;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false;\n    }\n  }\n  return true;\n}", "target_program": " static boolean isMinHeap ( int [ ] level ) {\n  int n = level . length - 1 ;\n  for ( int i = ( n / 2 - 1 ) ;\n  i >= 0 ;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false ;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false ;\n    }\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isMinHeap ( int level [ ], int n ) {\n  for ( int i = ( n / 2 - 1 );\n  i >= 0;\n  i -- ) {\n    if ( level [ i ] > level [ 2 * i + 1 ] ) return false;\n    if ( 2 * i + 2 < n ) {\n      if ( level [ i ] > level [ 2 * i + 2 ] ) return false;\n    }\n  }\n  return true;\n}", "target_program": " def isMinHeap ( level , n ) :\n    for i in range ( int ( n / 2 ) - 1 , - 1 , - 1 ) :\n        if level [ i ] > level [ 2 * i + 1 ] :\n            return False\n        if 2 * i + 2 < n :\n            if level [ i ] > level [ 2 * i + 2 ] :\n                return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def findMin ( arr , low , high ) :\n    if high < low :\n        return arr [ 0 ]\n    if high == low :\n        return arr [ low ]\n    mid = int ( ( low + high ) / 2 )\n    if mid < high and arr [ mid + 1 ] < arr [ mid ] :\n        return arr [ mid + 1 ]\n    if mid > low and arr [ mid ] < arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ high ] > arr [ mid ] :\n        return findMin ( arr , low , mid - 1 )\n    return findMin ( arr , mid + 1 , high )", "target_program": " static int findMin ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return arr [ 0 ] ;\n  if ( high == low ) return arr [ low ] ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ] ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , low , mid - 1 ) ;\n  return findMin ( arr , mid + 1 , high ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMin ( arr , low , high ) :\n    if high < low :\n        return arr [ 0 ]\n    if high == low :\n        return arr [ low ]\n    mid = int ( ( low + high ) / 2 )\n    if mid < high and arr [ mid + 1 ] < arr [ mid ] :\n        return arr [ mid + 1 ]\n    if mid > low and arr [ mid ] < arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ high ] > arr [ mid ] :\n        return findMin ( arr , low , mid - 1 )\n    return findMin ( arr , mid + 1 , high )", "target_program": " int findMin ( int arr [ ], int low, int high ) {\n  if ( high < low ) return arr [ 0 ];\n  if ( high == low ) return arr [ low ];\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ];\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr, low, mid - 1 );\n  return findMin ( arr, mid + 1, high );\n}"}
{"source": "java", "target": "python", "source_program": " static int findMin ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return arr [ 0 ] ;\n  if ( high == low ) return arr [ low ] ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ] ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , low , mid - 1 ) ;\n  return findMin ( arr , mid + 1 , high ) ;\n}", "target_program": " def findMin ( arr , low , high ) :\n    if high < low :\n        return arr [ 0 ]\n    if high == low :\n        return arr [ low ]\n    mid = int ( ( low + high ) / 2 )\n    if mid < high and arr [ mid + 1 ] < arr [ mid ] :\n        return arr [ mid + 1 ]\n    if mid > low and arr [ mid ] < arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ high ] > arr [ mid ] :\n        return findMin ( arr , low , mid - 1 )\n    return findMin ( arr , mid + 1 , high )"}
{"source": "java", "target": "cpp", "source_program": " static int findMin ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return arr [ 0 ] ;\n  if ( high == low ) return arr [ low ] ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ] ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , low , mid - 1 ) ;\n  return findMin ( arr , mid + 1 , high ) ;\n}", "target_program": " int findMin ( int arr [ ], int low, int high ) {\n  if ( high < low ) return arr [ 0 ];\n  if ( high == low ) return arr [ low ];\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ];\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr, low, mid - 1 );\n  return findMin ( arr, mid + 1, high );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMin ( int arr [ ], int low, int high ) {\n  if ( high < low ) return arr [ 0 ];\n  if ( high == low ) return arr [ low ];\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ];\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr, low, mid - 1 );\n  return findMin ( arr, mid + 1, high );\n}", "target_program": " static int findMin ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return arr [ 0 ] ;\n  if ( high == low ) return arr [ low ] ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ] ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ] ;\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr , low , mid - 1 ) ;\n  return findMin ( arr , mid + 1 , high ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMin ( int arr [ ], int low, int high ) {\n  if ( high < low ) return arr [ 0 ];\n  if ( high == low ) return arr [ low ];\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return arr [ mid + 1 ];\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return arr [ mid ];\n  if ( arr [ high ] > arr [ mid ] ) return findMin ( arr, low, mid - 1 );\n  return findMin ( arr, mid + 1, high );\n}", "target_program": " def findMin ( arr , low , high ) :\n    if high < low :\n        return arr [ 0 ]\n    if high == low :\n        return arr [ low ]\n    mid = int ( ( low + high ) / 2 )\n    if mid < high and arr [ mid + 1 ] < arr [ mid ] :\n        return arr [ mid + 1 ]\n    if mid > low and arr [ mid ] < arr [ mid - 1 ] :\n        return arr [ mid ]\n    if arr [ high ] > arr [ mid ] :\n        return findMin ( arr , low , mid - 1 )\n    return findMin ( arr , mid + 1 , high )"}
{"source": "python", "target": "java", "source_program": " def modFact ( n , p ) :\n    if n >= p :\n        return 0\n    result = 1\n    for i in range ( 1 , n + 1 ) :\n        result = ( result * i ) % p\n    return result", "target_program": " static int modFact ( int n , int p ) {\n  if ( n >= p ) return 0 ;\n  int result = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) result = ( result * i ) % p ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def modFact ( n , p ) :\n    if n >= p :\n        return 0\n    result = 1\n    for i in range ( 1 , n + 1 ) :\n        result = ( result * i ) % p\n    return result", "target_program": " int modFact ( int n, int p ) {\n  if ( n >= p ) return 0;\n  int result = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) result = ( result * i ) % p;\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int modFact ( int n , int p ) {\n  if ( n >= p ) return 0 ;\n  int result = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) result = ( result * i ) % p ;\n  return result ;\n}", "target_program": " def modFact ( n , p ) :\n    if n >= p :\n        return 0\n    result = 1\n    for i in range ( 1 , n + 1 ) :\n        result = ( result * i ) % p\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int modFact ( int n , int p ) {\n  if ( n >= p ) return 0 ;\n  int result = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) result = ( result * i ) % p ;\n  return result ;\n}", "target_program": " int modFact ( int n, int p ) {\n  if ( n >= p ) return 0;\n  int result = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) result = ( result * i ) % p;\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int modFact ( int n, int p ) {\n  if ( n >= p ) return 0;\n  int result = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) result = ( result * i ) % p;\n  return result;\n}", "target_program": " static int modFact ( int n , int p ) {\n  if ( n >= p ) return 0 ;\n  int result = 1 ;\n  for ( int i = 1 ;\n  i <= n ;\n  i ++ ) result = ( result * i ) % p ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int modFact ( int n, int p ) {\n  if ( n >= p ) return 0;\n  int result = 1;\n  for ( int i = 1;\n  i <= n;\n  i ++ ) result = ( result * i ) % p;\n  return result;\n}", "target_program": " def modFact ( n , p ) :\n    if n >= p :\n        return 0\n    result = 1\n    for i in range ( 1 , n + 1 ) :\n        result = ( result * i ) % p\n    return result"}
{"source": "python", "target": "java", "source_program": " def reorder ( arr , index , n ) :\n    for i in range ( 0 , n ) :\n        while ( index [ i ] != i ) :\n            oldTargetI = index [ index [ i ] ]\n            oldTargetE = arr [ index [ i ] ]\n            arr [ index [ i ] ] = arr [ i ]\n            index [ index [ i ] ] = index [ i ]\n            index [ i ] = oldTargetI\n            arr [ i ] = oldTargetE", "target_program": " static void reorder ( ) {\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ] ;\n      char oldTargetE = ( char ) arr [ index [ i ] ] ;\n      arr [ index [ i ] ] = arr [ i ] ;\n      index [ index [ i ] ] = index [ i ] ;\n      index [ i ] = oldTargetI ;\n      arr [ i ] = oldTargetE ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def reorder ( arr , index , n ) :\n    for i in range ( 0 , n ) :\n        while ( index [ i ] != i ) :\n            oldTargetI = index [ index [ i ] ]\n            oldTargetE = arr [ index [ i ] ]\n            arr [ index [ i ] ] = arr [ i ]\n            index [ index [ i ] ] = index [ i ]\n            index [ i ] = oldTargetI\n            arr [ i ] = oldTargetE", "target_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ];\n      char oldTargetE = arr [ index [ i ] ];\n      arr [ index [ i ] ] = arr [ i ];\n      index [ index [ i ] ] = index [ i ];\n      index [ i ] = oldTargetI;\n      arr [ i ] = oldTargetE;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void reorder ( ) {\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ] ;\n      char oldTargetE = ( char ) arr [ index [ i ] ] ;\n      arr [ index [ i ] ] = arr [ i ] ;\n      index [ index [ i ] ] = index [ i ] ;\n      index [ i ] = oldTargetI ;\n      arr [ i ] = oldTargetE ;\n    }\n  }\n}", "target_program": " def reorder ( arr , index , n ) :\n    for i in range ( 0 , n ) :\n        while ( index [ i ] != i ) :\n            oldTargetI = index [ index [ i ] ]\n            oldTargetE = arr [ index [ i ] ]\n            arr [ index [ i ] ] = arr [ i ]\n            index [ index [ i ] ] = index [ i ]\n            index [ i ] = oldTargetI\n            arr [ i ] = oldTargetE"}
{"source": "java", "target": "cpp", "source_program": " static void reorder ( ) {\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ] ;\n      char oldTargetE = ( char ) arr [ index [ i ] ] ;\n      arr [ index [ i ] ] = arr [ i ] ;\n      index [ index [ i ] ] = index [ i ] ;\n      index [ i ] = oldTargetI ;\n      arr [ i ] = oldTargetE ;\n    }\n  }\n}", "target_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ];\n      char oldTargetE = arr [ index [ i ] ];\n      arr [ index [ i ] ] = arr [ i ];\n      index [ index [ i ] ] = index [ i ];\n      index [ i ] = oldTargetI;\n      arr [ i ] = oldTargetE;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ];\n      char oldTargetE = arr [ index [ i ] ];\n      arr [ index [ i ] ] = arr [ i ];\n      index [ index [ i ] ] = index [ i ];\n      index [ i ] = oldTargetI;\n      arr [ i ] = oldTargetE;\n    }\n  }\n}", "target_program": " static void reorder ( ) {\n  for ( int i = 0 ;\n  i < arr . length ;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ] ;\n      char oldTargetE = ( char ) arr [ index [ i ] ] ;\n      arr [ index [ i ] ] = arr [ i ] ;\n      index [ index [ i ] ] = index [ i ] ;\n      index [ i ] = oldTargetI ;\n      arr [ i ] = oldTargetE ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void reorder ( int arr [ ], int index [ ], int n ) {\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    while ( index [ i ] != i ) {\n      int oldTargetI = index [ index [ i ] ];\n      char oldTargetE = arr [ index [ i ] ];\n      arr [ index [ i ] ] = arr [ i ];\n      index [ index [ i ] ] = index [ i ];\n      index [ i ] = oldTargetI;\n      arr [ i ] = oldTargetE;\n    }\n  }\n}", "target_program": " def reorder ( arr , index , n ) :\n    for i in range ( 0 , n ) :\n        while ( index [ i ] != i ) :\n            oldTargetI = index [ index [ i ] ]\n            oldTargetE = arr [ index [ i ] ]\n            arr [ index [ i ] ] = arr [ i ]\n            index [ index [ i ] ] = index [ i ]\n            index [ i ] = oldTargetI\n            arr [ i ] = oldTargetE"}
{"source": "python", "target": "java", "source_program": " def unboundedKnapsack ( W , n , val , wt ) :\n    dp = [ 0 for i in range ( W + 1 ) ]\n    ans = 0\n    for i in range ( W + 1 ) :\n        for j in range ( n ) :\n            if ( wt [ j ] <= i ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] )\n    return dp [ W ]", "target_program": " private static int unboundedKnapsack ( int W , int n , int [ ] val , int [ ] wt ) {\n  int dp [ ] = new int [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( wt [ j ] <= i ) {\n        dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] ) ;\n      }\n    }\n  }\n  return dp [ W ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def unboundedKnapsack ( W , n , val , wt ) :\n    dp = [ 0 for i in range ( W + 1 ) ]\n    ans = 0\n    for i in range ( W + 1 ) :\n        for j in range ( n ) :\n            if ( wt [ j ] <= i ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] )\n    return dp [ W ]", "target_program": " int unboundedKnapsack ( int W, int n, int val [ ], int wt [ ] ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof dp );\n  int ans = 0;\n  for ( int i = 0;\n  i <= W;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( wt [ j ] <= i ) dp [ i ] = max ( dp [ i ], dp [ i - wt [ j ] ] + val [ j ] );\n  return dp [ W ];\n}"}
{"source": "java", "target": "python", "source_program": " private static int unboundedKnapsack ( int W , int n , int [ ] val , int [ ] wt ) {\n  int dp [ ] = new int [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( wt [ j ] <= i ) {\n        dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] ) ;\n      }\n    }\n  }\n  return dp [ W ] ;\n}", "target_program": " def unboundedKnapsack ( W , n , val , wt ) :\n    dp = [ 0 for i in range ( W + 1 ) ]\n    ans = 0\n    for i in range ( W + 1 ) :\n        for j in range ( n ) :\n            if ( wt [ j ] <= i ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] )\n    return dp [ W ]"}
{"source": "java", "target": "cpp", "source_program": " private static int unboundedKnapsack ( int W , int n , int [ ] val , int [ ] wt ) {\n  int dp [ ] = new int [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( wt [ j ] <= i ) {\n        dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] ) ;\n      }\n    }\n  }\n  return dp [ W ] ;\n}", "target_program": " int unboundedKnapsack ( int W, int n, int val [ ], int wt [ ] ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof dp );\n  int ans = 0;\n  for ( int i = 0;\n  i <= W;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( wt [ j ] <= i ) dp [ i ] = max ( dp [ i ], dp [ i - wt [ j ] ] + val [ j ] );\n  return dp [ W ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int unboundedKnapsack ( int W, int n, int val [ ], int wt [ ] ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof dp );\n  int ans = 0;\n  for ( int i = 0;\n  i <= W;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( wt [ j ] <= i ) dp [ i ] = max ( dp [ i ], dp [ i - wt [ j ] ] + val [ j ] );\n  return dp [ W ];\n}", "target_program": " private static int unboundedKnapsack ( int W , int n , int [ ] val , int [ ] wt ) {\n  int dp [ ] = new int [ W + 1 ] ;\n  for ( int i = 0 ;\n  i <= W ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( wt [ j ] <= i ) {\n        dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] ) ;\n      }\n    }\n  }\n  return dp [ W ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int unboundedKnapsack ( int W, int n, int val [ ], int wt [ ] ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof dp );\n  int ans = 0;\n  for ( int i = 0;\n  i <= W;\n  i ++ ) for ( int j = 0;\n  j < n;\n  j ++ ) if ( wt [ j ] <= i ) dp [ i ] = max ( dp [ i ], dp [ i - wt [ j ] ] + val [ j ] );\n  return dp [ W ];\n}", "target_program": " def unboundedKnapsack ( W , n , val , wt ) :\n    dp = [ 0 for i in range ( W + 1 ) ]\n    ans = 0\n    for i in range ( W + 1 ) :\n        for j in range ( n ) :\n            if ( wt [ j ] <= i ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - wt [ j ] ] + val [ j ] )\n    return dp [ W ]"}
{"source": "python", "target": "java", "source_program": " def isDiagonalMatrix ( mat ) :\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :\n                return False\n    return True", "target_program": " static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isDiagonalMatrix ( mat ) :\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :\n                return False\n    return True", "target_program": " bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ;\n  return true ;\n}", "target_program": " def isDiagonalMatrix ( mat ) :\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :\n                return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ;\n  return true ;\n}", "target_program": " bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false;\n  return true;\n}", "target_program": " static boolean isDiagonalMatrix ( int mat [ ] [ ] ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isDiagonalMatrix ( int mat [ N ] [ N ] ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( ( i != j ) && ( mat [ i ] [ j ] != 0 ) ) return false;\n  return true;\n}", "target_program": " def isDiagonalMatrix ( mat ) :\n    for i in range ( 0 , N ) :\n        for j in range ( 0 , N ) :\n            if ( ( i != j ) and ( mat [ i ] [ j ] != 0 ) ) :\n                return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def maxRemoval ( arr , n ) :\n    count = 0\n    cummulative_sum = 0\n    arr.sort ( )\n    for i in range ( n ) :\n        if arr [ i ] >= cummulative_sum :\n            count += 1\n            cummulative_sum += arr [ i ]\n    return count", "target_program": " static int maxRemoval ( int arr [ ] , int n ) {\n  int count = 0 ;\n  int cummulative_sum = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++ ;\n      cummulative_sum += arr [ i ] ;\n    }\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxRemoval ( arr , n ) :\n    count = 0\n    cummulative_sum = 0\n    arr.sort ( )\n    for i in range ( n ) :\n        if arr [ i ] >= cummulative_sum :\n            count += 1\n            cummulative_sum += arr [ i ]\n    return count", "target_program": " int maxRemoval ( int arr [ ], int n ) {\n  int count = 0;\n  int cummulative_sum = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++;\n      cummulative_sum += arr [ i ];\n    }\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxRemoval ( int arr [ ] , int n ) {\n  int count = 0 ;\n  int cummulative_sum = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++ ;\n      cummulative_sum += arr [ i ] ;\n    }\n  }\n  return count ;\n}", "target_program": " def maxRemoval ( arr , n ) :\n    count = 0\n    cummulative_sum = 0\n    arr.sort ( )\n    for i in range ( n ) :\n        if arr [ i ] >= cummulative_sum :\n            count += 1\n            cummulative_sum += arr [ i ]\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int maxRemoval ( int arr [ ] , int n ) {\n  int count = 0 ;\n  int cummulative_sum = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++ ;\n      cummulative_sum += arr [ i ] ;\n    }\n  }\n  return count ;\n}", "target_program": " int maxRemoval ( int arr [ ], int n ) {\n  int count = 0;\n  int cummulative_sum = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++;\n      cummulative_sum += arr [ i ];\n    }\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxRemoval ( int arr [ ], int n ) {\n  int count = 0;\n  int cummulative_sum = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++;\n      cummulative_sum += arr [ i ];\n    }\n  }\n  return count;\n}", "target_program": " static int maxRemoval ( int arr [ ] , int n ) {\n  int count = 0 ;\n  int cummulative_sum = 0 ;\n  Arrays . sort ( arr ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++ ;\n      cummulative_sum += arr [ i ] ;\n    }\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxRemoval ( int arr [ ], int n ) {\n  int count = 0;\n  int cummulative_sum = 0;\n  sort ( arr, arr + n );\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] >= cummulative_sum ) {\n      count ++;\n      cummulative_sum += arr [ i ];\n    }\n  }\n  return count;\n}", "target_program": " def maxRemoval ( arr , n ) :\n    count = 0\n    cummulative_sum = 0\n    arr.sort ( )\n    for i in range ( n ) :\n        if arr [ i ] >= cummulative_sum :\n            count += 1\n            cummulative_sum += arr [ i ]\n    return count"}
{"source": "python", "target": "java", "source_program": " def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    index = 0 ;\n    for i in word_list :\n        if i == word :\n            word_list [ index ] = stars\n        index += 1\n    result = ' '.join ( word_list )\n    return result", "target_program": " static String censor ( String text , String word ) {\n  String [ ] word_list = text . split ( \"\\\\s+\" ) ;\n  String result = \"\" ;\n  String stars = \"\" ;\n  for ( int i = 0 ;\n  i < word . length ( ) ;\n  i ++ ) stars += '*' ;\n  int index = 0 ;\n  for ( String i : word_list ) {\n    if ( i . compareTo ( word ) == 0 ) word_list [ index ] = stars ;\n    index ++ ;\n  }\n  for ( String i : word_list ) result += i + ' ' ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    index = 0 ;\n    for i in word_list :\n        if i == word :\n            word_list [ index ] = stars\n        index += 1\n    result = ' '.join ( word_list )\n    return result", "target_program": " string censor ( string text, string word ) {\n  vector < string > word_list;\n  boost :: split ( word_list, text, boost :: is_any_of ( \"\\\\ +\" ) );\n  string result = \"\";\n  string stars = \"\";\n  for ( int i = 0;\n  i < word . size ( );\n  i ++ ) stars += '*';\n  int index = 0;\n  for ( string i : word_list ) {\n    if ( i . compare ( word ) == 0 ) {\n      word_list [ index ] = stars;\n    }\n    index ++;\n  }\n  for ( string i : word_list ) {\n    result += i + ' ';\n  }\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static String censor ( String text , String word ) {\n  String [ ] word_list = text . split ( \"\\\\s+\" ) ;\n  String result = \"\" ;\n  String stars = \"\" ;\n  for ( int i = 0 ;\n  i < word . length ( ) ;\n  i ++ ) stars += '*' ;\n  int index = 0 ;\n  for ( String i : word_list ) {\n    if ( i . compareTo ( word ) == 0 ) word_list [ index ] = stars ;\n    index ++ ;\n  }\n  for ( String i : word_list ) result += i + ' ' ;\n  return result ;\n}", "target_program": " def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    index = 0 ;\n    for i in word_list :\n        if i == word :\n            word_list [ index ] = stars\n        index += 1\n    result = ' '.join ( word_list )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static String censor ( String text , String word ) {\n  String [ ] word_list = text . split ( \"\\\\s+\" ) ;\n  String result = \"\" ;\n  String stars = \"\" ;\n  for ( int i = 0 ;\n  i < word . length ( ) ;\n  i ++ ) stars += '*' ;\n  int index = 0 ;\n  for ( String i : word_list ) {\n    if ( i . compareTo ( word ) == 0 ) word_list [ index ] = stars ;\n    index ++ ;\n  }\n  for ( String i : word_list ) result += i + ' ' ;\n  return result ;\n}", "target_program": " string censor ( string text, string word ) {\n  vector < string > word_list;\n  boost :: split ( word_list, text, boost :: is_any_of ( \"\\\\ +\" ) );\n  string result = \"\";\n  string stars = \"\";\n  for ( int i = 0;\n  i < word . size ( );\n  i ++ ) stars += '*';\n  int index = 0;\n  for ( string i : word_list ) {\n    if ( i . compare ( word ) == 0 ) {\n      word_list [ index ] = stars;\n    }\n    index ++;\n  }\n  for ( string i : word_list ) {\n    result += i + ' ';\n  }\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " string censor ( string text, string word ) {\n  vector < string > word_list;\n  boost :: split ( word_list, text, boost :: is_any_of ( \"\\\\ +\" ) );\n  string result = \"\";\n  string stars = \"\";\n  for ( int i = 0;\n  i < word . size ( );\n  i ++ ) stars += '*';\n  int index = 0;\n  for ( string i : word_list ) {\n    if ( i . compare ( word ) == 0 ) {\n      word_list [ index ] = stars;\n    }\n    index ++;\n  }\n  for ( string i : word_list ) {\n    result += i + ' ';\n  }\n  return result;\n}", "target_program": " static String censor ( String text , String word ) {\n  String [ ] word_list = text . split ( \"\\\\s+\" ) ;\n  String result = \"\" ;\n  String stars = \"\" ;\n  for ( int i = 0 ;\n  i < word . length ( ) ;\n  i ++ ) stars += '*' ;\n  int index = 0 ;\n  for ( String i : word_list ) {\n    if ( i . compareTo ( word ) == 0 ) word_list [ index ] = stars ;\n    index ++ ;\n  }\n  for ( String i : word_list ) result += i + ' ' ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string censor ( string text, string word ) {\n  vector < string > word_list;\n  boost :: split ( word_list, text, boost :: is_any_of ( \"\\\\ +\" ) );\n  string result = \"\";\n  string stars = \"\";\n  for ( int i = 0;\n  i < word . size ( );\n  i ++ ) stars += '*';\n  int index = 0;\n  for ( string i : word_list ) {\n    if ( i . compare ( word ) == 0 ) {\n      word_list [ index ] = stars;\n    }\n    index ++;\n  }\n  for ( string i : word_list ) {\n    result += i + ' ';\n  }\n  return result;\n}", "target_program": " def censor ( text , word ) :\n    word_list = text.split ( )\n    result = ''\n    stars = '*' * len ( word )\n    count = 0\n    index = 0 ;\n    for i in word_list :\n        if i == word :\n            word_list [ index ] = stars\n        index += 1\n    result = ' '.join ( word_list )\n    return result"}
{"source": "python", "target": "java", "source_program": " def countStrings ( n ) :\n    a = [ 0 ] * n\n    b = [ 0 ] * n\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]", "target_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countStrings ( n ) :\n    a = [ 0 ] * n\n    b = [ 0 ] * n\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]", "target_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;\n}", "target_program": " def countStrings ( n ) :\n    a = [ 0 ] * n\n    b = [ 0 ] * n\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;\n}", "target_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ];\n}", "target_program": " static int countStrings ( int n ) {\n  int a [ ] = new int [ n ] , b [ ] = new int [ n ] ;\n  a [ 0 ] = b [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ] ;\n    b [ i ] = a [ i - 1 ] ;\n  }\n  from 2 ^ n return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countStrings ( int n ) {\n  int a [ n ], b [ n ];\n  a [ 0 ] = b [ 0 ] = 1;\n  for ( int i = 1;\n  i < n;\n  i ++ ) {\n    a [ i ] = a [ i - 1 ] + b [ i - 1 ];\n    b [ i ] = a [ i - 1 ];\n  }\n  return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ];\n}", "target_program": " def countStrings ( n ) :\n    a = [ 0 ] * n\n    b = [ 0 ] * n\n    a [ 0 ] = b [ 0 ] = 1\n    for i in range ( 1 , n ) :\n        a [ i ] = a [ i - 1 ] + b [ i - 1 ]\n        b [ i ] = a [ i - 1 ]\n    return ( 1 << n ) - a [ n - 1 ] - b [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n - 1 ) :\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) :\n            dp [ i ] [ i + 1 ] = 2\n    for l in range ( 2 , n ) :\n        i = - 1\n        for j in range ( l , n ) :\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            for k in range ( i , j ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n    return dp [ 0 ] [ n - 1 ]", "target_program": " static int maxLength ( String s , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( s . charAt ( i ) == '(' && s . charAt ( i + 1 ) == ')' ) dp [ i ] [ i + 1 ] = 2 ;\n  for ( int l = 2 ;\n  l < n ;\n  l ++ ) {\n    for ( int i = 0 , j = l ;\n    j < n ;\n    i ++ , j ++ ) {\n      if ( s . charAt ( i ) == '(' && s . charAt ( j ) == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ;\n      for ( int k = i ;\n      k < j ;\n      k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n - 1 ) :\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) :\n            dp [ i ] [ i + 1 ] = 2\n    for l in range ( 2 , n ) :\n        i = - 1\n        for j in range ( l , n ) :\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            for k in range ( i , j ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n    return dp [ 0 ] [ n - 1 ]", "target_program": " int maxLength ( char s [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( s [ i ] == '(' && s [ i + 1 ] == ')' ) dp [ i ] [ i + 1 ] = 2;\n  for ( int l = 2;\n  l < n;\n  l ++ ) {\n    for ( int i = 0, j = l;\n    j < n;\n    i ++, j ++ ) {\n      if ( s [ i ] == '(' && s [ j ] == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ];\n      for ( int k = i;\n      k < j;\n      k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ], dp [ i ] [ k ] + dp [ k + 1 ] [ j ] );\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxLength ( String s , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( s . charAt ( i ) == '(' && s . charAt ( i + 1 ) == ')' ) dp [ i ] [ i + 1 ] = 2 ;\n  for ( int l = 2 ;\n  l < n ;\n  l ++ ) {\n    for ( int i = 0 , j = l ;\n    j < n ;\n    i ++ , j ++ ) {\n      if ( s . charAt ( i ) == '(' && s . charAt ( j ) == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ;\n      for ( int k = i ;\n      k < j ;\n      k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}", "target_program": " def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n - 1 ) :\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) :\n            dp [ i ] [ i + 1 ] = 2\n    for l in range ( 2 , n ) :\n        i = - 1\n        for j in range ( l , n ) :\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            for k in range ( i , j ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n    return dp [ 0 ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxLength ( String s , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( s . charAt ( i ) == '(' && s . charAt ( i + 1 ) == ')' ) dp [ i ] [ i + 1 ] = 2 ;\n  for ( int l = 2 ;\n  l < n ;\n  l ++ ) {\n    for ( int i = 0 , j = l ;\n    j < n ;\n    i ++ , j ++ ) {\n      if ( s . charAt ( i ) == '(' && s . charAt ( j ) == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ;\n      for ( int k = i ;\n      k < j ;\n      k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}", "target_program": " int maxLength ( char s [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( s [ i ] == '(' && s [ i + 1 ] == ')' ) dp [ i ] [ i + 1 ] = 2;\n  for ( int l = 2;\n  l < n;\n  l ++ ) {\n    for ( int i = 0, j = l;\n    j < n;\n    i ++, j ++ ) {\n      if ( s [ i ] == '(' && s [ j ] == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ];\n      for ( int k = i;\n      k < j;\n      k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ], dp [ i ] [ k ] + dp [ k + 1 ] [ j ] );\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxLength ( char s [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( s [ i ] == '(' && s [ i + 1 ] == ')' ) dp [ i ] [ i + 1 ] = 2;\n  for ( int l = 2;\n  l < n;\n  l ++ ) {\n    for ( int i = 0, j = l;\n    j < n;\n    i ++, j ++ ) {\n      if ( s [ i ] == '(' && s [ j ] == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ];\n      for ( int k = i;\n      k < j;\n      k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ], dp [ i ] [ k ] + dp [ k + 1 ] [ j ] );\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}", "target_program": " static int maxLength ( String s , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( s . charAt ( i ) == '(' && s . charAt ( i + 1 ) == ')' ) dp [ i ] [ i + 1 ] = 2 ;\n  for ( int l = 2 ;\n  l < n ;\n  l ++ ) {\n    for ( int i = 0 , j = l ;\n    j < n ;\n    i ++ , j ++ ) {\n      if ( s . charAt ( i ) == '(' && s . charAt ( j ) == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ] ;\n      for ( int k = i ;\n      k < j ;\n      k ++ ) dp [ i ] [ j ] = Math . max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] ) ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxLength ( char s [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) if ( s [ i ] == '(' && s [ i + 1 ] == ')' ) dp [ i ] [ i + 1 ] = 2;\n  for ( int l = 2;\n  l < n;\n  l ++ ) {\n    for ( int i = 0, j = l;\n    j < n;\n    i ++, j ++ ) {\n      if ( s [ i ] == '(' && s [ j ] == ')' ) dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ];\n      for ( int k = i;\n      k < j;\n      k ++ ) dp [ i ] [ j ] = max ( dp [ i ] [ j ], dp [ i ] [ k ] + dp [ k + 1 ] [ j ] );\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}", "target_program": " def maxLength ( s , n ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    for i in range ( n - 1 ) :\n        if ( s [ i ] == '(' and s [ i + 1 ] == ')' ) :\n            dp [ i ] [ i + 1 ] = 2\n    for l in range ( 2 , n ) :\n        i = - 1\n        for j in range ( l , n ) :\n            i += 1\n            if ( s [ i ] == '(' and s [ j ] == ')' ) :\n                dp [ i ] [ j ] = 2 + dp [ i + 1 ] [ j - 1 ]\n            for k in range ( i , j ) :\n                dp [ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k + 1 ] [ j ] )\n    return dp [ 0 ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def findMaxGuests ( arrl , exit , n ) :\n    arrl.sort ( ) ;\n    exit.sort ( ) ;\n    guests_in = 1 ;\n    max_guests = 1 ;\n    time = arrl [ 0 ] ;\n    i = 1 ;\n    j = 0 ;\n    while ( i < n and j < n ) :\n        if ( arrl [ i ] <= exit [ j ] ) :\n            guests_in = guests_in + 1 ;\n            if ( guests_in > max_guests ) :\n                max_guests = guests_in ;\n                time = arrl [ i ] ;\n            i = i + 1 ;\n        else :\n            guests_in = guests_in - 1 ;\n            j = j + 1 ;\n    print ( \"Maximum Number of Guests =\" , max_guests , \"at time\" , time )", "target_program": " static void findMaxGuests ( int arrl [ ] , int exit [ ] , int n ) {\n  Arrays . sort ( arrl ) ;\n  Arrays . sort ( exit ) ;\n  int guests_in = 1 , max_guests = 1 , time = arrl [ 0 ] ;\n  int i = 1 , j = 0 ;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++ ;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in ;\n        time = arrl [ i ] ;\n      }\n      i ++ ;\n    }\n    else {\n      guests_in -- ;\n      j ++ ;\n    }\n  }\n  System . out . println ( \"Maximum Number of Guests = \" + max_guests + \" at time \" + time ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxGuests ( arrl , exit , n ) :\n    arrl.sort ( ) ;\n    exit.sort ( ) ;\n    guests_in = 1 ;\n    max_guests = 1 ;\n    time = arrl [ 0 ] ;\n    i = 1 ;\n    j = 0 ;\n    while ( i < n and j < n ) :\n        if ( arrl [ i ] <= exit [ j ] ) :\n            guests_in = guests_in + 1 ;\n            if ( guests_in > max_guests ) :\n                max_guests = guests_in ;\n                time = arrl [ i ] ;\n            i = i + 1 ;\n        else :\n            guests_in = guests_in - 1 ;\n            j = j + 1 ;\n    print ( \"Maximum Number of Guests =\" , max_guests , \"at time\" , time )", "target_program": " void findMaxGuests ( int arrl [ ], int exit [ ], int n ) {\n  sort ( arrl, arrl + n );\n  sort ( exit, exit + n );\n  int guests_in = 1, max_guests = 1, time = arrl [ 0 ];\n  int i = 1, j = 0;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in;\n        time = arrl [ i ];\n      }\n      i ++;\n    }\n    else {\n      guests_in --;\n      j ++;\n    }\n  }\n  cout << \"Maximum Number of Guests = \" << max_guests << \" at time \" << time;\n}"}
{"source": "java", "target": "python", "source_program": " static void findMaxGuests ( int arrl [ ] , int exit [ ] , int n ) {\n  Arrays . sort ( arrl ) ;\n  Arrays . sort ( exit ) ;\n  int guests_in = 1 , max_guests = 1 , time = arrl [ 0 ] ;\n  int i = 1 , j = 0 ;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++ ;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in ;\n        time = arrl [ i ] ;\n      }\n      i ++ ;\n    }\n    else {\n      guests_in -- ;\n      j ++ ;\n    }\n  }\n  System . out . println ( \"Maximum Number of Guests = \" + max_guests + \" at time \" + time ) ;\n}", "target_program": " def findMaxGuests ( arrl , exit , n ) :\n    arrl.sort ( ) ;\n    exit.sort ( ) ;\n    guests_in = 1 ;\n    max_guests = 1 ;\n    time = arrl [ 0 ] ;\n    i = 1 ;\n    j = 0 ;\n    while ( i < n and j < n ) :\n        if ( arrl [ i ] <= exit [ j ] ) :\n            guests_in = guests_in + 1 ;\n            if ( guests_in > max_guests ) :\n                max_guests = guests_in ;\n                time = arrl [ i ] ;\n            i = i + 1 ;\n        else :\n            guests_in = guests_in - 1 ;\n            j = j + 1 ;\n    print ( \"Maximum Number of Guests =\" , max_guests , \"at time\" , time )"}
{"source": "java", "target": "cpp", "source_program": " static void findMaxGuests ( int arrl [ ] , int exit [ ] , int n ) {\n  Arrays . sort ( arrl ) ;\n  Arrays . sort ( exit ) ;\n  int guests_in = 1 , max_guests = 1 , time = arrl [ 0 ] ;\n  int i = 1 , j = 0 ;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++ ;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in ;\n        time = arrl [ i ] ;\n      }\n      i ++ ;\n    }\n    else {\n      guests_in -- ;\n      j ++ ;\n    }\n  }\n  System . out . println ( \"Maximum Number of Guests = \" + max_guests + \" at time \" + time ) ;\n}", "target_program": " void findMaxGuests ( int arrl [ ], int exit [ ], int n ) {\n  sort ( arrl, arrl + n );\n  sort ( exit, exit + n );\n  int guests_in = 1, max_guests = 1, time = arrl [ 0 ];\n  int i = 1, j = 0;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in;\n        time = arrl [ i ];\n      }\n      i ++;\n    }\n    else {\n      guests_in --;\n      j ++;\n    }\n  }\n  cout << \"Maximum Number of Guests = \" << max_guests << \" at time \" << time;\n}"}
{"source": "cpp", "target": "java", "source_program": " void findMaxGuests ( int arrl [ ], int exit [ ], int n ) {\n  sort ( arrl, arrl + n );\n  sort ( exit, exit + n );\n  int guests_in = 1, max_guests = 1, time = arrl [ 0 ];\n  int i = 1, j = 0;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in;\n        time = arrl [ i ];\n      }\n      i ++;\n    }\n    else {\n      guests_in --;\n      j ++;\n    }\n  }\n  cout << \"Maximum Number of Guests = \" << max_guests << \" at time \" << time;\n}", "target_program": " static void findMaxGuests ( int arrl [ ] , int exit [ ] , int n ) {\n  Arrays . sort ( arrl ) ;\n  Arrays . sort ( exit ) ;\n  int guests_in = 1 , max_guests = 1 , time = arrl [ 0 ] ;\n  int i = 1 , j = 0 ;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++ ;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in ;\n        time = arrl [ i ] ;\n      }\n      i ++ ;\n    }\n    else {\n      guests_in -- ;\n      j ++ ;\n    }\n  }\n  System . out . println ( \"Maximum Number of Guests = \" + max_guests + \" at time \" + time ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findMaxGuests ( int arrl [ ], int exit [ ], int n ) {\n  sort ( arrl, arrl + n );\n  sort ( exit, exit + n );\n  int guests_in = 1, max_guests = 1, time = arrl [ 0 ];\n  int i = 1, j = 0;\n  while ( i < n && j < n ) {\n    if ( arrl [ i ] <= exit [ j ] ) {\n      guests_in ++;\n      if ( guests_in > max_guests ) {\n        max_guests = guests_in;\n        time = arrl [ i ];\n      }\n      i ++;\n    }\n    else {\n      guests_in --;\n      j ++;\n    }\n  }\n  cout << \"Maximum Number of Guests = \" << max_guests << \" at time \" << time;\n}", "target_program": " def findMaxGuests ( arrl , exit , n ) :\n    arrl.sort ( ) ;\n    exit.sort ( ) ;\n    guests_in = 1 ;\n    max_guests = 1 ;\n    time = arrl [ 0 ] ;\n    i = 1 ;\n    j = 0 ;\n    while ( i < n and j < n ) :\n        if ( arrl [ i ] <= exit [ j ] ) :\n            guests_in = guests_in + 1 ;\n            if ( guests_in > max_guests ) :\n                max_guests = guests_in ;\n                time = arrl [ i ] ;\n            i = i + 1 ;\n        else :\n            guests_in = guests_in - 1 ;\n            j = j + 1 ;\n    print ( \"Maximum Number of Guests =\" , max_guests , \"at time\" , time )"}
{"source": "python", "target": "java", "source_program": " def isMultipleOf10 ( n ) :\n    return ( n % 15 == 0 )", "target_program": " static boolean isMultipleOf10 ( int n ) {\n  if ( n % 15 == 0 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isMultipleOf10 ( n ) :\n    return ( n % 15 == 0 )", "target_program": " bool isMultipleOf10 ( int n ) {\n  return ( n % 15 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isMultipleOf10 ( int n ) {\n  if ( n % 15 == 0 ) return true ;\n  return false ;\n}", "target_program": " def isMultipleOf10 ( n ) :\n    return ( n % 15 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean isMultipleOf10 ( int n ) {\n  if ( n % 15 == 0 ) return true ;\n  return false ;\n}", "target_program": " bool isMultipleOf10 ( int n ) {\n  return ( n % 15 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isMultipleOf10 ( int n ) {\n  return ( n % 15 == 0 );\n}", "target_program": " static boolean isMultipleOf10 ( int n ) {\n  if ( n % 15 == 0 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isMultipleOf10 ( int n ) {\n  return ( n % 15 == 0 );\n}", "target_program": " def isMultipleOf10 ( n ) :\n    return ( n % 15 == 0 )"}
{"source": "python", "target": "java", "source_program": " def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    for i in range ( 1 , N ) :\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    return dp [ N - 1 ]", "target_program": " static int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int K ) {\n  Arrays . sort ( arr ) ;\n  int dp [ ] = new int [ N ] ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ] ;\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n      else dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    }\n  }\n  return dp [ N - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    for i in range ( 1 , N ) :\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    return dp [ N - 1 ]", "target_program": " int maxSumPairWithDifferenceLessThanK ( int arr [ ], int N, int K ) {\n  sort ( arr, arr + N );\n  int dp [ N ];\n  dp [ 0 ] = 0;\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ];\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = max ( dp [ i ], dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] );\n      else dp [ i ] = max ( dp [ i ], arr [ i ] + arr [ i - 1 ] );\n    }\n  }\n  return dp [ N - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int K ) {\n  Arrays . sort ( arr ) ;\n  int dp [ ] = new int [ N ] ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ] ;\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n      else dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    }\n  }\n  return dp [ N - 1 ] ;\n}", "target_program": " def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    for i in range ( 1 , N ) :\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    return dp [ N - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int K ) {\n  Arrays . sort ( arr ) ;\n  int dp [ ] = new int [ N ] ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ] ;\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n      else dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    }\n  }\n  return dp [ N - 1 ] ;\n}", "target_program": " int maxSumPairWithDifferenceLessThanK ( int arr [ ], int N, int K ) {\n  sort ( arr, arr + N );\n  int dp [ N ];\n  dp [ 0 ] = 0;\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ];\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = max ( dp [ i ], dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] );\n      else dp [ i ] = max ( dp [ i ], arr [ i ] + arr [ i - 1 ] );\n    }\n  }\n  return dp [ N - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSumPairWithDifferenceLessThanK ( int arr [ ], int N, int K ) {\n  sort ( arr, arr + N );\n  int dp [ N ];\n  dp [ 0 ] = 0;\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ];\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = max ( dp [ i ], dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] );\n      else dp [ i ] = max ( dp [ i ], arr [ i ] + arr [ i - 1 ] );\n    }\n  }\n  return dp [ N - 1 ];\n}", "target_program": " static int maxSumPairWithDifferenceLessThanK ( int arr [ ] , int N , int K ) {\n  Arrays . sort ( arr ) ;\n  int dp [ ] = new int [ N ] ;\n  dp [ 0 ] = 0 ;\n  for ( int i = 1 ;\n  i < N ;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ] ;\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = Math . max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n      else dp [ i ] = Math . max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    }\n  }\n  return dp [ N - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSumPairWithDifferenceLessThanK ( int arr [ ], int N, int K ) {\n  sort ( arr, arr + N );\n  int dp [ N ];\n  dp [ 0 ] = 0;\n  for ( int i = 1;\n  i < N;\n  i ++ ) {\n    dp [ i ] = dp [ i - 1 ];\n    if ( arr [ i ] - arr [ i - 1 ] < K ) {\n      if ( i >= 2 ) dp [ i ] = max ( dp [ i ], dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] );\n      else dp [ i ] = max ( dp [ i ], arr [ i ] + arr [ i - 1 ] );\n    }\n  }\n  return dp [ N - 1 ];\n}", "target_program": " def maxSumPairWithDifferenceLessThanK ( arr , N , K ) :\n    arr.sort ( )\n    dp = [ 0 ] * N\n    dp [ 0 ] = 0\n    for i in range ( 1 , N ) :\n        dp [ i ] = dp [ i - 1 ]\n        if ( arr [ i ] - arr [ i - 1 ] < K ) :\n            if ( i >= 2 ) :\n                dp [ i ] = max ( dp [ i ] , dp [ i - 2 ] + arr [ i ] + arr [ i - 1 ] ) ;\n            else :\n                dp [ i ] = max ( dp [ i ] , arr [ i ] + arr [ i - 1 ] ) ;\n    return dp [ N - 1 ]"}
{"source": "python", "target": "java", "source_program": " def kSmallestPair ( arr1 , n1 , arr2 , n2 , k ) :\n    if ( k > n1 * n2 ) :\n        print ( \"k pairs don't exist\" )\n        return\n    index2 = [ 0 for i in range ( n1 ) ]\n    while ( k > 0 ) :\n        min_sum = sys.maxsize\n        min_index = 0\n        for i1 in range ( 0 , n1 , 1 ) :\n            if ( index2 [ i1 ] < n2 and arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) :\n                min_index = i1\n                min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ]\n        print ( \"(\" , arr1 [ min_index ] , \",\" , arr2 [ index2 [ min_index ] ] , \")\" , end = \" \" )\n        index2 [ min_index ] += 1\n        k -= 1", "target_program": " static void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 , int k ) {\n  if ( k > n1 * n2 ) {\n    System . out . print ( \"k pairs don't exist\" ) ;\n    return ;\n  }\n  int index2 [ ] = new int [ n1 ] ;\n  while ( k > 0 ) {\n    int min_sum = Integer . MAX_VALUE ;\n    int min_index = 0 ;\n    for ( int i1 = 0 ;\n    i1 < n1 ;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1 ;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;\n      }\n    }\n    System . out . print ( \"(\" + arr1 [ min_index ] + \", \" + arr2 [ index2 [ min_index ] ] + \") \" ) ;\n    index2 [ min_index ] ++ ;\n    k -- ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def kSmallestPair ( arr1 , n1 , arr2 , n2 , k ) :\n    if ( k > n1 * n2 ) :\n        print ( \"k pairs don't exist\" )\n        return\n    index2 = [ 0 for i in range ( n1 ) ]\n    while ( k > 0 ) :\n        min_sum = sys.maxsize\n        min_index = 0\n        for i1 in range ( 0 , n1 , 1 ) :\n            if ( index2 [ i1 ] < n2 and arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) :\n                min_index = i1\n                min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ]\n        print ( \"(\" , arr1 [ min_index ] , \",\" , arr2 [ index2 [ min_index ] ] , \")\" , end = \" \" )\n        index2 [ min_index ] += 1\n        k -= 1", "target_program": " void kSmallestPair ( int arr1 [ ], int n1, int arr2 [ ], int n2, int k ) {\n  if ( k > n1 * n2 ) {\n    cout << \"k pairs don't exist\";\n    return;\n  }\n  int index2 [ n1 ];\n  memset ( index2, 0, sizeof ( index2 ) );\n  while ( k > 0 ) {\n    int min_sum = INT_MAX;\n    int min_index = 0;\n    for ( int i1 = 0;\n    i1 < n1;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ];\n      }\n    }\n    cout << \"(\" << arr1 [ min_index ] << \", \" << arr2 [ index2 [ min_index ] ] << \") \";\n    index2 [ min_index ] ++;\n    k --;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 , int k ) {\n  if ( k > n1 * n2 ) {\n    System . out . print ( \"k pairs don't exist\" ) ;\n    return ;\n  }\n  int index2 [ ] = new int [ n1 ] ;\n  while ( k > 0 ) {\n    int min_sum = Integer . MAX_VALUE ;\n    int min_index = 0 ;\n    for ( int i1 = 0 ;\n    i1 < n1 ;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1 ;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;\n      }\n    }\n    System . out . print ( \"(\" + arr1 [ min_index ] + \", \" + arr2 [ index2 [ min_index ] ] + \") \" ) ;\n    index2 [ min_index ] ++ ;\n    k -- ;\n  }\n}", "target_program": " def kSmallestPair ( arr1 , n1 , arr2 , n2 , k ) :\n    if ( k > n1 * n2 ) :\n        print ( \"k pairs don't exist\" )\n        return\n    index2 = [ 0 for i in range ( n1 ) ]\n    while ( k > 0 ) :\n        min_sum = sys.maxsize\n        min_index = 0\n        for i1 in range ( 0 , n1 , 1 ) :\n            if ( index2 [ i1 ] < n2 and arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) :\n                min_index = i1\n                min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ]\n        print ( \"(\" , arr1 [ min_index ] , \",\" , arr2 [ index2 [ min_index ] ] , \")\" , end = \" \" )\n        index2 [ min_index ] += 1\n        k -= 1"}
{"source": "java", "target": "cpp", "source_program": " static void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 , int k ) {\n  if ( k > n1 * n2 ) {\n    System . out . print ( \"k pairs don't exist\" ) ;\n    return ;\n  }\n  int index2 [ ] = new int [ n1 ] ;\n  while ( k > 0 ) {\n    int min_sum = Integer . MAX_VALUE ;\n    int min_index = 0 ;\n    for ( int i1 = 0 ;\n    i1 < n1 ;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1 ;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;\n      }\n    }\n    System . out . print ( \"(\" + arr1 [ min_index ] + \", \" + arr2 [ index2 [ min_index ] ] + \") \" ) ;\n    index2 [ min_index ] ++ ;\n    k -- ;\n  }\n}", "target_program": " void kSmallestPair ( int arr1 [ ], int n1, int arr2 [ ], int n2, int k ) {\n  if ( k > n1 * n2 ) {\n    cout << \"k pairs don't exist\";\n    return;\n  }\n  int index2 [ n1 ];\n  memset ( index2, 0, sizeof ( index2 ) );\n  while ( k > 0 ) {\n    int min_sum = INT_MAX;\n    int min_index = 0;\n    for ( int i1 = 0;\n    i1 < n1;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ];\n      }\n    }\n    cout << \"(\" << arr1 [ min_index ] << \", \" << arr2 [ index2 [ min_index ] ] << \") \";\n    index2 [ min_index ] ++;\n    k --;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void kSmallestPair ( int arr1 [ ], int n1, int arr2 [ ], int n2, int k ) {\n  if ( k > n1 * n2 ) {\n    cout << \"k pairs don't exist\";\n    return;\n  }\n  int index2 [ n1 ];\n  memset ( index2, 0, sizeof ( index2 ) );\n  while ( k > 0 ) {\n    int min_sum = INT_MAX;\n    int min_index = 0;\n    for ( int i1 = 0;\n    i1 < n1;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ];\n      }\n    }\n    cout << \"(\" << arr1 [ min_index ] << \", \" << arr2 [ index2 [ min_index ] ] << \") \";\n    index2 [ min_index ] ++;\n    k --;\n  }\n}", "target_program": " static void kSmallestPair ( int arr1 [ ] , int n1 , int arr2 [ ] , int n2 , int k ) {\n  if ( k > n1 * n2 ) {\n    System . out . print ( \"k pairs don't exist\" ) ;\n    return ;\n  }\n  int index2 [ ] = new int [ n1 ] ;\n  while ( k > 0 ) {\n    int min_sum = Integer . MAX_VALUE ;\n    int min_index = 0 ;\n    for ( int i1 = 0 ;\n    i1 < n1 ;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1 ;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] ;\n      }\n    }\n    System . out . print ( \"(\" + arr1 [ min_index ] + \", \" + arr2 [ index2 [ min_index ] ] + \") \" ) ;\n    index2 [ min_index ] ++ ;\n    k -- ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void kSmallestPair ( int arr1 [ ], int n1, int arr2 [ ], int n2, int k ) {\n  if ( k > n1 * n2 ) {\n    cout << \"k pairs don't exist\";\n    return;\n  }\n  int index2 [ n1 ];\n  memset ( index2, 0, sizeof ( index2 ) );\n  while ( k > 0 ) {\n    int min_sum = INT_MAX;\n    int min_index = 0;\n    for ( int i1 = 0;\n    i1 < n1;\n    i1 ++ ) {\n      if ( index2 [ i1 ] < n2 && arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) {\n        min_index = i1;\n        min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ];\n      }\n    }\n    cout << \"(\" << arr1 [ min_index ] << \", \" << arr2 [ index2 [ min_index ] ] << \") \";\n    index2 [ min_index ] ++;\n    k --;\n  }\n}", "target_program": " def kSmallestPair ( arr1 , n1 , arr2 , n2 , k ) :\n    if ( k > n1 * n2 ) :\n        print ( \"k pairs don't exist\" )\n        return\n    index2 = [ 0 for i in range ( n1 ) ]\n    while ( k > 0 ) :\n        min_sum = sys.maxsize\n        min_index = 0\n        for i1 in range ( 0 , n1 , 1 ) :\n            if ( index2 [ i1 ] < n2 and arr1 [ i1 ] + arr2 [ index2 [ i1 ] ] < min_sum ) :\n                min_index = i1\n                min_sum = arr1 [ i1 ] + arr2 [ index2 [ i1 ] ]\n        print ( \"(\" , arr1 [ min_index ] , \",\" , arr2 [ index2 [ min_index ] ] , \")\" , end = \" \" )\n        index2 [ min_index ] += 1\n        k -= 1"}
{"source": "python", "target": "java", "source_program": " def first ( str , i ) :\n    if ( str [ i ] == '\\0' ) :\n        return 0\n    if ( str [ i ].isupper ( ) ) :\n        return str [ i ]\n    return first ( str , i + 1 )", "target_program": " static char first ( String str , int i ) {\n  if ( str . charAt ( i ) == '\\0' ) return 0 ;\n  if ( Character . isUpperCase ( str . charAt ( i ) ) ) return str . charAt ( i ) ;\n  return first ( str , i + 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def first ( str , i ) :\n    if ( str [ i ] == '\\0' ) :\n        return 0\n    if ( str [ i ].isupper ( ) ) :\n        return str [ i ]\n    return first ( str , i + 1 )", "target_program": " char first ( string str, int i = 0 ) {\n  if ( str [ i ] == '\\0' ) return 0;\n  if ( isupper ( str [ i ] ) ) return str [ i ];\n  return first ( str, i + 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static char first ( String str , int i ) {\n  if ( str . charAt ( i ) == '\\0' ) return 0 ;\n  if ( Character . isUpperCase ( str . charAt ( i ) ) ) return str . charAt ( i ) ;\n  return first ( str , i + 1 ) ;\n}", "target_program": " def first ( str , i ) :\n    if ( str [ i ] == '\\0' ) :\n        return 0\n    if ( str [ i ].isupper ( ) ) :\n        return str [ i ]\n    return first ( str , i + 1 )"}
{"source": "java", "target": "cpp", "source_program": " static char first ( String str , int i ) {\n  if ( str . charAt ( i ) == '\\0' ) return 0 ;\n  if ( Character . isUpperCase ( str . charAt ( i ) ) ) return str . charAt ( i ) ;\n  return first ( str , i + 1 ) ;\n}", "target_program": " char first ( string str, int i = 0 ) {\n  if ( str [ i ] == '\\0' ) return 0;\n  if ( isupper ( str [ i ] ) ) return str [ i ];\n  return first ( str, i + 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " char first ( string str, int i = 0 ) {\n  if ( str [ i ] == '\\0' ) return 0;\n  if ( isupper ( str [ i ] ) ) return str [ i ];\n  return first ( str, i + 1 );\n}", "target_program": " static char first ( String str , int i ) {\n  if ( str . charAt ( i ) == '\\0' ) return 0 ;\n  if ( Character . isUpperCase ( str . charAt ( i ) ) ) return str . charAt ( i ) ;\n  return first ( str , i + 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " char first ( string str, int i = 0 ) {\n  if ( str [ i ] == '\\0' ) return 0;\n  if ( isupper ( str [ i ] ) ) return str [ i ];\n  return first ( str, i + 1 );\n}", "target_program": " def first ( str , i ) :\n    if ( str [ i ] == '\\0' ) :\n        return 0\n    if ( str [ i ].isupper ( ) ) :\n        return str [ i ]\n    return first ( str , i + 1 )"}
{"source": "python", "target": "java", "source_program": " def printPairs ( arr , n , k ) :\n    isPairFound = True\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i != j and arr [ i ] % arr [ j ] == k ) :\n                print ( \"(\" , arr [ i ] , \", \" , arr [ j ] , \")\" , sep = \"\" , end = \" \" )\n                isPairFound = True\n    return isPairFound", "target_program": " static boolean printPairs ( int arr [ ] , int n , int k ) {\n  boolean isPairFound = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        System . out . print ( \"(\" + arr [ i ] + \", \" + arr [ j ] + \")\" + \" \" ) ;\n        isPairFound = true ;\n      }\n    }\n  }\n  return isPairFound ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printPairs ( arr , n , k ) :\n    isPairFound = True\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i != j and arr [ i ] % arr [ j ] == k ) :\n                print ( \"(\" , arr [ i ] , \", \" , arr [ j ] , \")\" , sep = \"\" , end = \" \" )\n                isPairFound = True\n    return isPairFound", "target_program": " bool printPairs ( int arr [ ], int n, int k ) {\n  bool isPairFound = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        cout << \"(\" << arr [ i ] << \", \" << arr [ j ] << \")\" << \" \";\n        isPairFound = true;\n      }\n    }\n  }\n  return isPairFound;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean printPairs ( int arr [ ] , int n , int k ) {\n  boolean isPairFound = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        System . out . print ( \"(\" + arr [ i ] + \", \" + arr [ j ] + \")\" + \" \" ) ;\n        isPairFound = true ;\n      }\n    }\n  }\n  return isPairFound ;\n}", "target_program": " def printPairs ( arr , n , k ) :\n    isPairFound = True\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i != j and arr [ i ] % arr [ j ] == k ) :\n                print ( \"(\" , arr [ i ] , \", \" , arr [ j ] , \")\" , sep = \"\" , end = \" \" )\n                isPairFound = True\n    return isPairFound"}
{"source": "java", "target": "cpp", "source_program": " static boolean printPairs ( int arr [ ] , int n , int k ) {\n  boolean isPairFound = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        System . out . print ( \"(\" + arr [ i ] + \", \" + arr [ j ] + \")\" + \" \" ) ;\n        isPairFound = true ;\n      }\n    }\n  }\n  return isPairFound ;\n}", "target_program": " bool printPairs ( int arr [ ], int n, int k ) {\n  bool isPairFound = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        cout << \"(\" << arr [ i ] << \", \" << arr [ j ] << \")\" << \" \";\n        isPairFound = true;\n      }\n    }\n  }\n  return isPairFound;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool printPairs ( int arr [ ], int n, int k ) {\n  bool isPairFound = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        cout << \"(\" << arr [ i ] << \", \" << arr [ j ] << \")\" << \" \";\n        isPairFound = true;\n      }\n    }\n  }\n  return isPairFound;\n}", "target_program": " static boolean printPairs ( int arr [ ] , int n , int k ) {\n  boolean isPairFound = true ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        System . out . print ( \"(\" + arr [ i ] + \", \" + arr [ j ] + \")\" + \" \" ) ;\n        isPairFound = true ;\n      }\n    }\n  }\n  return isPairFound ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool printPairs ( int arr [ ], int n, int k ) {\n  bool isPairFound = true;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( i != j && arr [ i ] % arr [ j ] == k ) {\n        cout << \"(\" << arr [ i ] << \", \" << arr [ j ] << \")\" << \" \";\n        isPairFound = true;\n      }\n    }\n  }\n  return isPairFound;\n}", "target_program": " def printPairs ( arr , n , k ) :\n    isPairFound = True\n    for i in range ( 0 , n ) :\n        for j in range ( 0 , n ) :\n            if ( i != j and arr [ i ] % arr [ j ] == k ) :\n                print ( \"(\" , arr [ i ] , \", \" , arr [ j ] , \")\" , sep = \"\" , end = \" \" )\n                isPairFound = True\n    return isPairFound"}
{"source": "python", "target": "java", "source_program": " def solve ( n , t , p ) :\n    s = list ( p )\n    for i in range ( 0 , t ) :\n        for j in range ( 0 , n - 1 ) :\n            if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :\n                temp = s [ j ] ;\n                s [ j ] = s [ j + 1 ] ;\n                s [ j + 1 ] = temp ;\n                j = j + 1\n    print ( ''.join ( s ) )", "target_program": " static void solve ( int n , int t , char s [ ] ) {\n  for ( int i = 0 ;\n  i < t ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ] ;\n    s [ j ] = s [ j + 1 ] ;\n    s [ j + 1 ] = temp ;\n    j ++ ;\n  }\n  System . out . print ( s ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def solve ( n , t , p ) :\n    s = list ( p )\n    for i in range ( 0 , t ) :\n        for j in range ( 0 , n - 1 ) :\n            if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :\n                temp = s [ j ] ;\n                s [ j ] = s [ j + 1 ] ;\n                s [ j + 1 ] = temp ;\n                j = j + 1\n    print ( ''.join ( s ) )", "target_program": " void solve ( int n, int t, string s ) {\n  for ( int i = 0;\n  i < t;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ];\n    s [ j ] = s [ j + 1 ];\n    s [ j + 1 ] = temp;\n    j ++;\n  }\n  cout << s;\n}"}
{"source": "java", "target": "python", "source_program": " static void solve ( int n , int t , char s [ ] ) {\n  for ( int i = 0 ;\n  i < t ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ] ;\n    s [ j ] = s [ j + 1 ] ;\n    s [ j + 1 ] = temp ;\n    j ++ ;\n  }\n  System . out . print ( s ) ;\n}", "target_program": " def solve ( n , t , p ) :\n    s = list ( p )\n    for i in range ( 0 , t ) :\n        for j in range ( 0 , n - 1 ) :\n            if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :\n                temp = s [ j ] ;\n                s [ j ] = s [ j + 1 ] ;\n                s [ j + 1 ] = temp ;\n                j = j + 1\n    print ( ''.join ( s ) )"}
{"source": "java", "target": "cpp", "source_program": " static void solve ( int n , int t , char s [ ] ) {\n  for ( int i = 0 ;\n  i < t ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ] ;\n    s [ j ] = s [ j + 1 ] ;\n    s [ j + 1 ] = temp ;\n    j ++ ;\n  }\n  System . out . print ( s ) ;\n}", "target_program": " void solve ( int n, int t, string s ) {\n  for ( int i = 0;\n  i < t;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ];\n    s [ j ] = s [ j + 1 ];\n    s [ j + 1 ] = temp;\n    j ++;\n  }\n  cout << s;\n}"}
{"source": "cpp", "target": "java", "source_program": " void solve ( int n, int t, string s ) {\n  for ( int i = 0;\n  i < t;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ];\n    s [ j ] = s [ j + 1 ];\n    s [ j + 1 ] = temp;\n    j ++;\n  }\n  cout << s;\n}", "target_program": " static void solve ( int n , int t , char s [ ] ) {\n  for ( int i = 0 ;\n  i < t ;\n  i ++ ) for ( int j = 0 ;\n  j < n - 1 ;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ] ;\n    s [ j ] = s [ j + 1 ] ;\n    s [ j + 1 ] = temp ;\n    j ++ ;\n  }\n  System . out . print ( s ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void solve ( int n, int t, string s ) {\n  for ( int i = 0;\n  i < t;\n  i ++ ) for ( int j = 0;\n  j < n - 1;\n  j ++ ) if ( s [ j ] == 'B' && s [ j + 1 ] == 'G' ) {\n    char temp = s [ j ];\n    s [ j ] = s [ j + 1 ];\n    s [ j + 1 ] = temp;\n    j ++;\n  }\n  cout << s;\n}", "target_program": " def solve ( n , t , p ) :\n    s = list ( p )\n    for i in range ( 0 , t ) :\n        for j in range ( 0 , n - 1 ) :\n            if ( s [ j ] == 'B' and s [ j + 1 ] == 'G' ) :\n                temp = s [ j ] ;\n                s [ j ] = s [ j + 1 ] ;\n                s [ j + 1 ] = temp ;\n                j = j + 1\n    print ( ''.join ( s ) )"}
{"source": "python", "target": "java", "source_program": " def printSuperSeq ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    for i in range ( 0 , m + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            if not i :\n                dp [ i ] [ j ] = j ;\n            elif not j :\n                dp [ i ] [ j ] = i ;\n            elif ( a [ i - 1 ] == b [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    index = dp [ m ] [ n ] ;\n    res = [ \"\" ] * ( index )\n    i = m\n    j = n ;\n    while ( i > 0 and j > 0 ) :\n        if ( a [ i - 1 ] == b [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ] ;\n            i -= 1\n            j -= 1\n            index -= 1\n        elif ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ]\n            i -= 1\n            index -= 1\n        else :\n            res [ index - 1 ] = b [ j - 1 ]\n            j -= 1\n            index -= 1\n    while ( i > 0 ) :\n        res [ index - 1 ] = a [ i - 1 ]\n        i -= 1\n        index -= 1\n    while ( j > 0 ) :\n        res [ index - 1 ] = b [ j - 1 ]\n        j -= 1\n        index -= 1\n    print ( \"\".join ( res ) )", "target_program": " static void printSuperSeq ( String a , String b ) {\n  int m = a . length ( ) , n = b . length ( ) ;\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  String res = \"\" ;\n  int i = m , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n    }\n    else {\n      res = b . charAt ( j - 1 ) + res ;\n      j -- ;\n    }\n  }\n  while ( i > 0 ) {\n    res = a . charAt ( i - 1 ) + res ;\n    i -- ;\n  }\n  while ( j > 0 ) {\n    res = b . charAt ( j - 1 ) + res ;\n    j -- ;\n  }\n  System . out . println ( res ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def printSuperSeq ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    for i in range ( 0 , m + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            if not i :\n                dp [ i ] [ j ] = j ;\n            elif not j :\n                dp [ i ] [ j ] = i ;\n            elif ( a [ i - 1 ] == b [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    index = dp [ m ] [ n ] ;\n    res = [ \"\" ] * ( index )\n    i = m\n    j = n ;\n    while ( i > 0 and j > 0 ) :\n        if ( a [ i - 1 ] == b [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ] ;\n            i -= 1\n            j -= 1\n            index -= 1\n        elif ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ]\n            i -= 1\n            index -= 1\n        else :\n            res [ index - 1 ] = b [ j - 1 ]\n            j -= 1\n            index -= 1\n    while ( i > 0 ) :\n        res [ index - 1 ] = a [ i - 1 ]\n        i -= 1\n        index -= 1\n    while ( j > 0 ) :\n        res [ index - 1 ] = b [ j - 1 ]\n        j -= 1\n        index -= 1\n    print ( \"\".join ( res ) )", "target_program": " void printSuperSeq ( string & a, string & b ) {\n  int m = a . length ( ), n = b . length ( );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  int index = dp [ m ] [ n ];\n  string res ( index + 1, '\\0' );\n  int i = m, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( a [ i - 1 ] == b [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      j --;\n      index --;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      index --;\n    }\n    else {\n      res [ index - 1 ] = b [ j - 1 ];\n      j --;\n      index --;\n    }\n  }\n  while ( i > 0 ) {\n    res [ index - 1 ] = a [ i - 1 ];\n    i --;\n    index --;\n  }\n  while ( j > 0 ) {\n    res [ index - 1 ] = b [ j - 1 ];\n    j --;\n    index --;\n  }\n  cout << res;\n}"}
{"source": "java", "target": "python", "source_program": " static void printSuperSeq ( String a , String b ) {\n  int m = a . length ( ) , n = b . length ( ) ;\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  String res = \"\" ;\n  int i = m , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n    }\n    else {\n      res = b . charAt ( j - 1 ) + res ;\n      j -- ;\n    }\n  }\n  while ( i > 0 ) {\n    res = a . charAt ( i - 1 ) + res ;\n    i -- ;\n  }\n  while ( j > 0 ) {\n    res = b . charAt ( j - 1 ) + res ;\n    j -- ;\n  }\n  System . out . println ( res ) ;\n}", "target_program": " def printSuperSeq ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    for i in range ( 0 , m + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            if not i :\n                dp [ i ] [ j ] = j ;\n            elif not j :\n                dp [ i ] [ j ] = i ;\n            elif ( a [ i - 1 ] == b [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    index = dp [ m ] [ n ] ;\n    res = [ \"\" ] * ( index )\n    i = m\n    j = n ;\n    while ( i > 0 and j > 0 ) :\n        if ( a [ i - 1 ] == b [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ] ;\n            i -= 1\n            j -= 1\n            index -= 1\n        elif ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ]\n            i -= 1\n            index -= 1\n        else :\n            res [ index - 1 ] = b [ j - 1 ]\n            j -= 1\n            index -= 1\n    while ( i > 0 ) :\n        res [ index - 1 ] = a [ i - 1 ]\n        i -= 1\n        index -= 1\n    while ( j > 0 ) :\n        res [ index - 1 ] = b [ j - 1 ]\n        j -= 1\n        index -= 1\n    print ( \"\".join ( res ) )"}
{"source": "java", "target": "cpp", "source_program": " static void printSuperSeq ( String a , String b ) {\n  int m = a . length ( ) , n = b . length ( ) ;\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  String res = \"\" ;\n  int i = m , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n    }\n    else {\n      res = b . charAt ( j - 1 ) + res ;\n      j -- ;\n    }\n  }\n  while ( i > 0 ) {\n    res = a . charAt ( i - 1 ) + res ;\n    i -- ;\n  }\n  while ( j > 0 ) {\n    res = b . charAt ( j - 1 ) + res ;\n    j -- ;\n  }\n  System . out . println ( res ) ;\n}", "target_program": " void printSuperSeq ( string & a, string & b ) {\n  int m = a . length ( ), n = b . length ( );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  int index = dp [ m ] [ n ];\n  string res ( index + 1, '\\0' );\n  int i = m, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( a [ i - 1 ] == b [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      j --;\n      index --;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      index --;\n    }\n    else {\n      res [ index - 1 ] = b [ j - 1 ];\n      j --;\n      index --;\n    }\n  }\n  while ( i > 0 ) {\n    res [ index - 1 ] = a [ i - 1 ];\n    i --;\n    index --;\n  }\n  while ( j > 0 ) {\n    res [ index - 1 ] = b [ j - 1 ];\n    j --;\n    index --;\n  }\n  cout << res;\n}"}
{"source": "cpp", "target": "java", "source_program": " void printSuperSeq ( string & a, string & b ) {\n  int m = a . length ( ), n = b . length ( );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  int index = dp [ m ] [ n ];\n  string res ( index + 1, '\\0' );\n  int i = m, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( a [ i - 1 ] == b [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      j --;\n      index --;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      index --;\n    }\n    else {\n      res [ index - 1 ] = b [ j - 1 ];\n      j --;\n      index --;\n    }\n  }\n  while ( i > 0 ) {\n    res [ index - 1 ] = a [ i - 1 ];\n    i --;\n    index --;\n  }\n  while ( j > 0 ) {\n    res [ index - 1 ] = b [ j - 1 ];\n    j --;\n    index --;\n  }\n  cout << res;\n}", "target_program": " static void printSuperSeq ( String a , String b ) {\n  int m = a . length ( ) , n = b . length ( ) ;\n  int [ ] [ ] dp = new int [ m + 1 ] [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= m ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n ;\n    j ++ ) {\n      if ( i == 0 ) dp [ i ] [ j ] = j ;\n      else if ( j == 0 ) dp [ i ] [ j ] = i ;\n      else if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = 1 + Math . min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    }\n  }\n  String res = \"\" ;\n  int i = m , j = n ;\n  while ( i > 0 && j > 0 ) {\n    if ( a . charAt ( i - 1 ) == b . charAt ( j - 1 ) ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n      j -- ;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res = a . charAt ( i - 1 ) + res ;\n      i -- ;\n    }\n    else {\n      res = b . charAt ( j - 1 ) + res ;\n      j -- ;\n    }\n  }\n  while ( i > 0 ) {\n    res = a . charAt ( i - 1 ) + res ;\n    i -- ;\n  }\n  while ( j > 0 ) {\n    res = b . charAt ( j - 1 ) + res ;\n    j -- ;\n  }\n  System . out . println ( res ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void printSuperSeq ( string & a, string & b ) {\n  int m = a . length ( ), n = b . length ( );\n  int dp [ m + 1 ] [ n + 1 ];\n  for ( int i = 0;\n  i <= m;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n;\n    j ++ ) {\n      if ( ! i ) dp [ i ] [ j ] = j;\n      else if ( ! j ) dp [ i ] [ j ] = i;\n      else if ( a [ i - 1 ] == b [ j - 1 ] ) dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ], dp [ i ] [ j - 1 ] );\n    }\n  }\n  int index = dp [ m ] [ n ];\n  string res ( index + 1, '\\0' );\n  int i = m, j = n;\n  while ( i > 0 && j > 0 ) {\n    if ( a [ i - 1 ] == b [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      j --;\n      index --;\n    }\n    else if ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) {\n      res [ index - 1 ] = a [ i - 1 ];\n      i --;\n      index --;\n    }\n    else {\n      res [ index - 1 ] = b [ j - 1 ];\n      j --;\n      index --;\n    }\n  }\n  while ( i > 0 ) {\n    res [ index - 1 ] = a [ i - 1 ];\n    i --;\n    index --;\n  }\n  while ( j > 0 ) {\n    res [ index - 1 ] = b [ j - 1 ];\n    j --;\n    index --;\n  }\n  cout << res;\n}", "target_program": " def printSuperSeq ( a , b ) :\n    m = len ( a )\n    n = len ( b )\n    dp = [ [ 0 ] * ( n + 1 ) for i in range ( m + 1 ) ]\n    for i in range ( 0 , m + 1 ) :\n        for j in range ( 0 , n + 1 ) :\n            if not i :\n                dp [ i ] [ j ] = j ;\n            elif not j :\n                dp [ i ] [ j ] = i ;\n            elif ( a [ i - 1 ] == b [ j - 1 ] ) :\n                dp [ i ] [ j ] = 1 + dp [ i - 1 ] [ j - 1 ] ;\n            else :\n                dp [ i ] [ j ] = 1 + min ( dp [ i - 1 ] [ j ] , dp [ i ] [ j - 1 ] ) ;\n    index = dp [ m ] [ n ] ;\n    res = [ \"\" ] * ( index )\n    i = m\n    j = n ;\n    while ( i > 0 and j > 0 ) :\n        if ( a [ i - 1 ] == b [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ] ;\n            i -= 1\n            j -= 1\n            index -= 1\n        elif ( dp [ i - 1 ] [ j ] < dp [ i ] [ j - 1 ] ) :\n            res [ index - 1 ] = a [ i - 1 ]\n            i -= 1\n            index -= 1\n        else :\n            res [ index - 1 ] = b [ j - 1 ]\n            j -= 1\n            index -= 1\n    while ( i > 0 ) :\n        res [ index - 1 ] = a [ i - 1 ]\n        i -= 1\n        index -= 1\n    while ( j > 0 ) :\n        res [ index - 1 ] = b [ j - 1 ]\n        j -= 1\n        index -= 1\n    print ( \"\".join ( res ) )"}
{"source": "python", "target": "java", "source_program": " def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) :\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) :\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    threeDigit = 0\n    for i in range ( 0 , ( l - 2 ) ) :\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) :\n            count += 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    return count", "target_program": " static int countRotationsDivBy8 ( String n ) {\n  int len = n . length ( ) ;\n  int count = 0 ;\n  if ( len == 1 ) {\n    int oneDigit = n . charAt ( 0 ) - '0' ;\n    if ( oneDigit % 8 == 0 ) return 1 ;\n    return 0 ;\n  }\n  if ( len == 2 ) {\n    int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n    int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n    if ( first % 8 == 0 ) count ++ ;\n    if ( second % 8 == 0 ) count ++ ;\n    return count ;\n  }\n  int threeDigit ;\n  for ( int i = 0 ;\n  i < ( len - 2 ) ;\n  i ++ ) {\n    threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . charAt ( i + 1 ) - '0' ) * 10 + ( n . charAt ( i + 2 ) - '0' ) ;\n    if ( threeDigit % 8 == 0 ) count ++ ;\n  }\n  threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) :\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) :\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    threeDigit = 0\n    for i in range ( 0 , ( l - 2 ) ) :\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) :\n            count += 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    return count", "target_program": " int countRotationsDivBy8 ( string n ) {\n  int len = n . length ( );\n  int count = 0;\n  if ( len == 1 ) {\n    int oneDigit = n [ 0 ] - '0';\n    if ( oneDigit % 8 == 0 ) return 1;\n    return 0;\n  }\n  if ( len == 2 ) {\n    int first = ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n    int second = ( n [ 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n    if ( first % 8 == 0 ) count ++;\n    if ( second % 8 == 0 ) count ++;\n    return count;\n  }\n  int threeDigit;\n  for ( int i = 0;\n  i < ( len - 2 );\n  i ++ ) {\n    threeDigit = ( n [ i ] - '0' ) * 100 + ( n [ i + 1 ] - '0' ) * 10 + ( n [ i + 2 ] - '0' );\n    if ( threeDigit % 8 == 0 ) count ++;\n  }\n  threeDigit = ( n [ len - 1 ] - '0' ) * 100 + ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  threeDigit = ( n [ len - 2 ] - '0' ) * 100 + ( n [ len - 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int countRotationsDivBy8 ( String n ) {\n  int len = n . length ( ) ;\n  int count = 0 ;\n  if ( len == 1 ) {\n    int oneDigit = n . charAt ( 0 ) - '0' ;\n    if ( oneDigit % 8 == 0 ) return 1 ;\n    return 0 ;\n  }\n  if ( len == 2 ) {\n    int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n    int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n    if ( first % 8 == 0 ) count ++ ;\n    if ( second % 8 == 0 ) count ++ ;\n    return count ;\n  }\n  int threeDigit ;\n  for ( int i = 0 ;\n  i < ( len - 2 ) ;\n  i ++ ) {\n    threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . charAt ( i + 1 ) - '0' ) * 10 + ( n . charAt ( i + 2 ) - '0' ) ;\n    if ( threeDigit % 8 == 0 ) count ++ ;\n  }\n  threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  return count ;\n}", "target_program": " def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) :\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) :\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    threeDigit = 0\n    for i in range ( 0 , ( l - 2 ) ) :\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) :\n            count += 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int countRotationsDivBy8 ( String n ) {\n  int len = n . length ( ) ;\n  int count = 0 ;\n  if ( len == 1 ) {\n    int oneDigit = n . charAt ( 0 ) - '0' ;\n    if ( oneDigit % 8 == 0 ) return 1 ;\n    return 0 ;\n  }\n  if ( len == 2 ) {\n    int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n    int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n    if ( first % 8 == 0 ) count ++ ;\n    if ( second % 8 == 0 ) count ++ ;\n    return count ;\n  }\n  int threeDigit ;\n  for ( int i = 0 ;\n  i < ( len - 2 ) ;\n  i ++ ) {\n    threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . charAt ( i + 1 ) - '0' ) * 10 + ( n . charAt ( i + 2 ) - '0' ) ;\n    if ( threeDigit % 8 == 0 ) count ++ ;\n  }\n  threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  return count ;\n}", "target_program": " int countRotationsDivBy8 ( string n ) {\n  int len = n . length ( );\n  int count = 0;\n  if ( len == 1 ) {\n    int oneDigit = n [ 0 ] - '0';\n    if ( oneDigit % 8 == 0 ) return 1;\n    return 0;\n  }\n  if ( len == 2 ) {\n    int first = ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n    int second = ( n [ 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n    if ( first % 8 == 0 ) count ++;\n    if ( second % 8 == 0 ) count ++;\n    return count;\n  }\n  int threeDigit;\n  for ( int i = 0;\n  i < ( len - 2 );\n  i ++ ) {\n    threeDigit = ( n [ i ] - '0' ) * 100 + ( n [ i + 1 ] - '0' ) * 10 + ( n [ i + 2 ] - '0' );\n    if ( threeDigit % 8 == 0 ) count ++;\n  }\n  threeDigit = ( n [ len - 1 ] - '0' ) * 100 + ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  threeDigit = ( n [ len - 2 ] - '0' ) * 100 + ( n [ len - 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countRotationsDivBy8 ( string n ) {\n  int len = n . length ( );\n  int count = 0;\n  if ( len == 1 ) {\n    int oneDigit = n [ 0 ] - '0';\n    if ( oneDigit % 8 == 0 ) return 1;\n    return 0;\n  }\n  if ( len == 2 ) {\n    int first = ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n    int second = ( n [ 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n    if ( first % 8 == 0 ) count ++;\n    if ( second % 8 == 0 ) count ++;\n    return count;\n  }\n  int threeDigit;\n  for ( int i = 0;\n  i < ( len - 2 );\n  i ++ ) {\n    threeDigit = ( n [ i ] - '0' ) * 100 + ( n [ i + 1 ] - '0' ) * 10 + ( n [ i + 2 ] - '0' );\n    if ( threeDigit % 8 == 0 ) count ++;\n  }\n  threeDigit = ( n [ len - 1 ] - '0' ) * 100 + ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  threeDigit = ( n [ len - 2 ] - '0' ) * 100 + ( n [ len - 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  return count;\n}", "target_program": " static int countRotationsDivBy8 ( String n ) {\n  int len = n . length ( ) ;\n  int count = 0 ;\n  if ( len == 1 ) {\n    int oneDigit = n . charAt ( 0 ) - '0' ;\n    if ( oneDigit % 8 == 0 ) return 1 ;\n    return 0 ;\n  }\n  if ( len == 2 ) {\n    int first = ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n    int second = ( n . charAt ( 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n    if ( first % 8 == 0 ) count ++ ;\n    if ( second % 8 == 0 ) count ++ ;\n    return count ;\n  }\n  int threeDigit ;\n  for ( int i = 0 ;\n  i < ( len - 2 ) ;\n  i ++ ) {\n    threeDigit = ( n . charAt ( i ) - '0' ) * 100 + ( n . charAt ( i + 1 ) - '0' ) * 10 + ( n . charAt ( i + 2 ) - '0' ) ;\n    if ( threeDigit % 8 == 0 ) count ++ ;\n  }\n  threeDigit = ( n . charAt ( len - 1 ) - '0' ) * 100 + ( n . charAt ( 0 ) - '0' ) * 10 + ( n . charAt ( 1 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  threeDigit = ( n . charAt ( len - 2 ) - '0' ) * 100 + ( n . charAt ( len - 1 ) - '0' ) * 10 + ( n . charAt ( 0 ) - '0' ) ;\n  if ( threeDigit % 8 == 0 ) count ++ ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countRotationsDivBy8 ( string n ) {\n  int len = n . length ( );\n  int count = 0;\n  if ( len == 1 ) {\n    int oneDigit = n [ 0 ] - '0';\n    if ( oneDigit % 8 == 0 ) return 1;\n    return 0;\n  }\n  if ( len == 2 ) {\n    int first = ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n    int second = ( n [ 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n    if ( first % 8 == 0 ) count ++;\n    if ( second % 8 == 0 ) count ++;\n    return count;\n  }\n  int threeDigit;\n  for ( int i = 0;\n  i < ( len - 2 );\n  i ++ ) {\n    threeDigit = ( n [ i ] - '0' ) * 100 + ( n [ i + 1 ] - '0' ) * 10 + ( n [ i + 2 ] - '0' );\n    if ( threeDigit % 8 == 0 ) count ++;\n  }\n  threeDigit = ( n [ len - 1 ] - '0' ) * 100 + ( n [ 0 ] - '0' ) * 10 + ( n [ 1 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  threeDigit = ( n [ len - 2 ] - '0' ) * 100 + ( n [ len - 1 ] - '0' ) * 10 + ( n [ 0 ] - '0' );\n  if ( threeDigit % 8 == 0 ) count ++;\n  return count;\n}", "target_program": " def countRotationsDivBy8 ( n ) :\n    l = len ( n )\n    count = 0\n    if ( l == 1 ) :\n        oneDigit = int ( n [ 0 ] )\n        if ( oneDigit % 8 == 0 ) :\n            return 1\n        return 0\n    if ( l == 2 ) :\n        first = int ( n [ 0 ] ) * 10 + int ( n [ 1 ] )\n        second = int ( n [ 1 ] ) * 10 + int ( n [ 0 ] )\n        if ( first % 8 == 0 ) :\n            count += 1\n        if ( second % 8 == 0 ) :\n            count += 1\n        return count\n    threeDigit = 0\n    for i in range ( 0 , ( l - 2 ) ) :\n        threeDigit = ( int ( n [ i ] ) * 100 + int ( n [ i + 1 ] ) * 10 + int ( n [ i + 2 ] ) )\n        if ( threeDigit % 8 == 0 ) :\n            count += 1\n    threeDigit = ( int ( n [ l - 1 ] ) * 100 + int ( n [ 0 ] ) * 10 + int ( n [ 1 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    threeDigit = ( int ( n [ l - 2 ] ) * 100 + int ( n [ l - 1 ] ) * 10 + int ( n [ 0 ] ) )\n    if ( threeDigit % 8 == 0 ) :\n        count += 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def checkCollision ( a , b , c , x , y , radius ) :\n    dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a * a + b * b ) )\n    if ( radius == dist ) :\n        print ( \"Touch\" )\n    elif ( radius > dist ) :\n        print ( \"Intersect\" )\n    else :\n        print ( \"Outside\" )", "target_program": " static void checkCollision ( int a , int b , int c , int x , int y , int radius ) {\n  double dist = ( Math . abs ( a * x + b * y + c ) ) / Math . sqrt ( a * a + b * b ) ;\n  if ( radius == dist ) System . out . println ( \"Touch\" ) ;\n  else if ( radius > dist ) System . out . println ( \"Intersect\" ) ;\n  else System . out . println ( \"Outside\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkCollision ( a , b , c , x , y , radius ) :\n    dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a * a + b * b ) )\n    if ( radius == dist ) :\n        print ( \"Touch\" )\n    elif ( radius > dist ) :\n        print ( \"Intersect\" )\n    else :\n        print ( \"Outside\" )", "target_program": " void checkCollision ( int a, int b, int c, int x, int y, int radius ) {\n  int dist = ( abs ( a * x + b * y + c ) ) / sqrt ( a * a + b * b );\n  if ( radius == dist ) cout << \"Touch\" << endl;\n  else if ( radius > dist ) cout << \"Intersect\" << endl;\n  else cout << \"Outside\" << endl;\n}"}
{"source": "java", "target": "python", "source_program": " static void checkCollision ( int a , int b , int c , int x , int y , int radius ) {\n  double dist = ( Math . abs ( a * x + b * y + c ) ) / Math . sqrt ( a * a + b * b ) ;\n  if ( radius == dist ) System . out . println ( \"Touch\" ) ;\n  else if ( radius > dist ) System . out . println ( \"Intersect\" ) ;\n  else System . out . println ( \"Outside\" ) ;\n}", "target_program": " def checkCollision ( a , b , c , x , y , radius ) :\n    dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a * a + b * b ) )\n    if ( radius == dist ) :\n        print ( \"Touch\" )\n    elif ( radius > dist ) :\n        print ( \"Intersect\" )\n    else :\n        print ( \"Outside\" )"}
{"source": "java", "target": "cpp", "source_program": " static void checkCollision ( int a , int b , int c , int x , int y , int radius ) {\n  double dist = ( Math . abs ( a * x + b * y + c ) ) / Math . sqrt ( a * a + b * b ) ;\n  if ( radius == dist ) System . out . println ( \"Touch\" ) ;\n  else if ( radius > dist ) System . out . println ( \"Intersect\" ) ;\n  else System . out . println ( \"Outside\" ) ;\n}", "target_program": " void checkCollision ( int a, int b, int c, int x, int y, int radius ) {\n  int dist = ( abs ( a * x + b * y + c ) ) / sqrt ( a * a + b * b );\n  if ( radius == dist ) cout << \"Touch\" << endl;\n  else if ( radius > dist ) cout << \"Intersect\" << endl;\n  else cout << \"Outside\" << endl;\n}"}
{"source": "cpp", "target": "java", "source_program": " void checkCollision ( int a, int b, int c, int x, int y, int radius ) {\n  int dist = ( abs ( a * x + b * y + c ) ) / sqrt ( a * a + b * b );\n  if ( radius == dist ) cout << \"Touch\" << endl;\n  else if ( radius > dist ) cout << \"Intersect\" << endl;\n  else cout << \"Outside\" << endl;\n}", "target_program": " static void checkCollision ( int a , int b , int c , int x , int y , int radius ) {\n  double dist = ( Math . abs ( a * x + b * y + c ) ) / Math . sqrt ( a * a + b * b ) ;\n  if ( radius == dist ) System . out . println ( \"Touch\" ) ;\n  else if ( radius > dist ) System . out . println ( \"Intersect\" ) ;\n  else System . out . println ( \"Outside\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void checkCollision ( int a, int b, int c, int x, int y, int radius ) {\n  int dist = ( abs ( a * x + b * y + c ) ) / sqrt ( a * a + b * b );\n  if ( radius == dist ) cout << \"Touch\" << endl;\n  else if ( radius > dist ) cout << \"Intersect\" << endl;\n  else cout << \"Outside\" << endl;\n}", "target_program": " def checkCollision ( a , b , c , x , y , radius ) :\n    dist = ( ( abs ( a * x + b * y + c ) ) / math.sqrt ( a * a + b * b ) )\n    if ( radius == dist ) :\n        print ( \"Touch\" )\n    elif ( radius > dist ) :\n        print ( \"Intersect\" )\n    else :\n        print ( \"Outside\" )"}
{"source": "python", "target": "java", "source_program": " def maxSubarrayXOR ( arr , n ) :\n    ans = - 2147483648\n    for i in range ( n ) :\n        curr_xor = 0\n        for j in range ( i , n ) :\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n    return ans", "target_program": " static int maxSubarrayXOR ( int arr [ ] , int n ) {\n  int ans = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_xor = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ] ;\n      ans = Math . max ( ans , curr_xor ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSubarrayXOR ( arr , n ) :\n    ans = - 2147483648\n    for i in range ( n ) :\n        curr_xor = 0\n        for j in range ( i , n ) :\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n    return ans", "target_program": " int maxSubarrayXOR ( int arr [ ], int n ) {\n  int ans = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_xor = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ];\n      ans = max ( ans, curr_xor );\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSubarrayXOR ( int arr [ ] , int n ) {\n  int ans = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_xor = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ] ;\n      ans = Math . max ( ans , curr_xor ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " def maxSubarrayXOR ( arr , n ) :\n    ans = - 2147483648\n    for i in range ( n ) :\n        curr_xor = 0\n        for j in range ( i , n ) :\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int maxSubarrayXOR ( int arr [ ] , int n ) {\n  int ans = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_xor = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ] ;\n      ans = Math . max ( ans , curr_xor ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " int maxSubarrayXOR ( int arr [ ], int n ) {\n  int ans = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_xor = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ];\n      ans = max ( ans, curr_xor );\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSubarrayXOR ( int arr [ ], int n ) {\n  int ans = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_xor = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ];\n      ans = max ( ans, curr_xor );\n    }\n  }\n  return ans;\n}", "target_program": " static int maxSubarrayXOR ( int arr [ ] , int n ) {\n  int ans = Integer . MIN_VALUE ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_xor = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ] ;\n      ans = Math . max ( ans , curr_xor ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSubarrayXOR ( int arr [ ], int n ) {\n  int ans = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_xor = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_xor = curr_xor ^ arr [ j ];\n      ans = max ( ans, curr_xor );\n    }\n  }\n  return ans;\n}", "target_program": " def maxSubarrayXOR ( arr , n ) :\n    ans = - 2147483648\n    for i in range ( n ) :\n        curr_xor = 0\n        for j in range ( i , n ) :\n            curr_xor = curr_xor ^ arr [ j ]\n            ans = max ( ans , curr_xor )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def shortestPath ( graph , u , v , k ) :\n    V = 4\n    INF = 999999999999\n    if k == 0 and u == v :\n        return 0\n    if k == 1 and graph [ u ] [ v ] != INF :\n        return graph [ u ] [ v ]\n    if k <= 0 :\n        return INF\n    res = INF\n    for i in range ( V ) :\n        if graph [ u ] [ i ] != INF and u != i and v != i :\n            rec_res = shortestPath ( graph , i , v , k - 1 )\n            if rec_res != INF :\n                res = min ( res , graph [ u ] [ i ] + rec_res )\n    return res", "target_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 0 ;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ] ;\n  if ( k <= 0 ) return INF ;\n  int res = INF ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph , i , v , k - 1 ) ;\n      if ( rec_res != INF ) res = Math . min ( res , graph [ u ] [ i ] + rec_res ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def shortestPath ( graph , u , v , k ) :\n    V = 4\n    INF = 999999999999\n    if k == 0 and u == v :\n        return 0\n    if k == 1 and graph [ u ] [ v ] != INF :\n        return graph [ u ] [ v ]\n    if k <= 0 :\n        return INF\n    res = INF\n    for i in range ( V ) :\n        if graph [ u ] [ i ] != INF and u != i and v != i :\n            rec_res = shortestPath ( graph , i , v , k - 1 )\n            if rec_res != INF :\n                res = min ( res , graph [ u ] [ i ] + rec_res )\n    return res", "target_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 0;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ];\n  if ( k <= 0 ) return INF;\n  int res = INF;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph, i, v, k - 1 );\n      if ( rec_res != INF ) res = min ( res, graph [ u ] [ i ] + rec_res );\n    }\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 0 ;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ] ;\n  if ( k <= 0 ) return INF ;\n  int res = INF ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph , i , v , k - 1 ) ;\n      if ( rec_res != INF ) res = Math . min ( res , graph [ u ] [ i ] + rec_res ) ;\n    }\n  }\n  return res ;\n}", "target_program": " def shortestPath ( graph , u , v , k ) :\n    V = 4\n    INF = 999999999999\n    if k == 0 and u == v :\n        return 0\n    if k == 1 and graph [ u ] [ v ] != INF :\n        return graph [ u ] [ v ]\n    if k <= 0 :\n        return INF\n    res = INF\n    for i in range ( V ) :\n        if graph [ u ] [ i ] != INF and u != i and v != i :\n            rec_res = shortestPath ( graph , i , v , k - 1 )\n            if rec_res != INF :\n                res = min ( res , graph [ u ] [ i ] + rec_res )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 0 ;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ] ;\n  if ( k <= 0 ) return INF ;\n  int res = INF ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph , i , v , k - 1 ) ;\n      if ( rec_res != INF ) res = Math . min ( res , graph [ u ] [ i ] + rec_res ) ;\n    }\n  }\n  return res ;\n}", "target_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 0;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ];\n  if ( k <= 0 ) return INF;\n  int res = INF;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph, i, v, k - 1 );\n      if ( rec_res != INF ) res = min ( res, graph [ u ] [ i ] + rec_res );\n    }\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 0;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ];\n  if ( k <= 0 ) return INF;\n  int res = INF;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph, i, v, k - 1 );\n      if ( rec_res != INF ) res = min ( res, graph [ u ] [ i ] + rec_res );\n    }\n  }\n  return res;\n}", "target_program": " int shortestPath ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 0 ;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ] ;\n  if ( k <= 0 ) return INF ;\n  int res = INF ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph , i , v , k - 1 ) ;\n      if ( rec_res != INF ) res = Math . min ( res , graph [ u ] [ i ] + rec_res ) ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " INT_MAX int shortestPath ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 0;\n  if ( k == 1 && graph [ u ] [ v ] != INF ) return graph [ u ] [ v ];\n  if ( k <= 0 ) return INF;\n  int res = INF;\n  for ( int i = 0;\n  i < V;\n  i ++ ) {\n    if ( graph [ u ] [ i ] != INF && u != i && v != i ) {\n      int rec_res = shortestPath ( graph, i, v, k - 1 );\n      if ( rec_res != INF ) res = min ( res, graph [ u ] [ i ] + rec_res );\n    }\n  }\n  return res;\n}", "target_program": " def shortestPath ( graph , u , v , k ) :\n    V = 4\n    INF = 999999999999\n    if k == 0 and u == v :\n        return 0\n    if k == 1 and graph [ u ] [ v ] != INF :\n        return graph [ u ] [ v ]\n    if k <= 0 :\n        return INF\n    res = INF\n    for i in range ( V ) :\n        if graph [ u ] [ i ] != INF and u != i and v != i :\n            rec_res = shortestPath ( graph , i , v , k - 1 )\n            if rec_res != INF :\n                res = min ( res , graph [ u ] [ i ] + rec_res )\n    return res"}
{"source": "python", "target": "java", "source_program": " def kPrimeFactor ( n , k ) :\n    while ( n % 2 == 0 ) :\n        k = k - 1\n        n = n / 2\n        if ( k == 0 ) :\n            return 2\n    i = 3\n    while i <= math.sqrt ( n ) :\n        while ( n % i == 0 ) :\n            if ( k == 1 ) :\n                return i\n            k = k - 1\n            n = n / i\n        i = i + 2\n    if ( n > 2 and k == 1 ) :\n        return n\n    return - 1", "target_program": " static int kPrimeFactor ( int n , int k ) {\n  while ( n % 2 == 0 ) {\n    k -- ;\n    n = n / 2 ;\n    if ( k == 0 ) return 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i ;\n      k -- ;\n      n = n / i ;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def kPrimeFactor ( n , k ) :\n    while ( n % 2 == 0 ) :\n        k = k - 1\n        n = n / 2\n        if ( k == 0 ) :\n            return 2\n    i = 3\n    while i <= math.sqrt ( n ) :\n        while ( n % i == 0 ) :\n            if ( k == 1 ) :\n                return i\n            k = k - 1\n            n = n / i\n        i = i + 2\n    if ( n > 2 and k == 1 ) :\n        return n\n    return - 1", "target_program": " int kPrimeFactor ( int n, int k ) {\n  while ( n % 2 == 0 ) {\n    k --;\n    n = n / 2;\n    if ( k == 0 ) return 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i;\n      k --;\n      n = n / i;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n;\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int kPrimeFactor ( int n , int k ) {\n  while ( n % 2 == 0 ) {\n    k -- ;\n    n = n / 2 ;\n    if ( k == 0 ) return 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i ;\n      k -- ;\n      n = n / i ;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n ;\n  return - 1 ;\n}", "target_program": " def kPrimeFactor ( n , k ) :\n    while ( n % 2 == 0 ) :\n        k = k - 1\n        n = n / 2\n        if ( k == 0 ) :\n            return 2\n    i = 3\n    while i <= math.sqrt ( n ) :\n        while ( n % i == 0 ) :\n            if ( k == 1 ) :\n                return i\n            k = k - 1\n            n = n / i\n        i = i + 2\n    if ( n > 2 and k == 1 ) :\n        return n\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int kPrimeFactor ( int n , int k ) {\n  while ( n % 2 == 0 ) {\n    k -- ;\n    n = n / 2 ;\n    if ( k == 0 ) return 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i ;\n      k -- ;\n      n = n / i ;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n ;\n  return - 1 ;\n}", "target_program": " int kPrimeFactor ( int n, int k ) {\n  while ( n % 2 == 0 ) {\n    k --;\n    n = n / 2;\n    if ( k == 0 ) return 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i;\n      k --;\n      n = n / i;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n;\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int kPrimeFactor ( int n, int k ) {\n  while ( n % 2 == 0 ) {\n    k --;\n    n = n / 2;\n    if ( k == 0 ) return 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i;\n      k --;\n      n = n / i;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n;\n  return - 1;\n}", "target_program": " static int kPrimeFactor ( int n , int k ) {\n  while ( n % 2 == 0 ) {\n    k -- ;\n    n = n / 2 ;\n    if ( k == 0 ) return 2 ;\n  }\n  for ( int i = 3 ;\n  i <= Math . sqrt ( n ) ;\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i ;\n      k -- ;\n      n = n / i ;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int kPrimeFactor ( int n, int k ) {\n  while ( n % 2 == 0 ) {\n    k --;\n    n = n / 2;\n    if ( k == 0 ) return 2;\n  }\n  for ( int i = 3;\n  i <= sqrt ( n );\n  i = i + 2 ) {\n    while ( n % i == 0 ) {\n      if ( k == 1 ) return i;\n      k --;\n      n = n / i;\n    }\n  }\n  if ( n > 2 && k == 1 ) return n;\n  return - 1;\n}", "target_program": " def kPrimeFactor ( n , k ) :\n    while ( n % 2 == 0 ) :\n        k = k - 1\n        n = n / 2\n        if ( k == 0 ) :\n            return 2\n    i = 3\n    while i <= math.sqrt ( n ) :\n        while ( n % i == 0 ) :\n            if ( k == 1 ) :\n                return i\n            k = k - 1\n            n = n / i\n        i = i + 2\n    if ( n > 2 and k == 1 ) :\n        return n\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def countRotations ( arr , low , high ) :\n    if ( high < low ) :\n        return 0\n    if ( high == low ) :\n        return low\n    mid = low + ( high - low ) / 2 ;\n    mid = int ( mid )\n    if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) :\n        return ( mid + 1 )\n    if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) :\n        return mid\n    if ( arr [ high ] > arr [ mid ] ) :\n        return countRotations ( arr , low , mid - 1 ) ;\n    return countRotations ( arr , mid + 1 , high )", "target_program": " static int countRotations ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return 0 ;\n  if ( high == low ) return low ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr , low , mid - 1 ) ;\n  return countRotations ( arr , mid + 1 , high ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countRotations ( arr , low , high ) :\n    if ( high < low ) :\n        return 0\n    if ( high == low ) :\n        return low\n    mid = low + ( high - low ) / 2 ;\n    mid = int ( mid )\n    if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) :\n        return ( mid + 1 )\n    if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) :\n        return mid\n    if ( arr [ high ] > arr [ mid ] ) :\n        return countRotations ( arr , low , mid - 1 ) ;\n    return countRotations ( arr , mid + 1 , high )", "target_program": " int countRotations ( int arr [ ], int low, int high ) {\n  if ( high < low ) return 0;\n  if ( high == low ) return low;\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 );\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr, low, mid - 1 );\n  return countRotations ( arr, mid + 1, high );\n}"}
{"source": "java", "target": "python", "source_program": " static int countRotations ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return 0 ;\n  if ( high == low ) return low ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr , low , mid - 1 ) ;\n  return countRotations ( arr , mid + 1 , high ) ;\n}", "target_program": " def countRotations ( arr , low , high ) :\n    if ( high < low ) :\n        return 0\n    if ( high == low ) :\n        return low\n    mid = low + ( high - low ) / 2 ;\n    mid = int ( mid )\n    if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) :\n        return ( mid + 1 )\n    if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) :\n        return mid\n    if ( arr [ high ] > arr [ mid ] ) :\n        return countRotations ( arr , low , mid - 1 ) ;\n    return countRotations ( arr , mid + 1 , high )"}
{"source": "java", "target": "cpp", "source_program": " static int countRotations ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return 0 ;\n  if ( high == low ) return low ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr , low , mid - 1 ) ;\n  return countRotations ( arr , mid + 1 , high ) ;\n}", "target_program": " int countRotations ( int arr [ ], int low, int high ) {\n  if ( high < low ) return 0;\n  if ( high == low ) return low;\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 );\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr, low, mid - 1 );\n  return countRotations ( arr, mid + 1, high );\n}"}
{"source": "cpp", "target": "java", "source_program": " int countRotations ( int arr [ ], int low, int high ) {\n  if ( high < low ) return 0;\n  if ( high == low ) return low;\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 );\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr, low, mid - 1 );\n  return countRotations ( arr, mid + 1, high );\n}", "target_program": " static int countRotations ( int arr [ ] , int low , int high ) {\n  if ( high < low ) return 0 ;\n  if ( high == low ) return low ;\n  int mid = low + ( high - low ) / 2 ;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 ) ;\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid ;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr , low , mid - 1 ) ;\n  return countRotations ( arr , mid + 1 , high ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countRotations ( int arr [ ], int low, int high ) {\n  if ( high < low ) return 0;\n  if ( high == low ) return low;\n  int mid = low + ( high - low ) / 2;\n  if ( mid < high && arr [ mid + 1 ] < arr [ mid ] ) return ( mid + 1 );\n  if ( mid > low && arr [ mid ] < arr [ mid - 1 ] ) return mid;\n  if ( arr [ high ] > arr [ mid ] ) return countRotations ( arr, low, mid - 1 );\n  return countRotations ( arr, mid + 1, high );\n}", "target_program": " def countRotations ( arr , low , high ) :\n    if ( high < low ) :\n        return 0\n    if ( high == low ) :\n        return low\n    mid = low + ( high - low ) / 2 ;\n    mid = int ( mid )\n    if ( mid < high and arr [ mid + 1 ] < arr [ mid ] ) :\n        return ( mid + 1 )\n    if ( mid > low and arr [ mid ] < arr [ mid - 1 ] ) :\n        return mid\n    if ( arr [ high ] > arr [ mid ] ) :\n        return countRotations ( arr , low , mid - 1 ) ;\n    return countRotations ( arr , mid + 1 , high )"}
{"source": "python", "target": "java", "source_program": " def compute_average ( a , b ) :\n    return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 )", "target_program": " static int compute_average ( int a , int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def compute_average ( a , b ) :\n    return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 )", "target_program": " int compute_average ( int a, int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 );\n}"}
{"source": "java", "target": "python", "source_program": " static int compute_average ( int a , int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;\n}", "target_program": " def compute_average ( a , b ) :\n    return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 )"}
{"source": "java", "target": "cpp", "source_program": " static int compute_average ( int a , int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;\n}", "target_program": " int compute_average ( int a, int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int compute_average ( int a, int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 );\n}", "target_program": " static int compute_average ( int a , int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int compute_average ( int a, int b ) {\n  return ( a / 2 ) + ( b / 2 ) + ( ( a % 2 + b % 2 ) / 2 );\n}", "target_program": " def compute_average ( a , b ) :\n    return ( a // 2 ) + ( b // 2 ) + ( ( a % 2 + b % 2 ) // 2 )"}
{"source": "python", "target": "java", "source_program": " def checkEulerFourSquareIdentity ( a , b ) :\n    ab = a * b\n    flag = False\n    i = 0\n    while i * i <= ab :\n        j = i\n        while i * i + j * j <= ab :\n            k = j\n            while i * i + j * j + k * k <= ab :\n                l = ( ab - ( i * i + j * j + k * k ) ) ** ( 0.5 )\n                if l == int ( l ) and l >= k :\n                    flag = True\n                    print ( \"i = \" , i )\n                    print ( \"j = \" , j )\n                    print ( \"k = \" , k )\n                    print ( \"l = \" , l )\n                    print ( \"Product of\" , a , \"and\" , b , \"can be written as sum of squares of i, j, k, l\" )\n                    print ( ab , \" = \" , i , \"*\" , i , \"+\" , j , \"*\" , j , \"+\" , k , \"*\" , k , \"+\" , l , \"*\" , l )\n                k += 1\n            j += 1\n        i += 1\n    if flag == False :\n        print ( \"Solution doesn't exist!\" )\n        return", "target_program": " public static void checkEulerFourSquareIdentity ( int a , int b ) {\n  int ab = a * b ;\n  boolean flag = false ;\n  int i = 0 ;\n  while ( i * i <= ab ) {\n    int j = i ;\n    while ( i * i + j * j <= ab ) {\n      int k = j ;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = Math . sqrt ( ab - ( i * i + j * j + k * k ) ) ;\n        if ( Math . floor ( l ) == Math . ceil ( l ) && l >= k ) {\n          flag = true ;\n          System . out . print ( \"i = \" + i + \"\\n\" ) ;\n          System . out . print ( \"j = \" + j + \"\\n\" ) ;\n          System . out . print ( \"k = \" + k + \"\\n\" ) ;\n          System . out . print ( \"l = \" + ( int ) l + \"\\n\" ) ;\n          System . out . print ( \"Product of \" + a + \" and \" + b + \" can be written as sum of squares\" + \" of i, j, k, l \\n\" ) ;\n          System . out . print ( ab + \" = \" + i + \"*\" + i + \" + \" + j + \"*\" + j + \" + \" + k + \"*\" + k + \" + \" + ( int ) l + \"*\" + ( int ) l + \"\\n\" ) ;\n        }\n        k += 1 ;\n      }\n      j += 1 ;\n    }\n    i += 1 ;\n  }\n  if ( flag == false ) {\n    System . out . println ( \"Solution doesn't exist!\" ) ;\n    return ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def checkEulerFourSquareIdentity ( a , b ) :\n    ab = a * b\n    flag = False\n    i = 0\n    while i * i <= ab :\n        j = i\n        while i * i + j * j <= ab :\n            k = j\n            while i * i + j * j + k * k <= ab :\n                l = ( ab - ( i * i + j * j + k * k ) ) ** ( 0.5 )\n                if l == int ( l ) and l >= k :\n                    flag = True\n                    print ( \"i = \" , i )\n                    print ( \"j = \" , j )\n                    print ( \"k = \" , k )\n                    print ( \"l = \" , l )\n                    print ( \"Product of\" , a , \"and\" , b , \"can be written as sum of squares of i, j, k, l\" )\n                    print ( ab , \" = \" , i , \"*\" , i , \"+\" , j , \"*\" , j , \"+\" , k , \"*\" , k , \"+\" , l , \"*\" , l )\n                k += 1\n            j += 1\n        i += 1\n    if flag == False :\n        print ( \"Solution doesn't exist!\" )\n        return", "target_program": " void checkEulerFourSquareIdentity ( int a, int b ) {\n  int ab = a * b;\n  bool flag = false;\n  int i = 0;\n  while ( i * i <= ab ) {\n    int j = i;\n    while ( i * i + j * j <= ab ) {\n      int k = j;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = sqrt ( ab - ( i * i + j * j + k * k ) );\n        if ( floor ( l ) == ceil ( l ) && l >= k ) {\n          flag = true;\n          cout << \"i = \" << i << \"\\n\";\n          cout << \"j = \" << j << \"\\n\";\n          cout << \"k = \" << k << \"\\n\";\n          cout << \"l = \" << ( int ) l << \"\\n\";\n          cout << \"Product of \" << a << \" and \" << b << \" can be written as sum of squares\" << \" of i, j, k, l \\n\";\n          cout << ab + \" = \" << i << \"*\" << i << \" + \" << j << \"*\" << j << \" + \" << k << \"*\" << k << \" + \" << ( int ) l << \"*\" << ( int ) l << \"\\n\";\n        }\n        k += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  if ( flag == false ) {\n    cout << \"Solution doesn't exist!\\n\";\n    return;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void checkEulerFourSquareIdentity ( int a , int b ) {\n  int ab = a * b ;\n  boolean flag = false ;\n  int i = 0 ;\n  while ( i * i <= ab ) {\n    int j = i ;\n    while ( i * i + j * j <= ab ) {\n      int k = j ;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = Math . sqrt ( ab - ( i * i + j * j + k * k ) ) ;\n        if ( Math . floor ( l ) == Math . ceil ( l ) && l >= k ) {\n          flag = true ;\n          System . out . print ( \"i = \" + i + \"\\n\" ) ;\n          System . out . print ( \"j = \" + j + \"\\n\" ) ;\n          System . out . print ( \"k = \" + k + \"\\n\" ) ;\n          System . out . print ( \"l = \" + ( int ) l + \"\\n\" ) ;\n          System . out . print ( \"Product of \" + a + \" and \" + b + \" can be written as sum of squares\" + \" of i, j, k, l \\n\" ) ;\n          System . out . print ( ab + \" = \" + i + \"*\" + i + \" + \" + j + \"*\" + j + \" + \" + k + \"*\" + k + \" + \" + ( int ) l + \"*\" + ( int ) l + \"\\n\" ) ;\n        }\n        k += 1 ;\n      }\n      j += 1 ;\n    }\n    i += 1 ;\n  }\n  if ( flag == false ) {\n    System . out . println ( \"Solution doesn't exist!\" ) ;\n    return ;\n  }\n}", "target_program": " def checkEulerFourSquareIdentity ( a , b ) :\n    ab = a * b\n    flag = False\n    i = 0\n    while i * i <= ab :\n        j = i\n        while i * i + j * j <= ab :\n            k = j\n            while i * i + j * j + k * k <= ab :\n                l = ( ab - ( i * i + j * j + k * k ) ) ** ( 0.5 )\n                if l == int ( l ) and l >= k :\n                    flag = True\n                    print ( \"i = \" , i )\n                    print ( \"j = \" , j )\n                    print ( \"k = \" , k )\n                    print ( \"l = \" , l )\n                    print ( \"Product of\" , a , \"and\" , b , \"can be written as sum of squares of i, j, k, l\" )\n                    print ( ab , \" = \" , i , \"*\" , i , \"+\" , j , \"*\" , j , \"+\" , k , \"*\" , k , \"+\" , l , \"*\" , l )\n                k += 1\n            j += 1\n        i += 1\n    if flag == False :\n        print ( \"Solution doesn't exist!\" )\n        return"}
{"source": "java", "target": "cpp", "source_program": " public static void checkEulerFourSquareIdentity ( int a , int b ) {\n  int ab = a * b ;\n  boolean flag = false ;\n  int i = 0 ;\n  while ( i * i <= ab ) {\n    int j = i ;\n    while ( i * i + j * j <= ab ) {\n      int k = j ;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = Math . sqrt ( ab - ( i * i + j * j + k * k ) ) ;\n        if ( Math . floor ( l ) == Math . ceil ( l ) && l >= k ) {\n          flag = true ;\n          System . out . print ( \"i = \" + i + \"\\n\" ) ;\n          System . out . print ( \"j = \" + j + \"\\n\" ) ;\n          System . out . print ( \"k = \" + k + \"\\n\" ) ;\n          System . out . print ( \"l = \" + ( int ) l + \"\\n\" ) ;\n          System . out . print ( \"Product of \" + a + \" and \" + b + \" can be written as sum of squares\" + \" of i, j, k, l \\n\" ) ;\n          System . out . print ( ab + \" = \" + i + \"*\" + i + \" + \" + j + \"*\" + j + \" + \" + k + \"*\" + k + \" + \" + ( int ) l + \"*\" + ( int ) l + \"\\n\" ) ;\n        }\n        k += 1 ;\n      }\n      j += 1 ;\n    }\n    i += 1 ;\n  }\n  if ( flag == false ) {\n    System . out . println ( \"Solution doesn't exist!\" ) ;\n    return ;\n  }\n}", "target_program": " void checkEulerFourSquareIdentity ( int a, int b ) {\n  int ab = a * b;\n  bool flag = false;\n  int i = 0;\n  while ( i * i <= ab ) {\n    int j = i;\n    while ( i * i + j * j <= ab ) {\n      int k = j;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = sqrt ( ab - ( i * i + j * j + k * k ) );\n        if ( floor ( l ) == ceil ( l ) && l >= k ) {\n          flag = true;\n          cout << \"i = \" << i << \"\\n\";\n          cout << \"j = \" << j << \"\\n\";\n          cout << \"k = \" << k << \"\\n\";\n          cout << \"l = \" << ( int ) l << \"\\n\";\n          cout << \"Product of \" << a << \" and \" << b << \" can be written as sum of squares\" << \" of i, j, k, l \\n\";\n          cout << ab + \" = \" << i << \"*\" << i << \" + \" << j << \"*\" << j << \" + \" << k << \"*\" << k << \" + \" << ( int ) l << \"*\" << ( int ) l << \"\\n\";\n        }\n        k += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  if ( flag == false ) {\n    cout << \"Solution doesn't exist!\\n\";\n    return;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void checkEulerFourSquareIdentity ( int a, int b ) {\n  int ab = a * b;\n  bool flag = false;\n  int i = 0;\n  while ( i * i <= ab ) {\n    int j = i;\n    while ( i * i + j * j <= ab ) {\n      int k = j;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = sqrt ( ab - ( i * i + j * j + k * k ) );\n        if ( floor ( l ) == ceil ( l ) && l >= k ) {\n          flag = true;\n          cout << \"i = \" << i << \"\\n\";\n          cout << \"j = \" << j << \"\\n\";\n          cout << \"k = \" << k << \"\\n\";\n          cout << \"l = \" << ( int ) l << \"\\n\";\n          cout << \"Product of \" << a << \" and \" << b << \" can be written as sum of squares\" << \" of i, j, k, l \\n\";\n          cout << ab + \" = \" << i << \"*\" << i << \" + \" << j << \"*\" << j << \" + \" << k << \"*\" << k << \" + \" << ( int ) l << \"*\" << ( int ) l << \"\\n\";\n        }\n        k += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  if ( flag == false ) {\n    cout << \"Solution doesn't exist!\\n\";\n    return;\n  }\n}", "target_program": " public static void checkEulerFourSquareIdentity ( int a , int b ) {\n  int ab = a * b ;\n  boolean flag = false ;\n  int i = 0 ;\n  while ( i * i <= ab ) {\n    int j = i ;\n    while ( i * i + j * j <= ab ) {\n      int k = j ;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = Math . sqrt ( ab - ( i * i + j * j + k * k ) ) ;\n        if ( Math . floor ( l ) == Math . ceil ( l ) && l >= k ) {\n          flag = true ;\n          System . out . print ( \"i = \" + i + \"\\n\" ) ;\n          System . out . print ( \"j = \" + j + \"\\n\" ) ;\n          System . out . print ( \"k = \" + k + \"\\n\" ) ;\n          System . out . print ( \"l = \" + ( int ) l + \"\\n\" ) ;\n          System . out . print ( \"Product of \" + a + \" and \" + b + \" can be written as sum of squares\" + \" of i, j, k, l \\n\" ) ;\n          System . out . print ( ab + \" = \" + i + \"*\" + i + \" + \" + j + \"*\" + j + \" + \" + k + \"*\" + k + \" + \" + ( int ) l + \"*\" + ( int ) l + \"\\n\" ) ;\n        }\n        k += 1 ;\n      }\n      j += 1 ;\n    }\n    i += 1 ;\n  }\n  if ( flag == false ) {\n    System . out . println ( \"Solution doesn't exist!\" ) ;\n    return ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void checkEulerFourSquareIdentity ( int a, int b ) {\n  int ab = a * b;\n  bool flag = false;\n  int i = 0;\n  while ( i * i <= ab ) {\n    int j = i;\n    while ( i * i + j * j <= ab ) {\n      int k = j;\n      while ( i * i + j * j + k * k <= ab ) {\n        double l = sqrt ( ab - ( i * i + j * j + k * k ) );\n        if ( floor ( l ) == ceil ( l ) && l >= k ) {\n          flag = true;\n          cout << \"i = \" << i << \"\\n\";\n          cout << \"j = \" << j << \"\\n\";\n          cout << \"k = \" << k << \"\\n\";\n          cout << \"l = \" << ( int ) l << \"\\n\";\n          cout << \"Product of \" << a << \" and \" << b << \" can be written as sum of squares\" << \" of i, j, k, l \\n\";\n          cout << ab + \" = \" << i << \"*\" << i << \" + \" << j << \"*\" << j << \" + \" << k << \"*\" << k << \" + \" << ( int ) l << \"*\" << ( int ) l << \"\\n\";\n        }\n        k += 1;\n      }\n      j += 1;\n    }\n    i += 1;\n  }\n  if ( flag == false ) {\n    cout << \"Solution doesn't exist!\\n\";\n    return;\n  }\n}", "target_program": " def checkEulerFourSquareIdentity ( a , b ) :\n    ab = a * b\n    flag = False\n    i = 0\n    while i * i <= ab :\n        j = i\n        while i * i + j * j <= ab :\n            k = j\n            while i * i + j * j + k * k <= ab :\n                l = ( ab - ( i * i + j * j + k * k ) ) ** ( 0.5 )\n                if l == int ( l ) and l >= k :\n                    flag = True\n                    print ( \"i = \" , i )\n                    print ( \"j = \" , j )\n                    print ( \"k = \" , k )\n                    print ( \"l = \" , l )\n                    print ( \"Product of\" , a , \"and\" , b , \"can be written as sum of squares of i, j, k, l\" )\n                    print ( ab , \" = \" , i , \"*\" , i , \"+\" , j , \"*\" , j , \"+\" , k , \"*\" , k , \"+\" , l , \"*\" , l )\n                k += 1\n            j += 1\n        i += 1\n    if flag == False :\n        print ( \"Solution doesn't exist!\" )\n        return"}
{"source": "python", "target": "java", "source_program": " def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    for i in range ( n ) :\n        dp [ 0 ] [ i ] = 1\n    for l in range ( 1 , k ) :\n        for i in range ( l , n ) :\n            dp [ l ] [ i ] = 0\n            for j in range ( l - 1 , i ) :\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n    Sum = 0\n    for i in range ( k - 1 , n ) :\n        Sum += dp [ k - 1 ] [ i ]\n    return Sum", "target_program": " static int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 1 ;\n  }\n  for ( int l = 1 ;\n  l < k ;\n  l ++ ) {\n    for ( int i = l ;\n    i < n ;\n    i ++ ) {\n      dp [ l ] [ i ] = 0 ;\n      for ( int j = l - 1 ;\n      j < i ;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) {\n          dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;\n        }\n      }\n    }\n  }\n  for ( int i = k - 1 ;\n  i < n ;\n  i ++ ) {\n    sum += dp [ k - 1 ] [ i ] ;\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    for i in range ( n ) :\n        dp [ 0 ] [ i ] = 1\n    for l in range ( 1 , k ) :\n        for i in range ( l , n ) :\n            dp [ l ] [ i ] = 0\n            for j in range ( l - 1 , i ) :\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n    Sum = 0\n    for i in range ( k - 1 , n ) :\n        Sum += dp [ k - 1 ] [ i ]\n    return Sum", "target_program": " int numOfIncSubseqOfSizeK ( int arr [ ], int n, int k ) {\n  int dp [ k ] [ n ], sum = 0;\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int l = 1;\n  l < k;\n  l ++ ) {\n    for ( int i = l;\n    i < n;\n    i ++ ) {\n      dp [ l ] [ i ] = 0;\n      for ( int j = l - 1;\n      j < i;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ];\n      }\n    }\n  }\n  for ( int i = k - 1;\n  i < n;\n  i ++ ) sum += dp [ k - 1 ] [ i ];\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 1 ;\n  }\n  for ( int l = 1 ;\n  l < k ;\n  l ++ ) {\n    for ( int i = l ;\n    i < n ;\n    i ++ ) {\n      dp [ l ] [ i ] = 0 ;\n      for ( int j = l - 1 ;\n      j < i ;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) {\n          dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;\n        }\n      }\n    }\n  }\n  for ( int i = k - 1 ;\n  i < n ;\n  i ++ ) {\n    sum += dp [ k - 1 ] [ i ] ;\n  }\n  return sum ;\n}", "target_program": " def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    for i in range ( n ) :\n        dp [ 0 ] [ i ] = 1\n    for l in range ( 1 , k ) :\n        for i in range ( l , n ) :\n            dp [ l ] [ i ] = 0\n            for j in range ( l - 1 , i ) :\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n    Sum = 0\n    for i in range ( k - 1 , n ) :\n        Sum += dp [ k - 1 ] [ i ]\n    return Sum"}
{"source": "java", "target": "cpp", "source_program": " static int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 1 ;\n  }\n  for ( int l = 1 ;\n  l < k ;\n  l ++ ) {\n    for ( int i = l ;\n    i < n ;\n    i ++ ) {\n      dp [ l ] [ i ] = 0 ;\n      for ( int j = l - 1 ;\n      j < i ;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) {\n          dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;\n        }\n      }\n    }\n  }\n  for ( int i = k - 1 ;\n  i < n ;\n  i ++ ) {\n    sum += dp [ k - 1 ] [ i ] ;\n  }\n  return sum ;\n}", "target_program": " int numOfIncSubseqOfSizeK ( int arr [ ], int n, int k ) {\n  int dp [ k ] [ n ], sum = 0;\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int l = 1;\n  l < k;\n  l ++ ) {\n    for ( int i = l;\n    i < n;\n    i ++ ) {\n      dp [ l ] [ i ] = 0;\n      for ( int j = l - 1;\n      j < i;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ];\n      }\n    }\n  }\n  for ( int i = k - 1;\n  i < n;\n  i ++ ) sum += dp [ k - 1 ] [ i ];\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numOfIncSubseqOfSizeK ( int arr [ ], int n, int k ) {\n  int dp [ k ] [ n ], sum = 0;\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int l = 1;\n  l < k;\n  l ++ ) {\n    for ( int i = l;\n    i < n;\n    i ++ ) {\n      dp [ l ] [ i ] = 0;\n      for ( int j = l - 1;\n      j < i;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ];\n      }\n    }\n  }\n  for ( int i = k - 1;\n  i < n;\n  i ++ ) sum += dp [ k - 1 ] [ i ];\n  return sum;\n}", "target_program": " static int numOfIncSubseqOfSizeK ( int arr [ ] , int n , int k ) {\n  int dp [ ] [ ] = new int [ k ] [ n ] , sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    dp [ 0 ] [ i ] = 1 ;\n  }\n  for ( int l = 1 ;\n  l < k ;\n  l ++ ) {\n    for ( int i = l ;\n    i < n ;\n    i ++ ) {\n      dp [ l ] [ i ] = 0 ;\n      for ( int j = l - 1 ;\n      j < i ;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) {\n          dp [ l ] [ i ] += dp [ l - 1 ] [ j ] ;\n        }\n      }\n    }\n  }\n  for ( int i = k - 1 ;\n  i < n ;\n  i ++ ) {\n    sum += dp [ k - 1 ] [ i ] ;\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numOfIncSubseqOfSizeK ( int arr [ ], int n, int k ) {\n  int dp [ k ] [ n ], sum = 0;\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) dp [ 0 ] [ i ] = 1;\n  for ( int l = 1;\n  l < k;\n  l ++ ) {\n    for ( int i = l;\n    i < n;\n    i ++ ) {\n      dp [ l ] [ i ] = 0;\n      for ( int j = l - 1;\n      j < i;\n      j ++ ) {\n        if ( arr [ j ] < arr [ i ] ) dp [ l ] [ i ] += dp [ l - 1 ] [ j ];\n      }\n    }\n  }\n  for ( int i = k - 1;\n  i < n;\n  i ++ ) sum += dp [ k - 1 ] [ i ];\n  return sum;\n}", "target_program": " def numOfIncSubseqOfSizeK ( arr , n , k ) :\n    dp = [ [ 0 for i in range ( n ) ] for i in range ( k ) ]\n    for i in range ( n ) :\n        dp [ 0 ] [ i ] = 1\n    for l in range ( 1 , k ) :\n        for i in range ( l , n ) :\n            dp [ l ] [ i ] = 0\n            for j in range ( l - 1 , i ) :\n                if ( arr [ j ] < arr [ i ] ) :\n                    dp [ l ] [ i ] += dp [ l - 1 ] [ j ]\n    Sum = 0\n    for i in range ( k - 1 , n ) :\n        Sum += dp [ k - 1 ] [ i ]\n    return Sum"}
{"source": "python", "target": "java", "source_program": " def drawPattern ( N ) :\n    n = N ;\n    row = 1 ;\n    nst = 1 ;\n    nsp1 = n - 1 ;\n    nsp2 = - 1 ;\n    val1 = row ;\n    val2 = 1 ;\n    while ( row <= n ) :\n        csp1 = 1 ;\n        while ( csp1 <= nsp1 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp1 = csp1 + 1 ;\n        cst1 = 1 ;\n        while ( cst1 <= nst ) :\n            print ( val1 , end = \" \" ) ;\n            val1 = val1 - 1 ;\n            cst1 = cst1 + 1 ;\n        csp2 = 1 ;\n        while ( csp2 <= nsp2 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp2 = csp2 + 1 ;\n        if ( row != 1 and row != n ) :\n            cst2 = 1 ;\n            while ( cst2 <= nst ) :\n                print ( val2 , end = \" \" ) ;\n                val2 = val2 + 1 ;\n                cst2 = cst2 + 1 ;\n        print ( )\n        if ( row <= n // 2 ) :\n            nst = nst + 1 ;\n            nsp1 = nsp1 - 2 ;\n            nsp2 = nsp2 + 2 ;\n            val1 = row + 1 ;\n            val2 = 1 ;\n        else :\n            nst = nst - 1 ;\n            nsp1 = nsp1 + 2 ;\n            nsp2 = nsp2 - 2 ;\n            val1 = n - row ;\n            val2 = 1 ;\n        row = row + 1 ;", "target_program": " static void drawPattern ( int N ) {\n  int n = N ;\n  int row = 1 ;\n  int nst = 1 ;\n  int nsp1 = n - 1 ;\n  int nsp2 = - 1 ;\n  int val1 = row ;\n  int val2 = 1 ;\n  while ( row <= n ) {\n    int csp1 = 1 ;\n    while ( csp1 <= nsp1 ) {\n      System . out . print ( \"  \" ) ;\n      csp1 = csp1 + 1 ;\n    }\n    int cst1 = 1 ;\n    while ( cst1 <= nst ) {\n      System . out . print ( val1 + \" \" ) ;\n      val1 = val1 - 1 ;\n      cst1 = cst1 + 1 ;\n    }\n    int csp2 = 1 ;\n    while ( csp2 <= nsp2 ) {\n      System . out . print ( \"  \" ) ;\n      csp2 = csp2 + 1 ;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1 ;\n      while ( cst2 <= nst ) {\n        System . out . print ( val2 + \" \" ) ;\n        val2 = val2 + 1 ;\n        cst2 = cst2 + 1 ;\n      }\n    }\n    System . out . println ( ) ;\n    if ( row <= n / 2 ) {\n      nst = nst + 1 ;\n      nsp1 = nsp1 - 2 ;\n      nsp2 = nsp2 + 2 ;\n      val1 = row + 1 ;\n      val2 = 1 ;\n    }\n    else {\n      nst = nst - 1 ;\n      nsp1 = nsp1 + 2 ;\n      nsp2 = nsp2 - 2 ;\n      val1 = n - row ;\n      val2 = 1 ;\n    }\n    row = row + 1 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def drawPattern ( N ) :\n    n = N ;\n    row = 1 ;\n    nst = 1 ;\n    nsp1 = n - 1 ;\n    nsp2 = - 1 ;\n    val1 = row ;\n    val2 = 1 ;\n    while ( row <= n ) :\n        csp1 = 1 ;\n        while ( csp1 <= nsp1 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp1 = csp1 + 1 ;\n        cst1 = 1 ;\n        while ( cst1 <= nst ) :\n            print ( val1 , end = \" \" ) ;\n            val1 = val1 - 1 ;\n            cst1 = cst1 + 1 ;\n        csp2 = 1 ;\n        while ( csp2 <= nsp2 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp2 = csp2 + 1 ;\n        if ( row != 1 and row != n ) :\n            cst2 = 1 ;\n            while ( cst2 <= nst ) :\n                print ( val2 , end = \" \" ) ;\n                val2 = val2 + 1 ;\n                cst2 = cst2 + 1 ;\n        print ( )\n        if ( row <= n // 2 ) :\n            nst = nst + 1 ;\n            nsp1 = nsp1 - 2 ;\n            nsp2 = nsp2 + 2 ;\n            val1 = row + 1 ;\n            val2 = 1 ;\n        else :\n            nst = nst - 1 ;\n            nsp1 = nsp1 + 2 ;\n            nsp2 = nsp2 - 2 ;\n            val1 = n - row ;\n            val2 = 1 ;\n        row = row + 1 ;", "target_program": " void drawPattern ( int N ) {\n  int n = N;\n  int row = 1;\n  int nst = 1;\n  int nsp1 = n - 1;\n  int nsp2 = - 1;\n  int val1 = row;\n  int val2 = 1;\n  while ( row <= n ) {\n    int csp1 = 1;\n    while ( csp1 <= nsp1 ) {\n      cout << \" \" << \" \";\n      csp1 = csp1 + 1;\n    }\n    int cst1 = 1;\n    while ( cst1 <= nst ) {\n      cout << val1 << \" \";\n      val1 = val1 - 1;\n      cst1 = cst1 + 1;\n    }\n    int csp2 = 1;\n    while ( csp2 <= nsp2 ) {\n      cout << \" \" << \" \";\n      csp2 = csp2 + 1;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1;\n      while ( cst2 <= nst ) {\n        cout << val2 << \" \";\n        val2 = val2 + 1;\n        cst2 = cst2 + 1;\n      }\n    }\n    cout << endl;\n    if ( row <= n / 2 ) {\n      nst = nst + 1;\n      nsp1 = nsp1 - 2;\n      nsp2 = nsp2 + 2;\n      val1 = row + 1;\n      val2 = 1;\n    }\n    else {\n      nst = nst - 1;\n      nsp1 = nsp1 + 2;\n      nsp2 = nsp2 - 2;\n      val1 = n - row;\n      val2 = 1;\n    }\n    row = row + 1;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void drawPattern ( int N ) {\n  int n = N ;\n  int row = 1 ;\n  int nst = 1 ;\n  int nsp1 = n - 1 ;\n  int nsp2 = - 1 ;\n  int val1 = row ;\n  int val2 = 1 ;\n  while ( row <= n ) {\n    int csp1 = 1 ;\n    while ( csp1 <= nsp1 ) {\n      System . out . print ( \"  \" ) ;\n      csp1 = csp1 + 1 ;\n    }\n    int cst1 = 1 ;\n    while ( cst1 <= nst ) {\n      System . out . print ( val1 + \" \" ) ;\n      val1 = val1 - 1 ;\n      cst1 = cst1 + 1 ;\n    }\n    int csp2 = 1 ;\n    while ( csp2 <= nsp2 ) {\n      System . out . print ( \"  \" ) ;\n      csp2 = csp2 + 1 ;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1 ;\n      while ( cst2 <= nst ) {\n        System . out . print ( val2 + \" \" ) ;\n        val2 = val2 + 1 ;\n        cst2 = cst2 + 1 ;\n      }\n    }\n    System . out . println ( ) ;\n    if ( row <= n / 2 ) {\n      nst = nst + 1 ;\n      nsp1 = nsp1 - 2 ;\n      nsp2 = nsp2 + 2 ;\n      val1 = row + 1 ;\n      val2 = 1 ;\n    }\n    else {\n      nst = nst - 1 ;\n      nsp1 = nsp1 + 2 ;\n      nsp2 = nsp2 - 2 ;\n      val1 = n - row ;\n      val2 = 1 ;\n    }\n    row = row + 1 ;\n  }\n}", "target_program": " def drawPattern ( N ) :\n    n = N ;\n    row = 1 ;\n    nst = 1 ;\n    nsp1 = n - 1 ;\n    nsp2 = - 1 ;\n    val1 = row ;\n    val2 = 1 ;\n    while ( row <= n ) :\n        csp1 = 1 ;\n        while ( csp1 <= nsp1 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp1 = csp1 + 1 ;\n        cst1 = 1 ;\n        while ( cst1 <= nst ) :\n            print ( val1 , end = \" \" ) ;\n            val1 = val1 - 1 ;\n            cst1 = cst1 + 1 ;\n        csp2 = 1 ;\n        while ( csp2 <= nsp2 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp2 = csp2 + 1 ;\n        if ( row != 1 and row != n ) :\n            cst2 = 1 ;\n            while ( cst2 <= nst ) :\n                print ( val2 , end = \" \" ) ;\n                val2 = val2 + 1 ;\n                cst2 = cst2 + 1 ;\n        print ( )\n        if ( row <= n // 2 ) :\n            nst = nst + 1 ;\n            nsp1 = nsp1 - 2 ;\n            nsp2 = nsp2 + 2 ;\n            val1 = row + 1 ;\n            val2 = 1 ;\n        else :\n            nst = nst - 1 ;\n            nsp1 = nsp1 + 2 ;\n            nsp2 = nsp2 - 2 ;\n            val1 = n - row ;\n            val2 = 1 ;\n        row = row + 1 ;"}
{"source": "java", "target": "cpp", "source_program": " static void drawPattern ( int N ) {\n  int n = N ;\n  int row = 1 ;\n  int nst = 1 ;\n  int nsp1 = n - 1 ;\n  int nsp2 = - 1 ;\n  int val1 = row ;\n  int val2 = 1 ;\n  while ( row <= n ) {\n    int csp1 = 1 ;\n    while ( csp1 <= nsp1 ) {\n      System . out . print ( \"  \" ) ;\n      csp1 = csp1 + 1 ;\n    }\n    int cst1 = 1 ;\n    while ( cst1 <= nst ) {\n      System . out . print ( val1 + \" \" ) ;\n      val1 = val1 - 1 ;\n      cst1 = cst1 + 1 ;\n    }\n    int csp2 = 1 ;\n    while ( csp2 <= nsp2 ) {\n      System . out . print ( \"  \" ) ;\n      csp2 = csp2 + 1 ;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1 ;\n      while ( cst2 <= nst ) {\n        System . out . print ( val2 + \" \" ) ;\n        val2 = val2 + 1 ;\n        cst2 = cst2 + 1 ;\n      }\n    }\n    System . out . println ( ) ;\n    if ( row <= n / 2 ) {\n      nst = nst + 1 ;\n      nsp1 = nsp1 - 2 ;\n      nsp2 = nsp2 + 2 ;\n      val1 = row + 1 ;\n      val2 = 1 ;\n    }\n    else {\n      nst = nst - 1 ;\n      nsp1 = nsp1 + 2 ;\n      nsp2 = nsp2 - 2 ;\n      val1 = n - row ;\n      val2 = 1 ;\n    }\n    row = row + 1 ;\n  }\n}", "target_program": " void drawPattern ( int N ) {\n  int n = N;\n  int row = 1;\n  int nst = 1;\n  int nsp1 = n - 1;\n  int nsp2 = - 1;\n  int val1 = row;\n  int val2 = 1;\n  while ( row <= n ) {\n    int csp1 = 1;\n    while ( csp1 <= nsp1 ) {\n      cout << \" \" << \" \";\n      csp1 = csp1 + 1;\n    }\n    int cst1 = 1;\n    while ( cst1 <= nst ) {\n      cout << val1 << \" \";\n      val1 = val1 - 1;\n      cst1 = cst1 + 1;\n    }\n    int csp2 = 1;\n    while ( csp2 <= nsp2 ) {\n      cout << \" \" << \" \";\n      csp2 = csp2 + 1;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1;\n      while ( cst2 <= nst ) {\n        cout << val2 << \" \";\n        val2 = val2 + 1;\n        cst2 = cst2 + 1;\n      }\n    }\n    cout << endl;\n    if ( row <= n / 2 ) {\n      nst = nst + 1;\n      nsp1 = nsp1 - 2;\n      nsp2 = nsp2 + 2;\n      val1 = row + 1;\n      val2 = 1;\n    }\n    else {\n      nst = nst - 1;\n      nsp1 = nsp1 + 2;\n      nsp2 = nsp2 - 2;\n      val1 = n - row;\n      val2 = 1;\n    }\n    row = row + 1;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void drawPattern ( int N ) {\n  int n = N;\n  int row = 1;\n  int nst = 1;\n  int nsp1 = n - 1;\n  int nsp2 = - 1;\n  int val1 = row;\n  int val2 = 1;\n  while ( row <= n ) {\n    int csp1 = 1;\n    while ( csp1 <= nsp1 ) {\n      cout << \" \" << \" \";\n      csp1 = csp1 + 1;\n    }\n    int cst1 = 1;\n    while ( cst1 <= nst ) {\n      cout << val1 << \" \";\n      val1 = val1 - 1;\n      cst1 = cst1 + 1;\n    }\n    int csp2 = 1;\n    while ( csp2 <= nsp2 ) {\n      cout << \" \" << \" \";\n      csp2 = csp2 + 1;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1;\n      while ( cst2 <= nst ) {\n        cout << val2 << \" \";\n        val2 = val2 + 1;\n        cst2 = cst2 + 1;\n      }\n    }\n    cout << endl;\n    if ( row <= n / 2 ) {\n      nst = nst + 1;\n      nsp1 = nsp1 - 2;\n      nsp2 = nsp2 + 2;\n      val1 = row + 1;\n      val2 = 1;\n    }\n    else {\n      nst = nst - 1;\n      nsp1 = nsp1 + 2;\n      nsp2 = nsp2 - 2;\n      val1 = n - row;\n      val2 = 1;\n    }\n    row = row + 1;\n  }\n}", "target_program": " static void drawPattern ( int N ) {\n  int n = N ;\n  int row = 1 ;\n  int nst = 1 ;\n  int nsp1 = n - 1 ;\n  int nsp2 = - 1 ;\n  int val1 = row ;\n  int val2 = 1 ;\n  while ( row <= n ) {\n    int csp1 = 1 ;\n    while ( csp1 <= nsp1 ) {\n      System . out . print ( \"  \" ) ;\n      csp1 = csp1 + 1 ;\n    }\n    int cst1 = 1 ;\n    while ( cst1 <= nst ) {\n      System . out . print ( val1 + \" \" ) ;\n      val1 = val1 - 1 ;\n      cst1 = cst1 + 1 ;\n    }\n    int csp2 = 1 ;\n    while ( csp2 <= nsp2 ) {\n      System . out . print ( \"  \" ) ;\n      csp2 = csp2 + 1 ;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1 ;\n      while ( cst2 <= nst ) {\n        System . out . print ( val2 + \" \" ) ;\n        val2 = val2 + 1 ;\n        cst2 = cst2 + 1 ;\n      }\n    }\n    System . out . println ( ) ;\n    if ( row <= n / 2 ) {\n      nst = nst + 1 ;\n      nsp1 = nsp1 - 2 ;\n      nsp2 = nsp2 + 2 ;\n      val1 = row + 1 ;\n      val2 = 1 ;\n    }\n    else {\n      nst = nst - 1 ;\n      nsp1 = nsp1 + 2 ;\n      nsp2 = nsp2 - 2 ;\n      val1 = n - row ;\n      val2 = 1 ;\n    }\n    row = row + 1 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void drawPattern ( int N ) {\n  int n = N;\n  int row = 1;\n  int nst = 1;\n  int nsp1 = n - 1;\n  int nsp2 = - 1;\n  int val1 = row;\n  int val2 = 1;\n  while ( row <= n ) {\n    int csp1 = 1;\n    while ( csp1 <= nsp1 ) {\n      cout << \" \" << \" \";\n      csp1 = csp1 + 1;\n    }\n    int cst1 = 1;\n    while ( cst1 <= nst ) {\n      cout << val1 << \" \";\n      val1 = val1 - 1;\n      cst1 = cst1 + 1;\n    }\n    int csp2 = 1;\n    while ( csp2 <= nsp2 ) {\n      cout << \" \" << \" \";\n      csp2 = csp2 + 1;\n    }\n    if ( row != 1 && row != n ) {\n      int cst2 = 1;\n      while ( cst2 <= nst ) {\n        cout << val2 << \" \";\n        val2 = val2 + 1;\n        cst2 = cst2 + 1;\n      }\n    }\n    cout << endl;\n    if ( row <= n / 2 ) {\n      nst = nst + 1;\n      nsp1 = nsp1 - 2;\n      nsp2 = nsp2 + 2;\n      val1 = row + 1;\n      val2 = 1;\n    }\n    else {\n      nst = nst - 1;\n      nsp1 = nsp1 + 2;\n      nsp2 = nsp2 - 2;\n      val1 = n - row;\n      val2 = 1;\n    }\n    row = row + 1;\n  }\n}", "target_program": " def drawPattern ( N ) :\n    n = N ;\n    row = 1 ;\n    nst = 1 ;\n    nsp1 = n - 1 ;\n    nsp2 = - 1 ;\n    val1 = row ;\n    val2 = 1 ;\n    while ( row <= n ) :\n        csp1 = 1 ;\n        while ( csp1 <= nsp1 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp1 = csp1 + 1 ;\n        cst1 = 1 ;\n        while ( cst1 <= nst ) :\n            print ( val1 , end = \" \" ) ;\n            val1 = val1 - 1 ;\n            cst1 = cst1 + 1 ;\n        csp2 = 1 ;\n        while ( csp2 <= nsp2 ) :\n            print ( \" \" , end = \" \" ) ;\n            csp2 = csp2 + 1 ;\n        if ( row != 1 and row != n ) :\n            cst2 = 1 ;\n            while ( cst2 <= nst ) :\n                print ( val2 , end = \" \" ) ;\n                val2 = val2 + 1 ;\n                cst2 = cst2 + 1 ;\n        print ( )\n        if ( row <= n // 2 ) :\n            nst = nst + 1 ;\n            nsp1 = nsp1 - 2 ;\n            nsp2 = nsp2 + 2 ;\n            val1 = row + 1 ;\n            val2 = 1 ;\n        else :\n            nst = nst - 1 ;\n            nsp1 = nsp1 + 2 ;\n            nsp2 = nsp2 - 2 ;\n            val1 = n - row ;\n            val2 = 1 ;\n        row = row + 1 ;"}
{"source": "python", "target": "java", "source_program": " def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    for i in arr :\n        if ( i < 0 ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n    for i in arr :\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n    return - 1", "target_program": " static int findInteger ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hash = new HashMap < > ( ) ;\n  int maximum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) - 1 ) ;\n    else hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( hash . get ( arr [ i ] ) > 0 ) return arr [ i ] ;\n  return - 1 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    for i in arr :\n        if ( i < 0 ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n    for i in arr :\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n    return - 1", "target_program": " int findInteger ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  int maximum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash [ abs ( arr [ i ] ) ] -= 1;\n    else hash [ arr [ i ] ] += 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash [ arr [ i ] ] != 0 ) return arr [ i ];\n  return - 1;\n}"}
{"source": "java", "target": "python", "source_program": " static int findInteger ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hash = new HashMap < > ( ) ;\n  int maximum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) - 1 ) ;\n    else hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( hash . get ( arr [ i ] ) > 0 ) return arr [ i ] ;\n  return - 1 ;\n}", "target_program": " def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    for i in arr :\n        if ( i < 0 ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n    for i in arr :\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n    return - 1"}
{"source": "java", "target": "cpp", "source_program": " static int findInteger ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hash = new HashMap < > ( ) ;\n  int maximum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) - 1 ) ;\n    else hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( hash . get ( arr [ i ] ) > 0 ) return arr [ i ] ;\n  return - 1 ;\n}", "target_program": " int findInteger ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  int maximum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash [ abs ( arr [ i ] ) ] -= 1;\n    else hash [ arr [ i ] ] += 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash [ arr [ i ] ] != 0 ) return arr [ i ];\n  return - 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findInteger ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  int maximum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash [ abs ( arr [ i ] ) ] -= 1;\n    else hash [ arr [ i ] ] += 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash [ arr [ i ] ] != 0 ) return arr [ i ];\n  return - 1;\n}", "target_program": " static int findInteger ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > hash = new HashMap < > ( ) ;\n  int maximum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) - 1 ) ;\n    else hash . put ( Math . abs ( arr [ i ] ) , ( hash . get ( Math . abs ( arr [ i ] ) ) == null ? 0 : hash . get ( Math . abs ( arr [ i ] ) ) ) + 1 ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( hash . get ( arr [ i ] ) > 0 ) return arr [ i ] ;\n  return - 1 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findInteger ( int arr [ ], int n ) {\n  unordered_map < int, int > hash;\n  int maximum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] < 0 ) hash [ abs ( arr [ i ] ) ] -= 1;\n    else hash [ arr [ i ] ] += 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( hash [ arr [ i ] ] != 0 ) return arr [ i ];\n  return - 1;\n}", "target_program": " def findInteger ( arr , n ) :\n    hash = dict ( )\n    maximum = 0\n    for i in arr :\n        if ( i < 0 ) :\n            if abs ( i ) not in hash.keys ( ) :\n                hash [ abs ( i ) ] = - 1\n            else :\n                hash [ abs ( i ) ] -= 1\n        else :\n            hash [ i ] = hash.get ( i , 0 ) + 1\n    for i in arr :\n        if i in hash.keys ( ) and hash [ i ] > 0 :\n            return i\n    return - 1"}
{"source": "python", "target": "java", "source_program": " def psuedoBinary ( n ) :\n    while ( n > 0 ) :\n        temp = n ;\n        m = 0 ;\n        p = 1 ;\n        while ( temp ) :\n            rem = temp % 10 ;\n            temp = int ( temp / 10 ) ;\n            if ( rem != 0 ) :\n                m += p ;\n            p *= 10 ;\n        print ( m , end = \" \" ) ;\n        n = n - m ;", "target_program": " public static void psuedoBinary ( int n ) {\n  while ( n != 0 ) {\n    int temp = n , m = 0 , p = 1 ;\n    while ( temp != 0 ) {\n      int rem = temp % 10 ;\n      temp = temp / 10 ;\n      if ( rem != 0 ) m += p ;\n      p *= 10 ;\n    }\n    System . out . print ( m + \" \" ) ;\n    n = n - m ;\n  }\n  System . out . println ( \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def psuedoBinary ( n ) :\n    while ( n > 0 ) :\n        temp = n ;\n        m = 0 ;\n        p = 1 ;\n        while ( temp ) :\n            rem = temp % 10 ;\n            temp = int ( temp / 10 ) ;\n            if ( rem != 0 ) :\n                m += p ;\n            p *= 10 ;\n        print ( m , end = \" \" ) ;\n        n = n - m ;", "target_program": " void psuedoBinary ( int n ) {\n  while ( n > 0 ) {\n    int temp = n, m = 0, p = 1;\n    while ( temp ) {\n      int rem = temp % 10;\n      temp = temp / 10;\n      if ( rem != 0 ) m += p;\n      p *= 10;\n    }\n    cout << m << \" \";\n    n = n - m;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void psuedoBinary ( int n ) {\n  while ( n != 0 ) {\n    int temp = n , m = 0 , p = 1 ;\n    while ( temp != 0 ) {\n      int rem = temp % 10 ;\n      temp = temp / 10 ;\n      if ( rem != 0 ) m += p ;\n      p *= 10 ;\n    }\n    System . out . print ( m + \" \" ) ;\n    n = n - m ;\n  }\n  System . out . println ( \" \" ) ;\n}", "target_program": " def psuedoBinary ( n ) :\n    while ( n > 0 ) :\n        temp = n ;\n        m = 0 ;\n        p = 1 ;\n        while ( temp ) :\n            rem = temp % 10 ;\n            temp = int ( temp / 10 ) ;\n            if ( rem != 0 ) :\n                m += p ;\n            p *= 10 ;\n        print ( m , end = \" \" ) ;\n        n = n - m ;"}
{"source": "java", "target": "cpp", "source_program": " public static void psuedoBinary ( int n ) {\n  while ( n != 0 ) {\n    int temp = n , m = 0 , p = 1 ;\n    while ( temp != 0 ) {\n      int rem = temp % 10 ;\n      temp = temp / 10 ;\n      if ( rem != 0 ) m += p ;\n      p *= 10 ;\n    }\n    System . out . print ( m + \" \" ) ;\n    n = n - m ;\n  }\n  System . out . println ( \" \" ) ;\n}", "target_program": " void psuedoBinary ( int n ) {\n  while ( n > 0 ) {\n    int temp = n, m = 0, p = 1;\n    while ( temp ) {\n      int rem = temp % 10;\n      temp = temp / 10;\n      if ( rem != 0 ) m += p;\n      p *= 10;\n    }\n    cout << m << \" \";\n    n = n - m;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void psuedoBinary ( int n ) {\n  while ( n > 0 ) {\n    int temp = n, m = 0, p = 1;\n    while ( temp ) {\n      int rem = temp % 10;\n      temp = temp / 10;\n      if ( rem != 0 ) m += p;\n      p *= 10;\n    }\n    cout << m << \" \";\n    n = n - m;\n  }\n}", "target_program": " public static void psuedoBinary ( int n ) {\n  while ( n != 0 ) {\n    int temp = n , m = 0 , p = 1 ;\n    while ( temp != 0 ) {\n      int rem = temp % 10 ;\n      temp = temp / 10 ;\n      if ( rem != 0 ) m += p ;\n      p *= 10 ;\n    }\n    System . out . print ( m + \" \" ) ;\n    n = n - m ;\n  }\n  System . out . println ( \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void psuedoBinary ( int n ) {\n  while ( n > 0 ) {\n    int temp = n, m = 0, p = 1;\n    while ( temp ) {\n      int rem = temp % 10;\n      temp = temp / 10;\n      if ( rem != 0 ) m += p;\n      p *= 10;\n    }\n    cout << m << \" \";\n    n = n - m;\n  }\n}", "target_program": " def psuedoBinary ( n ) :\n    while ( n > 0 ) :\n        temp = n ;\n        m = 0 ;\n        p = 1 ;\n        while ( temp ) :\n            rem = temp % 10 ;\n            temp = int ( temp / 10 ) ;\n            if ( rem != 0 ) :\n                m += p ;\n            p *= 10 ;\n        print ( m , end = \" \" ) ;\n        n = n - m ;"}
{"source": "python", "target": "java", "source_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( arr2 [ i ] == arr1 [ j ] ) :\n                break\n        if ( j == m ) :\n            return 0\n    return 1", "target_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( arr2 [ i ] == arr1 [ j ] ) break ;\n    if ( j == m ) return false ;\n  }\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( arr2 [ i ] == arr1 [ j ] ) :\n                break\n        if ( j == m ) :\n            return 0\n    return 1", "target_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0;\n  int j = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    for ( j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr2 [ i ] == arr1 [ j ] ) break;\n    }\n    if ( j == m ) return 0;\n  }\n  return 1;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( arr2 [ i ] == arr1 [ j ] ) break ;\n    if ( j == m ) return false ;\n  }\n  return true ;\n}", "target_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( arr2 [ i ] == arr1 [ j ] ) :\n                break\n        if ( j == m ) :\n            return 0\n    return 1"}
{"source": "java", "target": "cpp", "source_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( arr2 [ i ] == arr1 [ j ] ) break ;\n    if ( j == m ) return false ;\n  }\n  return true ;\n}", "target_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0;\n  int j = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    for ( j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr2 [ i ] == arr1 [ j ] ) break;\n    }\n    if ( j == m ) return 0;\n  }\n  return 1;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0;\n  int j = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    for ( j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr2 [ i ] == arr1 [ j ] ) break;\n    }\n    if ( j == m ) return 0;\n  }\n  return 1;\n}", "target_program": " static boolean isSubset ( int arr1 [ ] , int arr2 [ ] , int m , int n ) {\n  int i = 0 ;\n  int j = 0 ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( j = 0 ;\n    j < m ;\n    j ++ ) if ( arr2 [ i ] == arr1 [ j ] ) break ;\n    if ( j == m ) return false ;\n  }\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isSubset ( int arr1 [ ], int arr2 [ ], int m, int n ) {\n  int i = 0;\n  int j = 0;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    for ( j = 0;\n    j < m;\n    j ++ ) {\n      if ( arr2 [ i ] == arr1 [ j ] ) break;\n    }\n    if ( j == m ) return 0;\n  }\n  return 1;\n}", "target_program": " def isSubset ( arr1 , arr2 , m , n ) :\n    i = 0\n    j = 0\n    for i in range ( n ) :\n        for j in range ( m ) :\n            if ( arr2 [ i ] == arr1 [ j ] ) :\n                break\n        if ( j == m ) :\n            return 0\n    return 1"}
{"source": "python", "target": "java", "source_program": " def pairInSortedRotated ( arr , n , x ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            break ;\n    l = ( i + 1 ) % n\n    r = i\n    while ( l != r ) :\n        if ( arr [ l ] + arr [ r ] == x ) :\n            return True ;\n        if ( arr [ l ] + arr [ r ] < x ) :\n            l = ( l + 1 ) % n ;\n        else :\n            r = ( n + r - 1 ) % n ;\n    return False ;", "target_program": " static boolean pairInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true ;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def pairInSortedRotated ( arr , n , x ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            break ;\n    l = ( i + 1 ) % n\n    r = i\n    while ( l != r ) :\n        if ( arr [ l ] + arr [ r ] == x ) :\n            return True ;\n        if ( arr [ l ] + arr [ r ] < x ) :\n            l = ( l + 1 ) % n ;\n        else :\n            r = ( n + r - 1 ) % n ;\n    return False ;", "target_program": " bool pairInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean pairInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true ;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return false ;\n}", "target_program": " def pairInSortedRotated ( arr , n , x ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            break ;\n    l = ( i + 1 ) % n\n    r = i\n    while ( l != r ) :\n        if ( arr [ l ] + arr [ r ] == x ) :\n            return True ;\n        if ( arr [ l ] + arr [ r ] < x ) :\n            l = ( l + 1 ) % n ;\n        else :\n            r = ( n + r - 1 ) % n ;\n    return False ;"}
{"source": "java", "target": "cpp", "source_program": " static boolean pairInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true ;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return false ;\n}", "target_program": " bool pairInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool pairInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return false;\n}", "target_program": " static boolean pairInSortedRotated ( int arr [ ] , int n , int x ) {\n  int i ;\n  for ( i = 0 ;\n  i < n - 1 ;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break ;\n  int l = ( i + 1 ) % n ;\n  int r = i ;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true ;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n ;\n    else r = ( n + r - 1 ) % n ;\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool pairInSortedRotated ( int arr [ ], int n, int x ) {\n  int i;\n  for ( i = 0;\n  i < n - 1;\n  i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) break;\n  int l = ( i + 1 ) % n;\n  int r = i;\n  while ( l != r ) {\n    if ( arr [ l ] + arr [ r ] == x ) return true;\n    if ( arr [ l ] + arr [ r ] < x ) l = ( l + 1 ) % n;\n    else r = ( n + r - 1 ) % n;\n  }\n  return false;\n}", "target_program": " def pairInSortedRotated ( arr , n , x ) :\n    for i in range ( 0 , n - 1 ) :\n        if ( arr [ i ] > arr [ i + 1 ] ) :\n            break ;\n    l = ( i + 1 ) % n\n    r = i\n    while ( l != r ) :\n        if ( arr [ l ] + arr [ r ] == x ) :\n            return True ;\n        if ( arr [ l ] + arr [ r ] < x ) :\n            l = ( l + 1 ) % n ;\n        else :\n            r = ( n + r - 1 ) % n ;\n    return False ;"}
{"source": "python", "target": "java", "source_program": " def getRemainder ( num , divisor ) :\n    if ( divisor == 0 ) :\n        return False\n    if ( divisor < 0 ) :\n        divisor = - divisor\n    if ( num < 0 ) :\n        num = - num\n    i = 1\n    product = 0\n    while ( product <= num ) :\n        product = divisor * i\n        i += 1\n    return num - ( product - divisor )", "target_program": " static int getRemainder ( int num , int divisor ) {\n  if ( divisor == 0 ) {\n    System . out . println ( \"Error: divisor \" + \"can't be zero \\n\" ) ;\n    return - 1 ;\n  }\n  if ( divisor < 0 ) divisor = - divisor ;\n  if ( num < 0 ) num = - num ;\n  int i = 1 ;\n  int product = 0 ;\n  while ( product <= num ) {\n    product = divisor * i ;\n    i ++ ;\n  }\n  return num - ( product - divisor ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getRemainder ( num , divisor ) :\n    if ( divisor == 0 ) :\n        return False\n    if ( divisor < 0 ) :\n        divisor = - divisor\n    if ( num < 0 ) :\n        num = - num\n    i = 1\n    product = 0\n    while ( product <= num ) :\n        product = divisor * i\n        i += 1\n    return num - ( product - divisor )", "target_program": " int getRemainder ( int num, int divisor ) {\n  if ( divisor == 0 ) {\n    cout << \"Error: divisor can't be zero \\n\";\n    return - 1;\n  }\n  if ( divisor < 0 ) divisor = - divisor;\n  if ( num < 0 ) num = - num;\n  int i = 1;\n  int product = 0;\n  while ( product <= num ) {\n    product = divisor * i;\n    i ++;\n  }\n  return num - ( product - divisor );\n}"}
{"source": "java", "target": "python", "source_program": " static int getRemainder ( int num , int divisor ) {\n  if ( divisor == 0 ) {\n    System . out . println ( \"Error: divisor \" + \"can't be zero \\n\" ) ;\n    return - 1 ;\n  }\n  if ( divisor < 0 ) divisor = - divisor ;\n  if ( num < 0 ) num = - num ;\n  int i = 1 ;\n  int product = 0 ;\n  while ( product <= num ) {\n    product = divisor * i ;\n    i ++ ;\n  }\n  return num - ( product - divisor ) ;\n}", "target_program": " def getRemainder ( num , divisor ) :\n    if ( divisor == 0 ) :\n        return False\n    if ( divisor < 0 ) :\n        divisor = - divisor\n    if ( num < 0 ) :\n        num = - num\n    i = 1\n    product = 0\n    while ( product <= num ) :\n        product = divisor * i\n        i += 1\n    return num - ( product - divisor )"}
{"source": "java", "target": "cpp", "source_program": " static int getRemainder ( int num , int divisor ) {\n  if ( divisor == 0 ) {\n    System . out . println ( \"Error: divisor \" + \"can't be zero \\n\" ) ;\n    return - 1 ;\n  }\n  if ( divisor < 0 ) divisor = - divisor ;\n  if ( num < 0 ) num = - num ;\n  int i = 1 ;\n  int product = 0 ;\n  while ( product <= num ) {\n    product = divisor * i ;\n    i ++ ;\n  }\n  return num - ( product - divisor ) ;\n}", "target_program": " int getRemainder ( int num, int divisor ) {\n  if ( divisor == 0 ) {\n    cout << \"Error: divisor can't be zero \\n\";\n    return - 1;\n  }\n  if ( divisor < 0 ) divisor = - divisor;\n  if ( num < 0 ) num = - num;\n  int i = 1;\n  int product = 0;\n  while ( product <= num ) {\n    product = divisor * i;\n    i ++;\n  }\n  return num - ( product - divisor );\n}"}
{"source": "cpp", "target": "java", "source_program": " int getRemainder ( int num, int divisor ) {\n  if ( divisor == 0 ) {\n    cout << \"Error: divisor can't be zero \\n\";\n    return - 1;\n  }\n  if ( divisor < 0 ) divisor = - divisor;\n  if ( num < 0 ) num = - num;\n  int i = 1;\n  int product = 0;\n  while ( product <= num ) {\n    product = divisor * i;\n    i ++;\n  }\n  return num - ( product - divisor );\n}", "target_program": " static int getRemainder ( int num , int divisor ) {\n  if ( divisor == 0 ) {\n    System . out . println ( \"Error: divisor \" + \"can't be zero \\n\" ) ;\n    return - 1 ;\n  }\n  if ( divisor < 0 ) divisor = - divisor ;\n  if ( num < 0 ) num = - num ;\n  int i = 1 ;\n  int product = 0 ;\n  while ( product <= num ) {\n    product = divisor * i ;\n    i ++ ;\n  }\n  return num - ( product - divisor ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getRemainder ( int num, int divisor ) {\n  if ( divisor == 0 ) {\n    cout << \"Error: divisor can't be zero \\n\";\n    return - 1;\n  }\n  if ( divisor < 0 ) divisor = - divisor;\n  if ( num < 0 ) num = - num;\n  int i = 1;\n  int product = 0;\n  while ( product <= num ) {\n    product = divisor * i;\n    i ++;\n  }\n  return num - ( product - divisor );\n}", "target_program": " def getRemainder ( num , divisor ) :\n    if ( divisor == 0 ) :\n        return False\n    if ( divisor < 0 ) :\n        divisor = - divisor\n    if ( num < 0 ) :\n        num = - num\n    i = 1\n    product = 0\n    while ( product <= num ) :\n        product = divisor * i\n        i += 1\n    return num - ( product - divisor )"}
{"source": "python", "target": "java", "source_program": " def gnomeSort ( arr , n ) :\n    index = 0\n    while index < n :\n        if index == 0 :\n            index = index + 1\n        if arr [ index ] >= arr [ index - 1 ] :\n            index = index + 1\n        else :\n            arr [ index ] , arr [ index - 1 ] = arr [ index - 1 ] , arr [ index ]\n            index = index - 1\n    return arr", "target_program": " static void gnomeSort ( int arr [ ] , int n ) {\n  int index = 0 ;\n  while ( index < n ) {\n    if ( index == 0 ) index ++ ;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;\n    else {\n      int temp = 0 ;\n      temp = arr [ index ] ;\n      arr [ index ] = arr [ index - 1 ] ;\n      arr [ index - 1 ] = temp ;\n      index -- ;\n    }\n  }\n  return ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def gnomeSort ( arr , n ) :\n    index = 0\n    while index < n :\n        if index == 0 :\n            index = index + 1\n        if arr [ index ] >= arr [ index - 1 ] :\n            index = index + 1\n        else :\n            arr [ index ] , arr [ index - 1 ] = arr [ index - 1 ] , arr [ index ]\n            index = index - 1\n    return arr", "target_program": " void gnomeSort ( int arr [ ], int n ) {\n  int index = 0;\n  while ( index < n ) {\n    if ( index == 0 ) index ++;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++;\n    else {\n      swap ( arr [ index ], arr [ index - 1 ] );\n      index --;\n    }\n  }\n  return;\n}"}
{"source": "java", "target": "python", "source_program": " static void gnomeSort ( int arr [ ] , int n ) {\n  int index = 0 ;\n  while ( index < n ) {\n    if ( index == 0 ) index ++ ;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;\n    else {\n      int temp = 0 ;\n      temp = arr [ index ] ;\n      arr [ index ] = arr [ index - 1 ] ;\n      arr [ index - 1 ] = temp ;\n      index -- ;\n    }\n  }\n  return ;\n}", "target_program": " def gnomeSort ( arr , n ) :\n    index = 0\n    while index < n :\n        if index == 0 :\n            index = index + 1\n        if arr [ index ] >= arr [ index - 1 ] :\n            index = index + 1\n        else :\n            arr [ index ] , arr [ index - 1 ] = arr [ index - 1 ] , arr [ index ]\n            index = index - 1\n    return arr"}
{"source": "java", "target": "cpp", "source_program": " static void gnomeSort ( int arr [ ] , int n ) {\n  int index = 0 ;\n  while ( index < n ) {\n    if ( index == 0 ) index ++ ;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;\n    else {\n      int temp = 0 ;\n      temp = arr [ index ] ;\n      arr [ index ] = arr [ index - 1 ] ;\n      arr [ index - 1 ] = temp ;\n      index -- ;\n    }\n  }\n  return ;\n}", "target_program": " void gnomeSort ( int arr [ ], int n ) {\n  int index = 0;\n  while ( index < n ) {\n    if ( index == 0 ) index ++;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++;\n    else {\n      swap ( arr [ index ], arr [ index - 1 ] );\n      index --;\n    }\n  }\n  return;\n}"}
{"source": "cpp", "target": "java", "source_program": " void gnomeSort ( int arr [ ], int n ) {\n  int index = 0;\n  while ( index < n ) {\n    if ( index == 0 ) index ++;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++;\n    else {\n      swap ( arr [ index ], arr [ index - 1 ] );\n      index --;\n    }\n  }\n  return;\n}", "target_program": " static void gnomeSort ( int arr [ ] , int n ) {\n  int index = 0 ;\n  while ( index < n ) {\n    if ( index == 0 ) index ++ ;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++ ;\n    else {\n      int temp = 0 ;\n      temp = arr [ index ] ;\n      arr [ index ] = arr [ index - 1 ] ;\n      arr [ index - 1 ] = temp ;\n      index -- ;\n    }\n  }\n  return ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void gnomeSort ( int arr [ ], int n ) {\n  int index = 0;\n  while ( index < n ) {\n    if ( index == 0 ) index ++;\n    if ( arr [ index ] >= arr [ index - 1 ] ) index ++;\n    else {\n      swap ( arr [ index ], arr [ index - 1 ] );\n      index --;\n    }\n  }\n  return;\n}", "target_program": " def gnomeSort ( arr , n ) :\n    index = 0\n    while index < n :\n        if index == 0 :\n            index = index + 1\n        if arr [ index ] >= arr [ index - 1 ] :\n            index = index + 1\n        else :\n            arr [ index ] , arr [ index - 1 ] = arr [ index - 1 ] , arr [ index ]\n            index = index - 1\n    return arr"}
{"source": "python", "target": "java", "source_program": " def numberofways ( A , B , N , M ) :\n    pos = [ [ ] for _ in range ( MAX ) ]\n    for i in range ( M ) :\n        pos [ ord ( B [ i ] ) ].append ( i + 1 )\n    dpl = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1\n            else :\n                dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] )\n    LCS = dpl [ N ] [ M ]\n    dpr = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1\n            else :\n                dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] )\n    ans = 0\n    for i in range ( N + 1 ) :\n        for j in range ( MAX ) :\n            for x in pos [ j ] :\n                if dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS :\n                    ans += 1\n                    break\n    return ans", "target_program": " static int numberofways ( String A , String B , int N , int M ) {\n  Vector < Integer > [ ] pos = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) pos [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) pos [ B . charAt ( i ) ] . add ( i + 1 ) ;\n  int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= M ;\n    j ++ ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ;\n      else dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] ) ;\n    }\n  }\n  int LCS = dpl [ N ] [ M ] ;\n  int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) {\n    for ( int j = M ;\n    j >= 1 ;\n    j -- ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ;\n      else dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      for ( int x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numberofways ( A , B , N , M ) :\n    pos = [ [ ] for _ in range ( MAX ) ]\n    for i in range ( M ) :\n        pos [ ord ( B [ i ] ) ].append ( i + 1 )\n    dpl = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1\n            else :\n                dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] )\n    LCS = dpl [ N ] [ M ]\n    dpr = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1\n            else :\n                dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] )\n    ans = 0\n    for i in range ( N + 1 ) :\n        for j in range ( MAX ) :\n            for x in pos [ j ] :\n                if dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS :\n                    ans += 1\n                    break\n    return ans", "target_program": " int numberofways ( string A, string B, int N, int M ) {\n  vector < int > pos [ MAX ];\n  for ( int i = 0;\n  i < M;\n  i ++ ) pos [ B [ i ] ] . push_back ( i + 1 );\n  int dpl [ N + 2 ] [ M + 2 ];\n  memset ( dpl, 0, sizeof ( dpl ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) {\n    for ( int j = 1;\n    j <= M;\n    j ++ ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1;\n      else dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ], dpl [ i ] [ j - 1 ] );\n    }\n  }\n  int LCS = dpl [ N ] [ M ];\n  int dpr [ N + 2 ] [ M + 2 ];\n  memset ( dpr, 0, sizeof ( dpr ) );\n  for ( int i = N;\n  i >= 1;\n  i -- ) {\n    for ( int j = M;\n    j >= 1;\n    j -- ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1;\n      else dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ], dpr [ i ] [ j + 1 ] );\n    }\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i <= N;\n  i ++ ) {\n    for ( int j = 0;\n    j < MAX;\n    j ++ ) {\n      for ( auto x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++;\n          break;\n        }\n      }\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int numberofways ( String A , String B , int N , int M ) {\n  Vector < Integer > [ ] pos = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) pos [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) pos [ B . charAt ( i ) ] . add ( i + 1 ) ;\n  int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= M ;\n    j ++ ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ;\n      else dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] ) ;\n    }\n  }\n  int LCS = dpl [ N ] [ M ] ;\n  int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) {\n    for ( int j = M ;\n    j >= 1 ;\n    j -- ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ;\n      else dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      for ( int x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return ans ;\n}", "target_program": " def numberofways ( A , B , N , M ) :\n    pos = [ [ ] for _ in range ( MAX ) ]\n    for i in range ( M ) :\n        pos [ ord ( B [ i ] ) ].append ( i + 1 )\n    dpl = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1\n            else :\n                dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] )\n    LCS = dpl [ N ] [ M ]\n    dpr = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1\n            else :\n                dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] )\n    ans = 0\n    for i in range ( N + 1 ) :\n        for j in range ( MAX ) :\n            for x in pos [ j ] :\n                if dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS :\n                    ans += 1\n                    break\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int numberofways ( String A , String B , int N , int M ) {\n  Vector < Integer > [ ] pos = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) pos [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) pos [ B . charAt ( i ) ] . add ( i + 1 ) ;\n  int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= M ;\n    j ++ ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ;\n      else dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] ) ;\n    }\n  }\n  int LCS = dpl [ N ] [ M ] ;\n  int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) {\n    for ( int j = M ;\n    j >= 1 ;\n    j -- ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ;\n      else dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      for ( int x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return ans ;\n}", "target_program": " int numberofways ( string A, string B, int N, int M ) {\n  vector < int > pos [ MAX ];\n  for ( int i = 0;\n  i < M;\n  i ++ ) pos [ B [ i ] ] . push_back ( i + 1 );\n  int dpl [ N + 2 ] [ M + 2 ];\n  memset ( dpl, 0, sizeof ( dpl ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) {\n    for ( int j = 1;\n    j <= M;\n    j ++ ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1;\n      else dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ], dpl [ i ] [ j - 1 ] );\n    }\n  }\n  int LCS = dpl [ N ] [ M ];\n  int dpr [ N + 2 ] [ M + 2 ];\n  memset ( dpr, 0, sizeof ( dpr ) );\n  for ( int i = N;\n  i >= 1;\n  i -- ) {\n    for ( int j = M;\n    j >= 1;\n    j -- ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1;\n      else dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ], dpr [ i ] [ j + 1 ] );\n    }\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i <= N;\n  i ++ ) {\n    for ( int j = 0;\n    j < MAX;\n    j ++ ) {\n      for ( auto x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++;\n          break;\n        }\n      }\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numberofways ( string A, string B, int N, int M ) {\n  vector < int > pos [ MAX ];\n  for ( int i = 0;\n  i < M;\n  i ++ ) pos [ B [ i ] ] . push_back ( i + 1 );\n  int dpl [ N + 2 ] [ M + 2 ];\n  memset ( dpl, 0, sizeof ( dpl ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) {\n    for ( int j = 1;\n    j <= M;\n    j ++ ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1;\n      else dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ], dpl [ i ] [ j - 1 ] );\n    }\n  }\n  int LCS = dpl [ N ] [ M ];\n  int dpr [ N + 2 ] [ M + 2 ];\n  memset ( dpr, 0, sizeof ( dpr ) );\n  for ( int i = N;\n  i >= 1;\n  i -- ) {\n    for ( int j = M;\n    j >= 1;\n    j -- ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1;\n      else dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ], dpr [ i ] [ j + 1 ] );\n    }\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i <= N;\n  i ++ ) {\n    for ( int j = 0;\n    j < MAX;\n    j ++ ) {\n      for ( auto x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++;\n          break;\n        }\n      }\n    }\n  }\n  return ans;\n}", "target_program": " static int numberofways ( String A , String B , int N , int M ) {\n  Vector < Integer > [ ] pos = new Vector [ MAX ] ;\n  for ( int i = 0 ;\n  i < MAX ;\n  i ++ ) pos [ i ] = new Vector < > ( ) ;\n  for ( int i = 0 ;\n  i < M ;\n  i ++ ) pos [ B . charAt ( i ) ] . add ( i + 1 ) ;\n  int [ ] [ ] dpl = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 1 ;\n    j <= M ;\n    j ++ ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1 ;\n      else dpl [ i ] [ j ] = Math . max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] ) ;\n    }\n  }\n  int LCS = dpl [ N ] [ M ] ;\n  int [ ] [ ] dpr = new int [ N + 2 ] [ M + 2 ] ;\n  for ( int i = N ;\n  i >= 1 ;\n  i -- ) {\n    for ( int j = M ;\n    j >= 1 ;\n    j -- ) {\n      if ( A . charAt ( i - 1 ) == B . charAt ( j - 1 ) ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1 ;\n      else dpr [ i ] [ j ] = Math . max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] ) ;\n    }\n  }\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i <= N ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < MAX ;\n    j ++ ) {\n      for ( int x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++ ;\n          break ;\n        }\n      }\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numberofways ( string A, string B, int N, int M ) {\n  vector < int > pos [ MAX ];\n  for ( int i = 0;\n  i < M;\n  i ++ ) pos [ B [ i ] ] . push_back ( i + 1 );\n  int dpl [ N + 2 ] [ M + 2 ];\n  memset ( dpl, 0, sizeof ( dpl ) );\n  for ( int i = 1;\n  i <= N;\n  i ++ ) {\n    for ( int j = 1;\n    j <= M;\n    j ++ ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1;\n      else dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ], dpl [ i ] [ j - 1 ] );\n    }\n  }\n  int LCS = dpl [ N ] [ M ];\n  int dpr [ N + 2 ] [ M + 2 ];\n  memset ( dpr, 0, sizeof ( dpr ) );\n  for ( int i = N;\n  i >= 1;\n  i -- ) {\n    for ( int j = M;\n    j >= 1;\n    j -- ) {\n      if ( A [ i - 1 ] == B [ j - 1 ] ) dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1;\n      else dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ], dpr [ i ] [ j + 1 ] );\n    }\n  }\n  int ans = 0;\n  for ( int i = 0;\n  i <= N;\n  i ++ ) {\n    for ( int j = 0;\n    j < MAX;\n    j ++ ) {\n      for ( auto x : pos [ j ] ) {\n        if ( dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS ) {\n          ans ++;\n          break;\n        }\n      }\n    }\n  }\n  return ans;\n}", "target_program": " def numberofways ( A , B , N , M ) :\n    pos = [ [ ] for _ in range ( MAX ) ]\n    for i in range ( M ) :\n        pos [ ord ( B [ i ] ) ].append ( i + 1 )\n    dpl = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( 1 , M + 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpl [ i ] [ j ] = dpl [ i - 1 ] [ j - 1 ] + 1\n            else :\n                dpl [ i ] [ j ] = max ( dpl [ i - 1 ] [ j ] , dpl [ i ] [ j - 1 ] )\n    LCS = dpl [ N ] [ M ]\n    dpr = [ [ 0 ] * ( M + 2 ) for _ in range ( N + 2 ) ]\n    for i in range ( N , 0 , - 1 ) :\n        for j in range ( M , 0 , - 1 ) :\n            if A [ i - 1 ] == B [ j - 1 ] :\n                dpr [ i ] [ j ] = dpr [ i + 1 ] [ j + 1 ] + 1\n            else :\n                dpr [ i ] [ j ] = max ( dpr [ i + 1 ] [ j ] , dpr [ i ] [ j + 1 ] )\n    ans = 0\n    for i in range ( N + 1 ) :\n        for j in range ( MAX ) :\n            for x in pos [ j ] :\n                if dpl [ i ] [ x - 1 ] + dpr [ i + 1 ] [ x + 1 ] == LCS :\n                    ans += 1\n                    break\n    return ans"}
{"source": "python", "target": "java", "source_program": " def minProduct ( arr , n , k ) :\n    heapq.heapify ( arr )\n    count = 0\n    ans = 1\n    while ( arr ) and count < k :\n        x = heapq.heappop ( arr )\n        ans = ans * x\n        count = count + 1\n    return ans ;", "target_program": " public static int minProduct ( int [ ] arr , int n , int k ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pq . add ( arr [ i ] ) ;\n  int count = 0 , ans = 1 ;\n  while ( pq . isEmpty ( ) == false && count < k ) {\n    ans = ans * pq . element ( ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minProduct ( arr , n , k ) :\n    heapq.heapify ( arr )\n    count = 0\n    ans = 1\n    while ( arr ) and count < k :\n        x = heapq.heappop ( arr )\n        ans = ans * x\n        count = count + 1\n    return ans ;", "target_program": " int minProduct ( int arr [ ], int n, int k ) {\n  priority_queue < int, vector < int >, greater < int > > pq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) pq . push ( arr [ i ] );\n  int count = 0, ans = 1;\n  while ( pq . empty ( ) == false && count < k ) {\n    ans = ans * pq . top ( );\n    pq . pop ( );\n    count ++;\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " public static int minProduct ( int [ ] arr , int n , int k ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pq . add ( arr [ i ] ) ;\n  int count = 0 , ans = 1 ;\n  while ( pq . isEmpty ( ) == false && count < k ) {\n    ans = ans * pq . element ( ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n  return ans ;\n}", "target_program": " def minProduct ( arr , n , k ) :\n    heapq.heapify ( arr )\n    count = 0\n    ans = 1\n    while ( arr ) and count < k :\n        x = heapq.heappop ( arr )\n        ans = ans * x\n        count = count + 1\n    return ans ;"}
{"source": "java", "target": "cpp", "source_program": " public static int minProduct ( int [ ] arr , int n , int k ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pq . add ( arr [ i ] ) ;\n  int count = 0 , ans = 1 ;\n  while ( pq . isEmpty ( ) == false && count < k ) {\n    ans = ans * pq . element ( ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n  return ans ;\n}", "target_program": " int minProduct ( int arr [ ], int n, int k ) {\n  priority_queue < int, vector < int >, greater < int > > pq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) pq . push ( arr [ i ] );\n  int count = 0, ans = 1;\n  while ( pq . empty ( ) == false && count < k ) {\n    ans = ans * pq . top ( );\n    pq . pop ( );\n    count ++;\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int minProduct ( int arr [ ], int n, int k ) {\n  priority_queue < int, vector < int >, greater < int > > pq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) pq . push ( arr [ i ] );\n  int count = 0, ans = 1;\n  while ( pq . empty ( ) == false && count < k ) {\n    ans = ans * pq . top ( );\n    pq . pop ( );\n    count ++;\n  }\n  return ans;\n}", "target_program": " public static int minProduct ( int [ ] arr , int n , int k ) {\n  PriorityQueue < Integer > pq = new PriorityQueue < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) pq . add ( arr [ i ] ) ;\n  int count = 0 , ans = 1 ;\n  while ( pq . isEmpty ( ) == false && count < k ) {\n    ans = ans * pq . element ( ) ;\n    pq . remove ( ) ;\n    count ++ ;\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minProduct ( int arr [ ], int n, int k ) {\n  priority_queue < int, vector < int >, greater < int > > pq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) pq . push ( arr [ i ] );\n  int count = 0, ans = 1;\n  while ( pq . empty ( ) == false && count < k ) {\n    ans = ans * pq . top ( );\n    pq . pop ( );\n    count ++;\n  }\n  return ans;\n}", "target_program": " def minProduct ( arr , n , k ) :\n    heapq.heapify ( arr )\n    count = 0\n    ans = 1\n    while ( arr ) and count < k :\n        x = heapq.heappop ( arr )\n        ans = ans * x\n        count = count + 1\n    return ans ;"}
{"source": "python", "target": "java", "source_program": " def repeat ( s , n ) :\n    s1 = s\n    for i in range ( 1 , n ) :\n        s += s1\n    return s", "target_program": " static String repeat ( String s , int n ) {\n  String s1 = s ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) s += s1 ;\n  return s ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def repeat ( s , n ) :\n    s1 = s\n    for i in range ( 1 , n ) :\n        s += s1\n    return s", "target_program": " string repeat ( string s, int n ) {\n  string s1 = s;\n  for ( int i = 1;\n  i < n;\n  i ++ ) s += s1;\n  return s;\n}"}
{"source": "java", "target": "python", "source_program": " static String repeat ( String s , int n ) {\n  String s1 = s ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) s += s1 ;\n  return s ;\n}", "target_program": " def repeat ( s , n ) :\n    s1 = s\n    for i in range ( 1 , n ) :\n        s += s1\n    return s"}
{"source": "java", "target": "cpp", "source_program": " static String repeat ( String s , int n ) {\n  String s1 = s ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) s += s1 ;\n  return s ;\n}", "target_program": " string repeat ( string s, int n ) {\n  string s1 = s;\n  for ( int i = 1;\n  i < n;\n  i ++ ) s += s1;\n  return s;\n}"}
{"source": "cpp", "target": "java", "source_program": " string repeat ( string s, int n ) {\n  string s1 = s;\n  for ( int i = 1;\n  i < n;\n  i ++ ) s += s1;\n  return s;\n}", "target_program": " static String repeat ( String s , int n ) {\n  String s1 = s ;\n  for ( int i = 1 ;\n  i < n ;\n  i ++ ) s += s1 ;\n  return s ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string repeat ( string s, int n ) {\n  string s1 = s;\n  for ( int i = 1;\n  i < n;\n  i ++ ) s += s1;\n  return s;\n}", "target_program": " def repeat ( s , n ) :\n    s1 = s\n    for i in range ( 1 , n ) :\n        s += s1\n    return s"}
{"source": "python", "target": "java", "source_program": " def search ( pat , txt ) :\n    M = len ( pat )\n    N = len ( txt )\n    for i in range ( N - M + 1 ) :\n        j = 0\n        while ( j < M ) :\n            if ( txt [ i + j ] != pat [ j ] ) :\n                break\n            j += 1\n        if ( j == M ) :\n            print ( \"Pattern found at index \" , i )", "target_program": " public static void search ( String txt , String pat ) {\n  int M = pat . length ( ) ;\n  int N = txt . length ( ) ;\n  for ( int i = 0 ;\n  i <= N - M ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < M ;\n    j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ;\n    if ( j == M ) System . out . println ( \"Pattern found at index \" + i ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def search ( pat , txt ) :\n    M = len ( pat )\n    N = len ( txt )\n    for i in range ( N - M + 1 ) :\n        j = 0\n        while ( j < M ) :\n            if ( txt [ i + j ] != pat [ j ] ) :\n                break\n            j += 1\n        if ( j == M ) :\n            print ( \"Pattern found at index \" , i )", "target_program": " void search ( char * pat, char * txt ) {\n  int M = strlen ( pat );\n  int N = strlen ( txt );\n  for ( int i = 0;\n  i <= N - M;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < M;\n    j ++ ) if ( txt [ i + j ] != pat [ j ] ) break;\n    if ( j == M ) cout << \"Pattern found at index \" << i << endl;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " public static void search ( String txt , String pat ) {\n  int M = pat . length ( ) ;\n  int N = txt . length ( ) ;\n  for ( int i = 0 ;\n  i <= N - M ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < M ;\n    j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ;\n    if ( j == M ) System . out . println ( \"Pattern found at index \" + i ) ;\n  }\n}", "target_program": " def search ( pat , txt ) :\n    M = len ( pat )\n    N = len ( txt )\n    for i in range ( N - M + 1 ) :\n        j = 0\n        while ( j < M ) :\n            if ( txt [ i + j ] != pat [ j ] ) :\n                break\n            j += 1\n        if ( j == M ) :\n            print ( \"Pattern found at index \" , i )"}
{"source": "java", "target": "cpp", "source_program": " public static void search ( String txt , String pat ) {\n  int M = pat . length ( ) ;\n  int N = txt . length ( ) ;\n  for ( int i = 0 ;\n  i <= N - M ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < M ;\n    j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ;\n    if ( j == M ) System . out . println ( \"Pattern found at index \" + i ) ;\n  }\n}", "target_program": " void search ( char * pat, char * txt ) {\n  int M = strlen ( pat );\n  int N = strlen ( txt );\n  for ( int i = 0;\n  i <= N - M;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < M;\n    j ++ ) if ( txt [ i + j ] != pat [ j ] ) break;\n    if ( j == M ) cout << \"Pattern found at index \" << i << endl;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void search ( char * pat, char * txt ) {\n  int M = strlen ( pat );\n  int N = strlen ( txt );\n  for ( int i = 0;\n  i <= N - M;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < M;\n    j ++ ) if ( txt [ i + j ] != pat [ j ] ) break;\n    if ( j == M ) cout << \"Pattern found at index \" << i << endl;\n  }\n}", "target_program": " public static void search ( String txt , String pat ) {\n  int M = pat . length ( ) ;\n  int N = txt . length ( ) ;\n  for ( int i = 0 ;\n  i <= N - M ;\n  i ++ ) {\n    int j ;\n    for ( j = 0 ;\n    j < M ;\n    j ++ ) if ( txt . charAt ( i + j ) != pat . charAt ( j ) ) break ;\n    if ( j == M ) System . out . println ( \"Pattern found at index \" + i ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void search ( char * pat, char * txt ) {\n  int M = strlen ( pat );\n  int N = strlen ( txt );\n  for ( int i = 0;\n  i <= N - M;\n  i ++ ) {\n    int j;\n    for ( j = 0;\n    j < M;\n    j ++ ) if ( txt [ i + j ] != pat [ j ] ) break;\n    if ( j == M ) cout << \"Pattern found at index \" << i << endl;\n  }\n}", "target_program": " def search ( pat , txt ) :\n    M = len ( pat )\n    N = len ( txt )\n    for i in range ( N - M + 1 ) :\n        j = 0\n        while ( j < M ) :\n            if ( txt [ i + j ] != pat [ j ] ) :\n                break\n            j += 1\n        if ( j == M ) :\n            print ( \"Pattern found at index \" , i )"}
{"source": "python", "target": "java", "source_program": " def countwalks ( graph , u , v , k ) :\n    if ( k == 0 and u == v ) :\n        return 1\n    if ( k == 1 and graph [ u ] [ v ] ) :\n        return 1\n    if ( k <= 0 ) :\n        return 0\n    count = 0\n    for i in range ( 0 , V ) :\n        if ( graph [ u ] [ i ] == 1 ) :\n            count += countwalks ( graph , i , v , k - 1 )\n    return count", "target_program": " int countwalks ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 1 ;\n  if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ;\n  if ( k <= 0 ) return 0 ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ;\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countwalks ( graph , u , v , k ) :\n    if ( k == 0 and u == v ) :\n        return 1\n    if ( k == 1 and graph [ u ] [ v ] ) :\n        return 1\n    if ( k <= 0 ) :\n        return 0\n    count = 0\n    for i in range ( 0 , V ) :\n        if ( graph [ u ] [ i ] == 1 ) :\n            count += countwalks ( graph , i , v , k - 1 )\n    return count", "target_program": " int countwalks ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 1;\n  if ( k == 1 && graph [ u ] [ v ] ) return 1;\n  if ( k <= 0 ) return 0;\n  int count = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph, i, v, k - 1 );\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " int countwalks ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 1 ;\n  if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ;\n  if ( k <= 0 ) return 0 ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ;\n  return count ;\n}", "target_program": " def countwalks ( graph , u , v , k ) :\n    if ( k == 0 and u == v ) :\n        return 1\n    if ( k == 1 and graph [ u ] [ v ] ) :\n        return 1\n    if ( k <= 0 ) :\n        return 0\n    count = 0\n    for i in range ( 0 , V ) :\n        if ( graph [ u ] [ i ] == 1 ) :\n            count += countwalks ( graph , i , v , k - 1 )\n    return count"}
{"source": "java", "target": "cpp", "source_program": " int countwalks ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 1 ;\n  if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ;\n  if ( k <= 0 ) return 0 ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ;\n  return count ;\n}", "target_program": " int countwalks ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 1;\n  if ( k == 1 && graph [ u ] [ v ] ) return 1;\n  if ( k <= 0 ) return 0;\n  int count = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph, i, v, k - 1 );\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countwalks ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 1;\n  if ( k == 1 && graph [ u ] [ v ] ) return 1;\n  if ( k <= 0 ) return 0;\n  int count = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph, i, v, k - 1 );\n  return count;\n}", "target_program": " int countwalks ( int graph [ ] [ ] , int u , int v , int k ) {\n  if ( k == 0 && u == v ) return 1 ;\n  if ( k == 1 && graph [ u ] [ v ] == 1 ) return 1 ;\n  if ( k <= 0 ) return 0 ;\n  int count = 0 ;\n  for ( int i = 0 ;\n  i < V ;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph , i , v , k - 1 ) ;\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countwalks ( int graph [ ] [ V ], int u, int v, int k ) {\n  if ( k == 0 && u == v ) return 1;\n  if ( k == 1 && graph [ u ] [ v ] ) return 1;\n  if ( k <= 0 ) return 0;\n  int count = 0;\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( graph [ u ] [ i ] == 1 ) count += countwalks ( graph, i, v, k - 1 );\n  return count;\n}", "target_program": " def countwalks ( graph , u , v , k ) :\n    if ( k == 0 and u == v ) :\n        return 1\n    if ( k == 1 and graph [ u ] [ v ] ) :\n        return 1\n    if ( k <= 0 ) :\n        return 0\n    count = 0\n    for i in range ( 0 , V ) :\n        if ( graph [ u ] [ i ] == 1 ) :\n            count += countwalks ( graph , i , v , k - 1 )\n    return count"}
{"source": "python", "target": "java", "source_program": " def isSymmetric ( mat , N ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :\n                return False\n    return True", "target_program": " static boolean isSymmetric ( int mat [ ] [ ] , int N ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isSymmetric ( mat , N ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :\n                return False\n    return True", "target_program": " bool isSymmetric ( int mat [ ] [ MAX ], int N ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isSymmetric ( int mat [ ] [ ] , int N ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ;\n  return true ;\n}", "target_program": " def isSymmetric ( mat , N ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :\n                return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isSymmetric ( int mat [ ] [ ] , int N ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ;\n  return true ;\n}", "target_program": " bool isSymmetric ( int mat [ ] [ MAX ], int N ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isSymmetric ( int mat [ ] [ MAX ], int N ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false;\n  return true;\n}", "target_program": " static boolean isSymmetric ( int mat [ ] [ ] , int N ) {\n  for ( int i = 0 ;\n  i < N ;\n  i ++ ) for ( int j = 0 ;\n  j < N ;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isSymmetric ( int mat [ ] [ MAX ], int N ) {\n  for ( int i = 0;\n  i < N;\n  i ++ ) for ( int j = 0;\n  j < N;\n  j ++ ) if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) return false;\n  return true;\n}", "target_program": " def isSymmetric ( mat , N ) :\n    for i in range ( N ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] != mat [ j ] [ i ] ) :\n                return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( n ) :\n        P [ i ] [ i ] = True\n    for i in range ( n - 1 ) :\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n    for gap in range ( 2 , n ) :\n        for i in range ( n - gap ) :\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n    return dp [ 0 ] [ n - 1 ]", "target_program": " static int CountPS ( char str [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  boolean P [ ] [ ] = new boolean [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) P [ i ] [ i ] = true ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true ;\n      dp [ i ] [ i + 1 ] = 1 ;\n    }\n  }\n  for ( int gap = 2 ;\n  gap < n ;\n  gap ++ ) {\n    for ( int i = 0 ;\n    i < n - gap ;\n    i ++ ) {\n      int j = gap + i ;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true ;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( n ) :\n        P [ i ] [ i ] = True\n    for i in range ( n - 1 ) :\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n    for gap in range ( 2 , n ) :\n        for i in range ( n - gap ) :\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n    return dp [ 0 ] [ n - 1 ]", "target_program": " int CountPS ( char str [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  bool P [ n ] [ n ];\n  memset ( P, false, sizeof ( P ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) P [ i ] [ i ] = true;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true;\n      dp [ i ] [ i + 1 ] = 1;\n    }\n  }\n  for ( int gap = 2;\n  gap < n;\n  gap ++ ) {\n    for ( int i = 0;\n    i < n - gap;\n    i ++ ) {\n      int j = gap + i;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ];\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int CountPS ( char str [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  boolean P [ ] [ ] = new boolean [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) P [ i ] [ i ] = true ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true ;\n      dp [ i ] [ i + 1 ] = 1 ;\n    }\n  }\n  for ( int gap = 2 ;\n  gap < n ;\n  gap ++ ) {\n    for ( int i = 0 ;\n    i < n - gap ;\n    i ++ ) {\n      int j = gap + i ;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true ;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}", "target_program": " def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( n ) :\n        P [ i ] [ i ] = True\n    for i in range ( n - 1 ) :\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n    for gap in range ( 2 , n ) :\n        for i in range ( n - gap ) :\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n    return dp [ 0 ] [ n - 1 ]"}
{"source": "java", "target": "cpp", "source_program": " static int CountPS ( char str [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  boolean P [ ] [ ] = new boolean [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) P [ i ] [ i ] = true ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true ;\n      dp [ i ] [ i + 1 ] = 1 ;\n    }\n  }\n  for ( int gap = 2 ;\n  gap < n ;\n  gap ++ ) {\n    for ( int i = 0 ;\n    i < n - gap ;\n    i ++ ) {\n      int j = gap + i ;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true ;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}", "target_program": " int CountPS ( char str [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  bool P [ n ] [ n ];\n  memset ( P, false, sizeof ( P ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) P [ i ] [ i ] = true;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true;\n      dp [ i ] [ i + 1 ] = 1;\n    }\n  }\n  for ( int gap = 2;\n  gap < n;\n  gap ++ ) {\n    for ( int i = 0;\n    i < n - gap;\n    i ++ ) {\n      int j = gap + i;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ];\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int CountPS ( char str [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  bool P [ n ] [ n ];\n  memset ( P, false, sizeof ( P ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) P [ i ] [ i ] = true;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true;\n      dp [ i ] [ i + 1 ] = 1;\n    }\n  }\n  for ( int gap = 2;\n  gap < n;\n  gap ++ ) {\n    for ( int i = 0;\n    i < n - gap;\n    i ++ ) {\n      int j = gap + i;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ];\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}", "target_program": " static int CountPS ( char str [ ] , int n ) {\n  int dp [ ] [ ] = new int [ n ] [ n ] ;\n  boolean P [ ] [ ] = new boolean [ n ] [ n ] ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) P [ i ] [ i ] = true ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true ;\n      dp [ i ] [ i + 1 ] = 1 ;\n    }\n  }\n  for ( int gap = 2 ;\n  gap < n ;\n  gap ++ ) {\n    for ( int i = 0 ;\n    i < n - gap ;\n    i ++ ) {\n      int j = gap + i ;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true ;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] ;\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  return dp [ 0 ] [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int CountPS ( char str [ ], int n ) {\n  int dp [ n ] [ n ];\n  memset ( dp, 0, sizeof ( dp ) );\n  bool P [ n ] [ n ];\n  memset ( P, false, sizeof ( P ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) P [ i ] [ i ] = true;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( str [ i ] == str [ i + 1 ] ) {\n      P [ i ] [ i + 1 ] = true;\n      dp [ i ] [ i + 1 ] = 1;\n    }\n  }\n  for ( int gap = 2;\n  gap < n;\n  gap ++ ) {\n    for ( int i = 0;\n    i < n - gap;\n    i ++ ) {\n      int j = gap + i;\n      if ( str [ i ] == str [ j ] && P [ i + 1 ] [ j - 1 ] ) P [ i ] [ j ] = true;\n      if ( P [ i ] [ j ] == true ) dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ];\n      else dp [ i ] [ j ] = dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ];\n    }\n  }\n  return dp [ 0 ] [ n - 1 ];\n}", "target_program": " def CountPS ( str , n ) :\n    dp = [ [ 0 for x in range ( n ) ] for y in range ( n ) ]\n    P = [ [ False for x in range ( n ) ] for y in range ( n ) ]\n    for i in range ( n ) :\n        P [ i ] [ i ] = True\n    for i in range ( n - 1 ) :\n        if ( str [ i ] == str [ i + 1 ] ) :\n            P [ i ] [ i + 1 ] = True\n            dp [ i ] [ i + 1 ] = 1\n    for gap in range ( 2 , n ) :\n        for i in range ( n - gap ) :\n            j = gap + i ;\n            if ( str [ i ] == str [ j ] and P [ i + 1 ] [ j - 1 ] ) :\n                P [ i ] [ j ] = True\n            if ( P [ i ] [ j ] == True ) :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] + 1 - dp [ i + 1 ] [ j - 1 ] )\n            else :\n                dp [ i ] [ j ] = ( dp [ i ] [ j - 1 ] + dp [ i + 1 ] [ j ] - dp [ i + 1 ] [ j - 1 ] )\n    return dp [ 0 ] [ n - 1 ]"}
{"source": "python", "target": "java", "source_program": " def countWays ( arr , m , N ) :\n    count = [ 0 for i in range ( N + 1 ) ]\n    count [ 0 ] = 1\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( m ) :\n            if ( i >= arr [ j ] ) :\n                count [ i ] += count [ i - arr [ j ] ]\n    return count [ N ]", "target_program": " static int countWays ( int N ) {\n  int count [ ] = new int [ N + 1 ] ;\n  count [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j < arr . length ;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ;\n  return count [ N ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countWays ( arr , m , N ) :\n    count = [ 0 for i in range ( N + 1 ) ]\n    count [ 0 ] = 1\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( m ) :\n            if ( i >= arr [ j ] ) :\n                count [ i ] += count [ i - arr [ j ] ]\n    return count [ N ]", "target_program": " int countWays ( int arr [ ], int m, int N ) {\n  int count [ N + 1 ];\n  memset ( count, 0, sizeof ( count ) );\n  count [ 0 ] = 1;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ];\n  return count [ N ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countWays ( int N ) {\n  int count [ ] = new int [ N + 1 ] ;\n  count [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j < arr . length ;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ;\n  return count [ N ] ;\n}", "target_program": " def countWays ( arr , m , N ) :\n    count = [ 0 for i in range ( N + 1 ) ]\n    count [ 0 ] = 1\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( m ) :\n            if ( i >= arr [ j ] ) :\n                count [ i ] += count [ i - arr [ j ] ]\n    return count [ N ]"}
{"source": "java", "target": "cpp", "source_program": " static int countWays ( int N ) {\n  int count [ ] = new int [ N + 1 ] ;\n  count [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j < arr . length ;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ;\n  return count [ N ] ;\n}", "target_program": " int countWays ( int arr [ ], int m, int N ) {\n  int count [ N + 1 ];\n  memset ( count, 0, sizeof ( count ) );\n  count [ 0 ] = 1;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ];\n  return count [ N ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countWays ( int arr [ ], int m, int N ) {\n  int count [ N + 1 ];\n  memset ( count, 0, sizeof ( count ) );\n  count [ 0 ] = 1;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ];\n  return count [ N ];\n}", "target_program": " static int countWays ( int N ) {\n  int count [ ] = new int [ N + 1 ] ;\n  count [ 0 ] = 1 ;\n  for ( int i = 1 ;\n  i <= N ;\n  i ++ ) for ( int j = 0 ;\n  j < arr . length ;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ] ;\n  return count [ N ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countWays ( int arr [ ], int m, int N ) {\n  int count [ N + 1 ];\n  memset ( count, 0, sizeof ( count ) );\n  count [ 0 ] = 1;\n  for ( int i = 1;\n  i <= N;\n  i ++ ) for ( int j = 0;\n  j < m;\n  j ++ ) if ( i >= arr [ j ] ) count [ i ] += count [ i - arr [ j ] ];\n  return count [ N ];\n}", "target_program": " def countWays ( arr , m , N ) :\n    count = [ 0 for i in range ( N + 1 ) ]\n    count [ 0 ] = 1\n    for i in range ( 1 , N + 1 ) :\n        for j in range ( m ) :\n            if ( i >= arr [ j ] ) :\n                count [ i ] += count [ i - arr [ j ] ]\n    return count [ N ]"}
{"source": "python", "target": "java", "source_program": " def spiralPrint ( m , n , a ) :\n    k = 0 ; l = 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            print ( a [ k ] [ i ] , end = \" \" )\n        k += 1\n        for i in range ( k , m ) :\n            print ( a [ i ] [ n - 1 ] , end = \" \" )\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , ( l - 1 ) , - 1 ) :\n                print ( a [ m - 1 ] [ i ] , end = \" \" )\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( a [ i ] [ l ] , end = \" \" )\n            l += 1", "target_program": " static void spiralPrint ( int m , int n , int a [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( a [ k ] [ i ] + \" \" ) ;\n    }\n    k ++ ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( a [ i ] [ n - 1 ] + \" \" ) ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( a [ m - 1 ] [ i ] + \" \" ) ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( a [ i ] [ l ] + \" \" ) ;\n      }\n      l ++ ;\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def spiralPrint ( m , n , a ) :\n    k = 0 ; l = 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            print ( a [ k ] [ i ] , end = \" \" )\n        k += 1\n        for i in range ( k , m ) :\n            print ( a [ i ] [ n - 1 ] , end = \" \" )\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , ( l - 1 ) , - 1 ) :\n                print ( a [ m - 1 ] [ i ] , end = \" \" )\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( a [ i ] [ l ] , end = \" \" )\n            l += 1", "target_program": " void spiralPrint ( int m, int n, int a [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << a [ k ] [ i ] << \" \";\n    }\n    k ++;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << a [ i ] [ n - 1 ] << \" \";\n    }\n    n --;\n    if ( k < m ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << a [ m - 1 ] [ i ] << \" \";\n      }\n      m --;\n    }\n    if ( l < n ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << a [ i ] [ l ] << \" \";\n      }\n      l ++;\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void spiralPrint ( int m , int n , int a [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( a [ k ] [ i ] + \" \" ) ;\n    }\n    k ++ ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( a [ i ] [ n - 1 ] + \" \" ) ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( a [ m - 1 ] [ i ] + \" \" ) ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( a [ i ] [ l ] + \" \" ) ;\n      }\n      l ++ ;\n    }\n  }\n}", "target_program": " def spiralPrint ( m , n , a ) :\n    k = 0 ; l = 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            print ( a [ k ] [ i ] , end = \" \" )\n        k += 1\n        for i in range ( k , m ) :\n            print ( a [ i ] [ n - 1 ] , end = \" \" )\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , ( l - 1 ) , - 1 ) :\n                print ( a [ m - 1 ] [ i ] , end = \" \" )\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( a [ i ] [ l ] , end = \" \" )\n            l += 1"}
{"source": "java", "target": "cpp", "source_program": " static void spiralPrint ( int m , int n , int a [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( a [ k ] [ i ] + \" \" ) ;\n    }\n    k ++ ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( a [ i ] [ n - 1 ] + \" \" ) ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( a [ m - 1 ] [ i ] + \" \" ) ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( a [ i ] [ l ] + \" \" ) ;\n      }\n      l ++ ;\n    }\n  }\n}", "target_program": " void spiralPrint ( int m, int n, int a [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << a [ k ] [ i ] << \" \";\n    }\n    k ++;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << a [ i ] [ n - 1 ] << \" \";\n    }\n    n --;\n    if ( k < m ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << a [ m - 1 ] [ i ] << \" \";\n      }\n      m --;\n    }\n    if ( l < n ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << a [ i ] [ l ] << \" \";\n      }\n      l ++;\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void spiralPrint ( int m, int n, int a [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << a [ k ] [ i ] << \" \";\n    }\n    k ++;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << a [ i ] [ n - 1 ] << \" \";\n    }\n    n --;\n    if ( k < m ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << a [ m - 1 ] [ i ] << \" \";\n      }\n      m --;\n    }\n    if ( l < n ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << a [ i ] [ l ] << \" \";\n      }\n      l ++;\n    }\n  }\n}", "target_program": " static void spiralPrint ( int m , int n , int a [ ] [ ] ) {\n  int i , k = 0 , l = 0 ;\n  while ( k < m && l < n ) {\n    for ( i = l ;\n    i < n ;\n    ++ i ) {\n      System . out . print ( a [ k ] [ i ] + \" \" ) ;\n    }\n    k ++ ;\n    for ( i = k ;\n    i < m ;\n    ++ i ) {\n      System . out . print ( a [ i ] [ n - 1 ] + \" \" ) ;\n    }\n    n -- ;\n    if ( k < m ) {\n      for ( i = n - 1 ;\n      i >= l ;\n      -- i ) {\n        System . out . print ( a [ m - 1 ] [ i ] + \" \" ) ;\n      }\n      m -- ;\n    }\n    if ( l < n ) {\n      for ( i = m - 1 ;\n      i >= k ;\n      -- i ) {\n        System . out . print ( a [ i ] [ l ] + \" \" ) ;\n      }\n      l ++ ;\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void spiralPrint ( int m, int n, int a [ R ] [ C ] ) {\n  int i, k = 0, l = 0;\n  while ( k < m && l < n ) {\n    for ( i = l;\n    i < n;\n    ++ i ) {\n      cout << a [ k ] [ i ] << \" \";\n    }\n    k ++;\n    for ( i = k;\n    i < m;\n    ++ i ) {\n      cout << a [ i ] [ n - 1 ] << \" \";\n    }\n    n --;\n    if ( k < m ) {\n      for ( i = n - 1;\n      i >= l;\n      -- i ) {\n        cout << a [ m - 1 ] [ i ] << \" \";\n      }\n      m --;\n    }\n    if ( l < n ) {\n      for ( i = m - 1;\n      i >= k;\n      -- i ) {\n        cout << a [ i ] [ l ] << \" \";\n      }\n      l ++;\n    }\n  }\n}", "target_program": " def spiralPrint ( m , n , a ) :\n    k = 0 ; l = 0\n    while ( k < m and l < n ) :\n        for i in range ( l , n ) :\n            print ( a [ k ] [ i ] , end = \" \" )\n        k += 1\n        for i in range ( k , m ) :\n            print ( a [ i ] [ n - 1 ] , end = \" \" )\n        n -= 1\n        if ( k < m ) :\n            for i in range ( n - 1 , ( l - 1 ) , - 1 ) :\n                print ( a [ m - 1 ] [ i ] , end = \" \" )\n            m -= 1\n        if ( l < n ) :\n            for i in range ( m - 1 , k - 1 , - 1 ) :\n                print ( a [ i ] [ l ] , end = \" \" )\n            l += 1"}
{"source": "python", "target": "java", "source_program": " def findTriplets ( x ) :\n    fact = [ ] ;\n    factors = set ( ) ;\n    for i in range ( 2 , int ( sqrt ( x ) ) ) :\n        if ( x % i == 0 ) :\n            fact.append ( i ) ;\n            if ( x / i != i ) :\n                fact.append ( x // i ) ;\n            factors.add ( i ) ;\n            factors.add ( x // i ) ;\n    found = False ;\n    k = len ( fact ) ;\n    for i in range ( k ) :\n        a = fact [ i ] ;\n        for j in range ( k ) :\n            b = fact [ j ] ;\n            if ( ( a != b ) and ( x % ( a * b ) == 0 ) and ( x / ( a * b ) != a ) and ( x / ( a * b ) != b ) and ( x / ( a * b ) != 1 ) ) :\n                print ( a , b , x // ( a * b ) ) ;\n                found = True ;\n                break ;\n        if ( found ) :\n            break ;\n    if ( not found ) :\n        print ( \"-1\" ) ;", "target_program": " static void findTriplets ( int x ) {\n  Vector < Integer > fact = new Vector < Integer > ( ) ;\n  HashSet < Integer > factors = new HashSet < Integer > ( ) ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( x ) ;\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . add ( i ) ;\n      if ( x / i != i ) fact . add ( x / i ) ;\n      factors . add ( i ) ;\n      factors . add ( x / i ) ;\n    }\n  }\n  boolean found = false ;\n  int k = fact . size ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int a = fact . get ( i ) ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      int b = fact . get ( j ) ;\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        System . out . print ( a + \" \" + b + \" \" + ( x / ( a * b ) ) ) ;\n        found = true ;\n        break ;\n      }\n    }\n    if ( found ) break ;\n  }\n  if ( ! found ) System . out . print ( \"-1\" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findTriplets ( x ) :\n    fact = [ ] ;\n    factors = set ( ) ;\n    for i in range ( 2 , int ( sqrt ( x ) ) ) :\n        if ( x % i == 0 ) :\n            fact.append ( i ) ;\n            if ( x / i != i ) :\n                fact.append ( x // i ) ;\n            factors.add ( i ) ;\n            factors.add ( x // i ) ;\n    found = False ;\n    k = len ( fact ) ;\n    for i in range ( k ) :\n        a = fact [ i ] ;\n        for j in range ( k ) :\n            b = fact [ j ] ;\n            if ( ( a != b ) and ( x % ( a * b ) == 0 ) and ( x / ( a * b ) != a ) and ( x / ( a * b ) != b ) and ( x / ( a * b ) != 1 ) ) :\n                print ( a , b , x // ( a * b ) ) ;\n                found = True ;\n                break ;\n        if ( found ) :\n            break ;\n    if ( not found ) :\n        print ( \"-1\" ) ;", "target_program": " void findTriplets ( int x ) {\n  vector < int > fact;\n  unordered_set < int > factors;\n  for ( int i = 2;\n  i <= sqrt ( x );\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . push_back ( i );\n      if ( x / i != i ) fact . push_back ( x / i );\n      factors . insert ( i );\n      factors . insert ( x / i );\n    }\n  }\n  bool found = false;\n  int k = fact . size ( );\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int a = fact [ i ];\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      int b = fact [ j ];\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        cout << a << \" \" << b << \" \" << ( x / ( a * b ) );\n        found = true;\n        break;\n      }\n    }\n    if ( found ) break;\n  }\n  if ( ! found ) cout << \"-1\";\n}"}
{"source": "java", "target": "python", "source_program": " static void findTriplets ( int x ) {\n  Vector < Integer > fact = new Vector < Integer > ( ) ;\n  HashSet < Integer > factors = new HashSet < Integer > ( ) ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( x ) ;\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . add ( i ) ;\n      if ( x / i != i ) fact . add ( x / i ) ;\n      factors . add ( i ) ;\n      factors . add ( x / i ) ;\n    }\n  }\n  boolean found = false ;\n  int k = fact . size ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int a = fact . get ( i ) ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      int b = fact . get ( j ) ;\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        System . out . print ( a + \" \" + b + \" \" + ( x / ( a * b ) ) ) ;\n        found = true ;\n        break ;\n      }\n    }\n    if ( found ) break ;\n  }\n  if ( ! found ) System . out . print ( \"-1\" ) ;\n}", "target_program": " def findTriplets ( x ) :\n    fact = [ ] ;\n    factors = set ( ) ;\n    for i in range ( 2 , int ( sqrt ( x ) ) ) :\n        if ( x % i == 0 ) :\n            fact.append ( i ) ;\n            if ( x / i != i ) :\n                fact.append ( x // i ) ;\n            factors.add ( i ) ;\n            factors.add ( x // i ) ;\n    found = False ;\n    k = len ( fact ) ;\n    for i in range ( k ) :\n        a = fact [ i ] ;\n        for j in range ( k ) :\n            b = fact [ j ] ;\n            if ( ( a != b ) and ( x % ( a * b ) == 0 ) and ( x / ( a * b ) != a ) and ( x / ( a * b ) != b ) and ( x / ( a * b ) != 1 ) ) :\n                print ( a , b , x // ( a * b ) ) ;\n                found = True ;\n                break ;\n        if ( found ) :\n            break ;\n    if ( not found ) :\n        print ( \"-1\" ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void findTriplets ( int x ) {\n  Vector < Integer > fact = new Vector < Integer > ( ) ;\n  HashSet < Integer > factors = new HashSet < Integer > ( ) ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( x ) ;\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . add ( i ) ;\n      if ( x / i != i ) fact . add ( x / i ) ;\n      factors . add ( i ) ;\n      factors . add ( x / i ) ;\n    }\n  }\n  boolean found = false ;\n  int k = fact . size ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int a = fact . get ( i ) ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      int b = fact . get ( j ) ;\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        System . out . print ( a + \" \" + b + \" \" + ( x / ( a * b ) ) ) ;\n        found = true ;\n        break ;\n      }\n    }\n    if ( found ) break ;\n  }\n  if ( ! found ) System . out . print ( \"-1\" ) ;\n}", "target_program": " void findTriplets ( int x ) {\n  vector < int > fact;\n  unordered_set < int > factors;\n  for ( int i = 2;\n  i <= sqrt ( x );\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . push_back ( i );\n      if ( x / i != i ) fact . push_back ( x / i );\n      factors . insert ( i );\n      factors . insert ( x / i );\n    }\n  }\n  bool found = false;\n  int k = fact . size ( );\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int a = fact [ i ];\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      int b = fact [ j ];\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        cout << a << \" \" << b << \" \" << ( x / ( a * b ) );\n        found = true;\n        break;\n      }\n    }\n    if ( found ) break;\n  }\n  if ( ! found ) cout << \"-1\";\n}"}
{"source": "cpp", "target": "java", "source_program": " void findTriplets ( int x ) {\n  vector < int > fact;\n  unordered_set < int > factors;\n  for ( int i = 2;\n  i <= sqrt ( x );\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . push_back ( i );\n      if ( x / i != i ) fact . push_back ( x / i );\n      factors . insert ( i );\n      factors . insert ( x / i );\n    }\n  }\n  bool found = false;\n  int k = fact . size ( );\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int a = fact [ i ];\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      int b = fact [ j ];\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        cout << a << \" \" << b << \" \" << ( x / ( a * b ) );\n        found = true;\n        break;\n      }\n    }\n    if ( found ) break;\n  }\n  if ( ! found ) cout << \"-1\";\n}", "target_program": " static void findTriplets ( int x ) {\n  Vector < Integer > fact = new Vector < Integer > ( ) ;\n  HashSet < Integer > factors = new HashSet < Integer > ( ) ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( x ) ;\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . add ( i ) ;\n      if ( x / i != i ) fact . add ( x / i ) ;\n      factors . add ( i ) ;\n      factors . add ( x / i ) ;\n    }\n  }\n  boolean found = false ;\n  int k = fact . size ( ) ;\n  for ( int i = 0 ;\n  i < k ;\n  i ++ ) {\n    int a = fact . get ( i ) ;\n    for ( int j = 0 ;\n    j < k ;\n    j ++ ) {\n      int b = fact . get ( j ) ;\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        System . out . print ( a + \" \" + b + \" \" + ( x / ( a * b ) ) ) ;\n        found = true ;\n        break ;\n      }\n    }\n    if ( found ) break ;\n  }\n  if ( ! found ) System . out . print ( \"-1\" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void findTriplets ( int x ) {\n  vector < int > fact;\n  unordered_set < int > factors;\n  for ( int i = 2;\n  i <= sqrt ( x );\n  i ++ ) {\n    if ( x % i == 0 ) {\n      fact . push_back ( i );\n      if ( x / i != i ) fact . push_back ( x / i );\n      factors . insert ( i );\n      factors . insert ( x / i );\n    }\n  }\n  bool found = false;\n  int k = fact . size ( );\n  for ( int i = 0;\n  i < k;\n  i ++ ) {\n    int a = fact [ i ];\n    for ( int j = 0;\n    j < k;\n    j ++ ) {\n      int b = fact [ j ];\n      if ( ( a != b ) && ( x % ( a * b ) == 0 ) && ( x / ( a * b ) != a ) && ( x / ( a * b ) != b ) && ( x / ( a * b ) != 1 ) ) {\n        cout << a << \" \" << b << \" \" << ( x / ( a * b ) );\n        found = true;\n        break;\n      }\n    }\n    if ( found ) break;\n  }\n  if ( ! found ) cout << \"-1\";\n}", "target_program": " def findTriplets ( x ) :\n    fact = [ ] ;\n    factors = set ( ) ;\n    for i in range ( 2 , int ( sqrt ( x ) ) ) :\n        if ( x % i == 0 ) :\n            fact.append ( i ) ;\n            if ( x / i != i ) :\n                fact.append ( x // i ) ;\n            factors.add ( i ) ;\n            factors.add ( x // i ) ;\n    found = False ;\n    k = len ( fact ) ;\n    for i in range ( k ) :\n        a = fact [ i ] ;\n        for j in range ( k ) :\n            b = fact [ j ] ;\n            if ( ( a != b ) and ( x % ( a * b ) == 0 ) and ( x / ( a * b ) != a ) and ( x / ( a * b ) != b ) and ( x / ( a * b ) != 1 ) ) :\n                print ( a , b , x // ( a * b ) ) ;\n                found = True ;\n                break ;\n        if ( found ) :\n            break ;\n    if ( not found ) :\n        print ( \"-1\" ) ;"}
{"source": "python", "target": "java", "source_program": " def findSum ( str1 , str2 ) :\n    if len ( str1 ) > len ( str2 ) :\n        temp = str1\n        str1 = str2\n        str2 = temp\n    str3 = \"\"\n    n1 = len ( str1 )\n    n2 = len ( str2 )\n    diff = n2 - n1\n    carry = 0\n    for i in range ( n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str1 [ i ] ) - ord ( '0' ) ) + int ( ( ord ( str2 [ i + diff ] ) - ord ( '0' ) ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    for i in range ( n2 - n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str2 [ i ] ) - ord ( '0' ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    if ( carry ) :\n        str3 + str ( carry + '0' )\n    str3 = str3 [ : : - 1 ]\n    return str3", "target_program": " static String findSum ( String str1 , String str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) {\n    String t = str1 ;\n    str1 = str2 ;\n    str2 = t ;\n  }\n  String str = \"\" ;\n  int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;\n  int diff = n2 - n1 ;\n  int carry = 0 ;\n  for ( int i = n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str1 . charAt ( i ) - '0' ) + ( int ) ( str2 . charAt ( i + diff ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  for ( int i = n2 - n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str2 . charAt ( i ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  if ( carry > 0 ) str += ( char ) ( carry + '0' ) ;\n  return new StringBuilder ( str ) . reverse ( ) . toString ( ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSum ( str1 , str2 ) :\n    if len ( str1 ) > len ( str2 ) :\n        temp = str1\n        str1 = str2\n        str2 = temp\n    str3 = \"\"\n    n1 = len ( str1 )\n    n2 = len ( str2 )\n    diff = n2 - n1\n    carry = 0\n    for i in range ( n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str1 [ i ] ) - ord ( '0' ) ) + int ( ( ord ( str2 [ i + diff ] ) - ord ( '0' ) ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    for i in range ( n2 - n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str2 [ i ] ) - ord ( '0' ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    if ( carry ) :\n        str3 + str ( carry + '0' )\n    str3 = str3 [ : : - 1 ]\n    return str3", "target_program": " string findSum ( string str1, string str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1, str2 );\n  string str = \"\";\n  int n1 = str1 . length ( ), n2 = str2 . length ( );\n  int diff = n2 - n1;\n  int carry = 0;\n  for ( int i = n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i + diff ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  for ( int i = n2 - n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str2 [ i ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  if ( carry ) str . push_back ( carry + '0' );\n  reverse ( str . begin ( ), str . end ( ) );\n  return str;\n}"}
{"source": "java", "target": "python", "source_program": " static String findSum ( String str1 , String str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) {\n    String t = str1 ;\n    str1 = str2 ;\n    str2 = t ;\n  }\n  String str = \"\" ;\n  int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;\n  int diff = n2 - n1 ;\n  int carry = 0 ;\n  for ( int i = n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str1 . charAt ( i ) - '0' ) + ( int ) ( str2 . charAt ( i + diff ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  for ( int i = n2 - n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str2 . charAt ( i ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  if ( carry > 0 ) str += ( char ) ( carry + '0' ) ;\n  return new StringBuilder ( str ) . reverse ( ) . toString ( ) ;\n}", "target_program": " def findSum ( str1 , str2 ) :\n    if len ( str1 ) > len ( str2 ) :\n        temp = str1\n        str1 = str2\n        str2 = temp\n    str3 = \"\"\n    n1 = len ( str1 )\n    n2 = len ( str2 )\n    diff = n2 - n1\n    carry = 0\n    for i in range ( n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str1 [ i ] ) - ord ( '0' ) ) + int ( ( ord ( str2 [ i + diff ] ) - ord ( '0' ) ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    for i in range ( n2 - n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str2 [ i ] ) - ord ( '0' ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    if ( carry ) :\n        str3 + str ( carry + '0' )\n    str3 = str3 [ : : - 1 ]\n    return str3"}
{"source": "java", "target": "cpp", "source_program": " static String findSum ( String str1 , String str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) {\n    String t = str1 ;\n    str1 = str2 ;\n    str2 = t ;\n  }\n  String str = \"\" ;\n  int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;\n  int diff = n2 - n1 ;\n  int carry = 0 ;\n  for ( int i = n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str1 . charAt ( i ) - '0' ) + ( int ) ( str2 . charAt ( i + diff ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  for ( int i = n2 - n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str2 . charAt ( i ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  if ( carry > 0 ) str += ( char ) ( carry + '0' ) ;\n  return new StringBuilder ( str ) . reverse ( ) . toString ( ) ;\n}", "target_program": " string findSum ( string str1, string str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1, str2 );\n  string str = \"\";\n  int n1 = str1 . length ( ), n2 = str2 . length ( );\n  int diff = n2 - n1;\n  int carry = 0;\n  for ( int i = n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i + diff ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  for ( int i = n2 - n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str2 [ i ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  if ( carry ) str . push_back ( carry + '0' );\n  reverse ( str . begin ( ), str . end ( ) );\n  return str;\n}"}
{"source": "cpp", "target": "java", "source_program": " string findSum ( string str1, string str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1, str2 );\n  string str = \"\";\n  int n1 = str1 . length ( ), n2 = str2 . length ( );\n  int diff = n2 - n1;\n  int carry = 0;\n  for ( int i = n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i + diff ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  for ( int i = n2 - n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str2 [ i ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  if ( carry ) str . push_back ( carry + '0' );\n  reverse ( str . begin ( ), str . end ( ) );\n  return str;\n}", "target_program": " static String findSum ( String str1 , String str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) {\n    String t = str1 ;\n    str1 = str2 ;\n    str2 = t ;\n  }\n  String str = \"\" ;\n  int n1 = str1 . length ( ) , n2 = str2 . length ( ) ;\n  int diff = n2 - n1 ;\n  int carry = 0 ;\n  for ( int i = n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str1 . charAt ( i ) - '0' ) + ( int ) ( str2 . charAt ( i + diff ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  for ( int i = n2 - n1 - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int sum = ( ( int ) ( str2 . charAt ( i ) - '0' ) + carry ) ;\n    str += ( char ) ( sum % 10 + '0' ) ;\n    carry = sum / 10 ;\n  }\n  if ( carry > 0 ) str += ( char ) ( carry + '0' ) ;\n  return new StringBuilder ( str ) . reverse ( ) . toString ( ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " string findSum ( string str1, string str2 ) {\n  if ( str1 . length ( ) > str2 . length ( ) ) swap ( str1, str2 );\n  string str = \"\";\n  int n1 = str1 . length ( ), n2 = str2 . length ( );\n  int diff = n2 - n1;\n  int carry = 0;\n  for ( int i = n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str1 [ i ] - '0' ) + ( str2 [ i + diff ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  for ( int i = n2 - n1 - 1;\n  i >= 0;\n  i -- ) {\n    int sum = ( ( str2 [ i ] - '0' ) + carry );\n    str . push_back ( sum % 10 + '0' );\n    carry = sum / 10;\n  }\n  if ( carry ) str . push_back ( carry + '0' );\n  reverse ( str . begin ( ), str . end ( ) );\n  return str;\n}", "target_program": " def findSum ( str1 , str2 ) :\n    if len ( str1 ) > len ( str2 ) :\n        temp = str1\n        str1 = str2\n        str2 = temp\n    str3 = \"\"\n    n1 = len ( str1 )\n    n2 = len ( str2 )\n    diff = n2 - n1\n    carry = 0\n    for i in range ( n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str1 [ i ] ) - ord ( '0' ) ) + int ( ( ord ( str2 [ i + diff ] ) - ord ( '0' ) ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    for i in range ( n2 - n1 - 1 , - 1 , - 1 ) :\n        sum = ( ( ord ( str2 [ i ] ) - ord ( '0' ) ) + carry )\n        str3 = str3 + str ( sum % 10 )\n        carry = sum // 10\n    if ( carry ) :\n        str3 + str ( carry + '0' )\n    str3 = str3 [ : : - 1 ]\n    return str3"}
{"source": "python", "target": "java", "source_program": " def cocktailSort ( a ) :\n    n = len ( a )\n    swapped = True\n    start = 0\n    end = n - 1\n    while ( swapped == True ) :\n        swapped = False\n        for i in range ( start , end ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        if ( swapped == False ) :\n            break\n        swapped = False\n        end = end - 1\n        for i in range ( end - 1 , start - 1 , - 1 ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        start = start + 1", "target_program": " void cocktailSort ( int a [ ] ) {\n  boolean swapped = true ;\n  int start = 0 ;\n  int end = a . length ;\n  while ( swapped == true ) {\n    swapped = false ;\n    for ( int i = start ;\n    i < end - 1 ;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n    swapped = false ;\n    end = end - 1 ;\n    for ( int i = end - 1 ;\n    i >= start ;\n    i -- ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    start = start + 1 ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def cocktailSort ( a ) :\n    n = len ( a )\n    swapped = True\n    start = 0\n    end = n - 1\n    while ( swapped == True ) :\n        swapped = False\n        for i in range ( start , end ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        if ( swapped == False ) :\n            break\n        swapped = False\n        end = end - 1\n        for i in range ( end - 1 , start - 1 , - 1 ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        start = start + 1", "target_program": " void CocktailSort ( int a [ ], int n ) {\n  bool swapped = true;\n  int start = 0;\n  int end = n - 1;\n  while ( swapped ) {\n    swapped = false;\n    for ( int i = start;\n    i < end;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( ! swapped ) break;\n    swapped = false;\n    -- end;\n    for ( int i = end - 1;\n    i >= start;\n    -- i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    ++ start;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " void cocktailSort ( int a [ ] ) {\n  boolean swapped = true ;\n  int start = 0 ;\n  int end = a . length ;\n  while ( swapped == true ) {\n    swapped = false ;\n    for ( int i = start ;\n    i < end - 1 ;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n    swapped = false ;\n    end = end - 1 ;\n    for ( int i = end - 1 ;\n    i >= start ;\n    i -- ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    start = start + 1 ;\n  }\n}", "target_program": " def cocktailSort ( a ) :\n    n = len ( a )\n    swapped = True\n    start = 0\n    end = n - 1\n    while ( swapped == True ) :\n        swapped = False\n        for i in range ( start , end ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        if ( swapped == False ) :\n            break\n        swapped = False\n        end = end - 1\n        for i in range ( end - 1 , start - 1 , - 1 ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        start = start + 1"}
{"source": "java", "target": "cpp", "source_program": " void cocktailSort ( int a [ ] ) {\n  boolean swapped = true ;\n  int start = 0 ;\n  int end = a . length ;\n  while ( swapped == true ) {\n    swapped = false ;\n    for ( int i = start ;\n    i < end - 1 ;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n    swapped = false ;\n    end = end - 1 ;\n    for ( int i = end - 1 ;\n    i >= start ;\n    i -- ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    start = start + 1 ;\n  }\n}", "target_program": " void CocktailSort ( int a [ ], int n ) {\n  bool swapped = true;\n  int start = 0;\n  int end = n - 1;\n  while ( swapped ) {\n    swapped = false;\n    for ( int i = start;\n    i < end;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( ! swapped ) break;\n    swapped = false;\n    -- end;\n    for ( int i = end - 1;\n    i >= start;\n    -- i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    ++ start;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void CocktailSort ( int a [ ], int n ) {\n  bool swapped = true;\n  int start = 0;\n  int end = n - 1;\n  while ( swapped ) {\n    swapped = false;\n    for ( int i = start;\n    i < end;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( ! swapped ) break;\n    swapped = false;\n    -- end;\n    for ( int i = end - 1;\n    i >= start;\n    -- i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    ++ start;\n  }\n}", "target_program": " void cocktailSort ( int a [ ] ) {\n  boolean swapped = true ;\n  int start = 0 ;\n  int end = a . length ;\n  while ( swapped == true ) {\n    swapped = false ;\n    for ( int i = start ;\n    i < end - 1 ;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    if ( swapped == false ) break ;\n    swapped = false ;\n    end = end - 1 ;\n    for ( int i = end - 1 ;\n    i >= start ;\n    i -- ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        int temp = a [ i ] ;\n        a [ i ] = a [ i + 1 ] ;\n        a [ i + 1 ] = temp ;\n        swapped = true ;\n      }\n    }\n    start = start + 1 ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void CocktailSort ( int a [ ], int n ) {\n  bool swapped = true;\n  int start = 0;\n  int end = n - 1;\n  while ( swapped ) {\n    swapped = false;\n    for ( int i = start;\n    i < end;\n    ++ i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    if ( ! swapped ) break;\n    swapped = false;\n    -- end;\n    for ( int i = end - 1;\n    i >= start;\n    -- i ) {\n      if ( a [ i ] > a [ i + 1 ] ) {\n        swap ( a [ i ], a [ i + 1 ] );\n        swapped = true;\n      }\n    }\n    ++ start;\n  }\n}", "target_program": " def cocktailSort ( a ) :\n    n = len ( a )\n    swapped = True\n    start = 0\n    end = n - 1\n    while ( swapped == True ) :\n        swapped = False\n        for i in range ( start , end ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        if ( swapped == False ) :\n            break\n        swapped = False\n        end = end - 1\n        for i in range ( end - 1 , start - 1 , - 1 ) :\n            if ( a [ i ] > a [ i + 1 ] ) :\n                a [ i ] , a [ i + 1 ] = a [ i + 1 ] , a [ i ]\n                swapped = True\n        start = start + 1"}
{"source": "python", "target": "java", "source_program": " def countDer ( n ) :\n    der = [ 0 for i in range ( n + 1 ) ]\n    der [ 0 ] = 1\n    der [ 1 ] = 0\n    der [ 2 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] )\n    return der [ n ]", "target_program": " static int countDer ( int n ) {\n  int der [ ] = new int [ n + 1 ] ;\n  der [ 0 ] = 1 ;\n  der [ 1 ] = 0 ;\n  der [ 2 ] = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) ;\n  return der [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countDer ( n ) :\n    der = [ 0 for i in range ( n + 1 ) ]\n    der [ 0 ] = 1\n    der [ 1 ] = 0\n    der [ 2 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] )\n    return der [ n ]", "target_program": " int countDer ( int n ) {\n  int der [ n + 1 ];\n  der [ 0 ] = 1;\n  der [ 1 ] = 0;\n  der [ 2 ] = 1;\n  for ( int i = 3;\n  i <= n;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] );\n  return der [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countDer ( int n ) {\n  int der [ ] = new int [ n + 1 ] ;\n  der [ 0 ] = 1 ;\n  der [ 1 ] = 0 ;\n  der [ 2 ] = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) ;\n  return der [ n ] ;\n}", "target_program": " def countDer ( n ) :\n    der = [ 0 for i in range ( n + 1 ) ]\n    der [ 0 ] = 1\n    der [ 1 ] = 0\n    der [ 2 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] )\n    return der [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countDer ( int n ) {\n  int der [ ] = new int [ n + 1 ] ;\n  der [ 0 ] = 1 ;\n  der [ 1 ] = 0 ;\n  der [ 2 ] = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) ;\n  return der [ n ] ;\n}", "target_program": " int countDer ( int n ) {\n  int der [ n + 1 ];\n  der [ 0 ] = 1;\n  der [ 1 ] = 0;\n  der [ 2 ] = 1;\n  for ( int i = 3;\n  i <= n;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] );\n  return der [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countDer ( int n ) {\n  int der [ n + 1 ];\n  der [ 0 ] = 1;\n  der [ 1 ] = 0;\n  der [ 2 ] = 1;\n  for ( int i = 3;\n  i <= n;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] );\n  return der [ n ];\n}", "target_program": " static int countDer ( int n ) {\n  int der [ ] = new int [ n + 1 ] ;\n  der [ 0 ] = 1 ;\n  der [ 1 ] = 0 ;\n  der [ 2 ] = 1 ;\n  for ( int i = 3 ;\n  i <= n ;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] ) ;\n  return der [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countDer ( int n ) {\n  int der [ n + 1 ];\n  der [ 0 ] = 1;\n  der [ 1 ] = 0;\n  der [ 2 ] = 1;\n  for ( int i = 3;\n  i <= n;\n  ++ i ) der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] );\n  return der [ n ];\n}", "target_program": " def countDer ( n ) :\n    der = [ 0 for i in range ( n + 1 ) ]\n    der [ 0 ] = 1\n    der [ 1 ] = 0\n    der [ 2 ] = 1\n    for i in range ( 3 , n + 1 ) :\n        der [ i ] = ( i - 1 ) * ( der [ i - 1 ] + der [ i - 2 ] )\n    return der [ n ]"}
{"source": "python", "target": "java", "source_program": " def findMaxProduct ( arr , n ) :\n    ans = - float ( 'inf' )\n    maxval = 1\n    minval = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] > 0 :\n            maxval = maxval * arr [ i ]\n            minval = min ( 1 , minval * arr [ i ] )\n        elif arr [ i ] == 0 :\n            minval = 1\n            maxval = 0\n        elif arr [ i ] < 0 :\n            prevMax = maxval\n            maxval = minval * arr [ i ]\n            minval = prevMax * arr [ i ]\n        ans = max ( ans , maxval )\n        if maxval <= 0 :\n            maxval = 1\n    return ans", "target_program": " static int findMaxProduct ( int arr [ ] , int n ) {\n  int i ;\n  int ans = Integer . MIN_VALUE ;\n  int maxval = 1 ;\n  int minval = 1 ;\n  int prevMax ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ] ;\n      minval = Math . min ( 1 , minval * arr [ i ] ) ;\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1 ;\n      maxval = 0 ;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval ;\n      maxval = minval * arr [ i ] ;\n      minval = prevMax * arr [ i ] ;\n    }\n    ans = Math . max ( ans , maxval ) ;\n    if ( maxval <= 0 ) {\n      maxval = 1 ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findMaxProduct ( arr , n ) :\n    ans = - float ( 'inf' )\n    maxval = 1\n    minval = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] > 0 :\n            maxval = maxval * arr [ i ]\n            minval = min ( 1 , minval * arr [ i ] )\n        elif arr [ i ] == 0 :\n            minval = 1\n            maxval = 0\n        elif arr [ i ] < 0 :\n            prevMax = maxval\n            maxval = minval * arr [ i ]\n            minval = prevMax * arr [ i ]\n        ans = max ( ans , maxval )\n        if maxval <= 0 :\n            maxval = 1\n    return ans", "target_program": " int findMaxProduct ( int arr [ ], int n ) {\n  int i;\n  int ans = INT_MIN;\n  int maxval = 1;\n  int minval = 1;\n  int prevMax;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ];\n      minval = min ( 1, minval * arr [ i ] );\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1;\n      maxval = 0;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval;\n      maxval = minval * arr [ i ];\n      minval = prevMax * arr [ i ];\n    }\n    ans = max ( ans, maxval );\n    if ( maxval <= 0 ) {\n      maxval = 1;\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int findMaxProduct ( int arr [ ] , int n ) {\n  int i ;\n  int ans = Integer . MIN_VALUE ;\n  int maxval = 1 ;\n  int minval = 1 ;\n  int prevMax ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ] ;\n      minval = Math . min ( 1 , minval * arr [ i ] ) ;\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1 ;\n      maxval = 0 ;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval ;\n      maxval = minval * arr [ i ] ;\n      minval = prevMax * arr [ i ] ;\n    }\n    ans = Math . max ( ans , maxval ) ;\n    if ( maxval <= 0 ) {\n      maxval = 1 ;\n    }\n  }\n  return ans ;\n}", "target_program": " def findMaxProduct ( arr , n ) :\n    ans = - float ( 'inf' )\n    maxval = 1\n    minval = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] > 0 :\n            maxval = maxval * arr [ i ]\n            minval = min ( 1 , minval * arr [ i ] )\n        elif arr [ i ] == 0 :\n            minval = 1\n            maxval = 0\n        elif arr [ i ] < 0 :\n            prevMax = maxval\n            maxval = minval * arr [ i ]\n            minval = prevMax * arr [ i ]\n        ans = max ( ans , maxval )\n        if maxval <= 0 :\n            maxval = 1\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int findMaxProduct ( int arr [ ] , int n ) {\n  int i ;\n  int ans = Integer . MIN_VALUE ;\n  int maxval = 1 ;\n  int minval = 1 ;\n  int prevMax ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ] ;\n      minval = Math . min ( 1 , minval * arr [ i ] ) ;\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1 ;\n      maxval = 0 ;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval ;\n      maxval = minval * arr [ i ] ;\n      minval = prevMax * arr [ i ] ;\n    }\n    ans = Math . max ( ans , maxval ) ;\n    if ( maxval <= 0 ) {\n      maxval = 1 ;\n    }\n  }\n  return ans ;\n}", "target_program": " int findMaxProduct ( int arr [ ], int n ) {\n  int i;\n  int ans = INT_MIN;\n  int maxval = 1;\n  int minval = 1;\n  int prevMax;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ];\n      minval = min ( 1, minval * arr [ i ] );\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1;\n      maxval = 0;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval;\n      maxval = minval * arr [ i ];\n      minval = prevMax * arr [ i ];\n    }\n    ans = max ( ans, maxval );\n    if ( maxval <= 0 ) {\n      maxval = 1;\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findMaxProduct ( int arr [ ], int n ) {\n  int i;\n  int ans = INT_MIN;\n  int maxval = 1;\n  int minval = 1;\n  int prevMax;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ];\n      minval = min ( 1, minval * arr [ i ] );\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1;\n      maxval = 0;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval;\n      maxval = minval * arr [ i ];\n      minval = prevMax * arr [ i ];\n    }\n    ans = max ( ans, maxval );\n    if ( maxval <= 0 ) {\n      maxval = 1;\n    }\n  }\n  return ans;\n}", "target_program": " static int findMaxProduct ( int arr [ ] , int n ) {\n  int i ;\n  int ans = Integer . MIN_VALUE ;\n  int maxval = 1 ;\n  int minval = 1 ;\n  int prevMax ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ] ;\n      minval = Math . min ( 1 , minval * arr [ i ] ) ;\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1 ;\n      maxval = 0 ;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval ;\n      maxval = minval * arr [ i ] ;\n      minval = prevMax * arr [ i ] ;\n    }\n    ans = Math . max ( ans , maxval ) ;\n    if ( maxval <= 0 ) {\n      maxval = 1 ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findMaxProduct ( int arr [ ], int n ) {\n  int i;\n  int ans = INT_MIN;\n  int maxval = 1;\n  int minval = 1;\n  int prevMax;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( arr [ i ] > 0 ) {\n      maxval = maxval * arr [ i ];\n      minval = min ( 1, minval * arr [ i ] );\n    }\n    else if ( arr [ i ] == 0 ) {\n      minval = 1;\n      maxval = 0;\n    }\n    else if ( arr [ i ] < 0 ) {\n      prevMax = maxval;\n      maxval = minval * arr [ i ];\n      minval = prevMax * arr [ i ];\n    }\n    ans = max ( ans, maxval );\n    if ( maxval <= 0 ) {\n      maxval = 1;\n    }\n  }\n  return ans;\n}", "target_program": " def findMaxProduct ( arr , n ) :\n    ans = - float ( 'inf' )\n    maxval = 1\n    minval = 1\n    for i in range ( 0 , n ) :\n        if arr [ i ] > 0 :\n            maxval = maxval * arr [ i ]\n            minval = min ( 1 , minval * arr [ i ] )\n        elif arr [ i ] == 0 :\n            minval = 1\n            maxval = 0\n        elif arr [ i ] < 0 :\n            prevMax = maxval\n            maxval = minval * arr [ i ]\n            minval = prevMax * arr [ i ]\n        ans = max ( ans , maxval )\n        if maxval <= 0 :\n            maxval = 1\n    return ans"}
{"source": "python", "target": "java", "source_program": " def assign ( a , n ) :\n    a.sort ( )\n    ans = [ 0 ] * n\n    p = 0\n    q = n - 1\n    for i in range ( n ) :\n        if ( i + 1 ) % 2 == 0 :\n            ans [ i ] = a [ q ]\n            q = q - 1\n        else :\n            ans [ i ] = a [ p ]\n            p = p + 1\n    for i in range ( n ) :\n        print ( ans [ i ] , end = \" \" )", "target_program": " static void assign ( int a [ ] , int n ) {\n  Arrays . sort ( a ) ;\n  int ans [ ] = new int [ n ] ;\n  int p = 0 , q = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;\n    else ans [ i ] = a [ p ++ ] ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def assign ( a , n ) :\n    a.sort ( )\n    ans = [ 0 ] * n\n    p = 0\n    q = n - 1\n    for i in range ( n ) :\n        if ( i + 1 ) % 2 == 0 :\n            ans [ i ] = a [ q ]\n            q = q - 1\n        else :\n            ans [ i ] = a [ p ]\n            p = p + 1\n    for i in range ( n ) :\n        print ( ans [ i ] , end = \" \" )", "target_program": " void assign ( int a [ ], int n ) {\n  sort ( a, a + n );\n  int ans [ n ];\n  int p = 0, q = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ];\n    else ans [ i ] = a [ p ++ ];\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << ans [ i ] << \" \";\n}"}
{"source": "java", "target": "python", "source_program": " static void assign ( int a [ ] , int n ) {\n  Arrays . sort ( a ) ;\n  int ans [ ] = new int [ n ] ;\n  int p = 0 , q = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;\n    else ans [ i ] = a [ p ++ ] ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}", "target_program": " def assign ( a , n ) :\n    a.sort ( )\n    ans = [ 0 ] * n\n    p = 0\n    q = n - 1\n    for i in range ( n ) :\n        if ( i + 1 ) % 2 == 0 :\n            ans [ i ] = a [ q ]\n            q = q - 1\n        else :\n            ans [ i ] = a [ p ]\n            p = p + 1\n    for i in range ( n ) :\n        print ( ans [ i ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void assign ( int a [ ] , int n ) {\n  Arrays . sort ( a ) ;\n  int ans [ ] = new int [ n ] ;\n  int p = 0 , q = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;\n    else ans [ i ] = a [ p ++ ] ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}", "target_program": " void assign ( int a [ ], int n ) {\n  sort ( a, a + n );\n  int ans [ n ];\n  int p = 0, q = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ];\n    else ans [ i ] = a [ p ++ ];\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << ans [ i ] << \" \";\n}"}
{"source": "cpp", "target": "java", "source_program": " void assign ( int a [ ], int n ) {\n  sort ( a, a + n );\n  int ans [ n ];\n  int p = 0, q = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ];\n    else ans [ i ] = a [ p ++ ];\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << ans [ i ] << \" \";\n}", "target_program": " static void assign ( int a [ ] , int n ) {\n  Arrays . sort ( a ) ;\n  int ans [ ] = new int [ n ] ;\n  int p = 0 , q = n - 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ] ;\n    else ans [ i ] = a [ p ++ ] ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) System . out . print ( ans [ i ] + \" \" ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void assign ( int a [ ], int n ) {\n  sort ( a, a + n );\n  int ans [ n ];\n  int p = 0, q = n - 1;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( ( i + 1 ) % 2 == 0 ) ans [ i ] = a [ q -- ];\n    else ans [ i ] = a [ p ++ ];\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) cout << ans [ i ] << \" \";\n}", "target_program": " def assign ( a , n ) :\n    a.sort ( )\n    ans = [ 0 ] * n\n    p = 0\n    q = n - 1\n    for i in range ( n ) :\n        if ( i + 1 ) % 2 == 0 :\n            ans [ i ] = a [ q ]\n            q = q - 1\n        else :\n            ans [ i ] = a [ p ]\n            p = p + 1\n    for i in range ( n ) :\n        print ( ans [ i ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        if ( i <= 2 ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n    return dp [ n ]", "target_program": " static int countFriendsPairings ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i ;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  }\n  return dp [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        if ( i <= 2 ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n    return dp [ n ]", "target_program": " int countFriendsPairings ( int n ) {\n  int dp [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  }\n  return dp [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " static int countFriendsPairings ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i ;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  }\n  return dp [ n ] ;\n}", "target_program": " def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        if ( i <= 2 ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n    return dp [ n ]"}
{"source": "java", "target": "cpp", "source_program": " static int countFriendsPairings ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i ;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  }\n  return dp [ n ] ;\n}", "target_program": " int countFriendsPairings ( int n ) {\n  int dp [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  }\n  return dp [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int countFriendsPairings ( int n ) {\n  int dp [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  }\n  return dp [ n ];\n}", "target_program": " static int countFriendsPairings ( int n ) {\n  int dp [ ] = new int [ n + 1 ] ;\n  for ( int i = 0 ;\n  i <= n ;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i ;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ] ;\n  }\n  return dp [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countFriendsPairings ( int n ) {\n  int dp [ n + 1 ];\n  for ( int i = 0;\n  i <= n;\n  i ++ ) {\n    if ( i <= 2 ) dp [ i ] = i;\n    else dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ];\n  }\n  return dp [ n ];\n}", "target_program": " def countFriendsPairings ( n ) :\n    dp = [ 0 for i in range ( n + 1 ) ]\n    for i in range ( n + 1 ) :\n        if ( i <= 2 ) :\n            dp [ i ] = i\n        else :\n            dp [ i ] = dp [ i - 1 ] + ( i - 1 ) * dp [ i - 2 ]\n    return dp [ n ]"}
{"source": "python", "target": "java", "source_program": " def isPrime ( n ) :\n    if ( n <= 1 ) :\n        return False\n    for i in range ( 2 , n ) :\n        if ( n % i == 0 ) :\n            return False\n    return True", "target_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPrime ( n ) :\n    if ( n <= 1 ) :\n        return False\n    for i in range ( 2 , n ) :\n        if ( n % i == 0 ) :\n            return False\n    return True", "target_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}", "target_program": " def isPrime ( n ) :\n    if ( n <= 1 ) :\n        return False\n    for i in range ( 2 , n ) :\n        if ( n % i == 0 ) :\n            return False\n    return True"}
{"source": "java", "target": "cpp", "source_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}", "target_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}", "target_program": " static boolean isPrime ( int n ) {\n  if ( n <= 1 ) return false ;\n  for ( int i = 2 ;\n  i < n ;\n  i ++ ) if ( n % i == 0 ) return false ;\n  return true ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPrime ( int n ) {\n  if ( n <= 1 ) return false;\n  for ( int i = 2;\n  i < n;\n  i ++ ) if ( n % i == 0 ) return false;\n  return true;\n}", "target_program": " def isPrime ( n ) :\n    if ( n <= 1 ) :\n        return False\n    for i in range ( 2 , n ) :\n        if ( n % i == 0 ) :\n            return False\n    return True"}
{"source": "python", "target": "java", "source_program": " def find_prob ( N , P ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 1\n    dp [ 1 ] = 0\n    dp [ 2 ] = P\n    dp [ 3 ] = 1 - P\n    for i in range ( 4 , N + 1 ) :\n        dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ]\n    return dp [ N ]", "target_program": " static float find_prob ( int N , float P ) {\n  double dp [ ] = new double [ N + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 0 ;\n  dp [ 2 ] = P ;\n  dp [ 3 ] = 1 - P ;\n  for ( int i = 4 ;\n  i <= N ;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ;\n  return ( ( float ) ( dp [ N ] ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def find_prob ( N , P ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 1\n    dp [ 1 ] = 0\n    dp [ 2 ] = P\n    dp [ 3 ] = 1 - P\n    for i in range ( 4 , N + 1 ) :\n        dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ]\n    return dp [ N ]", "target_program": " float find_prob ( int N, float P ) {\n  double dp [ N + 1 ];\n  dp [ 0 ] = 1;\n  dp [ 1 ] = 0;\n  dp [ 2 ] = P;\n  dp [ 3 ] = 1 - P;\n  for ( int i = 4;\n  i <= N;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ];\n  return dp [ N ];\n}"}
{"source": "java", "target": "python", "source_program": " static float find_prob ( int N , float P ) {\n  double dp [ ] = new double [ N + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 0 ;\n  dp [ 2 ] = P ;\n  dp [ 3 ] = 1 - P ;\n  for ( int i = 4 ;\n  i <= N ;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ;\n  return ( ( float ) ( dp [ N ] ) ) ;\n}", "target_program": " def find_prob ( N , P ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 1\n    dp [ 1 ] = 0\n    dp [ 2 ] = P\n    dp [ 3 ] = 1 - P\n    for i in range ( 4 , N + 1 ) :\n        dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ]\n    return dp [ N ]"}
{"source": "java", "target": "cpp", "source_program": " static float find_prob ( int N , float P ) {\n  double dp [ ] = new double [ N + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 0 ;\n  dp [ 2 ] = P ;\n  dp [ 3 ] = 1 - P ;\n  for ( int i = 4 ;\n  i <= N ;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ;\n  return ( ( float ) ( dp [ N ] ) ) ;\n}", "target_program": " float find_prob ( int N, float P ) {\n  double dp [ N + 1 ];\n  dp [ 0 ] = 1;\n  dp [ 1 ] = 0;\n  dp [ 2 ] = P;\n  dp [ 3 ] = 1 - P;\n  for ( int i = 4;\n  i <= N;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ];\n  return dp [ N ];\n}"}
{"source": "cpp", "target": "java", "source_program": " float find_prob ( int N, float P ) {\n  double dp [ N + 1 ];\n  dp [ 0 ] = 1;\n  dp [ 1 ] = 0;\n  dp [ 2 ] = P;\n  dp [ 3 ] = 1 - P;\n  for ( int i = 4;\n  i <= N;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ];\n  return dp [ N ];\n}", "target_program": " static float find_prob ( int N , float P ) {\n  double dp [ ] = new double [ N + 1 ] ;\n  dp [ 0 ] = 1 ;\n  dp [ 1 ] = 0 ;\n  dp [ 2 ] = P ;\n  dp [ 3 ] = 1 - P ;\n  for ( int i = 4 ;\n  i <= N ;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ] ;\n  return ( ( float ) ( dp [ N ] ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " float find_prob ( int N, float P ) {\n  double dp [ N + 1 ];\n  dp [ 0 ] = 1;\n  dp [ 1 ] = 0;\n  dp [ 2 ] = P;\n  dp [ 3 ] = 1 - P;\n  for ( int i = 4;\n  i <= N;\n  ++ i ) dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ];\n  return dp [ N ];\n}", "target_program": " def find_prob ( N , P ) :\n    dp = [ 0 ] * ( n + 1 )\n    dp [ 0 ] = 1\n    dp [ 1 ] = 0\n    dp [ 2 ] = P\n    dp [ 3 ] = 1 - P\n    for i in range ( 4 , N + 1 ) :\n        dp [ i ] = ( P ) * dp [ i - 2 ] + ( 1 - P ) * dp [ i - 3 ]\n    return dp [ N ]"}
{"source": "python", "target": "java", "source_program": " def smallest ( x , y , z ) :\n    if ( not ( y / x ) ) :\n        return y if ( not ( y / z ) ) else z\n    return x if ( not ( x / z ) ) else z", "target_program": " static int smallest ( int x , int y , int z ) {\n  if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;\n  return ( ( x / z ) != 1 ) ? x : z ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def smallest ( x , y , z ) :\n    if ( not ( y / x ) ) :\n        return y if ( not ( y / z ) ) else z\n    return x if ( not ( x / z ) ) else z", "target_program": " int smallest ( int x, int y, int z ) {\n  if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z;\n  return ( ! ( x / z ) ) ? x : z;\n}"}
{"source": "java", "target": "python", "source_program": " static int smallest ( int x , int y , int z ) {\n  if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;\n  return ( ( x / z ) != 1 ) ? x : z ;\n}", "target_program": " def smallest ( x , y , z ) :\n    if ( not ( y / x ) ) :\n        return y if ( not ( y / z ) ) else z\n    return x if ( not ( x / z ) ) else z"}
{"source": "java", "target": "cpp", "source_program": " static int smallest ( int x , int y , int z ) {\n  if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;\n  return ( ( x / z ) != 1 ) ? x : z ;\n}", "target_program": " int smallest ( int x, int y, int z ) {\n  if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z;\n  return ( ! ( x / z ) ) ? x : z;\n}"}
{"source": "cpp", "target": "java", "source_program": " int smallest ( int x, int y, int z ) {\n  if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z;\n  return ( ! ( x / z ) ) ? x : z;\n}", "target_program": " static int smallest ( int x , int y , int z ) {\n  if ( ( y / x ) != 1 ) return ( ( y / z ) != 1 ) ? y : z ;\n  return ( ( x / z ) != 1 ) ? x : z ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int smallest ( int x, int y, int z ) {\n  if ( ! ( y / x ) ) return ( ! ( y / z ) ) ? y : z;\n  return ( ! ( x / z ) ) ? x : z;\n}", "target_program": " def smallest ( x , y , z ) :\n    if ( not ( y / x ) ) :\n        return y if ( not ( y / z ) ) else z\n    return x if ( not ( x / z ) ) else z"}
{"source": "python", "target": "java", "source_program": " def printCommonElements ( mat ) :\n    mp = dict ( )\n    for j in range ( N ) :\n        mp [ mat [ 0 ] [ j ] ] = 1\n    for i in range ( 1 , M ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] in mp.keys ( ) and mp [ mat [ i ] [ j ] ] == i ) :\n                mp [ mat [ i ] [ j ] ] = i + 1\n                if i == M - 1 :\n                    print ( mat [ i ] [ j ] , end = \" \" )", "target_program": " static void printCommonElements ( int mat [ ] [ ] ) {\n  Map < Integer , Integer > mp = new HashMap < > ( ) ;\n  for ( int j = 0 ;\n  j < N ;\n  j ++ ) mp . put ( mat [ 0 ] [ j ] , 1 ) ;\n  for ( int i = 1 ;\n  i < M ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      if ( mp . get ( mat [ i ] [ j ] ) != null && mp . get ( mat [ i ] [ j ] ) == i ) {\n        mp . put ( mat [ i ] [ j ] , i + 1 ) ;\n        if ( i == M - 1 ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n      }\n    }\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def printCommonElements ( mat ) :\n    mp = dict ( )\n    for j in range ( N ) :\n        mp [ mat [ 0 ] [ j ] ] = 1\n    for i in range ( 1 , M ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] in mp.keys ( ) and mp [ mat [ i ] [ j ] ] == i ) :\n                mp [ mat [ i ] [ j ] ] = i + 1\n                if i == M - 1 :\n                    print ( mat [ i ] [ j ] , end = \" \" )", "target_program": " void printCommonElements ( int mat [ M ] [ N ] ) {\n  unordered_map < int, int > mp;\n  for ( int j = 0;\n  j < N;\n  j ++ ) mp [ mat [ 0 ] [ j ] ] = 1;\n  for ( int i = 1;\n  i < M;\n  i ++ ) {\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      if ( mp [ mat [ i ] [ j ] ] == i ) {\n        mp [ mat [ i ] [ j ] ] = i + 1;\n        if ( i == M - 1 ) cout << mat [ i ] [ j ] << \" \";\n      }\n    }\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void printCommonElements ( int mat [ ] [ ] ) {\n  Map < Integer , Integer > mp = new HashMap < > ( ) ;\n  for ( int j = 0 ;\n  j < N ;\n  j ++ ) mp . put ( mat [ 0 ] [ j ] , 1 ) ;\n  for ( int i = 1 ;\n  i < M ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      if ( mp . get ( mat [ i ] [ j ] ) != null && mp . get ( mat [ i ] [ j ] ) == i ) {\n        mp . put ( mat [ i ] [ j ] , i + 1 ) ;\n        if ( i == M - 1 ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n      }\n    }\n  }\n}", "target_program": " def printCommonElements ( mat ) :\n    mp = dict ( )\n    for j in range ( N ) :\n        mp [ mat [ 0 ] [ j ] ] = 1\n    for i in range ( 1 , M ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] in mp.keys ( ) and mp [ mat [ i ] [ j ] ] == i ) :\n                mp [ mat [ i ] [ j ] ] = i + 1\n                if i == M - 1 :\n                    print ( mat [ i ] [ j ] , end = \" \" )"}
{"source": "java", "target": "cpp", "source_program": " static void printCommonElements ( int mat [ ] [ ] ) {\n  Map < Integer , Integer > mp = new HashMap < > ( ) ;\n  for ( int j = 0 ;\n  j < N ;\n  j ++ ) mp . put ( mat [ 0 ] [ j ] , 1 ) ;\n  for ( int i = 1 ;\n  i < M ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      if ( mp . get ( mat [ i ] [ j ] ) != null && mp . get ( mat [ i ] [ j ] ) == i ) {\n        mp . put ( mat [ i ] [ j ] , i + 1 ) ;\n        if ( i == M - 1 ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n      }\n    }\n  }\n}", "target_program": " void printCommonElements ( int mat [ M ] [ N ] ) {\n  unordered_map < int, int > mp;\n  for ( int j = 0;\n  j < N;\n  j ++ ) mp [ mat [ 0 ] [ j ] ] = 1;\n  for ( int i = 1;\n  i < M;\n  i ++ ) {\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      if ( mp [ mat [ i ] [ j ] ] == i ) {\n        mp [ mat [ i ] [ j ] ] = i + 1;\n        if ( i == M - 1 ) cout << mat [ i ] [ j ] << \" \";\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void printCommonElements ( int mat [ M ] [ N ] ) {\n  unordered_map < int, int > mp;\n  for ( int j = 0;\n  j < N;\n  j ++ ) mp [ mat [ 0 ] [ j ] ] = 1;\n  for ( int i = 1;\n  i < M;\n  i ++ ) {\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      if ( mp [ mat [ i ] [ j ] ] == i ) {\n        mp [ mat [ i ] [ j ] ] = i + 1;\n        if ( i == M - 1 ) cout << mat [ i ] [ j ] << \" \";\n      }\n    }\n  }\n}", "target_program": " static void printCommonElements ( int mat [ ] [ ] ) {\n  Map < Integer , Integer > mp = new HashMap < > ( ) ;\n  for ( int j = 0 ;\n  j < N ;\n  j ++ ) mp . put ( mat [ 0 ] [ j ] , 1 ) ;\n  for ( int i = 1 ;\n  i < M ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < N ;\n    j ++ ) {\n      if ( mp . get ( mat [ i ] [ j ] ) != null && mp . get ( mat [ i ] [ j ] ) == i ) {\n        mp . put ( mat [ i ] [ j ] , i + 1 ) ;\n        if ( i == M - 1 ) System . out . print ( mat [ i ] [ j ] + \" \" ) ;\n      }\n    }\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void printCommonElements ( int mat [ M ] [ N ] ) {\n  unordered_map < int, int > mp;\n  for ( int j = 0;\n  j < N;\n  j ++ ) mp [ mat [ 0 ] [ j ] ] = 1;\n  for ( int i = 1;\n  i < M;\n  i ++ ) {\n    for ( int j = 0;\n    j < N;\n    j ++ ) {\n      if ( mp [ mat [ i ] [ j ] ] == i ) {\n        mp [ mat [ i ] [ j ] ] = i + 1;\n        if ( i == M - 1 ) cout << mat [ i ] [ j ] << \" \";\n      }\n    }\n  }\n}", "target_program": " def printCommonElements ( mat ) :\n    mp = dict ( )\n    for j in range ( N ) :\n        mp [ mat [ 0 ] [ j ] ] = 1\n    for i in range ( 1 , M ) :\n        for j in range ( N ) :\n            if ( mat [ i ] [ j ] in mp.keys ( ) and mp [ mat [ i ] [ j ] ] == i ) :\n                mp [ mat [ i ] [ j ] ] = i + 1\n                if i == M - 1 :\n                    print ( mat [ i ] [ j ] , end = \" \" )"}
{"source": "python", "target": "java", "source_program": " def negCyclefloydWarshall ( graph ) :\n    dist = [ [ 0 for i in range ( V + 1 ) ] for j in range ( V + 1 ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            dist [ i ] [ j ] = graph [ i ] [ j ]\n    for k in range ( V ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) :\n                    dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ]\n    for i in range ( V ) :\n        if ( dist [ i ] [ i ] < 0 ) :\n            return True\n    return False", "target_program": " static boolean negCyclefloydWarshall ( int graph [ ] [ ] ) {\n  int dist [ ] [ ] = new int [ V ] [ V ] , i , j , k ;\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) for ( j = 0 ;\n  j < V ;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ] ;\n  for ( k = 0 ;\n  k < V ;\n  k ++ ) {\n    for ( i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( j = 0 ;\n      j < V ;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ;\n      }\n    }\n  }\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true ;\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def negCyclefloydWarshall ( graph ) :\n    dist = [ [ 0 for i in range ( V + 1 ) ] for j in range ( V + 1 ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            dist [ i ] [ j ] = graph [ i ] [ j ]\n    for k in range ( V ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) :\n                    dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ]\n    for i in range ( V ) :\n        if ( dist [ i ] [ i ] < 0 ) :\n            return True\n    return False", "target_program": " bool negCyclefloydWarshall ( int graph [ ] [ V ] ) {\n  int dist [ V ] [ V ], i, j, k;\n  for ( i = 0;\n  i < V;\n  i ++ ) for ( j = 0;\n  j < V;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ];\n  for ( k = 0;\n  k < V;\n  k ++ ) {\n    for ( i = 0;\n    i < V;\n    i ++ ) {\n      for ( j = 0;\n      j < V;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ];\n      }\n    }\n  }\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true;\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean negCyclefloydWarshall ( int graph [ ] [ ] ) {\n  int dist [ ] [ ] = new int [ V ] [ V ] , i , j , k ;\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) for ( j = 0 ;\n  j < V ;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ] ;\n  for ( k = 0 ;\n  k < V ;\n  k ++ ) {\n    for ( i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( j = 0 ;\n      j < V ;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ;\n      }\n    }\n  }\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true ;\n  return false ;\n}", "target_program": " def negCyclefloydWarshall ( graph ) :\n    dist = [ [ 0 for i in range ( V + 1 ) ] for j in range ( V + 1 ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            dist [ i ] [ j ] = graph [ i ] [ j ]\n    for k in range ( V ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) :\n                    dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ]\n    for i in range ( V ) :\n        if ( dist [ i ] [ i ] < 0 ) :\n            return True\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean negCyclefloydWarshall ( int graph [ ] [ ] ) {\n  int dist [ ] [ ] = new int [ V ] [ V ] , i , j , k ;\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) for ( j = 0 ;\n  j < V ;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ] ;\n  for ( k = 0 ;\n  k < V ;\n  k ++ ) {\n    for ( i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( j = 0 ;\n      j < V ;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ;\n      }\n    }\n  }\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true ;\n  return false ;\n}", "target_program": " bool negCyclefloydWarshall ( int graph [ ] [ V ] ) {\n  int dist [ V ] [ V ], i, j, k;\n  for ( i = 0;\n  i < V;\n  i ++ ) for ( j = 0;\n  j < V;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ];\n  for ( k = 0;\n  k < V;\n  k ++ ) {\n    for ( i = 0;\n    i < V;\n    i ++ ) {\n      for ( j = 0;\n      j < V;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ];\n      }\n    }\n  }\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true;\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool negCyclefloydWarshall ( int graph [ ] [ V ] ) {\n  int dist [ V ] [ V ], i, j, k;\n  for ( i = 0;\n  i < V;\n  i ++ ) for ( j = 0;\n  j < V;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ];\n  for ( k = 0;\n  k < V;\n  k ++ ) {\n    for ( i = 0;\n    i < V;\n    i ++ ) {\n      for ( j = 0;\n      j < V;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ];\n      }\n    }\n  }\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true;\n  return false;\n}", "target_program": " static boolean negCyclefloydWarshall ( int graph [ ] [ ] ) {\n  int dist [ ] [ ] = new int [ V ] [ V ] , i , j , k ;\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) for ( j = 0 ;\n  j < V ;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ] ;\n  for ( k = 0 ;\n  k < V ;\n  k ++ ) {\n    for ( i = 0 ;\n    i < V ;\n    i ++ ) {\n      for ( j = 0 ;\n      j < V ;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ] ;\n      }\n    }\n  }\n  for ( i = 0 ;\n  i < V ;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true ;\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool negCyclefloydWarshall ( int graph [ ] [ V ] ) {\n  int dist [ V ] [ V ], i, j, k;\n  for ( i = 0;\n  i < V;\n  i ++ ) for ( j = 0;\n  j < V;\n  j ++ ) dist [ i ] [ j ] = graph [ i ] [ j ];\n  for ( k = 0;\n  k < V;\n  k ++ ) {\n    for ( i = 0;\n    i < V;\n    i ++ ) {\n      for ( j = 0;\n      j < V;\n      j ++ ) {\n        if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ];\n      }\n    }\n  }\n  for ( int i = 0;\n  i < V;\n  i ++ ) if ( dist [ i ] [ i ] < 0 ) return true;\n  return false;\n}", "target_program": " def negCyclefloydWarshall ( graph ) :\n    dist = [ [ 0 for i in range ( V + 1 ) ] for j in range ( V + 1 ) ]\n    for i in range ( V ) :\n        for j in range ( V ) :\n            dist [ i ] [ j ] = graph [ i ] [ j ]\n    for k in range ( V ) :\n        for i in range ( V ) :\n            for j in range ( V ) :\n                if ( dist [ i ] [ k ] + dist [ k ] [ j ] < dist [ i ] [ j ] ) :\n                    dist [ i ] [ j ] = dist [ i ] [ k ] + dist [ k ] [ j ]\n    for i in range ( V ) :\n        if ( dist [ i ] [ i ] < 0 ) :\n            return True\n    return False"}
{"source": "python", "target": "java", "source_program": " def sumOfSeries ( n ) :\n    return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )", "target_program": " static int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumOfSeries ( n ) :\n    return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )", "target_program": " int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3;\n}"}
{"source": "java", "target": "python", "source_program": " static int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;\n}", "target_program": " def sumOfSeries ( n ) :\n    return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )"}
{"source": "java", "target": "cpp", "source_program": " static int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;\n}", "target_program": " int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3;\n}", "target_program": " static int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumOfSeries ( int n ) {\n  return ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3;\n}", "target_program": " def sumOfSeries ( n ) :\n    return int ( ( n * ( 2 * n - 1 ) * ( 2 * n + 1 ) ) / 3 )"}
{"source": "python", "target": "java", "source_program": " def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    ans = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n    return ans", "target_program": " static int maxdiff ( int arr [ ] , int n ) {\n  Map < Integer , Integer > freq = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) freq . put ( arr [ i ] , freq . get ( arr [ i ] ) == null ? 1 : freq . get ( arr [ i ] ) + 1 ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ] ) && arr [ i ] > arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ i ] ) - freq . get ( arr [ j ] ) ) ;\n      else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ j ] ) && arr [ i ] < arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ j ] ) - freq . get ( arr [ i ] ) ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    ans = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n    return ans", "target_program": " int maxdiff ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans, freq [ arr [ i ] ] - freq [ arr [ j ] ] );\n      else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans, freq [ arr [ j ] ] - freq [ arr [ i ] ] );\n    }\n  }\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxdiff ( int arr [ ] , int n ) {\n  Map < Integer , Integer > freq = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) freq . put ( arr [ i ] , freq . get ( arr [ i ] ) == null ? 1 : freq . get ( arr [ i ] ) + 1 ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ] ) && arr [ i ] > arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ i ] ) - freq . get ( arr [ j ] ) ) ;\n      else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ j ] ) && arr [ i ] < arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ j ] ) - freq . get ( arr [ i ] ) ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    ans = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n    return ans"}
{"source": "java", "target": "cpp", "source_program": " static int maxdiff ( int arr [ ] , int n ) {\n  Map < Integer , Integer > freq = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) freq . put ( arr [ i ] , freq . get ( arr [ i ] ) == null ? 1 : freq . get ( arr [ i ] ) + 1 ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ] ) && arr [ i ] > arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ i ] ) - freq . get ( arr [ j ] ) ) ;\n      else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ j ] ) && arr [ i ] < arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ j ] ) - freq . get ( arr [ i ] ) ) ;\n    }\n  }\n  return ans ;\n}", "target_program": " int maxdiff ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans, freq [ arr [ i ] ] - freq [ arr [ j ] ] );\n      else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans, freq [ arr [ j ] ] - freq [ arr [ i ] ] );\n    }\n  }\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxdiff ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans, freq [ arr [ i ] ] - freq [ arr [ j ] ] );\n      else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans, freq [ arr [ j ] ] - freq [ arr [ i ] ] );\n    }\n  }\n  return ans;\n}", "target_program": " static int maxdiff ( int arr [ ] , int n ) {\n  Map < Integer , Integer > freq = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) freq . put ( arr [ i ] , freq . get ( arr [ i ] ) == null ? 1 : freq . get ( arr [ i ] ) + 1 ) ;\n  int ans = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < n ;\n    j ++ ) {\n      if ( freq . get ( arr [ i ] ) > freq . get ( arr [ j ] ) && arr [ i ] > arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ i ] ) - freq . get ( arr [ j ] ) ) ;\n      else if ( freq . get ( arr [ i ] ) < freq . get ( arr [ j ] ) && arr [ i ] < arr [ j ] ) ans = Math . max ( ans , freq . get ( arr [ j ] ) - freq . get ( arr [ i ] ) ) ;\n    }\n  }\n  return ans ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxdiff ( int arr [ ], int n ) {\n  unordered_map < int, int > freq;\n  for ( int i = 0;\n  i < n;\n  i ++ ) freq [ arr [ i ] ] ++;\n  int ans = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j < n;\n    j ++ ) {\n      if ( freq [ arr [ i ] ] > freq [ arr [ j ] ] && arr [ i ] > arr [ j ] ) ans = max ( ans, freq [ arr [ i ] ] - freq [ arr [ j ] ] );\n      else if ( freq [ arr [ i ] ] < freq [ arr [ j ] ] && arr [ i ] < arr [ j ] ) ans = max ( ans, freq [ arr [ j ] ] - freq [ arr [ i ] ] );\n    }\n  }\n  return ans;\n}", "target_program": " def maxdiff ( arr , n ) :\n    freq = defaultdict ( lambda : 0 )\n    for i in range ( n ) :\n        freq [ arr [ i ] ] += 1\n    ans = 0\n    for i in range ( n ) :\n        for j in range ( n ) :\n            if freq [ arr [ i ] ] > freq [ arr [ j ] ] and arr [ i ] > arr [ j ] :\n                ans = max ( ans , freq [ arr [ i ] ] - freq [ arr [ j ] ] )\n            elif freq [ arr [ i ] ] < freq [ arr [ j ] ] and arr [ i ] < arr [ j ] :\n                ans = max ( ans , freq [ arr [ j ] ] - freq [ arr [ i ] ] )\n    return ans"}
{"source": "python", "target": "java", "source_program": " def shiftMatrixByK ( mat , k ) :\n    if ( k > N ) :\n        print ( \"shifting is\"\" not possible\" )\n        return\n    j = 0\n    while ( j < N ) :\n        for i in range ( k , N ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        for i in range ( 0 , k ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        print ( \"\" )\n        j = j + 1", "target_program": " static void shiftMatrixByK ( int [ ] [ ] mat , int k ) {\n  if ( k > N ) {\n    System . out . print ( \"Shifting is\" + \" not possible\" ) ;\n    return ;\n  }\n  int j = 0 ;\n  while ( j < N ) {\n    for ( int i = k ;\n    i < N ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    System . out . println ( ) ;\n    j ++ ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def shiftMatrixByK ( mat , k ) :\n    if ( k > N ) :\n        print ( \"shifting is\"\" not possible\" )\n        return\n    j = 0\n    while ( j < N ) :\n        for i in range ( k , N ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        for i in range ( 0 , k ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        print ( \"\" )\n        j = j + 1", "target_program": " void shiftMatrixByK ( int mat [ N ] [ N ], int k ) {\n  if ( k > N ) {\n    cout << \"shifting is not possible\" << endl;\n    return;\n  }\n  int j = 0;\n  while ( j < N ) {\n    for ( int i = k;\n    i < N;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    for ( int i = 0;\n    i < k;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    cout << endl;\n    j ++;\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void shiftMatrixByK ( int [ ] [ ] mat , int k ) {\n  if ( k > N ) {\n    System . out . print ( \"Shifting is\" + \" not possible\" ) ;\n    return ;\n  }\n  int j = 0 ;\n  while ( j < N ) {\n    for ( int i = k ;\n    i < N ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    System . out . println ( ) ;\n    j ++ ;\n  }\n}", "target_program": " def shiftMatrixByK ( mat , k ) :\n    if ( k > N ) :\n        print ( \"shifting is\"\" not possible\" )\n        return\n    j = 0\n    while ( j < N ) :\n        for i in range ( k , N ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        for i in range ( 0 , k ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        print ( \"\" )\n        j = j + 1"}
{"source": "java", "target": "cpp", "source_program": " static void shiftMatrixByK ( int [ ] [ ] mat , int k ) {\n  if ( k > N ) {\n    System . out . print ( \"Shifting is\" + \" not possible\" ) ;\n    return ;\n  }\n  int j = 0 ;\n  while ( j < N ) {\n    for ( int i = k ;\n    i < N ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    System . out . println ( ) ;\n    j ++ ;\n  }\n}", "target_program": " void shiftMatrixByK ( int mat [ N ] [ N ], int k ) {\n  if ( k > N ) {\n    cout << \"shifting is not possible\" << endl;\n    return;\n  }\n  int j = 0;\n  while ( j < N ) {\n    for ( int i = k;\n    i < N;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    for ( int i = 0;\n    i < k;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    cout << endl;\n    j ++;\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void shiftMatrixByK ( int mat [ N ] [ N ], int k ) {\n  if ( k > N ) {\n    cout << \"shifting is not possible\" << endl;\n    return;\n  }\n  int j = 0;\n  while ( j < N ) {\n    for ( int i = k;\n    i < N;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    for ( int i = 0;\n    i < k;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    cout << endl;\n    j ++;\n  }\n}", "target_program": " static void shiftMatrixByK ( int [ ] [ ] mat , int k ) {\n  if ( k > N ) {\n    System . out . print ( \"Shifting is\" + \" not possible\" ) ;\n    return ;\n  }\n  int j = 0 ;\n  while ( j < N ) {\n    for ( int i = k ;\n    i < N ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    for ( int i = 0 ;\n    i < k ;\n    i ++ ) System . out . print ( mat [ j ] [ i ] + \" \" ) ;\n    System . out . println ( ) ;\n    j ++ ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void shiftMatrixByK ( int mat [ N ] [ N ], int k ) {\n  if ( k > N ) {\n    cout << \"shifting is not possible\" << endl;\n    return;\n  }\n  int j = 0;\n  while ( j < N ) {\n    for ( int i = k;\n    i < N;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    for ( int i = 0;\n    i < k;\n    i ++ ) cout << mat [ j ] [ i ] << \" \";\n    cout << endl;\n    j ++;\n  }\n}", "target_program": " def shiftMatrixByK ( mat , k ) :\n    if ( k > N ) :\n        print ( \"shifting is\"\" not possible\" )\n        return\n    j = 0\n    while ( j < N ) :\n        for i in range ( k , N ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        for i in range ( 0 , k ) :\n            print ( \"{} \".format ( mat [ j ] [ i ] ) , end = \"\" )\n        print ( \"\" )\n        j = j + 1"}
{"source": "python", "target": "java", "source_program": " def MAXMIN ( arr , n ) :\n    MIN = 10 ** 9\n    MAX = - 10 ** 9\n    for i in range ( n ) :\n        for j in range ( n // 2 + 1 ) :\n            if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) :\n                if ( MIN > arr [ i ] [ n - j - 1 ] ) :\n                    MIN = arr [ i ] [ n - j - 1 ]\n                if ( MAX < arr [ i ] [ j ] ) :\n                    MAX = arr [ i ] [ j ]\n            else :\n                if ( MIN > arr [ i ] [ j ] ) :\n                    MIN = arr [ i ] [ j ]\n                if ( MAX < arr [ i ] [ n - j - 1 ] ) :\n                    MAX = arr [ i ] [ n - j - 1 ]\n    print ( \"MAXimum =\" , MAX , \", MINimum =\" , MIN )", "target_program": " static void maxMin ( int arr [ ] [ ] , int n ) {\n  int min = + 2147483647 ;\n  int max = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n / 2 ;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ] ;\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ] ;\n      }\n    }\n  }\n  System . out . print ( \"Maximum = \" + max + \", Minimum = \" + min ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def MAXMIN ( arr , n ) :\n    MIN = 10 ** 9\n    MAX = - 10 ** 9\n    for i in range ( n ) :\n        for j in range ( n // 2 + 1 ) :\n            if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) :\n                if ( MIN > arr [ i ] [ n - j - 1 ] ) :\n                    MIN = arr [ i ] [ n - j - 1 ]\n                if ( MAX < arr [ i ] [ j ] ) :\n                    MAX = arr [ i ] [ j ]\n            else :\n                if ( MIN > arr [ i ] [ j ] ) :\n                    MIN = arr [ i ] [ j ]\n                if ( MAX < arr [ i ] [ n - j - 1 ] ) :\n                    MAX = arr [ i ] [ n - j - 1 ]\n    print ( \"MAXimum =\" , MAX , \", MINimum =\" , MIN )", "target_program": " void maxMin ( int arr [ ] [ MAX ], int n ) {\n  int min = INT_MAX;\n  int max = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n / 2;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ];\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ];\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ];\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ];\n      }\n    }\n  }\n  cout << \"Maximum = \" << max;\n  << \", Minimum = \" << min;\n}"}
{"source": "java", "target": "python", "source_program": " static void maxMin ( int arr [ ] [ ] , int n ) {\n  int min = + 2147483647 ;\n  int max = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n / 2 ;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ] ;\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ] ;\n      }\n    }\n  }\n  System . out . print ( \"Maximum = \" + max + \", Minimum = \" + min ) ;\n}", "target_program": " def MAXMIN ( arr , n ) :\n    MIN = 10 ** 9\n    MAX = - 10 ** 9\n    for i in range ( n ) :\n        for j in range ( n // 2 + 1 ) :\n            if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) :\n                if ( MIN > arr [ i ] [ n - j - 1 ] ) :\n                    MIN = arr [ i ] [ n - j - 1 ]\n                if ( MAX < arr [ i ] [ j ] ) :\n                    MAX = arr [ i ] [ j ]\n            else :\n                if ( MIN > arr [ i ] [ j ] ) :\n                    MIN = arr [ i ] [ j ]\n                if ( MAX < arr [ i ] [ n - j - 1 ] ) :\n                    MAX = arr [ i ] [ n - j - 1 ]\n    print ( \"MAXimum =\" , MAX , \", MINimum =\" , MIN )"}
{"source": "java", "target": "cpp", "source_program": " static void maxMin ( int arr [ ] [ ] , int n ) {\n  int min = + 2147483647 ;\n  int max = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n / 2 ;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ] ;\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ] ;\n      }\n    }\n  }\n  System . out . print ( \"Maximum = \" + max + \", Minimum = \" + min ) ;\n}", "target_program": " void maxMin ( int arr [ ] [ MAX ], int n ) {\n  int min = INT_MAX;\n  int max = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n / 2;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ];\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ];\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ];\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ];\n      }\n    }\n  }\n  cout << \"Maximum = \" << max;\n  << \", Minimum = \" << min;\n}"}
{"source": "cpp", "target": "java", "source_program": " void maxMin ( int arr [ ] [ MAX ], int n ) {\n  int min = INT_MAX;\n  int max = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n / 2;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ];\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ];\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ];\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ];\n      }\n    }\n  }\n  cout << \"Maximum = \" << max;\n  << \", Minimum = \" << min;\n}", "target_program": " static void maxMin ( int arr [ ] [ ] , int n ) {\n  int min = + 2147483647 ;\n  int max = - 2147483648 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j <= n / 2 ;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ] ;\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ] ;\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ] ;\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ] ;\n      }\n    }\n  }\n  System . out . print ( \"Maximum = \" + max + \", Minimum = \" + min ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void maxMin ( int arr [ ] [ MAX ], int n ) {\n  int min = INT_MAX;\n  int max = INT_MIN;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    for ( int j = 0;\n    j <= n / 2;\n    j ++ ) {\n      if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) {\n        if ( min > arr [ i ] [ n - j - 1 ] ) min = arr [ i ] [ n - j - 1 ];\n        if ( max < arr [ i ] [ j ] ) max = arr [ i ] [ j ];\n      }\n      else {\n        if ( min > arr [ i ] [ j ] ) min = arr [ i ] [ j ];\n        if ( max < arr [ i ] [ n - j - 1 ] ) max = arr [ i ] [ n - j - 1 ];\n      }\n    }\n  }\n  cout << \"Maximum = \" << max;\n  << \", Minimum = \" << min;\n}", "target_program": " def MAXMIN ( arr , n ) :\n    MIN = 10 ** 9\n    MAX = - 10 ** 9\n    for i in range ( n ) :\n        for j in range ( n // 2 + 1 ) :\n            if ( arr [ i ] [ j ] > arr [ i ] [ n - j - 1 ] ) :\n                if ( MIN > arr [ i ] [ n - j - 1 ] ) :\n                    MIN = arr [ i ] [ n - j - 1 ]\n                if ( MAX < arr [ i ] [ j ] ) :\n                    MAX = arr [ i ] [ j ]\n            else :\n                if ( MIN > arr [ i ] [ j ] ) :\n                    MIN = arr [ i ] [ j ]\n                if ( MAX < arr [ i ] [ n - j - 1 ] ) :\n                    MAX = arr [ i ] [ n - j - 1 ]\n    print ( \"MAXimum =\" , MAX , \", MINimum =\" , MIN )"}
{"source": "python", "target": "java", "source_program": " def decToOctal ( n ) :\n    octalNum = [ 0 ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        octalNum [ i ] = n % 8 ;\n        n = int ( n / 8 ) ;\n        i += 1 ;\n    for j in range ( i - 1 , - 1 , - 1 ) :\n        print ( octalNum [ j ] , end = \"\" ) ;", "target_program": " static void decToOctal ( int n ) {\n  int [ ] octalNum = new int [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8 ;\n    n = n / 8 ;\n    i ++ ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( octalNum [ j ] ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def decToOctal ( n ) :\n    octalNum = [ 0 ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        octalNum [ i ] = n % 8 ;\n        n = int ( n / 8 ) ;\n        i += 1 ;\n    for j in range ( i - 1 , - 1 , - 1 ) :\n        print ( octalNum [ j ] , end = \"\" ) ;", "target_program": " void decToOctal ( int n ) {\n  int octalNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8;\n    n = n / 8;\n    i ++;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << octalNum [ j ];\n}"}
{"source": "java", "target": "python", "source_program": " static void decToOctal ( int n ) {\n  int [ ] octalNum = new int [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8 ;\n    n = n / 8 ;\n    i ++ ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( octalNum [ j ] ) ;\n}", "target_program": " def decToOctal ( n ) :\n    octalNum = [ 0 ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        octalNum [ i ] = n % 8 ;\n        n = int ( n / 8 ) ;\n        i += 1 ;\n    for j in range ( i - 1 , - 1 , - 1 ) :\n        print ( octalNum [ j ] , end = \"\" ) ;"}
{"source": "java", "target": "cpp", "source_program": " static void decToOctal ( int n ) {\n  int [ ] octalNum = new int [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8 ;\n    n = n / 8 ;\n    i ++ ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( octalNum [ j ] ) ;\n}", "target_program": " void decToOctal ( int n ) {\n  int octalNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8;\n    n = n / 8;\n    i ++;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << octalNum [ j ];\n}"}
{"source": "cpp", "target": "java", "source_program": " void decToOctal ( int n ) {\n  int octalNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8;\n    n = n / 8;\n    i ++;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << octalNum [ j ];\n}", "target_program": " static void decToOctal ( int n ) {\n  int [ ] octalNum = new int [ 100 ] ;\n  int i = 0 ;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8 ;\n    n = n / 8 ;\n    i ++ ;\n  }\n  for ( int j = i - 1 ;\n  j >= 0 ;\n  j -- ) System . out . print ( octalNum [ j ] ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " void decToOctal ( int n ) {\n  int octalNum [ 100 ];\n  int i = 0;\n  while ( n != 0 ) {\n    octalNum [ i ] = n % 8;\n    n = n / 8;\n    i ++;\n  }\n  for ( int j = i - 1;\n  j >= 0;\n  j -- ) cout << octalNum [ j ];\n}", "target_program": " def decToOctal ( n ) :\n    octalNum = [ 0 ] * 100 ;\n    i = 0 ;\n    while ( n != 0 ) :\n        octalNum [ i ] = n % 8 ;\n        n = int ( n / 8 ) ;\n        i += 1 ;\n    for j in range ( i - 1 , - 1 , - 1 ) :\n        print ( octalNum [ j ] , end = \"\" ) ;"}
{"source": "python", "target": "java", "source_program": " def isPowerOfFour ( n ) :\n    count = 0\n    if ( n and ( not ( n & ( n - 1 ) ) ) ) :\n        while ( n > 1 ) :\n            n >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False", "target_program": " static int isPowerOfFour ( int n ) {\n  int count = 0 ;\n  int x = n & ( n - 1 ) ;\n  if ( n > 0 && x == 0 ) {\n    while ( n > 1 ) {\n      n >>= 1 ;\n      count += 1 ;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0 ;\n  }\n  return 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isPowerOfFour ( n ) :\n    count = 0\n    if ( n and ( not ( n & ( n - 1 ) ) ) ) :\n        while ( n > 1 ) :\n            n >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False", "target_program": " bool isPowerOfFour ( unsigned int n ) {\n  int count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) {\n    while ( n > 1 ) {\n      n >>= 1;\n      count += 1;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0;\n  }\n  return 0;\n}"}
{"source": "java", "target": "python", "source_program": " static int isPowerOfFour ( int n ) {\n  int count = 0 ;\n  int x = n & ( n - 1 ) ;\n  if ( n > 0 && x == 0 ) {\n    while ( n > 1 ) {\n      n >>= 1 ;\n      count += 1 ;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0 ;\n  }\n  return 0 ;\n}", "target_program": " def isPowerOfFour ( n ) :\n    count = 0\n    if ( n and ( not ( n & ( n - 1 ) ) ) ) :\n        while ( n > 1 ) :\n            n >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False"}
{"source": "java", "target": "cpp", "source_program": " static int isPowerOfFour ( int n ) {\n  int count = 0 ;\n  int x = n & ( n - 1 ) ;\n  if ( n > 0 && x == 0 ) {\n    while ( n > 1 ) {\n      n >>= 1 ;\n      count += 1 ;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0 ;\n  }\n  return 0 ;\n}", "target_program": " bool isPowerOfFour ( unsigned int n ) {\n  int count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) {\n    while ( n > 1 ) {\n      n >>= 1;\n      count += 1;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0;\n  }\n  return 0;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isPowerOfFour ( unsigned int n ) {\n  int count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) {\n    while ( n > 1 ) {\n      n >>= 1;\n      count += 1;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0;\n  }\n  return 0;\n}", "target_program": " static int isPowerOfFour ( int n ) {\n  int count = 0 ;\n  int x = n & ( n - 1 ) ;\n  if ( n > 0 && x == 0 ) {\n    while ( n > 1 ) {\n      n >>= 1 ;\n      count += 1 ;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0 ;\n  }\n  return 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isPowerOfFour ( unsigned int n ) {\n  int count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) {\n    while ( n > 1 ) {\n      n >>= 1;\n      count += 1;\n    }\n    return ( count % 2 == 0 ) ? 1 : 0;\n  }\n  return 0;\n}", "target_program": " def isPowerOfFour ( n ) :\n    count = 0\n    if ( n and ( not ( n & ( n - 1 ) ) ) ) :\n        while ( n > 1 ) :\n            n >>= 1\n            count += 1\n        if ( count % 2 == 0 ) :\n            return True\n        else :\n            return False"}
{"source": "python", "target": "java", "source_program": " def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) :\n        return 0\n    res = 1\n    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) :\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if ( n >= 2 ) :\n        res = res * ( 1 + n )\n    return res", "target_program": " public static int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0 ;\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int count = 0 , curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n = n / i ;\n      if ( i == 2 && count == 1 ) curr_sum = 0 ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n >= 2 ) res *= ( 1 + n ) ;\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) :\n        return 0\n    res = 1\n    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) :\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if ( n >= 2 ) :\n        res = res * ( 1 + n )\n    return res", "target_program": " int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0;\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int count = 0, curr_sum = 1, curr_term = 1;\n    while ( n % i == 0 ) {\n      count ++;\n      n = n / i;\n      if ( i == 2 && count == 1 ) curr_sum = 0;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " public static int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0 ;\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int count = 0 , curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n = n / i ;\n      if ( i == 2 && count == 1 ) curr_sum = 0 ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n >= 2 ) res *= ( 1 + n ) ;\n  return res ;\n}", "target_program": " def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) :\n        return 0\n    res = 1\n    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) :\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if ( n >= 2 ) :\n        res = res * ( 1 + n )\n    return res"}
{"source": "java", "target": "cpp", "source_program": " public static int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0 ;\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int count = 0 , curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n = n / i ;\n      if ( i == 2 && count == 1 ) curr_sum = 0 ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n >= 2 ) res *= ( 1 + n ) ;\n  return res ;\n}", "target_program": " int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0;\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int count = 0, curr_sum = 1, curr_term = 1;\n    while ( n % i == 0 ) {\n      count ++;\n      n = n / i;\n      if ( i == 2 && count == 1 ) curr_sum = 0;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0;\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int count = 0, curr_sum = 1, curr_term = 1;\n    while ( n % i == 0 ) {\n      count ++;\n      n = n / i;\n      if ( i == 2 && count == 1 ) curr_sum = 0;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}", "target_program": " public static int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0 ;\n  int res = 1 ;\n  for ( int i = 2 ;\n  i <= Math . sqrt ( n ) ;\n  i ++ ) {\n    int count = 0 , curr_sum = 1 ;\n    int curr_term = 1 ;\n    while ( n % i == 0 ) {\n      count ++ ;\n      n = n / i ;\n      if ( i == 2 && count == 1 ) curr_sum = 0 ;\n      curr_term *= i ;\n      curr_sum += curr_term ;\n    }\n    res *= curr_sum ;\n  }\n  if ( n >= 2 ) res *= ( 1 + n ) ;\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int sumofFactors ( int n ) {\n  if ( n % 2 != 0 ) return 0;\n  int res = 1;\n  for ( int i = 2;\n  i <= sqrt ( n );\n  i ++ ) {\n    int count = 0, curr_sum = 1, curr_term = 1;\n    while ( n % i == 0 ) {\n      count ++;\n      n = n / i;\n      if ( i == 2 && count == 1 ) curr_sum = 0;\n      curr_term *= i;\n      curr_sum += curr_term;\n    }\n    res *= curr_sum;\n  }\n  if ( n >= 2 ) res *= ( 1 + n );\n  return res;\n}", "target_program": " def sumofFactors ( n ) :\n    if ( n % 2 != 0 ) :\n        return 0\n    res = 1\n    for i in range ( 2 , ( int ) ( math.sqrt ( n ) ) + 1 ) :\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while ( n % i == 0 ) :\n            count = count + 1\n            n = n // i\n            if ( i == 2 and count == 1 ) :\n                curr_sum = 0\n            curr_term = curr_term * i\n            curr_sum = curr_sum + curr_term\n        res = res * curr_sum\n    if ( n >= 2 ) :\n        res = res * ( 1 + n )\n    return res"}
{"source": "python", "target": "java", "source_program": " def findSum ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n    for i in s :\n        sum = sum + i\n    return sum", "target_program": " static int findSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! s . contains ( arr [ i ] ) ) {\n      sum += arr [ i ] ;\n      s . add ( arr [ i ] ) ;\n    }\n  }\n  return sum ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findSum ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n    for i in s :\n        sum = sum + i\n    return sum", "target_program": " int findSum ( int arr [ ], int n ) {\n  int sum = 0;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) == s . end ( ) ) {\n      sum += arr [ i ];\n      s . insert ( arr [ i ] );\n    }\n  }\n  return sum;\n}"}
{"source": "java", "target": "python", "source_program": " static int findSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! s . contains ( arr [ i ] ) ) {\n      sum += arr [ i ] ;\n      s . add ( arr [ i ] ) ;\n    }\n  }\n  return sum ;\n}", "target_program": " def findSum ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n    for i in s :\n        sum = sum + i\n    return sum"}
{"source": "java", "target": "cpp", "source_program": " static int findSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! s . contains ( arr [ i ] ) ) {\n      sum += arr [ i ] ;\n      s . add ( arr [ i ] ) ;\n    }\n  }\n  return sum ;\n}", "target_program": " int findSum ( int arr [ ], int n ) {\n  int sum = 0;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) == s . end ( ) ) {\n      sum += arr [ i ];\n      s . insert ( arr [ i ] );\n    }\n  }\n  return sum;\n}"}
{"source": "cpp", "target": "java", "source_program": " int findSum ( int arr [ ], int n ) {\n  int sum = 0;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) == s . end ( ) ) {\n      sum += arr [ i ];\n      s . insert ( arr [ i ] );\n    }\n  }\n  return sum;\n}", "target_program": " static int findSum ( int arr [ ] , int n ) {\n  int sum = 0 ;\n  HashSet < Integer > s = new HashSet < Integer > ( ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! s . contains ( arr [ i ] ) ) {\n      sum += arr [ i ] ;\n      s . add ( arr [ i ] ) ;\n    }\n  }\n  return sum ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findSum ( int arr [ ], int n ) {\n  int sum = 0;\n  unordered_set < int > s;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( s . find ( arr [ i ] ) == s . end ( ) ) {\n      sum += arr [ i ];\n      s . insert ( arr [ i ] );\n    }\n  }\n  return sum;\n}", "target_program": " def findSum ( arr , n ) :\n    s = set ( )\n    sum = 0\n    for i in range ( n ) :\n        if arr [ i ] not in s :\n            s.add ( arr [ i ] )\n    for i in s :\n        sum = sum + i\n    return sum"}
{"source": "python", "target": "java", "source_program": " def minPalPartion ( str1 ) :\n    n = len ( str1 ) ;\n    C = [ 0 ] * ( n + 1 ) ;\n    P = [ [ False for x in range ( n + 1 ) ] for y in range ( n + 1 ) ] ;\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1 ;\n            if ( L == 2 ) :\n                P [ i ] [ j ] = ( str1 [ i ] == str1 [ j ] ) ;\n            else :\n                P [ i ] [ j ] = ( ( str1 [ i ] == str1 [ j ] ) and P [ i + 1 ] [ j - 1 ] ) ;\n    for i in range ( n ) :\n        if ( P [ 0 ] [ i ] == True ) :\n            C [ i ] = 0 ;\n        else :\n            C [ i ] = sys.maxsize ;\n            for j in range ( i ) :\n                if ( P [ j + 1 ] [ i ] == True and 1 + C [ j ] < C [ i ] ) :\n                    C [ i ] = 1 + C [ j ] ;\n    return C [ n - 1 ] ;", "target_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] C = new int [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0 ;\n    else {\n      C [ i ] = Integer . MAX_VALUE ;\n      for ( j = 0 ;\n      j < i ;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ] ;\n      }\n    }\n  }\n  return C [ n - 1 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minPalPartion ( str1 ) :\n    n = len ( str1 ) ;\n    C = [ 0 ] * ( n + 1 ) ;\n    P = [ [ False for x in range ( n + 1 ) ] for y in range ( n + 1 ) ] ;\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1 ;\n            if ( L == 2 ) :\n                P [ i ] [ j ] = ( str1 [ i ] == str1 [ j ] ) ;\n            else :\n                P [ i ] [ j ] = ( ( str1 [ i ] == str1 [ j ] ) and P [ i + 1 ] [ j - 1 ] ) ;\n    for i in range ( n ) :\n        if ( P [ 0 ] [ i ] == True ) :\n            C [ i ] = 0 ;\n        else :\n            C [ i ] = sys.maxsize ;\n            for j in range ( i ) :\n                if ( P [ j + 1 ] [ i ] == True and 1 + C [ j ] < C [ i ] ) :\n                    C [ i ] = 1 + C [ j ] ;\n    return C [ n - 1 ] ;", "target_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0;\n    else {\n      C [ i ] = INT_MAX;\n      for ( j = 0;\n      j < i;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ];\n      }\n    }\n  }\n  return C [ n - 1 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] C = new int [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0 ;\n    else {\n      C [ i ] = Integer . MAX_VALUE ;\n      for ( j = 0 ;\n      j < i ;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ] ;\n      }\n    }\n  }\n  return C [ n - 1 ] ;\n}", "target_program": " def minPalPartion ( str1 ) :\n    n = len ( str1 ) ;\n    C = [ 0 ] * ( n + 1 ) ;\n    P = [ [ False for x in range ( n + 1 ) ] for y in range ( n + 1 ) ] ;\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1 ;\n            if ( L == 2 ) :\n                P [ i ] [ j ] = ( str1 [ i ] == str1 [ j ] ) ;\n            else :\n                P [ i ] [ j ] = ( ( str1 [ i ] == str1 [ j ] ) and P [ i + 1 ] [ j - 1 ] ) ;\n    for i in range ( n ) :\n        if ( P [ 0 ] [ i ] == True ) :\n            C [ i ] = 0 ;\n        else :\n            C [ i ] = sys.maxsize ;\n            for j in range ( i ) :\n                if ( P [ j + 1 ] [ i ] == True and 1 + C [ j ] < C [ i ] ) :\n                    C [ i ] = 1 + C [ j ] ;\n    return C [ n - 1 ] ;"}
{"source": "java", "target": "cpp", "source_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] C = new int [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0 ;\n    else {\n      C [ i ] = Integer . MAX_VALUE ;\n      for ( j = 0 ;\n      j < i ;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ] ;\n      }\n    }\n  }\n  return C [ n - 1 ] ;\n}", "target_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0;\n    else {\n      C [ i ] = INT_MAX;\n      for ( j = 0;\n      j < i;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ];\n      }\n    }\n  }\n  return C [ n - 1 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0;\n    else {\n      C [ i ] = INT_MAX;\n      for ( j = 0;\n      j < i;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ];\n      }\n    }\n  }\n  return C [ n - 1 ];\n}", "target_program": " static int minPalPartion ( String str ) {\n  int n = str . length ( ) ;\n  int [ ] C = new int [ n ] ;\n  boolean [ ] [ ] P = new boolean [ n ] [ n ] ;\n  int i , j , k , L ;\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    P [ i ] [ i ] = true ;\n  }\n  for ( L = 2 ;\n  L <= n ;\n  L ++ ) {\n    for ( i = 0 ;\n    i < n - L + 1 ;\n    i ++ ) {\n      j = i + L - 1 ;\n      if ( L == 2 ) P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) ;\n      else P [ i ] [ j ] = ( str . charAt ( i ) == str . charAt ( j ) ) && P [ i + 1 ] [ j - 1 ] ;\n    }\n  }\n  for ( i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0 ;\n    else {\n      C [ i ] = Integer . MAX_VALUE ;\n      for ( j = 0 ;\n      j < i ;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ] ;\n      }\n    }\n  }\n  return C [ n - 1 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minPalPartion ( char * str ) {\n  int n = strlen ( str );\n  int C [ n ];\n  bool P [ n ] [ n ];\n  int i, j, k, L;\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    P [ i ] [ i ] = true;\n  }\n  for ( L = 2;\n  L <= n;\n  L ++ ) {\n    for ( i = 0;\n    i < n - L + 1;\n    i ++ ) {\n      j = i + L - 1;\n      if ( L == 2 ) P [ i ] [ j ] = ( str [ i ] == str [ j ] );\n      else P [ i ] [ j ] = ( str [ i ] == str [ j ] ) && P [ i + 1 ] [ j - 1 ];\n    }\n  }\n  for ( i = 0;\n  i < n;\n  i ++ ) {\n    if ( P [ 0 ] [ i ] == true ) C [ i ] = 0;\n    else {\n      C [ i ] = INT_MAX;\n      for ( j = 0;\n      j < i;\n      j ++ ) {\n        if ( P [ j + 1 ] [ i ] == true && 1 + C [ j ] < C [ i ] ) C [ i ] = 1 + C [ j ];\n      }\n    }\n  }\n  return C [ n - 1 ];\n}", "target_program": " def minPalPartion ( str1 ) :\n    n = len ( str1 ) ;\n    C = [ 0 ] * ( n + 1 ) ;\n    P = [ [ False for x in range ( n + 1 ) ] for y in range ( n + 1 ) ] ;\n    for i in range ( n ) :\n        P [ i ] [ i ] = True ;\n    for L in range ( 2 , n + 1 ) :\n        for i in range ( n - L + 1 ) :\n            j = i + L - 1 ;\n            if ( L == 2 ) :\n                P [ i ] [ j ] = ( str1 [ i ] == str1 [ j ] ) ;\n            else :\n                P [ i ] [ j ] = ( ( str1 [ i ] == str1 [ j ] ) and P [ i + 1 ] [ j - 1 ] ) ;\n    for i in range ( n ) :\n        if ( P [ 0 ] [ i ] == True ) :\n            C [ i ] = 0 ;\n        else :\n            C [ i ] = sys.maxsize ;\n            for j in range ( i ) :\n                if ( P [ j + 1 ] [ i ] == True and 1 + C [ j ] < C [ i ] ) :\n                    C [ i ] = 1 + C [ j ] ;\n    return C [ n - 1 ] ;"}
{"source": "python", "target": "java", "source_program": " def minInitialPoints ( points ) :\n    dp = [ [ 0 for x in range ( C + 1 ) ] for y in range ( R + 1 ) ]\n    m , n = R , C\n    if points [ m - 1 ] [ n - 1 ] > 0 :\n        dp [ m - 1 ] [ n - 1 ] = 1\n    else :\n        dp [ m - 1 ] [ n - 1 ] = abs ( points [ m - 1 ] [ n - 1 ] ) + 1\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 )\n    for i in range ( 2 , - 1 , - 1 ) :\n        dp [ m - 1 ] [ i ] = max ( dp [ m - 1 ] [ i + 1 ] - points [ m - 1 ] [ i ] , 1 )\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        for j in range ( n - 2 , - 1 , - 1 ) :\n            min_points_on_exit = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] )\n            dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ] , 1 )\n    return dp [ 0 ] [ 0 ]", "target_program": " static int minInitialPoints ( int points [ ] [ ] , int R , int C ) {\n  int dp [ ] [ ] = new int [ R ] [ C ] ;\n  int m = R , n = C ;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : Math . abs ( points [ m - 1 ] [ n - 1 ] ) + 1 ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 ) ;\n  for ( int j = n - 2 ;\n  j >= 0 ;\n  j -- ) dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ] , 1 ) ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = n - 2 ;\n    j >= 0 ;\n    j -- ) {\n      int min_points_on_exit = Math . min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ;\n      dp [ i ] [ j ] = Math . max ( min_points_on_exit - points [ i ] [ j ] , 1 ) ;\n    }\n  }\n  return dp [ 0 ] [ 0 ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minInitialPoints ( points ) :\n    dp = [ [ 0 for x in range ( C + 1 ) ] for y in range ( R + 1 ) ]\n    m , n = R , C\n    if points [ m - 1 ] [ n - 1 ] > 0 :\n        dp [ m - 1 ] [ n - 1 ] = 1\n    else :\n        dp [ m - 1 ] [ n - 1 ] = abs ( points [ m - 1 ] [ n - 1 ] ) + 1\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 )\n    for i in range ( 2 , - 1 , - 1 ) :\n        dp [ m - 1 ] [ i ] = max ( dp [ m - 1 ] [ i + 1 ] - points [ m - 1 ] [ i ] , 1 )\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        for j in range ( n - 2 , - 1 , - 1 ) :\n            min_points_on_exit = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] )\n            dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ] , 1 )\n    return dp [ 0 ] [ 0 ]", "target_program": " int minInitialPoints ( int points [ ] [ C ] ) {\n  int dp [ R ] [ C ];\n  int m = R, n = C;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : abs ( points [ m - 1 ] [ n - 1 ] ) + 1;\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ], 1 );\n  for ( int j = n - 2;\n  j >= 0;\n  j -- ) dp [ m - 1 ] [ j ] = max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ], 1 );\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = n - 2;\n    j >= 0;\n    j -- ) {\n      int min_points_on_exit = min ( dp [ i + 1 ] [ j ], dp [ i ] [ j + 1 ] );\n      dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ], 1 );\n    }\n  }\n  return dp [ 0 ] [ 0 ];\n}"}
{"source": "java", "target": "python", "source_program": " static int minInitialPoints ( int points [ ] [ ] , int R , int C ) {\n  int dp [ ] [ ] = new int [ R ] [ C ] ;\n  int m = R , n = C ;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : Math . abs ( points [ m - 1 ] [ n - 1 ] ) + 1 ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 ) ;\n  for ( int j = n - 2 ;\n  j >= 0 ;\n  j -- ) dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ] , 1 ) ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = n - 2 ;\n    j >= 0 ;\n    j -- ) {\n      int min_points_on_exit = Math . min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ;\n      dp [ i ] [ j ] = Math . max ( min_points_on_exit - points [ i ] [ j ] , 1 ) ;\n    }\n  }\n  return dp [ 0 ] [ 0 ] ;\n}", "target_program": " def minInitialPoints ( points ) :\n    dp = [ [ 0 for x in range ( C + 1 ) ] for y in range ( R + 1 ) ]\n    m , n = R , C\n    if points [ m - 1 ] [ n - 1 ] > 0 :\n        dp [ m - 1 ] [ n - 1 ] = 1\n    else :\n        dp [ m - 1 ] [ n - 1 ] = abs ( points [ m - 1 ] [ n - 1 ] ) + 1\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 )\n    for i in range ( 2 , - 1 , - 1 ) :\n        dp [ m - 1 ] [ i ] = max ( dp [ m - 1 ] [ i + 1 ] - points [ m - 1 ] [ i ] , 1 )\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        for j in range ( n - 2 , - 1 , - 1 ) :\n            min_points_on_exit = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] )\n            dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ] , 1 )\n    return dp [ 0 ] [ 0 ]"}
{"source": "java", "target": "cpp", "source_program": " static int minInitialPoints ( int points [ ] [ ] , int R , int C ) {\n  int dp [ ] [ ] = new int [ R ] [ C ] ;\n  int m = R , n = C ;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : Math . abs ( points [ m - 1 ] [ n - 1 ] ) + 1 ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 ) ;\n  for ( int j = n - 2 ;\n  j >= 0 ;\n  j -- ) dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ] , 1 ) ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = n - 2 ;\n    j >= 0 ;\n    j -- ) {\n      int min_points_on_exit = Math . min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ;\n      dp [ i ] [ j ] = Math . max ( min_points_on_exit - points [ i ] [ j ] , 1 ) ;\n    }\n  }\n  return dp [ 0 ] [ 0 ] ;\n}", "target_program": " int minInitialPoints ( int points [ ] [ C ] ) {\n  int dp [ R ] [ C ];\n  int m = R, n = C;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : abs ( points [ m - 1 ] [ n - 1 ] ) + 1;\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ], 1 );\n  for ( int j = n - 2;\n  j >= 0;\n  j -- ) dp [ m - 1 ] [ j ] = max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ], 1 );\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = n - 2;\n    j >= 0;\n    j -- ) {\n      int min_points_on_exit = min ( dp [ i + 1 ] [ j ], dp [ i ] [ j + 1 ] );\n      dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ], 1 );\n    }\n  }\n  return dp [ 0 ] [ 0 ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minInitialPoints ( int points [ ] [ C ] ) {\n  int dp [ R ] [ C ];\n  int m = R, n = C;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : abs ( points [ m - 1 ] [ n - 1 ] ) + 1;\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ], 1 );\n  for ( int j = n - 2;\n  j >= 0;\n  j -- ) dp [ m - 1 ] [ j ] = max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ], 1 );\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = n - 2;\n    j >= 0;\n    j -- ) {\n      int min_points_on_exit = min ( dp [ i + 1 ] [ j ], dp [ i ] [ j + 1 ] );\n      dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ], 1 );\n    }\n  }\n  return dp [ 0 ] [ 0 ];\n}", "target_program": " static int minInitialPoints ( int points [ ] [ ] , int R , int C ) {\n  int dp [ ] [ ] = new int [ R ] [ C ] ;\n  int m = R , n = C ;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : Math . abs ( points [ m - 1 ] [ n - 1 ] ) + 1 ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) dp [ i ] [ n - 1 ] = Math . max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 ) ;\n  for ( int j = n - 2 ;\n  j >= 0 ;\n  j -- ) dp [ m - 1 ] [ j ] = Math . max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ] , 1 ) ;\n  for ( int i = m - 2 ;\n  i >= 0 ;\n  i -- ) {\n    for ( int j = n - 2 ;\n    j >= 0 ;\n    j -- ) {\n      int min_points_on_exit = Math . min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] ) ;\n      dp [ i ] [ j ] = Math . max ( min_points_on_exit - points [ i ] [ j ] , 1 ) ;\n    }\n  }\n  return dp [ 0 ] [ 0 ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minInitialPoints ( int points [ ] [ C ] ) {\n  int dp [ R ] [ C ];\n  int m = R, n = C;\n  dp [ m - 1 ] [ n - 1 ] = points [ m - 1 ] [ n - 1 ] > 0 ? 1 : abs ( points [ m - 1 ] [ n - 1 ] ) + 1;\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ], 1 );\n  for ( int j = n - 2;\n  j >= 0;\n  j -- ) dp [ m - 1 ] [ j ] = max ( dp [ m - 1 ] [ j + 1 ] - points [ m - 1 ] [ j ], 1 );\n  for ( int i = m - 2;\n  i >= 0;\n  i -- ) {\n    for ( int j = n - 2;\n    j >= 0;\n    j -- ) {\n      int min_points_on_exit = min ( dp [ i + 1 ] [ j ], dp [ i ] [ j + 1 ] );\n      dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ], 1 );\n    }\n  }\n  return dp [ 0 ] [ 0 ];\n}", "target_program": " def minInitialPoints ( points ) :\n    dp = [ [ 0 for x in range ( C + 1 ) ] for y in range ( R + 1 ) ]\n    m , n = R , C\n    if points [ m - 1 ] [ n - 1 ] > 0 :\n        dp [ m - 1 ] [ n - 1 ] = 1\n    else :\n        dp [ m - 1 ] [ n - 1 ] = abs ( points [ m - 1 ] [ n - 1 ] ) + 1\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        dp [ i ] [ n - 1 ] = max ( dp [ i + 1 ] [ n - 1 ] - points [ i ] [ n - 1 ] , 1 )\n    for i in range ( 2 , - 1 , - 1 ) :\n        dp [ m - 1 ] [ i ] = max ( dp [ m - 1 ] [ i + 1 ] - points [ m - 1 ] [ i ] , 1 )\n    for i in range ( m - 2 , - 1 , - 1 ) :\n        for j in range ( n - 2 , - 1 , - 1 ) :\n            min_points_on_exit = min ( dp [ i + 1 ] [ j ] , dp [ i ] [ j + 1 ] )\n            dp [ i ] [ j ] = max ( min_points_on_exit - points [ i ] [ j ] , 1 )\n    return dp [ 0 ] [ 0 ]"}
{"source": "python", "target": "java", "source_program": " def countPair ( a , b ) :\n    s = str ( b )\n    i = 0\n    while i < ( len ( s ) ) :\n        if ( s [ i ] != '9' ) :\n            break\n        i += 1\n    result = 0\n    if ( i == len ( s ) ) :\n        result = a * len ( s )\n    else :\n        result = a * ( len ( s ) - 1 )\n    return result", "target_program": " static int countPair ( int a , int b ) {\n  String s = String . valueOf ( b ) ;\n  int i ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) != '9' ) break ;\n  }\n  int result ;\n  if ( i == s . length ( ) ) result = a * s . length ( ) ;\n  else result = a * ( s . length ( ) - 1 ) ;\n  return result ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def countPair ( a , b ) :\n    s = str ( b )\n    i = 0\n    while i < ( len ( s ) ) :\n        if ( s [ i ] != '9' ) :\n            break\n        i += 1\n    result = 0\n    if ( i == len ( s ) ) :\n        result = a * len ( s )\n    else :\n        result = a * ( len ( s ) - 1 )\n    return result", "target_program": " int countPair ( int a, int b ) {\n  string s = to_string ( b );\n  int i;\n  for ( i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] != '9' ) break;\n  }\n  int result;\n  if ( i == s . length ( ) ) result = a * s . length ( );\n  else result = a * ( s . length ( ) - 1 );\n  return result;\n}"}
{"source": "java", "target": "python", "source_program": " static int countPair ( int a , int b ) {\n  String s = String . valueOf ( b ) ;\n  int i ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) != '9' ) break ;\n  }\n  int result ;\n  if ( i == s . length ( ) ) result = a * s . length ( ) ;\n  else result = a * ( s . length ( ) - 1 ) ;\n  return result ;\n}", "target_program": " def countPair ( a , b ) :\n    s = str ( b )\n    i = 0\n    while i < ( len ( s ) ) :\n        if ( s [ i ] != '9' ) :\n            break\n        i += 1\n    result = 0\n    if ( i == len ( s ) ) :\n        result = a * len ( s )\n    else :\n        result = a * ( len ( s ) - 1 )\n    return result"}
{"source": "java", "target": "cpp", "source_program": " static int countPair ( int a , int b ) {\n  String s = String . valueOf ( b ) ;\n  int i ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) != '9' ) break ;\n  }\n  int result ;\n  if ( i == s . length ( ) ) result = a * s . length ( ) ;\n  else result = a * ( s . length ( ) - 1 ) ;\n  return result ;\n}", "target_program": " int countPair ( int a, int b ) {\n  string s = to_string ( b );\n  int i;\n  for ( i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] != '9' ) break;\n  }\n  int result;\n  if ( i == s . length ( ) ) result = a * s . length ( );\n  else result = a * ( s . length ( ) - 1 );\n  return result;\n}"}
{"source": "cpp", "target": "java", "source_program": " int countPair ( int a, int b ) {\n  string s = to_string ( b );\n  int i;\n  for ( i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] != '9' ) break;\n  }\n  int result;\n  if ( i == s . length ( ) ) result = a * s . length ( );\n  else result = a * ( s . length ( ) - 1 );\n  return result;\n}", "target_program": " static int countPair ( int a , int b ) {\n  String s = String . valueOf ( b ) ;\n  int i ;\n  for ( i = 0 ;\n  i < s . length ( ) ;\n  i ++ ) {\n    if ( s . charAt ( i ) != '9' ) break ;\n  }\n  int result ;\n  if ( i == s . length ( ) ) result = a * s . length ( ) ;\n  else result = a * ( s . length ( ) - 1 ) ;\n  return result ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int countPair ( int a, int b ) {\n  string s = to_string ( b );\n  int i;\n  for ( i = 0;\n  i < s . length ( );\n  i ++ ) {\n    if ( s [ i ] != '9' ) break;\n  }\n  int result;\n  if ( i == s . length ( ) ) result = a * s . length ( );\n  else result = a * ( s . length ( ) - 1 );\n  return result;\n}", "target_program": " def countPair ( a , b ) :\n    s = str ( b )\n    i = 0\n    while i < ( len ( s ) ) :\n        if ( s [ i ] != '9' ) :\n            break\n        i += 1\n    result = 0\n    if ( i == len ( s ) ) :\n        result = a * len ( s )\n    else :\n        result = a * ( len ( s ) - 1 )\n    return result"}
{"source": "python", "target": "java", "source_program": " def interLeaveQueue ( q ) :\n    if ( q.qsize ( ) % 2 != 0 ) :\n        print ( \"Input even number of integers.\" )\n    s = [ ]\n    halfSize = int ( q.qsize ( ) / 2 )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n    for i in range ( halfSize ) :\n        q.put ( q.queue [ 0 ] )\n        q.get ( )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n        q.put ( q.queue [ 0 ] )\n        q.get ( )", "target_program": " static void interLeaveQueue ( Queue < Integer > q ) {\n  if ( q . size ( ) % 2 != 0 ) System . out . println ( \"Input even number of integers.\" ) ;\n  Stack < Integer > s = new Stack < > ( ) ;\n  int halfSize = q . size ( ) / 2 ;\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n}"}
{"source": "python", "target": "cpp", "source_program": " def interLeaveQueue ( q ) :\n    if ( q.qsize ( ) % 2 != 0 ) :\n        print ( \"Input even number of integers.\" )\n    s = [ ]\n    halfSize = int ( q.qsize ( ) / 2 )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n    for i in range ( halfSize ) :\n        q.put ( q.queue [ 0 ] )\n        q.get ( )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n        q.put ( q.queue [ 0 ] )\n        q.get ( )", "target_program": " void interLeaveQueue ( queue < int > & q ) {\n  if ( q . size ( ) % 2 != 0 ) cout << \"Input even number of integers.\" << endl;\n  stack < int > s;\n  int halfSize = q . size ( ) / 2;\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n}"}
{"source": "java", "target": "python", "source_program": " static void interLeaveQueue ( Queue < Integer > q ) {\n  if ( q . size ( ) % 2 != 0 ) System . out . println ( \"Input even number of integers.\" ) ;\n  Stack < Integer > s = new Stack < > ( ) ;\n  int halfSize = q . size ( ) / 2 ;\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n}", "target_program": " def interLeaveQueue ( q ) :\n    if ( q.qsize ( ) % 2 != 0 ) :\n        print ( \"Input even number of integers.\" )\n    s = [ ]\n    halfSize = int ( q.qsize ( ) / 2 )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n    for i in range ( halfSize ) :\n        q.put ( q.queue [ 0 ] )\n        q.get ( )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n        q.put ( q.queue [ 0 ] )\n        q.get ( )"}
{"source": "java", "target": "cpp", "source_program": " static void interLeaveQueue ( Queue < Integer > q ) {\n  if ( q . size ( ) % 2 != 0 ) System . out . println ( \"Input even number of integers.\" ) ;\n  Stack < Integer > s = new Stack < > ( ) ;\n  int halfSize = q . size ( ) / 2 ;\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n}", "target_program": " void interLeaveQueue ( queue < int > & q ) {\n  if ( q . size ( ) % 2 != 0 ) cout << \"Input even number of integers.\" << endl;\n  stack < int > s;\n  int halfSize = q . size ( ) / 2;\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n}"}
{"source": "cpp", "target": "java", "source_program": " void interLeaveQueue ( queue < int > & q ) {\n  if ( q . size ( ) % 2 != 0 ) cout << \"Input even number of integers.\" << endl;\n  stack < int > s;\n  int halfSize = q . size ( ) / 2;\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n}", "target_program": " static void interLeaveQueue ( Queue < Integer > q ) {\n  if ( q . size ( ) % 2 != 0 ) System . out . println ( \"Input even number of integers.\" ) ;\n  Stack < Integer > s = new Stack < > ( ) ;\n  int halfSize = q . size ( ) / 2 ;\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  for ( int i = 0 ;\n  i < halfSize ;\n  i ++ ) {\n    s . push ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n  while ( ! s . empty ( ) ) {\n    q . add ( s . peek ( ) ) ;\n    s . pop ( ) ;\n    q . add ( q . peek ( ) ) ;\n    q . poll ( ) ;\n  }\n}"}
{"source": "cpp", "target": "python", "source_program": " void interLeaveQueue ( queue < int > & q ) {\n  if ( q . size ( ) % 2 != 0 ) cout << \"Input even number of integers.\" << endl;\n  stack < int > s;\n  int halfSize = q . size ( ) / 2;\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n  for ( int i = 0;\n  i < halfSize;\n  i ++ ) {\n    s . push ( q . front ( ) );\n    q . pop ( );\n  }\n  while ( ! s . empty ( ) ) {\n    q . push ( s . top ( ) );\n    s . pop ( );\n    q . push ( q . front ( ) );\n    q . pop ( );\n  }\n}", "target_program": " def interLeaveQueue ( q ) :\n    if ( q.qsize ( ) % 2 != 0 ) :\n        print ( \"Input even number of integers.\" )\n    s = [ ]\n    halfSize = int ( q.qsize ( ) / 2 )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n    for i in range ( halfSize ) :\n        q.put ( q.queue [ 0 ] )\n        q.get ( )\n    for i in range ( halfSize ) :\n        s.append ( q.queue [ 0 ] )\n        q.get ( )\n    while len ( s ) != 0 :\n        q.put ( s [ - 1 ] )\n        s.pop ( )\n        q.put ( q.queue [ 0 ] )\n        q.get ( )"}
{"source": "python", "target": "java", "source_program": " def findInteger ( arr , n ) :\n    neg = 0\n    pos = 0\n    sum = 0\n    for i in range ( 0 , n ) :\n        sum += arr [ i ]\n        if ( arr [ i ] < 0 ) :\n            neg += 1\n        else :\n            pos += 1\n    return ( sum / abs ( neg - pos ) )", "target_program": " static int findInteger ( int arr [ ] , int n ) {\n  int neg = 0 , pos = 0 ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( arr [ i ] < 0 ) neg ++ ;\n    else pos ++ ;\n  }\n  return ( sum / Math . abs ( neg - pos ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def findInteger ( arr , n ) :\n    neg = 0\n    pos = 0\n    sum = 0\n    for i in range ( 0 , n ) :\n        sum += arr [ i ]\n        if ( arr [ i ] < 0 ) :\n            neg += 1\n        else :\n            pos += 1\n    return ( sum / abs ( neg - pos ) )", "target_program": " int findInteger ( int arr [ ], int n ) {\n  int neg = 0, pos = 0;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( arr [ i ] < 0 ) neg ++;\n    else pos ++;\n  }\n  return ( sum / abs ( neg - pos ) );\n}"}
{"source": "java", "target": "python", "source_program": " static int findInteger ( int arr [ ] , int n ) {\n  int neg = 0 , pos = 0 ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( arr [ i ] < 0 ) neg ++ ;\n    else pos ++ ;\n  }\n  return ( sum / Math . abs ( neg - pos ) ) ;\n}", "target_program": " def findInteger ( arr , n ) :\n    neg = 0\n    pos = 0\n    sum = 0\n    for i in range ( 0 , n ) :\n        sum += arr [ i ]\n        if ( arr [ i ] < 0 ) :\n            neg += 1\n        else :\n            pos += 1\n    return ( sum / abs ( neg - pos ) )"}
{"source": "java", "target": "cpp", "source_program": " static int findInteger ( int arr [ ] , int n ) {\n  int neg = 0 , pos = 0 ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( arr [ i ] < 0 ) neg ++ ;\n    else pos ++ ;\n  }\n  return ( sum / Math . abs ( neg - pos ) ) ;\n}", "target_program": " int findInteger ( int arr [ ], int n ) {\n  int neg = 0, pos = 0;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( arr [ i ] < 0 ) neg ++;\n    else pos ++;\n  }\n  return ( sum / abs ( neg - pos ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " int findInteger ( int arr [ ], int n ) {\n  int neg = 0, pos = 0;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( arr [ i ] < 0 ) neg ++;\n    else pos ++;\n  }\n  return ( sum / abs ( neg - pos ) );\n}", "target_program": " static int findInteger ( int arr [ ] , int n ) {\n  int neg = 0 , pos = 0 ;\n  int sum = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    sum += arr [ i ] ;\n    if ( arr [ i ] < 0 ) neg ++ ;\n    else pos ++ ;\n  }\n  return ( sum / Math . abs ( neg - pos ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int findInteger ( int arr [ ], int n ) {\n  int neg = 0, pos = 0;\n  int sum = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    sum += arr [ i ];\n    if ( arr [ i ] < 0 ) neg ++;\n    else pos ++;\n  }\n  return ( sum / abs ( neg - pos ) );\n}", "target_program": " def findInteger ( arr , n ) :\n    neg = 0\n    pos = 0\n    sum = 0\n    for i in range ( 0 , n ) :\n        sum += arr [ i ]\n        if ( arr [ i ] < 0 ) :\n            neg += 1\n        else :\n            pos += 1\n    return ( sum / abs ( neg - pos ) )"}
{"source": "python", "target": "java", "source_program": " def maxLen ( arr ) :\n    max_len = 0\n    for i in range ( len ( arr ) ) :\n        curr_sum = 0\n        for j in range ( i , len ( arr ) ) :\n            curr_sum += arr [ j ]\n            if curr_sum == 0 :\n                max_len = max ( max_len , j - i + 1 )\n    return max_len", "target_program": " static int maxLen ( int arr [ ] , int n ) {\n  int max_len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_sum += arr [ j ] ;\n      if ( curr_sum == 0 ) max_len = Math . max ( max_len , j - i + 1 ) ;\n    }\n  }\n  return max_len ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxLen ( arr ) :\n    max_len = 0\n    for i in range ( len ( arr ) ) :\n        curr_sum = 0\n        for j in range ( i , len ( arr ) ) :\n            curr_sum += arr [ j ]\n            if curr_sum == 0 :\n                max_len = max ( max_len , j - i + 1 )\n    return max_len", "target_program": " int maxLen ( int arr [ ], int n ) {\n  int max_len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_sum = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_sum += arr [ j ];\n      if ( curr_sum == 0 ) max_len = max ( max_len, j - i + 1 );\n    }\n  }\n  return max_len;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxLen ( int arr [ ] , int n ) {\n  int max_len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_sum += arr [ j ] ;\n      if ( curr_sum == 0 ) max_len = Math . max ( max_len , j - i + 1 ) ;\n    }\n  }\n  return max_len ;\n}", "target_program": " def maxLen ( arr ) :\n    max_len = 0\n    for i in range ( len ( arr ) ) :\n        curr_sum = 0\n        for j in range ( i , len ( arr ) ) :\n            curr_sum += arr [ j ]\n            if curr_sum == 0 :\n                max_len = max ( max_len , j - i + 1 )\n    return max_len"}
{"source": "java", "target": "cpp", "source_program": " static int maxLen ( int arr [ ] , int n ) {\n  int max_len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_sum += arr [ j ] ;\n      if ( curr_sum == 0 ) max_len = Math . max ( max_len , j - i + 1 ) ;\n    }\n  }\n  return max_len ;\n}", "target_program": " int maxLen ( int arr [ ], int n ) {\n  int max_len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_sum = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_sum += arr [ j ];\n      if ( curr_sum == 0 ) max_len = max ( max_len, j - i + 1 );\n    }\n  }\n  return max_len;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxLen ( int arr [ ], int n ) {\n  int max_len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_sum = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_sum += arr [ j ];\n      if ( curr_sum == 0 ) max_len = max ( max_len, j - i + 1 );\n    }\n  }\n  return max_len;\n}", "target_program": " static int maxLen ( int arr [ ] , int n ) {\n  int max_len = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int curr_sum = 0 ;\n    for ( int j = i ;\n    j < n ;\n    j ++ ) {\n      curr_sum += arr [ j ] ;\n      if ( curr_sum == 0 ) max_len = Math . max ( max_len , j - i + 1 ) ;\n    }\n  }\n  return max_len ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxLen ( int arr [ ], int n ) {\n  int max_len = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int curr_sum = 0;\n    for ( int j = i;\n    j < n;\n    j ++ ) {\n      curr_sum += arr [ j ];\n      if ( curr_sum == 0 ) max_len = max ( max_len, j - i + 1 );\n    }\n  }\n  return max_len;\n}", "target_program": " def maxLen ( arr ) :\n    max_len = 0\n    for i in range ( len ( arr ) ) :\n        curr_sum = 0\n        for j in range ( i , len ( arr ) ) :\n            curr_sum += arr [ j ]\n            if curr_sum == 0 :\n                max_len = max ( max_len , j - i + 1 )\n    return max_len"}
{"source": "python", "target": "java", "source_program": " def nextPowerOf2 ( n ) :\n    count = 0 ;\n    if ( n and not ( n & ( n - 1 ) ) ) :\n        return n\n    while ( n != 0 ) :\n        n >>= 1\n        count += 1\n    return 1 << count ;", "target_program": " static int nextPowerOf2 ( int n ) {\n  int count = 0 ;\n  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;\n  while ( n != 0 ) {\n    n >>= 1 ;\n    count += 1 ;\n  }\n  return 1 << count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def nextPowerOf2 ( n ) :\n    count = 0 ;\n    if ( n and not ( n & ( n - 1 ) ) ) :\n        return n\n    while ( n != 0 ) :\n        n >>= 1\n        count += 1\n    return 1 << count ;", "target_program": " unsigned int nextPowerOf2 ( unsigned int n ) {\n  unsigned count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) return n;\n  while ( n != 0 ) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n}"}
{"source": "java", "target": "python", "source_program": " static int nextPowerOf2 ( int n ) {\n  int count = 0 ;\n  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;\n  while ( n != 0 ) {\n    n >>= 1 ;\n    count += 1 ;\n  }\n  return 1 << count ;\n}", "target_program": " def nextPowerOf2 ( n ) :\n    count = 0 ;\n    if ( n and not ( n & ( n - 1 ) ) ) :\n        return n\n    while ( n != 0 ) :\n        n >>= 1\n        count += 1\n    return 1 << count ;"}
{"source": "java", "target": "cpp", "source_program": " static int nextPowerOf2 ( int n ) {\n  int count = 0 ;\n  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;\n  while ( n != 0 ) {\n    n >>= 1 ;\n    count += 1 ;\n  }\n  return 1 << count ;\n}", "target_program": " unsigned int nextPowerOf2 ( unsigned int n ) {\n  unsigned count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) return n;\n  while ( n != 0 ) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n}"}
{"source": "cpp", "target": "java", "source_program": " unsigned int nextPowerOf2 ( unsigned int n ) {\n  unsigned count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) return n;\n  while ( n != 0 ) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n}", "target_program": " static int nextPowerOf2 ( int n ) {\n  int count = 0 ;\n  if ( n > 0 && ( n & ( n - 1 ) ) == 0 ) return n ;\n  while ( n != 0 ) {\n    n >>= 1 ;\n    count += 1 ;\n  }\n  return 1 << count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " unsigned int nextPowerOf2 ( unsigned int n ) {\n  unsigned count = 0;\n  if ( n && ! ( n & ( n - 1 ) ) ) return n;\n  while ( n != 0 ) {\n    n >>= 1;\n    count += 1;\n  }\n  return 1 << count;\n}", "target_program": " def nextPowerOf2 ( n ) :\n    count = 0 ;\n    if ( n and not ( n & ( n - 1 ) ) ) :\n        return n\n    while ( n != 0 ) :\n        n >>= 1\n        count += 1\n    return 1 << count ;"}
{"source": "python", "target": "java", "source_program": " def lenOfLongestGP ( sett , n ) :\n    if n < 2 :\n        return n\n    if n == 2 :\n        return ( sett [ 1 ] % sett [ 0 ] == 0 )\n    sett.sort ( )\n    L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    llgp = 1\n    for i in range ( 0 , n ) :\n        if sett [ n - 1 ] % sett [ i ] == 0 :\n            L [ i ] [ n - 1 ] = 2\n        else :\n            L [ i ] [ n - 1 ] = 1\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while i >= 0 and k <= n - 1 :\n            if sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ] :\n                k += 1\n            elif sett [ i ] * sett [ k ] > sett [ j ] * sett [ j ] :\n                if sett [ j ] % sett [ i ] == 0 :\n                    L [ i ] [ j ] = 2\n                else :\n                    L [ i ] [ j ] = 1\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                if L [ i ] [ j ] > llgp :\n                    llgp = L [ i ] [ j ]\n                i -= 1\n                k + 1\n        while i >= 0 :\n            if sett [ j ] % sett [ i ] == 0 :\n                L [ i ] [ j ] = 2\n            else :\n                L [ i ] [ j ] = 1\n            i -= 1\n    return llgp", "target_program": " static int lenOfLongestGP ( int set [ ] , int n ) {\n  if ( n < 2 ) {\n    return n ;\n  }\n  if ( n == 2 ) {\n    return ( set [ 1 ] % set [ 0 ] == 0 ? 1 : 0 ) ;\n  }\n  Arrays . sort ( set ) ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llgp = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( set [ n - 1 ] % set [ i ] == 0 ) {\n      L [ i ] [ n - 1 ] = 2 ;\n    }\n    else {\n      L [ i ] [ n - 1 ] = 1 ;\n    }\n  }\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  -- j ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) {\n        ++ k ;\n      }\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) {\n          L [ i ] [ j ] = 2 ;\n        }\n        else {\n          L [ i ] [ j ] = 1 ;\n        }\n        -- i ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        if ( L [ i ] [ j ] > llgp ) {\n          llgp = L [ i ] [ j ] ;\n        }\n        -- i ;\n        ++ k ;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) {\n        L [ i ] [ j ] = 2 ;\n      }\n      else {\n        L [ i ] [ j ] = 1 ;\n      }\n      -- i ;\n    }\n  }\n  return llgp ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def lenOfLongestGP ( sett , n ) :\n    if n < 2 :\n        return n\n    if n == 2 :\n        return ( sett [ 1 ] % sett [ 0 ] == 0 )\n    sett.sort ( )\n    L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    llgp = 1\n    for i in range ( 0 , n ) :\n        if sett [ n - 1 ] % sett [ i ] == 0 :\n            L [ i ] [ n - 1 ] = 2\n        else :\n            L [ i ] [ n - 1 ] = 1\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while i >= 0 and k <= n - 1 :\n            if sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ] :\n                k += 1\n            elif sett [ i ] * sett [ k ] > sett [ j ] * sett [ j ] :\n                if sett [ j ] % sett [ i ] == 0 :\n                    L [ i ] [ j ] = 2\n                else :\n                    L [ i ] [ j ] = 1\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                if L [ i ] [ j ] > llgp :\n                    llgp = L [ i ] [ j ]\n                i -= 1\n                k + 1\n        while i >= 0 :\n            if sett [ j ] % sett [ i ] == 0 :\n                L [ i ] [ j ] = 2\n            else :\n                L [ i ] [ j ] = 1\n            i -= 1\n    return llgp", "target_program": " int lenOfLongestGP ( int set [ ], int n ) {\n  if ( n < 2 ) return n;\n  if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 );\n  sort ( set, set + n );\n  int L [ n ] [ n ];\n  int llgp = 1;\n  for ( int i = 0;\n  i < n;\n  ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n - 1 ] = 2;\n  else L [ i ] [ n - 1 ] = 1;\n  for ( int j = n - 2;\n  j >= 1;\n  -- j ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ k;\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n        else L [ i ] [ j ] = 1;\n        -- i;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ];\n        -- i;\n        ++ k;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n      else L [ i ] [ j ] = 1;\n      -- i;\n    }\n  }\n  return llgp;\n}"}
{"source": "java", "target": "python", "source_program": " static int lenOfLongestGP ( int set [ ] , int n ) {\n  if ( n < 2 ) {\n    return n ;\n  }\n  if ( n == 2 ) {\n    return ( set [ 1 ] % set [ 0 ] == 0 ? 1 : 0 ) ;\n  }\n  Arrays . sort ( set ) ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llgp = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( set [ n - 1 ] % set [ i ] == 0 ) {\n      L [ i ] [ n - 1 ] = 2 ;\n    }\n    else {\n      L [ i ] [ n - 1 ] = 1 ;\n    }\n  }\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  -- j ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) {\n        ++ k ;\n      }\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) {\n          L [ i ] [ j ] = 2 ;\n        }\n        else {\n          L [ i ] [ j ] = 1 ;\n        }\n        -- i ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        if ( L [ i ] [ j ] > llgp ) {\n          llgp = L [ i ] [ j ] ;\n        }\n        -- i ;\n        ++ k ;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) {\n        L [ i ] [ j ] = 2 ;\n      }\n      else {\n        L [ i ] [ j ] = 1 ;\n      }\n      -- i ;\n    }\n  }\n  return llgp ;\n}", "target_program": " def lenOfLongestGP ( sett , n ) :\n    if n < 2 :\n        return n\n    if n == 2 :\n        return ( sett [ 1 ] % sett [ 0 ] == 0 )\n    sett.sort ( )\n    L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    llgp = 1\n    for i in range ( 0 , n ) :\n        if sett [ n - 1 ] % sett [ i ] == 0 :\n            L [ i ] [ n - 1 ] = 2\n        else :\n            L [ i ] [ n - 1 ] = 1\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while i >= 0 and k <= n - 1 :\n            if sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ] :\n                k += 1\n            elif sett [ i ] * sett [ k ] > sett [ j ] * sett [ j ] :\n                if sett [ j ] % sett [ i ] == 0 :\n                    L [ i ] [ j ] = 2\n                else :\n                    L [ i ] [ j ] = 1\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                if L [ i ] [ j ] > llgp :\n                    llgp = L [ i ] [ j ]\n                i -= 1\n                k + 1\n        while i >= 0 :\n            if sett [ j ] % sett [ i ] == 0 :\n                L [ i ] [ j ] = 2\n            else :\n                L [ i ] [ j ] = 1\n            i -= 1\n    return llgp"}
{"source": "java", "target": "cpp", "source_program": " static int lenOfLongestGP ( int set [ ] , int n ) {\n  if ( n < 2 ) {\n    return n ;\n  }\n  if ( n == 2 ) {\n    return ( set [ 1 ] % set [ 0 ] == 0 ? 1 : 0 ) ;\n  }\n  Arrays . sort ( set ) ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llgp = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( set [ n - 1 ] % set [ i ] == 0 ) {\n      L [ i ] [ n - 1 ] = 2 ;\n    }\n    else {\n      L [ i ] [ n - 1 ] = 1 ;\n    }\n  }\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  -- j ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) {\n        ++ k ;\n      }\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) {\n          L [ i ] [ j ] = 2 ;\n        }\n        else {\n          L [ i ] [ j ] = 1 ;\n        }\n        -- i ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        if ( L [ i ] [ j ] > llgp ) {\n          llgp = L [ i ] [ j ] ;\n        }\n        -- i ;\n        ++ k ;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) {\n        L [ i ] [ j ] = 2 ;\n      }\n      else {\n        L [ i ] [ j ] = 1 ;\n      }\n      -- i ;\n    }\n  }\n  return llgp ;\n}", "target_program": " int lenOfLongestGP ( int set [ ], int n ) {\n  if ( n < 2 ) return n;\n  if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 );\n  sort ( set, set + n );\n  int L [ n ] [ n ];\n  int llgp = 1;\n  for ( int i = 0;\n  i < n;\n  ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n - 1 ] = 2;\n  else L [ i ] [ n - 1 ] = 1;\n  for ( int j = n - 2;\n  j >= 1;\n  -- j ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ k;\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n        else L [ i ] [ j ] = 1;\n        -- i;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ];\n        -- i;\n        ++ k;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n      else L [ i ] [ j ] = 1;\n      -- i;\n    }\n  }\n  return llgp;\n}"}
{"source": "cpp", "target": "java", "source_program": " int lenOfLongestGP ( int set [ ], int n ) {\n  if ( n < 2 ) return n;\n  if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 );\n  sort ( set, set + n );\n  int L [ n ] [ n ];\n  int llgp = 1;\n  for ( int i = 0;\n  i < n;\n  ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n - 1 ] = 2;\n  else L [ i ] [ n - 1 ] = 1;\n  for ( int j = n - 2;\n  j >= 1;\n  -- j ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ k;\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n        else L [ i ] [ j ] = 1;\n        -- i;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ];\n        -- i;\n        ++ k;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n      else L [ i ] [ j ] = 1;\n      -- i;\n    }\n  }\n  return llgp;\n}", "target_program": " static int lenOfLongestGP ( int set [ ] , int n ) {\n  if ( n < 2 ) {\n    return n ;\n  }\n  if ( n == 2 ) {\n    return ( set [ 1 ] % set [ 0 ] == 0 ? 1 : 0 ) ;\n  }\n  Arrays . sort ( set ) ;\n  int L [ ] [ ] = new int [ n ] [ n ] ;\n  int llgp = 1 ;\n  for ( int i = 0 ;\n  i < n ;\n  ++ i ) {\n    if ( set [ n - 1 ] % set [ i ] == 0 ) {\n      L [ i ] [ n - 1 ] = 2 ;\n    }\n    else {\n      L [ i ] [ n - 1 ] = 1 ;\n    }\n  }\n  for ( int j = n - 2 ;\n  j >= 1 ;\n  -- j ) {\n    int i = j - 1 , k = j + 1 ;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) {\n        ++ k ;\n      }\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) {\n          L [ i ] [ j ] = 2 ;\n        }\n        else {\n          L [ i ] [ j ] = 1 ;\n        }\n        -- i ;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1 ;\n        if ( L [ i ] [ j ] > llgp ) {\n          llgp = L [ i ] [ j ] ;\n        }\n        -- i ;\n        ++ k ;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) {\n        L [ i ] [ j ] = 2 ;\n      }\n      else {\n        L [ i ] [ j ] = 1 ;\n      }\n      -- i ;\n    }\n  }\n  return llgp ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int lenOfLongestGP ( int set [ ], int n ) {\n  if ( n < 2 ) return n;\n  if ( n == 2 ) return ( set [ 1 ] % set [ 0 ] == 0 );\n  sort ( set, set + n );\n  int L [ n ] [ n ];\n  int llgp = 1;\n  for ( int i = 0;\n  i < n;\n  ++ i ) if ( set [ n - 1 ] % set [ i ] == 0 ) L [ i ] [ n - 1 ] = 2;\n  else L [ i ] [ n - 1 ] = 1;\n  for ( int j = n - 2;\n  j >= 1;\n  -- j ) {\n    int i = j - 1, k = j + 1;\n    while ( i >= 0 && k <= n - 1 ) {\n      if ( set [ i ] * set [ k ] < set [ j ] * set [ j ] ) ++ k;\n      else if ( set [ i ] * set [ k ] > set [ j ] * set [ j ] ) {\n        if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n        else L [ i ] [ j ] = 1;\n        -- i;\n      }\n      else {\n        L [ i ] [ j ] = L [ j ] [ k ] + 1;\n        if ( L [ i ] [ j ] > llgp ) llgp = L [ i ] [ j ];\n        -- i;\n        ++ k;\n      }\n    }\n    while ( i >= 0 ) {\n      if ( set [ j ] % set [ i ] == 0 ) L [ i ] [ j ] = 2;\n      else L [ i ] [ j ] = 1;\n      -- i;\n    }\n  }\n  return llgp;\n}", "target_program": " def lenOfLongestGP ( sett , n ) :\n    if n < 2 :\n        return n\n    if n == 2 :\n        return ( sett [ 1 ] % sett [ 0 ] == 0 )\n    sett.sort ( )\n    L = [ [ 0 for i in range ( n ) ] for i in range ( n ) ]\n    llgp = 1\n    for i in range ( 0 , n ) :\n        if sett [ n - 1 ] % sett [ i ] == 0 :\n            L [ i ] [ n - 1 ] = 2\n        else :\n            L [ i ] [ n - 1 ] = 1\n    for j in range ( n - 2 , 0 , - 1 ) :\n        i = j - 1\n        k = j + 1\n        while i >= 0 and k <= n - 1 :\n            if sett [ i ] * sett [ k ] < sett [ j ] * sett [ j ] :\n                k += 1\n            elif sett [ i ] * sett [ k ] > sett [ j ] * sett [ j ] :\n                if sett [ j ] % sett [ i ] == 0 :\n                    L [ i ] [ j ] = 2\n                else :\n                    L [ i ] [ j ] = 1\n                i -= 1\n            else :\n                L [ i ] [ j ] = L [ j ] [ k ] + 1\n                if L [ i ] [ j ] > llgp :\n                    llgp = L [ i ] [ j ]\n                i -= 1\n                k + 1\n        while i >= 0 :\n            if sett [ j ] % sett [ i ] == 0 :\n                L [ i ] [ j ] = 2\n            else :\n                L [ i ] [ j ] = 1\n            i -= 1\n    return llgp"}
{"source": "python", "target": "java", "source_program": " def minCost ( cost , m , n ) :\n    tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ]\n    tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]\n    for i in range ( 1 , m + 1 ) :\n        tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ]\n    for j in range ( 1 , n + 1 ) :\n        tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ]\n    return tc [ m ] [ n ]", "target_program": " private static int minCost ( int cost [ ] [ ] , int m , int n ) {\n  int i , j ;\n  int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;\n  for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ;\n  return tc [ m ] [ n ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def minCost ( cost , m , n ) :\n    tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ]\n    tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]\n    for i in range ( 1 , m + 1 ) :\n        tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ]\n    for j in range ( 1 , n + 1 ) :\n        tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ]\n    return tc [ m ] [ n ]", "target_program": " int minCost ( int cost [ R ] [ C ], int m, int n ) {\n  int i, j;\n  int tc [ R ] [ C ];\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ];\n  for ( j = 1;\n  j <= n;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) for ( j = 1;\n  j <= n;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ], tc [ i - 1 ] [ j ], tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ];\n  return tc [ m ] [ n ];\n}"}
{"source": "java", "target": "python", "source_program": " private static int minCost ( int cost [ ] [ ] , int m , int n ) {\n  int i , j ;\n  int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;\n  for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ;\n  return tc [ m ] [ n ] ;\n}", "target_program": " def minCost ( cost , m , n ) :\n    tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ]\n    tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]\n    for i in range ( 1 , m + 1 ) :\n        tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ]\n    for j in range ( 1 , n + 1 ) :\n        tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ]\n    return tc [ m ] [ n ]"}
{"source": "java", "target": "cpp", "source_program": " private static int minCost ( int cost [ ] [ ] , int m , int n ) {\n  int i , j ;\n  int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;\n  for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ;\n  return tc [ m ] [ n ] ;\n}", "target_program": " int minCost ( int cost [ R ] [ C ], int m, int n ) {\n  int i, j;\n  int tc [ R ] [ C ];\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ];\n  for ( j = 1;\n  j <= n;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) for ( j = 1;\n  j <= n;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ], tc [ i - 1 ] [ j ], tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ];\n  return tc [ m ] [ n ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int minCost ( int cost [ R ] [ C ], int m, int n ) {\n  int i, j;\n  int tc [ R ] [ C ];\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ];\n  for ( j = 1;\n  j <= n;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) for ( j = 1;\n  j <= n;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ], tc [ i - 1 ] [ j ], tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ];\n  return tc [ m ] [ n ];\n}", "target_program": " private static int minCost ( int cost [ ] [ ] , int m , int n ) {\n  int i , j ;\n  int tc [ ] [ ] = new int [ m + 1 ] [ n + 1 ] ;\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ] ;\n  for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ] ;\n  for ( i = 1 ;\n  i <= m ;\n  i ++ ) for ( j = 1 ;\n  j <= n ;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ] ;\n  return tc [ m ] [ n ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int minCost ( int cost [ R ] [ C ], int m, int n ) {\n  int i, j;\n  int tc [ R ] [ C ];\n  tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ];\n  for ( j = 1;\n  j <= n;\n  j ++ ) tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ];\n  for ( i = 1;\n  i <= m;\n  i ++ ) for ( j = 1;\n  j <= n;\n  j ++ ) tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ], tc [ i - 1 ] [ j ], tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ];\n  return tc [ m ] [ n ];\n}", "target_program": " def minCost ( cost , m , n ) :\n    tc = [ [ 0 for x in range ( C ) ] for x in range ( R ) ]\n    tc [ 0 ] [ 0 ] = cost [ 0 ] [ 0 ]\n    for i in range ( 1 , m + 1 ) :\n        tc [ i ] [ 0 ] = tc [ i - 1 ] [ 0 ] + cost [ i ] [ 0 ]\n    for j in range ( 1 , n + 1 ) :\n        tc [ 0 ] [ j ] = tc [ 0 ] [ j - 1 ] + cost [ 0 ] [ j ]\n    for i in range ( 1 , m + 1 ) :\n        for j in range ( 1 , n + 1 ) :\n            tc [ i ] [ j ] = min ( tc [ i - 1 ] [ j - 1 ] , tc [ i - 1 ] [ j ] , tc [ i ] [ j - 1 ] ) + cost [ i ] [ j ]\n    return tc [ m ] [ n ]"}
{"source": "python", "target": "java", "source_program": " def distance ( lat1 , lat2 , lon1 , lon2 ) :\n    lon1 = radians ( lon1 )\n    lon2 = radians ( lon2 )\n    lat1 = radians ( lat1 )\n    lat2 = radians ( lat2 )\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / 2 ) ** 2\n    c = 2 * asin ( sqrt ( a ) )\n    r = 6371\n    return ( c * r )", "target_program": " public static double distance ( double lat1 , double lat2 , double lon1 , double lon2 ) {\n  lon1 = Math . toRadians ( lon1 ) ;\n  lon2 = Math . toRadians ( lon2 ) ;\n  lat1 = Math . toRadians ( lat1 ) ;\n  lat2 = Math . toRadians ( lat2 ) ;\n  double dlon = lon2 - lon1 ;\n  double dlat = lat2 - lat1 ;\n  double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Math . cos ( lat1 ) * Math . cos ( lat2 ) * Math . pow ( Math . sin ( dlon / 2 ) , 2 ) ;\n  double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;\n  double r = 6371 ;\n  return ( c * r ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def distance ( lat1 , lat2 , lon1 , lon2 ) :\n    lon1 = radians ( lon1 )\n    lon2 = radians ( lon2 )\n    lat1 = radians ( lat1 )\n    lat2 = radians ( lat2 )\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / 2 ) ** 2\n    c = 2 * asin ( sqrt ( a ) )\n    r = 6371\n    return ( c * r )", "target_program": " long double distance ( long double lat1, long double long1, long double lat2, long double long2 ) {\n  lat1 = toRadians ( lat1 );\n  long1 = toRadians ( long1 );\n  lat2 = toRadians ( lat2 );\n  long2 = toRadians ( long2 );\n  long double dlong = long2 - long1;\n  long double dlat = lat2 - lat1;\n  long double ans = pow ( sin ( dlat / 2 ), 2 ) + cos ( lat1 ) * cos ( lat2 ) * pow ( sin ( dlong / 2 ), 2 );\n  ans = 2 * asin ( sqrt ( ans ) );\n  long double R = 6371;\n  ans = ans * R;\n  return ans;\n}"}
{"source": "java", "target": "python", "source_program": " public static double distance ( double lat1 , double lat2 , double lon1 , double lon2 ) {\n  lon1 = Math . toRadians ( lon1 ) ;\n  lon2 = Math . toRadians ( lon2 ) ;\n  lat1 = Math . toRadians ( lat1 ) ;\n  lat2 = Math . toRadians ( lat2 ) ;\n  double dlon = lon2 - lon1 ;\n  double dlat = lat2 - lat1 ;\n  double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Math . cos ( lat1 ) * Math . cos ( lat2 ) * Math . pow ( Math . sin ( dlon / 2 ) , 2 ) ;\n  double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;\n  double r = 6371 ;\n  return ( c * r ) ;\n}", "target_program": " def distance ( lat1 , lat2 , lon1 , lon2 ) :\n    lon1 = radians ( lon1 )\n    lon2 = radians ( lon2 )\n    lat1 = radians ( lat1 )\n    lat2 = radians ( lat2 )\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / 2 ) ** 2\n    c = 2 * asin ( sqrt ( a ) )\n    r = 6371\n    return ( c * r )"}
{"source": "java", "target": "cpp", "source_program": " public static double distance ( double lat1 , double lat2 , double lon1 , double lon2 ) {\n  lon1 = Math . toRadians ( lon1 ) ;\n  lon2 = Math . toRadians ( lon2 ) ;\n  lat1 = Math . toRadians ( lat1 ) ;\n  lat2 = Math . toRadians ( lat2 ) ;\n  double dlon = lon2 - lon1 ;\n  double dlat = lat2 - lat1 ;\n  double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Math . cos ( lat1 ) * Math . cos ( lat2 ) * Math . pow ( Math . sin ( dlon / 2 ) , 2 ) ;\n  double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;\n  double r = 6371 ;\n  return ( c * r ) ;\n}", "target_program": " long double distance ( long double lat1, long double long1, long double lat2, long double long2 ) {\n  lat1 = toRadians ( lat1 );\n  long1 = toRadians ( long1 );\n  lat2 = toRadians ( lat2 );\n  long2 = toRadians ( long2 );\n  long double dlong = long2 - long1;\n  long double dlat = lat2 - lat1;\n  long double ans = pow ( sin ( dlat / 2 ), 2 ) + cos ( lat1 ) * cos ( lat2 ) * pow ( sin ( dlong / 2 ), 2 );\n  ans = 2 * asin ( sqrt ( ans ) );\n  long double R = 6371;\n  ans = ans * R;\n  return ans;\n}"}
{"source": "cpp", "target": "java", "source_program": " long double distance ( long double lat1, long double long1, long double lat2, long double long2 ) {\n  lat1 = toRadians ( lat1 );\n  long1 = toRadians ( long1 );\n  lat2 = toRadians ( lat2 );\n  long2 = toRadians ( long2 );\n  long double dlong = long2 - long1;\n  long double dlat = lat2 - lat1;\n  long double ans = pow ( sin ( dlat / 2 ), 2 ) + cos ( lat1 ) * cos ( lat2 ) * pow ( sin ( dlong / 2 ), 2 );\n  ans = 2 * asin ( sqrt ( ans ) );\n  long double R = 6371;\n  ans = ans * R;\n  return ans;\n}", "target_program": " public static double distance ( double lat1 , double lat2 , double lon1 , double lon2 ) {\n  lon1 = Math . toRadians ( lon1 ) ;\n  lon2 = Math . toRadians ( lon2 ) ;\n  lat1 = Math . toRadians ( lat1 ) ;\n  lat2 = Math . toRadians ( lat2 ) ;\n  double dlon = lon2 - lon1 ;\n  double dlat = lat2 - lat1 ;\n  double a = Math . pow ( Math . sin ( dlat / 2 ) , 2 ) + Math . cos ( lat1 ) * Math . cos ( lat2 ) * Math . pow ( Math . sin ( dlon / 2 ) , 2 ) ;\n  double c = 2 * Math . asin ( Math . sqrt ( a ) ) ;\n  double r = 6371 ;\n  return ( c * r ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long double distance ( long double lat1, long double long1, long double lat2, long double long2 ) {\n  lat1 = toRadians ( lat1 );\n  long1 = toRadians ( long1 );\n  lat2 = toRadians ( lat2 );\n  long2 = toRadians ( long2 );\n  long double dlong = long2 - long1;\n  long double dlat = lat2 - lat1;\n  long double ans = pow ( sin ( dlat / 2 ), 2 ) + cos ( lat1 ) * cos ( lat2 ) * pow ( sin ( dlong / 2 ), 2 );\n  ans = 2 * asin ( sqrt ( ans ) );\n  long double R = 6371;\n  ans = ans * R;\n  return ans;\n}", "target_program": " def distance ( lat1 , lat2 , lon1 , lon2 ) :\n    lon1 = radians ( lon1 )\n    lon2 = radians ( lon2 )\n    lat1 = radians ( lat1 )\n    lat2 = radians ( lat2 )\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin ( dlat / 2 ) ** 2 + cos ( lat1 ) * cos ( lat2 ) * sin ( dlon / 2 ) ** 2\n    c = 2 * asin ( sqrt ( a ) )\n    r = 6371\n    return ( c * r )"}
{"source": "python", "target": "java", "source_program": " def nextfit ( weight , c ) :\n    res = 0\n    rem = c\n    for _ in range ( len ( weight ) ) :\n        if rem >= weight [ _ ] :\n            rem = rem - weight [ _ ]\n        else :\n            res += 1\n            rem = c - weight [ _ ]\n    return res", "target_program": " static int nextFit ( int weight [ ] , int n , int c ) {\n  int res = 0 , bin_rem = c ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++ ;\n      bin_rem = c - weight [ i ] ;\n    }\n    else bin_rem -= weight [ i ] ;\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def nextfit ( weight , c ) :\n    res = 0\n    rem = c\n    for _ in range ( len ( weight ) ) :\n        if rem >= weight [ _ ] :\n            rem = rem - weight [ _ ]\n        else :\n            res += 1\n            rem = c - weight [ _ ]\n    return res", "target_program": " int nextFit ( int weight [ ], int n, int c ) {\n  int res = 0, bin_rem = c;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++;\n      bin_rem = c - weight [ i ];\n    }\n    else bin_rem -= weight [ i ];\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static int nextFit ( int weight [ ] , int n , int c ) {\n  int res = 0 , bin_rem = c ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++ ;\n      bin_rem = c - weight [ i ] ;\n    }\n    else bin_rem -= weight [ i ] ;\n  }\n  return res ;\n}", "target_program": " def nextfit ( weight , c ) :\n    res = 0\n    rem = c\n    for _ in range ( len ( weight ) ) :\n        if rem >= weight [ _ ] :\n            rem = rem - weight [ _ ]\n        else :\n            res += 1\n            rem = c - weight [ _ ]\n    return res"}
{"source": "java", "target": "cpp", "source_program": " static int nextFit ( int weight [ ] , int n , int c ) {\n  int res = 0 , bin_rem = c ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++ ;\n      bin_rem = c - weight [ i ] ;\n    }\n    else bin_rem -= weight [ i ] ;\n  }\n  return res ;\n}", "target_program": " int nextFit ( int weight [ ], int n, int c ) {\n  int res = 0, bin_rem = c;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++;\n      bin_rem = c - weight [ i ];\n    }\n    else bin_rem -= weight [ i ];\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " int nextFit ( int weight [ ], int n, int c ) {\n  int res = 0, bin_rem = c;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++;\n      bin_rem = c - weight [ i ];\n    }\n    else bin_rem -= weight [ i ];\n  }\n  return res;\n}", "target_program": " static int nextFit ( int weight [ ] , int n , int c ) {\n  int res = 0 , bin_rem = c ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++ ;\n      bin_rem = c - weight [ i ] ;\n    }\n    else bin_rem -= weight [ i ] ;\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int nextFit ( int weight [ ], int n, int c ) {\n  int res = 0, bin_rem = c;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( weight [ i ] > bin_rem ) {\n      res ++;\n      bin_rem = c - weight [ i ];\n    }\n    else bin_rem -= weight [ i ];\n  }\n  return res;\n}", "target_program": " def nextfit ( weight , c ) :\n    res = 0\n    rem = c\n    for _ in range ( len ( weight ) ) :\n        if rem >= weight [ _ ] :\n            rem = rem - weight [ _ ]\n        else :\n            res += 1\n            rem = c - weight [ _ ]\n    return res"}
{"source": "python", "target": "java", "source_program": " def subArraySum ( arr , n , sum ) :\n    curr_sum = arr [ 0 ]\n    start = 0\n    i = 1\n    while i <= n :\n        while curr_sum > sum and start < i - 1 :\n            curr_sum = curr_sum - arr [ start ]\n            start += 1\n        if curr_sum == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( start , i - 1 ) )\n            return 1\n        if i < n :\n            curr_sum = curr_sum + arr [ i ]\n        i += 1\n    print ( \"No subarray found\" )\n    return 0", "target_program": " int subArraySum ( int arr [ ] , int n , int sum ) {\n  int curr_sum = arr [ 0 ] , start = 0 , i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ] ;\n      start ++ ;\n    }\n    if ( curr_sum == sum ) {\n      int p = i - 1 ;\n      System . out . println ( \"Sum found between indexes \" + start + \" and \" + p ) ;\n      return 1 ;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ] ;\n  }\n  System . out . println ( \"No subarray found\" ) ;\n  return 0 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def subArraySum ( arr , n , sum ) :\n    curr_sum = arr [ 0 ]\n    start = 0\n    i = 1\n    while i <= n :\n        while curr_sum > sum and start < i - 1 :\n            curr_sum = curr_sum - arr [ start ]\n            start += 1\n        if curr_sum == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( start , i - 1 ) )\n            return 1\n        if i < n :\n            curr_sum = curr_sum + arr [ i ]\n        i += 1\n    print ( \"No subarray found\" )\n    return 0", "target_program": " int subArraySum ( int arr [ ], int n, int sum ) {\n  int curr_sum = arr [ 0 ], start = 0, i;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ];\n      start ++;\n    }\n    if ( curr_sum == sum ) {\n      cout << \"Sum found between indexes \" << start << \" and \" << i - 1;\n      return 1;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ];\n  }\n  cout << \"No subarray found\";\n  return 0;\n}"}
{"source": "java", "target": "python", "source_program": " int subArraySum ( int arr [ ] , int n , int sum ) {\n  int curr_sum = arr [ 0 ] , start = 0 , i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ] ;\n      start ++ ;\n    }\n    if ( curr_sum == sum ) {\n      int p = i - 1 ;\n      System . out . println ( \"Sum found between indexes \" + start + \" and \" + p ) ;\n      return 1 ;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ] ;\n  }\n  System . out . println ( \"No subarray found\" ) ;\n  return 0 ;\n}", "target_program": " def subArraySum ( arr , n , sum ) :\n    curr_sum = arr [ 0 ]\n    start = 0\n    i = 1\n    while i <= n :\n        while curr_sum > sum and start < i - 1 :\n            curr_sum = curr_sum - arr [ start ]\n            start += 1\n        if curr_sum == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( start , i - 1 ) )\n            return 1\n        if i < n :\n            curr_sum = curr_sum + arr [ i ]\n        i += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"source": "java", "target": "cpp", "source_program": " int subArraySum ( int arr [ ] , int n , int sum ) {\n  int curr_sum = arr [ 0 ] , start = 0 , i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ] ;\n      start ++ ;\n    }\n    if ( curr_sum == sum ) {\n      int p = i - 1 ;\n      System . out . println ( \"Sum found between indexes \" + start + \" and \" + p ) ;\n      return 1 ;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ] ;\n  }\n  System . out . println ( \"No subarray found\" ) ;\n  return 0 ;\n}", "target_program": " int subArraySum ( int arr [ ], int n, int sum ) {\n  int curr_sum = arr [ 0 ], start = 0, i;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ];\n      start ++;\n    }\n    if ( curr_sum == sum ) {\n      cout << \"Sum found between indexes \" << start << \" and \" << i - 1;\n      return 1;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ];\n  }\n  cout << \"No subarray found\";\n  return 0;\n}"}
{"source": "cpp", "target": "java", "source_program": " int subArraySum ( int arr [ ], int n, int sum ) {\n  int curr_sum = arr [ 0 ], start = 0, i;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ];\n      start ++;\n    }\n    if ( curr_sum == sum ) {\n      cout << \"Sum found between indexes \" << start << \" and \" << i - 1;\n      return 1;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ];\n  }\n  cout << \"No subarray found\";\n  return 0;\n}", "target_program": " int subArraySum ( int arr [ ] , int n , int sum ) {\n  int curr_sum = arr [ 0 ] , start = 0 , i ;\n  for ( i = 1 ;\n  i <= n ;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ] ;\n      start ++ ;\n    }\n    if ( curr_sum == sum ) {\n      int p = i - 1 ;\n      System . out . println ( \"Sum found between indexes \" + start + \" and \" + p ) ;\n      return 1 ;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ] ;\n  }\n  System . out . println ( \"No subarray found\" ) ;\n  return 0 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int subArraySum ( int arr [ ], int n, int sum ) {\n  int curr_sum = arr [ 0 ], start = 0, i;\n  for ( i = 1;\n  i <= n;\n  i ++ ) {\n    while ( curr_sum > sum && start < i - 1 ) {\n      curr_sum = curr_sum - arr [ start ];\n      start ++;\n    }\n    if ( curr_sum == sum ) {\n      cout << \"Sum found between indexes \" << start << \" and \" << i - 1;\n      return 1;\n    }\n    if ( i < n ) curr_sum = curr_sum + arr [ i ];\n  }\n  cout << \"No subarray found\";\n  return 0;\n}", "target_program": " def subArraySum ( arr , n , sum ) :\n    curr_sum = arr [ 0 ]\n    start = 0\n    i = 1\n    while i <= n :\n        while curr_sum > sum and start < i - 1 :\n            curr_sum = curr_sum - arr [ start ]\n            start += 1\n        if curr_sum == sum :\n            print ( \"Sum found between indexes\" )\n            print ( \"%d and %d\" % ( start , i - 1 ) )\n            return 1\n        if i < n :\n            curr_sum = curr_sum + arr [ i ]\n        i += 1\n    print ( \"No subarray found\" )\n    return 0"}
{"source": "python", "target": "java", "source_program": " def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 ) ;\n    for i in range ( n ) :\n        for j in range ( W , wt [ i ] , - 1 ) :\n            dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n    return dp [ W ] ;", "target_program": " static int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) {\n  int [ ] dp = new int [ W + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = W ;\n  j >= wt [ i ] ;\n  j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n  return dp [ W ] ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 ) ;\n    for i in range ( n ) :\n        for j in range ( W , wt [ i ] , - 1 ) :\n            dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n    return dp [ W ] ;", "target_program": " int KnapSack ( int val [ ], int wt [ ], int n, int W ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = W;\n  j >= wt [ i ];\n  j -- ) dp [ j ] = max ( dp [ j ], val [ i ] + dp [ j - wt [ i ] ] );\n  return dp [ W ];\n}"}
{"source": "java", "target": "python", "source_program": " static int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) {\n  int [ ] dp = new int [ W + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = W ;\n  j >= wt [ i ] ;\n  j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n  return dp [ W ] ;\n}", "target_program": " def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 ) ;\n    for i in range ( n ) :\n        for j in range ( W , wt [ i ] , - 1 ) :\n            dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n    return dp [ W ] ;"}
{"source": "java", "target": "cpp", "source_program": " static int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) {\n  int [ ] dp = new int [ W + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = W ;\n  j >= wt [ i ] ;\n  j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n  return dp [ W ] ;\n}", "target_program": " int KnapSack ( int val [ ], int wt [ ], int n, int W ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = W;\n  j >= wt [ i ];\n  j -- ) dp [ j ] = max ( dp [ j ], val [ i ] + dp [ j - wt [ i ] ] );\n  return dp [ W ];\n}"}
{"source": "cpp", "target": "java", "source_program": " int KnapSack ( int val [ ], int wt [ ], int n, int W ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = W;\n  j >= wt [ i ];\n  j -- ) dp [ j ] = max ( dp [ j ], val [ i ] + dp [ j - wt [ i ] ] );\n  return dp [ W ];\n}", "target_program": " static int KnapSack ( int val [ ] , int wt [ ] , int n , int W ) {\n  int [ ] dp = new int [ W + 1 ] ;\n  Arrays . fill ( dp , 0 ) ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) for ( int j = W ;\n  j >= wt [ i ] ;\n  j -- ) dp [ j ] = Math . max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n  return dp [ W ] ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int KnapSack ( int val [ ], int wt [ ], int n, int W ) {\n  int dp [ W + 1 ];\n  memset ( dp, 0, sizeof ( dp ) );\n  for ( int i = 0;\n  i < n;\n  i ++ ) for ( int j = W;\n  j >= wt [ i ];\n  j -- ) dp [ j ] = max ( dp [ j ], val [ i ] + dp [ j - wt [ i ] ] );\n  return dp [ W ];\n}", "target_program": " def KnapSack ( val , wt , n , W ) :\n    dp = [ 0 ] * ( W + 1 ) ;\n    for i in range ( n ) :\n        for j in range ( W , wt [ i ] , - 1 ) :\n            dp [ j ] = max ( dp [ j ] , val [ i ] + dp [ j - wt [ i ] ] ) ;\n    return dp [ W ] ;"}
{"source": "python", "target": "java", "source_program": " def yMod ( y , x ) :\n    return ( y % pow ( 2 , x ) )", "target_program": " static long yMod ( long y , long x ) {\n  if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y ;\n  if ( x > 63 ) return y ;\n  return ( y % ( 1 << ( int ) x ) ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def yMod ( y , x ) :\n    return ( y % pow ( 2 , x ) )", "target_program": " long long int yMod ( long long int y, long long int x ) {\n  if ( log2 ( y ) < x ) return y;\n  if ( x > 63 ) return y;\n  return ( y % ( 1 << x ) );\n}"}
{"source": "java", "target": "python", "source_program": " static long yMod ( long y , long x ) {\n  if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y ;\n  if ( x > 63 ) return y ;\n  return ( y % ( 1 << ( int ) x ) ) ;\n}", "target_program": " def yMod ( y , x ) :\n    return ( y % pow ( 2 , x ) )"}
{"source": "java", "target": "cpp", "source_program": " static long yMod ( long y , long x ) {\n  if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y ;\n  if ( x > 63 ) return y ;\n  return ( y % ( 1 << ( int ) x ) ) ;\n}", "target_program": " long long int yMod ( long long int y, long long int x ) {\n  if ( log2 ( y ) < x ) return y;\n  if ( x > 63 ) return y;\n  return ( y % ( 1 << x ) );\n}"}
{"source": "cpp", "target": "java", "source_program": " long long int yMod ( long long int y, long long int x ) {\n  if ( log2 ( y ) < x ) return y;\n  if ( x > 63 ) return y;\n  return ( y % ( 1 << x ) );\n}", "target_program": " static long yMod ( long y , long x ) {\n  if ( ( Math . log ( y ) / Math . log ( 2 ) ) < x ) return y ;\n  if ( x > 63 ) return y ;\n  return ( y % ( 1 << ( int ) x ) ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " long long int yMod ( long long int y, long long int x ) {\n  if ( log2 ( y ) < x ) return y;\n  if ( x > 63 ) return y;\n  return ( y % ( 1 << x ) );\n}", "target_program": " def yMod ( y , x ) :\n    return ( y % pow ( 2 , x ) )"}
{"source": "python", "target": "java", "source_program": " def seriesSum ( n ) :\n    i = 1 ;\n    res = 0.0 ;\n    sign = True ;\n    while ( n > 0 ) :\n        n = n - 1 ;\n        if ( sign ) :\n            sign = False ;\n            res = res + ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n        else :\n            sign = True ;\n            res = res - ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n    return res ;", "target_program": " static double seriesSum ( int n ) {\n  int i = 1 ;\n  double res = 0.0 ;\n  boolean sign = true ;\n  while ( n > 0 ) {\n    n -- ;\n    if ( sign ) {\n      sign = ! sign ;\n      res = res + ( double ) ++ i / ++ i ;\n    }\n    else {\n      sign = ! sign ;\n      res = res - ( double ) ++ i / ++ i ;\n    }\n  }\n  return res ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def seriesSum ( n ) :\n    i = 1 ;\n    res = 0.0 ;\n    sign = True ;\n    while ( n > 0 ) :\n        n = n - 1 ;\n        if ( sign ) :\n            sign = False ;\n            res = res + ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n        else :\n            sign = True ;\n            res = res - ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n    return res ;", "target_program": " double seriesSum ( int n ) {\n  int i = 1;\n  double res = 0.0;\n  bool sign = true;\n  while ( n > 0 ) {\n    n --;\n    if ( sign ) {\n      sign = ! sign;\n      res = res + ( double ) ++ i / ++ i;\n    }\n    else {\n      sign = ! sign;\n      res = res - ( double ) ++ i / ++ i;\n    }\n  }\n  return res;\n}"}
{"source": "java", "target": "python", "source_program": " static double seriesSum ( int n ) {\n  int i = 1 ;\n  double res = 0.0 ;\n  boolean sign = true ;\n  while ( n > 0 ) {\n    n -- ;\n    if ( sign ) {\n      sign = ! sign ;\n      res = res + ( double ) ++ i / ++ i ;\n    }\n    else {\n      sign = ! sign ;\n      res = res - ( double ) ++ i / ++ i ;\n    }\n  }\n  return res ;\n}", "target_program": " def seriesSum ( n ) :\n    i = 1 ;\n    res = 0.0 ;\n    sign = True ;\n    while ( n > 0 ) :\n        n = n - 1 ;\n        if ( sign ) :\n            sign = False ;\n            res = res + ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n        else :\n            sign = True ;\n            res = res - ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n    return res ;"}
{"source": "java", "target": "cpp", "source_program": " static double seriesSum ( int n ) {\n  int i = 1 ;\n  double res = 0.0 ;\n  boolean sign = true ;\n  while ( n > 0 ) {\n    n -- ;\n    if ( sign ) {\n      sign = ! sign ;\n      res = res + ( double ) ++ i / ++ i ;\n    }\n    else {\n      sign = ! sign ;\n      res = res - ( double ) ++ i / ++ i ;\n    }\n  }\n  return res ;\n}", "target_program": " double seriesSum ( int n ) {\n  int i = 1;\n  double res = 0.0;\n  bool sign = true;\n  while ( n > 0 ) {\n    n --;\n    if ( sign ) {\n      sign = ! sign;\n      res = res + ( double ) ++ i / ++ i;\n    }\n    else {\n      sign = ! sign;\n      res = res - ( double ) ++ i / ++ i;\n    }\n  }\n  return res;\n}"}
{"source": "cpp", "target": "java", "source_program": " double seriesSum ( int n ) {\n  int i = 1;\n  double res = 0.0;\n  bool sign = true;\n  while ( n > 0 ) {\n    n --;\n    if ( sign ) {\n      sign = ! sign;\n      res = res + ( double ) ++ i / ++ i;\n    }\n    else {\n      sign = ! sign;\n      res = res - ( double ) ++ i / ++ i;\n    }\n  }\n  return res;\n}", "target_program": " static double seriesSum ( int n ) {\n  int i = 1 ;\n  double res = 0.0 ;\n  boolean sign = true ;\n  while ( n > 0 ) {\n    n -- ;\n    if ( sign ) {\n      sign = ! sign ;\n      res = res + ( double ) ++ i / ++ i ;\n    }\n    else {\n      sign = ! sign ;\n      res = res - ( double ) ++ i / ++ i ;\n    }\n  }\n  return res ;\n}"}
{"source": "cpp", "target": "python", "source_program": " double seriesSum ( int n ) {\n  int i = 1;\n  double res = 0.0;\n  bool sign = true;\n  while ( n > 0 ) {\n    n --;\n    if ( sign ) {\n      sign = ! sign;\n      res = res + ( double ) ++ i / ++ i;\n    }\n    else {\n      sign = ! sign;\n      res = res - ( double ) ++ i / ++ i;\n    }\n  }\n  return res;\n}", "target_program": " def seriesSum ( n ) :\n    i = 1 ;\n    res = 0.0 ;\n    sign = True ;\n    while ( n > 0 ) :\n        n = n - 1 ;\n        if ( sign ) :\n            sign = False ;\n            res = res + ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n        else :\n            sign = True ;\n            res = res - ( i + 1 ) / ( i + 2 ) ;\n            i = i + 2 ;\n    return res ;"}
{"source": "python", "target": "java", "source_program": " def longLenStrictBitonicSub ( arr , n ) :\n    inc , dcr = dict ( ) , dict ( )\n    len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n\n    longLen = 0\n    for i in range ( n ) :\n        len = 0\n        if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :\n            len = inc.get ( arr [ i ] - 1 )\n        inc [ arr [ i ] ] = len_inc [ i ] = len + 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        len = 0\n        if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :\n            len = dcr.get ( arr [ i ] - 1 )\n        dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1\n    for i in range ( n ) :\n        if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :\n            longLen = len_inc [ i ] + len_dcr [ i ] - 1\n    return longLen", "target_program": " static int longLenStrictBitonicSub ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > inc = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > dcr = new HashMap < Integer , Integer > ( ) ;\n  int len_inc [ ] = new int [ n ] ;\n  int len_dcr [ ] = new int [ n ] ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( inc . containsKey ( arr [ i ] - 1 ) ) len = inc . get ( arr [ i ] - 1 ) ;\n    len_inc [ i ] = len + 1 ;\n    inc . put ( arr [ i ] , len_inc [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int len = 0 ;\n    if ( dcr . containsKey ( arr [ i ] - 1 ) ) len = dcr . get ( arr [ i ] - 1 ) ;\n    len_dcr [ i ] = len + 1 ;\n    dcr . put ( arr [ i ] , len_dcr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1 ;\n  return longLen ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def longLenStrictBitonicSub ( arr , n ) :\n    inc , dcr = dict ( ) , dict ( )\n    len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n\n    longLen = 0\n    for i in range ( n ) :\n        len = 0\n        if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :\n            len = inc.get ( arr [ i ] - 1 )\n        inc [ arr [ i ] ] = len_inc [ i ] = len + 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        len = 0\n        if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :\n            len = dcr.get ( arr [ i ] - 1 )\n        dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1\n    for i in range ( n ) :\n        if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :\n            longLen = len_inc [ i ] + len_dcr [ i ] - 1\n    return longLen", "target_program": " int longLenStrictBitonicSub ( int arr [ ], int n ) {\n  unordered_map < int, int > inc, dcr;\n  int len_inc [ n ], len_dcr [ n ];\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( inc . find ( arr [ i ] - 1 ) != inc . end ( ) ) len = inc [ arr [ i ] - 1 ];\n    inc [ arr [ i ] ] = len_inc [ i ] = len + 1;\n  }\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    int len = 0;\n    if ( dcr . find ( arr [ i ] - 1 ) != dcr . end ( ) ) len = dcr [ arr [ i ] - 1 ];\n    dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1;\n  return longLen;\n}"}
{"source": "java", "target": "python", "source_program": " static int longLenStrictBitonicSub ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > inc = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > dcr = new HashMap < Integer , Integer > ( ) ;\n  int len_inc [ ] = new int [ n ] ;\n  int len_dcr [ ] = new int [ n ] ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( inc . containsKey ( arr [ i ] - 1 ) ) len = inc . get ( arr [ i ] - 1 ) ;\n    len_inc [ i ] = len + 1 ;\n    inc . put ( arr [ i ] , len_inc [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int len = 0 ;\n    if ( dcr . containsKey ( arr [ i ] - 1 ) ) len = dcr . get ( arr [ i ] - 1 ) ;\n    len_dcr [ i ] = len + 1 ;\n    dcr . put ( arr [ i ] , len_dcr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1 ;\n  return longLen ;\n}", "target_program": " def longLenStrictBitonicSub ( arr , n ) :\n    inc , dcr = dict ( ) , dict ( )\n    len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n\n    longLen = 0\n    for i in range ( n ) :\n        len = 0\n        if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :\n            len = inc.get ( arr [ i ] - 1 )\n        inc [ arr [ i ] ] = len_inc [ i ] = len + 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        len = 0\n        if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :\n            len = dcr.get ( arr [ i ] - 1 )\n        dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1\n    for i in range ( n ) :\n        if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :\n            longLen = len_inc [ i ] + len_dcr [ i ] - 1\n    return longLen"}
{"source": "java", "target": "cpp", "source_program": " static int longLenStrictBitonicSub ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > inc = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > dcr = new HashMap < Integer , Integer > ( ) ;\n  int len_inc [ ] = new int [ n ] ;\n  int len_dcr [ ] = new int [ n ] ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( inc . containsKey ( arr [ i ] - 1 ) ) len = inc . get ( arr [ i ] - 1 ) ;\n    len_inc [ i ] = len + 1 ;\n    inc . put ( arr [ i ] , len_inc [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int len = 0 ;\n    if ( dcr . containsKey ( arr [ i ] - 1 ) ) len = dcr . get ( arr [ i ] - 1 ) ;\n    len_dcr [ i ] = len + 1 ;\n    dcr . put ( arr [ i ] , len_dcr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1 ;\n  return longLen ;\n}", "target_program": " int longLenStrictBitonicSub ( int arr [ ], int n ) {\n  unordered_map < int, int > inc, dcr;\n  int len_inc [ n ], len_dcr [ n ];\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( inc . find ( arr [ i ] - 1 ) != inc . end ( ) ) len = inc [ arr [ i ] - 1 ];\n    inc [ arr [ i ] ] = len_inc [ i ] = len + 1;\n  }\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    int len = 0;\n    if ( dcr . find ( arr [ i ] - 1 ) != dcr . end ( ) ) len = dcr [ arr [ i ] - 1 ];\n    dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1;\n  return longLen;\n}"}
{"source": "cpp", "target": "java", "source_program": " int longLenStrictBitonicSub ( int arr [ ], int n ) {\n  unordered_map < int, int > inc, dcr;\n  int len_inc [ n ], len_dcr [ n ];\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( inc . find ( arr [ i ] - 1 ) != inc . end ( ) ) len = inc [ arr [ i ] - 1 ];\n    inc [ arr [ i ] ] = len_inc [ i ] = len + 1;\n  }\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    int len = 0;\n    if ( dcr . find ( arr [ i ] - 1 ) != dcr . end ( ) ) len = dcr [ arr [ i ] - 1 ];\n    dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1;\n  return longLen;\n}", "target_program": " static int longLenStrictBitonicSub ( int arr [ ] , int n ) {\n  HashMap < Integer , Integer > inc = new HashMap < Integer , Integer > ( ) ;\n  HashMap < Integer , Integer > dcr = new HashMap < Integer , Integer > ( ) ;\n  int len_inc [ ] = new int [ n ] ;\n  int len_dcr [ ] = new int [ n ] ;\n  int longLen = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    int len = 0 ;\n    if ( inc . containsKey ( arr [ i ] - 1 ) ) len = inc . get ( arr [ i ] - 1 ) ;\n    len_inc [ i ] = len + 1 ;\n    inc . put ( arr [ i ] , len_inc [ i ] ) ;\n  }\n  for ( int i = n - 1 ;\n  i >= 0 ;\n  i -- ) {\n    int len = 0 ;\n    if ( dcr . containsKey ( arr [ i ] - 1 ) ) len = dcr . get ( arr [ i ] - 1 ) ;\n    len_dcr [ i ] = len + 1 ;\n    dcr . put ( arr [ i ] , len_dcr [ i ] ) ;\n  }\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1 ;\n  return longLen ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int longLenStrictBitonicSub ( int arr [ ], int n ) {\n  unordered_map < int, int > inc, dcr;\n  int len_inc [ n ], len_dcr [ n ];\n  int longLen = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    int len = 0;\n    if ( inc . find ( arr [ i ] - 1 ) != inc . end ( ) ) len = inc [ arr [ i ] - 1 ];\n    inc [ arr [ i ] ] = len_inc [ i ] = len + 1;\n  }\n  for ( int i = n - 1;\n  i >= 0;\n  i -- ) {\n    int len = 0;\n    if ( dcr . find ( arr [ i ] - 1 ) != dcr . end ( ) ) len = dcr [ arr [ i ] - 1 ];\n    dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1;\n  }\n  for ( int i = 0;\n  i < n;\n  i ++ ) if ( longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) ) longLen = len_inc [ i ] + len_dcr [ i ] - 1;\n  return longLen;\n}", "target_program": " def longLenStrictBitonicSub ( arr , n ) :\n    inc , dcr = dict ( ) , dict ( )\n    len_inc , len_dcr = [ 0 ] * n , [ 0 ] * n\n    longLen = 0\n    for i in range ( n ) :\n        len = 0\n        if inc.get ( arr [ i ] - 1 ) in inc.values ( ) :\n            len = inc.get ( arr [ i ] - 1 )\n        inc [ arr [ i ] ] = len_inc [ i ] = len + 1\n    for i in range ( n - 1 , - 1 , - 1 ) :\n        len = 0\n        if dcr.get ( arr [ i ] - 1 ) in dcr.values ( ) :\n            len = dcr.get ( arr [ i ] - 1 )\n        dcr [ arr [ i ] ] = len_dcr [ i ] = len + 1\n    for i in range ( n ) :\n        if longLen < ( len_inc [ i ] + len_dcr [ i ] - 1 ) :\n            longLen = len_inc [ i ] + len_dcr [ i ] - 1\n    return longLen"}
{"source": "python", "target": "java", "source_program": " def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    for i in range ( n ) :\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n    return maxDict", "target_program": " static int maxDistance ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > map = new HashMap < > ( ) ;\n  int max_dist = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! map . containsKey ( arr [ i ] ) ) map . put ( arr [ i ] , i ) ;\n    else max_dist = Math . max ( max_dist , i - map . get ( arr [ i ] ) ) ;\n  }\n  return max_dist ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    for i in range ( n ) :\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n    return maxDict", "target_program": " int maxDistance ( int arr [ ], int n ) {\n  unordered_map < int, int > mp;\n  int max_dist = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ i ] ] = i;\n    else max_dist = max ( max_dist, i - mp [ arr [ i ] ] );\n  }\n  return max_dist;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxDistance ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > map = new HashMap < > ( ) ;\n  int max_dist = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! map . containsKey ( arr [ i ] ) ) map . put ( arr [ i ] , i ) ;\n    else max_dist = Math . max ( max_dist , i - map . get ( arr [ i ] ) ) ;\n  }\n  return max_dist ;\n}", "target_program": " def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    for i in range ( n ) :\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n    return maxDict"}
{"source": "java", "target": "cpp", "source_program": " static int maxDistance ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > map = new HashMap < > ( ) ;\n  int max_dist = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! map . containsKey ( arr [ i ] ) ) map . put ( arr [ i ] , i ) ;\n    else max_dist = Math . max ( max_dist , i - map . get ( arr [ i ] ) ) ;\n  }\n  return max_dist ;\n}", "target_program": " int maxDistance ( int arr [ ], int n ) {\n  unordered_map < int, int > mp;\n  int max_dist = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ i ] ] = i;\n    else max_dist = max ( max_dist, i - mp [ arr [ i ] ] );\n  }\n  return max_dist;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxDistance ( int arr [ ], int n ) {\n  unordered_map < int, int > mp;\n  int max_dist = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ i ] ] = i;\n    else max_dist = max ( max_dist, i - mp [ arr [ i ] ] );\n  }\n  return max_dist;\n}", "target_program": " static int maxDistance ( int [ ] arr , int n ) {\n  HashMap < Integer , Integer > map = new HashMap < > ( ) ;\n  int max_dist = 0 ;\n  for ( int i = 0 ;\n  i < n ;\n  i ++ ) {\n    if ( ! map . containsKey ( arr [ i ] ) ) map . put ( arr [ i ] , i ) ;\n    else max_dist = Math . max ( max_dist , i - map . get ( arr [ i ] ) ) ;\n  }\n  return max_dist ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxDistance ( int arr [ ], int n ) {\n  unordered_map < int, int > mp;\n  int max_dist = 0;\n  for ( int i = 0;\n  i < n;\n  i ++ ) {\n    if ( mp . find ( arr [ i ] ) == mp . end ( ) ) mp [ arr [ i ] ] = i;\n    else max_dist = max ( max_dist, i - mp [ arr [ i ] ] );\n  }\n  return max_dist;\n}", "target_program": " def maxDistance ( arr , n ) :\n    mp = { }\n    maxDict = 0\n    for i in range ( n ) :\n        if arr [ i ] not in mp.keys ( ) :\n            mp [ arr [ i ] ] = i\n        else :\n            maxDict = max ( maxDict , i - mp [ arr [ i ] ] )\n    return maxDict"}
{"source": "python", "target": "java", "source_program": " def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    for i in range ( rows ) :\n        for j in range ( columns - 1 ) :\n            for k in range ( j + 1 , columns ) :\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n    return False", "target_program": " static boolean isRectangle ( int matrix [ ] [ ] ) {\n  int rows = matrix . length ;\n  if ( rows == 0 ) return false ;\n  int columns = matrix [ 0 ] . length ;\n  HashMap < Integer , HashSet < Integer >> table = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < rows ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < columns - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < columns ;\n      k ++ ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . containsKey ( j ) && table . get ( j ) . contains ( k ) ) {\n            return true ;\n          }\n          if ( table . containsKey ( k ) && table . get ( k ) . contains ( j ) ) {\n            return true ;\n          }\n          if ( ! table . containsKey ( j ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( k ) ;\n            table . put ( j , x ) ;\n          }\n          else {\n            table . get ( j ) . add ( k ) ;\n          }\n          if ( ! table . containsKey ( k ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( j ) ;\n            table . put ( k , x ) ;\n          }\n          else {\n            table . get ( k ) . add ( j ) ;\n          }\n        }\n      }\n    }\n  }\n  return false ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    for i in range ( rows ) :\n        for j in range ( columns - 1 ) :\n            for k in range ( j + 1 , columns ) :\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n    return False", "target_program": " bool isRectangle ( const vector < vector < int > > & matrix ) {\n  int rows = matrix . size ( );\n  if ( rows == 0 ) return false;\n  int columns = matrix [ 0 ] . size ( );\n  unordered_map < int, unordered_set < int > > table;\n  for ( int i = 0;\n  i < rows;\n  ++ i ) {\n    for ( int j = 0;\n    j < columns - 1;\n    ++ j ) {\n      for ( int k = j + 1;\n      k < columns;\n      ++ k ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . find ( j ) != table . end ( ) && table [ j ] . find ( k ) != table [ j ] . end ( ) ) return true;\n          table [ j ] . insert ( k );\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"source": "java", "target": "python", "source_program": " static boolean isRectangle ( int matrix [ ] [ ] ) {\n  int rows = matrix . length ;\n  if ( rows == 0 ) return false ;\n  int columns = matrix [ 0 ] . length ;\n  HashMap < Integer , HashSet < Integer >> table = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < rows ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < columns - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < columns ;\n      k ++ ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . containsKey ( j ) && table . get ( j ) . contains ( k ) ) {\n            return true ;\n          }\n          if ( table . containsKey ( k ) && table . get ( k ) . contains ( j ) ) {\n            return true ;\n          }\n          if ( ! table . containsKey ( j ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( k ) ;\n            table . put ( j , x ) ;\n          }\n          else {\n            table . get ( j ) . add ( k ) ;\n          }\n          if ( ! table . containsKey ( k ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( j ) ;\n            table . put ( k , x ) ;\n          }\n          else {\n            table . get ( k ) . add ( j ) ;\n          }\n        }\n      }\n    }\n  }\n  return false ;\n}", "target_program": " def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    for i in range ( rows ) :\n        for j in range ( columns - 1 ) :\n            for k in range ( j + 1 , columns ) :\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n    return False"}
{"source": "java", "target": "cpp", "source_program": " static boolean isRectangle ( int matrix [ ] [ ] ) {\n  int rows = matrix . length ;\n  if ( rows == 0 ) return false ;\n  int columns = matrix [ 0 ] . length ;\n  HashMap < Integer , HashSet < Integer >> table = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < rows ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < columns - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < columns ;\n      k ++ ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . containsKey ( j ) && table . get ( j ) . contains ( k ) ) {\n            return true ;\n          }\n          if ( table . containsKey ( k ) && table . get ( k ) . contains ( j ) ) {\n            return true ;\n          }\n          if ( ! table . containsKey ( j ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( k ) ;\n            table . put ( j , x ) ;\n          }\n          else {\n            table . get ( j ) . add ( k ) ;\n          }\n          if ( ! table . containsKey ( k ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( j ) ;\n            table . put ( k , x ) ;\n          }\n          else {\n            table . get ( k ) . add ( j ) ;\n          }\n        }\n      }\n    }\n  }\n  return false ;\n}", "target_program": " bool isRectangle ( const vector < vector < int > > & matrix ) {\n  int rows = matrix . size ( );\n  if ( rows == 0 ) return false;\n  int columns = matrix [ 0 ] . size ( );\n  unordered_map < int, unordered_set < int > > table;\n  for ( int i = 0;\n  i < rows;\n  ++ i ) {\n    for ( int j = 0;\n    j < columns - 1;\n    ++ j ) {\n      for ( int k = j + 1;\n      k < columns;\n      ++ k ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . find ( j ) != table . end ( ) && table [ j ] . find ( k ) != table [ j ] . end ( ) ) return true;\n          table [ j ] . insert ( k );\n        }\n      }\n    }\n  }\n  return false;\n}"}
{"source": "cpp", "target": "java", "source_program": " bool isRectangle ( const vector < vector < int > > & matrix ) {\n  int rows = matrix . size ( );\n  if ( rows == 0 ) return false;\n  int columns = matrix [ 0 ] . size ( );\n  unordered_map < int, unordered_set < int > > table;\n  for ( int i = 0;\n  i < rows;\n  ++ i ) {\n    for ( int j = 0;\n    j < columns - 1;\n    ++ j ) {\n      for ( int k = j + 1;\n      k < columns;\n      ++ k ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . find ( j ) != table . end ( ) && table [ j ] . find ( k ) != table [ j ] . end ( ) ) return true;\n          table [ j ] . insert ( k );\n        }\n      }\n    }\n  }\n  return false;\n}", "target_program": " static boolean isRectangle ( int matrix [ ] [ ] ) {\n  int rows = matrix . length ;\n  if ( rows == 0 ) return false ;\n  int columns = matrix [ 0 ] . length ;\n  HashMap < Integer , HashSet < Integer >> table = new HashMap < > ( ) ;\n  for ( int i = 0 ;\n  i < rows ;\n  i ++ ) {\n    for ( int j = 0 ;\n    j < columns - 1 ;\n    j ++ ) {\n      for ( int k = j + 1 ;\n      k < columns ;\n      k ++ ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . containsKey ( j ) && table . get ( j ) . contains ( k ) ) {\n            return true ;\n          }\n          if ( table . containsKey ( k ) && table . get ( k ) . contains ( j ) ) {\n            return true ;\n          }\n          if ( ! table . containsKey ( j ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( k ) ;\n            table . put ( j , x ) ;\n          }\n          else {\n            table . get ( j ) . add ( k ) ;\n          }\n          if ( ! table . containsKey ( k ) ) {\n            HashSet < Integer > x = new HashSet < > ( ) ;\n            x . add ( j ) ;\n            table . put ( k , x ) ;\n          }\n          else {\n            table . get ( k ) . add ( j ) ;\n          }\n        }\n      }\n    }\n  }\n  return false ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool isRectangle ( const vector < vector < int > > & matrix ) {\n  int rows = matrix . size ( );\n  if ( rows == 0 ) return false;\n  int columns = matrix [ 0 ] . size ( );\n  unordered_map < int, unordered_set < int > > table;\n  for ( int i = 0;\n  i < rows;\n  ++ i ) {\n    for ( int j = 0;\n    j < columns - 1;\n    ++ j ) {\n      for ( int k = j + 1;\n      k < columns;\n      ++ k ) {\n        if ( matrix [ i ] [ j ] == 1 && matrix [ i ] [ k ] == 1 ) {\n          if ( table . find ( j ) != table . end ( ) && table [ j ] . find ( k ) != table [ j ] . end ( ) ) return true;\n          table [ j ] . insert ( k );\n        }\n      }\n    }\n  }\n  return false;\n}", "target_program": " def isRectangle ( matrix ) :\n    rows = len ( matrix )\n    if ( rows == 0 ) :\n        return False\n    columns = len ( matrix [ 0 ] )\n    table = { }\n    for i in range ( rows ) :\n        for j in range ( columns - 1 ) :\n            for k in range ( j + 1 , columns ) :\n                if ( matrix [ i ] [ j ] == 1 and matrix [ i ] [ k ] == 1 ) :\n                    if ( j in table and k in table [ j ] ) :\n                        return True\n                    if ( k in table and j in table [ k ] ) :\n                        return True\n                    if j not in table :\n                        table [ j ] = set ( )\n                    if k not in table :\n                        table [ k ] = set ( )\n                    table [ j ].add ( k )\n                    table [ k ].add ( j )\n    return False"}
{"source": "python", "target": "java", "source_program": " def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    for i in range ( 0 , n - 1 ) :\n        if ( x [ i ] + 1 != x [ i + 1 ] ) :\n            count = count + 1\n    return count", "target_program": " static int numofsubset ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int count = 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    for i in range ( 0 , n - 1 ) :\n        if ( x [ i ] + 1 != x [ i + 1 ] ) :\n            count = count + 1\n    return count", "target_program": " int numofsubset ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int count = 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++;\n  }\n  return count;\n}"}
{"source": "java", "target": "python", "source_program": " static int numofsubset ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int count = 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;\n  }\n  return count ;\n}", "target_program": " def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    for i in range ( 0 , n - 1 ) :\n        if ( x [ i ] + 1 != x [ i + 1 ] ) :\n            count = count + 1\n    return count"}
{"source": "java", "target": "cpp", "source_program": " static int numofsubset ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int count = 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;\n  }\n  return count ;\n}", "target_program": " int numofsubset ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int count = 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++;\n  }\n  return count;\n}"}
{"source": "cpp", "target": "java", "source_program": " int numofsubset ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int count = 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++;\n  }\n  return count;\n}", "target_program": " static int numofsubset ( int arr [ ] , int n ) {\n  Arrays . sort ( arr ) ;\n  int count = 1 ;\n  for ( int i = 0 ;\n  i < n - 1 ;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++ ;\n  }\n  return count ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int numofsubset ( int arr [ ], int n ) {\n  sort ( arr, arr + n );\n  int count = 1;\n  for ( int i = 0;\n  i < n - 1;\n  i ++ ) {\n    if ( arr [ i ] + 1 != arr [ i + 1 ] ) count ++;\n  }\n  return count;\n}", "target_program": " def numofsubset ( arr , n ) :\n    x = sorted ( arr )\n    count = 1\n    for i in range ( 0 , n - 1 ) :\n        if ( x [ i ] + 1 != x [ i + 1 ] ) :\n            count = count + 1\n    return count"}
{"source": "python", "target": "java", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxint - 1\n    max_ending_here = 0\n    for i in range ( 0 , size ) :\n        max_ending_here = max_ending_here + a [ i ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if max_ending_here < 0 :\n            max_ending_here = 0\n    return max_so_far", "target_program": " static int maxSubArraySum ( int a [ ] ) {\n  int size = a . length ;\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxint - 1\n    max_ending_here = 0\n    for i in range ( 0 , size ) :\n        max_ending_here = max_ending_here + a [ i ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if max_ending_here < 0 :\n            max_ending_here = 0\n    return max_so_far", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}"}
{"source": "java", "target": "python", "source_program": " static int maxSubArraySum ( int a [ ] ) {\n  int size = a . length ;\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxint - 1\n    max_ending_here = 0\n    for i in range ( 0 , size ) :\n        max_ending_here = max_ending_here + a [ i ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if max_ending_here < 0 :\n            max_ending_here = 0\n    return max_so_far"}
{"source": "java", "target": "cpp", "source_program": " static int maxSubArraySum ( int a [ ] ) {\n  int size = a . length ;\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}", "target_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}"}
{"source": "cpp", "target": "java", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}", "target_program": " static int maxSubArraySum ( int a [ ] ) {\n  int size = a . length ;\n  int max_so_far = Integer . MIN_VALUE , max_ending_here = 0 ;\n  for ( int i = 0 ;\n  i < size ;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ] ;\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here ;\n    if ( max_ending_here < 0 ) max_ending_here = 0 ;\n  }\n  return max_so_far ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int maxSubArraySum ( int a [ ], int size ) {\n  int max_so_far = INT_MIN, max_ending_here = 0;\n  for ( int i = 0;\n  i < size;\n  i ++ ) {\n    max_ending_here = max_ending_here + a [ i ];\n    if ( max_so_far < max_ending_here ) max_so_far = max_ending_here;\n    if ( max_ending_here < 0 ) max_ending_here = 0;\n  }\n  return max_so_far;\n}", "target_program": " def maxSubArraySum ( a , size ) :\n    max_so_far = - maxint - 1\n    max_ending_here = 0\n    for i in range ( 0 , size ) :\n        max_ending_here = max_ending_here + a [ i ]\n        if ( max_so_far < max_ending_here ) :\n            max_so_far = max_ending_here\n        if max_ending_here < 0 :\n            max_ending_here = 0\n    return max_so_far"}
{"source": "python", "target": "java", "source_program": " def getRemainder ( num , divisor ) :\n    while ( num >= divisor ) :\n        num -= divisor ;\n    return num ;", "target_program": " static int getRemainder ( int num , int divisor ) {\n  while ( num >= divisor ) num -= divisor ;\n  return num ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def getRemainder ( num , divisor ) :\n    while ( num >= divisor ) :\n        num -= divisor ;\n    return num ;", "target_program": " int getRemainder ( int num, int divisor ) {\n  while ( num >= divisor ) num -= divisor;\n  return num;\n}"}
{"source": "java", "target": "python", "source_program": " static int getRemainder ( int num , int divisor ) {\n  while ( num >= divisor ) num -= divisor ;\n  return num ;\n}", "target_program": " def getRemainder ( num , divisor ) :\n    while ( num >= divisor ) :\n        num -= divisor ;\n    return num ;"}
{"source": "java", "target": "cpp", "source_program": " static int getRemainder ( int num , int divisor ) {\n  while ( num >= divisor ) num -= divisor ;\n  return num ;\n}", "target_program": " int getRemainder ( int num, int divisor ) {\n  while ( num >= divisor ) num -= divisor;\n  return num;\n}"}
{"source": "cpp", "target": "java", "source_program": " int getRemainder ( int num, int divisor ) {\n  while ( num >= divisor ) num -= divisor;\n  return num;\n}", "target_program": " static int getRemainder ( int num , int divisor ) {\n  while ( num >= divisor ) num -= divisor ;\n  return num ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int getRemainder ( int num, int divisor ) {\n  while ( num >= divisor ) num -= divisor;\n  return num;\n}", "target_program": " def getRemainder ( num , divisor ) :\n    while ( num >= divisor ) :\n        num -= divisor ;\n    return num ;"}
{"source": "python", "target": "java", "source_program": " def check ( st ) :\n    n = len ( st )\n    if ( n == 0 ) :\n        return False\n    if ( n == 1 ) :\n        return ( ( st [ 0 ] - '0' ) % 4 == 0 )\n    last = ( int ) ( st [ n - 1 ] )\n    second_last = ( int ) ( st [ n - 2 ] )\n    return ( ( second_last * 10 + last ) % 4 == 0 )", "target_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  if ( n == 0 ) return false ;\n  if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 4 == 0 ) ;\n  int last = str . charAt ( n - 1 ) - '0' ;\n  int second_last = str . charAt ( n - 2 ) - '0' ;\n  return ( ( second_last * 10 + last ) % 4 == 0 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def check ( st ) :\n    n = len ( st )\n    if ( n == 0 ) :\n        return False\n    if ( n == 1 ) :\n        return ( ( st [ 0 ] - '0' ) % 4 == 0 )\n    last = ( int ) ( st [ n - 1 ] )\n    second_last = ( int ) ( st [ n - 2 ] )\n    return ( ( second_last * 10 + last ) % 4 == 0 )", "target_program": " bool check ( string str ) {\n  int n = str . length ( );\n  if ( n == 0 ) return false;\n  if ( n == 1 ) return ( ( str [ 0 ] - '0' ) % 4 == 0 );\n  int last = str [ n - 1 ] - '0';\n  int second_last = str [ n - 2 ] - '0';\n  return ( ( second_last * 10 + last ) % 4 == 0 );\n}"}
{"source": "java", "target": "python", "source_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  if ( n == 0 ) return false ;\n  if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 4 == 0 ) ;\n  int last = str . charAt ( n - 1 ) - '0' ;\n  int second_last = str . charAt ( n - 2 ) - '0' ;\n  return ( ( second_last * 10 + last ) % 4 == 0 ) ;\n}", "target_program": " def check ( st ) :\n    n = len ( st )\n    if ( n == 0 ) :\n        return False\n    if ( n == 1 ) :\n        return ( ( st [ 0 ] - '0' ) % 4 == 0 )\n    last = ( int ) ( st [ n - 1 ] )\n    second_last = ( int ) ( st [ n - 2 ] )\n    return ( ( second_last * 10 + last ) % 4 == 0 )"}
{"source": "java", "target": "cpp", "source_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  if ( n == 0 ) return false ;\n  if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 4 == 0 ) ;\n  int last = str . charAt ( n - 1 ) - '0' ;\n  int second_last = str . charAt ( n - 2 ) - '0' ;\n  return ( ( second_last * 10 + last ) % 4 == 0 ) ;\n}", "target_program": " bool check ( string str ) {\n  int n = str . length ( );\n  if ( n == 0 ) return false;\n  if ( n == 1 ) return ( ( str [ 0 ] - '0' ) % 4 == 0 );\n  int last = str [ n - 1 ] - '0';\n  int second_last = str [ n - 2 ] - '0';\n  return ( ( second_last * 10 + last ) % 4 == 0 );\n}"}
{"source": "cpp", "target": "java", "source_program": " bool check ( string str ) {\n  int n = str . length ( );\n  if ( n == 0 ) return false;\n  if ( n == 1 ) return ( ( str [ 0 ] - '0' ) % 4 == 0 );\n  int last = str [ n - 1 ] - '0';\n  int second_last = str [ n - 2 ] - '0';\n  return ( ( second_last * 10 + last ) % 4 == 0 );\n}", "target_program": " static boolean check ( String str ) {\n  int n = str . length ( ) ;\n  if ( n == 0 ) return false ;\n  if ( n == 1 ) return ( ( str . charAt ( 0 ) - '0' ) % 4 == 0 ) ;\n  int last = str . charAt ( n - 1 ) - '0' ;\n  int second_last = str . charAt ( n - 2 ) - '0' ;\n  return ( ( second_last * 10 + last ) % 4 == 0 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " bool check ( string str ) {\n  int n = str . length ( );\n  if ( n == 0 ) return false;\n  if ( n == 1 ) return ( ( str [ 0 ] - '0' ) % 4 == 0 );\n  int last = str [ n - 1 ] - '0';\n  int second_last = str [ n - 2 ] - '0';\n  return ( ( second_last * 10 + last ) % 4 == 0 );\n}", "target_program": " def check ( st ) :\n    n = len ( st )\n    if ( n == 0 ) :\n        return False\n    if ( n == 1 ) :\n        return ( ( st [ 0 ] - '0' ) % 4 == 0 )\n    last = ( int ) ( st [ n - 1 ] )\n    second_last = ( int ) ( st [ n - 2 ] )\n    return ( ( second_last * 10 + last ) % 4 == 0 )"}
{"source": "python", "target": "java", "source_program": " def rectCount ( n , m ) :\n    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4", "target_program": " public static long rectCount ( int n , int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def rectCount ( n , m ) :\n    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4", "target_program": " int rectCount ( int n, int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4;\n}"}
{"source": "java", "target": "python", "source_program": " public static long rectCount ( int n , int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;\n}", "target_program": " def rectCount ( n , m ) :\n    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4"}
{"source": "java", "target": "cpp", "source_program": " public static long rectCount ( int n , int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;\n}", "target_program": " int rectCount ( int n, int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4;\n}"}
{"source": "cpp", "target": "java", "source_program": " int rectCount ( int n, int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4;\n}", "target_program": " public static long rectCount ( int n , int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4 ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int rectCount ( int n, int m ) {\n  return ( m * n * ( n + 1 ) * ( m + 1 ) ) / 4;\n}", "target_program": " def rectCount ( n , m ) :\n    return ( m * n * ( n + 1 ) * ( m + 1 ) ) // 4"}
{"source": "python", "target": "java", "source_program": " def intersection ( n ) :\n    return n * ( n - 1 ) ;", "target_program": " static int intersection ( int n ) {\n  return n * ( n - 1 ) ;\n}"}
{"source": "python", "target": "cpp", "source_program": " def intersection ( n ) :\n    return n * ( n - 1 ) ;", "target_program": " int intersection ( int n ) {\n  return n * ( n - 1 );\n}"}
{"source": "java", "target": "python", "source_program": " static int intersection ( int n ) {\n  return n * ( n - 1 ) ;\n}", "target_program": " def intersection ( n ) :\n    return n * ( n - 1 ) ;"}
{"source": "java", "target": "cpp", "source_program": " static int intersection ( int n ) {\n  return n * ( n - 1 ) ;\n}", "target_program": " int intersection ( int n ) {\n  return n * ( n - 1 );\n}"}
{"source": "cpp", "target": "java", "source_program": " int intersection ( int n ) {\n  return n * ( n - 1 );\n}", "target_program": " static int intersection ( int n ) {\n  return n * ( n - 1 ) ;\n}"}
{"source": "cpp", "target": "python", "source_program": " int intersection ( int n ) {\n  return n * ( n - 1 );\n}", "target_program": " def intersection ( n ) :\n    return n * ( n - 1 ) ;"}
